
Doktorat_G431_3_polemotor_git.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b58c  080001d8  080001d8  000101d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000680  0800b764  0800b764  0001b764  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800bde4  0800bde4  00020028  2**0
                  CONTENTS
  4 .ARM          00000008  0800bde4  0800bde4  0001bde4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800bdec  0800bdec  00020028  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800bdec  0800bdec  0001bdec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800bdf0  0800bdf0  0001bdf0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000028  20000000  0800bdf4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004f8  20000028  0800be1c  00020028  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000520  0800be1c  00020520  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020028  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020058  2**0
                  CONTENTS, READONLY
 13 .debug_info   00021730  00000000  00000000  0002009b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000038cd  00000000  00000000  000417cb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001c00  00000000  00000000  00045098  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001aa8  00000000  00000000  00046c98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00022c33  00000000  00000000  00048740  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001fa2c  00000000  00000000  0006b373  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e7ef0  00000000  00000000  0008ad9f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00007b24  00000000  00000000  00172c90  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000028 	.word	0x20000028
 80001f4:	00000000 	.word	0x00000000
 80001f8:	0800b74c 	.word	0x0800b74c

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	2000002c 	.word	0x2000002c
 8000214:	0800b74c 	.word	0x0800b74c

08000218 <__aeabi_dmul>:
 8000218:	b570      	push	{r4, r5, r6, lr}
 800021a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800021e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000222:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000226:	bf1d      	ittte	ne
 8000228:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800022c:	ea94 0f0c 	teqne	r4, ip
 8000230:	ea95 0f0c 	teqne	r5, ip
 8000234:	f000 f8de 	bleq	80003f4 <__aeabi_dmul+0x1dc>
 8000238:	442c      	add	r4, r5
 800023a:	ea81 0603 	eor.w	r6, r1, r3
 800023e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000242:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000246:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800024a:	bf18      	it	ne
 800024c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000250:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000254:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000258:	d038      	beq.n	80002cc <__aeabi_dmul+0xb4>
 800025a:	fba0 ce02 	umull	ip, lr, r0, r2
 800025e:	f04f 0500 	mov.w	r5, #0
 8000262:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000266:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800026a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800026e:	f04f 0600 	mov.w	r6, #0
 8000272:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000276:	f09c 0f00 	teq	ip, #0
 800027a:	bf18      	it	ne
 800027c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000280:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000284:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000288:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800028c:	d204      	bcs.n	8000298 <__aeabi_dmul+0x80>
 800028e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000292:	416d      	adcs	r5, r5
 8000294:	eb46 0606 	adc.w	r6, r6, r6
 8000298:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800029c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80002a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80002a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80002a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80002ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80002b0:	bf88      	it	hi
 80002b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80002b6:	d81e      	bhi.n	80002f6 <__aeabi_dmul+0xde>
 80002b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80002bc:	bf08      	it	eq
 80002be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80002c2:	f150 0000 	adcs.w	r0, r0, #0
 80002c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002ca:	bd70      	pop	{r4, r5, r6, pc}
 80002cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80002d0:	ea46 0101 	orr.w	r1, r6, r1
 80002d4:	ea40 0002 	orr.w	r0, r0, r2
 80002d8:	ea81 0103 	eor.w	r1, r1, r3
 80002dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80002e0:	bfc2      	ittt	gt
 80002e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80002e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80002ea:	bd70      	popgt	{r4, r5, r6, pc}
 80002ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80002f0:	f04f 0e00 	mov.w	lr, #0
 80002f4:	3c01      	subs	r4, #1
 80002f6:	f300 80ab 	bgt.w	8000450 <__aeabi_dmul+0x238>
 80002fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80002fe:	bfde      	ittt	le
 8000300:	2000      	movle	r0, #0
 8000302:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000306:	bd70      	pople	{r4, r5, r6, pc}
 8000308:	f1c4 0400 	rsb	r4, r4, #0
 800030c:	3c20      	subs	r4, #32
 800030e:	da35      	bge.n	800037c <__aeabi_dmul+0x164>
 8000310:	340c      	adds	r4, #12
 8000312:	dc1b      	bgt.n	800034c <__aeabi_dmul+0x134>
 8000314:	f104 0414 	add.w	r4, r4, #20
 8000318:	f1c4 0520 	rsb	r5, r4, #32
 800031c:	fa00 f305 	lsl.w	r3, r0, r5
 8000320:	fa20 f004 	lsr.w	r0, r0, r4
 8000324:	fa01 f205 	lsl.w	r2, r1, r5
 8000328:	ea40 0002 	orr.w	r0, r0, r2
 800032c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000330:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000334:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000338:	fa21 f604 	lsr.w	r6, r1, r4
 800033c:	eb42 0106 	adc.w	r1, r2, r6
 8000340:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000344:	bf08      	it	eq
 8000346:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800034a:	bd70      	pop	{r4, r5, r6, pc}
 800034c:	f1c4 040c 	rsb	r4, r4, #12
 8000350:	f1c4 0520 	rsb	r5, r4, #32
 8000354:	fa00 f304 	lsl.w	r3, r0, r4
 8000358:	fa20 f005 	lsr.w	r0, r0, r5
 800035c:	fa01 f204 	lsl.w	r2, r1, r4
 8000360:	ea40 0002 	orr.w	r0, r0, r2
 8000364:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000368:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000374:	bf08      	it	eq
 8000376:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800037a:	bd70      	pop	{r4, r5, r6, pc}
 800037c:	f1c4 0520 	rsb	r5, r4, #32
 8000380:	fa00 f205 	lsl.w	r2, r0, r5
 8000384:	ea4e 0e02 	orr.w	lr, lr, r2
 8000388:	fa20 f304 	lsr.w	r3, r0, r4
 800038c:	fa01 f205 	lsl.w	r2, r1, r5
 8000390:	ea43 0302 	orr.w	r3, r3, r2
 8000394:	fa21 f004 	lsr.w	r0, r1, r4
 8000398:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800039c:	fa21 f204 	lsr.w	r2, r1, r4
 80003a0:	ea20 0002 	bic.w	r0, r0, r2
 80003a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80003a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003ac:	bf08      	it	eq
 80003ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003b2:	bd70      	pop	{r4, r5, r6, pc}
 80003b4:	f094 0f00 	teq	r4, #0
 80003b8:	d10f      	bne.n	80003da <__aeabi_dmul+0x1c2>
 80003ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80003be:	0040      	lsls	r0, r0, #1
 80003c0:	eb41 0101 	adc.w	r1, r1, r1
 80003c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003c8:	bf08      	it	eq
 80003ca:	3c01      	subeq	r4, #1
 80003cc:	d0f7      	beq.n	80003be <__aeabi_dmul+0x1a6>
 80003ce:	ea41 0106 	orr.w	r1, r1, r6
 80003d2:	f095 0f00 	teq	r5, #0
 80003d6:	bf18      	it	ne
 80003d8:	4770      	bxne	lr
 80003da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80003de:	0052      	lsls	r2, r2, #1
 80003e0:	eb43 0303 	adc.w	r3, r3, r3
 80003e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80003e8:	bf08      	it	eq
 80003ea:	3d01      	subeq	r5, #1
 80003ec:	d0f7      	beq.n	80003de <__aeabi_dmul+0x1c6>
 80003ee:	ea43 0306 	orr.w	r3, r3, r6
 80003f2:	4770      	bx	lr
 80003f4:	ea94 0f0c 	teq	r4, ip
 80003f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80003fc:	bf18      	it	ne
 80003fe:	ea95 0f0c 	teqne	r5, ip
 8000402:	d00c      	beq.n	800041e <__aeabi_dmul+0x206>
 8000404:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000408:	bf18      	it	ne
 800040a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800040e:	d1d1      	bne.n	80003b4 <__aeabi_dmul+0x19c>
 8000410:	ea81 0103 	eor.w	r1, r1, r3
 8000414:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000418:	f04f 0000 	mov.w	r0, #0
 800041c:	bd70      	pop	{r4, r5, r6, pc}
 800041e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000422:	bf06      	itte	eq
 8000424:	4610      	moveq	r0, r2
 8000426:	4619      	moveq	r1, r3
 8000428:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800042c:	d019      	beq.n	8000462 <__aeabi_dmul+0x24a>
 800042e:	ea94 0f0c 	teq	r4, ip
 8000432:	d102      	bne.n	800043a <__aeabi_dmul+0x222>
 8000434:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000438:	d113      	bne.n	8000462 <__aeabi_dmul+0x24a>
 800043a:	ea95 0f0c 	teq	r5, ip
 800043e:	d105      	bne.n	800044c <__aeabi_dmul+0x234>
 8000440:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000444:	bf1c      	itt	ne
 8000446:	4610      	movne	r0, r2
 8000448:	4619      	movne	r1, r3
 800044a:	d10a      	bne.n	8000462 <__aeabi_dmul+0x24a>
 800044c:	ea81 0103 	eor.w	r1, r1, r3
 8000450:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000454:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000458:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800045c:	f04f 0000 	mov.w	r0, #0
 8000460:	bd70      	pop	{r4, r5, r6, pc}
 8000462:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000466:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800046a:	bd70      	pop	{r4, r5, r6, pc}

0800046c <__aeabi_drsub>:
 800046c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000470:	e002      	b.n	8000478 <__adddf3>
 8000472:	bf00      	nop

08000474 <__aeabi_dsub>:
 8000474:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000478 <__adddf3>:
 8000478:	b530      	push	{r4, r5, lr}
 800047a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800047e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000482:	ea94 0f05 	teq	r4, r5
 8000486:	bf08      	it	eq
 8000488:	ea90 0f02 	teqeq	r0, r2
 800048c:	bf1f      	itttt	ne
 800048e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000492:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000496:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800049a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800049e:	f000 80e2 	beq.w	8000666 <__adddf3+0x1ee>
 80004a2:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80004a6:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80004aa:	bfb8      	it	lt
 80004ac:	426d      	neglt	r5, r5
 80004ae:	dd0c      	ble.n	80004ca <__adddf3+0x52>
 80004b0:	442c      	add	r4, r5
 80004b2:	ea80 0202 	eor.w	r2, r0, r2
 80004b6:	ea81 0303 	eor.w	r3, r1, r3
 80004ba:	ea82 0000 	eor.w	r0, r2, r0
 80004be:	ea83 0101 	eor.w	r1, r3, r1
 80004c2:	ea80 0202 	eor.w	r2, r0, r2
 80004c6:	ea81 0303 	eor.w	r3, r1, r3
 80004ca:	2d36      	cmp	r5, #54	; 0x36
 80004cc:	bf88      	it	hi
 80004ce:	bd30      	pophi	{r4, r5, pc}
 80004d0:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80004d4:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80004d8:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80004dc:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80004e0:	d002      	beq.n	80004e8 <__adddf3+0x70>
 80004e2:	4240      	negs	r0, r0
 80004e4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004e8:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80004ec:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80004f0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80004f4:	d002      	beq.n	80004fc <__adddf3+0x84>
 80004f6:	4252      	negs	r2, r2
 80004f8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80004fc:	ea94 0f05 	teq	r4, r5
 8000500:	f000 80a7 	beq.w	8000652 <__adddf3+0x1da>
 8000504:	f1a4 0401 	sub.w	r4, r4, #1
 8000508:	f1d5 0e20 	rsbs	lr, r5, #32
 800050c:	db0d      	blt.n	800052a <__adddf3+0xb2>
 800050e:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000512:	fa22 f205 	lsr.w	r2, r2, r5
 8000516:	1880      	adds	r0, r0, r2
 8000518:	f141 0100 	adc.w	r1, r1, #0
 800051c:	fa03 f20e 	lsl.w	r2, r3, lr
 8000520:	1880      	adds	r0, r0, r2
 8000522:	fa43 f305 	asr.w	r3, r3, r5
 8000526:	4159      	adcs	r1, r3
 8000528:	e00e      	b.n	8000548 <__adddf3+0xd0>
 800052a:	f1a5 0520 	sub.w	r5, r5, #32
 800052e:	f10e 0e20 	add.w	lr, lr, #32
 8000532:	2a01      	cmp	r2, #1
 8000534:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000538:	bf28      	it	cs
 800053a:	f04c 0c02 	orrcs.w	ip, ip, #2
 800053e:	fa43 f305 	asr.w	r3, r3, r5
 8000542:	18c0      	adds	r0, r0, r3
 8000544:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000548:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800054c:	d507      	bpl.n	800055e <__adddf3+0xe6>
 800054e:	f04f 0e00 	mov.w	lr, #0
 8000552:	f1dc 0c00 	rsbs	ip, ip, #0
 8000556:	eb7e 0000 	sbcs.w	r0, lr, r0
 800055a:	eb6e 0101 	sbc.w	r1, lr, r1
 800055e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000562:	d31b      	bcc.n	800059c <__adddf3+0x124>
 8000564:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000568:	d30c      	bcc.n	8000584 <__adddf3+0x10c>
 800056a:	0849      	lsrs	r1, r1, #1
 800056c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000570:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000574:	f104 0401 	add.w	r4, r4, #1
 8000578:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800057c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000580:	f080 809a 	bcs.w	80006b8 <__adddf3+0x240>
 8000584:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000588:	bf08      	it	eq
 800058a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800058e:	f150 0000 	adcs.w	r0, r0, #0
 8000592:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000596:	ea41 0105 	orr.w	r1, r1, r5
 800059a:	bd30      	pop	{r4, r5, pc}
 800059c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80005a0:	4140      	adcs	r0, r0
 80005a2:	eb41 0101 	adc.w	r1, r1, r1
 80005a6:	3c01      	subs	r4, #1
 80005a8:	bf28      	it	cs
 80005aa:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80005ae:	d2e9      	bcs.n	8000584 <__adddf3+0x10c>
 80005b0:	f091 0f00 	teq	r1, #0
 80005b4:	bf04      	itt	eq
 80005b6:	4601      	moveq	r1, r0
 80005b8:	2000      	moveq	r0, #0
 80005ba:	fab1 f381 	clz	r3, r1
 80005be:	bf08      	it	eq
 80005c0:	3320      	addeq	r3, #32
 80005c2:	f1a3 030b 	sub.w	r3, r3, #11
 80005c6:	f1b3 0220 	subs.w	r2, r3, #32
 80005ca:	da0c      	bge.n	80005e6 <__adddf3+0x16e>
 80005cc:	320c      	adds	r2, #12
 80005ce:	dd08      	ble.n	80005e2 <__adddf3+0x16a>
 80005d0:	f102 0c14 	add.w	ip, r2, #20
 80005d4:	f1c2 020c 	rsb	r2, r2, #12
 80005d8:	fa01 f00c 	lsl.w	r0, r1, ip
 80005dc:	fa21 f102 	lsr.w	r1, r1, r2
 80005e0:	e00c      	b.n	80005fc <__adddf3+0x184>
 80005e2:	f102 0214 	add.w	r2, r2, #20
 80005e6:	bfd8      	it	le
 80005e8:	f1c2 0c20 	rsble	ip, r2, #32
 80005ec:	fa01 f102 	lsl.w	r1, r1, r2
 80005f0:	fa20 fc0c 	lsr.w	ip, r0, ip
 80005f4:	bfdc      	itt	le
 80005f6:	ea41 010c 	orrle.w	r1, r1, ip
 80005fa:	4090      	lslle	r0, r2
 80005fc:	1ae4      	subs	r4, r4, r3
 80005fe:	bfa2      	ittt	ge
 8000600:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000604:	4329      	orrge	r1, r5
 8000606:	bd30      	popge	{r4, r5, pc}
 8000608:	ea6f 0404 	mvn.w	r4, r4
 800060c:	3c1f      	subs	r4, #31
 800060e:	da1c      	bge.n	800064a <__adddf3+0x1d2>
 8000610:	340c      	adds	r4, #12
 8000612:	dc0e      	bgt.n	8000632 <__adddf3+0x1ba>
 8000614:	f104 0414 	add.w	r4, r4, #20
 8000618:	f1c4 0220 	rsb	r2, r4, #32
 800061c:	fa20 f004 	lsr.w	r0, r0, r4
 8000620:	fa01 f302 	lsl.w	r3, r1, r2
 8000624:	ea40 0003 	orr.w	r0, r0, r3
 8000628:	fa21 f304 	lsr.w	r3, r1, r4
 800062c:	ea45 0103 	orr.w	r1, r5, r3
 8000630:	bd30      	pop	{r4, r5, pc}
 8000632:	f1c4 040c 	rsb	r4, r4, #12
 8000636:	f1c4 0220 	rsb	r2, r4, #32
 800063a:	fa20 f002 	lsr.w	r0, r0, r2
 800063e:	fa01 f304 	lsl.w	r3, r1, r4
 8000642:	ea40 0003 	orr.w	r0, r0, r3
 8000646:	4629      	mov	r1, r5
 8000648:	bd30      	pop	{r4, r5, pc}
 800064a:	fa21 f004 	lsr.w	r0, r1, r4
 800064e:	4629      	mov	r1, r5
 8000650:	bd30      	pop	{r4, r5, pc}
 8000652:	f094 0f00 	teq	r4, #0
 8000656:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800065a:	bf06      	itte	eq
 800065c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000660:	3401      	addeq	r4, #1
 8000662:	3d01      	subne	r5, #1
 8000664:	e74e      	b.n	8000504 <__adddf3+0x8c>
 8000666:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800066a:	bf18      	it	ne
 800066c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000670:	d029      	beq.n	80006c6 <__adddf3+0x24e>
 8000672:	ea94 0f05 	teq	r4, r5
 8000676:	bf08      	it	eq
 8000678:	ea90 0f02 	teqeq	r0, r2
 800067c:	d005      	beq.n	800068a <__adddf3+0x212>
 800067e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000682:	bf04      	itt	eq
 8000684:	4619      	moveq	r1, r3
 8000686:	4610      	moveq	r0, r2
 8000688:	bd30      	pop	{r4, r5, pc}
 800068a:	ea91 0f03 	teq	r1, r3
 800068e:	bf1e      	ittt	ne
 8000690:	2100      	movne	r1, #0
 8000692:	2000      	movne	r0, #0
 8000694:	bd30      	popne	{r4, r5, pc}
 8000696:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800069a:	d105      	bne.n	80006a8 <__adddf3+0x230>
 800069c:	0040      	lsls	r0, r0, #1
 800069e:	4149      	adcs	r1, r1
 80006a0:	bf28      	it	cs
 80006a2:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80006a6:	bd30      	pop	{r4, r5, pc}
 80006a8:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80006ac:	bf3c      	itt	cc
 80006ae:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80006b2:	bd30      	popcc	{r4, r5, pc}
 80006b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80006b8:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80006bc:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80006c0:	f04f 0000 	mov.w	r0, #0
 80006c4:	bd30      	pop	{r4, r5, pc}
 80006c6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80006ca:	bf1a      	itte	ne
 80006cc:	4619      	movne	r1, r3
 80006ce:	4610      	movne	r0, r2
 80006d0:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80006d4:	bf1c      	itt	ne
 80006d6:	460b      	movne	r3, r1
 80006d8:	4602      	movne	r2, r0
 80006da:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80006de:	bf06      	itte	eq
 80006e0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80006e4:	ea91 0f03 	teqeq	r1, r3
 80006e8:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80006ec:	bd30      	pop	{r4, r5, pc}
 80006ee:	bf00      	nop

080006f0 <__aeabi_ui2d>:
 80006f0:	f090 0f00 	teq	r0, #0
 80006f4:	bf04      	itt	eq
 80006f6:	2100      	moveq	r1, #0
 80006f8:	4770      	bxeq	lr
 80006fa:	b530      	push	{r4, r5, lr}
 80006fc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000700:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000704:	f04f 0500 	mov.w	r5, #0
 8000708:	f04f 0100 	mov.w	r1, #0
 800070c:	e750      	b.n	80005b0 <__adddf3+0x138>
 800070e:	bf00      	nop

08000710 <__aeabi_i2d>:
 8000710:	f090 0f00 	teq	r0, #0
 8000714:	bf04      	itt	eq
 8000716:	2100      	moveq	r1, #0
 8000718:	4770      	bxeq	lr
 800071a:	b530      	push	{r4, r5, lr}
 800071c:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000720:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000724:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000728:	bf48      	it	mi
 800072a:	4240      	negmi	r0, r0
 800072c:	f04f 0100 	mov.w	r1, #0
 8000730:	e73e      	b.n	80005b0 <__adddf3+0x138>
 8000732:	bf00      	nop

08000734 <__aeabi_f2d>:
 8000734:	0042      	lsls	r2, r0, #1
 8000736:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800073a:	ea4f 0131 	mov.w	r1, r1, rrx
 800073e:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000742:	bf1f      	itttt	ne
 8000744:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000748:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 800074c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000750:	4770      	bxne	lr
 8000752:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000756:	bf08      	it	eq
 8000758:	4770      	bxeq	lr
 800075a:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800075e:	bf04      	itt	eq
 8000760:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000764:	4770      	bxeq	lr
 8000766:	b530      	push	{r4, r5, lr}
 8000768:	f44f 7460 	mov.w	r4, #896	; 0x380
 800076c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000770:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000774:	e71c      	b.n	80005b0 <__adddf3+0x138>
 8000776:	bf00      	nop

08000778 <__aeabi_ul2d>:
 8000778:	ea50 0201 	orrs.w	r2, r0, r1
 800077c:	bf08      	it	eq
 800077e:	4770      	bxeq	lr
 8000780:	b530      	push	{r4, r5, lr}
 8000782:	f04f 0500 	mov.w	r5, #0
 8000786:	e00a      	b.n	800079e <__aeabi_l2d+0x16>

08000788 <__aeabi_l2d>:
 8000788:	ea50 0201 	orrs.w	r2, r0, r1
 800078c:	bf08      	it	eq
 800078e:	4770      	bxeq	lr
 8000790:	b530      	push	{r4, r5, lr}
 8000792:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000796:	d502      	bpl.n	800079e <__aeabi_l2d+0x16>
 8000798:	4240      	negs	r0, r0
 800079a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800079e:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80007a2:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80007a6:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80007aa:	f43f aed8 	beq.w	800055e <__adddf3+0xe6>
 80007ae:	f04f 0203 	mov.w	r2, #3
 80007b2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80007b6:	bf18      	it	ne
 80007b8:	3203      	addne	r2, #3
 80007ba:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80007be:	bf18      	it	ne
 80007c0:	3203      	addne	r2, #3
 80007c2:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80007c6:	f1c2 0320 	rsb	r3, r2, #32
 80007ca:	fa00 fc03 	lsl.w	ip, r0, r3
 80007ce:	fa20 f002 	lsr.w	r0, r0, r2
 80007d2:	fa01 fe03 	lsl.w	lr, r1, r3
 80007d6:	ea40 000e 	orr.w	r0, r0, lr
 80007da:	fa21 f102 	lsr.w	r1, r1, r2
 80007de:	4414      	add	r4, r2
 80007e0:	e6bd      	b.n	800055e <__adddf3+0xe6>
 80007e2:	bf00      	nop

080007e4 <__aeabi_d2iz>:
 80007e4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80007e8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80007ec:	d215      	bcs.n	800081a <__aeabi_d2iz+0x36>
 80007ee:	d511      	bpl.n	8000814 <__aeabi_d2iz+0x30>
 80007f0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80007f4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80007f8:	d912      	bls.n	8000820 <__aeabi_d2iz+0x3c>
 80007fa:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80007fe:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000802:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000806:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800080a:	fa23 f002 	lsr.w	r0, r3, r2
 800080e:	bf18      	it	ne
 8000810:	4240      	negne	r0, r0
 8000812:	4770      	bx	lr
 8000814:	f04f 0000 	mov.w	r0, #0
 8000818:	4770      	bx	lr
 800081a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800081e:	d105      	bne.n	800082c <__aeabi_d2iz+0x48>
 8000820:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000824:	bf08      	it	eq
 8000826:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 800082a:	4770      	bx	lr
 800082c:	f04f 0000 	mov.w	r0, #0
 8000830:	4770      	bx	lr
 8000832:	bf00      	nop

08000834 <__aeabi_d2uiz>:
 8000834:	004a      	lsls	r2, r1, #1
 8000836:	d211      	bcs.n	800085c <__aeabi_d2uiz+0x28>
 8000838:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 800083c:	d211      	bcs.n	8000862 <__aeabi_d2uiz+0x2e>
 800083e:	d50d      	bpl.n	800085c <__aeabi_d2uiz+0x28>
 8000840:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000844:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000848:	d40e      	bmi.n	8000868 <__aeabi_d2uiz+0x34>
 800084a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800084e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000852:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000856:	fa23 f002 	lsr.w	r0, r3, r2
 800085a:	4770      	bx	lr
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	4770      	bx	lr
 8000862:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000866:	d102      	bne.n	800086e <__aeabi_d2uiz+0x3a>
 8000868:	f04f 30ff 	mov.w	r0, #4294967295
 800086c:	4770      	bx	lr
 800086e:	f04f 0000 	mov.w	r0, #0
 8000872:	4770      	bx	lr

08000874 <__aeabi_uldivmod>:
 8000874:	b953      	cbnz	r3, 800088c <__aeabi_uldivmod+0x18>
 8000876:	b94a      	cbnz	r2, 800088c <__aeabi_uldivmod+0x18>
 8000878:	2900      	cmp	r1, #0
 800087a:	bf08      	it	eq
 800087c:	2800      	cmpeq	r0, #0
 800087e:	bf1c      	itt	ne
 8000880:	f04f 31ff 	movne.w	r1, #4294967295
 8000884:	f04f 30ff 	movne.w	r0, #4294967295
 8000888:	f000 b970 	b.w	8000b6c <__aeabi_idiv0>
 800088c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000890:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000894:	f000 f806 	bl	80008a4 <__udivmoddi4>
 8000898:	f8dd e004 	ldr.w	lr, [sp, #4]
 800089c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80008a0:	b004      	add	sp, #16
 80008a2:	4770      	bx	lr

080008a4 <__udivmoddi4>:
 80008a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80008a8:	9e08      	ldr	r6, [sp, #32]
 80008aa:	460d      	mov	r5, r1
 80008ac:	4604      	mov	r4, r0
 80008ae:	460f      	mov	r7, r1
 80008b0:	2b00      	cmp	r3, #0
 80008b2:	d14a      	bne.n	800094a <__udivmoddi4+0xa6>
 80008b4:	428a      	cmp	r2, r1
 80008b6:	4694      	mov	ip, r2
 80008b8:	d965      	bls.n	8000986 <__udivmoddi4+0xe2>
 80008ba:	fab2 f382 	clz	r3, r2
 80008be:	b143      	cbz	r3, 80008d2 <__udivmoddi4+0x2e>
 80008c0:	fa02 fc03 	lsl.w	ip, r2, r3
 80008c4:	f1c3 0220 	rsb	r2, r3, #32
 80008c8:	409f      	lsls	r7, r3
 80008ca:	fa20 f202 	lsr.w	r2, r0, r2
 80008ce:	4317      	orrs	r7, r2
 80008d0:	409c      	lsls	r4, r3
 80008d2:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80008d6:	fa1f f58c 	uxth.w	r5, ip
 80008da:	fbb7 f1fe 	udiv	r1, r7, lr
 80008de:	0c22      	lsrs	r2, r4, #16
 80008e0:	fb0e 7711 	mls	r7, lr, r1, r7
 80008e4:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80008e8:	fb01 f005 	mul.w	r0, r1, r5
 80008ec:	4290      	cmp	r0, r2
 80008ee:	d90a      	bls.n	8000906 <__udivmoddi4+0x62>
 80008f0:	eb1c 0202 	adds.w	r2, ip, r2
 80008f4:	f101 37ff 	add.w	r7, r1, #4294967295
 80008f8:	f080 811c 	bcs.w	8000b34 <__udivmoddi4+0x290>
 80008fc:	4290      	cmp	r0, r2
 80008fe:	f240 8119 	bls.w	8000b34 <__udivmoddi4+0x290>
 8000902:	3902      	subs	r1, #2
 8000904:	4462      	add	r2, ip
 8000906:	1a12      	subs	r2, r2, r0
 8000908:	b2a4      	uxth	r4, r4
 800090a:	fbb2 f0fe 	udiv	r0, r2, lr
 800090e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000912:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000916:	fb00 f505 	mul.w	r5, r0, r5
 800091a:	42a5      	cmp	r5, r4
 800091c:	d90a      	bls.n	8000934 <__udivmoddi4+0x90>
 800091e:	eb1c 0404 	adds.w	r4, ip, r4
 8000922:	f100 32ff 	add.w	r2, r0, #4294967295
 8000926:	f080 8107 	bcs.w	8000b38 <__udivmoddi4+0x294>
 800092a:	42a5      	cmp	r5, r4
 800092c:	f240 8104 	bls.w	8000b38 <__udivmoddi4+0x294>
 8000930:	4464      	add	r4, ip
 8000932:	3802      	subs	r0, #2
 8000934:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000938:	1b64      	subs	r4, r4, r5
 800093a:	2100      	movs	r1, #0
 800093c:	b11e      	cbz	r6, 8000946 <__udivmoddi4+0xa2>
 800093e:	40dc      	lsrs	r4, r3
 8000940:	2300      	movs	r3, #0
 8000942:	e9c6 4300 	strd	r4, r3, [r6]
 8000946:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800094a:	428b      	cmp	r3, r1
 800094c:	d908      	bls.n	8000960 <__udivmoddi4+0xbc>
 800094e:	2e00      	cmp	r6, #0
 8000950:	f000 80ed 	beq.w	8000b2e <__udivmoddi4+0x28a>
 8000954:	2100      	movs	r1, #0
 8000956:	e9c6 0500 	strd	r0, r5, [r6]
 800095a:	4608      	mov	r0, r1
 800095c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000960:	fab3 f183 	clz	r1, r3
 8000964:	2900      	cmp	r1, #0
 8000966:	d149      	bne.n	80009fc <__udivmoddi4+0x158>
 8000968:	42ab      	cmp	r3, r5
 800096a:	d302      	bcc.n	8000972 <__udivmoddi4+0xce>
 800096c:	4282      	cmp	r2, r0
 800096e:	f200 80f8 	bhi.w	8000b62 <__udivmoddi4+0x2be>
 8000972:	1a84      	subs	r4, r0, r2
 8000974:	eb65 0203 	sbc.w	r2, r5, r3
 8000978:	2001      	movs	r0, #1
 800097a:	4617      	mov	r7, r2
 800097c:	2e00      	cmp	r6, #0
 800097e:	d0e2      	beq.n	8000946 <__udivmoddi4+0xa2>
 8000980:	e9c6 4700 	strd	r4, r7, [r6]
 8000984:	e7df      	b.n	8000946 <__udivmoddi4+0xa2>
 8000986:	b902      	cbnz	r2, 800098a <__udivmoddi4+0xe6>
 8000988:	deff      	udf	#255	; 0xff
 800098a:	fab2 f382 	clz	r3, r2
 800098e:	2b00      	cmp	r3, #0
 8000990:	f040 8090 	bne.w	8000ab4 <__udivmoddi4+0x210>
 8000994:	1a8a      	subs	r2, r1, r2
 8000996:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800099a:	fa1f fe8c 	uxth.w	lr, ip
 800099e:	2101      	movs	r1, #1
 80009a0:	fbb2 f5f7 	udiv	r5, r2, r7
 80009a4:	fb07 2015 	mls	r0, r7, r5, r2
 80009a8:	0c22      	lsrs	r2, r4, #16
 80009aa:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80009ae:	fb0e f005 	mul.w	r0, lr, r5
 80009b2:	4290      	cmp	r0, r2
 80009b4:	d908      	bls.n	80009c8 <__udivmoddi4+0x124>
 80009b6:	eb1c 0202 	adds.w	r2, ip, r2
 80009ba:	f105 38ff 	add.w	r8, r5, #4294967295
 80009be:	d202      	bcs.n	80009c6 <__udivmoddi4+0x122>
 80009c0:	4290      	cmp	r0, r2
 80009c2:	f200 80cb 	bhi.w	8000b5c <__udivmoddi4+0x2b8>
 80009c6:	4645      	mov	r5, r8
 80009c8:	1a12      	subs	r2, r2, r0
 80009ca:	b2a4      	uxth	r4, r4
 80009cc:	fbb2 f0f7 	udiv	r0, r2, r7
 80009d0:	fb07 2210 	mls	r2, r7, r0, r2
 80009d4:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80009d8:	fb0e fe00 	mul.w	lr, lr, r0
 80009dc:	45a6      	cmp	lr, r4
 80009de:	d908      	bls.n	80009f2 <__udivmoddi4+0x14e>
 80009e0:	eb1c 0404 	adds.w	r4, ip, r4
 80009e4:	f100 32ff 	add.w	r2, r0, #4294967295
 80009e8:	d202      	bcs.n	80009f0 <__udivmoddi4+0x14c>
 80009ea:	45a6      	cmp	lr, r4
 80009ec:	f200 80bb 	bhi.w	8000b66 <__udivmoddi4+0x2c2>
 80009f0:	4610      	mov	r0, r2
 80009f2:	eba4 040e 	sub.w	r4, r4, lr
 80009f6:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80009fa:	e79f      	b.n	800093c <__udivmoddi4+0x98>
 80009fc:	f1c1 0720 	rsb	r7, r1, #32
 8000a00:	408b      	lsls	r3, r1
 8000a02:	fa22 fc07 	lsr.w	ip, r2, r7
 8000a06:	ea4c 0c03 	orr.w	ip, ip, r3
 8000a0a:	fa05 f401 	lsl.w	r4, r5, r1
 8000a0e:	fa20 f307 	lsr.w	r3, r0, r7
 8000a12:	40fd      	lsrs	r5, r7
 8000a14:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000a18:	4323      	orrs	r3, r4
 8000a1a:	fbb5 f8f9 	udiv	r8, r5, r9
 8000a1e:	fa1f fe8c 	uxth.w	lr, ip
 8000a22:	fb09 5518 	mls	r5, r9, r8, r5
 8000a26:	0c1c      	lsrs	r4, r3, #16
 8000a28:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000a2c:	fb08 f50e 	mul.w	r5, r8, lr
 8000a30:	42a5      	cmp	r5, r4
 8000a32:	fa02 f201 	lsl.w	r2, r2, r1
 8000a36:	fa00 f001 	lsl.w	r0, r0, r1
 8000a3a:	d90b      	bls.n	8000a54 <__udivmoddi4+0x1b0>
 8000a3c:	eb1c 0404 	adds.w	r4, ip, r4
 8000a40:	f108 3aff 	add.w	sl, r8, #4294967295
 8000a44:	f080 8088 	bcs.w	8000b58 <__udivmoddi4+0x2b4>
 8000a48:	42a5      	cmp	r5, r4
 8000a4a:	f240 8085 	bls.w	8000b58 <__udivmoddi4+0x2b4>
 8000a4e:	f1a8 0802 	sub.w	r8, r8, #2
 8000a52:	4464      	add	r4, ip
 8000a54:	1b64      	subs	r4, r4, r5
 8000a56:	b29d      	uxth	r5, r3
 8000a58:	fbb4 f3f9 	udiv	r3, r4, r9
 8000a5c:	fb09 4413 	mls	r4, r9, r3, r4
 8000a60:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000a64:	fb03 fe0e 	mul.w	lr, r3, lr
 8000a68:	45a6      	cmp	lr, r4
 8000a6a:	d908      	bls.n	8000a7e <__udivmoddi4+0x1da>
 8000a6c:	eb1c 0404 	adds.w	r4, ip, r4
 8000a70:	f103 35ff 	add.w	r5, r3, #4294967295
 8000a74:	d26c      	bcs.n	8000b50 <__udivmoddi4+0x2ac>
 8000a76:	45a6      	cmp	lr, r4
 8000a78:	d96a      	bls.n	8000b50 <__udivmoddi4+0x2ac>
 8000a7a:	3b02      	subs	r3, #2
 8000a7c:	4464      	add	r4, ip
 8000a7e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000a82:	fba3 9502 	umull	r9, r5, r3, r2
 8000a86:	eba4 040e 	sub.w	r4, r4, lr
 8000a8a:	42ac      	cmp	r4, r5
 8000a8c:	46c8      	mov	r8, r9
 8000a8e:	46ae      	mov	lr, r5
 8000a90:	d356      	bcc.n	8000b40 <__udivmoddi4+0x29c>
 8000a92:	d053      	beq.n	8000b3c <__udivmoddi4+0x298>
 8000a94:	b156      	cbz	r6, 8000aac <__udivmoddi4+0x208>
 8000a96:	ebb0 0208 	subs.w	r2, r0, r8
 8000a9a:	eb64 040e 	sbc.w	r4, r4, lr
 8000a9e:	fa04 f707 	lsl.w	r7, r4, r7
 8000aa2:	40ca      	lsrs	r2, r1
 8000aa4:	40cc      	lsrs	r4, r1
 8000aa6:	4317      	orrs	r7, r2
 8000aa8:	e9c6 7400 	strd	r7, r4, [r6]
 8000aac:	4618      	mov	r0, r3
 8000aae:	2100      	movs	r1, #0
 8000ab0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ab4:	f1c3 0120 	rsb	r1, r3, #32
 8000ab8:	fa02 fc03 	lsl.w	ip, r2, r3
 8000abc:	fa20 f201 	lsr.w	r2, r0, r1
 8000ac0:	fa25 f101 	lsr.w	r1, r5, r1
 8000ac4:	409d      	lsls	r5, r3
 8000ac6:	432a      	orrs	r2, r5
 8000ac8:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000acc:	fa1f fe8c 	uxth.w	lr, ip
 8000ad0:	fbb1 f0f7 	udiv	r0, r1, r7
 8000ad4:	fb07 1510 	mls	r5, r7, r0, r1
 8000ad8:	0c11      	lsrs	r1, r2, #16
 8000ada:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000ade:	fb00 f50e 	mul.w	r5, r0, lr
 8000ae2:	428d      	cmp	r5, r1
 8000ae4:	fa04 f403 	lsl.w	r4, r4, r3
 8000ae8:	d908      	bls.n	8000afc <__udivmoddi4+0x258>
 8000aea:	eb1c 0101 	adds.w	r1, ip, r1
 8000aee:	f100 38ff 	add.w	r8, r0, #4294967295
 8000af2:	d22f      	bcs.n	8000b54 <__udivmoddi4+0x2b0>
 8000af4:	428d      	cmp	r5, r1
 8000af6:	d92d      	bls.n	8000b54 <__udivmoddi4+0x2b0>
 8000af8:	3802      	subs	r0, #2
 8000afa:	4461      	add	r1, ip
 8000afc:	1b49      	subs	r1, r1, r5
 8000afe:	b292      	uxth	r2, r2
 8000b00:	fbb1 f5f7 	udiv	r5, r1, r7
 8000b04:	fb07 1115 	mls	r1, r7, r5, r1
 8000b08:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000b0c:	fb05 f10e 	mul.w	r1, r5, lr
 8000b10:	4291      	cmp	r1, r2
 8000b12:	d908      	bls.n	8000b26 <__udivmoddi4+0x282>
 8000b14:	eb1c 0202 	adds.w	r2, ip, r2
 8000b18:	f105 38ff 	add.w	r8, r5, #4294967295
 8000b1c:	d216      	bcs.n	8000b4c <__udivmoddi4+0x2a8>
 8000b1e:	4291      	cmp	r1, r2
 8000b20:	d914      	bls.n	8000b4c <__udivmoddi4+0x2a8>
 8000b22:	3d02      	subs	r5, #2
 8000b24:	4462      	add	r2, ip
 8000b26:	1a52      	subs	r2, r2, r1
 8000b28:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000b2c:	e738      	b.n	80009a0 <__udivmoddi4+0xfc>
 8000b2e:	4631      	mov	r1, r6
 8000b30:	4630      	mov	r0, r6
 8000b32:	e708      	b.n	8000946 <__udivmoddi4+0xa2>
 8000b34:	4639      	mov	r1, r7
 8000b36:	e6e6      	b.n	8000906 <__udivmoddi4+0x62>
 8000b38:	4610      	mov	r0, r2
 8000b3a:	e6fb      	b.n	8000934 <__udivmoddi4+0x90>
 8000b3c:	4548      	cmp	r0, r9
 8000b3e:	d2a9      	bcs.n	8000a94 <__udivmoddi4+0x1f0>
 8000b40:	ebb9 0802 	subs.w	r8, r9, r2
 8000b44:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000b48:	3b01      	subs	r3, #1
 8000b4a:	e7a3      	b.n	8000a94 <__udivmoddi4+0x1f0>
 8000b4c:	4645      	mov	r5, r8
 8000b4e:	e7ea      	b.n	8000b26 <__udivmoddi4+0x282>
 8000b50:	462b      	mov	r3, r5
 8000b52:	e794      	b.n	8000a7e <__udivmoddi4+0x1da>
 8000b54:	4640      	mov	r0, r8
 8000b56:	e7d1      	b.n	8000afc <__udivmoddi4+0x258>
 8000b58:	46d0      	mov	r8, sl
 8000b5a:	e77b      	b.n	8000a54 <__udivmoddi4+0x1b0>
 8000b5c:	3d02      	subs	r5, #2
 8000b5e:	4462      	add	r2, ip
 8000b60:	e732      	b.n	80009c8 <__udivmoddi4+0x124>
 8000b62:	4608      	mov	r0, r1
 8000b64:	e70a      	b.n	800097c <__udivmoddi4+0xd8>
 8000b66:	4464      	add	r4, ip
 8000b68:	3802      	subs	r0, #2
 8000b6a:	e742      	b.n	80009f2 <__udivmoddi4+0x14e>

08000b6c <__aeabi_idiv0>:
 8000b6c:	4770      	bx	lr
 8000b6e:	bf00      	nop

08000b70 <PI_REG>:


  /* Regulatory PI*/

void PI_REG(PI_reg *Reg, int16_t fdb_value, int16_t ref_value, int32_t *pi_out)
 {
 8000b70:	b480      	push	{r7}
 8000b72:	b085      	sub	sp, #20
 8000b74:	af00      	add	r7, sp, #0
 8000b76:	60f8      	str	r0, [r7, #12]
 8000b78:	607b      	str	r3, [r7, #4]
 8000b7a:	460b      	mov	r3, r1
 8000b7c:	817b      	strh	r3, [r7, #10]
 8000b7e:	4613      	mov	r3, r2
 8000b80:	813b      	strh	r3, [r7, #8]
	/*uchyb regulacji*/
	Reg->error = (ref_value) - fdb_value; // dopisac antiwindup oraz limity wartosci aby nie doszlo do przeregulowan
 8000b82:	893a      	ldrh	r2, [r7, #8]
 8000b84:	897b      	ldrh	r3, [r7, #10]
 8000b86:	1ad3      	subs	r3, r2, r3
 8000b88:	b29b      	uxth	r3, r3
 8000b8a:	b21a      	sxth	r2, r3
 8000b8c:	68fb      	ldr	r3, [r7, #12]
 8000b8e:	801a      	strh	r2, [r3, #0]
	Reg->error_sum = Reg->error_sum + Reg->error; // kierunek nie gra tu roli, regulator dzia�a tak samo
 8000b90:	68fb      	ldr	r3, [r7, #12]
 8000b92:	685b      	ldr	r3, [r3, #4]
 8000b94:	68fa      	ldr	r2, [r7, #12]
 8000b96:	f9b2 2000 	ldrsh.w	r2, [r2]
 8000b9a:	441a      	add	r2, r3
 8000b9c:	68fb      	ldr	r3, [r7, #12]
 8000b9e:	605a      	str	r2, [r3, #4]

	if (Reg->error_sum > 1000000) Reg->error_sum  =  1000000;
 8000ba0:	68fb      	ldr	r3, [r7, #12]
 8000ba2:	685b      	ldr	r3, [r3, #4]
 8000ba4:	4a20      	ldr	r2, [pc, #128]	; (8000c28 <PI_REG+0xb8>)
 8000ba6:	4293      	cmp	r3, r2
 8000ba8:	dd02      	ble.n	8000bb0 <PI_REG+0x40>
 8000baa:	68fb      	ldr	r3, [r7, #12]
 8000bac:	4a1e      	ldr	r2, [pc, #120]	; (8000c28 <PI_REG+0xb8>)
 8000bae:	605a      	str	r2, [r3, #4]
	if (Reg->error_sum <-1000000) Reg->error_sum  = -1000000;
 8000bb0:	68fb      	ldr	r3, [r7, #12]
 8000bb2:	685b      	ldr	r3, [r3, #4]
 8000bb4:	4a1d      	ldr	r2, [pc, #116]	; (8000c2c <PI_REG+0xbc>)
 8000bb6:	4293      	cmp	r3, r2
 8000bb8:	da02      	bge.n	8000bc0 <PI_REG+0x50>
 8000bba:	68fb      	ldr	r3, [r7, #12]
 8000bbc:	4a1b      	ldr	r2, [pc, #108]	; (8000c2c <PI_REG+0xbc>)
 8000bbe:	605a      	str	r2, [r3, #4]
	Reg->out = (Reg->KP * Reg->error) + (Reg->KI * Reg->error_sum);
 8000bc0:	68fb      	ldr	r3, [r7, #12]
 8000bc2:	899b      	ldrh	r3, [r3, #12]
 8000bc4:	461a      	mov	r2, r3
 8000bc6:	68fb      	ldr	r3, [r7, #12]
 8000bc8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000bcc:	fb03 f202 	mul.w	r2, r3, r2
 8000bd0:	68fb      	ldr	r3, [r7, #12]
 8000bd2:	89db      	ldrh	r3, [r3, #14]
 8000bd4:	4619      	mov	r1, r3
 8000bd6:	68fb      	ldr	r3, [r7, #12]
 8000bd8:	685b      	ldr	r3, [r3, #4]
 8000bda:	fb01 f303 	mul.w	r3, r1, r3
 8000bde:	441a      	add	r2, r3
 8000be0:	68fb      	ldr	r3, [r7, #12]
 8000be2:	609a      	str	r2, [r3, #8]
	if(Reg->out > 10000000)Reg->out= 10000000;
 8000be4:	68fb      	ldr	r3, [r7, #12]
 8000be6:	689b      	ldr	r3, [r3, #8]
 8000be8:	4a11      	ldr	r2, [pc, #68]	; (8000c30 <PI_REG+0xc0>)
 8000bea:	4293      	cmp	r3, r2
 8000bec:	dd02      	ble.n	8000bf4 <PI_REG+0x84>
 8000bee:	68fb      	ldr	r3, [r7, #12]
 8000bf0:	4a0f      	ldr	r2, [pc, #60]	; (8000c30 <PI_REG+0xc0>)
 8000bf2:	609a      	str	r2, [r3, #8]
	if(Reg->out <-10000000)Reg->out=-10000000;
 8000bf4:	68fb      	ldr	r3, [r7, #12]
 8000bf6:	689b      	ldr	r3, [r3, #8]
 8000bf8:	4a0e      	ldr	r2, [pc, #56]	; (8000c34 <PI_REG+0xc4>)
 8000bfa:	4293      	cmp	r3, r2
 8000bfc:	da02      	bge.n	8000c04 <PI_REG+0x94>
 8000bfe:	68fb      	ldr	r3, [r7, #12]
 8000c00:	4a0c      	ldr	r2, [pc, #48]	; (8000c34 <PI_REG+0xc4>)
 8000c02:	609a      	str	r2, [r3, #8]

	*pi_out = (int16_t)(Reg->out/10000); //max output in decimal scale 1000
 8000c04:	68fb      	ldr	r3, [r7, #12]
 8000c06:	689b      	ldr	r3, [r3, #8]
 8000c08:	4a0b      	ldr	r2, [pc, #44]	; (8000c38 <PI_REG+0xc8>)
 8000c0a:	fb82 1203 	smull	r1, r2, r2, r3
 8000c0e:	1312      	asrs	r2, r2, #12
 8000c10:	17db      	asrs	r3, r3, #31
 8000c12:	1ad3      	subs	r3, r2, r3
 8000c14:	b21b      	sxth	r3, r3
 8000c16:	461a      	mov	r2, r3
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	601a      	str	r2, [r3, #0]

 }
 8000c1c:	bf00      	nop
 8000c1e:	3714      	adds	r7, #20
 8000c20:	46bd      	mov	sp, r7
 8000c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c26:	4770      	bx	lr
 8000c28:	000f4240 	.word	0x000f4240
 8000c2c:	fff0bdc0 	.word	0xfff0bdc0
 8000c30:	00989680 	.word	0x00989680
 8000c34:	ff676980 	.word	0xff676980
 8000c38:	68db8bad 	.word	0x68db8bad
 8000c3c:	00000000 	.word	0x00000000

08000c40 <angle_theta_calc>:



		/**OBLICZENIA KĄTA THETA**/
void angle_theta_calc()
{
 8000c40:	b580      	push	{r7, lr}
 8000c42:	b082      	sub	sp, #8
 8000c44:	af00      	add	r7, sp, #0
int16_t tmp_poz_walu;
tmp_poz_walu = pozycja_walu + rotor_offset; //0,044 bo dwie pary biegunów
 8000c46:	4b22      	ldr	r3, [pc, #136]	; (8000cd0 <angle_theta_calc+0x90>)
 8000c48:	881b      	ldrh	r3, [r3, #0]
 8000c4a:	b29a      	uxth	r2, r3
 8000c4c:	4b21      	ldr	r3, [pc, #132]	; (8000cd4 <angle_theta_calc+0x94>)
 8000c4e:	b29b      	uxth	r3, r3
 8000c50:	4413      	add	r3, r2
 8000c52:	b29b      	uxth	r3, r3
 8000c54:	80fb      	strh	r3, [r7, #6]

    if(tmp_poz_walu < 0){
 8000c56:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000c5a:	2b00      	cmp	r3, #0
 8000c5c:	da16      	bge.n	8000c8c <angle_theta_calc+0x4c>
	pozycja_walu_deg = (ENK_ABS_RES +  tmp_poz_walu) * 0.037; // bo 3 pp, 200 elementow tablicy = 16384/600
 8000c5e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000c62:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8000c66:	4618      	mov	r0, r3
 8000c68:	f7ff fd42 	bl	80006f0 <__aeabi_ui2d>
 8000c6c:	a316      	add	r3, pc, #88	; (adr r3, 8000cc8 <angle_theta_calc+0x88>)
 8000c6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000c72:	f7ff fad1 	bl	8000218 <__aeabi_dmul>
 8000c76:	4602      	mov	r2, r0
 8000c78:	460b      	mov	r3, r1
 8000c7a:	4610      	mov	r0, r2
 8000c7c:	4619      	mov	r1, r3
 8000c7e:	f7ff fdd9 	bl	8000834 <__aeabi_d2uiz>
 8000c82:	4603      	mov	r3, r0
 8000c84:	b29a      	uxth	r2, r3
 8000c86:	4b14      	ldr	r3, [pc, #80]	; (8000cd8 <angle_theta_calc+0x98>)
 8000c88:	801a      	strh	r2, [r3, #0]
    }
    else {
    pozycja_walu_deg = (pozycja_walu + rotor_offset) * 0.037;
    }
}
 8000c8a:	e017      	b.n	8000cbc <angle_theta_calc+0x7c>
    pozycja_walu_deg = (pozycja_walu + rotor_offset) * 0.037;
 8000c8c:	4b10      	ldr	r3, [pc, #64]	; (8000cd0 <angle_theta_calc+0x90>)
 8000c8e:	881b      	ldrh	r3, [r3, #0]
 8000c90:	b29b      	uxth	r3, r3
 8000c92:	461a      	mov	r2, r3
 8000c94:	4b0f      	ldr	r3, [pc, #60]	; (8000cd4 <angle_theta_calc+0x94>)
 8000c96:	4413      	add	r3, r2
 8000c98:	4618      	mov	r0, r3
 8000c9a:	f7ff fd39 	bl	8000710 <__aeabi_i2d>
 8000c9e:	a30a      	add	r3, pc, #40	; (adr r3, 8000cc8 <angle_theta_calc+0x88>)
 8000ca0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ca4:	f7ff fab8 	bl	8000218 <__aeabi_dmul>
 8000ca8:	4602      	mov	r2, r0
 8000caa:	460b      	mov	r3, r1
 8000cac:	4610      	mov	r0, r2
 8000cae:	4619      	mov	r1, r3
 8000cb0:	f7ff fdc0 	bl	8000834 <__aeabi_d2uiz>
 8000cb4:	4603      	mov	r3, r0
 8000cb6:	b29a      	uxth	r2, r3
 8000cb8:	4b07      	ldr	r3, [pc, #28]	; (8000cd8 <angle_theta_calc+0x98>)
 8000cba:	801a      	strh	r2, [r3, #0]
}
 8000cbc:	bf00      	nop
 8000cbe:	3708      	adds	r7, #8
 8000cc0:	46bd      	mov	sp, r7
 8000cc2:	bd80      	pop	{r7, pc}
 8000cc4:	f3af 8000 	nop.w
 8000cc8:	fbe76c8b 	.word	0xfbe76c8b
 8000ccc:	3fa2f1a9 	.word	0x3fa2f1a9
 8000cd0:	20000048 	.word	0x20000048
 8000cd4:	fffffd8a 	.word	0xfffffd8a
 8000cd8:	2000004a 	.word	0x2000004a
 8000cdc:	00000000 	.word	0x00000000

08000ce0 <clark_transf>:

		/**TRANSFORMACJA CLARK**/
void clark_transf(int16_t prad_a, int16_t prad_b, int16_t *alpha, int16_t *beta)
{
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	b084      	sub	sp, #16
 8000ce4:	af00      	add	r7, sp, #0
 8000ce6:	60ba      	str	r2, [r7, #8]
 8000ce8:	607b      	str	r3, [r7, #4]
 8000cea:	4603      	mov	r3, r0
 8000cec:	81fb      	strh	r3, [r7, #14]
 8000cee:	460b      	mov	r3, r1
 8000cf0:	81bb      	strh	r3, [r7, #12]
	*alpha = prad_a;
 8000cf2:	68bb      	ldr	r3, [r7, #8]
 8000cf4:	89fa      	ldrh	r2, [r7, #14]
 8000cf6:	801a      	strh	r2, [r3, #0]
	*beta  = (prad_a + 2 * prad_b) * 0.577;
 8000cf8:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8000cfc:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8000d00:	005b      	lsls	r3, r3, #1
 8000d02:	4413      	add	r3, r2
 8000d04:	4618      	mov	r0, r3
 8000d06:	f7ff fd03 	bl	8000710 <__aeabi_i2d>
 8000d0a:	a309      	add	r3, pc, #36	; (adr r3, 8000d30 <clark_transf+0x50>)
 8000d0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d10:	f7ff fa82 	bl	8000218 <__aeabi_dmul>
 8000d14:	4602      	mov	r2, r0
 8000d16:	460b      	mov	r3, r1
 8000d18:	4610      	mov	r0, r2
 8000d1a:	4619      	mov	r1, r3
 8000d1c:	f7ff fd62 	bl	80007e4 <__aeabi_d2iz>
 8000d20:	4603      	mov	r3, r0
 8000d22:	b21a      	sxth	r2, r3
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	801a      	strh	r2, [r3, #0]
}
 8000d28:	bf00      	nop
 8000d2a:	3710      	adds	r7, #16
 8000d2c:	46bd      	mov	sp, r7
 8000d2e:	bd80      	pop	{r7, pc}
 8000d30:	b4395810 	.word	0xb4395810
 8000d34:	3fe276c8 	.word	0x3fe276c8

08000d38 <park_transf>:

	/**TRANSFORMACJA PARK**/
void park_transf(int16_t alpha, int16_t beta, int16_t rotor_pos, volatile int16_t *q, volatile int16_t *d)
{
 8000d38:	b480      	push	{r7}
 8000d3a:	b087      	sub	sp, #28
 8000d3c:	af00      	add	r7, sp, #0
 8000d3e:	607b      	str	r3, [r7, #4]
 8000d40:	4603      	mov	r3, r0
 8000d42:	81fb      	strh	r3, [r7, #14]
 8000d44:	460b      	mov	r3, r1
 8000d46:	81bb      	strh	r3, [r7, #12]
 8000d48:	4613      	mov	r3, r2
 8000d4a:	817b      	strh	r3, [r7, #10]
	uint16_t idx = 0;
 8000d4c:	2300      	movs	r3, #0
 8000d4e:	82fb      	strh	r3, [r7, #22]
	idx = (rotor_pos) % 200;
 8000d50:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8000d54:	4a2d      	ldr	r2, [pc, #180]	; (8000e0c <park_transf+0xd4>)
 8000d56:	fb82 1203 	smull	r1, r2, r2, r3
 8000d5a:	1191      	asrs	r1, r2, #6
 8000d5c:	17da      	asrs	r2, r3, #31
 8000d5e:	1a8a      	subs	r2, r1, r2
 8000d60:	21c8      	movs	r1, #200	; 0xc8
 8000d62:	fb01 f202 	mul.w	r2, r1, r2
 8000d66:	1a9b      	subs	r3, r3, r2
 8000d68:	b21b      	sxth	r3, r3
 8000d6a:	82fb      	strh	r3, [r7, #22]
	*q = (beta  * cos_tab[idx] - alpha * sin_tab[idx]);
 8000d6c:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8000d70:	ee07 3a90 	vmov	s15, r3
 8000d74:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000d78:	8afb      	ldrh	r3, [r7, #22]
 8000d7a:	4a25      	ldr	r2, [pc, #148]	; (8000e10 <park_transf+0xd8>)
 8000d7c:	009b      	lsls	r3, r3, #2
 8000d7e:	4413      	add	r3, r2
 8000d80:	edd3 7a00 	vldr	s15, [r3]
 8000d84:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000d88:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000d8c:	ee07 3a90 	vmov	s15, r3
 8000d90:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000d94:	8afb      	ldrh	r3, [r7, #22]
 8000d96:	4a1f      	ldr	r2, [pc, #124]	; (8000e14 <park_transf+0xdc>)
 8000d98:	009b      	lsls	r3, r3, #2
 8000d9a:	4413      	add	r3, r2
 8000d9c:	edd3 7a00 	vldr	s15, [r3]
 8000da0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000da4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000da8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000dac:	ee17 3a90 	vmov	r3, s15
 8000db0:	b21a      	sxth	r2, r3
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	801a      	strh	r2, [r3, #0]
	*d = (alpha * cos_tab[idx] + beta  * sin_tab[idx]);
 8000db6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000dba:	ee07 3a90 	vmov	s15, r3
 8000dbe:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000dc2:	8afb      	ldrh	r3, [r7, #22]
 8000dc4:	4a12      	ldr	r2, [pc, #72]	; (8000e10 <park_transf+0xd8>)
 8000dc6:	009b      	lsls	r3, r3, #2
 8000dc8:	4413      	add	r3, r2
 8000dca:	edd3 7a00 	vldr	s15, [r3]
 8000dce:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000dd2:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8000dd6:	ee07 3a90 	vmov	s15, r3
 8000dda:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000dde:	8afb      	ldrh	r3, [r7, #22]
 8000de0:	4a0c      	ldr	r2, [pc, #48]	; (8000e14 <park_transf+0xdc>)
 8000de2:	009b      	lsls	r3, r3, #2
 8000de4:	4413      	add	r3, r2
 8000de6:	edd3 7a00 	vldr	s15, [r3]
 8000dea:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000dee:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000df2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000df6:	ee17 3a90 	vmov	r3, s15
 8000dfa:	b21a      	sxth	r2, r3
 8000dfc:	6a3b      	ldr	r3, [r7, #32]
 8000dfe:	801a      	strh	r2, [r3, #0]

}
 8000e00:	bf00      	nop
 8000e02:	371c      	adds	r7, #28
 8000e04:	46bd      	mov	sp, r7
 8000e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e0a:	4770      	bx	lr
 8000e0c:	51eb851f 	.word	0x51eb851f
 8000e10:	0800ba84 	.word	0x0800ba84
 8000e14:	0800b764 	.word	0x0800b764

08000e18 <park_rev_transf>:

	/**TRANSFORMATA ODWROTNA PARK'a**/
void park_rev_transf(int32_t Vd, int32_t Vq, int16_t rotor_pos,  int32_t *u_alpha,   int32_t *u_beta)
{
 8000e18:	b480      	push	{r7}
 8000e1a:	b087      	sub	sp, #28
 8000e1c:	af00      	add	r7, sp, #0
 8000e1e:	60f8      	str	r0, [r7, #12]
 8000e20:	60b9      	str	r1, [r7, #8]
 8000e22:	603b      	str	r3, [r7, #0]
 8000e24:	4613      	mov	r3, r2
 8000e26:	80fb      	strh	r3, [r7, #6]
	uint16_t idx = 0;
 8000e28:	2300      	movs	r3, #0
 8000e2a:	82fb      	strh	r3, [r7, #22]
	idx = (rotor_pos) % 200;
 8000e2c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000e30:	4a2a      	ldr	r2, [pc, #168]	; (8000edc <park_rev_transf+0xc4>)
 8000e32:	fb82 1203 	smull	r1, r2, r2, r3
 8000e36:	1191      	asrs	r1, r2, #6
 8000e38:	17da      	asrs	r2, r3, #31
 8000e3a:	1a8a      	subs	r2, r1, r2
 8000e3c:	21c8      	movs	r1, #200	; 0xc8
 8000e3e:	fb01 f202 	mul.w	r2, r1, r2
 8000e42:	1a9b      	subs	r3, r3, r2
 8000e44:	b21b      	sxth	r3, r3
 8000e46:	82fb      	strh	r3, [r7, #22]
	*u_alpha = (Vd * cos_tab[idx] - Vq * sin_tab[idx]) * 1; 	//0.000002 // skalowanie do max +/- 1000 dec
 8000e48:	68fb      	ldr	r3, [r7, #12]
 8000e4a:	ee07 3a90 	vmov	s15, r3
 8000e4e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000e52:	8afb      	ldrh	r3, [r7, #22]
 8000e54:	4a22      	ldr	r2, [pc, #136]	; (8000ee0 <park_rev_transf+0xc8>)
 8000e56:	009b      	lsls	r3, r3, #2
 8000e58:	4413      	add	r3, r2
 8000e5a:	edd3 7a00 	vldr	s15, [r3]
 8000e5e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000e62:	68bb      	ldr	r3, [r7, #8]
 8000e64:	ee07 3a90 	vmov	s15, r3
 8000e68:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000e6c:	8afb      	ldrh	r3, [r7, #22]
 8000e6e:	4a1d      	ldr	r2, [pc, #116]	; (8000ee4 <park_rev_transf+0xcc>)
 8000e70:	009b      	lsls	r3, r3, #2
 8000e72:	4413      	add	r3, r2
 8000e74:	edd3 7a00 	vldr	s15, [r3]
 8000e78:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000e7c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000e80:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000e84:	ee17 2a90 	vmov	r2, s15
 8000e88:	683b      	ldr	r3, [r7, #0]
 8000e8a:	601a      	str	r2, [r3, #0]
	*u_beta  = (Vq * cos_tab[idx] + Vd * sin_tab[idx]) * 1; 	// 0.000002
 8000e8c:	68bb      	ldr	r3, [r7, #8]
 8000e8e:	ee07 3a90 	vmov	s15, r3
 8000e92:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000e96:	8afb      	ldrh	r3, [r7, #22]
 8000e98:	4a11      	ldr	r2, [pc, #68]	; (8000ee0 <park_rev_transf+0xc8>)
 8000e9a:	009b      	lsls	r3, r3, #2
 8000e9c:	4413      	add	r3, r2
 8000e9e:	edd3 7a00 	vldr	s15, [r3]
 8000ea2:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000ea6:	68fb      	ldr	r3, [r7, #12]
 8000ea8:	ee07 3a90 	vmov	s15, r3
 8000eac:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000eb0:	8afb      	ldrh	r3, [r7, #22]
 8000eb2:	4a0c      	ldr	r2, [pc, #48]	; (8000ee4 <park_rev_transf+0xcc>)
 8000eb4:	009b      	lsls	r3, r3, #2
 8000eb6:	4413      	add	r3, r2
 8000eb8:	edd3 7a00 	vldr	s15, [r3]
 8000ebc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000ec0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000ec4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000ec8:	ee17 2a90 	vmov	r2, s15
 8000ecc:	6a3b      	ldr	r3, [r7, #32]
 8000ece:	601a      	str	r2, [r3, #0]
}
 8000ed0:	bf00      	nop
 8000ed2:	371c      	adds	r7, #28
 8000ed4:	46bd      	mov	sp, r7
 8000ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eda:	4770      	bx	lr
 8000edc:	51eb851f 	.word	0x51eb851f
 8000ee0:	0800ba84 	.word	0x0800ba84
 8000ee4:	0800b764 	.word	0x0800b764

08000ee8 <SPWM_modulacja>:




void SPWM_modulacja()
{
 8000ee8:	b480      	push	{r7}
 8000eea:	af00      	add	r7, sp, #0

	if(FOC_ON==1)
 8000eec:	4b0c      	ldr	r3, [pc, #48]	; (8000f20 <SPWM_modulacja+0x38>)
 8000eee:	781b      	ldrb	r3, [r3, #0]
 8000ef0:	b2db      	uxtb	r3, r3
 8000ef2:	2b01      	cmp	r3, #1
 8000ef4:	d10e      	bne.n	8000f14 <SPWM_modulacja+0x2c>
	{
		TIM1->CCR1 = PWM_U;
 8000ef6:	4b0b      	ldr	r3, [pc, #44]	; (8000f24 <SPWM_modulacja+0x3c>)
 8000ef8:	881b      	ldrh	r3, [r3, #0]
 8000efa:	b29a      	uxth	r2, r3
 8000efc:	4b0a      	ldr	r3, [pc, #40]	; (8000f28 <SPWM_modulacja+0x40>)
 8000efe:	635a      	str	r2, [r3, #52]	; 0x34
		TIM1->CCR2 = PWM_V;
 8000f00:	4b0a      	ldr	r3, [pc, #40]	; (8000f2c <SPWM_modulacja+0x44>)
 8000f02:	881b      	ldrh	r3, [r3, #0]
 8000f04:	b29a      	uxth	r2, r3
 8000f06:	4b08      	ldr	r3, [pc, #32]	; (8000f28 <SPWM_modulacja+0x40>)
 8000f08:	639a      	str	r2, [r3, #56]	; 0x38
		TIM1->CCR3 = PWM_W;
 8000f0a:	4b09      	ldr	r3, [pc, #36]	; (8000f30 <SPWM_modulacja+0x48>)
 8000f0c:	881b      	ldrh	r3, [r3, #0]
 8000f0e:	b29a      	uxth	r2, r3
 8000f10:	4b05      	ldr	r3, [pc, #20]	; (8000f28 <SPWM_modulacja+0x40>)
 8000f12:	63da      	str	r2, [r3, #60]	; 0x3c
	}

}
 8000f14:	bf00      	nop
 8000f16:	46bd      	mov	sp, r7
 8000f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f1c:	4770      	bx	lr
 8000f1e:	bf00      	nop
 8000f20:	20000000 	.word	0x20000000
 8000f24:	2000008a 	.word	0x2000008a
 8000f28:	40012c00 	.word	0x40012c00
 8000f2c:	2000008c 	.word	0x2000008c
 8000f30:	2000008e 	.word	0x2000008e

08000f34 <Pozycja>:




int16_t Pozycja(uint16_t pozycja_ak,uint16_t pozycja_pop, int32_t *poz_calk, uint16_t kier)
{
 8000f34:	b480      	push	{r7}
 8000f36:	b087      	sub	sp, #28
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	60ba      	str	r2, [r7, #8]
 8000f3c:	461a      	mov	r2, r3
 8000f3e:	4603      	mov	r3, r0
 8000f40:	81fb      	strh	r3, [r7, #14]
 8000f42:	460b      	mov	r3, r1
 8000f44:	81bb      	strh	r3, [r7, #12]
 8000f46:	4613      	mov	r3, r2
 8000f48:	80fb      	strh	r3, [r7, #6]
	int16_t  delta_poz, delta_2;
delta_2=pozycja_pop-pozycja_ak;
 8000f4a:	89ba      	ldrh	r2, [r7, #12]
 8000f4c:	89fb      	ldrh	r3, [r7, #14]
 8000f4e:	1ad3      	subs	r3, r2, r3
 8000f50:	b29b      	uxth	r3, r3
 8000f52:	82bb      	strh	r3, [r7, #20]
	if(abs(pozycja_pop-pozycja_ak)>20)
 8000f54:	89ba      	ldrh	r2, [r7, #12]
 8000f56:	89fb      	ldrh	r3, [r7, #14]
 8000f58:	1ad3      	subs	r3, r2, r3
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	bfb8      	it	lt
 8000f5e:	425b      	neglt	r3, r3
 8000f60:	2b14      	cmp	r3, #20
 8000f62:	dd41      	ble.n	8000fe8 <Pozycja+0xb4>
	{
		if(pozycja_pop>pozycja_ak&&kier==16)
 8000f64:	89ba      	ldrh	r2, [r7, #12]
 8000f66:	89fb      	ldrh	r3, [r7, #14]
 8000f68:	429a      	cmp	r2, r3
 8000f6a:	d908      	bls.n	8000f7e <Pozycja+0x4a>
 8000f6c:	88fb      	ldrh	r3, [r7, #6]
 8000f6e:	2b10      	cmp	r3, #16
 8000f70:	d105      	bne.n	8000f7e <Pozycja+0x4a>
			{
				delta_poz = -(pozycja_pop-pozycja_ak);
 8000f72:	89fa      	ldrh	r2, [r7, #14]
 8000f74:	89bb      	ldrh	r3, [r7, #12]
 8000f76:	1ad3      	subs	r3, r2, r3
 8000f78:	b29b      	uxth	r3, r3
 8000f7a:	82fb      	strh	r3, [r7, #22]
 8000f7c:	e02d      	b.n	8000fda <Pozycja+0xa6>
			}
		else if(pozycja_pop<pozycja_ak&&kier==16)
 8000f7e:	89ba      	ldrh	r2, [r7, #12]
 8000f80:	89fb      	ldrh	r3, [r7, #14]
 8000f82:	429a      	cmp	r2, r3
 8000f84:	d20c      	bcs.n	8000fa0 <Pozycja+0x6c>
 8000f86:	88fb      	ldrh	r3, [r7, #6]
 8000f88:	2b10      	cmp	r3, #16
 8000f8a:	d109      	bne.n	8000fa0 <Pozycja+0x6c>
			{
				delta_poz = -((16385-pozycja_ak)+pozycja_pop);
 8000f8c:	89fa      	ldrh	r2, [r7, #14]
 8000f8e:	89bb      	ldrh	r3, [r7, #12]
 8000f90:	1ad3      	subs	r3, r2, r3
 8000f92:	b29b      	uxth	r3, r3
 8000f94:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 8000f98:	3b01      	subs	r3, #1
 8000f9a:	b29b      	uxth	r3, r3
 8000f9c:	82fb      	strh	r3, [r7, #22]
 8000f9e:	e01c      	b.n	8000fda <Pozycja+0xa6>
			}
		else if(pozycja_pop>pozycja_ak&&kier==0)
 8000fa0:	89ba      	ldrh	r2, [r7, #12]
 8000fa2:	89fb      	ldrh	r3, [r7, #14]
 8000fa4:	429a      	cmp	r2, r3
 8000fa6:	d90c      	bls.n	8000fc2 <Pozycja+0x8e>
 8000fa8:	88fb      	ldrh	r3, [r7, #6]
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	d109      	bne.n	8000fc2 <Pozycja+0x8e>
			{
				delta_poz = (16385-pozycja_pop)+pozycja_ak;
 8000fae:	89fa      	ldrh	r2, [r7, #14]
 8000fb0:	89bb      	ldrh	r3, [r7, #12]
 8000fb2:	1ad3      	subs	r3, r2, r3
 8000fb4:	b29b      	uxth	r3, r3
 8000fb6:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8000fba:	3301      	adds	r3, #1
 8000fbc:	b29b      	uxth	r3, r3
 8000fbe:	82fb      	strh	r3, [r7, #22]
 8000fc0:	e00b      	b.n	8000fda <Pozycja+0xa6>
			}
		else if(pozycja_pop<pozycja_ak&&kier==0)
 8000fc2:	89ba      	ldrh	r2, [r7, #12]
 8000fc4:	89fb      	ldrh	r3, [r7, #14]
 8000fc6:	429a      	cmp	r2, r3
 8000fc8:	d207      	bcs.n	8000fda <Pozycja+0xa6>
 8000fca:	88fb      	ldrh	r3, [r7, #6]
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	d104      	bne.n	8000fda <Pozycja+0xa6>
			{
				delta_poz = pozycja_ak-pozycja_pop;
 8000fd0:	89fa      	ldrh	r2, [r7, #14]
 8000fd2:	89bb      	ldrh	r3, [r7, #12]
 8000fd4:	1ad3      	subs	r3, r2, r3
 8000fd6:	b29b      	uxth	r3, r3
 8000fd8:	82fb      	strh	r3, [r7, #22]
			}


		*poz_calk+=delta_poz;
 8000fda:	68bb      	ldr	r3, [r7, #8]
 8000fdc:	681a      	ldr	r2, [r3, #0]
 8000fde:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8000fe2:	441a      	add	r2, r3
 8000fe4:	68bb      	ldr	r3, [r7, #8]
 8000fe6:	601a      	str	r2, [r3, #0]

	}
	return delta_poz;
 8000fe8:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
}
 8000fec:	4618      	mov	r0, r3
 8000fee:	371c      	adds	r7, #28
 8000ff0:	46bd      	mov	sp, r7
 8000ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff6:	4770      	bx	lr

08000ff8 <SVPWM_modulacja>:
	return delta_enc;


}
void SVPWM_modulacja(int32_t u_alpha, int32_t u_beta, int16_t *U_SVM, int16_t *V_SVM, int16_t *W_SVM)
{
 8000ff8:	b5b0      	push	{r4, r5, r7, lr}
 8000ffa:	b08c      	sub	sp, #48	; 0x30
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	60f8      	str	r0, [r7, #12]
 8001000:	60b9      	str	r1, [r7, #8]
 8001002:	607a      	str	r2, [r7, #4]
 8001004:	603b      	str	r3, [r7, #0]

	// U_alpha i beta to zmienne in z transformacji, *x_SVM to pointery na wrzucenie zmiennych out
int32_t u, v, w, T1, T2, T0;
uint8_t sektor;

		u = (u_alpha * 1.73 - u_beta) * 0.5;
 8001006:	68f8      	ldr	r0, [r7, #12]
 8001008:	f7ff fb82 	bl	8000710 <__aeabi_i2d>
 800100c:	a3b2      	add	r3, pc, #712	; (adr r3, 80012d8 <SVPWM_modulacja+0x2e0>)
 800100e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001012:	f7ff f901 	bl	8000218 <__aeabi_dmul>
 8001016:	4602      	mov	r2, r0
 8001018:	460b      	mov	r3, r1
 800101a:	4614      	mov	r4, r2
 800101c:	461d      	mov	r5, r3
 800101e:	68b8      	ldr	r0, [r7, #8]
 8001020:	f7ff fb76 	bl	8000710 <__aeabi_i2d>
 8001024:	4602      	mov	r2, r0
 8001026:	460b      	mov	r3, r1
 8001028:	4620      	mov	r0, r4
 800102a:	4629      	mov	r1, r5
 800102c:	f7ff fa22 	bl	8000474 <__aeabi_dsub>
 8001030:	4602      	mov	r2, r0
 8001032:	460b      	mov	r3, r1
 8001034:	4610      	mov	r0, r2
 8001036:	4619      	mov	r1, r3
 8001038:	f04f 0200 	mov.w	r2, #0
 800103c:	4ba8      	ldr	r3, [pc, #672]	; (80012e0 <SVPWM_modulacja+0x2e8>)
 800103e:	f7ff f8eb 	bl	8000218 <__aeabi_dmul>
 8001042:	4602      	mov	r2, r0
 8001044:	460b      	mov	r3, r1
 8001046:	4610      	mov	r0, r2
 8001048:	4619      	mov	r1, r3
 800104a:	f7ff fbcb 	bl	80007e4 <__aeabi_d2iz>
 800104e:	4603      	mov	r3, r0
 8001050:	62bb      	str	r3, [r7, #40]	; 0x28
		v = u_beta;
 8001052:	68bb      	ldr	r3, [r7, #8]
 8001054:	627b      	str	r3, [r7, #36]	; 0x24
		w = (-u_alpha * 1.73 - u_beta) * 0.5;
 8001056:	68fb      	ldr	r3, [r7, #12]
 8001058:	425b      	negs	r3, r3
 800105a:	4618      	mov	r0, r3
 800105c:	f7ff fb58 	bl	8000710 <__aeabi_i2d>
 8001060:	a39d      	add	r3, pc, #628	; (adr r3, 80012d8 <SVPWM_modulacja+0x2e0>)
 8001062:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001066:	f7ff f8d7 	bl	8000218 <__aeabi_dmul>
 800106a:	4602      	mov	r2, r0
 800106c:	460b      	mov	r3, r1
 800106e:	4614      	mov	r4, r2
 8001070:	461d      	mov	r5, r3
 8001072:	68b8      	ldr	r0, [r7, #8]
 8001074:	f7ff fb4c 	bl	8000710 <__aeabi_i2d>
 8001078:	4602      	mov	r2, r0
 800107a:	460b      	mov	r3, r1
 800107c:	4620      	mov	r0, r4
 800107e:	4629      	mov	r1, r5
 8001080:	f7ff f9f8 	bl	8000474 <__aeabi_dsub>
 8001084:	4602      	mov	r2, r0
 8001086:	460b      	mov	r3, r1
 8001088:	4610      	mov	r0, r2
 800108a:	4619      	mov	r1, r3
 800108c:	f04f 0200 	mov.w	r2, #0
 8001090:	4b93      	ldr	r3, [pc, #588]	; (80012e0 <SVPWM_modulacja+0x2e8>)
 8001092:	f7ff f8c1 	bl	8000218 <__aeabi_dmul>
 8001096:	4602      	mov	r2, r0
 8001098:	460b      	mov	r3, r1
 800109a:	4610      	mov	r0, r2
 800109c:	4619      	mov	r1, r3
 800109e:	f7ff fba1 	bl	80007e4 <__aeabi_d2iz>
 80010a2:	4603      	mov	r3, r0
 80010a4:	623b      	str	r3, [r7, #32]

		if(u > 0 && v > 0 && w < 0)
 80010a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	dd09      	ble.n	80010c0 <SVPWM_modulacja+0xc8>
 80010ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	dd06      	ble.n	80010c0 <SVPWM_modulacja+0xc8>
 80010b2:	6a3b      	ldr	r3, [r7, #32]
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	da03      	bge.n	80010c0 <SVPWM_modulacja+0xc8>
			{
			sektor = 1;
 80010b8:	2301      	movs	r3, #1
 80010ba:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80010be:	e03f      	b.n	8001140 <SVPWM_modulacja+0x148>
			}
		else if(v >0 && w < 0 && u < 0)
 80010c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	dd09      	ble.n	80010da <SVPWM_modulacja+0xe2>
 80010c6:	6a3b      	ldr	r3, [r7, #32]
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	da06      	bge.n	80010da <SVPWM_modulacja+0xe2>
 80010cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	da03      	bge.n	80010da <SVPWM_modulacja+0xe2>
			{
			sektor = 2;
 80010d2:	2302      	movs	r3, #2
 80010d4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80010d8:	e032      	b.n	8001140 <SVPWM_modulacja+0x148>
			}
		else if(v > 0 && w >0 && u < 0)
 80010da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010dc:	2b00      	cmp	r3, #0
 80010de:	dd09      	ble.n	80010f4 <SVPWM_modulacja+0xfc>
 80010e0:	6a3b      	ldr	r3, [r7, #32]
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	dd06      	ble.n	80010f4 <SVPWM_modulacja+0xfc>
 80010e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	da03      	bge.n	80010f4 <SVPWM_modulacja+0xfc>
			{
			sektor = 3;
 80010ec:	2303      	movs	r3, #3
 80010ee:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80010f2:	e025      	b.n	8001140 <SVPWM_modulacja+0x148>
			}
		else if(v <0 && w > 0 && u < 0)
 80010f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	da09      	bge.n	800110e <SVPWM_modulacja+0x116>
 80010fa:	6a3b      	ldr	r3, [r7, #32]
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	dd06      	ble.n	800110e <SVPWM_modulacja+0x116>
 8001100:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001102:	2b00      	cmp	r3, #0
 8001104:	da03      	bge.n	800110e <SVPWM_modulacja+0x116>
			{
			sektor = 4;
 8001106:	2304      	movs	r3, #4
 8001108:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800110c:	e018      	b.n	8001140 <SVPWM_modulacja+0x148>
			}
		else if(v < 0 && w > 0 && u > 0)
 800110e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001110:	2b00      	cmp	r3, #0
 8001112:	da09      	bge.n	8001128 <SVPWM_modulacja+0x130>
 8001114:	6a3b      	ldr	r3, [r7, #32]
 8001116:	2b00      	cmp	r3, #0
 8001118:	dd06      	ble.n	8001128 <SVPWM_modulacja+0x130>
 800111a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800111c:	2b00      	cmp	r3, #0
 800111e:	dd03      	ble.n	8001128 <SVPWM_modulacja+0x130>
			{
			sektor = 5;
 8001120:	2305      	movs	r3, #5
 8001122:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8001126:	e00b      	b.n	8001140 <SVPWM_modulacja+0x148>
			}
		else if(v < 0 && w < 0 && u > 0)
 8001128:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800112a:	2b00      	cmp	r3, #0
 800112c:	da08      	bge.n	8001140 <SVPWM_modulacja+0x148>
 800112e:	6a3b      	ldr	r3, [r7, #32]
 8001130:	2b00      	cmp	r3, #0
 8001132:	da05      	bge.n	8001140 <SVPWM_modulacja+0x148>
 8001134:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001136:	2b00      	cmp	r3, #0
 8001138:	dd02      	ble.n	8001140 <SVPWM_modulacja+0x148>
			{
			sektor = 6;
 800113a:	2306      	movs	r3, #6
 800113c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			}

		switch(sektor)
 8001140:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001144:	3b01      	subs	r3, #1
 8001146:	2b05      	cmp	r3, #5
 8001148:	f200 8238 	bhi.w	80015bc <SVPWM_modulacja+0x5c4>
 800114c:	a201      	add	r2, pc, #4	; (adr r2, 8001154 <SVPWM_modulacja+0x15c>)
 800114e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001152:	bf00      	nop
 8001154:	0800116d 	.word	0x0800116d
 8001158:	08001221 	.word	0x08001221
 800115c:	080012e5 	.word	0x080012e5
 8001160:	08001399 	.word	0x08001399
 8001164:	08001451 	.word	0x08001451
 8001168:	08001505 	.word	0x08001505
		{
		case 1:	T1 = u;
 800116c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800116e:	61fb      	str	r3, [r7, #28]
				T2 = v;
 8001170:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001172:	61bb      	str	r3, [r7, #24]
				T0 = 1 - T1 - T2;
 8001174:	69fb      	ldr	r3, [r7, #28]
 8001176:	f1c3 0201 	rsb	r2, r3, #1
 800117a:	69bb      	ldr	r3, [r7, #24]
 800117c:	1ad3      	subs	r3, r2, r3
 800117e:	617b      	str	r3, [r7, #20]
				*U_SVM = T1 + T2 + 0.5 * T0;
 8001180:	69fa      	ldr	r2, [r7, #28]
 8001182:	69bb      	ldr	r3, [r7, #24]
 8001184:	4413      	add	r3, r2
 8001186:	4618      	mov	r0, r3
 8001188:	f7ff fac2 	bl	8000710 <__aeabi_i2d>
 800118c:	4604      	mov	r4, r0
 800118e:	460d      	mov	r5, r1
 8001190:	6978      	ldr	r0, [r7, #20]
 8001192:	f7ff fabd 	bl	8000710 <__aeabi_i2d>
 8001196:	f04f 0200 	mov.w	r2, #0
 800119a:	4b51      	ldr	r3, [pc, #324]	; (80012e0 <SVPWM_modulacja+0x2e8>)
 800119c:	f7ff f83c 	bl	8000218 <__aeabi_dmul>
 80011a0:	4602      	mov	r2, r0
 80011a2:	460b      	mov	r3, r1
 80011a4:	4620      	mov	r0, r4
 80011a6:	4629      	mov	r1, r5
 80011a8:	f7ff f966 	bl	8000478 <__adddf3>
 80011ac:	4602      	mov	r2, r0
 80011ae:	460b      	mov	r3, r1
 80011b0:	4610      	mov	r0, r2
 80011b2:	4619      	mov	r1, r3
 80011b4:	f7ff fb16 	bl	80007e4 <__aeabi_d2iz>
 80011b8:	4603      	mov	r3, r0
 80011ba:	b21a      	sxth	r2, r3
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	801a      	strh	r2, [r3, #0]
				*V_SVM = T2 +0.5 * T0;
 80011c0:	69b8      	ldr	r0, [r7, #24]
 80011c2:	f7ff faa5 	bl	8000710 <__aeabi_i2d>
 80011c6:	4604      	mov	r4, r0
 80011c8:	460d      	mov	r5, r1
 80011ca:	6978      	ldr	r0, [r7, #20]
 80011cc:	f7ff faa0 	bl	8000710 <__aeabi_i2d>
 80011d0:	f04f 0200 	mov.w	r2, #0
 80011d4:	4b42      	ldr	r3, [pc, #264]	; (80012e0 <SVPWM_modulacja+0x2e8>)
 80011d6:	f7ff f81f 	bl	8000218 <__aeabi_dmul>
 80011da:	4602      	mov	r2, r0
 80011dc:	460b      	mov	r3, r1
 80011de:	4620      	mov	r0, r4
 80011e0:	4629      	mov	r1, r5
 80011e2:	f7ff f949 	bl	8000478 <__adddf3>
 80011e6:	4602      	mov	r2, r0
 80011e8:	460b      	mov	r3, r1
 80011ea:	4610      	mov	r0, r2
 80011ec:	4619      	mov	r1, r3
 80011ee:	f7ff faf9 	bl	80007e4 <__aeabi_d2iz>
 80011f2:	4603      	mov	r3, r0
 80011f4:	b21a      	sxth	r2, r3
 80011f6:	683b      	ldr	r3, [r7, #0]
 80011f8:	801a      	strh	r2, [r3, #0]
				*W_SVM = 0.5 * T0;
 80011fa:	6978      	ldr	r0, [r7, #20]
 80011fc:	f7ff fa88 	bl	8000710 <__aeabi_i2d>
 8001200:	f04f 0200 	mov.w	r2, #0
 8001204:	4b36      	ldr	r3, [pc, #216]	; (80012e0 <SVPWM_modulacja+0x2e8>)
 8001206:	f7ff f807 	bl	8000218 <__aeabi_dmul>
 800120a:	4602      	mov	r2, r0
 800120c:	460b      	mov	r3, r1
 800120e:	4610      	mov	r0, r2
 8001210:	4619      	mov	r1, r3
 8001212:	f7ff fae7 	bl	80007e4 <__aeabi_d2iz>
 8001216:	4603      	mov	r3, r0
 8001218:	b21a      	sxth	r2, r3
 800121a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800121c:	801a      	strh	r2, [r3, #0]
				break;
 800121e:	e1cd      	b.n	80015bc <SVPWM_modulacja+0x5c4>
		case 2:	T1 = -w;
 8001220:	6a3b      	ldr	r3, [r7, #32]
 8001222:	425b      	negs	r3, r3
 8001224:	61fb      	str	r3, [r7, #28]
				T2 = -u;
 8001226:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001228:	425b      	negs	r3, r3
 800122a:	61bb      	str	r3, [r7, #24]
				T0 = 1 - T1 - T2;
 800122c:	69fb      	ldr	r3, [r7, #28]
 800122e:	f1c3 0201 	rsb	r2, r3, #1
 8001232:	69bb      	ldr	r3, [r7, #24]
 8001234:	1ad3      	subs	r3, r2, r3
 8001236:	617b      	str	r3, [r7, #20]
				*U_SVM = T1 + 0.5 * T0;
 8001238:	69f8      	ldr	r0, [r7, #28]
 800123a:	f7ff fa69 	bl	8000710 <__aeabi_i2d>
 800123e:	4604      	mov	r4, r0
 8001240:	460d      	mov	r5, r1
 8001242:	6978      	ldr	r0, [r7, #20]
 8001244:	f7ff fa64 	bl	8000710 <__aeabi_i2d>
 8001248:	f04f 0200 	mov.w	r2, #0
 800124c:	4b24      	ldr	r3, [pc, #144]	; (80012e0 <SVPWM_modulacja+0x2e8>)
 800124e:	f7fe ffe3 	bl	8000218 <__aeabi_dmul>
 8001252:	4602      	mov	r2, r0
 8001254:	460b      	mov	r3, r1
 8001256:	4620      	mov	r0, r4
 8001258:	4629      	mov	r1, r5
 800125a:	f7ff f90d 	bl	8000478 <__adddf3>
 800125e:	4602      	mov	r2, r0
 8001260:	460b      	mov	r3, r1
 8001262:	4610      	mov	r0, r2
 8001264:	4619      	mov	r1, r3
 8001266:	f7ff fabd 	bl	80007e4 <__aeabi_d2iz>
 800126a:	4603      	mov	r3, r0
 800126c:	b21a      	sxth	r2, r3
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	801a      	strh	r2, [r3, #0]
				*V_SVM = T1 + T2 + 0.5 * T0;
 8001272:	69fa      	ldr	r2, [r7, #28]
 8001274:	69bb      	ldr	r3, [r7, #24]
 8001276:	4413      	add	r3, r2
 8001278:	4618      	mov	r0, r3
 800127a:	f7ff fa49 	bl	8000710 <__aeabi_i2d>
 800127e:	4604      	mov	r4, r0
 8001280:	460d      	mov	r5, r1
 8001282:	6978      	ldr	r0, [r7, #20]
 8001284:	f7ff fa44 	bl	8000710 <__aeabi_i2d>
 8001288:	f04f 0200 	mov.w	r2, #0
 800128c:	4b14      	ldr	r3, [pc, #80]	; (80012e0 <SVPWM_modulacja+0x2e8>)
 800128e:	f7fe ffc3 	bl	8000218 <__aeabi_dmul>
 8001292:	4602      	mov	r2, r0
 8001294:	460b      	mov	r3, r1
 8001296:	4620      	mov	r0, r4
 8001298:	4629      	mov	r1, r5
 800129a:	f7ff f8ed 	bl	8000478 <__adddf3>
 800129e:	4602      	mov	r2, r0
 80012a0:	460b      	mov	r3, r1
 80012a2:	4610      	mov	r0, r2
 80012a4:	4619      	mov	r1, r3
 80012a6:	f7ff fa9d 	bl	80007e4 <__aeabi_d2iz>
 80012aa:	4603      	mov	r3, r0
 80012ac:	b21a      	sxth	r2, r3
 80012ae:	683b      	ldr	r3, [r7, #0]
 80012b0:	801a      	strh	r2, [r3, #0]
				*W_SVM = 0.5 * T0;
 80012b2:	6978      	ldr	r0, [r7, #20]
 80012b4:	f7ff fa2c 	bl	8000710 <__aeabi_i2d>
 80012b8:	f04f 0200 	mov.w	r2, #0
 80012bc:	4b08      	ldr	r3, [pc, #32]	; (80012e0 <SVPWM_modulacja+0x2e8>)
 80012be:	f7fe ffab 	bl	8000218 <__aeabi_dmul>
 80012c2:	4602      	mov	r2, r0
 80012c4:	460b      	mov	r3, r1
 80012c6:	4610      	mov	r0, r2
 80012c8:	4619      	mov	r1, r3
 80012ca:	f7ff fa8b 	bl	80007e4 <__aeabi_d2iz>
 80012ce:	4603      	mov	r3, r0
 80012d0:	b21a      	sxth	r2, r3
 80012d2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80012d4:	801a      	strh	r2, [r3, #0]
				break;
 80012d6:	e171      	b.n	80015bc <SVPWM_modulacja+0x5c4>
 80012d8:	7ae147ae 	.word	0x7ae147ae
 80012dc:	3ffbae14 	.word	0x3ffbae14
 80012e0:	3fe00000 	.word	0x3fe00000
		case 3:	T1 = v;
 80012e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012e6:	61fb      	str	r3, [r7, #28]
				T2 = w;
 80012e8:	6a3b      	ldr	r3, [r7, #32]
 80012ea:	61bb      	str	r3, [r7, #24]
				T0 = 1 - T1 - T2;
 80012ec:	69fb      	ldr	r3, [r7, #28]
 80012ee:	f1c3 0201 	rsb	r2, r3, #1
 80012f2:	69bb      	ldr	r3, [r7, #24]
 80012f4:	1ad3      	subs	r3, r2, r3
 80012f6:	617b      	str	r3, [r7, #20]
				*U_SVM = 0.5 * T0;
 80012f8:	6978      	ldr	r0, [r7, #20]
 80012fa:	f7ff fa09 	bl	8000710 <__aeabi_i2d>
 80012fe:	f04f 0200 	mov.w	r2, #0
 8001302:	4bb0      	ldr	r3, [pc, #704]	; (80015c4 <SVPWM_modulacja+0x5cc>)
 8001304:	f7fe ff88 	bl	8000218 <__aeabi_dmul>
 8001308:	4602      	mov	r2, r0
 800130a:	460b      	mov	r3, r1
 800130c:	4610      	mov	r0, r2
 800130e:	4619      	mov	r1, r3
 8001310:	f7ff fa68 	bl	80007e4 <__aeabi_d2iz>
 8001314:	4603      	mov	r3, r0
 8001316:	b21a      	sxth	r2, r3
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	801a      	strh	r2, [r3, #0]
				*V_SVM = T1 + T2 + 0.5 * T0;
 800131c:	69fa      	ldr	r2, [r7, #28]
 800131e:	69bb      	ldr	r3, [r7, #24]
 8001320:	4413      	add	r3, r2
 8001322:	4618      	mov	r0, r3
 8001324:	f7ff f9f4 	bl	8000710 <__aeabi_i2d>
 8001328:	4604      	mov	r4, r0
 800132a:	460d      	mov	r5, r1
 800132c:	6978      	ldr	r0, [r7, #20]
 800132e:	f7ff f9ef 	bl	8000710 <__aeabi_i2d>
 8001332:	f04f 0200 	mov.w	r2, #0
 8001336:	4ba3      	ldr	r3, [pc, #652]	; (80015c4 <SVPWM_modulacja+0x5cc>)
 8001338:	f7fe ff6e 	bl	8000218 <__aeabi_dmul>
 800133c:	4602      	mov	r2, r0
 800133e:	460b      	mov	r3, r1
 8001340:	4620      	mov	r0, r4
 8001342:	4629      	mov	r1, r5
 8001344:	f7ff f898 	bl	8000478 <__adddf3>
 8001348:	4602      	mov	r2, r0
 800134a:	460b      	mov	r3, r1
 800134c:	4610      	mov	r0, r2
 800134e:	4619      	mov	r1, r3
 8001350:	f7ff fa48 	bl	80007e4 <__aeabi_d2iz>
 8001354:	4603      	mov	r3, r0
 8001356:	b21a      	sxth	r2, r3
 8001358:	683b      	ldr	r3, [r7, #0]
 800135a:	801a      	strh	r2, [r3, #0]
				*W_SVM = T2 + 0.5 * T0;
 800135c:	69b8      	ldr	r0, [r7, #24]
 800135e:	f7ff f9d7 	bl	8000710 <__aeabi_i2d>
 8001362:	4604      	mov	r4, r0
 8001364:	460d      	mov	r5, r1
 8001366:	6978      	ldr	r0, [r7, #20]
 8001368:	f7ff f9d2 	bl	8000710 <__aeabi_i2d>
 800136c:	f04f 0200 	mov.w	r2, #0
 8001370:	4b94      	ldr	r3, [pc, #592]	; (80015c4 <SVPWM_modulacja+0x5cc>)
 8001372:	f7fe ff51 	bl	8000218 <__aeabi_dmul>
 8001376:	4602      	mov	r2, r0
 8001378:	460b      	mov	r3, r1
 800137a:	4620      	mov	r0, r4
 800137c:	4629      	mov	r1, r5
 800137e:	f7ff f87b 	bl	8000478 <__adddf3>
 8001382:	4602      	mov	r2, r0
 8001384:	460b      	mov	r3, r1
 8001386:	4610      	mov	r0, r2
 8001388:	4619      	mov	r1, r3
 800138a:	f7ff fa2b 	bl	80007e4 <__aeabi_d2iz>
 800138e:	4603      	mov	r3, r0
 8001390:	b21a      	sxth	r2, r3
 8001392:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001394:	801a      	strh	r2, [r3, #0]
				break;
 8001396:	e111      	b.n	80015bc <SVPWM_modulacja+0x5c4>
		case 4:	T1 = -u;
 8001398:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800139a:	425b      	negs	r3, r3
 800139c:	61fb      	str	r3, [r7, #28]
				T2 = -v;
 800139e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013a0:	425b      	negs	r3, r3
 80013a2:	61bb      	str	r3, [r7, #24]
				T0 = 1 - T1 - T2;
 80013a4:	69fb      	ldr	r3, [r7, #28]
 80013a6:	f1c3 0201 	rsb	r2, r3, #1
 80013aa:	69bb      	ldr	r3, [r7, #24]
 80013ac:	1ad3      	subs	r3, r2, r3
 80013ae:	617b      	str	r3, [r7, #20]
				*U_SVM = 0.5 * T0;
 80013b0:	6978      	ldr	r0, [r7, #20]
 80013b2:	f7ff f9ad 	bl	8000710 <__aeabi_i2d>
 80013b6:	f04f 0200 	mov.w	r2, #0
 80013ba:	4b82      	ldr	r3, [pc, #520]	; (80015c4 <SVPWM_modulacja+0x5cc>)
 80013bc:	f7fe ff2c 	bl	8000218 <__aeabi_dmul>
 80013c0:	4602      	mov	r2, r0
 80013c2:	460b      	mov	r3, r1
 80013c4:	4610      	mov	r0, r2
 80013c6:	4619      	mov	r1, r3
 80013c8:	f7ff fa0c 	bl	80007e4 <__aeabi_d2iz>
 80013cc:	4603      	mov	r3, r0
 80013ce:	b21a      	sxth	r2, r3
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	801a      	strh	r2, [r3, #0]
				*V_SVM = T1 + 0.5 * T0;
 80013d4:	69f8      	ldr	r0, [r7, #28]
 80013d6:	f7ff f99b 	bl	8000710 <__aeabi_i2d>
 80013da:	4604      	mov	r4, r0
 80013dc:	460d      	mov	r5, r1
 80013de:	6978      	ldr	r0, [r7, #20]
 80013e0:	f7ff f996 	bl	8000710 <__aeabi_i2d>
 80013e4:	f04f 0200 	mov.w	r2, #0
 80013e8:	4b76      	ldr	r3, [pc, #472]	; (80015c4 <SVPWM_modulacja+0x5cc>)
 80013ea:	f7fe ff15 	bl	8000218 <__aeabi_dmul>
 80013ee:	4602      	mov	r2, r0
 80013f0:	460b      	mov	r3, r1
 80013f2:	4620      	mov	r0, r4
 80013f4:	4629      	mov	r1, r5
 80013f6:	f7ff f83f 	bl	8000478 <__adddf3>
 80013fa:	4602      	mov	r2, r0
 80013fc:	460b      	mov	r3, r1
 80013fe:	4610      	mov	r0, r2
 8001400:	4619      	mov	r1, r3
 8001402:	f7ff f9ef 	bl	80007e4 <__aeabi_d2iz>
 8001406:	4603      	mov	r3, r0
 8001408:	b21a      	sxth	r2, r3
 800140a:	683b      	ldr	r3, [r7, #0]
 800140c:	801a      	strh	r2, [r3, #0]
				*W_SVM = T1 + T2 + 0.5 * T0;
 800140e:	69fa      	ldr	r2, [r7, #28]
 8001410:	69bb      	ldr	r3, [r7, #24]
 8001412:	4413      	add	r3, r2
 8001414:	4618      	mov	r0, r3
 8001416:	f7ff f97b 	bl	8000710 <__aeabi_i2d>
 800141a:	4604      	mov	r4, r0
 800141c:	460d      	mov	r5, r1
 800141e:	6978      	ldr	r0, [r7, #20]
 8001420:	f7ff f976 	bl	8000710 <__aeabi_i2d>
 8001424:	f04f 0200 	mov.w	r2, #0
 8001428:	4b66      	ldr	r3, [pc, #408]	; (80015c4 <SVPWM_modulacja+0x5cc>)
 800142a:	f7fe fef5 	bl	8000218 <__aeabi_dmul>
 800142e:	4602      	mov	r2, r0
 8001430:	460b      	mov	r3, r1
 8001432:	4620      	mov	r0, r4
 8001434:	4629      	mov	r1, r5
 8001436:	f7ff f81f 	bl	8000478 <__adddf3>
 800143a:	4602      	mov	r2, r0
 800143c:	460b      	mov	r3, r1
 800143e:	4610      	mov	r0, r2
 8001440:	4619      	mov	r1, r3
 8001442:	f7ff f9cf 	bl	80007e4 <__aeabi_d2iz>
 8001446:	4603      	mov	r3, r0
 8001448:	b21a      	sxth	r2, r3
 800144a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800144c:	801a      	strh	r2, [r3, #0]
				break;
 800144e:	e0b5      	b.n	80015bc <SVPWM_modulacja+0x5c4>
		case 5:	T1 = w;
 8001450:	6a3b      	ldr	r3, [r7, #32]
 8001452:	61fb      	str	r3, [r7, #28]
				T2 = u;
 8001454:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001456:	61bb      	str	r3, [r7, #24]
				T0 = 1 - T1 - T2;
 8001458:	69fb      	ldr	r3, [r7, #28]
 800145a:	f1c3 0201 	rsb	r2, r3, #1
 800145e:	69bb      	ldr	r3, [r7, #24]
 8001460:	1ad3      	subs	r3, r2, r3
 8001462:	617b      	str	r3, [r7, #20]
				*U_SVM = T2 + 0.5 * T0;
 8001464:	69b8      	ldr	r0, [r7, #24]
 8001466:	f7ff f953 	bl	8000710 <__aeabi_i2d>
 800146a:	4604      	mov	r4, r0
 800146c:	460d      	mov	r5, r1
 800146e:	6978      	ldr	r0, [r7, #20]
 8001470:	f7ff f94e 	bl	8000710 <__aeabi_i2d>
 8001474:	f04f 0200 	mov.w	r2, #0
 8001478:	4b52      	ldr	r3, [pc, #328]	; (80015c4 <SVPWM_modulacja+0x5cc>)
 800147a:	f7fe fecd 	bl	8000218 <__aeabi_dmul>
 800147e:	4602      	mov	r2, r0
 8001480:	460b      	mov	r3, r1
 8001482:	4620      	mov	r0, r4
 8001484:	4629      	mov	r1, r5
 8001486:	f7fe fff7 	bl	8000478 <__adddf3>
 800148a:	4602      	mov	r2, r0
 800148c:	460b      	mov	r3, r1
 800148e:	4610      	mov	r0, r2
 8001490:	4619      	mov	r1, r3
 8001492:	f7ff f9a7 	bl	80007e4 <__aeabi_d2iz>
 8001496:	4603      	mov	r3, r0
 8001498:	b21a      	sxth	r2, r3
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	801a      	strh	r2, [r3, #0]
				*V_SVM = 0.5 * T0;
 800149e:	6978      	ldr	r0, [r7, #20]
 80014a0:	f7ff f936 	bl	8000710 <__aeabi_i2d>
 80014a4:	f04f 0200 	mov.w	r2, #0
 80014a8:	4b46      	ldr	r3, [pc, #280]	; (80015c4 <SVPWM_modulacja+0x5cc>)
 80014aa:	f7fe feb5 	bl	8000218 <__aeabi_dmul>
 80014ae:	4602      	mov	r2, r0
 80014b0:	460b      	mov	r3, r1
 80014b2:	4610      	mov	r0, r2
 80014b4:	4619      	mov	r1, r3
 80014b6:	f7ff f995 	bl	80007e4 <__aeabi_d2iz>
 80014ba:	4603      	mov	r3, r0
 80014bc:	b21a      	sxth	r2, r3
 80014be:	683b      	ldr	r3, [r7, #0]
 80014c0:	801a      	strh	r2, [r3, #0]
				*W_SVM = T1 + T2 + 0.5 * T0;
 80014c2:	69fa      	ldr	r2, [r7, #28]
 80014c4:	69bb      	ldr	r3, [r7, #24]
 80014c6:	4413      	add	r3, r2
 80014c8:	4618      	mov	r0, r3
 80014ca:	f7ff f921 	bl	8000710 <__aeabi_i2d>
 80014ce:	4604      	mov	r4, r0
 80014d0:	460d      	mov	r5, r1
 80014d2:	6978      	ldr	r0, [r7, #20]
 80014d4:	f7ff f91c 	bl	8000710 <__aeabi_i2d>
 80014d8:	f04f 0200 	mov.w	r2, #0
 80014dc:	4b39      	ldr	r3, [pc, #228]	; (80015c4 <SVPWM_modulacja+0x5cc>)
 80014de:	f7fe fe9b 	bl	8000218 <__aeabi_dmul>
 80014e2:	4602      	mov	r2, r0
 80014e4:	460b      	mov	r3, r1
 80014e6:	4620      	mov	r0, r4
 80014e8:	4629      	mov	r1, r5
 80014ea:	f7fe ffc5 	bl	8000478 <__adddf3>
 80014ee:	4602      	mov	r2, r0
 80014f0:	460b      	mov	r3, r1
 80014f2:	4610      	mov	r0, r2
 80014f4:	4619      	mov	r1, r3
 80014f6:	f7ff f975 	bl	80007e4 <__aeabi_d2iz>
 80014fa:	4603      	mov	r3, r0
 80014fc:	b21a      	sxth	r2, r3
 80014fe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001500:	801a      	strh	r2, [r3, #0]
				break;
 8001502:	e05b      	b.n	80015bc <SVPWM_modulacja+0x5c4>
		case 6:	T1 = -v;
 8001504:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001506:	425b      	negs	r3, r3
 8001508:	61fb      	str	r3, [r7, #28]
				T2 = -w;
 800150a:	6a3b      	ldr	r3, [r7, #32]
 800150c:	425b      	negs	r3, r3
 800150e:	61bb      	str	r3, [r7, #24]
				T0 = 1 - T1 - T2;
 8001510:	69fb      	ldr	r3, [r7, #28]
 8001512:	f1c3 0201 	rsb	r2, r3, #1
 8001516:	69bb      	ldr	r3, [r7, #24]
 8001518:	1ad3      	subs	r3, r2, r3
 800151a:	617b      	str	r3, [r7, #20]
				*U_SVM = T1 + T2 + 0.5 * T0;
 800151c:	69fa      	ldr	r2, [r7, #28]
 800151e:	69bb      	ldr	r3, [r7, #24]
 8001520:	4413      	add	r3, r2
 8001522:	4618      	mov	r0, r3
 8001524:	f7ff f8f4 	bl	8000710 <__aeabi_i2d>
 8001528:	4604      	mov	r4, r0
 800152a:	460d      	mov	r5, r1
 800152c:	6978      	ldr	r0, [r7, #20]
 800152e:	f7ff f8ef 	bl	8000710 <__aeabi_i2d>
 8001532:	f04f 0200 	mov.w	r2, #0
 8001536:	4b23      	ldr	r3, [pc, #140]	; (80015c4 <SVPWM_modulacja+0x5cc>)
 8001538:	f7fe fe6e 	bl	8000218 <__aeabi_dmul>
 800153c:	4602      	mov	r2, r0
 800153e:	460b      	mov	r3, r1
 8001540:	4620      	mov	r0, r4
 8001542:	4629      	mov	r1, r5
 8001544:	f7fe ff98 	bl	8000478 <__adddf3>
 8001548:	4602      	mov	r2, r0
 800154a:	460b      	mov	r3, r1
 800154c:	4610      	mov	r0, r2
 800154e:	4619      	mov	r1, r3
 8001550:	f7ff f948 	bl	80007e4 <__aeabi_d2iz>
 8001554:	4603      	mov	r3, r0
 8001556:	b21a      	sxth	r2, r3
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	801a      	strh	r2, [r3, #0]
				*V_SVM = 0.5 * T0;
 800155c:	6978      	ldr	r0, [r7, #20]
 800155e:	f7ff f8d7 	bl	8000710 <__aeabi_i2d>
 8001562:	f04f 0200 	mov.w	r2, #0
 8001566:	4b17      	ldr	r3, [pc, #92]	; (80015c4 <SVPWM_modulacja+0x5cc>)
 8001568:	f7fe fe56 	bl	8000218 <__aeabi_dmul>
 800156c:	4602      	mov	r2, r0
 800156e:	460b      	mov	r3, r1
 8001570:	4610      	mov	r0, r2
 8001572:	4619      	mov	r1, r3
 8001574:	f7ff f936 	bl	80007e4 <__aeabi_d2iz>
 8001578:	4603      	mov	r3, r0
 800157a:	b21a      	sxth	r2, r3
 800157c:	683b      	ldr	r3, [r7, #0]
 800157e:	801a      	strh	r2, [r3, #0]
				*W_SVM = T1 + 0.5 * T0;
 8001580:	69f8      	ldr	r0, [r7, #28]
 8001582:	f7ff f8c5 	bl	8000710 <__aeabi_i2d>
 8001586:	4604      	mov	r4, r0
 8001588:	460d      	mov	r5, r1
 800158a:	6978      	ldr	r0, [r7, #20]
 800158c:	f7ff f8c0 	bl	8000710 <__aeabi_i2d>
 8001590:	f04f 0200 	mov.w	r2, #0
 8001594:	4b0b      	ldr	r3, [pc, #44]	; (80015c4 <SVPWM_modulacja+0x5cc>)
 8001596:	f7fe fe3f 	bl	8000218 <__aeabi_dmul>
 800159a:	4602      	mov	r2, r0
 800159c:	460b      	mov	r3, r1
 800159e:	4620      	mov	r0, r4
 80015a0:	4629      	mov	r1, r5
 80015a2:	f7fe ff69 	bl	8000478 <__adddf3>
 80015a6:	4602      	mov	r2, r0
 80015a8:	460b      	mov	r3, r1
 80015aa:	4610      	mov	r0, r2
 80015ac:	4619      	mov	r1, r3
 80015ae:	f7ff f919 	bl	80007e4 <__aeabi_d2iz>
 80015b2:	4603      	mov	r3, r0
 80015b4:	b21a      	sxth	r2, r3
 80015b6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80015b8:	801a      	strh	r2, [r3, #0]
				break;
 80015ba:	bf00      	nop
		}

}
 80015bc:	bf00      	nop
 80015be:	3730      	adds	r7, #48	; 0x30
 80015c0:	46bd      	mov	sp, r7
 80015c2:	bdb0      	pop	{r4, r5, r7, pc}
 80015c4:	3fe00000 	.word	0x3fe00000

080015c8 <PID_REG>:



void PID_REG(PID_reg *Reg, int32_t act_value,int32_t ref_value, int32_t *iq_out)

{
 80015c8:	b480      	push	{r7}
 80015ca:	b085      	sub	sp, #20
 80015cc:	af00      	add	r7, sp, #0
 80015ce:	60f8      	str	r0, [r7, #12]
 80015d0:	60b9      	str	r1, [r7, #8]
 80015d2:	607a      	str	r2, [r7, #4]
 80015d4:	603b      	str	r3, [r7, #0]
	static int32_t last_error, tmp_out;
	Reg->PI_error = (ref_value) - act_value; // dopisac antiwindup oraz limity wartosci aby nie doszlo do przeregulowan
 80015d6:	687a      	ldr	r2, [r7, #4]
 80015d8:	68bb      	ldr	r3, [r7, #8]
 80015da:	1ad2      	subs	r2, r2, r3
 80015dc:	68fb      	ldr	r3, [r7, #12]
 80015de:	601a      	str	r2, [r3, #0]
	Reg->PI_error_sum= Reg->PI_error_sum + Reg->PI_error;
 80015e0:	68fb      	ldr	r3, [r7, #12]
 80015e2:	685a      	ldr	r2, [r3, #4]
 80015e4:	68fb      	ldr	r3, [r7, #12]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	441a      	add	r2, r3
 80015ea:	68fb      	ldr	r3, [r7, #12]
 80015ec:	605a      	str	r2, [r3, #4]
	Reg->PI_diff = Reg->PI_error-last_error; //error-last_erroe
 80015ee:	68fb      	ldr	r3, [r7, #12]
 80015f0:	681a      	ldr	r2, [r3, #0]
 80015f2:	4b34      	ldr	r3, [pc, #208]	; (80016c4 <PID_REG+0xfc>)
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	1ad2      	subs	r2, r2, r3
 80015f8:	68fb      	ldr	r3, [r7, #12]
 80015fa:	609a      	str	r2, [r3, #8]

	if (Reg->PI_error_sum > 10000000) Reg->PI_error_sum  =  10000000;
 80015fc:	68fb      	ldr	r3, [r7, #12]
 80015fe:	685b      	ldr	r3, [r3, #4]
 8001600:	4a31      	ldr	r2, [pc, #196]	; (80016c8 <PID_REG+0x100>)
 8001602:	4293      	cmp	r3, r2
 8001604:	dd02      	ble.n	800160c <PID_REG+0x44>
 8001606:	68fb      	ldr	r3, [r7, #12]
 8001608:	4a2f      	ldr	r2, [pc, #188]	; (80016c8 <PID_REG+0x100>)
 800160a:	605a      	str	r2, [r3, #4]
	if (Reg->PI_error_sum <-10000000) Reg->PI_error_sum  = -10000000;
 800160c:	68fb      	ldr	r3, [r7, #12]
 800160e:	685b      	ldr	r3, [r3, #4]
 8001610:	4a2e      	ldr	r2, [pc, #184]	; (80016cc <PID_REG+0x104>)
 8001612:	4293      	cmp	r3, r2
 8001614:	da02      	bge.n	800161c <PID_REG+0x54>
 8001616:	68fb      	ldr	r3, [r7, #12]
 8001618:	4a2c      	ldr	r2, [pc, #176]	; (80016cc <PID_REG+0x104>)
 800161a:	605a      	str	r2, [r3, #4]

	Reg->PI_out = Reg->KP * Reg->PI_error + Reg->KI * Reg->PI_error_sum + Reg->KD*Reg->PI_diff;
 800161c:	68fb      	ldr	r3, [r7, #12]
 800161e:	ed93 7a04 	vldr	s14, [r3, #16]
 8001622:	68fb      	ldr	r3, [r7, #12]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	ee07 3a90 	vmov	s15, r3
 800162a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800162e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001632:	68fb      	ldr	r3, [r7, #12]
 8001634:	edd3 6a05 	vldr	s13, [r3, #20]
 8001638:	68fb      	ldr	r3, [r7, #12]
 800163a:	685b      	ldr	r3, [r3, #4]
 800163c:	ee07 3a90 	vmov	s15, r3
 8001640:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001644:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001648:	ee37 7a27 	vadd.f32	s14, s14, s15
 800164c:	68fb      	ldr	r3, [r7, #12]
 800164e:	edd3 6a06 	vldr	s13, [r3, #24]
 8001652:	68fb      	ldr	r3, [r7, #12]
 8001654:	689b      	ldr	r3, [r3, #8]
 8001656:	ee07 3a90 	vmov	s15, r3
 800165a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800165e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001662:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001666:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800166a:	ee17 2a90 	vmov	r2, s15
 800166e:	68fb      	ldr	r3, [r7, #12]
 8001670:	60da      	str	r2, [r3, #12]

	if(Reg->PI_out > 50000000)Reg->PI_out= 50000000;
 8001672:	68fb      	ldr	r3, [r7, #12]
 8001674:	68db      	ldr	r3, [r3, #12]
 8001676:	4a16      	ldr	r2, [pc, #88]	; (80016d0 <PID_REG+0x108>)
 8001678:	4293      	cmp	r3, r2
 800167a:	dd02      	ble.n	8001682 <PID_REG+0xba>
 800167c:	68fb      	ldr	r3, [r7, #12]
 800167e:	4a14      	ldr	r2, [pc, #80]	; (80016d0 <PID_REG+0x108>)
 8001680:	60da      	str	r2, [r3, #12]
	if(Reg->PI_out <-50000000)Reg->PI_out=-50000000;
 8001682:	68fb      	ldr	r3, [r7, #12]
 8001684:	68db      	ldr	r3, [r3, #12]
 8001686:	4a13      	ldr	r2, [pc, #76]	; (80016d4 <PID_REG+0x10c>)
 8001688:	4293      	cmp	r3, r2
 800168a:	da02      	bge.n	8001692 <PID_REG+0xca>
 800168c:	68fb      	ldr	r3, [r7, #12]
 800168e:	4a11      	ldr	r2, [pc, #68]	; (80016d4 <PID_REG+0x10c>)
 8001690:	60da      	str	r2, [r3, #12]


	last_error=Reg->PI_error;
 8001692:	68fb      	ldr	r3, [r7, #12]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	4a0b      	ldr	r2, [pc, #44]	; (80016c4 <PID_REG+0xfc>)
 8001698:	6013      	str	r3, [r2, #0]
	tmp_out=(Reg->PI_out/100000);
 800169a:	68fb      	ldr	r3, [r7, #12]
 800169c:	68db      	ldr	r3, [r3, #12]
 800169e:	4a0e      	ldr	r2, [pc, #56]	; (80016d8 <PID_REG+0x110>)
 80016a0:	fb82 1203 	smull	r1, r2, r2, r3
 80016a4:	1352      	asrs	r2, r2, #13
 80016a6:	17db      	asrs	r3, r3, #31
 80016a8:	1ad3      	subs	r3, r2, r3
 80016aa:	4a0c      	ldr	r2, [pc, #48]	; (80016dc <PID_REG+0x114>)
 80016ac:	6013      	str	r3, [r2, #0]
	*iq_out = tmp_out; // dla PMSM vectro control method
 80016ae:	4b0b      	ldr	r3, [pc, #44]	; (80016dc <PID_REG+0x114>)
 80016b0:	681a      	ldr	r2, [r3, #0]
 80016b2:	683b      	ldr	r3, [r7, #0]
 80016b4:	601a      	str	r2, [r3, #0]

}
 80016b6:	bf00      	nop
 80016b8:	3714      	adds	r7, #20
 80016ba:	46bd      	mov	sp, r7
 80016bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c0:	4770      	bx	lr
 80016c2:	bf00      	nop
 80016c4:	200000a0 	.word	0x200000a0
 80016c8:	00989680 	.word	0x00989680
 80016cc:	ff676980 	.word	0xff676980
 80016d0:	02faf080 	.word	0x02faf080
 80016d4:	fd050f80 	.word	0xfd050f80
 80016d8:	14f8b589 	.word	0x14f8b589
 80016dc:	200000a4 	.word	0x200000a4

080016e0 <lpf_init>:

//======FIRST ORDER LOW PASS FILTER======

void lpf_init(LowPassFilter *fil, int16_t input, float alp)
{
 80016e0:	b480      	push	{r7}
 80016e2:	b085      	sub	sp, #20
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	60f8      	str	r0, [r7, #12]
 80016e8:	460b      	mov	r3, r1
 80016ea:	ed87 0a01 	vstr	s0, [r7, #4]
 80016ee:	817b      	strh	r3, [r7, #10]

	fil->alp_gain = alp;
 80016f0:	edd7 7a01 	vldr	s15, [r7, #4]
 80016f4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80016f8:	ee17 3a90 	vmov	r3, s15
 80016fc:	b21a      	sxth	r2, r3
 80016fe:	68fb      	ldr	r3, [r7, #12]
 8001700:	805a      	strh	r2, [r3, #2]
}
 8001702:	bf00      	nop
 8001704:	3714      	adds	r7, #20
 8001706:	46bd      	mov	sp, r7
 8001708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800170c:	4770      	bx	lr

0800170e <lpf_update>:

int16_t lpf_update(LowPassFilter *fil, int32_t input)
{
 800170e:	b480      	push	{r7}
 8001710:	b083      	sub	sp, #12
 8001712:	af00      	add	r7, sp, #0
 8001714:	6078      	str	r0, [r7, #4]
 8001716:	6039      	str	r1, [r7, #0]

    fil->out = fil->out - ( fil->alp_gain * (fil->out - input));
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800171e:	b29a      	uxth	r2, r3
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001726:	b299      	uxth	r1, r3
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800172e:	4618      	mov	r0, r3
 8001730:	683b      	ldr	r3, [r7, #0]
 8001732:	1ac3      	subs	r3, r0, r3
 8001734:	b29b      	uxth	r3, r3
 8001736:	fb11 f303 	smulbb	r3, r1, r3
 800173a:	b29b      	uxth	r3, r3
 800173c:	1ad3      	subs	r3, r2, r3
 800173e:	b29b      	uxth	r3, r3
 8001740:	b21a      	sxth	r2, r3
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	801a      	strh	r2, [r3, #0]
    return fil->out ;
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	f9b3 3000 	ldrsh.w	r3, [r3]
}
 800174c:	4618      	mov	r0, r3
 800174e:	370c      	adds	r7, #12
 8001750:	46bd      	mov	sp, r7
 8001752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001756:	4770      	bx	lr

08001758 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001758:	b580      	push	{r7, lr}
 800175a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

	Iq_reg.KP = 10000;
 800175c:	4b62      	ldr	r3, [pc, #392]	; (80018e8 <main+0x190>)
 800175e:	f242 7210 	movw	r2, #10000	; 0x2710
 8001762:	819a      	strh	r2, [r3, #12]
	Iq_reg.KI = 200;
 8001764:	4b60      	ldr	r3, [pc, #384]	; (80018e8 <main+0x190>)
 8001766:	22c8      	movs	r2, #200	; 0xc8
 8001768:	81da      	strh	r2, [r3, #14]
	Id_reg.KP = 10000;
 800176a:	4b60      	ldr	r3, [pc, #384]	; (80018ec <main+0x194>)
 800176c:	f242 7210 	movw	r2, #10000	; 0x2710
 8001770:	819a      	strh	r2, [r3, #12]
	Id_reg.KI = 200;
 8001772:	4b5e      	ldr	r3, [pc, #376]	; (80018ec <main+0x194>)
 8001774:	22c8      	movs	r2, #200	; 0xc8
 8001776:	81da      	strh	r2, [r3, #14]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001778:	f001 fda7 	bl	80032ca <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800177c:	f000 f8de 	bl	800193c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001780:	f000 fcf0 	bl	8002164 <MX_GPIO_Init>
  MX_ADC1_Init();
 8001784:	f000 f926 	bl	80019d4 <MX_ADC1_Init>
  MX_SPI3_Init();
 8001788:	f000 fad6 	bl	8001d38 <MX_SPI3_Init>
  MX_TIM1_Init();
 800178c:	f000 fb12 	bl	8001db4 <MX_TIM1_Init>
  MX_TIM6_Init();
 8001790:	f000 fc40 	bl	8002014 <MX_TIM6_Init>
  MX_TIM17_Init();
 8001794:	f000 fc74 	bl	8002080 <MX_TIM17_Init>
  MX_ADC2_Init();
 8001798:	f000 f9d2 	bl	8001b40 <MX_ADC2_Init>
  MX_DAC1_Init();
 800179c:	f000 fa4c 	bl	8001c38 <MX_DAC1_Init>
  MX_TIM2_Init();
 80017a0:	f000 fbe4 	bl	8001f6c <MX_TIM2_Init>
  MX_CORDIC_Init();
 80017a4:	f000 fa34 	bl	8001c10 <MX_CORDIC_Init>
  MX_USART1_UART_Init();
 80017a8:	f000 fc90 	bl	80020cc <MX_USART1_UART_Init>
  MX_FDCAN1_Init();
 80017ac:	f000 fa7e 	bl	8001cac <MX_FDCAN1_Init>
  /* USER CODE BEGIN 2 */



HAL_SPI_Init(&hspi3);
 80017b0:	484f      	ldr	r0, [pc, #316]	; (80018f0 <main+0x198>)
 80017b2:	f006 f829 	bl	8007808 <HAL_SPI_Init>
//REG_ANGLECOM=get_even_flag(REG_ANGLECOM_ADR|0X4000);
//REG_ANGLEUNC=get_even_flag(REG_ANGLEUNC_ADR|0X4000);
//REG_DIAAGC  =get_even_flag(REG_DIAAGC_ADR |0X4000 );
HAL_TIM_PWM_Start_IT(&htim1,TIM_CHANNEL_1);
 80017b6:	2100      	movs	r1, #0
 80017b8:	484e      	ldr	r0, [pc, #312]	; (80018f4 <main+0x19c>)
 80017ba:	f006 fff5 	bl	80087a8 <HAL_TIM_PWM_Start_IT>
HAL_TIM_PWM_Start_IT(&htim1,TIM_CHANNEL_2);
 80017be:	2104      	movs	r1, #4
 80017c0:	484c      	ldr	r0, [pc, #304]	; (80018f4 <main+0x19c>)
 80017c2:	f006 fff1 	bl	80087a8 <HAL_TIM_PWM_Start_IT>
HAL_TIM_PWM_Start_IT(&htim1,TIM_CHANNEL_3);
 80017c6:	2108      	movs	r1, #8
 80017c8:	484a      	ldr	r0, [pc, #296]	; (80018f4 <main+0x19c>)
 80017ca:	f006 ffed 	bl	80087a8 <HAL_TIM_PWM_Start_IT>
HAL_TIM_PWM_Start_IT(&htim1,TIM_CHANNEL_4);
 80017ce:	210c      	movs	r1, #12
 80017d0:	4848      	ldr	r0, [pc, #288]	; (80018f4 <main+0x19c>)
 80017d2:	f006 ffe9 	bl	80087a8 <HAL_TIM_PWM_Start_IT>
HAL_TIMEx_PWMN_Start_IT(&htim1, TIM_CHANNEL_1);
 80017d6:	2100      	movs	r1, #0
 80017d8:	4846      	ldr	r0, [pc, #280]	; (80018f4 <main+0x19c>)
 80017da:	f008 fa8d 	bl	8009cf8 <HAL_TIMEx_PWMN_Start_IT>
HAL_TIMEx_PWMN_Start_IT(&htim1, TIM_CHANNEL_2);
 80017de:	2104      	movs	r1, #4
 80017e0:	4844      	ldr	r0, [pc, #272]	; (80018f4 <main+0x19c>)
 80017e2:	f008 fa89 	bl	8009cf8 <HAL_TIMEx_PWMN_Start_IT>
HAL_TIMEx_PWMN_Start_IT(&htim1, TIM_CHANNEL_3);
 80017e6:	2108      	movs	r1, #8
 80017e8:	4842      	ldr	r0, [pc, #264]	; (80018f4 <main+0x19c>)
 80017ea:	f008 fa85 	bl	8009cf8 <HAL_TIMEx_PWMN_Start_IT>
HAL_TIM_Encoder_Start_IT(&htim2, TIM_CHANNEL_1);
 80017ee:	2100      	movs	r1, #0
 80017f0:	4841      	ldr	r0, [pc, #260]	; (80018f8 <main+0x1a0>)
 80017f2:	f007 f9cb 	bl	8008b8c <HAL_TIM_Encoder_Start_IT>
HAL_TIM_Encoder_Start_IT(&htim2, TIM_CHANNEL_2);
 80017f6:	2104      	movs	r1, #4
 80017f8:	483f      	ldr	r0, [pc, #252]	; (80018f8 <main+0x1a0>)
 80017fa:	f007 f9c7 	bl	8008b8c <HAL_TIM_Encoder_Start_IT>

HAL_Delay(1);
 80017fe:	2001      	movs	r0, #1
 8001800:	f001 fdd4 	bl	80033ac <HAL_Delay>
SPI_bufor_tx[0]=REG_ANGLECOM_ADR;//odczyt_pozycji;
 8001804:	4b3d      	ldr	r3, [pc, #244]	; (80018fc <main+0x1a4>)
 8001806:	881b      	ldrh	r3, [r3, #0]
 8001808:	b29a      	uxth	r2, r3
 800180a:	4b3d      	ldr	r3, [pc, #244]	; (8001900 <main+0x1a8>)
 800180c:	801a      	strh	r2, [r3, #0]
               	  		 // SPI_bufor_tx[1]=odczyt_pozycji&0XFF;
HAL_GPIO_WritePin(GPIOD,GPIO_PIN_2,0);
 800180e:	2200      	movs	r2, #0
 8001810:	2104      	movs	r1, #4
 8001812:	483c      	ldr	r0, [pc, #240]	; (8001904 <main+0x1ac>)
 8001814:	f004 ffe4 	bl	80067e0 <HAL_GPIO_WritePin>
HAL_SPI_Transmit(&hspi3,&SPI_bufor_tx,1,2);
 8001818:	2302      	movs	r3, #2
 800181a:	2201      	movs	r2, #1
 800181c:	4938      	ldr	r1, [pc, #224]	; (8001900 <main+0x1a8>)
 800181e:	4834      	ldr	r0, [pc, #208]	; (80018f0 <main+0x198>)
 8001820:	f006 f89d 	bl	800795e <HAL_SPI_Transmit>
HAL_GPIO_WritePin(GPIOD,GPIO_PIN_2,1);
 8001824:	2201      	movs	r2, #1
 8001826:	2104      	movs	r1, #4
 8001828:	4836      	ldr	r0, [pc, #216]	; (8001904 <main+0x1ac>)
 800182a:	f004 ffd9 	bl	80067e0 <HAL_GPIO_WritePin>
SPI_bufor_tx[0]=0X0000;
 800182e:	4b34      	ldr	r3, [pc, #208]	; (8001900 <main+0x1a8>)
 8001830:	2200      	movs	r2, #0
 8001832:	801a      	strh	r2, [r3, #0]
HAL_GPIO_WritePin(GPIOD,GPIO_PIN_2,0);
 8001834:	2200      	movs	r2, #0
 8001836:	2104      	movs	r1, #4
 8001838:	4832      	ldr	r0, [pc, #200]	; (8001904 <main+0x1ac>)
 800183a:	f004 ffd1 	bl	80067e0 <HAL_GPIO_WritePin>
HAL_SPI_Receive(&hspi3,&SPI_bufor_rx,1,2);
 800183e:	2302      	movs	r3, #2
 8001840:	2201      	movs	r2, #1
 8001842:	4931      	ldr	r1, [pc, #196]	; (8001908 <main+0x1b0>)
 8001844:	482a      	ldr	r0, [pc, #168]	; (80018f0 <main+0x198>)
 8001846:	f006 f9f8 	bl	8007c3a <HAL_SPI_Receive>
HAL_GPIO_WritePin(GPIOD,GPIO_PIN_2,1);
 800184a:	2201      	movs	r2, #1
 800184c:	2104      	movs	r1, #4
 800184e:	482d      	ldr	r0, [pc, #180]	; (8001904 <main+0x1ac>)
 8001850:	f004 ffc6 	bl	80067e0 <HAL_GPIO_WritePin>
REG_ANGLECOM=pozycja_walu=SPI_bufor_rx[0]&0X3fff;
 8001854:	4b2c      	ldr	r3, [pc, #176]	; (8001908 <main+0x1b0>)
 8001856:	881b      	ldrh	r3, [r3, #0]
 8001858:	b29b      	uxth	r3, r3
 800185a:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800185e:	b29a      	uxth	r2, r3
 8001860:	4b2a      	ldr	r3, [pc, #168]	; (800190c <main+0x1b4>)
 8001862:	4611      	mov	r1, r2
 8001864:	8019      	strh	r1, [r3, #0]
 8001866:	4b2a      	ldr	r3, [pc, #168]	; (8001910 <main+0x1b8>)
 8001868:	801a      	strh	r2, [r3, #0]

SPI_bufor_rx[0]=0;
 800186a:	4b27      	ldr	r3, [pc, #156]	; (8001908 <main+0x1b0>)
 800186c:	2200      	movs	r2, #0
 800186e:	801a      	strh	r2, [r3, #0]

HAL_ADCEx_InjectedStart_IT(&hadc1);
 8001870:	4828      	ldr	r0, [pc, #160]	; (8001914 <main+0x1bc>)
 8001872:	f003 f97f 	bl	8004b74 <HAL_ADCEx_InjectedStart_IT>
POSTION.KP=20000;
 8001876:	4b28      	ldr	r3, [pc, #160]	; (8001918 <main+0x1c0>)
 8001878:	4a28      	ldr	r2, [pc, #160]	; (800191c <main+0x1c4>)
 800187a:	611a      	str	r2, [r3, #16]
POSTION.KI=1U;
 800187c:	4b26      	ldr	r3, [pc, #152]	; (8001918 <main+0x1c0>)
 800187e:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8001882:	615a      	str	r2, [r3, #20]
POSTION.KD=220000;
 8001884:	4b24      	ldr	r3, [pc, #144]	; (8001918 <main+0x1c0>)
 8001886:	4a26      	ldr	r2, [pc, #152]	; (8001920 <main+0x1c8>)
 8001888:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN WHILE */
  while (1)
  {


	  if(czas_100ms==1)
 800188a:	4b26      	ldr	r3, [pc, #152]	; (8001924 <main+0x1cc>)
 800188c:	881b      	ldrh	r3, [r3, #0]
 800188e:	b29b      	uxth	r3, r3
 8001890:	2b01      	cmp	r3, #1
 8001892:	d119      	bne.n	80018c8 <main+0x170>
	  {
		  //bufor_tx[0]='$'; // synchro
		  bufor_tx[1]=rpm_speed>>8;
 8001894:	4b24      	ldr	r3, [pc, #144]	; (8001928 <main+0x1d0>)
 8001896:	881b      	ldrh	r3, [r3, #0]
 8001898:	b21b      	sxth	r3, r3
 800189a:	121b      	asrs	r3, r3, #8
 800189c:	b21b      	sxth	r3, r3
 800189e:	b2da      	uxtb	r2, r3
 80018a0:	4b22      	ldr	r3, [pc, #136]	; (800192c <main+0x1d4>)
 80018a2:	705a      	strb	r2, [r3, #1]
		  bufor_tx[2]=rpm_speed;
 80018a4:	4b20      	ldr	r3, [pc, #128]	; (8001928 <main+0x1d0>)
 80018a6:	881b      	ldrh	r3, [r3, #0]
 80018a8:	b21b      	sxth	r3, r3
 80018aa:	b2da      	uxtb	r2, r3
 80018ac:	4b1f      	ldr	r3, [pc, #124]	; (800192c <main+0x1d4>)
 80018ae:	709a      	strb	r2, [r3, #2]
		  bufor_tx[0]=0x55;
 80018b0:	4b1e      	ldr	r3, [pc, #120]	; (800192c <main+0x1d4>)
 80018b2:	2255      	movs	r2, #85	; 0x55
 80018b4:	701a      	strb	r2, [r3, #0]
		  HAL_UART_Transmit(&huart1,bufor_tx , 3, 1);
 80018b6:	2301      	movs	r3, #1
 80018b8:	2203      	movs	r2, #3
 80018ba:	491c      	ldr	r1, [pc, #112]	; (800192c <main+0x1d4>)
 80018bc:	481c      	ldr	r0, [pc, #112]	; (8001930 <main+0x1d8>)
 80018be:	f008 fd00 	bl	800a2c2 <HAL_UART_Transmit>
		  czas_100ms=0;
 80018c2:	4b18      	ldr	r3, [pc, #96]	; (8001924 <main+0x1cc>)
 80018c4:	2200      	movs	r2, #0
 80018c6:	801a      	strh	r2, [r3, #0]

	  }

kierunek2=(TIM2->CR1)&0x10;
 80018c8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	b29b      	uxth	r3, r3
 80018d0:	f003 0310 	and.w	r3, r3, #16
 80018d4:	b29a      	uxth	r2, r3
 80018d6:	4b17      	ldr	r3, [pc, #92]	; (8001934 <main+0x1dc>)
 80018d8:	801a      	strh	r2, [r3, #0]
kierunek=kierunek2;
 80018da:	4b16      	ldr	r3, [pc, #88]	; (8001934 <main+0x1dc>)
 80018dc:	881b      	ldrh	r3, [r3, #0]
 80018de:	b29a      	uxth	r2, r3
 80018e0:	4b15      	ldr	r3, [pc, #84]	; (8001938 <main+0x1e0>)
 80018e2:	801a      	strh	r2, [r3, #0]
	  if(czas_100ms==1)
 80018e4:	e7d1      	b.n	800188a <main+0x132>
 80018e6:	bf00      	nop
 80018e8:	20000468 	.word	0x20000468
 80018ec:	20000490 	.word	0x20000490
 80018f0:	20000220 	.word	0x20000220
 80018f4:	20000284 	.word	0x20000284
 80018f8:	200002d0 	.word	0x200002d0
 80018fc:	20000004 	.word	0x20000004
 8001900:	20000008 	.word	0x20000008
 8001904:	48000c00 	.word	0x48000c00
 8001908:	20000448 	.word	0x20000448
 800190c:	20000048 	.word	0x20000048
 8001910:	20000444 	.word	0x20000444
 8001914:	200000a8 	.word	0x200000a8
 8001918:	200004c4 	.word	0x200004c4
 800191c:	469c4000 	.word	0x469c4000
 8001920:	4856d800 	.word	0x4856d800
 8001924:	20000466 	.word	0x20000466
 8001928:	2000007c 	.word	0x2000007c
 800192c:	20000014 	.word	0x20000014
 8001930:	200003b4 	.word	0x200003b4
 8001934:	2000045c 	.word	0x2000045c
 8001938:	2000045a 	.word	0x2000045a

0800193c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800193c:	b580      	push	{r7, lr}
 800193e:	b094      	sub	sp, #80	; 0x50
 8001940:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001942:	f107 0318 	add.w	r3, r7, #24
 8001946:	2238      	movs	r2, #56	; 0x38
 8001948:	2100      	movs	r1, #0
 800194a:	4618      	mov	r0, r3
 800194c:	f009 fed2 	bl	800b6f4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001950:	1d3b      	adds	r3, r7, #4
 8001952:	2200      	movs	r2, #0
 8001954:	601a      	str	r2, [r3, #0]
 8001956:	605a      	str	r2, [r3, #4]
 8001958:	609a      	str	r2, [r3, #8]
 800195a:	60da      	str	r2, [r3, #12]
 800195c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 800195e:	2000      	movs	r0, #0
 8001960:	f004 ff7a 	bl	8006858 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001964:	2302      	movs	r3, #2
 8001966:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001968:	f44f 7380 	mov.w	r3, #256	; 0x100
 800196c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800196e:	2340      	movs	r3, #64	; 0x40
 8001970:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001972:	2302      	movs	r3, #2
 8001974:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001976:	2302      	movs	r3, #2
 8001978:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 800197a:	2304      	movs	r3, #4
 800197c:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 800197e:	2355      	movs	r3, #85	; 0x55
 8001980:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001982:	2302      	movs	r3, #2
 8001984:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001986:	2302      	movs	r3, #2
 8001988:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800198a:	2302      	movs	r3, #2
 800198c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800198e:	f107 0318 	add.w	r3, r7, #24
 8001992:	4618      	mov	r0, r3
 8001994:	f005 f814 	bl	80069c0 <HAL_RCC_OscConfig>
 8001998:	4603      	mov	r3, r0
 800199a:	2b00      	cmp	r3, #0
 800199c:	d001      	beq.n	80019a2 <SystemClock_Config+0x66>
  {
    Error_Handler();
 800199e:	f000 fe57 	bl	8002650 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80019a2:	230f      	movs	r3, #15
 80019a4:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80019a6:	2303      	movs	r3, #3
 80019a8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80019aa:	2300      	movs	r3, #0
 80019ac:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80019ae:	2300      	movs	r3, #0
 80019b0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80019b2:	2300      	movs	r3, #0
 80019b4:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80019b6:	1d3b      	adds	r3, r7, #4
 80019b8:	2104      	movs	r1, #4
 80019ba:	4618      	mov	r0, r3
 80019bc:	f005 fb18 	bl	8006ff0 <HAL_RCC_ClockConfig>
 80019c0:	4603      	mov	r3, r0
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d001      	beq.n	80019ca <SystemClock_Config+0x8e>
  {
    Error_Handler();
 80019c6:	f000 fe43 	bl	8002650 <Error_Handler>
  }
}
 80019ca:	bf00      	nop
 80019cc:	3750      	adds	r7, #80	; 0x50
 80019ce:	46bd      	mov	sp, r7
 80019d0:	bd80      	pop	{r7, pc}
	...

080019d4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80019d4:	b580      	push	{r7, lr}
 80019d6:	b092      	sub	sp, #72	; 0x48
 80019d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80019da:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80019de:	2200      	movs	r2, #0
 80019e0:	601a      	str	r2, [r3, #0]
 80019e2:	605a      	str	r2, [r3, #4]
 80019e4:	609a      	str	r2, [r3, #8]
  ADC_InjectionConfTypeDef sConfigInjected = {0};
 80019e6:	463b      	mov	r3, r7
 80019e8:	223c      	movs	r2, #60	; 0x3c
 80019ea:	2100      	movs	r1, #0
 80019ec:	4618      	mov	r0, r3
 80019ee:	f009 fe81 	bl	800b6f4 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80019f2:	4b4e      	ldr	r3, [pc, #312]	; (8001b2c <MX_ADC1_Init+0x158>)
 80019f4:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80019f8:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV4;
 80019fa:	4b4c      	ldr	r3, [pc, #304]	; (8001b2c <MX_ADC1_Init+0x158>)
 80019fc:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8001a00:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001a02:	4b4a      	ldr	r3, [pc, #296]	; (8001b2c <MX_ADC1_Init+0x158>)
 8001a04:	2200      	movs	r2, #0
 8001a06:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001a08:	4b48      	ldr	r3, [pc, #288]	; (8001b2c <MX_ADC1_Init+0x158>)
 8001a0a:	2200      	movs	r2, #0
 8001a0c:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 8001a0e:	4b47      	ldr	r3, [pc, #284]	; (8001b2c <MX_ADC1_Init+0x158>)
 8001a10:	2200      	movs	r2, #0
 8001a12:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8001a14:	4b45      	ldr	r3, [pc, #276]	; (8001b2c <MX_ADC1_Init+0x158>)
 8001a16:	2201      	movs	r2, #1
 8001a18:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001a1a:	4b44      	ldr	r3, [pc, #272]	; (8001b2c <MX_ADC1_Init+0x158>)
 8001a1c:	2204      	movs	r2, #4
 8001a1e:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001a20:	4b42      	ldr	r3, [pc, #264]	; (8001b2c <MX_ADC1_Init+0x158>)
 8001a22:	2200      	movs	r2, #0
 8001a24:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001a26:	4b41      	ldr	r3, [pc, #260]	; (8001b2c <MX_ADC1_Init+0x158>)
 8001a28:	2200      	movs	r2, #0
 8001a2a:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 8001a2c:	4b3f      	ldr	r3, [pc, #252]	; (8001b2c <MX_ADC1_Init+0x158>)
 8001a2e:	2201      	movs	r2, #1
 8001a30:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001a32:	4b3e      	ldr	r3, [pc, #248]	; (8001b2c <MX_ADC1_Init+0x158>)
 8001a34:	2200      	movs	r2, #0
 8001a36:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001a3a:	4b3c      	ldr	r3, [pc, #240]	; (8001b2c <MX_ADC1_Init+0x158>)
 8001a3c:	2200      	movs	r2, #0
 8001a3e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001a42:	4b3a      	ldr	r3, [pc, #232]	; (8001b2c <MX_ADC1_Init+0x158>)
 8001a44:	2200      	movs	r2, #0
 8001a46:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8001a48:	4b38      	ldr	r3, [pc, #224]	; (8001b2c <MX_ADC1_Init+0x158>)
 8001a4a:	2200      	movs	r2, #0
 8001a4c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001a50:	4836      	ldr	r0, [pc, #216]	; (8001b2c <MX_ADC1_Init+0x158>)
 8001a52:	f001 fefd 	bl	8003850 <HAL_ADC_Init>
 8001a56:	4603      	mov	r3, r0
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d001      	beq.n	8001a60 <MX_ADC1_Init+0x8c>
  {
    Error_Handler();
 8001a5c:	f000 fdf8 	bl	8002650 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8001a60:	2300      	movs	r3, #0
 8001a62:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8001a64:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001a68:	4619      	mov	r1, r3
 8001a6a:	4830      	ldr	r0, [pc, #192]	; (8001b2c <MX_ADC1_Init+0x158>)
 8001a6c:	f003 fea8 	bl	80057c0 <HAL_ADCEx_MultiModeConfigChannel>
 8001a70:	4603      	mov	r3, r0
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d001      	beq.n	8001a7a <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 8001a76:	f000 fdeb 	bl	8002650 <Error_Handler>
  }

  /** Configure Injected Channel
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_1;
 8001a7a:	4b2d      	ldr	r3, [pc, #180]	; (8001b30 <MX_ADC1_Init+0x15c>)
 8001a7c:	603b      	str	r3, [r7, #0]
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_1;
 8001a7e:	2309      	movs	r3, #9
 8001a80:	607b      	str	r3, [r7, #4]
  sConfigInjected.InjectedSamplingTime = ADC_SAMPLETIME_12CYCLES_5;
 8001a82:	2302      	movs	r3, #2
 8001a84:	60bb      	str	r3, [r7, #8]
  sConfigInjected.InjectedSingleDiff = ADC_SINGLE_ENDED;
 8001a86:	237f      	movs	r3, #127	; 0x7f
 8001a88:	60fb      	str	r3, [r7, #12]
  sConfigInjected.InjectedOffsetNumber = ADC_OFFSET_NONE;
 8001a8a:	2304      	movs	r3, #4
 8001a8c:	613b      	str	r3, [r7, #16]
  sConfigInjected.InjectedOffset = 0;
 8001a8e:	2300      	movs	r3, #0
 8001a90:	617b      	str	r3, [r7, #20]
  sConfigInjected.InjectedNbrOfConversion = 4;
 8001a92:	2304      	movs	r3, #4
 8001a94:	623b      	str	r3, [r7, #32]
  sConfigInjected.InjectedDiscontinuousConvMode = DISABLE;
 8001a96:	2300      	movs	r3, #0
 8001a98:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  sConfigInjected.AutoInjectedConv = DISABLE;
 8001a9c:	2300      	movs	r3, #0
 8001a9e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  sConfigInjected.QueueInjectedContext = DISABLE;
 8001aa2:	2300      	movs	r3, #0
 8001aa4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  sConfigInjected.ExternalTrigInjecConv = ADC_EXTERNALTRIGINJEC_T1_CC4;
 8001aa8:	2384      	movs	r3, #132	; 0x84
 8001aaa:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigInjected.ExternalTrigInjecConvEdge = ADC_EXTERNALTRIGINJECCONV_EDGE_RISING;
 8001aac:	2380      	movs	r3, #128	; 0x80
 8001aae:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigInjected.InjecOversamplingMode = DISABLE;
 8001ab0:	2300      	movs	r3, #0
 8001ab2:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 8001ab6:	463b      	mov	r3, r7
 8001ab8:	4619      	mov	r1, r3
 8001aba:	481c      	ldr	r0, [pc, #112]	; (8001b2c <MX_ADC1_Init+0x158>)
 8001abc:	f003 f9a0 	bl	8004e00 <HAL_ADCEx_InjectedConfigChannel>
 8001ac0:	4603      	mov	r3, r0
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d001      	beq.n	8001aca <MX_ADC1_Init+0xf6>
  {
    Error_Handler();
 8001ac6:	f000 fdc3 	bl	8002650 <Error_Handler>
  }

  /** Configure Injected Channel
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_2;
 8001aca:	4b1a      	ldr	r3, [pc, #104]	; (8001b34 <MX_ADC1_Init+0x160>)
 8001acc:	603b      	str	r3, [r7, #0]
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_2;
 8001ace:	f240 130f 	movw	r3, #271	; 0x10f
 8001ad2:	607b      	str	r3, [r7, #4]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 8001ad4:	463b      	mov	r3, r7
 8001ad6:	4619      	mov	r1, r3
 8001ad8:	4814      	ldr	r0, [pc, #80]	; (8001b2c <MX_ADC1_Init+0x158>)
 8001ada:	f003 f991 	bl	8004e00 <HAL_ADCEx_InjectedConfigChannel>
 8001ade:	4603      	mov	r3, r0
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d001      	beq.n	8001ae8 <MX_ADC1_Init+0x114>
  {
    Error_Handler();
 8001ae4:	f000 fdb4 	bl	8002650 <Error_Handler>
  }

  /** Configure Injected Channel
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_6;
 8001ae8:	4b13      	ldr	r3, [pc, #76]	; (8001b38 <MX_ADC1_Init+0x164>)
 8001aea:	603b      	str	r3, [r7, #0]
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_3;
 8001aec:	f240 2315 	movw	r3, #533	; 0x215
 8001af0:	607b      	str	r3, [r7, #4]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 8001af2:	463b      	mov	r3, r7
 8001af4:	4619      	mov	r1, r3
 8001af6:	480d      	ldr	r0, [pc, #52]	; (8001b2c <MX_ADC1_Init+0x158>)
 8001af8:	f003 f982 	bl	8004e00 <HAL_ADCEx_InjectedConfigChannel>
 8001afc:	4603      	mov	r3, r0
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d001      	beq.n	8001b06 <MX_ADC1_Init+0x132>
  {
    Error_Handler();
 8001b02:	f000 fda5 	bl	8002650 <Error_Handler>
  }

  /** Configure Injected Channel
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_7;
 8001b06:	4b0d      	ldr	r3, [pc, #52]	; (8001b3c <MX_ADC1_Init+0x168>)
 8001b08:	603b      	str	r3, [r7, #0]
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_4;
 8001b0a:	f240 331b 	movw	r3, #795	; 0x31b
 8001b0e:	607b      	str	r3, [r7, #4]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 8001b10:	463b      	mov	r3, r7
 8001b12:	4619      	mov	r1, r3
 8001b14:	4805      	ldr	r0, [pc, #20]	; (8001b2c <MX_ADC1_Init+0x158>)
 8001b16:	f003 f973 	bl	8004e00 <HAL_ADCEx_InjectedConfigChannel>
 8001b1a:	4603      	mov	r3, r0
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d001      	beq.n	8001b24 <MX_ADC1_Init+0x150>
  {
    Error_Handler();
 8001b20:	f000 fd96 	bl	8002650 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001b24:	bf00      	nop
 8001b26:	3748      	adds	r7, #72	; 0x48
 8001b28:	46bd      	mov	sp, r7
 8001b2a:	bd80      	pop	{r7, pc}
 8001b2c:	200000a8 	.word	0x200000a8
 8001b30:	04300002 	.word	0x04300002
 8001b34:	08600004 	.word	0x08600004
 8001b38:	19200040 	.word	0x19200040
 8001b3c:	1d500080 	.word	0x1d500080

08001b40 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8001b40:	b580      	push	{r7, lr}
 8001b42:	b088      	sub	sp, #32
 8001b44:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001b46:	463b      	mov	r3, r7
 8001b48:	2220      	movs	r2, #32
 8001b4a:	2100      	movs	r1, #0
 8001b4c:	4618      	mov	r0, r3
 8001b4e:	f009 fdd1 	bl	800b6f4 <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8001b52:	4b2c      	ldr	r3, [pc, #176]	; (8001c04 <MX_ADC2_Init+0xc4>)
 8001b54:	4a2c      	ldr	r2, [pc, #176]	; (8001c08 <MX_ADC2_Init+0xc8>)
 8001b56:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV4;
 8001b58:	4b2a      	ldr	r3, [pc, #168]	; (8001c04 <MX_ADC2_Init+0xc4>)
 8001b5a:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8001b5e:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8001b60:	4b28      	ldr	r3, [pc, #160]	; (8001c04 <MX_ADC2_Init+0xc4>)
 8001b62:	2200      	movs	r2, #0
 8001b64:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001b66:	4b27      	ldr	r3, [pc, #156]	; (8001c04 <MX_ADC2_Init+0xc4>)
 8001b68:	2200      	movs	r2, #0
 8001b6a:	60da      	str	r2, [r3, #12]
  hadc2.Init.GainCompensation = 0;
 8001b6c:	4b25      	ldr	r3, [pc, #148]	; (8001c04 <MX_ADC2_Init+0xc4>)
 8001b6e:	2200      	movs	r2, #0
 8001b70:	611a      	str	r2, [r3, #16]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001b72:	4b24      	ldr	r3, [pc, #144]	; (8001c04 <MX_ADC2_Init+0xc4>)
 8001b74:	2200      	movs	r2, #0
 8001b76:	615a      	str	r2, [r3, #20]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001b78:	4b22      	ldr	r3, [pc, #136]	; (8001c04 <MX_ADC2_Init+0xc4>)
 8001b7a:	2204      	movs	r2, #4
 8001b7c:	619a      	str	r2, [r3, #24]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8001b7e:	4b21      	ldr	r3, [pc, #132]	; (8001c04 <MX_ADC2_Init+0xc4>)
 8001b80:	2200      	movs	r2, #0
 8001b82:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8001b84:	4b1f      	ldr	r3, [pc, #124]	; (8001c04 <MX_ADC2_Init+0xc4>)
 8001b86:	2200      	movs	r2, #0
 8001b88:	775a      	strb	r2, [r3, #29]
  hadc2.Init.NbrOfConversion = 1;
 8001b8a:	4b1e      	ldr	r3, [pc, #120]	; (8001c04 <MX_ADC2_Init+0xc4>)
 8001b8c:	2201      	movs	r2, #1
 8001b8e:	621a      	str	r2, [r3, #32]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8001b90:	4b1c      	ldr	r3, [pc, #112]	; (8001c04 <MX_ADC2_Init+0xc4>)
 8001b92:	2200      	movs	r2, #0
 8001b94:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc2.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T6_TRGO;
 8001b98:	4b1a      	ldr	r3, [pc, #104]	; (8001c04 <MX_ADC2_Init+0xc4>)
 8001b9a:	f44f 62b4 	mov.w	r2, #1440	; 0x5a0
 8001b9e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8001ba0:	4b18      	ldr	r3, [pc, #96]	; (8001c04 <MX_ADC2_Init+0xc4>)
 8001ba2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001ba6:	631a      	str	r2, [r3, #48]	; 0x30
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8001ba8:	4b16      	ldr	r3, [pc, #88]	; (8001c04 <MX_ADC2_Init+0xc4>)
 8001baa:	2200      	movs	r2, #0
 8001bac:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001bb0:	4b14      	ldr	r3, [pc, #80]	; (8001c04 <MX_ADC2_Init+0xc4>)
 8001bb2:	2200      	movs	r2, #0
 8001bb4:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc2.Init.OversamplingMode = DISABLE;
 8001bb6:	4b13      	ldr	r3, [pc, #76]	; (8001c04 <MX_ADC2_Init+0xc4>)
 8001bb8:	2200      	movs	r2, #0
 8001bba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8001bbe:	4811      	ldr	r0, [pc, #68]	; (8001c04 <MX_ADC2_Init+0xc4>)
 8001bc0:	f001 fe46 	bl	8003850 <HAL_ADC_Init>
 8001bc4:	4603      	mov	r3, r0
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d001      	beq.n	8001bce <MX_ADC2_Init+0x8e>
  {
    Error_Handler();
 8001bca:	f000 fd41 	bl	8002650 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8001bce:	4b0f      	ldr	r3, [pc, #60]	; (8001c0c <MX_ADC2_Init+0xcc>)
 8001bd0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001bd2:	2306      	movs	r3, #6
 8001bd4:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8001bd6:	2300      	movs	r3, #0
 8001bd8:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001bda:	237f      	movs	r3, #127	; 0x7f
 8001bdc:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001bde:	2304      	movs	r3, #4
 8001be0:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8001be2:	2300      	movs	r3, #0
 8001be4:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001be6:	463b      	mov	r3, r7
 8001be8:	4619      	mov	r1, r3
 8001bea:	4806      	ldr	r0, [pc, #24]	; (8001c04 <MX_ADC2_Init+0xc4>)
 8001bec:	f002 f9f2 	bl	8003fd4 <HAL_ADC_ConfigChannel>
 8001bf0:	4603      	mov	r3, r0
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d001      	beq.n	8001bfa <MX_ADC2_Init+0xba>
  {
    Error_Handler();
 8001bf6:	f000 fd2b 	bl	8002650 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8001bfa:	bf00      	nop
 8001bfc:	3720      	adds	r7, #32
 8001bfe:	46bd      	mov	sp, r7
 8001c00:	bd80      	pop	{r7, pc}
 8001c02:	bf00      	nop
 8001c04:	20000114 	.word	0x20000114
 8001c08:	50000100 	.word	0x50000100
 8001c0c:	21800100 	.word	0x21800100

08001c10 <MX_CORDIC_Init>:
  * @brief CORDIC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CORDIC_Init(void)
{
 8001c10:	b580      	push	{r7, lr}
 8001c12:	af00      	add	r7, sp, #0
  /* USER CODE END CORDIC_Init 0 */

  /* USER CODE BEGIN CORDIC_Init 1 */

  /* USER CODE END CORDIC_Init 1 */
  hcordic.Instance = CORDIC;
 8001c14:	4b06      	ldr	r3, [pc, #24]	; (8001c30 <MX_CORDIC_Init+0x20>)
 8001c16:	4a07      	ldr	r2, [pc, #28]	; (8001c34 <MX_CORDIC_Init+0x24>)
 8001c18:	601a      	str	r2, [r3, #0]
  if (HAL_CORDIC_Init(&hcordic) != HAL_OK)
 8001c1a:	4805      	ldr	r0, [pc, #20]	; (8001c30 <MX_CORDIC_Init+0x20>)
 8001c1c:	f003 fe74 	bl	8005908 <HAL_CORDIC_Init>
 8001c20:	4603      	mov	r3, r0
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d001      	beq.n	8001c2a <MX_CORDIC_Init+0x1a>
  {
    Error_Handler();
 8001c26:	f000 fd13 	bl	8002650 <Error_Handler>
  }
  /* USER CODE BEGIN CORDIC_Init 2 */

  /* USER CODE END CORDIC_Init 2 */

}
 8001c2a:	bf00      	nop
 8001c2c:	bd80      	pop	{r7, pc}
 8001c2e:	bf00      	nop
 8001c30:	20000180 	.word	0x20000180
 8001c34:	40020c00 	.word	0x40020c00

08001c38 <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 8001c38:	b580      	push	{r7, lr}
 8001c3a:	b08c      	sub	sp, #48	; 0x30
 8001c3c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8001c3e:	463b      	mov	r3, r7
 8001c40:	2230      	movs	r2, #48	; 0x30
 8001c42:	2100      	movs	r1, #0
 8001c44:	4618      	mov	r0, r3
 8001c46:	f009 fd55 	bl	800b6f4 <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 8001c4a:	4b16      	ldr	r3, [pc, #88]	; (8001ca4 <MX_DAC1_Init+0x6c>)
 8001c4c:	4a16      	ldr	r2, [pc, #88]	; (8001ca8 <MX_DAC1_Init+0x70>)
 8001c4e:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8001c50:	4814      	ldr	r0, [pc, #80]	; (8001ca4 <MX_DAC1_Init+0x6c>)
 8001c52:	f003 ff9a 	bl	8005b8a <HAL_DAC_Init>
 8001c56:	4603      	mov	r3, r0
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d001      	beq.n	8001c60 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 8001c5c:	f000 fcf8 	bl	8002650 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC;
 8001c60:	2302      	movs	r3, #2
 8001c62:	603b      	str	r3, [r7, #0]
  sConfig.DAC_DMADoubleDataMode = DISABLE;
 8001c64:	2300      	movs	r3, #0
 8001c66:	713b      	strb	r3, [r7, #4]
  sConfig.DAC_SignedFormat = DISABLE;
 8001c68:	2300      	movs	r3, #0
 8001c6a:	717b      	strb	r3, [r7, #5]
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8001c6c:	2300      	movs	r3, #0
 8001c6e:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_Trigger = DAC_TRIGGER_SOFTWARE;
 8001c70:	2302      	movs	r3, #2
 8001c72:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 8001c74:	2300      	movs	r3, #0
 8001c76:	613b      	str	r3, [r7, #16]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8001c78:	2300      	movs	r3, #0
 8001c7a:	617b      	str	r3, [r7, #20]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_EXTERNAL;
 8001c7c:	2301      	movs	r3, #1
 8001c7e:	61bb      	str	r3, [r7, #24]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8001c80:	2300      	movs	r3, #0
 8001c82:	61fb      	str	r3, [r7, #28]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8001c84:	463b      	mov	r3, r7
 8001c86:	2200      	movs	r2, #0
 8001c88:	4619      	mov	r1, r3
 8001c8a:	4806      	ldr	r0, [pc, #24]	; (8001ca4 <MX_DAC1_Init+0x6c>)
 8001c8c:	f004 f804 	bl	8005c98 <HAL_DAC_ConfigChannel>
 8001c90:	4603      	mov	r3, r0
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d001      	beq.n	8001c9a <MX_DAC1_Init+0x62>
  {
    Error_Handler();
 8001c96:	f000 fcdb 	bl	8002650 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 8001c9a:	bf00      	nop
 8001c9c:	3730      	adds	r7, #48	; 0x30
 8001c9e:	46bd      	mov	sp, r7
 8001ca0:	bd80      	pop	{r7, pc}
 8001ca2:	bf00      	nop
 8001ca4:	200001a8 	.word	0x200001a8
 8001ca8:	50000800 	.word	0x50000800

08001cac <MX_FDCAN1_Init>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 8001cac:	b580      	push	{r7, lr}
 8001cae:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 8001cb0:	4b1f      	ldr	r3, [pc, #124]	; (8001d30 <MX_FDCAN1_Init+0x84>)
 8001cb2:	4a20      	ldr	r2, [pc, #128]	; (8001d34 <MX_FDCAN1_Init+0x88>)
 8001cb4:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 8001cb6:	4b1e      	ldr	r3, [pc, #120]	; (8001d30 <MX_FDCAN1_Init+0x84>)
 8001cb8:	2200      	movs	r2, #0
 8001cba:	605a      	str	r2, [r3, #4]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8001cbc:	4b1c      	ldr	r3, [pc, #112]	; (8001d30 <MX_FDCAN1_Init+0x84>)
 8001cbe:	2200      	movs	r2, #0
 8001cc0:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 8001cc2:	4b1b      	ldr	r3, [pc, #108]	; (8001d30 <MX_FDCAN1_Init+0x84>)
 8001cc4:	2200      	movs	r2, #0
 8001cc6:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 8001cc8:	4b19      	ldr	r3, [pc, #100]	; (8001d30 <MX_FDCAN1_Init+0x84>)
 8001cca:	2200      	movs	r2, #0
 8001ccc:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 8001cce:	4b18      	ldr	r3, [pc, #96]	; (8001d30 <MX_FDCAN1_Init+0x84>)
 8001cd0:	2200      	movs	r2, #0
 8001cd2:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 8001cd4:	4b16      	ldr	r3, [pc, #88]	; (8001d30 <MX_FDCAN1_Init+0x84>)
 8001cd6:	2200      	movs	r2, #0
 8001cd8:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 16;
 8001cda:	4b15      	ldr	r3, [pc, #84]	; (8001d30 <MX_FDCAN1_Init+0x84>)
 8001cdc:	2210      	movs	r2, #16
 8001cde:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 8001ce0:	4b13      	ldr	r3, [pc, #76]	; (8001d30 <MX_FDCAN1_Init+0x84>)
 8001ce2:	2201      	movs	r2, #1
 8001ce4:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 2;
 8001ce6:	4b12      	ldr	r3, [pc, #72]	; (8001d30 <MX_FDCAN1_Init+0x84>)
 8001ce8:	2202      	movs	r2, #2
 8001cea:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 2;
 8001cec:	4b10      	ldr	r3, [pc, #64]	; (8001d30 <MX_FDCAN1_Init+0x84>)
 8001cee:	2202      	movs	r2, #2
 8001cf0:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 8001cf2:	4b0f      	ldr	r3, [pc, #60]	; (8001d30 <MX_FDCAN1_Init+0x84>)
 8001cf4:	2201      	movs	r2, #1
 8001cf6:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 8001cf8:	4b0d      	ldr	r3, [pc, #52]	; (8001d30 <MX_FDCAN1_Init+0x84>)
 8001cfa:	2201      	movs	r2, #1
 8001cfc:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan1.Init.DataTimeSeg1 = 1;
 8001cfe:	4b0c      	ldr	r3, [pc, #48]	; (8001d30 <MX_FDCAN1_Init+0x84>)
 8001d00:	2201      	movs	r2, #1
 8001d02:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan1.Init.DataTimeSeg2 = 1;
 8001d04:	4b0a      	ldr	r3, [pc, #40]	; (8001d30 <MX_FDCAN1_Init+0x84>)
 8001d06:	2201      	movs	r2, #1
 8001d08:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan1.Init.StdFiltersNbr = 0;
 8001d0a:	4b09      	ldr	r3, [pc, #36]	; (8001d30 <MX_FDCAN1_Init+0x84>)
 8001d0c:	2200      	movs	r2, #0
 8001d0e:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan1.Init.ExtFiltersNbr = 0;
 8001d10:	4b07      	ldr	r3, [pc, #28]	; (8001d30 <MX_FDCAN1_Init+0x84>)
 8001d12:	2200      	movs	r2, #0
 8001d14:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8001d16:	4b06      	ldr	r3, [pc, #24]	; (8001d30 <MX_FDCAN1_Init+0x84>)
 8001d18:	2200      	movs	r2, #0
 8001d1a:	63da      	str	r2, [r3, #60]	; 0x3c
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 8001d1c:	4804      	ldr	r0, [pc, #16]	; (8001d30 <MX_FDCAN1_Init+0x84>)
 8001d1e:	f004 fa2d 	bl	800617c <HAL_FDCAN_Init>
 8001d22:	4603      	mov	r3, r0
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d001      	beq.n	8001d2c <MX_FDCAN1_Init+0x80>
  {
    Error_Handler();
 8001d28:	f000 fc92 	bl	8002650 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 8001d2c:	bf00      	nop
 8001d2e:	bd80      	pop	{r7, pc}
 8001d30:	200001bc 	.word	0x200001bc
 8001d34:	40006400 	.word	0x40006400

08001d38 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8001d38:	b580      	push	{r7, lr}
 8001d3a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8001d3c:	4b1b      	ldr	r3, [pc, #108]	; (8001dac <MX_SPI3_Init+0x74>)
 8001d3e:	4a1c      	ldr	r2, [pc, #112]	; (8001db0 <MX_SPI3_Init+0x78>)
 8001d40:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8001d42:	4b1a      	ldr	r3, [pc, #104]	; (8001dac <MX_SPI3_Init+0x74>)
 8001d44:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001d48:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8001d4a:	4b18      	ldr	r3, [pc, #96]	; (8001dac <MX_SPI3_Init+0x74>)
 8001d4c:	2200      	movs	r2, #0
 8001d4e:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_16BIT;
 8001d50:	4b16      	ldr	r3, [pc, #88]	; (8001dac <MX_SPI3_Init+0x74>)
 8001d52:	f44f 6270 	mov.w	r2, #3840	; 0xf00
 8001d56:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001d58:	4b14      	ldr	r3, [pc, #80]	; (8001dac <MX_SPI3_Init+0x74>)
 8001d5a:	2200      	movs	r2, #0
 8001d5c:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_2EDGE;
 8001d5e:	4b13      	ldr	r3, [pc, #76]	; (8001dac <MX_SPI3_Init+0x74>)
 8001d60:	2201      	movs	r2, #1
 8001d62:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8001d64:	4b11      	ldr	r3, [pc, #68]	; (8001dac <MX_SPI3_Init+0x74>)
 8001d66:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001d6a:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8001d6c:	4b0f      	ldr	r3, [pc, #60]	; (8001dac <MX_SPI3_Init+0x74>)
 8001d6e:	2218      	movs	r2, #24
 8001d70:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001d72:	4b0e      	ldr	r3, [pc, #56]	; (8001dac <MX_SPI3_Init+0x74>)
 8001d74:	2200      	movs	r2, #0
 8001d76:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8001d78:	4b0c      	ldr	r3, [pc, #48]	; (8001dac <MX_SPI3_Init+0x74>)
 8001d7a:	2200      	movs	r2, #0
 8001d7c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001d7e:	4b0b      	ldr	r3, [pc, #44]	; (8001dac <MX_SPI3_Init+0x74>)
 8001d80:	2200      	movs	r2, #0
 8001d82:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 8001d84:	4b09      	ldr	r3, [pc, #36]	; (8001dac <MX_SPI3_Init+0x74>)
 8001d86:	2207      	movs	r2, #7
 8001d88:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001d8a:	4b08      	ldr	r3, [pc, #32]	; (8001dac <MX_SPI3_Init+0x74>)
 8001d8c:	2200      	movs	r2, #0
 8001d8e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8001d90:	4b06      	ldr	r3, [pc, #24]	; (8001dac <MX_SPI3_Init+0x74>)
 8001d92:	2200      	movs	r2, #0
 8001d94:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8001d96:	4805      	ldr	r0, [pc, #20]	; (8001dac <MX_SPI3_Init+0x74>)
 8001d98:	f005 fd36 	bl	8007808 <HAL_SPI_Init>
 8001d9c:	4603      	mov	r3, r0
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d001      	beq.n	8001da6 <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 8001da2:	f000 fc55 	bl	8002650 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8001da6:	bf00      	nop
 8001da8:	bd80      	pop	{r7, pc}
 8001daa:	bf00      	nop
 8001dac:	20000220 	.word	0x20000220
 8001db0:	40003c00 	.word	0x40003c00

08001db4 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001db4:	b580      	push	{r7, lr}
 8001db6:	b09c      	sub	sp, #112	; 0x70
 8001db8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001dba:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8001dbe:	2200      	movs	r2, #0
 8001dc0:	601a      	str	r2, [r3, #0]
 8001dc2:	605a      	str	r2, [r3, #4]
 8001dc4:	609a      	str	r2, [r3, #8]
 8001dc6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001dc8:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001dcc:	2200      	movs	r2, #0
 8001dce:	601a      	str	r2, [r3, #0]
 8001dd0:	605a      	str	r2, [r3, #4]
 8001dd2:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001dd4:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001dd8:	2200      	movs	r2, #0
 8001dda:	601a      	str	r2, [r3, #0]
 8001ddc:	605a      	str	r2, [r3, #4]
 8001dde:	609a      	str	r2, [r3, #8]
 8001de0:	60da      	str	r2, [r3, #12]
 8001de2:	611a      	str	r2, [r3, #16]
 8001de4:	615a      	str	r2, [r3, #20]
 8001de6:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001de8:	1d3b      	adds	r3, r7, #4
 8001dea:	2234      	movs	r2, #52	; 0x34
 8001dec:	2100      	movs	r1, #0
 8001dee:	4618      	mov	r0, r3
 8001df0:	f009 fc80 	bl	800b6f4 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001df4:	4b5b      	ldr	r3, [pc, #364]	; (8001f64 <MX_TIM1_Init+0x1b0>)
 8001df6:	4a5c      	ldr	r2, [pc, #368]	; (8001f68 <MX_TIM1_Init+0x1b4>)
 8001df8:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 7;
 8001dfa:	4b5a      	ldr	r3, [pc, #360]	; (8001f64 <MX_TIM1_Init+0x1b0>)
 8001dfc:	2207      	movs	r2, #7
 8001dfe:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 8001e00:	4b58      	ldr	r3, [pc, #352]	; (8001f64 <MX_TIM1_Init+0x1b0>)
 8001e02:	2220      	movs	r2, #32
 8001e04:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000;
 8001e06:	4b57      	ldr	r3, [pc, #348]	; (8001f64 <MX_TIM1_Init+0x1b0>)
 8001e08:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001e0c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001e0e:	4b55      	ldr	r3, [pc, #340]	; (8001f64 <MX_TIM1_Init+0x1b0>)
 8001e10:	2200      	movs	r2, #0
 8001e12:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001e14:	4b53      	ldr	r3, [pc, #332]	; (8001f64 <MX_TIM1_Init+0x1b0>)
 8001e16:	2200      	movs	r2, #0
 8001e18:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001e1a:	4b52      	ldr	r3, [pc, #328]	; (8001f64 <MX_TIM1_Init+0x1b0>)
 8001e1c:	2200      	movs	r2, #0
 8001e1e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001e20:	4850      	ldr	r0, [pc, #320]	; (8001f64 <MX_TIM1_Init+0x1b0>)
 8001e22:	f006 fc09 	bl	8008638 <HAL_TIM_Base_Init>
 8001e26:	4603      	mov	r3, r0
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d001      	beq.n	8001e30 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8001e2c:	f000 fc10 	bl	8002650 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001e30:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001e34:	663b      	str	r3, [r7, #96]	; 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001e36:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8001e3a:	4619      	mov	r1, r3
 8001e3c:	4849      	ldr	r0, [pc, #292]	; (8001f64 <MX_TIM1_Init+0x1b0>)
 8001e3e:	f007 f9e7 	bl	8009210 <HAL_TIM_ConfigClockSource>
 8001e42:	4603      	mov	r3, r0
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d001      	beq.n	8001e4c <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8001e48:	f000 fc02 	bl	8002650 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001e4c:	4845      	ldr	r0, [pc, #276]	; (8001f64 <MX_TIM1_Init+0x1b0>)
 8001e4e:	f006 fc4a 	bl	80086e6 <HAL_TIM_PWM_Init>
 8001e52:	4603      	mov	r3, r0
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d001      	beq.n	8001e5c <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8001e58:	f000 fbfa 	bl	8002650 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC4REF;
 8001e5c:	2370      	movs	r3, #112	; 0x70
 8001e5e:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_OC4REF;
 8001e60:	f44f 03e0 	mov.w	r3, #7340032	; 0x700000
 8001e64:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001e66:	2300      	movs	r3, #0
 8001e68:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001e6a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001e6e:	4619      	mov	r1, r3
 8001e70:	483c      	ldr	r0, [pc, #240]	; (8001f64 <MX_TIM1_Init+0x1b0>)
 8001e72:	f008 f849 	bl	8009f08 <HAL_TIMEx_MasterConfigSynchronization>
 8001e76:	4603      	mov	r3, r0
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d001      	beq.n	8001e80 <MX_TIM1_Init+0xcc>
  {
    Error_Handler();
 8001e7c:	f000 fbe8 	bl	8002650 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001e80:	2360      	movs	r3, #96	; 0x60
 8001e82:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 8001e84:	2300      	movs	r3, #0
 8001e86:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001e88:	2300      	movs	r3, #0
 8001e8a:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_LOW;
 8001e8c:	2308      	movs	r3, #8
 8001e8e:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001e90:	2300      	movs	r3, #0
 8001e92:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001e94:	2300      	movs	r3, #0
 8001e96:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001e98:	2300      	movs	r3, #0
 8001e9a:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001e9c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001ea0:	2200      	movs	r2, #0
 8001ea2:	4619      	mov	r1, r3
 8001ea4:	482f      	ldr	r0, [pc, #188]	; (8001f64 <MX_TIM1_Init+0x1b0>)
 8001ea6:	f007 f89f 	bl	8008fe8 <HAL_TIM_PWM_ConfigChannel>
 8001eaa:	4603      	mov	r3, r0
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d001      	beq.n	8001eb4 <MX_TIM1_Init+0x100>
  {
    Error_Handler();
 8001eb0:	f000 fbce 	bl	8002650 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001eb4:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001eb8:	2204      	movs	r2, #4
 8001eba:	4619      	mov	r1, r3
 8001ebc:	4829      	ldr	r0, [pc, #164]	; (8001f64 <MX_TIM1_Init+0x1b0>)
 8001ebe:	f007 f893 	bl	8008fe8 <HAL_TIM_PWM_ConfigChannel>
 8001ec2:	4603      	mov	r3, r0
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d001      	beq.n	8001ecc <MX_TIM1_Init+0x118>
  {
    Error_Handler();
 8001ec8:	f000 fbc2 	bl	8002650 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001ecc:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001ed0:	2208      	movs	r2, #8
 8001ed2:	4619      	mov	r1, r3
 8001ed4:	4823      	ldr	r0, [pc, #140]	; (8001f64 <MX_TIM1_Init+0x1b0>)
 8001ed6:	f007 f887 	bl	8008fe8 <HAL_TIM_PWM_ConfigChannel>
 8001eda:	4603      	mov	r3, r0
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d001      	beq.n	8001ee4 <MX_TIM1_Init+0x130>
  {
    Error_Handler();
 8001ee0:	f000 fbb6 	bl	8002650 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM2;
 8001ee4:	2370      	movs	r3, #112	; 0x70
 8001ee6:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 990;
 8001ee8:	f240 33de 	movw	r3, #990	; 0x3de
 8001eec:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001eee:	2300      	movs	r3, #0
 8001ef0:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001ef2:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001ef6:	220c      	movs	r2, #12
 8001ef8:	4619      	mov	r1, r3
 8001efa:	481a      	ldr	r0, [pc, #104]	; (8001f64 <MX_TIM1_Init+0x1b0>)
 8001efc:	f007 f874 	bl	8008fe8 <HAL_TIM_PWM_ConfigChannel>
 8001f00:	4603      	mov	r3, r0
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d001      	beq.n	8001f0a <MX_TIM1_Init+0x156>
  {
    Error_Handler();
 8001f06:	f000 fba3 	bl	8002650 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001f0a:	2300      	movs	r3, #0
 8001f0c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001f0e:	2300      	movs	r3, #0
 8001f10:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001f12:	2300      	movs	r3, #0
 8001f14:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 70;
 8001f16:	2346      	movs	r3, #70	; 0x46
 8001f18:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001f1a:	2300      	movs	r3, #0
 8001f1c:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001f1e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001f22:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001f24:	2300      	movs	r3, #0
 8001f26:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8001f28:	2300      	movs	r3, #0
 8001f2a:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001f2c:	2300      	movs	r3, #0
 8001f2e:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001f30:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001f34:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001f36:	2300      	movs	r3, #0
 8001f38:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8001f3a:	2300      	movs	r3, #0
 8001f3c:	633b      	str	r3, [r7, #48]	; 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001f3e:	2300      	movs	r3, #0
 8001f40:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001f42:	1d3b      	adds	r3, r7, #4
 8001f44:	4619      	mov	r1, r3
 8001f46:	4807      	ldr	r0, [pc, #28]	; (8001f64 <MX_TIM1_Init+0x1b0>)
 8001f48:	f008 f860 	bl	800a00c <HAL_TIMEx_ConfigBreakDeadTime>
 8001f4c:	4603      	mov	r3, r0
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d001      	beq.n	8001f56 <MX_TIM1_Init+0x1a2>
  {
    Error_Handler();
 8001f52:	f000 fb7d 	bl	8002650 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001f56:	4803      	ldr	r0, [pc, #12]	; (8001f64 <MX_TIM1_Init+0x1b0>)
 8001f58:	f000 fe54 	bl	8002c04 <HAL_TIM_MspPostInit>

}
 8001f5c:	bf00      	nop
 8001f5e:	3770      	adds	r7, #112	; 0x70
 8001f60:	46bd      	mov	sp, r7
 8001f62:	bd80      	pop	{r7, pc}
 8001f64:	20000284 	.word	0x20000284
 8001f68:	40012c00 	.word	0x40012c00

08001f6c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001f6c:	b580      	push	{r7, lr}
 8001f6e:	b08c      	sub	sp, #48	; 0x30
 8001f70:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001f72:	f107 030c 	add.w	r3, r7, #12
 8001f76:	2224      	movs	r2, #36	; 0x24
 8001f78:	2100      	movs	r1, #0
 8001f7a:	4618      	mov	r0, r3
 8001f7c:	f009 fbba 	bl	800b6f4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001f80:	463b      	mov	r3, r7
 8001f82:	2200      	movs	r2, #0
 8001f84:	601a      	str	r2, [r3, #0]
 8001f86:	605a      	str	r2, [r3, #4]
 8001f88:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001f8a:	4b21      	ldr	r3, [pc, #132]	; (8002010 <MX_TIM2_Init+0xa4>)
 8001f8c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001f90:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001f92:	4b1f      	ldr	r3, [pc, #124]	; (8002010 <MX_TIM2_Init+0xa4>)
 8001f94:	2200      	movs	r2, #0
 8001f96:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f98:	4b1d      	ldr	r3, [pc, #116]	; (8002010 <MX_TIM2_Init+0xa4>)
 8001f9a:	2200      	movs	r2, #0
 8001f9c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 2000;
 8001f9e:	4b1c      	ldr	r3, [pc, #112]	; (8002010 <MX_TIM2_Init+0xa4>)
 8001fa0:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8001fa4:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001fa6:	4b1a      	ldr	r3, [pc, #104]	; (8002010 <MX_TIM2_Init+0xa4>)
 8001fa8:	2200      	movs	r2, #0
 8001faa:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001fac:	4b18      	ldr	r3, [pc, #96]	; (8002010 <MX_TIM2_Init+0xa4>)
 8001fae:	2200      	movs	r2, #0
 8001fb0:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8001fb2:	2301      	movs	r3, #1
 8001fb4:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001fb6:	2300      	movs	r3, #0
 8001fb8:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001fba:	2301      	movs	r3, #1
 8001fbc:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001fbe:	2300      	movs	r3, #0
 8001fc0:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 8001fc2:	230a      	movs	r3, #10
 8001fc4:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001fc6:	2300      	movs	r3, #0
 8001fc8:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001fca:	2301      	movs	r3, #1
 8001fcc:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001fce:	2300      	movs	r3, #0
 8001fd0:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 10;
 8001fd2:	230a      	movs	r3, #10
 8001fd4:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8001fd6:	f107 030c 	add.w	r3, r7, #12
 8001fda:	4619      	mov	r1, r3
 8001fdc:	480c      	ldr	r0, [pc, #48]	; (8002010 <MX_TIM2_Init+0xa4>)
 8001fde:	f006 fd2f 	bl	8008a40 <HAL_TIM_Encoder_Init>
 8001fe2:	4603      	mov	r3, r0
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d001      	beq.n	8001fec <MX_TIM2_Init+0x80>
  {
    Error_Handler();
 8001fe8:	f000 fb32 	bl	8002650 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001fec:	2320      	movs	r3, #32
 8001fee:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001ff0:	2300      	movs	r3, #0
 8001ff2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001ff4:	463b      	mov	r3, r7
 8001ff6:	4619      	mov	r1, r3
 8001ff8:	4805      	ldr	r0, [pc, #20]	; (8002010 <MX_TIM2_Init+0xa4>)
 8001ffa:	f007 ff85 	bl	8009f08 <HAL_TIMEx_MasterConfigSynchronization>
 8001ffe:	4603      	mov	r3, r0
 8002000:	2b00      	cmp	r3, #0
 8002002:	d001      	beq.n	8002008 <MX_TIM2_Init+0x9c>
  {
    Error_Handler();
 8002004:	f000 fb24 	bl	8002650 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002008:	bf00      	nop
 800200a:	3730      	adds	r7, #48	; 0x30
 800200c:	46bd      	mov	sp, r7
 800200e:	bd80      	pop	{r7, pc}
 8002010:	200002d0 	.word	0x200002d0

08002014 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8002014:	b580      	push	{r7, lr}
 8002016:	b084      	sub	sp, #16
 8002018:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800201a:	1d3b      	adds	r3, r7, #4
 800201c:	2200      	movs	r2, #0
 800201e:	601a      	str	r2, [r3, #0]
 8002020:	605a      	str	r2, [r3, #4]
 8002022:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8002024:	4b14      	ldr	r3, [pc, #80]	; (8002078 <MX_TIM6_Init+0x64>)
 8002026:	4a15      	ldr	r2, [pc, #84]	; (800207c <MX_TIM6_Init+0x68>)
 8002028:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 16;
 800202a:	4b13      	ldr	r3, [pc, #76]	; (8002078 <MX_TIM6_Init+0x64>)
 800202c:	2210      	movs	r2, #16
 800202e:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002030:	4b11      	ldr	r3, [pc, #68]	; (8002078 <MX_TIM6_Init+0x64>)
 8002032:	2200      	movs	r2, #0
 8002034:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 999;
 8002036:	4b10      	ldr	r3, [pc, #64]	; (8002078 <MX_TIM6_Init+0x64>)
 8002038:	f240 32e7 	movw	r2, #999	; 0x3e7
 800203c:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800203e:	4b0e      	ldr	r3, [pc, #56]	; (8002078 <MX_TIM6_Init+0x64>)
 8002040:	2200      	movs	r2, #0
 8002042:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8002044:	480c      	ldr	r0, [pc, #48]	; (8002078 <MX_TIM6_Init+0x64>)
 8002046:	f006 faf7 	bl	8008638 <HAL_TIM_Base_Init>
 800204a:	4603      	mov	r3, r0
 800204c:	2b00      	cmp	r3, #0
 800204e:	d001      	beq.n	8002054 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8002050:	f000 fafe 	bl	8002650 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002054:	2300      	movs	r3, #0
 8002056:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002058:	2300      	movs	r3, #0
 800205a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800205c:	1d3b      	adds	r3, r7, #4
 800205e:	4619      	mov	r1, r3
 8002060:	4805      	ldr	r0, [pc, #20]	; (8002078 <MX_TIM6_Init+0x64>)
 8002062:	f007 ff51 	bl	8009f08 <HAL_TIMEx_MasterConfigSynchronization>
 8002066:	4603      	mov	r3, r0
 8002068:	2b00      	cmp	r3, #0
 800206a:	d001      	beq.n	8002070 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 800206c:	f000 faf0 	bl	8002650 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8002070:	bf00      	nop
 8002072:	3710      	adds	r7, #16
 8002074:	46bd      	mov	sp, r7
 8002076:	bd80      	pop	{r7, pc}
 8002078:	2000031c 	.word	0x2000031c
 800207c:	40001000 	.word	0x40001000

08002080 <MX_TIM17_Init>:
  * @brief TIM17 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM17_Init(void)
{
 8002080:	b580      	push	{r7, lr}
 8002082:	af00      	add	r7, sp, #0
  /* USER CODE END TIM17_Init 0 */

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 8002084:	4b0f      	ldr	r3, [pc, #60]	; (80020c4 <MX_TIM17_Init+0x44>)
 8002086:	4a10      	ldr	r2, [pc, #64]	; (80020c8 <MX_TIM17_Init+0x48>)
 8002088:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 0;
 800208a:	4b0e      	ldr	r3, [pc, #56]	; (80020c4 <MX_TIM17_Init+0x44>)
 800208c:	2200      	movs	r2, #0
 800208e:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002090:	4b0c      	ldr	r3, [pc, #48]	; (80020c4 <MX_TIM17_Init+0x44>)
 8002092:	2200      	movs	r2, #0
 8002094:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 65535;
 8002096:	4b0b      	ldr	r3, [pc, #44]	; (80020c4 <MX_TIM17_Init+0x44>)
 8002098:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800209c:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800209e:	4b09      	ldr	r3, [pc, #36]	; (80020c4 <MX_TIM17_Init+0x44>)
 80020a0:	2200      	movs	r2, #0
 80020a2:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 80020a4:	4b07      	ldr	r3, [pc, #28]	; (80020c4 <MX_TIM17_Init+0x44>)
 80020a6:	2200      	movs	r2, #0
 80020a8:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80020aa:	4b06      	ldr	r3, [pc, #24]	; (80020c4 <MX_TIM17_Init+0x44>)
 80020ac:	2200      	movs	r2, #0
 80020ae:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 80020b0:	4804      	ldr	r0, [pc, #16]	; (80020c4 <MX_TIM17_Init+0x44>)
 80020b2:	f006 fac1 	bl	8008638 <HAL_TIM_Base_Init>
 80020b6:	4603      	mov	r3, r0
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d001      	beq.n	80020c0 <MX_TIM17_Init+0x40>
  {
    Error_Handler();
 80020bc:	f000 fac8 	bl	8002650 <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */

}
 80020c0:	bf00      	nop
 80020c2:	bd80      	pop	{r7, pc}
 80020c4:	20000368 	.word	0x20000368
 80020c8:	40014800 	.word	0x40014800

080020cc <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80020cc:	b580      	push	{r7, lr}
 80020ce:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80020d0:	4b22      	ldr	r3, [pc, #136]	; (800215c <MX_USART1_UART_Init+0x90>)
 80020d2:	4a23      	ldr	r2, [pc, #140]	; (8002160 <MX_USART1_UART_Init+0x94>)
 80020d4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600; //921600
 80020d6:	4b21      	ldr	r3, [pc, #132]	; (800215c <MX_USART1_UART_Init+0x90>)
 80020d8:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80020dc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80020de:	4b1f      	ldr	r3, [pc, #124]	; (800215c <MX_USART1_UART_Init+0x90>)
 80020e0:	2200      	movs	r2, #0
 80020e2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80020e4:	4b1d      	ldr	r3, [pc, #116]	; (800215c <MX_USART1_UART_Init+0x90>)
 80020e6:	2200      	movs	r2, #0
 80020e8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80020ea:	4b1c      	ldr	r3, [pc, #112]	; (800215c <MX_USART1_UART_Init+0x90>)
 80020ec:	2200      	movs	r2, #0
 80020ee:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80020f0:	4b1a      	ldr	r3, [pc, #104]	; (800215c <MX_USART1_UART_Init+0x90>)
 80020f2:	220c      	movs	r2, #12
 80020f4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80020f6:	4b19      	ldr	r3, [pc, #100]	; (800215c <MX_USART1_UART_Init+0x90>)
 80020f8:	2200      	movs	r2, #0
 80020fa:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80020fc:	4b17      	ldr	r3, [pc, #92]	; (800215c <MX_USART1_UART_Init+0x90>)
 80020fe:	2200      	movs	r2, #0
 8002100:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002102:	4b16      	ldr	r3, [pc, #88]	; (800215c <MX_USART1_UART_Init+0x90>)
 8002104:	2200      	movs	r2, #0
 8002106:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002108:	4b14      	ldr	r3, [pc, #80]	; (800215c <MX_USART1_UART_Init+0x90>)
 800210a:	2200      	movs	r2, #0
 800210c:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800210e:	4b13      	ldr	r3, [pc, #76]	; (800215c <MX_USART1_UART_Init+0x90>)
 8002110:	2200      	movs	r2, #0
 8002112:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002114:	4811      	ldr	r0, [pc, #68]	; (800215c <MX_USART1_UART_Init+0x90>)
 8002116:	f008 f884 	bl	800a222 <HAL_UART_Init>
 800211a:	4603      	mov	r3, r0
 800211c:	2b00      	cmp	r3, #0
 800211e:	d001      	beq.n	8002124 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8002120:	f000 fa96 	bl	8002650 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002124:	2100      	movs	r1, #0
 8002126:	480d      	ldr	r0, [pc, #52]	; (800215c <MX_USART1_UART_Init+0x90>)
 8002128:	f009 fa19 	bl	800b55e <HAL_UARTEx_SetTxFifoThreshold>
 800212c:	4603      	mov	r3, r0
 800212e:	2b00      	cmp	r3, #0
 8002130:	d001      	beq.n	8002136 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8002132:	f000 fa8d 	bl	8002650 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002136:	2100      	movs	r1, #0
 8002138:	4808      	ldr	r0, [pc, #32]	; (800215c <MX_USART1_UART_Init+0x90>)
 800213a:	f009 fa4e 	bl	800b5da <HAL_UARTEx_SetRxFifoThreshold>
 800213e:	4603      	mov	r3, r0
 8002140:	2b00      	cmp	r3, #0
 8002142:	d001      	beq.n	8002148 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8002144:	f000 fa84 	bl	8002650 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8002148:	4804      	ldr	r0, [pc, #16]	; (800215c <MX_USART1_UART_Init+0x90>)
 800214a:	f009 f9cf 	bl	800b4ec <HAL_UARTEx_DisableFifoMode>
 800214e:	4603      	mov	r3, r0
 8002150:	2b00      	cmp	r3, #0
 8002152:	d001      	beq.n	8002158 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8002154:	f000 fa7c 	bl	8002650 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002158:	bf00      	nop
 800215a:	bd80      	pop	{r7, pc}
 800215c:	200003b4 	.word	0x200003b4
 8002160:	40013800 	.word	0x40013800

08002164 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002164:	b580      	push	{r7, lr}
 8002166:	b08a      	sub	sp, #40	; 0x28
 8002168:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800216a:	f107 0314 	add.w	r3, r7, #20
 800216e:	2200      	movs	r2, #0
 8002170:	601a      	str	r2, [r3, #0]
 8002172:	605a      	str	r2, [r3, #4]
 8002174:	609a      	str	r2, [r3, #8]
 8002176:	60da      	str	r2, [r3, #12]
 8002178:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800217a:	4b3f      	ldr	r3, [pc, #252]	; (8002278 <MX_GPIO_Init+0x114>)
 800217c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800217e:	4a3e      	ldr	r2, [pc, #248]	; (8002278 <MX_GPIO_Init+0x114>)
 8002180:	f043 0304 	orr.w	r3, r3, #4
 8002184:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002186:	4b3c      	ldr	r3, [pc, #240]	; (8002278 <MX_GPIO_Init+0x114>)
 8002188:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800218a:	f003 0304 	and.w	r3, r3, #4
 800218e:	613b      	str	r3, [r7, #16]
 8002190:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002192:	4b39      	ldr	r3, [pc, #228]	; (8002278 <MX_GPIO_Init+0x114>)
 8002194:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002196:	4a38      	ldr	r2, [pc, #224]	; (8002278 <MX_GPIO_Init+0x114>)
 8002198:	f043 0320 	orr.w	r3, r3, #32
 800219c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800219e:	4b36      	ldr	r3, [pc, #216]	; (8002278 <MX_GPIO_Init+0x114>)
 80021a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021a2:	f003 0320 	and.w	r3, r3, #32
 80021a6:	60fb      	str	r3, [r7, #12]
 80021a8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80021aa:	4b33      	ldr	r3, [pc, #204]	; (8002278 <MX_GPIO_Init+0x114>)
 80021ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021ae:	4a32      	ldr	r2, [pc, #200]	; (8002278 <MX_GPIO_Init+0x114>)
 80021b0:	f043 0301 	orr.w	r3, r3, #1
 80021b4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80021b6:	4b30      	ldr	r3, [pc, #192]	; (8002278 <MX_GPIO_Init+0x114>)
 80021b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021ba:	f003 0301 	and.w	r3, r3, #1
 80021be:	60bb      	str	r3, [r7, #8]
 80021c0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80021c2:	4b2d      	ldr	r3, [pc, #180]	; (8002278 <MX_GPIO_Init+0x114>)
 80021c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021c6:	4a2c      	ldr	r2, [pc, #176]	; (8002278 <MX_GPIO_Init+0x114>)
 80021c8:	f043 0302 	orr.w	r3, r3, #2
 80021cc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80021ce:	4b2a      	ldr	r3, [pc, #168]	; (8002278 <MX_GPIO_Init+0x114>)
 80021d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021d2:	f003 0302 	and.w	r3, r3, #2
 80021d6:	607b      	str	r3, [r7, #4]
 80021d8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80021da:	4b27      	ldr	r3, [pc, #156]	; (8002278 <MX_GPIO_Init+0x114>)
 80021dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021de:	4a26      	ldr	r2, [pc, #152]	; (8002278 <MX_GPIO_Init+0x114>)
 80021e0:	f043 0308 	orr.w	r3, r3, #8
 80021e4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80021e6:	4b24      	ldr	r3, [pc, #144]	; (8002278 <MX_GPIO_Init+0x114>)
 80021e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021ea:	f003 0308 	and.w	r3, r3, #8
 80021ee:	603b      	str	r3, [r7, #0]
 80021f0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80021f2:	2200      	movs	r2, #0
 80021f4:	2120      	movs	r1, #32
 80021f6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80021fa:	f004 faf1 	bl	80067e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_RESET);
 80021fe:	2200      	movs	r2, #0
 8002200:	2104      	movs	r1, #4
 8002202:	481e      	ldr	r0, [pc, #120]	; (800227c <MX_GPIO_Init+0x118>)
 8002204:	f004 faec 	bl	80067e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8002208:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800220c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800220e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8002212:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002214:	2300      	movs	r3, #0
 8002216:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8002218:	f107 0314 	add.w	r3, r7, #20
 800221c:	4619      	mov	r1, r3
 800221e:	4818      	ldr	r0, [pc, #96]	; (8002280 <MX_GPIO_Init+0x11c>)
 8002220:	f004 f95c 	bl	80064dc <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8002224:	2320      	movs	r3, #32
 8002226:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002228:	2301      	movs	r3, #1
 800222a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800222c:	2300      	movs	r3, #0
 800222e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002230:	2300      	movs	r3, #0
 8002232:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8002234:	f107 0314 	add.w	r3, r7, #20
 8002238:	4619      	mov	r1, r3
 800223a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800223e:	f004 f94d 	bl	80064dc <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002242:	2304      	movs	r3, #4
 8002244:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002246:	2301      	movs	r3, #1
 8002248:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800224a:	2300      	movs	r3, #0
 800224c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800224e:	2300      	movs	r3, #0
 8002250:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002252:	f107 0314 	add.w	r3, r7, #20
 8002256:	4619      	mov	r1, r3
 8002258:	4808      	ldr	r0, [pc, #32]	; (800227c <MX_GPIO_Init+0x118>)
 800225a:	f004 f93f 	bl	80064dc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800225e:	2200      	movs	r2, #0
 8002260:	2100      	movs	r1, #0
 8002262:	2028      	movs	r0, #40	; 0x28
 8002264:	f003 fc5d 	bl	8005b22 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8002268:	2028      	movs	r0, #40	; 0x28
 800226a:	f003 fc74 	bl	8005b56 <HAL_NVIC_EnableIRQ>

}
 800226e:	bf00      	nop
 8002270:	3728      	adds	r7, #40	; 0x28
 8002272:	46bd      	mov	sp, r7
 8002274:	bd80      	pop	{r7, pc}
 8002276:	bf00      	nop
 8002278:	40021000 	.word	0x40021000
 800227c:	48000c00 	.word	0x48000c00
 8002280:	48000800 	.word	0x48000800
 8002284:	00000000 	.word	0x00000000

08002288 <HAL_ADCEx_InjectedConvCpltCallback>:

/* USER CODE BEGIN 4 */

void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002288:	b5b0      	push	{r4, r5, r7, lr}
 800228a:	b086      	sub	sp, #24
 800228c:	af02      	add	r7, sp, #8
 800228e:	6078      	str	r0, [r7, #4]


	/**POMIAR PRADU **/ //2us
	//====offset ADC=====//
	GPIOA->ODR|= 1<<5;
 8002290:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8002294:	695b      	ldr	r3, [r3, #20]
 8002296:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800229a:	f043 0320 	orr.w	r3, r3, #32
 800229e:	6153      	str	r3, [r2, #20]
if(CAL_status==0)
 80022a0:	4b09      	ldr	r3, [pc, #36]	; (80022c8 <HAL_ADCEx_InjectedConvCpltCallback+0x40>)
 80022a2:	781b      	ldrb	r3, [r3, #0]
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d12e      	bne.n	8002306 <HAL_ADCEx_InjectedConvCpltCallback+0x7e>
{
	TIM1->CCR1=1000;TIM1->CCR2=1000;TIM1->CCR3=1000;
 80022a8:	4b08      	ldr	r3, [pc, #32]	; (80022cc <HAL_ADCEx_InjectedConvCpltCallback+0x44>)
 80022aa:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80022ae:	635a      	str	r2, [r3, #52]	; 0x34
 80022b0:	4b06      	ldr	r3, [pc, #24]	; (80022cc <HAL_ADCEx_InjectedConvCpltCallback+0x44>)
 80022b2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80022b6:	639a      	str	r2, [r3, #56]	; 0x38
 80022b8:	4b04      	ldr	r3, [pc, #16]	; (80022cc <HAL_ADCEx_InjectedConvCpltCallback+0x44>)
 80022ba:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80022be:	63da      	str	r2, [r3, #60]	; 0x3c
	for(int i=0;i<1000000;i++)
 80022c0:	2300      	movs	r3, #0
 80022c2:	60fb      	str	r3, [r7, #12]
 80022c4:	e018      	b.n	80022f8 <HAL_ADCEx_InjectedConvCpltCallback+0x70>
 80022c6:	bf00      	nop
 80022c8:	20000450 	.word	0x20000450
 80022cc:	40012c00 	.word	0x40012c00
	{
		ADC_CAL[0]=HAL_ADCEx_InjectedGetValue(&hadc1, ADC_INJECTED_RANK_1);
 80022d0:	2109      	movs	r1, #9
 80022d2:	48a7      	ldr	r0, [pc, #668]	; (8002570 <HAL_ADCEx_InjectedConvCpltCallback+0x2e8>)
 80022d4:	f002 fd34 	bl	8004d40 <HAL_ADCEx_InjectedGetValue>
 80022d8:	4603      	mov	r3, r0
 80022da:	b29a      	uxth	r2, r3
 80022dc:	4ba5      	ldr	r3, [pc, #660]	; (8002574 <HAL_ADCEx_InjectedConvCpltCallback+0x2ec>)
 80022de:	801a      	strh	r2, [r3, #0]
		ADC_CAL[2]=HAL_ADCEx_InjectedGetValue(&hadc1, ADC_INJECTED_RANK_4);
 80022e0:	f240 311b 	movw	r1, #795	; 0x31b
 80022e4:	48a2      	ldr	r0, [pc, #648]	; (8002570 <HAL_ADCEx_InjectedConvCpltCallback+0x2e8>)
 80022e6:	f002 fd2b 	bl	8004d40 <HAL_ADCEx_InjectedGetValue>
 80022ea:	4603      	mov	r3, r0
 80022ec:	b29a      	uxth	r2, r3
 80022ee:	4ba1      	ldr	r3, [pc, #644]	; (8002574 <HAL_ADCEx_InjectedConvCpltCallback+0x2ec>)
 80022f0:	809a      	strh	r2, [r3, #4]
	for(int i=0;i<1000000;i++)
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	3301      	adds	r3, #1
 80022f6:	60fb      	str	r3, [r7, #12]
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	4a9f      	ldr	r2, [pc, #636]	; (8002578 <HAL_ADCEx_InjectedConvCpltCallback+0x2f0>)
 80022fc:	4293      	cmp	r3, r2
 80022fe:	dde7      	ble.n	80022d0 <HAL_ADCEx_InjectedConvCpltCallback+0x48>
	}
	CAL_status=1;
 8002300:	4b9e      	ldr	r3, [pc, #632]	; (800257c <HAL_ADCEx_InjectedConvCpltCallback+0x2f4>)
 8002302:	2201      	movs	r2, #1
 8002304:	701a      	strb	r2, [r3, #0]

}
	//====offset ADC=====//

prad[0] = HAL_ADCEx_InjectedGetValue(&hadc1, ADC_INJECTED_RANK_1);
 8002306:	2109      	movs	r1, #9
 8002308:	4899      	ldr	r0, [pc, #612]	; (8002570 <HAL_ADCEx_InjectedConvCpltCallback+0x2e8>)
 800230a:	f002 fd19 	bl	8004d40 <HAL_ADCEx_InjectedGetValue>
 800230e:	4603      	mov	r3, r0
 8002310:	b29a      	uxth	r2, r3
 8002312:	4b9b      	ldr	r3, [pc, #620]	; (8002580 <HAL_ADCEx_InjectedConvCpltCallback+0x2f8>)
 8002314:	801a      	strh	r2, [r3, #0]
prad[1] = HAL_ADCEx_InjectedGetValue(&hadc1, ADC_INJECTED_RANK_2);
 8002316:	f240 110f 	movw	r1, #271	; 0x10f
 800231a:	4895      	ldr	r0, [pc, #596]	; (8002570 <HAL_ADCEx_InjectedConvCpltCallback+0x2e8>)
 800231c:	f002 fd10 	bl	8004d40 <HAL_ADCEx_InjectedGetValue>
 8002320:	4603      	mov	r3, r0
 8002322:	b29a      	uxth	r2, r3
 8002324:	4b96      	ldr	r3, [pc, #600]	; (8002580 <HAL_ADCEx_InjectedConvCpltCallback+0x2f8>)
 8002326:	805a      	strh	r2, [r3, #2]
prad[2] = HAL_ADCEx_InjectedGetValue(&hadc1, ADC_INJECTED_RANK_3);
 8002328:	f240 2115 	movw	r1, #533	; 0x215
 800232c:	4890      	ldr	r0, [pc, #576]	; (8002570 <HAL_ADCEx_InjectedConvCpltCallback+0x2e8>)
 800232e:	f002 fd07 	bl	8004d40 <HAL_ADCEx_InjectedGetValue>
 8002332:	4603      	mov	r3, r0
 8002334:	b29a      	uxth	r2, r3
 8002336:	4b92      	ldr	r3, [pc, #584]	; (8002580 <HAL_ADCEx_InjectedConvCpltCallback+0x2f8>)
 8002338:	809a      	strh	r2, [r3, #4]
prad[3] = HAL_ADCEx_InjectedGetValue(&hadc1, ADC_INJECTED_RANK_4);
 800233a:	f240 311b 	movw	r1, #795	; 0x31b
 800233e:	488c      	ldr	r0, [pc, #560]	; (8002570 <HAL_ADCEx_InjectedConvCpltCallback+0x2e8>)
 8002340:	f002 fcfe 	bl	8004d40 <HAL_ADCEx_InjectedGetValue>
 8002344:	4603      	mov	r3, r0
 8002346:	b29a      	uxth	r2, r3
 8002348:	4b8d      	ldr	r3, [pc, #564]	; (8002580 <HAL_ADCEx_InjectedConvCpltCallback+0x2f8>)
 800234a:	80da      	strh	r2, [r3, #6]
I_a_ADC = -(prad[0] - ADC_CAL[0]); // prad fazy A
 800234c:	4b89      	ldr	r3, [pc, #548]	; (8002574 <HAL_ADCEx_InjectedConvCpltCallback+0x2ec>)
 800234e:	881a      	ldrh	r2, [r3, #0]
 8002350:	4b8b      	ldr	r3, [pc, #556]	; (8002580 <HAL_ADCEx_InjectedConvCpltCallback+0x2f8>)
 8002352:	881b      	ldrh	r3, [r3, #0]
 8002354:	1ad3      	subs	r3, r2, r3
 8002356:	b29a      	uxth	r2, r3
 8002358:	4b8a      	ldr	r3, [pc, #552]	; (8002584 <HAL_ADCEx_InjectedConvCpltCallback+0x2fc>)
 800235a:	801a      	strh	r2, [r3, #0]
I_b_ADC=  -(prad[3] - ADC_CAL[2]); // prad fazy B
 800235c:	4b85      	ldr	r3, [pc, #532]	; (8002574 <HAL_ADCEx_InjectedConvCpltCallback+0x2ec>)
 800235e:	889a      	ldrh	r2, [r3, #4]
 8002360:	4b87      	ldr	r3, [pc, #540]	; (8002580 <HAL_ADCEx_InjectedConvCpltCallback+0x2f8>)
 8002362:	88db      	ldrh	r3, [r3, #6]
 8002364:	1ad3      	subs	r3, r2, r3
 8002366:	b29a      	uxth	r2, r3
 8002368:	4b87      	ldr	r3, [pc, #540]	; (8002588 <HAL_ADCEx_InjectedConvCpltCallback+0x300>)
 800236a:	801a      	strh	r2, [r3, #0]
DC_bus_volt_ADC = prad[1];		 // napięcie szyny DC
 800236c:	4b84      	ldr	r3, [pc, #528]	; (8002580 <HAL_ADCEx_InjectedConvCpltCallback+0x2f8>)
 800236e:	885a      	ldrh	r2, [r3, #2]
 8002370:	4b86      	ldr	r3, [pc, #536]	; (800258c <HAL_ADCEx_InjectedConvCpltCallback+0x304>)
 8002372:	801a      	strh	r2, [r3, #0]


						/**POMIAR POZYCJI**/ //6us

SPI_bufor_tx[0]=REG_ANGLECOM_ADR;
 8002374:	4b86      	ldr	r3, [pc, #536]	; (8002590 <HAL_ADCEx_InjectedConvCpltCallback+0x308>)
 8002376:	881b      	ldrh	r3, [r3, #0]
 8002378:	b29a      	uxth	r2, r3
 800237a:	4b86      	ldr	r3, [pc, #536]	; (8002594 <HAL_ADCEx_InjectedConvCpltCallback+0x30c>)
 800237c:	801a      	strh	r2, [r3, #0]
HAL_GPIO_WritePin(GPIOD,GPIO_PIN_2,0);
 800237e:	2200      	movs	r2, #0
 8002380:	2104      	movs	r1, #4
 8002382:	4885      	ldr	r0, [pc, #532]	; (8002598 <HAL_ADCEx_InjectedConvCpltCallback+0x310>)
 8002384:	f004 fa2c 	bl	80067e0 <HAL_GPIO_WritePin>
HAL_SPI_TransmitReceive(&hspi3, (uint8_t*)SPI_bufor_tx, (uint8_t*)SPI_bufor_rx, 1, 0);
 8002388:	2300      	movs	r3, #0
 800238a:	9300      	str	r3, [sp, #0]
 800238c:	2301      	movs	r3, #1
 800238e:	4a83      	ldr	r2, [pc, #524]	; (800259c <HAL_ADCEx_InjectedConvCpltCallback+0x314>)
 8002390:	4980      	ldr	r1, [pc, #512]	; (8002594 <HAL_ADCEx_InjectedConvCpltCallback+0x30c>)
 8002392:	4883      	ldr	r0, [pc, #524]	; (80025a0 <HAL_ADCEx_InjectedConvCpltCallback+0x318>)
 8002394:	f005 fd81 	bl	8007e9a <HAL_SPI_TransmitReceive>
HAL_GPIO_WritePin(GPIOD,GPIO_PIN_2,1);
 8002398:	2201      	movs	r2, #1
 800239a:	2104      	movs	r1, #4
 800239c:	487e      	ldr	r0, [pc, #504]	; (8002598 <HAL_ADCEx_InjectedConvCpltCallback+0x310>)
 800239e:	f004 fa1f 	bl	80067e0 <HAL_GPIO_WritePin>
REG_ANGLECOM=pozycja_walu=SPI_bufor_rx[0]&0X3fff;
 80023a2:	4b7e      	ldr	r3, [pc, #504]	; (800259c <HAL_ADCEx_InjectedConvCpltCallback+0x314>)
 80023a4:	881b      	ldrh	r3, [r3, #0]
 80023a6:	b29b      	uxth	r3, r3
 80023a8:	f3c3 030d 	ubfx	r3, r3, #0, #14
 80023ac:	b29a      	uxth	r2, r3
 80023ae:	4b7d      	ldr	r3, [pc, #500]	; (80025a4 <HAL_ADCEx_InjectedConvCpltCallback+0x31c>)
 80023b0:	4611      	mov	r1, r2
 80023b2:	8019      	strh	r1, [r3, #0]
 80023b4:	4b7c      	ldr	r3, [pc, #496]	; (80025a8 <HAL_ADCEx_InjectedConvCpltCallback+0x320>)
 80023b6:	801a      	strh	r2, [r3, #0]


					/**OBLICZENIA WEKTOR FOC**/ //15us

/**OBLICZENIA KĄTA THETA**/
angle_theta_calc();
 80023b8:	f7fe fc42 	bl	8000c40 <angle_theta_calc>

/**TRANS CLARK **/
clark_transf(I_a_ADC, I_b_ADC, &prad_alpha, &prad_beta);
 80023bc:	4b71      	ldr	r3, [pc, #452]	; (8002584 <HAL_ADCEx_InjectedConvCpltCallback+0x2fc>)
 80023be:	881b      	ldrh	r3, [r3, #0]
 80023c0:	b29b      	uxth	r3, r3
 80023c2:	b218      	sxth	r0, r3
 80023c4:	4b70      	ldr	r3, [pc, #448]	; (8002588 <HAL_ADCEx_InjectedConvCpltCallback+0x300>)
 80023c6:	881b      	ldrh	r3, [r3, #0]
 80023c8:	b29b      	uxth	r3, r3
 80023ca:	b219      	sxth	r1, r3
 80023cc:	4b77      	ldr	r3, [pc, #476]	; (80025ac <HAL_ADCEx_InjectedConvCpltCallback+0x324>)
 80023ce:	4a78      	ldr	r2, [pc, #480]	; (80025b0 <HAL_ADCEx_InjectedConvCpltCallback+0x328>)
 80023d0:	f7fe fc86 	bl	8000ce0 <clark_transf>

/**TRANS PARK **/
park_transf(prad_alpha, prad_beta, pozycja_walu_deg, &prad_q, &prad_d);
 80023d4:	4b76      	ldr	r3, [pc, #472]	; (80025b0 <HAL_ADCEx_InjectedConvCpltCallback+0x328>)
 80023d6:	881b      	ldrh	r3, [r3, #0]
 80023d8:	b218      	sxth	r0, r3
 80023da:	4b74      	ldr	r3, [pc, #464]	; (80025ac <HAL_ADCEx_InjectedConvCpltCallback+0x324>)
 80023dc:	881b      	ldrh	r3, [r3, #0]
 80023de:	b219      	sxth	r1, r3
 80023e0:	4b74      	ldr	r3, [pc, #464]	; (80025b4 <HAL_ADCEx_InjectedConvCpltCallback+0x32c>)
 80023e2:	881b      	ldrh	r3, [r3, #0]
 80023e4:	b29b      	uxth	r3, r3
 80023e6:	b21a      	sxth	r2, r3
 80023e8:	4b73      	ldr	r3, [pc, #460]	; (80025b8 <HAL_ADCEx_InjectedConvCpltCallback+0x330>)
 80023ea:	9300      	str	r3, [sp, #0]
 80023ec:	4b73      	ldr	r3, [pc, #460]	; (80025bc <HAL_ADCEx_InjectedConvCpltCallback+0x334>)
 80023ee:	f7fe fca3 	bl	8000d38 <park_transf>

/**TORQ, FLUX REG PI **/
//Iqd_current_reg();
PI_REG(&Iq_reg, prad_q, prad_q_zad, &PI_VQ_out);
 80023f2:	4b72      	ldr	r3, [pc, #456]	; (80025bc <HAL_ADCEx_InjectedConvCpltCallback+0x334>)
 80023f4:	881b      	ldrh	r3, [r3, #0]
 80023f6:	b219      	sxth	r1, r3
 80023f8:	4b71      	ldr	r3, [pc, #452]	; (80025c0 <HAL_ADCEx_InjectedConvCpltCallback+0x338>)
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	b21a      	sxth	r2, r3
 80023fe:	4b71      	ldr	r3, [pc, #452]	; (80025c4 <HAL_ADCEx_InjectedConvCpltCallback+0x33c>)
 8002400:	4871      	ldr	r0, [pc, #452]	; (80025c8 <HAL_ADCEx_InjectedConvCpltCallback+0x340>)
 8002402:	f7fe fbb5 	bl	8000b70 <PI_REG>
PI_REG(&Id_reg, prad_d, prad_d_zad, &PI_VD_out);
 8002406:	4b6c      	ldr	r3, [pc, #432]	; (80025b8 <HAL_ADCEx_InjectedConvCpltCallback+0x330>)
 8002408:	881b      	ldrh	r3, [r3, #0]
 800240a:	b219      	sxth	r1, r3
 800240c:	4b6f      	ldr	r3, [pc, #444]	; (80025cc <HAL_ADCEx_InjectedConvCpltCallback+0x344>)
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	b21a      	sxth	r2, r3
 8002412:	4b6f      	ldr	r3, [pc, #444]	; (80025d0 <HAL_ADCEx_InjectedConvCpltCallback+0x348>)
 8002414:	486f      	ldr	r0, [pc, #444]	; (80025d4 <HAL_ADCEx_InjectedConvCpltCallback+0x34c>)
 8002416:	f7fe fbab 	bl	8000b70 <PI_REG>


							/**TRANSFORMATA ODWROTNA PARK'a**/
park_rev_transf(PI_VD_out, PI_VQ_out, pozycja_walu_deg, &napiecie_Ualpha, &napiecie_Ubeta);
 800241a:	4b6d      	ldr	r3, [pc, #436]	; (80025d0 <HAL_ADCEx_InjectedConvCpltCallback+0x348>)
 800241c:	6818      	ldr	r0, [r3, #0]
 800241e:	4b69      	ldr	r3, [pc, #420]	; (80025c4 <HAL_ADCEx_InjectedConvCpltCallback+0x33c>)
 8002420:	6819      	ldr	r1, [r3, #0]
 8002422:	4b64      	ldr	r3, [pc, #400]	; (80025b4 <HAL_ADCEx_InjectedConvCpltCallback+0x32c>)
 8002424:	881b      	ldrh	r3, [r3, #0]
 8002426:	b29b      	uxth	r3, r3
 8002428:	b21a      	sxth	r2, r3
 800242a:	4b6b      	ldr	r3, [pc, #428]	; (80025d8 <HAL_ADCEx_InjectedConvCpltCallback+0x350>)
 800242c:	9300      	str	r3, [sp, #0]
 800242e:	4b6b      	ldr	r3, [pc, #428]	; (80025dc <HAL_ADCEx_InjectedConvCpltCallback+0x354>)
 8002430:	f7fe fcf2 	bl	8000e18 <park_rev_transf>

							/**TRANSFORMATA ODWROTNA CLARKA'a**/ //jesli SVPWM to ta transformata nie potrzena
napiecie_U_U = napiecie_Ualpha;
 8002434:	4b69      	ldr	r3, [pc, #420]	; (80025dc <HAL_ADCEx_InjectedConvCpltCallback+0x354>)
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	4a69      	ldr	r2, [pc, #420]	; (80025e0 <HAL_ADCEx_InjectedConvCpltCallback+0x358>)
 800243a:	6013      	str	r3, [r2, #0]
napiecie_U_V = ((napiecie_Ubeta * 1.73) - napiecie_Ualpha) * 0.5;
 800243c:	4b66      	ldr	r3, [pc, #408]	; (80025d8 <HAL_ADCEx_InjectedConvCpltCallback+0x350>)
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	4618      	mov	r0, r3
 8002442:	f7fe f965 	bl	8000710 <__aeabi_i2d>
 8002446:	a348      	add	r3, pc, #288	; (adr r3, 8002568 <HAL_ADCEx_InjectedConvCpltCallback+0x2e0>)
 8002448:	e9d3 2300 	ldrd	r2, r3, [r3]
 800244c:	f7fd fee4 	bl	8000218 <__aeabi_dmul>
 8002450:	4602      	mov	r2, r0
 8002452:	460b      	mov	r3, r1
 8002454:	4614      	mov	r4, r2
 8002456:	461d      	mov	r5, r3
 8002458:	4b60      	ldr	r3, [pc, #384]	; (80025dc <HAL_ADCEx_InjectedConvCpltCallback+0x354>)
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	4618      	mov	r0, r3
 800245e:	f7fe f957 	bl	8000710 <__aeabi_i2d>
 8002462:	4602      	mov	r2, r0
 8002464:	460b      	mov	r3, r1
 8002466:	4620      	mov	r0, r4
 8002468:	4629      	mov	r1, r5
 800246a:	f7fe f803 	bl	8000474 <__aeabi_dsub>
 800246e:	4602      	mov	r2, r0
 8002470:	460b      	mov	r3, r1
 8002472:	4610      	mov	r0, r2
 8002474:	4619      	mov	r1, r3
 8002476:	f04f 0200 	mov.w	r2, #0
 800247a:	4b5a      	ldr	r3, [pc, #360]	; (80025e4 <HAL_ADCEx_InjectedConvCpltCallback+0x35c>)
 800247c:	f7fd fecc 	bl	8000218 <__aeabi_dmul>
 8002480:	4602      	mov	r2, r0
 8002482:	460b      	mov	r3, r1
 8002484:	4610      	mov	r0, r2
 8002486:	4619      	mov	r1, r3
 8002488:	f7fe f9ac 	bl	80007e4 <__aeabi_d2iz>
 800248c:	4603      	mov	r3, r0
 800248e:	4a56      	ldr	r2, [pc, #344]	; (80025e8 <HAL_ADCEx_InjectedConvCpltCallback+0x360>)
 8002490:	6013      	str	r3, [r2, #0]
napiecie_U_W = ((-napiecie_Ubeta * 1.73) - napiecie_Ualpha) * 0.5;
 8002492:	4b51      	ldr	r3, [pc, #324]	; (80025d8 <HAL_ADCEx_InjectedConvCpltCallback+0x350>)
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	425b      	negs	r3, r3
 8002498:	4618      	mov	r0, r3
 800249a:	f7fe f939 	bl	8000710 <__aeabi_i2d>
 800249e:	a332      	add	r3, pc, #200	; (adr r3, 8002568 <HAL_ADCEx_InjectedConvCpltCallback+0x2e0>)
 80024a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024a4:	f7fd feb8 	bl	8000218 <__aeabi_dmul>
 80024a8:	4602      	mov	r2, r0
 80024aa:	460b      	mov	r3, r1
 80024ac:	4614      	mov	r4, r2
 80024ae:	461d      	mov	r5, r3
 80024b0:	4b4a      	ldr	r3, [pc, #296]	; (80025dc <HAL_ADCEx_InjectedConvCpltCallback+0x354>)
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	4618      	mov	r0, r3
 80024b6:	f7fe f92b 	bl	8000710 <__aeabi_i2d>
 80024ba:	4602      	mov	r2, r0
 80024bc:	460b      	mov	r3, r1
 80024be:	4620      	mov	r0, r4
 80024c0:	4629      	mov	r1, r5
 80024c2:	f7fd ffd7 	bl	8000474 <__aeabi_dsub>
 80024c6:	4602      	mov	r2, r0
 80024c8:	460b      	mov	r3, r1
 80024ca:	4610      	mov	r0, r2
 80024cc:	4619      	mov	r1, r3
 80024ce:	f04f 0200 	mov.w	r2, #0
 80024d2:	4b44      	ldr	r3, [pc, #272]	; (80025e4 <HAL_ADCEx_InjectedConvCpltCallback+0x35c>)
 80024d4:	f7fd fea0 	bl	8000218 <__aeabi_dmul>
 80024d8:	4602      	mov	r2, r0
 80024da:	460b      	mov	r3, r1
 80024dc:	4610      	mov	r0, r2
 80024de:	4619      	mov	r1, r3
 80024e0:	f7fe f980 	bl	80007e4 <__aeabi_d2iz>
 80024e4:	4603      	mov	r3, r0
 80024e6:	4a41      	ldr	r2, [pc, #260]	; (80025ec <HAL_ADCEx_InjectedConvCpltCallback+0x364>)
 80024e8:	6013      	str	r3, [r2, #0]

							/**MODULACJA PWM**/

SVPWM_modulacja(napiecie_Ualpha, napiecie_Ubeta, &U_SVPWM, &V_SVPWM, &W_SVPWM );
 80024ea:	4b3c      	ldr	r3, [pc, #240]	; (80025dc <HAL_ADCEx_InjectedConvCpltCallback+0x354>)
 80024ec:	6818      	ldr	r0, [r3, #0]
 80024ee:	4b3a      	ldr	r3, [pc, #232]	; (80025d8 <HAL_ADCEx_InjectedConvCpltCallback+0x350>)
 80024f0:	6819      	ldr	r1, [r3, #0]
 80024f2:	4b3f      	ldr	r3, [pc, #252]	; (80025f0 <HAL_ADCEx_InjectedConvCpltCallback+0x368>)
 80024f4:	9300      	str	r3, [sp, #0]
 80024f6:	4b3f      	ldr	r3, [pc, #252]	; (80025f4 <HAL_ADCEx_InjectedConvCpltCallback+0x36c>)
 80024f8:	4a3f      	ldr	r2, [pc, #252]	; (80025f8 <HAL_ADCEx_InjectedConvCpltCallback+0x370>)
 80024fa:	f7fe fd7d 	bl	8000ff8 <SVPWM_modulacja>


PWM_U=(uint16_t)((napiecie_U_U/2)+500);
 80024fe:	4b38      	ldr	r3, [pc, #224]	; (80025e0 <HAL_ADCEx_InjectedConvCpltCallback+0x358>)
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	0fda      	lsrs	r2, r3, #31
 8002504:	4413      	add	r3, r2
 8002506:	105b      	asrs	r3, r3, #1
 8002508:	b29b      	uxth	r3, r3
 800250a:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800250e:	b29a      	uxth	r2, r3
 8002510:	4b3a      	ldr	r3, [pc, #232]	; (80025fc <HAL_ADCEx_InjectedConvCpltCallback+0x374>)
 8002512:	801a      	strh	r2, [r3, #0]
PWM_V=(uint16_t)((napiecie_U_V/2)+500);
 8002514:	4b34      	ldr	r3, [pc, #208]	; (80025e8 <HAL_ADCEx_InjectedConvCpltCallback+0x360>)
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	0fda      	lsrs	r2, r3, #31
 800251a:	4413      	add	r3, r2
 800251c:	105b      	asrs	r3, r3, #1
 800251e:	b29b      	uxth	r3, r3
 8002520:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8002524:	b29a      	uxth	r2, r3
 8002526:	4b36      	ldr	r3, [pc, #216]	; (8002600 <HAL_ADCEx_InjectedConvCpltCallback+0x378>)
 8002528:	801a      	strh	r2, [r3, #0]
PWM_W=(uint16_t)((napiecie_U_W/2)+500);
 800252a:	4b30      	ldr	r3, [pc, #192]	; (80025ec <HAL_ADCEx_InjectedConvCpltCallback+0x364>)
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	0fda      	lsrs	r2, r3, #31
 8002530:	4413      	add	r3, r2
 8002532:	105b      	asrs	r3, r3, #1
 8002534:	b29b      	uxth	r3, r3
 8002536:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800253a:	b29a      	uxth	r2, r3
 800253c:	4b31      	ldr	r3, [pc, #196]	; (8002604 <HAL_ADCEx_InjectedConvCpltCallback+0x37c>)
 800253e:	801a      	strh	r2, [r3, #0]

PWM_U=(uint16_t)((U_SVPWM)+500);
 8002540:	4b2d      	ldr	r3, [pc, #180]	; (80025f8 <HAL_ADCEx_InjectedConvCpltCallback+0x370>)
 8002542:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002546:	b29b      	uxth	r3, r3
 8002548:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800254c:	b29a      	uxth	r2, r3
 800254e:	4b2b      	ldr	r3, [pc, #172]	; (80025fc <HAL_ADCEx_InjectedConvCpltCallback+0x374>)
 8002550:	801a      	strh	r2, [r3, #0]
PWM_V=(uint16_t)((V_SVPWM)+500);
 8002552:	4b28      	ldr	r3, [pc, #160]	; (80025f4 <HAL_ADCEx_InjectedConvCpltCallback+0x36c>)
 8002554:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002558:	b29b      	uxth	r3, r3
 800255a:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800255e:	b29a      	uxth	r2, r3
 8002560:	e052      	b.n	8002608 <HAL_ADCEx_InjectedConvCpltCallback+0x380>
 8002562:	bf00      	nop
 8002564:	f3af 8000 	nop.w
 8002568:	7ae147ae 	.word	0x7ae147ae
 800256c:	3ffbae14 	.word	0x3ffbae14
 8002570:	200000a8 	.word	0x200000a8
 8002574:	20000098 	.word	0x20000098
 8002578:	000f423f 	.word	0x000f423f
 800257c:	20000450 	.word	0x20000450
 8002580:	20000090 	.word	0x20000090
 8002584:	2000007e 	.word	0x2000007e
 8002588:	20000080 	.word	0x20000080
 800258c:	20000082 	.word	0x20000082
 8002590:	20000004 	.word	0x20000004
 8002594:	20000008 	.word	0x20000008
 8002598:	48000c00 	.word	0x48000c00
 800259c:	20000448 	.word	0x20000448
 80025a0:	20000220 	.word	0x20000220
 80025a4:	20000048 	.word	0x20000048
 80025a8:	20000444 	.word	0x20000444
 80025ac:	20000458 	.word	0x20000458
 80025b0:	20000456 	.word	0x20000456
 80025b4:	2000004a 	.word	0x2000004a
 80025b8:	20000066 	.word	0x20000066
 80025bc:	20000064 	.word	0x20000064
 80025c0:	2000005c 	.word	0x2000005c
 80025c4:	20000058 	.word	0x20000058
 80025c8:	20000468 	.word	0x20000468
 80025cc:	20000060 	.word	0x20000060
 80025d0:	20000054 	.word	0x20000054
 80025d4:	20000490 	.word	0x20000490
 80025d8:	2000006c 	.word	0x2000006c
 80025dc:	20000068 	.word	0x20000068
 80025e0:	20000070 	.word	0x20000070
 80025e4:	3fe00000 	.word	0x3fe00000
 80025e8:	20000074 	.word	0x20000074
 80025ec:	20000078 	.word	0x20000078
 80025f0:	20000088 	.word	0x20000088
 80025f4:	20000086 	.word	0x20000086
 80025f8:	20000084 	.word	0x20000084
 80025fc:	2000008a 	.word	0x2000008a
 8002600:	2000008c 	.word	0x2000008c
 8002604:	2000008e 	.word	0x2000008e
 8002608:	4b0d      	ldr	r3, [pc, #52]	; (8002640 <HAL_ADCEx_InjectedConvCpltCallback+0x3b8>)
 800260a:	801a      	strh	r2, [r3, #0]
PWM_W=(uint16_t)((W_SVPWM)+500);
 800260c:	4b0d      	ldr	r3, [pc, #52]	; (8002644 <HAL_ADCEx_InjectedConvCpltCallback+0x3bc>)
 800260e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002612:	b29b      	uxth	r3, r3
 8002614:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8002618:	b29a      	uxth	r2, r3
 800261a:	4b0b      	ldr	r3, [pc, #44]	; (8002648 <HAL_ADCEx_InjectedConvCpltCallback+0x3c0>)
 800261c:	801a      	strh	r2, [r3, #0]

SPWM_modulacja();
 800261e:	f7fe fc63 	bl	8000ee8 <SPWM_modulacja>
							/**pomocnicze**///25u
/*
Generacja_Sinusa();
SPWM_modulacja();
*/
SPI_bufor_rx[0]=0;
 8002622:	4b0a      	ldr	r3, [pc, #40]	; (800264c <HAL_ADCEx_InjectedConvCpltCallback+0x3c4>)
 8002624:	2200      	movs	r2, #0
 8002626:	801a      	strh	r2, [r3, #0]


GPIOA->ODR &=~ 1<<5;
 8002628:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800262c:	695b      	ldr	r3, [r3, #20]
 800262e:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8002632:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002636:	6153      	str	r3, [r2, #20]

}
 8002638:	bf00      	nop
 800263a:	3710      	adds	r7, #16
 800263c:	46bd      	mov	sp, r7
 800263e:	bdb0      	pop	{r4, r5, r7, pc}
 8002640:	2000008c 	.word	0x2000008c
 8002644:	20000088 	.word	0x20000088
 8002648:	2000008e 	.word	0x2000008e
 800264c:	20000448 	.word	0x20000448

08002650 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002650:	b480      	push	{r7}
 8002652:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002654:	b672      	cpsid	i
}
 8002656:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002658:	e7fe      	b.n	8002658 <Error_Handler+0x8>
	...

0800265c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800265c:	b580      	push	{r7, lr}
 800265e:	b082      	sub	sp, #8
 8002660:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002662:	4b0f      	ldr	r3, [pc, #60]	; (80026a0 <HAL_MspInit+0x44>)
 8002664:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002666:	4a0e      	ldr	r2, [pc, #56]	; (80026a0 <HAL_MspInit+0x44>)
 8002668:	f043 0301 	orr.w	r3, r3, #1
 800266c:	6613      	str	r3, [r2, #96]	; 0x60
 800266e:	4b0c      	ldr	r3, [pc, #48]	; (80026a0 <HAL_MspInit+0x44>)
 8002670:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002672:	f003 0301 	and.w	r3, r3, #1
 8002676:	607b      	str	r3, [r7, #4]
 8002678:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800267a:	4b09      	ldr	r3, [pc, #36]	; (80026a0 <HAL_MspInit+0x44>)
 800267c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800267e:	4a08      	ldr	r2, [pc, #32]	; (80026a0 <HAL_MspInit+0x44>)
 8002680:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002684:	6593      	str	r3, [r2, #88]	; 0x58
 8002686:	4b06      	ldr	r3, [pc, #24]	; (80026a0 <HAL_MspInit+0x44>)
 8002688:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800268a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800268e:	603b      	str	r3, [r7, #0]
 8002690:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8002692:	f004 f985 	bl	80069a0 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002696:	bf00      	nop
 8002698:	3708      	adds	r7, #8
 800269a:	46bd      	mov	sp, r7
 800269c:	bd80      	pop	{r7, pc}
 800269e:	bf00      	nop
 80026a0:	40021000 	.word	0x40021000

080026a4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80026a4:	b580      	push	{r7, lr}
 80026a6:	b09e      	sub	sp, #120	; 0x78
 80026a8:	af00      	add	r7, sp, #0
 80026aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026ac:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80026b0:	2200      	movs	r2, #0
 80026b2:	601a      	str	r2, [r3, #0]
 80026b4:	605a      	str	r2, [r3, #4]
 80026b6:	609a      	str	r2, [r3, #8]
 80026b8:	60da      	str	r2, [r3, #12]
 80026ba:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80026bc:	f107 0320 	add.w	r3, r7, #32
 80026c0:	2244      	movs	r2, #68	; 0x44
 80026c2:	2100      	movs	r1, #0
 80026c4:	4618      	mov	r0, r3
 80026c6:	f009 f815 	bl	800b6f4 <memset>
  if(hadc->Instance==ADC1)
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80026d2:	d15e      	bne.n	8002792 <HAL_ADC_MspInit+0xee>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 80026d4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80026d8:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 80026da:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 80026de:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80026e0:	f107 0320 	add.w	r3, r7, #32
 80026e4:	4618      	mov	r0, r3
 80026e6:	f004 fe9f 	bl	8007428 <HAL_RCCEx_PeriphCLKConfig>
 80026ea:	4603      	mov	r3, r0
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d001      	beq.n	80026f4 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 80026f0:	f7ff ffae 	bl	8002650 <Error_Handler>
    }

    /* Peripheral clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 80026f4:	4b4e      	ldr	r3, [pc, #312]	; (8002830 <HAL_ADC_MspInit+0x18c>)
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	3301      	adds	r3, #1
 80026fa:	4a4d      	ldr	r2, [pc, #308]	; (8002830 <HAL_ADC_MspInit+0x18c>)
 80026fc:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 80026fe:	4b4c      	ldr	r3, [pc, #304]	; (8002830 <HAL_ADC_MspInit+0x18c>)
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	2b01      	cmp	r3, #1
 8002704:	d10b      	bne.n	800271e <HAL_ADC_MspInit+0x7a>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8002706:	4b4b      	ldr	r3, [pc, #300]	; (8002834 <HAL_ADC_MspInit+0x190>)
 8002708:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800270a:	4a4a      	ldr	r2, [pc, #296]	; (8002834 <HAL_ADC_MspInit+0x190>)
 800270c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002710:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002712:	4b48      	ldr	r3, [pc, #288]	; (8002834 <HAL_ADC_MspInit+0x190>)
 8002714:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002716:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800271a:	61fb      	str	r3, [r7, #28]
 800271c:	69fb      	ldr	r3, [r7, #28]
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800271e:	4b45      	ldr	r3, [pc, #276]	; (8002834 <HAL_ADC_MspInit+0x190>)
 8002720:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002722:	4a44      	ldr	r2, [pc, #272]	; (8002834 <HAL_ADC_MspInit+0x190>)
 8002724:	f043 0304 	orr.w	r3, r3, #4
 8002728:	64d3      	str	r3, [r2, #76]	; 0x4c
 800272a:	4b42      	ldr	r3, [pc, #264]	; (8002834 <HAL_ADC_MspInit+0x190>)
 800272c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800272e:	f003 0304 	and.w	r3, r3, #4
 8002732:	61bb      	str	r3, [r7, #24]
 8002734:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002736:	4b3f      	ldr	r3, [pc, #252]	; (8002834 <HAL_ADC_MspInit+0x190>)
 8002738:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800273a:	4a3e      	ldr	r2, [pc, #248]	; (8002834 <HAL_ADC_MspInit+0x190>)
 800273c:	f043 0301 	orr.w	r3, r3, #1
 8002740:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002742:	4b3c      	ldr	r3, [pc, #240]	; (8002834 <HAL_ADC_MspInit+0x190>)
 8002744:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002746:	f003 0301 	and.w	r3, r3, #1
 800274a:	617b      	str	r3, [r7, #20]
 800274c:	697b      	ldr	r3, [r7, #20]
    PC0     ------> ADC1_IN6
    PC1     ------> ADC1_IN7
    PA0     ------> ADC1_IN1
    PA1     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800274e:	2303      	movs	r3, #3
 8002750:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002752:	2303      	movs	r3, #3
 8002754:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002756:	2300      	movs	r3, #0
 8002758:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800275a:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800275e:	4619      	mov	r1, r3
 8002760:	4835      	ldr	r0, [pc, #212]	; (8002838 <HAL_ADC_MspInit+0x194>)
 8002762:	f003 febb 	bl	80064dc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002766:	2303      	movs	r3, #3
 8002768:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800276a:	2303      	movs	r3, #3
 800276c:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800276e:	2300      	movs	r3, #0
 8002770:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002772:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8002776:	4619      	mov	r1, r3
 8002778:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800277c:	f003 feae 	bl	80064dc <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8002780:	2200      	movs	r2, #0
 8002782:	2100      	movs	r1, #0
 8002784:	2012      	movs	r0, #18
 8002786:	f003 f9cc 	bl	8005b22 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 800278a:	2012      	movs	r0, #18
 800278c:	f003 f9e3 	bl	8005b56 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8002790:	e049      	b.n	8002826 <HAL_ADC_MspInit+0x182>
  else if(hadc->Instance==ADC2)
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	4a29      	ldr	r2, [pc, #164]	; (800283c <HAL_ADC_MspInit+0x198>)
 8002798:	4293      	cmp	r3, r2
 800279a:	d144      	bne.n	8002826 <HAL_ADC_MspInit+0x182>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 800279c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80027a0:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 80027a2:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 80027a6:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80027a8:	f107 0320 	add.w	r3, r7, #32
 80027ac:	4618      	mov	r0, r3
 80027ae:	f004 fe3b 	bl	8007428 <HAL_RCCEx_PeriphCLKConfig>
 80027b2:	4603      	mov	r3, r0
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d001      	beq.n	80027bc <HAL_ADC_MspInit+0x118>
      Error_Handler();
 80027b8:	f7ff ff4a 	bl	8002650 <Error_Handler>
    HAL_RCC_ADC12_CLK_ENABLED++;
 80027bc:	4b1c      	ldr	r3, [pc, #112]	; (8002830 <HAL_ADC_MspInit+0x18c>)
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	3301      	adds	r3, #1
 80027c2:	4a1b      	ldr	r2, [pc, #108]	; (8002830 <HAL_ADC_MspInit+0x18c>)
 80027c4:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 80027c6:	4b1a      	ldr	r3, [pc, #104]	; (8002830 <HAL_ADC_MspInit+0x18c>)
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	2b01      	cmp	r3, #1
 80027cc:	d10b      	bne.n	80027e6 <HAL_ADC_MspInit+0x142>
      __HAL_RCC_ADC12_CLK_ENABLE();
 80027ce:	4b19      	ldr	r3, [pc, #100]	; (8002834 <HAL_ADC_MspInit+0x190>)
 80027d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80027d2:	4a18      	ldr	r2, [pc, #96]	; (8002834 <HAL_ADC_MspInit+0x190>)
 80027d4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80027d8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80027da:	4b16      	ldr	r3, [pc, #88]	; (8002834 <HAL_ADC_MspInit+0x190>)
 80027dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80027de:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80027e2:	613b      	str	r3, [r7, #16]
 80027e4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80027e6:	4b13      	ldr	r3, [pc, #76]	; (8002834 <HAL_ADC_MspInit+0x190>)
 80027e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80027ea:	4a12      	ldr	r2, [pc, #72]	; (8002834 <HAL_ADC_MspInit+0x190>)
 80027ec:	f043 0304 	orr.w	r3, r3, #4
 80027f0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80027f2:	4b10      	ldr	r3, [pc, #64]	; (8002834 <HAL_ADC_MspInit+0x190>)
 80027f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80027f6:	f003 0304 	and.w	r3, r3, #4
 80027fa:	60fb      	str	r3, [r7, #12]
 80027fc:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80027fe:	2304      	movs	r3, #4
 8002800:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002802:	2303      	movs	r3, #3
 8002804:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002806:	2300      	movs	r3, #0
 8002808:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800280a:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800280e:	4619      	mov	r1, r3
 8002810:	4809      	ldr	r0, [pc, #36]	; (8002838 <HAL_ADC_MspInit+0x194>)
 8002812:	f003 fe63 	bl	80064dc <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8002816:	2200      	movs	r2, #0
 8002818:	2100      	movs	r1, #0
 800281a:	2012      	movs	r0, #18
 800281c:	f003 f981 	bl	8005b22 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8002820:	2012      	movs	r0, #18
 8002822:	f003 f998 	bl	8005b56 <HAL_NVIC_EnableIRQ>
}
 8002826:	bf00      	nop
 8002828:	3778      	adds	r7, #120	; 0x78
 800282a:	46bd      	mov	sp, r7
 800282c:	bd80      	pop	{r7, pc}
 800282e:	bf00      	nop
 8002830:	200004b8 	.word	0x200004b8
 8002834:	40021000 	.word	0x40021000
 8002838:	48000800 	.word	0x48000800
 800283c:	50000100 	.word	0x50000100

08002840 <HAL_CORDIC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcordic: CORDIC handle pointer
* @retval None
*/
void HAL_CORDIC_MspInit(CORDIC_HandleTypeDef* hcordic)
{
 8002840:	b480      	push	{r7}
 8002842:	b085      	sub	sp, #20
 8002844:	af00      	add	r7, sp, #0
 8002846:	6078      	str	r0, [r7, #4]
  if(hcordic->Instance==CORDIC)
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	4a0a      	ldr	r2, [pc, #40]	; (8002878 <HAL_CORDIC_MspInit+0x38>)
 800284e:	4293      	cmp	r3, r2
 8002850:	d10b      	bne.n	800286a <HAL_CORDIC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CORDIC_MspInit 0 */

  /* USER CODE END CORDIC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CORDIC_CLK_ENABLE();
 8002852:	4b0a      	ldr	r3, [pc, #40]	; (800287c <HAL_CORDIC_MspInit+0x3c>)
 8002854:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002856:	4a09      	ldr	r2, [pc, #36]	; (800287c <HAL_CORDIC_MspInit+0x3c>)
 8002858:	f043 0308 	orr.w	r3, r3, #8
 800285c:	6493      	str	r3, [r2, #72]	; 0x48
 800285e:	4b07      	ldr	r3, [pc, #28]	; (800287c <HAL_CORDIC_MspInit+0x3c>)
 8002860:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002862:	f003 0308 	and.w	r3, r3, #8
 8002866:	60fb      	str	r3, [r7, #12]
 8002868:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CORDIC_MspInit 1 */

  /* USER CODE END CORDIC_MspInit 1 */
  }

}
 800286a:	bf00      	nop
 800286c:	3714      	adds	r7, #20
 800286e:	46bd      	mov	sp, r7
 8002870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002874:	4770      	bx	lr
 8002876:	bf00      	nop
 8002878:	40020c00 	.word	0x40020c00
 800287c:	40021000 	.word	0x40021000

08002880 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8002880:	b580      	push	{r7, lr}
 8002882:	b08a      	sub	sp, #40	; 0x28
 8002884:	af00      	add	r7, sp, #0
 8002886:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002888:	f107 0314 	add.w	r3, r7, #20
 800288c:	2200      	movs	r2, #0
 800288e:	601a      	str	r2, [r3, #0]
 8002890:	605a      	str	r2, [r3, #4]
 8002892:	609a      	str	r2, [r3, #8]
 8002894:	60da      	str	r2, [r3, #12]
 8002896:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	4a19      	ldr	r2, [pc, #100]	; (8002904 <HAL_DAC_MspInit+0x84>)
 800289e:	4293      	cmp	r3, r2
 80028a0:	d12c      	bne.n	80028fc <HAL_DAC_MspInit+0x7c>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 80028a2:	4b19      	ldr	r3, [pc, #100]	; (8002908 <HAL_DAC_MspInit+0x88>)
 80028a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80028a6:	4a18      	ldr	r2, [pc, #96]	; (8002908 <HAL_DAC_MspInit+0x88>)
 80028a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80028ac:	64d3      	str	r3, [r2, #76]	; 0x4c
 80028ae:	4b16      	ldr	r3, [pc, #88]	; (8002908 <HAL_DAC_MspInit+0x88>)
 80028b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80028b2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80028b6:	613b      	str	r3, [r7, #16]
 80028b8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80028ba:	4b13      	ldr	r3, [pc, #76]	; (8002908 <HAL_DAC_MspInit+0x88>)
 80028bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80028be:	4a12      	ldr	r2, [pc, #72]	; (8002908 <HAL_DAC_MspInit+0x88>)
 80028c0:	f043 0301 	orr.w	r3, r3, #1
 80028c4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80028c6:	4b10      	ldr	r3, [pc, #64]	; (8002908 <HAL_DAC_MspInit+0x88>)
 80028c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80028ca:	f003 0301 	and.w	r3, r3, #1
 80028ce:	60fb      	str	r3, [r7, #12]
 80028d0:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80028d2:	2310      	movs	r3, #16
 80028d4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80028d6:	2303      	movs	r3, #3
 80028d8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028da:	2300      	movs	r3, #0
 80028dc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80028de:	f107 0314 	add.w	r3, r7, #20
 80028e2:	4619      	mov	r1, r3
 80028e4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80028e8:	f003 fdf8 	bl	80064dc <HAL_GPIO_Init>

    /* DAC1 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 80028ec:	2200      	movs	r2, #0
 80028ee:	2100      	movs	r1, #0
 80028f0:	2036      	movs	r0, #54	; 0x36
 80028f2:	f003 f916 	bl	8005b22 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80028f6:	2036      	movs	r0, #54	; 0x36
 80028f8:	f003 f92d 	bl	8005b56 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 80028fc:	bf00      	nop
 80028fe:	3728      	adds	r7, #40	; 0x28
 8002900:	46bd      	mov	sp, r7
 8002902:	bd80      	pop	{r7, pc}
 8002904:	50000800 	.word	0x50000800
 8002908:	40021000 	.word	0x40021000

0800290c <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 800290c:	b580      	push	{r7, lr}
 800290e:	b09a      	sub	sp, #104	; 0x68
 8002910:	af00      	add	r7, sp, #0
 8002912:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002914:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002918:	2200      	movs	r2, #0
 800291a:	601a      	str	r2, [r3, #0]
 800291c:	605a      	str	r2, [r3, #4]
 800291e:	609a      	str	r2, [r3, #8]
 8002920:	60da      	str	r2, [r3, #12]
 8002922:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002924:	f107 0310 	add.w	r3, r7, #16
 8002928:	2244      	movs	r2, #68	; 0x44
 800292a:	2100      	movs	r1, #0
 800292c:	4618      	mov	r0, r3
 800292e:	f008 fee1 	bl	800b6f4 <memset>
  if(hfdcan->Instance==FDCAN1)
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	4a20      	ldr	r2, [pc, #128]	; (80029b8 <HAL_FDCAN_MspInit+0xac>)
 8002938:	4293      	cmp	r3, r2
 800293a:	d139      	bne.n	80029b0 <HAL_FDCAN_MspInit+0xa4>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 800293c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002940:	613b      	str	r3, [r7, #16]
    PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PCLK1;
 8002942:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002946:	643b      	str	r3, [r7, #64]	; 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002948:	f107 0310 	add.w	r3, r7, #16
 800294c:	4618      	mov	r0, r3
 800294e:	f004 fd6b 	bl	8007428 <HAL_RCCEx_PeriphCLKConfig>
 8002952:	4603      	mov	r3, r0
 8002954:	2b00      	cmp	r3, #0
 8002956:	d001      	beq.n	800295c <HAL_FDCAN_MspInit+0x50>
    {
      Error_Handler();
 8002958:	f7ff fe7a 	bl	8002650 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 800295c:	4b17      	ldr	r3, [pc, #92]	; (80029bc <HAL_FDCAN_MspInit+0xb0>)
 800295e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002960:	4a16      	ldr	r2, [pc, #88]	; (80029bc <HAL_FDCAN_MspInit+0xb0>)
 8002962:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002966:	6593      	str	r3, [r2, #88]	; 0x58
 8002968:	4b14      	ldr	r3, [pc, #80]	; (80029bc <HAL_FDCAN_MspInit+0xb0>)
 800296a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800296c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002970:	60fb      	str	r3, [r7, #12]
 8002972:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002974:	4b11      	ldr	r3, [pc, #68]	; (80029bc <HAL_FDCAN_MspInit+0xb0>)
 8002976:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002978:	4a10      	ldr	r2, [pc, #64]	; (80029bc <HAL_FDCAN_MspInit+0xb0>)
 800297a:	f043 0301 	orr.w	r3, r3, #1
 800297e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002980:	4b0e      	ldr	r3, [pc, #56]	; (80029bc <HAL_FDCAN_MspInit+0xb0>)
 8002982:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002984:	f003 0301 	and.w	r3, r3, #1
 8002988:	60bb      	str	r3, [r7, #8]
 800298a:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN1 GPIO Configuration
    PA11     ------> FDCAN1_RX
    PA12     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800298c:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8002990:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002992:	2302      	movs	r3, #2
 8002994:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002996:	2300      	movs	r3, #0
 8002998:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800299a:	2300      	movs	r3, #0
 800299c:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 800299e:	2309      	movs	r3, #9
 80029a0:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80029a2:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80029a6:	4619      	mov	r1, r3
 80029a8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80029ac:	f003 fd96 	bl	80064dc <HAL_GPIO_Init>
  /* USER CODE BEGIN FDCAN1_MspInit 1 */

  /* USER CODE END FDCAN1_MspInit 1 */
  }

}
 80029b0:	bf00      	nop
 80029b2:	3768      	adds	r7, #104	; 0x68
 80029b4:	46bd      	mov	sp, r7
 80029b6:	bd80      	pop	{r7, pc}
 80029b8:	40006400 	.word	0x40006400
 80029bc:	40021000 	.word	0x40021000

080029c0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80029c0:	b580      	push	{r7, lr}
 80029c2:	b08a      	sub	sp, #40	; 0x28
 80029c4:	af00      	add	r7, sp, #0
 80029c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80029c8:	f107 0314 	add.w	r3, r7, #20
 80029cc:	2200      	movs	r2, #0
 80029ce:	601a      	str	r2, [r3, #0]
 80029d0:	605a      	str	r2, [r3, #4]
 80029d2:	609a      	str	r2, [r3, #8]
 80029d4:	60da      	str	r2, [r3, #12]
 80029d6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	4a17      	ldr	r2, [pc, #92]	; (8002a3c <HAL_SPI_MspInit+0x7c>)
 80029de:	4293      	cmp	r3, r2
 80029e0:	d128      	bne.n	8002a34 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 80029e2:	4b17      	ldr	r3, [pc, #92]	; (8002a40 <HAL_SPI_MspInit+0x80>)
 80029e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029e6:	4a16      	ldr	r2, [pc, #88]	; (8002a40 <HAL_SPI_MspInit+0x80>)
 80029e8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80029ec:	6593      	str	r3, [r2, #88]	; 0x58
 80029ee:	4b14      	ldr	r3, [pc, #80]	; (8002a40 <HAL_SPI_MspInit+0x80>)
 80029f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029f2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80029f6:	613b      	str	r3, [r7, #16]
 80029f8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80029fa:	4b11      	ldr	r3, [pc, #68]	; (8002a40 <HAL_SPI_MspInit+0x80>)
 80029fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80029fe:	4a10      	ldr	r2, [pc, #64]	; (8002a40 <HAL_SPI_MspInit+0x80>)
 8002a00:	f043 0304 	orr.w	r3, r3, #4
 8002a04:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002a06:	4b0e      	ldr	r3, [pc, #56]	; (8002a40 <HAL_SPI_MspInit+0x80>)
 8002a08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a0a:	f003 0304 	and.w	r3, r3, #4
 8002a0e:	60fb      	str	r3, [r7, #12]
 8002a10:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8002a12:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8002a16:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a18:	2302      	movs	r3, #2
 8002a1a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a1c:	2300      	movs	r3, #0
 8002a1e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a20:	2300      	movs	r3, #0
 8002a22:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8002a24:	2306      	movs	r3, #6
 8002a26:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002a28:	f107 0314 	add.w	r3, r7, #20
 8002a2c:	4619      	mov	r1, r3
 8002a2e:	4805      	ldr	r0, [pc, #20]	; (8002a44 <HAL_SPI_MspInit+0x84>)
 8002a30:	f003 fd54 	bl	80064dc <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8002a34:	bf00      	nop
 8002a36:	3728      	adds	r7, #40	; 0x28
 8002a38:	46bd      	mov	sp, r7
 8002a3a:	bd80      	pop	{r7, pc}
 8002a3c:	40003c00 	.word	0x40003c00
 8002a40:	40021000 	.word	0x40021000
 8002a44:	48000800 	.word	0x48000800

08002a48 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002a48:	b580      	push	{r7, lr}
 8002a4a:	b086      	sub	sp, #24
 8002a4c:	af00      	add	r7, sp, #0
 8002a4e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	4a33      	ldr	r2, [pc, #204]	; (8002b24 <HAL_TIM_Base_MspInit+0xdc>)
 8002a56:	4293      	cmp	r3, r2
 8002a58:	d12c      	bne.n	8002ab4 <HAL_TIM_Base_MspInit+0x6c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002a5a:	4b33      	ldr	r3, [pc, #204]	; (8002b28 <HAL_TIM_Base_MspInit+0xe0>)
 8002a5c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002a5e:	4a32      	ldr	r2, [pc, #200]	; (8002b28 <HAL_TIM_Base_MspInit+0xe0>)
 8002a60:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002a64:	6613      	str	r3, [r2, #96]	; 0x60
 8002a66:	4b30      	ldr	r3, [pc, #192]	; (8002b28 <HAL_TIM_Base_MspInit+0xe0>)
 8002a68:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002a6a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002a6e:	617b      	str	r3, [r7, #20]
 8002a70:	697b      	ldr	r3, [r7, #20]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 0, 0);
 8002a72:	2200      	movs	r2, #0
 8002a74:	2100      	movs	r1, #0
 8002a76:	2018      	movs	r0, #24
 8002a78:	f003 f853 	bl	8005b22 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 8002a7c:	2018      	movs	r0, #24
 8002a7e:	f003 f86a 	bl	8005b56 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8002a82:	2200      	movs	r2, #0
 8002a84:	2100      	movs	r1, #0
 8002a86:	2019      	movs	r0, #25
 8002a88:	f003 f84b 	bl	8005b22 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8002a8c:	2019      	movs	r0, #25
 8002a8e:	f003 f862 	bl	8005b56 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, 0, 0);
 8002a92:	2200      	movs	r2, #0
 8002a94:	2100      	movs	r1, #0
 8002a96:	201a      	movs	r0, #26
 8002a98:	f003 f843 	bl	8005b22 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 8002a9c:	201a      	movs	r0, #26
 8002a9e:	f003 f85a 	bl	8005b56 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 8002aa2:	2200      	movs	r2, #0
 8002aa4:	2100      	movs	r1, #0
 8002aa6:	201b      	movs	r0, #27
 8002aa8:	f003 f83b 	bl	8005b22 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8002aac:	201b      	movs	r0, #27
 8002aae:	f003 f852 	bl	8005b56 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }

}
 8002ab2:	e032      	b.n	8002b1a <HAL_TIM_Base_MspInit+0xd2>
  else if(htim_base->Instance==TIM6)
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	4a1c      	ldr	r2, [pc, #112]	; (8002b2c <HAL_TIM_Base_MspInit+0xe4>)
 8002aba:	4293      	cmp	r3, r2
 8002abc:	d114      	bne.n	8002ae8 <HAL_TIM_Base_MspInit+0xa0>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8002abe:	4b1a      	ldr	r3, [pc, #104]	; (8002b28 <HAL_TIM_Base_MspInit+0xe0>)
 8002ac0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ac2:	4a19      	ldr	r2, [pc, #100]	; (8002b28 <HAL_TIM_Base_MspInit+0xe0>)
 8002ac4:	f043 0310 	orr.w	r3, r3, #16
 8002ac8:	6593      	str	r3, [r2, #88]	; 0x58
 8002aca:	4b17      	ldr	r3, [pc, #92]	; (8002b28 <HAL_TIM_Base_MspInit+0xe0>)
 8002acc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ace:	f003 0310 	and.w	r3, r3, #16
 8002ad2:	613b      	str	r3, [r7, #16]
 8002ad4:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8002ad6:	2200      	movs	r2, #0
 8002ad8:	2100      	movs	r1, #0
 8002ada:	2036      	movs	r0, #54	; 0x36
 8002adc:	f003 f821 	bl	8005b22 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002ae0:	2036      	movs	r0, #54	; 0x36
 8002ae2:	f003 f838 	bl	8005b56 <HAL_NVIC_EnableIRQ>
}
 8002ae6:	e018      	b.n	8002b1a <HAL_TIM_Base_MspInit+0xd2>
  else if(htim_base->Instance==TIM17)
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	4a10      	ldr	r2, [pc, #64]	; (8002b30 <HAL_TIM_Base_MspInit+0xe8>)
 8002aee:	4293      	cmp	r3, r2
 8002af0:	d113      	bne.n	8002b1a <HAL_TIM_Base_MspInit+0xd2>
    __HAL_RCC_TIM17_CLK_ENABLE();
 8002af2:	4b0d      	ldr	r3, [pc, #52]	; (8002b28 <HAL_TIM_Base_MspInit+0xe0>)
 8002af4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002af6:	4a0c      	ldr	r2, [pc, #48]	; (8002b28 <HAL_TIM_Base_MspInit+0xe0>)
 8002af8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002afc:	6613      	str	r3, [r2, #96]	; 0x60
 8002afe:	4b0a      	ldr	r3, [pc, #40]	; (8002b28 <HAL_TIM_Base_MspInit+0xe0>)
 8002b00:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002b02:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002b06:	60fb      	str	r3, [r7, #12]
 8002b08:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, 0, 0);
 8002b0a:	2200      	movs	r2, #0
 8002b0c:	2100      	movs	r1, #0
 8002b0e:	201a      	movs	r0, #26
 8002b10:	f003 f807 	bl	8005b22 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 8002b14:	201a      	movs	r0, #26
 8002b16:	f003 f81e 	bl	8005b56 <HAL_NVIC_EnableIRQ>
}
 8002b1a:	bf00      	nop
 8002b1c:	3718      	adds	r7, #24
 8002b1e:	46bd      	mov	sp, r7
 8002b20:	bd80      	pop	{r7, pc}
 8002b22:	bf00      	nop
 8002b24:	40012c00 	.word	0x40012c00
 8002b28:	40021000 	.word	0x40021000
 8002b2c:	40001000 	.word	0x40001000
 8002b30:	40014800 	.word	0x40014800

08002b34 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8002b34:	b580      	push	{r7, lr}
 8002b36:	b08a      	sub	sp, #40	; 0x28
 8002b38:	af00      	add	r7, sp, #0
 8002b3a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b3c:	f107 0314 	add.w	r3, r7, #20
 8002b40:	2200      	movs	r2, #0
 8002b42:	601a      	str	r2, [r3, #0]
 8002b44:	605a      	str	r2, [r3, #4]
 8002b46:	609a      	str	r2, [r3, #8]
 8002b48:	60da      	str	r2, [r3, #12]
 8002b4a:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b54:	d14d      	bne.n	8002bf2 <HAL_TIM_Encoder_MspInit+0xbe>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002b56:	4b29      	ldr	r3, [pc, #164]	; (8002bfc <HAL_TIM_Encoder_MspInit+0xc8>)
 8002b58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b5a:	4a28      	ldr	r2, [pc, #160]	; (8002bfc <HAL_TIM_Encoder_MspInit+0xc8>)
 8002b5c:	f043 0301 	orr.w	r3, r3, #1
 8002b60:	6593      	str	r3, [r2, #88]	; 0x58
 8002b62:	4b26      	ldr	r3, [pc, #152]	; (8002bfc <HAL_TIM_Encoder_MspInit+0xc8>)
 8002b64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b66:	f003 0301 	and.w	r3, r3, #1
 8002b6a:	613b      	str	r3, [r7, #16]
 8002b6c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b6e:	4b23      	ldr	r3, [pc, #140]	; (8002bfc <HAL_TIM_Encoder_MspInit+0xc8>)
 8002b70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b72:	4a22      	ldr	r2, [pc, #136]	; (8002bfc <HAL_TIM_Encoder_MspInit+0xc8>)
 8002b74:	f043 0301 	orr.w	r3, r3, #1
 8002b78:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002b7a:	4b20      	ldr	r3, [pc, #128]	; (8002bfc <HAL_TIM_Encoder_MspInit+0xc8>)
 8002b7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b7e:	f003 0301 	and.w	r3, r3, #1
 8002b82:	60fb      	str	r3, [r7, #12]
 8002b84:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002b86:	4b1d      	ldr	r3, [pc, #116]	; (8002bfc <HAL_TIM_Encoder_MspInit+0xc8>)
 8002b88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b8a:	4a1c      	ldr	r2, [pc, #112]	; (8002bfc <HAL_TIM_Encoder_MspInit+0xc8>)
 8002b8c:	f043 0302 	orr.w	r3, r3, #2
 8002b90:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002b92:	4b1a      	ldr	r3, [pc, #104]	; (8002bfc <HAL_TIM_Encoder_MspInit+0xc8>)
 8002b94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b96:	f003 0302 	and.w	r3, r3, #2
 8002b9a:	60bb      	str	r3, [r7, #8]
 8002b9c:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8002b9e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002ba2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ba4:	2302      	movs	r3, #2
 8002ba6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ba8:	2300      	movs	r3, #0
 8002baa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002bac:	2300      	movs	r3, #0
 8002bae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002bb0:	2301      	movs	r3, #1
 8002bb2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002bb4:	f107 0314 	add.w	r3, r7, #20
 8002bb8:	4619      	mov	r1, r3
 8002bba:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002bbe:	f003 fc8d 	bl	80064dc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002bc2:	2308      	movs	r3, #8
 8002bc4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bc6:	2302      	movs	r3, #2
 8002bc8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bca:	2300      	movs	r3, #0
 8002bcc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002bce:	2300      	movs	r3, #0
 8002bd0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002bd2:	2301      	movs	r3, #1
 8002bd4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002bd6:	f107 0314 	add.w	r3, r7, #20
 8002bda:	4619      	mov	r1, r3
 8002bdc:	4808      	ldr	r0, [pc, #32]	; (8002c00 <HAL_TIM_Encoder_MspInit+0xcc>)
 8002bde:	f003 fc7d 	bl	80064dc <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8002be2:	2200      	movs	r2, #0
 8002be4:	2100      	movs	r1, #0
 8002be6:	201c      	movs	r0, #28
 8002be8:	f002 ff9b 	bl	8005b22 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002bec:	201c      	movs	r0, #28
 8002bee:	f002 ffb2 	bl	8005b56 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8002bf2:	bf00      	nop
 8002bf4:	3728      	adds	r7, #40	; 0x28
 8002bf6:	46bd      	mov	sp, r7
 8002bf8:	bd80      	pop	{r7, pc}
 8002bfa:	bf00      	nop
 8002bfc:	40021000 	.word	0x40021000
 8002c00:	48000400 	.word	0x48000400

08002c04 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002c04:	b580      	push	{r7, lr}
 8002c06:	b08a      	sub	sp, #40	; 0x28
 8002c08:	af00      	add	r7, sp, #0
 8002c0a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c0c:	f107 0314 	add.w	r3, r7, #20
 8002c10:	2200      	movs	r2, #0
 8002c12:	601a      	str	r2, [r3, #0]
 8002c14:	605a      	str	r2, [r3, #4]
 8002c16:	609a      	str	r2, [r3, #8]
 8002c18:	60da      	str	r2, [r3, #12]
 8002c1a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	4a20      	ldr	r2, [pc, #128]	; (8002ca4 <HAL_TIM_MspPostInit+0xa0>)
 8002c22:	4293      	cmp	r3, r2
 8002c24:	d139      	bne.n	8002c9a <HAL_TIM_MspPostInit+0x96>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002c26:	4b20      	ldr	r3, [pc, #128]	; (8002ca8 <HAL_TIM_MspPostInit+0xa4>)
 8002c28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c2a:	4a1f      	ldr	r2, [pc, #124]	; (8002ca8 <HAL_TIM_MspPostInit+0xa4>)
 8002c2c:	f043 0301 	orr.w	r3, r3, #1
 8002c30:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002c32:	4b1d      	ldr	r3, [pc, #116]	; (8002ca8 <HAL_TIM_MspPostInit+0xa4>)
 8002c34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c36:	f003 0301 	and.w	r3, r3, #1
 8002c3a:	613b      	str	r3, [r7, #16]
 8002c3c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002c3e:	4b1a      	ldr	r3, [pc, #104]	; (8002ca8 <HAL_TIM_MspPostInit+0xa4>)
 8002c40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c42:	4a19      	ldr	r2, [pc, #100]	; (8002ca8 <HAL_TIM_MspPostInit+0xa4>)
 8002c44:	f043 0302 	orr.w	r3, r3, #2
 8002c48:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002c4a:	4b17      	ldr	r3, [pc, #92]	; (8002ca8 <HAL_TIM_MspPostInit+0xa4>)
 8002c4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c4e:	f003 0302 	and.w	r3, r3, #2
 8002c52:	60fb      	str	r3, [r7, #12]
 8002c54:	68fb      	ldr	r3, [r7, #12]
    PB1     ------> TIM1_CH3N
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 8002c56:	f44f 63f0 	mov.w	r3, #1920	; 0x780
 8002c5a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c5c:	2302      	movs	r3, #2
 8002c5e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c60:	2300      	movs	r3, #0
 8002c62:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c64:	2300      	movs	r3, #0
 8002c66:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8002c68:	2306      	movs	r3, #6
 8002c6a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c6c:	f107 0314 	add.w	r3, r7, #20
 8002c70:	4619      	mov	r1, r3
 8002c72:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002c76:	f003 fc31 	bl	80064dc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002c7a:	2303      	movs	r3, #3
 8002c7c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c7e:	2302      	movs	r3, #2
 8002c80:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c82:	2300      	movs	r3, #0
 8002c84:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c86:	2300      	movs	r3, #0
 8002c88:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8002c8a:	2306      	movs	r3, #6
 8002c8c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002c8e:	f107 0314 	add.w	r3, r7, #20
 8002c92:	4619      	mov	r1, r3
 8002c94:	4805      	ldr	r0, [pc, #20]	; (8002cac <HAL_TIM_MspPostInit+0xa8>)
 8002c96:	f003 fc21 	bl	80064dc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8002c9a:	bf00      	nop
 8002c9c:	3728      	adds	r7, #40	; 0x28
 8002c9e:	46bd      	mov	sp, r7
 8002ca0:	bd80      	pop	{r7, pc}
 8002ca2:	bf00      	nop
 8002ca4:	40012c00 	.word	0x40012c00
 8002ca8:	40021000 	.word	0x40021000
 8002cac:	48000400 	.word	0x48000400

08002cb0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002cb0:	b580      	push	{r7, lr}
 8002cb2:	b09a      	sub	sp, #104	; 0x68
 8002cb4:	af00      	add	r7, sp, #0
 8002cb6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002cb8:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002cbc:	2200      	movs	r2, #0
 8002cbe:	601a      	str	r2, [r3, #0]
 8002cc0:	605a      	str	r2, [r3, #4]
 8002cc2:	609a      	str	r2, [r3, #8]
 8002cc4:	60da      	str	r2, [r3, #12]
 8002cc6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002cc8:	f107 0310 	add.w	r3, r7, #16
 8002ccc:	2244      	movs	r2, #68	; 0x44
 8002cce:	2100      	movs	r1, #0
 8002cd0:	4618      	mov	r0, r3
 8002cd2:	f008 fd0f 	bl	800b6f4 <memset>
  if(huart->Instance==USART1)
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	4a22      	ldr	r2, [pc, #136]	; (8002d64 <HAL_UART_MspInit+0xb4>)
 8002cdc:	4293      	cmp	r3, r2
 8002cde:	d13d      	bne.n	8002d5c <HAL_UART_MspInit+0xac>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002ce0:	2301      	movs	r3, #1
 8002ce2:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8002ce4:	2300      	movs	r3, #0
 8002ce6:	617b      	str	r3, [r7, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002ce8:	f107 0310 	add.w	r3, r7, #16
 8002cec:	4618      	mov	r0, r3
 8002cee:	f004 fb9b 	bl	8007428 <HAL_RCCEx_PeriphCLKConfig>
 8002cf2:	4603      	mov	r3, r0
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d001      	beq.n	8002cfc <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8002cf8:	f7ff fcaa 	bl	8002650 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002cfc:	4b1a      	ldr	r3, [pc, #104]	; (8002d68 <HAL_UART_MspInit+0xb8>)
 8002cfe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002d00:	4a19      	ldr	r2, [pc, #100]	; (8002d68 <HAL_UART_MspInit+0xb8>)
 8002d02:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002d06:	6613      	str	r3, [r2, #96]	; 0x60
 8002d08:	4b17      	ldr	r3, [pc, #92]	; (8002d68 <HAL_UART_MspInit+0xb8>)
 8002d0a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002d0c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002d10:	60fb      	str	r3, [r7, #12]
 8002d12:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002d14:	4b14      	ldr	r3, [pc, #80]	; (8002d68 <HAL_UART_MspInit+0xb8>)
 8002d16:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d18:	4a13      	ldr	r2, [pc, #76]	; (8002d68 <HAL_UART_MspInit+0xb8>)
 8002d1a:	f043 0304 	orr.w	r3, r3, #4
 8002d1e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002d20:	4b11      	ldr	r3, [pc, #68]	; (8002d68 <HAL_UART_MspInit+0xb8>)
 8002d22:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d24:	f003 0304 	and.w	r3, r3, #4
 8002d28:	60bb      	str	r3, [r7, #8]
 8002d2a:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PC4     ------> USART1_TX
    PC5     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8002d2c:	2330      	movs	r3, #48	; 0x30
 8002d2e:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d30:	2302      	movs	r3, #2
 8002d32:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d34:	2300      	movs	r3, #0
 8002d36:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d38:	2300      	movs	r3, #0
 8002d3a:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002d3c:	2307      	movs	r3, #7
 8002d3e:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002d40:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002d44:	4619      	mov	r1, r3
 8002d46:	4809      	ldr	r0, [pc, #36]	; (8002d6c <HAL_UART_MspInit+0xbc>)
 8002d48:	f003 fbc8 	bl	80064dc <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002d4c:	2200      	movs	r2, #0
 8002d4e:	2100      	movs	r1, #0
 8002d50:	2025      	movs	r0, #37	; 0x25
 8002d52:	f002 fee6 	bl	8005b22 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002d56:	2025      	movs	r0, #37	; 0x25
 8002d58:	f002 fefd 	bl	8005b56 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8002d5c:	bf00      	nop
 8002d5e:	3768      	adds	r7, #104	; 0x68
 8002d60:	46bd      	mov	sp, r7
 8002d62:	bd80      	pop	{r7, pc}
 8002d64:	40013800 	.word	0x40013800
 8002d68:	40021000 	.word	0x40021000
 8002d6c:	48000800 	.word	0x48000800

08002d70 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002d70:	b480      	push	{r7}
 8002d72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002d74:	e7fe      	b.n	8002d74 <NMI_Handler+0x4>

08002d76 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002d76:	b480      	push	{r7}
 8002d78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002d7a:	e7fe      	b.n	8002d7a <HardFault_Handler+0x4>

08002d7c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002d7c:	b480      	push	{r7}
 8002d7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002d80:	e7fe      	b.n	8002d80 <MemManage_Handler+0x4>

08002d82 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002d82:	b480      	push	{r7}
 8002d84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002d86:	e7fe      	b.n	8002d86 <BusFault_Handler+0x4>

08002d88 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002d88:	b480      	push	{r7}
 8002d8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002d8c:	e7fe      	b.n	8002d8c <UsageFault_Handler+0x4>

08002d8e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002d8e:	b480      	push	{r7}
 8002d90:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002d92:	bf00      	nop
 8002d94:	46bd      	mov	sp, r7
 8002d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d9a:	4770      	bx	lr

08002d9c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002d9c:	b480      	push	{r7}
 8002d9e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002da0:	bf00      	nop
 8002da2:	46bd      	mov	sp, r7
 8002da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da8:	4770      	bx	lr

08002daa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002daa:	b480      	push	{r7}
 8002dac:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002dae:	bf00      	nop
 8002db0:	46bd      	mov	sp, r7
 8002db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db6:	4770      	bx	lr

08002db8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002db8:	b580      	push	{r7, lr}
 8002dba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	static int16_t start=2000, start_speed, count_10ms, poz_x, poz_pop, poz_pop_cal,licznik_10ms, licznik_100ms;
	uint8_t loop_time;

	start_speed++;
 8002dbc:	4b68      	ldr	r3, [pc, #416]	; (8002f60 <SysTick_Handler+0x1a8>)
 8002dbe:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002dc2:	b29b      	uxth	r3, r3
 8002dc4:	3301      	adds	r3, #1
 8002dc6:	b29b      	uxth	r3, r3
 8002dc8:	b21a      	sxth	r2, r3
 8002dca:	4b65      	ldr	r3, [pc, #404]	; (8002f60 <SysTick_Handler+0x1a8>)
 8002dcc:	801a      	strh	r2, [r3, #0]

	count++;
 8002dce:	4b65      	ldr	r3, [pc, #404]	; (8002f64 <SysTick_Handler+0x1ac>)
 8002dd0:	881b      	ldrh	r3, [r3, #0]
 8002dd2:	3301      	adds	r3, #1
 8002dd4:	b29a      	uxth	r2, r3
 8002dd6:	4b63      	ldr	r3, [pc, #396]	; (8002f64 <SysTick_Handler+0x1ac>)
 8002dd8:	801a      	strh	r2, [r3, #0]
	count_10ms++;
 8002dda:	4b63      	ldr	r3, [pc, #396]	; (8002f68 <SysTick_Handler+0x1b0>)
 8002ddc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002de0:	b29b      	uxth	r3, r3
 8002de2:	3301      	adds	r3, #1
 8002de4:	b29b      	uxth	r3, r3
 8002de6:	b21a      	sxth	r2, r3
 8002de8:	4b5f      	ldr	r3, [pc, #380]	; (8002f68 <SysTick_Handler+0x1b0>)
 8002dea:	801a      	strh	r2, [r3, #0]




		if(count == PI_SPEED_TIME)
 8002dec:	4b5d      	ldr	r3, [pc, #372]	; (8002f64 <SysTick_Handler+0x1ac>)
 8002dee:	881b      	ldrh	r3, [r3, #0]
 8002df0:	2b05      	cmp	r3, #5
 8002df2:	f040 8154 	bne.w	800309e <SysTick_Handler+0x2e6>
		{
			if(tryb_speed_m==1)
 8002df6:	4b5d      	ldr	r3, [pc, #372]	; (8002f6c <SysTick_Handler+0x1b4>)
 8002df8:	781b      	ldrb	r3, [r3, #0]
 8002dfa:	b2db      	uxtb	r3, r3
 8002dfc:	2b01      	cmp	r3, #1
 8002dfe:	f040 814b 	bne.w	8003098 <SysTick_Handler+0x2e0>
			{
				pozycja_x = pozycja_walu;
 8002e02:	4b5b      	ldr	r3, [pc, #364]	; (8002f70 <SysTick_Handler+0x1b8>)
 8002e04:	881b      	ldrh	r3, [r3, #0]
 8002e06:	b29b      	uxth	r3, r3
 8002e08:	b21a      	sxth	r2, r3
 8002e0a:	4b5a      	ldr	r3, [pc, #360]	; (8002f74 <SysTick_Handler+0x1bc>)
 8002e0c:	801a      	strh	r2, [r3, #0]

				if(kierunek2==0&&(pozycja_poprz-pozycja_x>10||pozycja_poprz-pozycja_x<-10))
 8002e0e:	4b5a      	ldr	r3, [pc, #360]	; (8002f78 <SysTick_Handler+0x1c0>)
 8002e10:	881b      	ldrh	r3, [r3, #0]
 8002e12:	b29b      	uxth	r3, r3
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d165      	bne.n	8002ee4 <SysTick_Handler+0x12c>
 8002e18:	4b58      	ldr	r3, [pc, #352]	; (8002f7c <SysTick_Handler+0x1c4>)
 8002e1a:	881b      	ldrh	r3, [r3, #0]
 8002e1c:	b21b      	sxth	r3, r3
 8002e1e:	461a      	mov	r2, r3
 8002e20:	4b54      	ldr	r3, [pc, #336]	; (8002f74 <SysTick_Handler+0x1bc>)
 8002e22:	881b      	ldrh	r3, [r3, #0]
 8002e24:	b21b      	sxth	r3, r3
 8002e26:	1ad3      	subs	r3, r2, r3
 8002e28:	2b0a      	cmp	r3, #10
 8002e2a:	dc0a      	bgt.n	8002e42 <SysTick_Handler+0x8a>
 8002e2c:	4b53      	ldr	r3, [pc, #332]	; (8002f7c <SysTick_Handler+0x1c4>)
 8002e2e:	881b      	ldrh	r3, [r3, #0]
 8002e30:	b21b      	sxth	r3, r3
 8002e32:	461a      	mov	r2, r3
 8002e34:	4b4f      	ldr	r3, [pc, #316]	; (8002f74 <SysTick_Handler+0x1bc>)
 8002e36:	881b      	ldrh	r3, [r3, #0]
 8002e38:	b21b      	sxth	r3, r3
 8002e3a:	1ad3      	subs	r3, r2, r3
 8002e3c:	f113 0f0a 	cmn.w	r3, #10
 8002e40:	da50      	bge.n	8002ee4 <SysTick_Handler+0x12c>
				{
					if(pozycja_x>pozycja_poprz)
 8002e42:	4b4c      	ldr	r3, [pc, #304]	; (8002f74 <SysTick_Handler+0x1bc>)
 8002e44:	881b      	ldrh	r3, [r3, #0]
 8002e46:	b21a      	sxth	r2, r3
 8002e48:	4b4c      	ldr	r3, [pc, #304]	; (8002f7c <SysTick_Handler+0x1c4>)
 8002e4a:	881b      	ldrh	r3, [r3, #0]
 8002e4c:	b21b      	sxth	r3, r3
 8002e4e:	429a      	cmp	r2, r3
 8002e50:	dd17      	ble.n	8002e82 <SysTick_Handler+0xca>
					{
						rpm_speed = (pozycja_x-pozycja_poprz)*SPEED_SCALE; //0.72
 8002e52:	4b48      	ldr	r3, [pc, #288]	; (8002f74 <SysTick_Handler+0x1bc>)
 8002e54:	881b      	ldrh	r3, [r3, #0]
 8002e56:	b21b      	sxth	r3, r3
 8002e58:	461a      	mov	r2, r3
 8002e5a:	4b48      	ldr	r3, [pc, #288]	; (8002f7c <SysTick_Handler+0x1c4>)
 8002e5c:	881b      	ldrh	r3, [r3, #0]
 8002e5e:	b21b      	sxth	r3, r3
 8002e60:	1ad3      	subs	r3, r2, r3
 8002e62:	ee07 3a90 	vmov	s15, r3
 8002e66:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002e6a:	ed9f 7a45 	vldr	s14, [pc, #276]	; 8002f80 <SysTick_Handler+0x1c8>
 8002e6e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002e72:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002e76:	ee17 3a90 	vmov	r3, s15
 8002e7a:	b21a      	sxth	r2, r3
 8002e7c:	4b41      	ldr	r3, [pc, #260]	; (8002f84 <SysTick_Handler+0x1cc>)
 8002e7e:	801a      	strh	r2, [r3, #0]
 8002e80:	e020      	b.n	8002ec4 <SysTick_Handler+0x10c>
					}
					else if(pozycja_x<pozycja_poprz)
 8002e82:	4b3c      	ldr	r3, [pc, #240]	; (8002f74 <SysTick_Handler+0x1bc>)
 8002e84:	881b      	ldrh	r3, [r3, #0]
 8002e86:	b21a      	sxth	r2, r3
 8002e88:	4b3c      	ldr	r3, [pc, #240]	; (8002f7c <SysTick_Handler+0x1c4>)
 8002e8a:	881b      	ldrh	r3, [r3, #0]
 8002e8c:	b21b      	sxth	r3, r3
 8002e8e:	429a      	cmp	r2, r3
 8002e90:	da18      	bge.n	8002ec4 <SysTick_Handler+0x10c>
					{
						rpm_speed = ((16383-pozycja_poprz)+pozycja_x)*SPEED_SCALE;
 8002e92:	4b3a      	ldr	r3, [pc, #232]	; (8002f7c <SysTick_Handler+0x1c4>)
 8002e94:	881b      	ldrh	r3, [r3, #0]
 8002e96:	b21b      	sxth	r3, r3
 8002e98:	f5c3 537f 	rsb	r3, r3, #16320	; 0x3fc0
 8002e9c:	333f      	adds	r3, #63	; 0x3f
 8002e9e:	4a35      	ldr	r2, [pc, #212]	; (8002f74 <SysTick_Handler+0x1bc>)
 8002ea0:	8812      	ldrh	r2, [r2, #0]
 8002ea2:	b212      	sxth	r2, r2
 8002ea4:	4413      	add	r3, r2
 8002ea6:	ee07 3a90 	vmov	s15, r3
 8002eaa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002eae:	ed9f 7a34 	vldr	s14, [pc, #208]	; 8002f80 <SysTick_Handler+0x1c8>
 8002eb2:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002eb6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002eba:	ee17 3a90 	vmov	r3, s15
 8002ebe:	b21a      	sxth	r2, r3
 8002ec0:	4b30      	ldr	r3, [pc, #192]	; (8002f84 <SysTick_Handler+0x1cc>)
 8002ec2:	801a      	strh	r2, [r3, #0]
					}
					 if(pozycja_x==pozycja_poprz){obroty_pom=0;rpm_speed=0;}
 8002ec4:	4b2b      	ldr	r3, [pc, #172]	; (8002f74 <SysTick_Handler+0x1bc>)
 8002ec6:	881b      	ldrh	r3, [r3, #0]
 8002ec8:	b21a      	sxth	r2, r3
 8002eca:	4b2c      	ldr	r3, [pc, #176]	; (8002f7c <SysTick_Handler+0x1c4>)
 8002ecc:	881b      	ldrh	r3, [r3, #0]
 8002ece:	b21b      	sxth	r3, r3
 8002ed0:	429a      	cmp	r2, r3
 8002ed2:	f040 8088 	bne.w	8002fe6 <SysTick_Handler+0x22e>
 8002ed6:	4b2c      	ldr	r3, [pc, #176]	; (8002f88 <SysTick_Handler+0x1d0>)
 8002ed8:	2200      	movs	r2, #0
 8002eda:	801a      	strh	r2, [r3, #0]
 8002edc:	4b29      	ldr	r3, [pc, #164]	; (8002f84 <SysTick_Handler+0x1cc>)
 8002ede:	2200      	movs	r2, #0
 8002ee0:	801a      	strh	r2, [r3, #0]
 8002ee2:	e080      	b.n	8002fe6 <SysTick_Handler+0x22e>
				}

				else if(kierunek2==16&&(pozycja_poprz-pozycja_x>10||pozycja_poprz-pozycja_x<-10))
 8002ee4:	4b24      	ldr	r3, [pc, #144]	; (8002f78 <SysTick_Handler+0x1c0>)
 8002ee6:	881b      	ldrh	r3, [r3, #0]
 8002ee8:	b29b      	uxth	r3, r3
 8002eea:	2b10      	cmp	r3, #16
 8002eec:	d17b      	bne.n	8002fe6 <SysTick_Handler+0x22e>
 8002eee:	4b23      	ldr	r3, [pc, #140]	; (8002f7c <SysTick_Handler+0x1c4>)
 8002ef0:	881b      	ldrh	r3, [r3, #0]
 8002ef2:	b21b      	sxth	r3, r3
 8002ef4:	461a      	mov	r2, r3
 8002ef6:	4b1f      	ldr	r3, [pc, #124]	; (8002f74 <SysTick_Handler+0x1bc>)
 8002ef8:	881b      	ldrh	r3, [r3, #0]
 8002efa:	b21b      	sxth	r3, r3
 8002efc:	1ad3      	subs	r3, r2, r3
 8002efe:	2b0a      	cmp	r3, #10
 8002f00:	dc0a      	bgt.n	8002f18 <SysTick_Handler+0x160>
 8002f02:	4b1e      	ldr	r3, [pc, #120]	; (8002f7c <SysTick_Handler+0x1c4>)
 8002f04:	881b      	ldrh	r3, [r3, #0]
 8002f06:	b21b      	sxth	r3, r3
 8002f08:	461a      	mov	r2, r3
 8002f0a:	4b1a      	ldr	r3, [pc, #104]	; (8002f74 <SysTick_Handler+0x1bc>)
 8002f0c:	881b      	ldrh	r3, [r3, #0]
 8002f0e:	b21b      	sxth	r3, r3
 8002f10:	1ad3      	subs	r3, r2, r3
 8002f12:	f113 0f0a 	cmn.w	r3, #10
 8002f16:	da66      	bge.n	8002fe6 <SysTick_Handler+0x22e>
				{
					if(pozycja_x>pozycja_poprz)
 8002f18:	4b16      	ldr	r3, [pc, #88]	; (8002f74 <SysTick_Handler+0x1bc>)
 8002f1a:	881b      	ldrh	r3, [r3, #0]
 8002f1c:	b21a      	sxth	r2, r3
 8002f1e:	4b17      	ldr	r3, [pc, #92]	; (8002f7c <SysTick_Handler+0x1c4>)
 8002f20:	881b      	ldrh	r3, [r3, #0]
 8002f22:	b21b      	sxth	r3, r3
 8002f24:	429a      	cmp	r2, r3
 8002f26:	dd31      	ble.n	8002f8c <SysTick_Handler+0x1d4>
					{
						rpm_speed = -((16383-pozycja_x)+pozycja_poprz)*SPEED_SCALE;
 8002f28:	4b12      	ldr	r3, [pc, #72]	; (8002f74 <SysTick_Handler+0x1bc>)
 8002f2a:	881b      	ldrh	r3, [r3, #0]
 8002f2c:	b21b      	sxth	r3, r3
 8002f2e:	f5c3 537f 	rsb	r3, r3, #16320	; 0x3fc0
 8002f32:	333f      	adds	r3, #63	; 0x3f
 8002f34:	4a11      	ldr	r2, [pc, #68]	; (8002f7c <SysTick_Handler+0x1c4>)
 8002f36:	8812      	ldrh	r2, [r2, #0]
 8002f38:	b212      	sxth	r2, r2
 8002f3a:	4413      	add	r3, r2
 8002f3c:	425b      	negs	r3, r3
 8002f3e:	ee07 3a90 	vmov	s15, r3
 8002f42:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002f46:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 8002f80 <SysTick_Handler+0x1c8>
 8002f4a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002f4e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002f52:	ee17 3a90 	vmov	r3, s15
 8002f56:	b21a      	sxth	r2, r3
 8002f58:	4b0a      	ldr	r3, [pc, #40]	; (8002f84 <SysTick_Handler+0x1cc>)
 8002f5a:	801a      	strh	r2, [r3, #0]
 8002f5c:	e035      	b.n	8002fca <SysTick_Handler+0x212>
 8002f5e:	bf00      	nop
 8002f60:	2000050c 	.word	0x2000050c
 8002f64:	20000046 	.word	0x20000046
 8002f68:	2000050e 	.word	0x2000050e
 8002f6c:	20000010 	.word	0x20000010
 8002f70:	20000048 	.word	0x20000048
 8002f74:	20000454 	.word	0x20000454
 8002f78:	2000045c 	.word	0x2000045c
 8002f7c:	20000452 	.word	0x20000452
 8002f80:	3f3851ec 	.word	0x3f3851ec
 8002f84:	2000007c 	.word	0x2000007c
 8002f88:	2000004c 	.word	0x2000004c

					}
					else if(pozycja_x<pozycja_poprz)
 8002f8c:	4b62      	ldr	r3, [pc, #392]	; (8003118 <SysTick_Handler+0x360>)
 8002f8e:	881b      	ldrh	r3, [r3, #0]
 8002f90:	b21a      	sxth	r2, r3
 8002f92:	4b62      	ldr	r3, [pc, #392]	; (800311c <SysTick_Handler+0x364>)
 8002f94:	881b      	ldrh	r3, [r3, #0]
 8002f96:	b21b      	sxth	r3, r3
 8002f98:	429a      	cmp	r2, r3
 8002f9a:	da16      	bge.n	8002fca <SysTick_Handler+0x212>
					{
						rpm_speed =-(pozycja_poprz-pozycja_x)*SPEED_SCALE;
 8002f9c:	4b5e      	ldr	r3, [pc, #376]	; (8003118 <SysTick_Handler+0x360>)
 8002f9e:	881b      	ldrh	r3, [r3, #0]
 8002fa0:	b21b      	sxth	r3, r3
 8002fa2:	461a      	mov	r2, r3
 8002fa4:	4b5d      	ldr	r3, [pc, #372]	; (800311c <SysTick_Handler+0x364>)
 8002fa6:	881b      	ldrh	r3, [r3, #0]
 8002fa8:	b21b      	sxth	r3, r3
 8002faa:	1ad3      	subs	r3, r2, r3
 8002fac:	ee07 3a90 	vmov	s15, r3
 8002fb0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002fb4:	ed9f 7a5a 	vldr	s14, [pc, #360]	; 8003120 <SysTick_Handler+0x368>
 8002fb8:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002fbc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002fc0:	ee17 3a90 	vmov	r3, s15
 8002fc4:	b21a      	sxth	r2, r3
 8002fc6:	4b57      	ldr	r3, [pc, #348]	; (8003124 <SysTick_Handler+0x36c>)
 8002fc8:	801a      	strh	r2, [r3, #0]
					}
					 if(pozycja_x==pozycja_poprz){obroty_pom=0;rpm_speed=0;}
 8002fca:	4b53      	ldr	r3, [pc, #332]	; (8003118 <SysTick_Handler+0x360>)
 8002fcc:	881b      	ldrh	r3, [r3, #0]
 8002fce:	b21a      	sxth	r2, r3
 8002fd0:	4b52      	ldr	r3, [pc, #328]	; (800311c <SysTick_Handler+0x364>)
 8002fd2:	881b      	ldrh	r3, [r3, #0]
 8002fd4:	b21b      	sxth	r3, r3
 8002fd6:	429a      	cmp	r2, r3
 8002fd8:	d105      	bne.n	8002fe6 <SysTick_Handler+0x22e>
 8002fda:	4b53      	ldr	r3, [pc, #332]	; (8003128 <SysTick_Handler+0x370>)
 8002fdc:	2200      	movs	r2, #0
 8002fde:	801a      	strh	r2, [r3, #0]
 8002fe0:	4b50      	ldr	r3, [pc, #320]	; (8003124 <SysTick_Handler+0x36c>)
 8002fe2:	2200      	movs	r2, #0
 8002fe4:	801a      	strh	r2, [r3, #0]
					}

				//delta_poz=Pozycja(pozycja_walu,pozycja_poprz, &calka_pozycja, kierunek);
				pozycja_poprz=pozycja_x;
 8002fe6:	4b4c      	ldr	r3, [pc, #304]	; (8003118 <SysTick_Handler+0x360>)
 8002fe8:	881b      	ldrh	r3, [r3, #0]
 8002fea:	b21a      	sxth	r2, r3
 8002fec:	4b4b      	ldr	r3, [pc, #300]	; (800311c <SysTick_Handler+0x364>)
 8002fee:	801a      	strh	r2, [r3, #0]
				poz_x=pozycja_walu;
 8002ff0:	4b4e      	ldr	r3, [pc, #312]	; (800312c <SysTick_Handler+0x374>)
 8002ff2:	881b      	ldrh	r3, [r3, #0]
 8002ff4:	b29b      	uxth	r3, r3
 8002ff6:	b21a      	sxth	r2, r3
 8002ff8:	4b4d      	ldr	r3, [pc, #308]	; (8003130 <SysTick_Handler+0x378>)
 8002ffa:	801a      	strh	r2, [r3, #0]
				delta_poz=Pozycja(poz_x,poz_pop, &calka_pozycja, kierunek);
 8002ffc:	4b4c      	ldr	r3, [pc, #304]	; (8003130 <SysTick_Handler+0x378>)
 8002ffe:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003002:	b298      	uxth	r0, r3
 8003004:	4b4b      	ldr	r3, [pc, #300]	; (8003134 <SysTick_Handler+0x37c>)
 8003006:	f9b3 3000 	ldrsh.w	r3, [r3]
 800300a:	b299      	uxth	r1, r3
 800300c:	4b4a      	ldr	r3, [pc, #296]	; (8003138 <SysTick_Handler+0x380>)
 800300e:	881b      	ldrh	r3, [r3, #0]
 8003010:	b29b      	uxth	r3, r3
 8003012:	4a4a      	ldr	r2, [pc, #296]	; (800313c <SysTick_Handler+0x384>)
 8003014:	f7fd ff8e 	bl	8000f34 <Pozycja>
 8003018:	4603      	mov	r3, r0
 800301a:	461a      	mov	r2, r3
 800301c:	4b48      	ldr	r3, [pc, #288]	; (8003140 <SysTick_Handler+0x388>)
 800301e:	801a      	strh	r2, [r3, #0]
				if(Pos_reg == 1)
 8003020:	4b48      	ldr	r3, [pc, #288]	; (8003144 <SysTick_Handler+0x38c>)
 8003022:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003026:	2b01      	cmp	r3, #1
 8003028:	d107      	bne.n	800303a <SysTick_Handler+0x282>
				{
					PID_REG(&POSTION,calka_pozycja,pozycja_zad, &prad_q_zad);
 800302a:	4b44      	ldr	r3, [pc, #272]	; (800313c <SysTick_Handler+0x384>)
 800302c:	6819      	ldr	r1, [r3, #0]
 800302e:	4b46      	ldr	r3, [pc, #280]	; (8003148 <SysTick_Handler+0x390>)
 8003030:	681a      	ldr	r2, [r3, #0]
 8003032:	4b46      	ldr	r3, [pc, #280]	; (800314c <SysTick_Handler+0x394>)
 8003034:	4846      	ldr	r0, [pc, #280]	; (8003150 <SysTick_Handler+0x398>)
 8003036:	f7fe fac7 	bl	80015c8 <PID_REG>
				}

				poz_pop_cal=calka_pozycja;
 800303a:	4b40      	ldr	r3, [pc, #256]	; (800313c <SysTick_Handler+0x384>)
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	b21a      	sxth	r2, r3
 8003040:	4b44      	ldr	r3, [pc, #272]	; (8003154 <SysTick_Handler+0x39c>)
 8003042:	801a      	strh	r2, [r3, #0]
				poz_pop=poz_x;
 8003044:	4b3a      	ldr	r3, [pc, #232]	; (8003130 <SysTick_Handler+0x378>)
 8003046:	f9b3 2000 	ldrsh.w	r2, [r3]
 800304a:	4b3a      	ldr	r3, [pc, #232]	; (8003134 <SysTick_Handler+0x37c>)
 800304c:	801a      	strh	r2, [r3, #0]
				count_10ms=0;
 800304e:	4b42      	ldr	r3, [pc, #264]	; (8003158 <SysTick_Handler+0x3a0>)
 8003050:	2200      	movs	r2, #0
 8003052:	801a      	strh	r2, [r3, #0]

				if(rpm_speed>6000){rpm_speed=0;}
 8003054:	4b33      	ldr	r3, [pc, #204]	; (8003124 <SysTick_Handler+0x36c>)
 8003056:	881b      	ldrh	r3, [r3, #0]
 8003058:	b21b      	sxth	r3, r3
 800305a:	f241 7270 	movw	r2, #6000	; 0x1770
 800305e:	4293      	cmp	r3, r2
 8003060:	dd02      	ble.n	8003068 <SysTick_Handler+0x2b0>
 8003062:	4b30      	ldr	r3, [pc, #192]	; (8003124 <SysTick_Handler+0x36c>)
 8003064:	2200      	movs	r2, #0
 8003066:	801a      	strh	r2, [r3, #0]
				if(rpm_speed<-6000){rpm_speed=0;}
 8003068:	4b2e      	ldr	r3, [pc, #184]	; (8003124 <SysTick_Handler+0x36c>)
 800306a:	881b      	ldrh	r3, [r3, #0]
 800306c:	b21b      	sxth	r3, r3
 800306e:	4a3b      	ldr	r2, [pc, #236]	; (800315c <SysTick_Handler+0x3a4>)
 8003070:	4293      	cmp	r3, r2
 8003072:	da02      	bge.n	800307a <SysTick_Handler+0x2c2>
 8003074:	4b2b      	ldr	r3, [pc, #172]	; (8003124 <SysTick_Handler+0x36c>)
 8003076:	2200      	movs	r2, #0
 8003078:	801a      	strh	r2, [r3, #0]
				if(PI_regul_on == 1){
 800307a:	4b39      	ldr	r3, [pc, #228]	; (8003160 <SysTick_Handler+0x3a8>)
 800307c:	781b      	ldrb	r3, [r3, #0]
 800307e:	b2db      	uxtb	r3, r3
 8003080:	2b01      	cmp	r3, #1
 8003082:	d109      	bne.n	8003098 <SysTick_Handler+0x2e0>

					PI_REG(&speed, rpm_speed, rpm_speed_zad, &prad_q_zad);
 8003084:	4b27      	ldr	r3, [pc, #156]	; (8003124 <SysTick_Handler+0x36c>)
 8003086:	881b      	ldrh	r3, [r3, #0]
 8003088:	b219      	sxth	r1, r3
 800308a:	4b36      	ldr	r3, [pc, #216]	; (8003164 <SysTick_Handler+0x3ac>)
 800308c:	881b      	ldrh	r3, [r3, #0]
 800308e:	b21a      	sxth	r2, r3
 8003090:	4b2e      	ldr	r3, [pc, #184]	; (800314c <SysTick_Handler+0x394>)
 8003092:	4835      	ldr	r0, [pc, #212]	; (8003168 <SysTick_Handler+0x3b0>)
 8003094:	f7fd fd6c 	bl	8000b70 <PI_REG>
				}//PI_Regulator();} // DLA <20 RPM KP=500000; KI=200000

			}

			count=0;
 8003098:	4b34      	ldr	r3, [pc, #208]	; (800316c <SysTick_Handler+0x3b4>)
 800309a:	2200      	movs	r2, #0
 800309c:	801a      	strh	r2, [r3, #0]
		}

licznik_10ms++;
 800309e:	4b34      	ldr	r3, [pc, #208]	; (8003170 <SysTick_Handler+0x3b8>)
 80030a0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80030a4:	b29b      	uxth	r3, r3
 80030a6:	3301      	adds	r3, #1
 80030a8:	b29b      	uxth	r3, r3
 80030aa:	b21a      	sxth	r2, r3
 80030ac:	4b30      	ldr	r3, [pc, #192]	; (8003170 <SysTick_Handler+0x3b8>)
 80030ae:	801a      	strh	r2, [r3, #0]
licznik_100ms++;
 80030b0:	4b30      	ldr	r3, [pc, #192]	; (8003174 <SysTick_Handler+0x3bc>)
 80030b2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80030b6:	b29b      	uxth	r3, r3
 80030b8:	3301      	adds	r3, #1
 80030ba:	b29b      	uxth	r3, r3
 80030bc:	b21a      	sxth	r2, r3
 80030be:	4b2d      	ldr	r3, [pc, #180]	; (8003174 <SysTick_Handler+0x3bc>)
 80030c0:	801a      	strh	r2, [r3, #0]
if(licznik_10ms==10){czas_10ms=1;licznik_10ms=0;lpf_init(&Lpf, 0, 1.2);
 80030c2:	4b2b      	ldr	r3, [pc, #172]	; (8003170 <SysTick_Handler+0x3b8>)
 80030c4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80030c8:	2b0a      	cmp	r3, #10
 80030ca:	d116      	bne.n	80030fa <SysTick_Handler+0x342>
 80030cc:	4b2a      	ldr	r3, [pc, #168]	; (8003178 <SysTick_Handler+0x3c0>)
 80030ce:	2201      	movs	r2, #1
 80030d0:	801a      	strh	r2, [r3, #0]
 80030d2:	4b27      	ldr	r3, [pc, #156]	; (8003170 <SysTick_Handler+0x3b8>)
 80030d4:	2200      	movs	r2, #0
 80030d6:	801a      	strh	r2, [r3, #0]
 80030d8:	ed9f 0a28 	vldr	s0, [pc, #160]	; 800317c <SysTick_Handler+0x3c4>
 80030dc:	2100      	movs	r1, #0
 80030de:	4828      	ldr	r0, [pc, #160]	; (8003180 <SysTick_Handler+0x3c8>)
 80030e0:	f7fe fafe 	bl	80016e0 <lpf_init>
estimate_rpm = lpf_update(&Lpf, rpm_speed);}
 80030e4:	4b0f      	ldr	r3, [pc, #60]	; (8003124 <SysTick_Handler+0x36c>)
 80030e6:	881b      	ldrh	r3, [r3, #0]
 80030e8:	b21b      	sxth	r3, r3
 80030ea:	4619      	mov	r1, r3
 80030ec:	4824      	ldr	r0, [pc, #144]	; (8003180 <SysTick_Handler+0x3c8>)
 80030ee:	f7fe fb0e 	bl	800170e <lpf_update>
 80030f2:	4603      	mov	r3, r0
 80030f4:	461a      	mov	r2, r3
 80030f6:	4b23      	ldr	r3, [pc, #140]	; (8003184 <SysTick_Handler+0x3cc>)
 80030f8:	801a      	strh	r2, [r3, #0]
if(licznik_100ms==100){czas_100ms=1;licznik_100ms=0;}
 80030fa:	4b1e      	ldr	r3, [pc, #120]	; (8003174 <SysTick_Handler+0x3bc>)
 80030fc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003100:	2b64      	cmp	r3, #100	; 0x64
 8003102:	d105      	bne.n	8003110 <SysTick_Handler+0x358>
 8003104:	4b20      	ldr	r3, [pc, #128]	; (8003188 <SysTick_Handler+0x3d0>)
 8003106:	2201      	movs	r2, #1
 8003108:	801a      	strh	r2, [r3, #0]
 800310a:	4b1a      	ldr	r3, [pc, #104]	; (8003174 <SysTick_Handler+0x3bc>)
 800310c:	2200      	movs	r2, #0
 800310e:	801a      	strh	r2, [r3, #0]

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003110:	f000 f92e 	bl	8003370 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003114:	bf00      	nop
 8003116:	bd80      	pop	{r7, pc}
 8003118:	20000454 	.word	0x20000454
 800311c:	20000452 	.word	0x20000452
 8003120:	3f3851ec 	.word	0x3f3851ec
 8003124:	2000007c 	.word	0x2000007c
 8003128:	2000004c 	.word	0x2000004c
 800312c:	20000048 	.word	0x20000048
 8003130:	20000510 	.word	0x20000510
 8003134:	20000512 	.word	0x20000512
 8003138:	2000045a 	.word	0x2000045a
 800313c:	20000460 	.word	0x20000460
 8003140:	200004bc 	.word	0x200004bc
 8003144:	200004be 	.word	0x200004be
 8003148:	20000050 	.word	0x20000050
 800314c:	2000005c 	.word	0x2000005c
 8003150:	200004c4 	.word	0x200004c4
 8003154:	20000514 	.word	0x20000514
 8003158:	2000050e 	.word	0x2000050e
 800315c:	ffffe890 	.word	0xffffe890
 8003160:	20000044 	.word	0x20000044
 8003164:	20000002 	.word	0x20000002
 8003168:	200004e0 	.word	0x200004e0
 800316c:	20000046 	.word	0x20000046
 8003170:	20000516 	.word	0x20000516
 8003174:	20000518 	.word	0x20000518
 8003178:	20000464 	.word	0x20000464
 800317c:	3f99999a 	.word	0x3f99999a
 8003180:	20000508 	.word	0x20000508
 8003184:	200004c0 	.word	0x200004c0
 8003188:	20000466 	.word	0x20000466

0800318c <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupt.
  */
void ADC1_2_IRQHandler(void)
{
 800318c:	b580      	push	{r7, lr}
 800318e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8003190:	4803      	ldr	r0, [pc, #12]	; (80031a0 <ADC1_2_IRQHandler+0x14>)
 8003192:	f000 fce7 	bl	8003b64 <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc2);
 8003196:	4803      	ldr	r0, [pc, #12]	; (80031a4 <ADC1_2_IRQHandler+0x18>)
 8003198:	f000 fce4 	bl	8003b64 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 800319c:	bf00      	nop
 800319e:	bd80      	pop	{r7, pc}
 80031a0:	200000a8 	.word	0x200000a8
 80031a4:	20000114 	.word	0x20000114

080031a8 <TIM1_BRK_TIM15_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM15 global interrupt.
  */
void TIM1_BRK_TIM15_IRQHandler(void)
{
 80031a8:	b580      	push	{r7, lr}
 80031aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80031ac:	4802      	ldr	r0, [pc, #8]	; (80031b8 <TIM1_BRK_TIM15_IRQHandler+0x10>)
 80031ae:	f005 fd9b 	bl	8008ce8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 1 */
}
 80031b2:	bf00      	nop
 80031b4:	bd80      	pop	{r7, pc}
 80031b6:	bf00      	nop
 80031b8:	20000284 	.word	0x20000284

080031bc <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 80031bc:	b580      	push	{r7, lr}
 80031be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80031c0:	4802      	ldr	r0, [pc, #8]	; (80031cc <TIM1_UP_TIM16_IRQHandler+0x10>)
 80031c2:	f005 fd91 	bl	8008ce8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 80031c6:	bf00      	nop
 80031c8:	bd80      	pop	{r7, pc}
 80031ca:	bf00      	nop
 80031cc:	20000284 	.word	0x20000284

080031d0 <TIM1_TRG_COM_TIM17_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM17 global interrupt.
  */
void TIM1_TRG_COM_TIM17_IRQHandler(void)
{
 80031d0:	b580      	push	{r7, lr}
 80031d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80031d4:	4803      	ldr	r0, [pc, #12]	; (80031e4 <TIM1_TRG_COM_TIM17_IRQHandler+0x14>)
 80031d6:	f005 fd87 	bl	8008ce8 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim17);
 80031da:	4803      	ldr	r0, [pc, #12]	; (80031e8 <TIM1_TRG_COM_TIM17_IRQHandler+0x18>)
 80031dc:	f005 fd84 	bl	8008ce8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 1 */
}
 80031e0:	bf00      	nop
 80031e2:	bd80      	pop	{r7, pc}
 80031e4:	20000284 	.word	0x20000284
 80031e8:	20000368 	.word	0x20000368

080031ec <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 80031ec:	b580      	push	{r7, lr}
 80031ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80031f0:	4802      	ldr	r0, [pc, #8]	; (80031fc <TIM1_CC_IRQHandler+0x10>)
 80031f2:	f005 fd79 	bl	8008ce8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 80031f6:	bf00      	nop
 80031f8:	bd80      	pop	{r7, pc}
 80031fa:	bf00      	nop
 80031fc:	20000284 	.word	0x20000284

08003200 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8003200:	b580      	push	{r7, lr}
 8003202:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8003204:	4802      	ldr	r0, [pc, #8]	; (8003210 <TIM2_IRQHandler+0x10>)
 8003206:	f005 fd6f 	bl	8008ce8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800320a:	bf00      	nop
 800320c:	bd80      	pop	{r7, pc}
 800320e:	bf00      	nop
 8003210:	200002d0 	.word	0x200002d0

08003214 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8003214:	b580      	push	{r7, lr}
 8003216:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8003218:	4802      	ldr	r0, [pc, #8]	; (8003224 <USART1_IRQHandler+0x10>)
 800321a:	f007 f8e9 	bl	800a3f0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800321e:	bf00      	nop
 8003220:	bd80      	pop	{r7, pc}
 8003222:	bf00      	nop
 8003224:	200003b4 	.word	0x200003b4

08003228 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8003228:	b580      	push	{r7, lr}
 800322a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 800322c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8003230:	f003 faee 	bl	8006810 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8003234:	bf00      	nop
 8003236:	bd80      	pop	{r7, pc}

08003238 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC3 channel underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8003238:	b580      	push	{r7, lr}
 800323a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800323c:	4803      	ldr	r0, [pc, #12]	; (800324c <TIM6_DAC_IRQHandler+0x14>)
 800323e:	f005 fd53 	bl	8008ce8 <HAL_TIM_IRQHandler>
  HAL_DAC_IRQHandler(&hdac1);
 8003242:	4803      	ldr	r0, [pc, #12]	; (8003250 <TIM6_DAC_IRQHandler+0x18>)
 8003244:	f002 fcc3 	bl	8005bce <HAL_DAC_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8003248:	bf00      	nop
 800324a:	bd80      	pop	{r7, pc}
 800324c:	2000031c 	.word	0x2000031c
 8003250:	200001a8 	.word	0x200001a8

08003254 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8003254:	b480      	push	{r7}
 8003256:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8003258:	4b06      	ldr	r3, [pc, #24]	; (8003274 <SystemInit+0x20>)
 800325a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800325e:	4a05      	ldr	r2, [pc, #20]	; (8003274 <SystemInit+0x20>)
 8003260:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003264:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003268:	bf00      	nop
 800326a:	46bd      	mov	sp, r7
 800326c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003270:	4770      	bx	lr
 8003272:	bf00      	nop
 8003274:	e000ed00 	.word	0xe000ed00

08003278 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8003278:	480d      	ldr	r0, [pc, #52]	; (80032b0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800327a:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800327c:	480d      	ldr	r0, [pc, #52]	; (80032b4 <LoopForever+0x6>)
  ldr r1, =_edata
 800327e:	490e      	ldr	r1, [pc, #56]	; (80032b8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8003280:	4a0e      	ldr	r2, [pc, #56]	; (80032bc <LoopForever+0xe>)
  movs r3, #0
 8003282:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8003284:	e002      	b.n	800328c <LoopCopyDataInit>

08003286 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003286:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003288:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800328a:	3304      	adds	r3, #4

0800328c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800328c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800328e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003290:	d3f9      	bcc.n	8003286 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003292:	4a0b      	ldr	r2, [pc, #44]	; (80032c0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8003294:	4c0b      	ldr	r4, [pc, #44]	; (80032c4 <LoopForever+0x16>)
  movs r3, #0
 8003296:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003298:	e001      	b.n	800329e <LoopFillZerobss>

0800329a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800329a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800329c:	3204      	adds	r2, #4

0800329e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800329e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80032a0:	d3fb      	bcc.n	800329a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80032a2:	f7ff ffd7 	bl	8003254 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80032a6:	f008 fa2d 	bl	800b704 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80032aa:	f7fe fa55 	bl	8001758 <main>

080032ae <LoopForever>:

LoopForever:
    b LoopForever
 80032ae:	e7fe      	b.n	80032ae <LoopForever>
  ldr   r0, =_estack
 80032b0:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 80032b4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80032b8:	20000028 	.word	0x20000028
  ldr r2, =_sidata
 80032bc:	0800bdf4 	.word	0x0800bdf4
  ldr r2, =_sbss
 80032c0:	20000028 	.word	0x20000028
  ldr r4, =_ebss
 80032c4:	20000520 	.word	0x20000520

080032c8 <COMP1_2_3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80032c8:	e7fe      	b.n	80032c8 <COMP1_2_3_IRQHandler>

080032ca <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80032ca:	b580      	push	{r7, lr}
 80032cc:	b082      	sub	sp, #8
 80032ce:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80032d0:	2300      	movs	r3, #0
 80032d2:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80032d4:	2003      	movs	r0, #3
 80032d6:	f002 fc19 	bl	8005b0c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80032da:	2000      	movs	r0, #0
 80032dc:	f000 f80e 	bl	80032fc <HAL_InitTick>
 80032e0:	4603      	mov	r3, r0
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d002      	beq.n	80032ec <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80032e6:	2301      	movs	r3, #1
 80032e8:	71fb      	strb	r3, [r7, #7]
 80032ea:	e001      	b.n	80032f0 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80032ec:	f7ff f9b6 	bl	800265c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80032f0:	79fb      	ldrb	r3, [r7, #7]

}
 80032f2:	4618      	mov	r0, r3
 80032f4:	3708      	adds	r7, #8
 80032f6:	46bd      	mov	sp, r7
 80032f8:	bd80      	pop	{r7, pc}
	...

080032fc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80032fc:	b580      	push	{r7, lr}
 80032fe:	b084      	sub	sp, #16
 8003300:	af00      	add	r7, sp, #0
 8003302:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8003304:	2300      	movs	r3, #0
 8003306:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8003308:	4b16      	ldr	r3, [pc, #88]	; (8003364 <HAL_InitTick+0x68>)
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	2b00      	cmp	r3, #0
 800330e:	d022      	beq.n	8003356 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8003310:	4b15      	ldr	r3, [pc, #84]	; (8003368 <HAL_InitTick+0x6c>)
 8003312:	681a      	ldr	r2, [r3, #0]
 8003314:	4b13      	ldr	r3, [pc, #76]	; (8003364 <HAL_InitTick+0x68>)
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800331c:	fbb1 f3f3 	udiv	r3, r1, r3
 8003320:	fbb2 f3f3 	udiv	r3, r2, r3
 8003324:	4618      	mov	r0, r3
 8003326:	f002 fc24 	bl	8005b72 <HAL_SYSTICK_Config>
 800332a:	4603      	mov	r3, r0
 800332c:	2b00      	cmp	r3, #0
 800332e:	d10f      	bne.n	8003350 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	2b0f      	cmp	r3, #15
 8003334:	d809      	bhi.n	800334a <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003336:	2200      	movs	r2, #0
 8003338:	6879      	ldr	r1, [r7, #4]
 800333a:	f04f 30ff 	mov.w	r0, #4294967295
 800333e:	f002 fbf0 	bl	8005b22 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003342:	4a0a      	ldr	r2, [pc, #40]	; (800336c <HAL_InitTick+0x70>)
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	6013      	str	r3, [r2, #0]
 8003348:	e007      	b.n	800335a <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 800334a:	2301      	movs	r3, #1
 800334c:	73fb      	strb	r3, [r7, #15]
 800334e:	e004      	b.n	800335a <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8003350:	2301      	movs	r3, #1
 8003352:	73fb      	strb	r3, [r7, #15]
 8003354:	e001      	b.n	800335a <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8003356:	2301      	movs	r3, #1
 8003358:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800335a:	7bfb      	ldrb	r3, [r7, #15]
}
 800335c:	4618      	mov	r0, r3
 800335e:	3710      	adds	r7, #16
 8003360:	46bd      	mov	sp, r7
 8003362:	bd80      	pop	{r7, pc}
 8003364:	20000024 	.word	0x20000024
 8003368:	2000001c 	.word	0x2000001c
 800336c:	20000020 	.word	0x20000020

08003370 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003370:	b480      	push	{r7}
 8003372:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003374:	4b05      	ldr	r3, [pc, #20]	; (800338c <HAL_IncTick+0x1c>)
 8003376:	681a      	ldr	r2, [r3, #0]
 8003378:	4b05      	ldr	r3, [pc, #20]	; (8003390 <HAL_IncTick+0x20>)
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	4413      	add	r3, r2
 800337e:	4a03      	ldr	r2, [pc, #12]	; (800338c <HAL_IncTick+0x1c>)
 8003380:	6013      	str	r3, [r2, #0]
}
 8003382:	bf00      	nop
 8003384:	46bd      	mov	sp, r7
 8003386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800338a:	4770      	bx	lr
 800338c:	2000051c 	.word	0x2000051c
 8003390:	20000024 	.word	0x20000024

08003394 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003394:	b480      	push	{r7}
 8003396:	af00      	add	r7, sp, #0
  return uwTick;
 8003398:	4b03      	ldr	r3, [pc, #12]	; (80033a8 <HAL_GetTick+0x14>)
 800339a:	681b      	ldr	r3, [r3, #0]
}
 800339c:	4618      	mov	r0, r3
 800339e:	46bd      	mov	sp, r7
 80033a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a4:	4770      	bx	lr
 80033a6:	bf00      	nop
 80033a8:	2000051c 	.word	0x2000051c

080033ac <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80033ac:	b580      	push	{r7, lr}
 80033ae:	b084      	sub	sp, #16
 80033b0:	af00      	add	r7, sp, #0
 80033b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80033b4:	f7ff ffee 	bl	8003394 <HAL_GetTick>
 80033b8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033c4:	d004      	beq.n	80033d0 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 80033c6:	4b09      	ldr	r3, [pc, #36]	; (80033ec <HAL_Delay+0x40>)
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	68fa      	ldr	r2, [r7, #12]
 80033cc:	4413      	add	r3, r2
 80033ce:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80033d0:	bf00      	nop
 80033d2:	f7ff ffdf 	bl	8003394 <HAL_GetTick>
 80033d6:	4602      	mov	r2, r0
 80033d8:	68bb      	ldr	r3, [r7, #8]
 80033da:	1ad3      	subs	r3, r2, r3
 80033dc:	68fa      	ldr	r2, [r7, #12]
 80033de:	429a      	cmp	r2, r3
 80033e0:	d8f7      	bhi.n	80033d2 <HAL_Delay+0x26>
  {
  }
}
 80033e2:	bf00      	nop
 80033e4:	bf00      	nop
 80033e6:	3710      	adds	r7, #16
 80033e8:	46bd      	mov	sp, r7
 80033ea:	bd80      	pop	{r7, pc}
 80033ec:	20000024 	.word	0x20000024

080033f0 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80033f0:	b480      	push	{r7}
 80033f2:	b083      	sub	sp, #12
 80033f4:	af00      	add	r7, sp, #0
 80033f6:	6078      	str	r0, [r7, #4]
 80033f8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	689b      	ldr	r3, [r3, #8]
 80033fe:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8003402:	683b      	ldr	r3, [r7, #0]
 8003404:	431a      	orrs	r2, r3
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	609a      	str	r2, [r3, #8]
}
 800340a:	bf00      	nop
 800340c:	370c      	adds	r7, #12
 800340e:	46bd      	mov	sp, r7
 8003410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003414:	4770      	bx	lr

08003416 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8003416:	b480      	push	{r7}
 8003418:	b083      	sub	sp, #12
 800341a:	af00      	add	r7, sp, #0
 800341c:	6078      	str	r0, [r7, #4]
 800341e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	689b      	ldr	r3, [r3, #8]
 8003424:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8003428:	683b      	ldr	r3, [r7, #0]
 800342a:	431a      	orrs	r2, r3
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	609a      	str	r2, [r3, #8]
}
 8003430:	bf00      	nop
 8003432:	370c      	adds	r7, #12
 8003434:	46bd      	mov	sp, r7
 8003436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800343a:	4770      	bx	lr

0800343c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 800343c:	b480      	push	{r7}
 800343e:	b083      	sub	sp, #12
 8003440:	af00      	add	r7, sp, #0
 8003442:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	689b      	ldr	r3, [r3, #8]
 8003448:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 800344c:	4618      	mov	r0, r3
 800344e:	370c      	adds	r7, #12
 8003450:	46bd      	mov	sp, r7
 8003452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003456:	4770      	bx	lr

08003458 <LL_ADC_SetOffset>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8003458:	b480      	push	{r7}
 800345a:	b087      	sub	sp, #28
 800345c:	af00      	add	r7, sp, #0
 800345e:	60f8      	str	r0, [r7, #12]
 8003460:	60b9      	str	r1, [r7, #8]
 8003462:	607a      	str	r2, [r7, #4]
 8003464:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	3360      	adds	r3, #96	; 0x60
 800346a:	461a      	mov	r2, r3
 800346c:	68bb      	ldr	r3, [r7, #8]
 800346e:	009b      	lsls	r3, r3, #2
 8003470:	4413      	add	r3, r2
 8003472:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003474:	697b      	ldr	r3, [r7, #20]
 8003476:	681a      	ldr	r2, [r3, #0]
 8003478:	4b08      	ldr	r3, [pc, #32]	; (800349c <LL_ADC_SetOffset+0x44>)
 800347a:	4013      	ands	r3, r2
 800347c:	687a      	ldr	r2, [r7, #4]
 800347e:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8003482:	683a      	ldr	r2, [r7, #0]
 8003484:	430a      	orrs	r2, r1
 8003486:	4313      	orrs	r3, r2
 8003488:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800348c:	697b      	ldr	r3, [r7, #20]
 800348e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8003490:	bf00      	nop
 8003492:	371c      	adds	r7, #28
 8003494:	46bd      	mov	sp, r7
 8003496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800349a:	4770      	bx	lr
 800349c:	03fff000 	.word	0x03fff000

080034a0 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80034a0:	b480      	push	{r7}
 80034a2:	b085      	sub	sp, #20
 80034a4:	af00      	add	r7, sp, #0
 80034a6:	6078      	str	r0, [r7, #4]
 80034a8:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	3360      	adds	r3, #96	; 0x60
 80034ae:	461a      	mov	r2, r3
 80034b0:	683b      	ldr	r3, [r7, #0]
 80034b2:	009b      	lsls	r3, r3, #2
 80034b4:	4413      	add	r3, r2
 80034b6:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 80034c0:	4618      	mov	r0, r3
 80034c2:	3714      	adds	r7, #20
 80034c4:	46bd      	mov	sp, r7
 80034c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ca:	4770      	bx	lr

080034cc <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80034cc:	b480      	push	{r7}
 80034ce:	b087      	sub	sp, #28
 80034d0:	af00      	add	r7, sp, #0
 80034d2:	60f8      	str	r0, [r7, #12]
 80034d4:	60b9      	str	r1, [r7, #8]
 80034d6:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	3360      	adds	r3, #96	; 0x60
 80034dc:	461a      	mov	r2, r3
 80034de:	68bb      	ldr	r3, [r7, #8]
 80034e0:	009b      	lsls	r3, r3, #2
 80034e2:	4413      	add	r3, r2
 80034e4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80034e6:	697b      	ldr	r3, [r7, #20]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	431a      	orrs	r2, r3
 80034f2:	697b      	ldr	r3, [r7, #20]
 80034f4:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80034f6:	bf00      	nop
 80034f8:	371c      	adds	r7, #28
 80034fa:	46bd      	mov	sp, r7
 80034fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003500:	4770      	bx	lr

08003502 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8003502:	b480      	push	{r7}
 8003504:	b087      	sub	sp, #28
 8003506:	af00      	add	r7, sp, #0
 8003508:	60f8      	str	r0, [r7, #12]
 800350a:	60b9      	str	r1, [r7, #8]
 800350c:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	3360      	adds	r3, #96	; 0x60
 8003512:	461a      	mov	r2, r3
 8003514:	68bb      	ldr	r3, [r7, #8]
 8003516:	009b      	lsls	r3, r3, #2
 8003518:	4413      	add	r3, r2
 800351a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800351c:	697b      	ldr	r3, [r7, #20]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	431a      	orrs	r2, r3
 8003528:	697b      	ldr	r3, [r7, #20]
 800352a:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 800352c:	bf00      	nop
 800352e:	371c      	adds	r7, #28
 8003530:	46bd      	mov	sp, r7
 8003532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003536:	4770      	bx	lr

08003538 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8003538:	b480      	push	{r7}
 800353a:	b087      	sub	sp, #28
 800353c:	af00      	add	r7, sp, #0
 800353e:	60f8      	str	r0, [r7, #12]
 8003540:	60b9      	str	r1, [r7, #8]
 8003542:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	3360      	adds	r3, #96	; 0x60
 8003548:	461a      	mov	r2, r3
 800354a:	68bb      	ldr	r3, [r7, #8]
 800354c:	009b      	lsls	r3, r3, #2
 800354e:	4413      	add	r3, r2
 8003550:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003552:	697b      	ldr	r3, [r7, #20]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	431a      	orrs	r2, r3
 800355e:	697b      	ldr	r3, [r7, #20]
 8003560:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8003562:	bf00      	nop
 8003564:	371c      	adds	r7, #28
 8003566:	46bd      	mov	sp, r7
 8003568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800356c:	4770      	bx	lr

0800356e <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 800356e:	b480      	push	{r7}
 8003570:	b083      	sub	sp, #12
 8003572:	af00      	add	r7, sp, #0
 8003574:	6078      	str	r0, [r7, #4]
 8003576:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	695b      	ldr	r3, [r3, #20]
 800357c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003580:	683b      	ldr	r3, [r7, #0]
 8003582:	431a      	orrs	r2, r3
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	615a      	str	r2, [r3, #20]
}
 8003588:	bf00      	nop
 800358a:	370c      	adds	r7, #12
 800358c:	46bd      	mov	sp, r7
 800358e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003592:	4770      	bx	lr

08003594 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8003594:	b480      	push	{r7}
 8003596:	b083      	sub	sp, #12
 8003598:	af00      	add	r7, sp, #0
 800359a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	68db      	ldr	r3, [r3, #12]
 80035a0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d101      	bne.n	80035ac <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80035a8:	2301      	movs	r3, #1
 80035aa:	e000      	b.n	80035ae <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80035ac:	2300      	movs	r3, #0
}
 80035ae:	4618      	mov	r0, r3
 80035b0:	370c      	adds	r7, #12
 80035b2:	46bd      	mov	sp, r7
 80035b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035b8:	4770      	bx	lr

080035ba <LL_ADC_REG_SetSequencerRanks>:
  *         (8) On STM32G4, fast channel allows: 2.5 (sampling) + 12.5 (conversion) = 15 ADC clock cycles (fADC) to convert in 12-bit resolution.
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80035ba:	b480      	push	{r7}
 80035bc:	b087      	sub	sp, #28
 80035be:	af00      	add	r7, sp, #0
 80035c0:	60f8      	str	r0, [r7, #12]
 80035c2:	60b9      	str	r1, [r7, #8]
 80035c4:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	3330      	adds	r3, #48	; 0x30
 80035ca:	461a      	mov	r2, r3
 80035cc:	68bb      	ldr	r3, [r7, #8]
 80035ce:	0a1b      	lsrs	r3, r3, #8
 80035d0:	009b      	lsls	r3, r3, #2
 80035d2:	f003 030c 	and.w	r3, r3, #12
 80035d6:	4413      	add	r3, r2
 80035d8:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80035da:	697b      	ldr	r3, [r7, #20]
 80035dc:	681a      	ldr	r2, [r3, #0]
 80035de:	68bb      	ldr	r3, [r7, #8]
 80035e0:	f003 031f 	and.w	r3, r3, #31
 80035e4:	211f      	movs	r1, #31
 80035e6:	fa01 f303 	lsl.w	r3, r1, r3
 80035ea:	43db      	mvns	r3, r3
 80035ec:	401a      	ands	r2, r3
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	0e9b      	lsrs	r3, r3, #26
 80035f2:	f003 011f 	and.w	r1, r3, #31
 80035f6:	68bb      	ldr	r3, [r7, #8]
 80035f8:	f003 031f 	and.w	r3, r3, #31
 80035fc:	fa01 f303 	lsl.w	r3, r1, r3
 8003600:	431a      	orrs	r2, r3
 8003602:	697b      	ldr	r3, [r7, #20]
 8003604:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8003606:	bf00      	nop
 8003608:	371c      	adds	r7, #28
 800360a:	46bd      	mov	sp, r7
 800360c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003610:	4770      	bx	lr

08003612 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8003612:	b480      	push	{r7}
 8003614:	b083      	sub	sp, #12
 8003616:	af00      	add	r7, sp, #0
 8003618:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800361e:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 8003622:	2b00      	cmp	r3, #0
 8003624:	d101      	bne.n	800362a <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8003626:	2301      	movs	r3, #1
 8003628:	e000      	b.n	800362c <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 800362a:	2300      	movs	r3, #0
}
 800362c:	4618      	mov	r0, r3
 800362e:	370c      	adds	r7, #12
 8003630:	46bd      	mov	sp, r7
 8003632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003636:	4770      	bx	lr

08003638 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8003638:	b480      	push	{r7}
 800363a:	b087      	sub	sp, #28
 800363c:	af00      	add	r7, sp, #0
 800363e:	60f8      	str	r0, [r7, #12]
 8003640:	60b9      	str	r1, [r7, #8]
 8003642:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	3314      	adds	r3, #20
 8003648:	461a      	mov	r2, r3
 800364a:	68bb      	ldr	r3, [r7, #8]
 800364c:	0e5b      	lsrs	r3, r3, #25
 800364e:	009b      	lsls	r3, r3, #2
 8003650:	f003 0304 	and.w	r3, r3, #4
 8003654:	4413      	add	r3, r2
 8003656:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003658:	697b      	ldr	r3, [r7, #20]
 800365a:	681a      	ldr	r2, [r3, #0]
 800365c:	68bb      	ldr	r3, [r7, #8]
 800365e:	0d1b      	lsrs	r3, r3, #20
 8003660:	f003 031f 	and.w	r3, r3, #31
 8003664:	2107      	movs	r1, #7
 8003666:	fa01 f303 	lsl.w	r3, r1, r3
 800366a:	43db      	mvns	r3, r3
 800366c:	401a      	ands	r2, r3
 800366e:	68bb      	ldr	r3, [r7, #8]
 8003670:	0d1b      	lsrs	r3, r3, #20
 8003672:	f003 031f 	and.w	r3, r3, #31
 8003676:	6879      	ldr	r1, [r7, #4]
 8003678:	fa01 f303 	lsl.w	r3, r1, r3
 800367c:	431a      	orrs	r2, r3
 800367e:	697b      	ldr	r3, [r7, #20]
 8003680:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8003682:	bf00      	nop
 8003684:	371c      	adds	r7, #28
 8003686:	46bd      	mov	sp, r7
 8003688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800368c:	4770      	bx	lr
	...

08003690 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8003690:	b480      	push	{r7}
 8003692:	b085      	sub	sp, #20
 8003694:	af00      	add	r7, sp, #0
 8003696:	60f8      	str	r0, [r7, #12]
 8003698:	60b9      	str	r1, [r7, #8]
 800369a:	607a      	str	r2, [r7, #4]
  /* Bits for single or differential mode selection for each channel are set  */
  /* to 1 only when the differential mode is selected, and to 0 when the      */
  /* single mode is selected.                                                 */
  
  if (SingleDiff == LL_ADC_DIFFERENTIAL_ENDED)
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	4a0f      	ldr	r2, [pc, #60]	; (80036dc <LL_ADC_SetChannelSingleDiff+0x4c>)
 80036a0:	4293      	cmp	r3, r2
 80036a2:	d10a      	bne.n	80036ba <LL_ADC_SetChannelSingleDiff+0x2a>
  {
    SET_BIT(ADCx->DIFSEL,
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80036aa:	68bb      	ldr	r3, [r7, #8]
 80036ac:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80036b0:	431a      	orrs	r2, r3
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  else
  {
    CLEAR_BIT(ADCx->DIFSEL,
            Channel & ADC_SINGLEDIFF_CHANNEL_MASK);
  }
}
 80036b8:	e00a      	b.n	80036d0 <LL_ADC_SetChannelSingleDiff+0x40>
    CLEAR_BIT(ADCx->DIFSEL,
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80036c0:	68bb      	ldr	r3, [r7, #8]
 80036c2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80036c6:	43db      	mvns	r3, r3
 80036c8:	401a      	ands	r2, r3
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
 80036d0:	bf00      	nop
 80036d2:	3714      	adds	r7, #20
 80036d4:	46bd      	mov	sp, r7
 80036d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036da:	4770      	bx	lr
 80036dc:	407f0000 	.word	0x407f0000

080036e0 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80036e0:	b480      	push	{r7}
 80036e2:	b083      	sub	sp, #12
 80036e4:	af00      	add	r7, sp, #0
 80036e6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	689b      	ldr	r3, [r3, #8]
 80036ec:	f003 031f 	and.w	r3, r3, #31
}
 80036f0:	4618      	mov	r0, r3
 80036f2:	370c      	adds	r7, #12
 80036f4:	46bd      	mov	sp, r7
 80036f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036fa:	4770      	bx	lr

080036fc <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80036fc:	b480      	push	{r7}
 80036fe:	b083      	sub	sp, #12
 8003700:	af00      	add	r7, sp, #0
 8003702:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	689b      	ldr	r3, [r3, #8]
 8003708:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 800370c:	4618      	mov	r0, r3
 800370e:	370c      	adds	r7, #12
 8003710:	46bd      	mov	sp, r7
 8003712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003716:	4770      	bx	lr

08003718 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8003718:	b480      	push	{r7}
 800371a:	b083      	sub	sp, #12
 800371c:	af00      	add	r7, sp, #0
 800371e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	689b      	ldr	r3, [r3, #8]
 8003724:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8003728:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800372c:	687a      	ldr	r2, [r7, #4]
 800372e:	6093      	str	r3, [r2, #8]
}
 8003730:	bf00      	nop
 8003732:	370c      	adds	r7, #12
 8003734:	46bd      	mov	sp, r7
 8003736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800373a:	4770      	bx	lr

0800373c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 800373c:	b480      	push	{r7}
 800373e:	b083      	sub	sp, #12
 8003740:	af00      	add	r7, sp, #0
 8003742:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	689b      	ldr	r3, [r3, #8]
 8003748:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800374c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003750:	d101      	bne.n	8003756 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8003752:	2301      	movs	r3, #1
 8003754:	e000      	b.n	8003758 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8003756:	2300      	movs	r3, #0
}
 8003758:	4618      	mov	r0, r3
 800375a:	370c      	adds	r7, #12
 800375c:	46bd      	mov	sp, r7
 800375e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003762:	4770      	bx	lr

08003764 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8003764:	b480      	push	{r7}
 8003766:	b083      	sub	sp, #12
 8003768:	af00      	add	r7, sp, #0
 800376a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	689b      	ldr	r3, [r3, #8]
 8003770:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8003774:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003778:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8003780:	bf00      	nop
 8003782:	370c      	adds	r7, #12
 8003784:	46bd      	mov	sp, r7
 8003786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800378a:	4770      	bx	lr

0800378c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 800378c:	b480      	push	{r7}
 800378e:	b083      	sub	sp, #12
 8003790:	af00      	add	r7, sp, #0
 8003792:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	689b      	ldr	r3, [r3, #8]
 8003798:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800379c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80037a0:	d101      	bne.n	80037a6 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80037a2:	2301      	movs	r3, #1
 80037a4:	e000      	b.n	80037a8 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80037a6:	2300      	movs	r3, #0
}
 80037a8:	4618      	mov	r0, r3
 80037aa:	370c      	adds	r7, #12
 80037ac:	46bd      	mov	sp, r7
 80037ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b2:	4770      	bx	lr

080037b4 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80037b4:	b480      	push	{r7}
 80037b6:	b083      	sub	sp, #12
 80037b8:	af00      	add	r7, sp, #0
 80037ba:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	689b      	ldr	r3, [r3, #8]
 80037c0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80037c4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80037c8:	f043 0201 	orr.w	r2, r3, #1
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80037d0:	bf00      	nop
 80037d2:	370c      	adds	r7, #12
 80037d4:	46bd      	mov	sp, r7
 80037d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037da:	4770      	bx	lr

080037dc <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80037dc:	b480      	push	{r7}
 80037de:	b083      	sub	sp, #12
 80037e0:	af00      	add	r7, sp, #0
 80037e2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	689b      	ldr	r3, [r3, #8]
 80037e8:	f003 0301 	and.w	r3, r3, #1
 80037ec:	2b01      	cmp	r3, #1
 80037ee:	d101      	bne.n	80037f4 <LL_ADC_IsEnabled+0x18>
 80037f0:	2301      	movs	r3, #1
 80037f2:	e000      	b.n	80037f6 <LL_ADC_IsEnabled+0x1a>
 80037f4:	2300      	movs	r3, #0
}
 80037f6:	4618      	mov	r0, r3
 80037f8:	370c      	adds	r7, #12
 80037fa:	46bd      	mov	sp, r7
 80037fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003800:	4770      	bx	lr

08003802 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8003802:	b480      	push	{r7}
 8003804:	b083      	sub	sp, #12
 8003806:	af00      	add	r7, sp, #0
 8003808:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	689b      	ldr	r3, [r3, #8]
 800380e:	f003 0304 	and.w	r3, r3, #4
 8003812:	2b04      	cmp	r3, #4
 8003814:	d101      	bne.n	800381a <LL_ADC_REG_IsConversionOngoing+0x18>
 8003816:	2301      	movs	r3, #1
 8003818:	e000      	b.n	800381c <LL_ADC_REG_IsConversionOngoing+0x1a>
 800381a:	2300      	movs	r3, #0
}
 800381c:	4618      	mov	r0, r3
 800381e:	370c      	adds	r7, #12
 8003820:	46bd      	mov	sp, r7
 8003822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003826:	4770      	bx	lr

08003828 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8003828:	b480      	push	{r7}
 800382a:	b083      	sub	sp, #12
 800382c:	af00      	add	r7, sp, #0
 800382e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	689b      	ldr	r3, [r3, #8]
 8003834:	f003 0308 	and.w	r3, r3, #8
 8003838:	2b08      	cmp	r3, #8
 800383a:	d101      	bne.n	8003840 <LL_ADC_INJ_IsConversionOngoing+0x18>
 800383c:	2301      	movs	r3, #1
 800383e:	e000      	b.n	8003842 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8003840:	2300      	movs	r3, #0
}
 8003842:	4618      	mov	r0, r3
 8003844:	370c      	adds	r7, #12
 8003846:	46bd      	mov	sp, r7
 8003848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800384c:	4770      	bx	lr
	...

08003850 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003850:	b590      	push	{r4, r7, lr}
 8003852:	b089      	sub	sp, #36	; 0x24
 8003854:	af00      	add	r7, sp, #0
 8003856:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003858:	2300      	movs	r3, #0
 800385a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 800385c:	2300      	movs	r3, #0
 800385e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	2b00      	cmp	r3, #0
 8003864:	d101      	bne.n	800386a <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8003866:	2301      	movs	r3, #1
 8003868:	e177      	b.n	8003b5a <HAL_ADC_Init+0x30a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	695b      	ldr	r3, [r3, #20]
 800386e:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003874:	2b00      	cmp	r3, #0
 8003876:	d109      	bne.n	800388c <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003878:	6878      	ldr	r0, [r7, #4]
 800387a:	f7fe ff13 	bl	80026a4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	2200      	movs	r2, #0
 8003882:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	2200      	movs	r2, #0
 8003888:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	4618      	mov	r0, r3
 8003892:	f7ff ff53 	bl	800373c <LL_ADC_IsDeepPowerDownEnabled>
 8003896:	4603      	mov	r3, r0
 8003898:	2b00      	cmp	r3, #0
 800389a:	d004      	beq.n	80038a6 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	4618      	mov	r0, r3
 80038a2:	f7ff ff39 	bl	8003718 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	4618      	mov	r0, r3
 80038ac:	f7ff ff6e 	bl	800378c <LL_ADC_IsInternalRegulatorEnabled>
 80038b0:	4603      	mov	r3, r0
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d115      	bne.n	80038e2 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	4618      	mov	r0, r3
 80038bc:	f7ff ff52 	bl	8003764 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80038c0:	4b9c      	ldr	r3, [pc, #624]	; (8003b34 <HAL_ADC_Init+0x2e4>)
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	099b      	lsrs	r3, r3, #6
 80038c6:	4a9c      	ldr	r2, [pc, #624]	; (8003b38 <HAL_ADC_Init+0x2e8>)
 80038c8:	fba2 2303 	umull	r2, r3, r2, r3
 80038cc:	099b      	lsrs	r3, r3, #6
 80038ce:	3301      	adds	r3, #1
 80038d0:	005b      	lsls	r3, r3, #1
 80038d2:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80038d4:	e002      	b.n	80038dc <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 80038d6:	68bb      	ldr	r3, [r7, #8]
 80038d8:	3b01      	subs	r3, #1
 80038da:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80038dc:	68bb      	ldr	r3, [r7, #8]
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d1f9      	bne.n	80038d6 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	4618      	mov	r0, r3
 80038e8:	f7ff ff50 	bl	800378c <LL_ADC_IsInternalRegulatorEnabled>
 80038ec:	4603      	mov	r3, r0
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d10d      	bne.n	800390e <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038f6:	f043 0210 	orr.w	r2, r3, #16
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003902:	f043 0201 	orr.w	r2, r3, #1
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 800390a:	2301      	movs	r3, #1
 800390c:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	4618      	mov	r0, r3
 8003914:	f7ff ff75 	bl	8003802 <LL_ADC_REG_IsConversionOngoing>
 8003918:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800391e:	f003 0310 	and.w	r3, r3, #16
 8003922:	2b00      	cmp	r3, #0
 8003924:	f040 8110 	bne.w	8003b48 <HAL_ADC_Init+0x2f8>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8003928:	697b      	ldr	r3, [r7, #20]
 800392a:	2b00      	cmp	r3, #0
 800392c:	f040 810c 	bne.w	8003b48 <HAL_ADC_Init+0x2f8>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003934:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8003938:	f043 0202 	orr.w	r2, r3, #2
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	4618      	mov	r0, r3
 8003946:	f7ff ff49 	bl	80037dc <LL_ADC_IsEnabled>
 800394a:	4603      	mov	r3, r0
 800394c:	2b00      	cmp	r3, #0
 800394e:	d111      	bne.n	8003974 <HAL_ADC_Init+0x124>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003950:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8003954:	f7ff ff42 	bl	80037dc <LL_ADC_IsEnabled>
 8003958:	4604      	mov	r4, r0
 800395a:	4878      	ldr	r0, [pc, #480]	; (8003b3c <HAL_ADC_Init+0x2ec>)
 800395c:	f7ff ff3e 	bl	80037dc <LL_ADC_IsEnabled>
 8003960:	4603      	mov	r3, r0
 8003962:	4323      	orrs	r3, r4
 8003964:	2b00      	cmp	r3, #0
 8003966:	d105      	bne.n	8003974 <HAL_ADC_Init+0x124>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	685b      	ldr	r3, [r3, #4]
 800396c:	4619      	mov	r1, r3
 800396e:	4874      	ldr	r0, [pc, #464]	; (8003b40 <HAL_ADC_Init+0x2f0>)
 8003970:	f7ff fd3e 	bl	80033f0 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	7f5b      	ldrb	r3, [r3, #29]
 8003978:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800397e:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8003984:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 800398a:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003992:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003994:	4313      	orrs	r3, r2
 8003996:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800399e:	2b01      	cmp	r3, #1
 80039a0:	d106      	bne.n	80039b0 <HAL_ADC_Init+0x160>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039a6:	3b01      	subs	r3, #1
 80039a8:	045b      	lsls	r3, r3, #17
 80039aa:	69ba      	ldr	r2, [r7, #24]
 80039ac:	4313      	orrs	r3, r2
 80039ae:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d009      	beq.n	80039cc <HAL_ADC_Init+0x17c>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039bc:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039c4:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80039c6:	69ba      	ldr	r2, [r7, #24]
 80039c8:	4313      	orrs	r3, r2
 80039ca:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	68da      	ldr	r2, [r3, #12]
 80039d2:	4b5c      	ldr	r3, [pc, #368]	; (8003b44 <HAL_ADC_Init+0x2f4>)
 80039d4:	4013      	ands	r3, r2
 80039d6:	687a      	ldr	r2, [r7, #4]
 80039d8:	6812      	ldr	r2, [r2, #0]
 80039da:	69b9      	ldr	r1, [r7, #24]
 80039dc:	430b      	orrs	r3, r1
 80039de:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	691b      	ldr	r3, [r3, #16]
 80039e6:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	430a      	orrs	r2, r1
 80039f4:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	4618      	mov	r0, r3
 80039fc:	f7ff ff01 	bl	8003802 <LL_ADC_REG_IsConversionOngoing>
 8003a00:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	4618      	mov	r0, r3
 8003a08:	f7ff ff0e 	bl	8003828 <LL_ADC_INJ_IsConversionOngoing>
 8003a0c:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003a0e:	693b      	ldr	r3, [r7, #16]
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d16d      	bne.n	8003af0 <HAL_ADC_Init+0x2a0>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d16a      	bne.n	8003af0 <HAL_ADC_Init+0x2a0>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	7f1b      	ldrb	r3, [r3, #28]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8003a1e:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003a26:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8003a28:	4313      	orrs	r3, r2
 8003a2a:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	68db      	ldr	r3, [r3, #12]
 8003a32:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003a36:	f023 0302 	bic.w	r3, r3, #2
 8003a3a:	687a      	ldr	r2, [r7, #4]
 8003a3c:	6812      	ldr	r2, [r2, #0]
 8003a3e:	69b9      	ldr	r1, [r7, #24]
 8003a40:	430b      	orrs	r3, r1
 8003a42:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	691b      	ldr	r3, [r3, #16]
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d017      	beq.n	8003a7c <HAL_ADC_Init+0x22c>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	691a      	ldr	r2, [r3, #16]
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8003a5a:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8003a64:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8003a68:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003a6c:	687a      	ldr	r2, [r7, #4]
 8003a6e:	6911      	ldr	r1, [r2, #16]
 8003a70:	687a      	ldr	r2, [r7, #4]
 8003a72:	6812      	ldr	r2, [r2, #0]
 8003a74:	430b      	orrs	r3, r1
 8003a76:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 8003a7a:	e013      	b.n	8003aa4 <HAL_ADC_Init+0x254>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	691a      	ldr	r2, [r3, #16]
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8003a8a:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8003a94:	687a      	ldr	r2, [r7, #4]
 8003a96:	6812      	ldr	r2, [r2, #0]
 8003a98:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8003a9c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003aa0:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003aaa:	2b01      	cmp	r3, #1
 8003aac:	d118      	bne.n	8003ae0 <HAL_ADC_Init+0x290>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	691b      	ldr	r3, [r3, #16]
 8003ab4:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8003ab8:	f023 0304 	bic.w	r3, r3, #4
 8003abc:	687a      	ldr	r2, [r7, #4]
 8003abe:	6c51      	ldr	r1, [r2, #68]	; 0x44
 8003ac0:	687a      	ldr	r2, [r7, #4]
 8003ac2:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8003ac4:	4311      	orrs	r1, r2
 8003ac6:	687a      	ldr	r2, [r7, #4]
 8003ac8:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8003aca:	4311      	orrs	r1, r2
 8003acc:	687a      	ldr	r2, [r7, #4]
 8003ace:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003ad0:	430a      	orrs	r2, r1
 8003ad2:	431a      	orrs	r2, r3
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	f042 0201 	orr.w	r2, r2, #1
 8003adc:	611a      	str	r2, [r3, #16]
 8003ade:	e007      	b.n	8003af0 <HAL_ADC_Init+0x2a0>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	691a      	ldr	r2, [r3, #16]
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	f022 0201 	bic.w	r2, r2, #1
 8003aee:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	695b      	ldr	r3, [r3, #20]
 8003af4:	2b01      	cmp	r3, #1
 8003af6:	d10c      	bne.n	8003b12 <HAL_ADC_Init+0x2c2>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003afe:	f023 010f 	bic.w	r1, r3, #15
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	6a1b      	ldr	r3, [r3, #32]
 8003b06:	1e5a      	subs	r2, r3, #1
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	430a      	orrs	r2, r1
 8003b0e:	631a      	str	r2, [r3, #48]	; 0x30
 8003b10:	e007      	b.n	8003b22 <HAL_ADC_Init+0x2d2>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	f022 020f 	bic.w	r2, r2, #15
 8003b20:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b26:	f023 0303 	bic.w	r3, r3, #3
 8003b2a:	f043 0201 	orr.w	r2, r3, #1
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	65da      	str	r2, [r3, #92]	; 0x5c
 8003b32:	e011      	b.n	8003b58 <HAL_ADC_Init+0x308>
 8003b34:	2000001c 	.word	0x2000001c
 8003b38:	053e2d63 	.word	0x053e2d63
 8003b3c:	50000100 	.word	0x50000100
 8003b40:	50000300 	.word	0x50000300
 8003b44:	fff04007 	.word	0xfff04007
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b4c:	f043 0210 	orr.w	r2, r3, #16
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8003b54:	2301      	movs	r3, #1
 8003b56:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8003b58:	7ffb      	ldrb	r3, [r7, #31]
}
 8003b5a:	4618      	mov	r0, r3
 8003b5c:	3724      	adds	r7, #36	; 0x24
 8003b5e:	46bd      	mov	sp, r7
 8003b60:	bd90      	pop	{r4, r7, pc}
 8003b62:	bf00      	nop

08003b64 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8003b64:	b580      	push	{r7, lr}
 8003b66:	b08a      	sub	sp, #40	; 0x28
 8003b68:	af00      	add	r7, sp, #0
 8003b6a:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8003b6c:	2300      	movs	r3, #0
 8003b6e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	685b      	ldr	r3, [r3, #4]
 8003b7e:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003b80:	4883      	ldr	r0, [pc, #524]	; (8003d90 <HAL_ADC_IRQHandler+0x22c>)
 8003b82:	f7ff fdad 	bl	80036e0 <LL_ADC_GetMultimode>
 8003b86:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8003b88:	69fb      	ldr	r3, [r7, #28]
 8003b8a:	f003 0302 	and.w	r3, r3, #2
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d017      	beq.n	8003bc2 <HAL_ADC_IRQHandler+0x5e>
 8003b92:	69bb      	ldr	r3, [r7, #24]
 8003b94:	f003 0302 	and.w	r3, r3, #2
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d012      	beq.n	8003bc2 <HAL_ADC_IRQHandler+0x5e>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ba0:	f003 0310 	and.w	r3, r3, #16
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d105      	bne.n	8003bb4 <HAL_ADC_IRQHandler+0x50>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003bac:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	65da      	str	r2, [r3, #92]	; 0x5c

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8003bb4:	6878      	ldr	r0, [r7, #4]
 8003bb6:	f001 f919 	bl	8004dec <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	2202      	movs	r2, #2
 8003bc0:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8003bc2:	69fb      	ldr	r3, [r7, #28]
 8003bc4:	f003 0304 	and.w	r3, r3, #4
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d004      	beq.n	8003bd6 <HAL_ADC_IRQHandler+0x72>
 8003bcc:	69bb      	ldr	r3, [r7, #24]
 8003bce:	f003 0304 	and.w	r3, r3, #4
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d10a      	bne.n	8003bec <HAL_ADC_IRQHandler+0x88>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8003bd6:	69fb      	ldr	r3, [r7, #28]
 8003bd8:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	f000 8085 	beq.w	8003cec <HAL_ADC_IRQHandler+0x188>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8003be2:	69bb      	ldr	r3, [r7, #24]
 8003be4:	f003 0308 	and.w	r3, r3, #8
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d07f      	beq.n	8003cec <HAL_ADC_IRQHandler+0x188>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003bf0:	f003 0310 	and.w	r3, r3, #16
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d105      	bne.n	8003c04 <HAL_ADC_IRQHandler+0xa0>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003bfc:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	4618      	mov	r0, r3
 8003c0a:	f7ff fcc3 	bl	8003594 <LL_ADC_REG_IsTriggerSourceSWStart>
 8003c0e:	4603      	mov	r3, r0
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d064      	beq.n	8003cde <HAL_ADC_IRQHandler+0x17a>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	4a5e      	ldr	r2, [pc, #376]	; (8003d94 <HAL_ADC_IRQHandler+0x230>)
 8003c1a:	4293      	cmp	r3, r2
 8003c1c:	d002      	beq.n	8003c24 <HAL_ADC_IRQHandler+0xc0>
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	e001      	b.n	8003c28 <HAL_ADC_IRQHandler+0xc4>
 8003c24:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8003c28:	687a      	ldr	r2, [r7, #4]
 8003c2a:	6812      	ldr	r2, [r2, #0]
 8003c2c:	4293      	cmp	r3, r2
 8003c2e:	d008      	beq.n	8003c42 <HAL_ADC_IRQHandler+0xde>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003c30:	697b      	ldr	r3, [r7, #20]
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d005      	beq.n	8003c42 <HAL_ADC_IRQHandler+0xde>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8003c36:	697b      	ldr	r3, [r7, #20]
 8003c38:	2b05      	cmp	r3, #5
 8003c3a:	d002      	beq.n	8003c42 <HAL_ADC_IRQHandler+0xde>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8003c3c:	697b      	ldr	r3, [r7, #20]
 8003c3e:	2b09      	cmp	r3, #9
 8003c40:	d104      	bne.n	8003c4c <HAL_ADC_IRQHandler+0xe8>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	68db      	ldr	r3, [r3, #12]
 8003c48:	623b      	str	r3, [r7, #32]
 8003c4a:	e00d      	b.n	8003c68 <HAL_ADC_IRQHandler+0x104>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	4a50      	ldr	r2, [pc, #320]	; (8003d94 <HAL_ADC_IRQHandler+0x230>)
 8003c52:	4293      	cmp	r3, r2
 8003c54:	d002      	beq.n	8003c5c <HAL_ADC_IRQHandler+0xf8>
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	e001      	b.n	8003c60 <HAL_ADC_IRQHandler+0xfc>
 8003c5c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8003c60:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8003c62:	693b      	ldr	r3, [r7, #16]
 8003c64:	68db      	ldr	r3, [r3, #12]
 8003c66:	623b      	str	r3, [r7, #32]
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8003c68:	6a3b      	ldr	r3, [r7, #32]
 8003c6a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d135      	bne.n	8003cde <HAL_ADC_IRQHandler+0x17a>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	f003 0308 	and.w	r3, r3, #8
 8003c7c:	2b08      	cmp	r3, #8
 8003c7e:	d12e      	bne.n	8003cde <HAL_ADC_IRQHandler+0x17a>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	4618      	mov	r0, r3
 8003c86:	f7ff fdbc 	bl	8003802 <LL_ADC_REG_IsConversionOngoing>
 8003c8a:	4603      	mov	r3, r0
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d11a      	bne.n	8003cc6 <HAL_ADC_IRQHandler+0x162>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	685a      	ldr	r2, [r3, #4]
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	f022 020c 	bic.w	r2, r2, #12
 8003c9e:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ca4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	65da      	str	r2, [r3, #92]	; 0x5c

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003cb0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d112      	bne.n	8003cde <HAL_ADC_IRQHandler+0x17a>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003cbc:	f043 0201 	orr.w	r2, r3, #1
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	65da      	str	r2, [r3, #92]	; 0x5c
 8003cc4:	e00b      	b.n	8003cde <HAL_ADC_IRQHandler+0x17a>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003cca:	f043 0210 	orr.w	r2, r3, #16
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	65da      	str	r2, [r3, #92]	; 0x5c

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003cd6:	f043 0201 	orr.w	r2, r3, #1
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	661a      	str	r2, [r3, #96]	; 0x60
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003cde:	6878      	ldr	r0, [r7, #4]
 8003ce0:	f000 f95a 	bl	8003f98 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	220c      	movs	r2, #12
 8003cea:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8003cec:	69fb      	ldr	r3, [r7, #28]
 8003cee:	f003 0320 	and.w	r3, r3, #32
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d004      	beq.n	8003d00 <HAL_ADC_IRQHandler+0x19c>
 8003cf6:	69bb      	ldr	r3, [r7, #24]
 8003cf8:	f003 0320 	and.w	r3, r3, #32
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d10b      	bne.n	8003d18 <HAL_ADC_IRQHandler+0x1b4>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8003d00:	69fb      	ldr	r3, [r7, #28]
 8003d02:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	f000 809e 	beq.w	8003e48 <HAL_ADC_IRQHandler+0x2e4>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8003d0c:	69bb      	ldr	r3, [r7, #24]
 8003d0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	f000 8098 	beq.w	8003e48 <HAL_ADC_IRQHandler+0x2e4>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d1c:	f003 0310 	and.w	r3, r3, #16
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d105      	bne.n	8003d30 <HAL_ADC_IRQHandler+0x1cc>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d28:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	4618      	mov	r0, r3
 8003d36:	f7ff fc6c 	bl	8003612 <LL_ADC_INJ_IsTriggerSourceSWStart>
 8003d3a:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	4618      	mov	r0, r3
 8003d42:	f7ff fc27 	bl	8003594 <LL_ADC_REG_IsTriggerSourceSWStart>
 8003d46:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	4a11      	ldr	r2, [pc, #68]	; (8003d94 <HAL_ADC_IRQHandler+0x230>)
 8003d4e:	4293      	cmp	r3, r2
 8003d50:	d002      	beq.n	8003d58 <HAL_ADC_IRQHandler+0x1f4>
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	e001      	b.n	8003d5c <HAL_ADC_IRQHandler+0x1f8>
 8003d58:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8003d5c:	687a      	ldr	r2, [r7, #4]
 8003d5e:	6812      	ldr	r2, [r2, #0]
 8003d60:	4293      	cmp	r3, r2
 8003d62:	d008      	beq.n	8003d76 <HAL_ADC_IRQHandler+0x212>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003d64:	697b      	ldr	r3, [r7, #20]
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d005      	beq.n	8003d76 <HAL_ADC_IRQHandler+0x212>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 8003d6a:	697b      	ldr	r3, [r7, #20]
 8003d6c:	2b06      	cmp	r3, #6
 8003d6e:	d002      	beq.n	8003d76 <HAL_ADC_IRQHandler+0x212>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8003d70:	697b      	ldr	r3, [r7, #20]
 8003d72:	2b07      	cmp	r3, #7
 8003d74:	d104      	bne.n	8003d80 <HAL_ADC_IRQHandler+0x21c>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	68db      	ldr	r3, [r3, #12]
 8003d7c:	623b      	str	r3, [r7, #32]
 8003d7e:	e011      	b.n	8003da4 <HAL_ADC_IRQHandler+0x240>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	4a03      	ldr	r2, [pc, #12]	; (8003d94 <HAL_ADC_IRQHandler+0x230>)
 8003d86:	4293      	cmp	r3, r2
 8003d88:	d006      	beq.n	8003d98 <HAL_ADC_IRQHandler+0x234>
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	e005      	b.n	8003d9c <HAL_ADC_IRQHandler+0x238>
 8003d90:	50000300 	.word	0x50000300
 8003d94:	50000100 	.word	0x50000100
 8003d98:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8003d9c:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8003d9e:	693b      	ldr	r3, [r7, #16]
 8003da0:	68db      	ldr	r3, [r3, #12]
 8003da2:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d047      	beq.n	8003e3a <HAL_ADC_IRQHandler+0x2d6>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8003daa:	6a3b      	ldr	r3, [r7, #32]
 8003dac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d007      	beq.n	8003dc4 <HAL_ADC_IRQHandler+0x260>
 8003db4:	68bb      	ldr	r3, [r7, #8]
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d03f      	beq.n	8003e3a <HAL_ADC_IRQHandler+0x2d6>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8003dba:	6a3b      	ldr	r3, [r7, #32]
 8003dbc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d13a      	bne.n	8003e3a <HAL_ADC_IRQHandler+0x2d6>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003dce:	2b40      	cmp	r3, #64	; 0x40
 8003dd0:	d133      	bne.n	8003e3a <HAL_ADC_IRQHandler+0x2d6>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8003dd2:	6a3b      	ldr	r3, [r7, #32]
 8003dd4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d12e      	bne.n	8003e3a <HAL_ADC_IRQHandler+0x2d6>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	4618      	mov	r0, r3
 8003de2:	f7ff fd21 	bl	8003828 <LL_ADC_INJ_IsConversionOngoing>
 8003de6:	4603      	mov	r3, r0
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d11a      	bne.n	8003e22 <HAL_ADC_IRQHandler+0x2be>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	685a      	ldr	r2, [r3, #4]
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003dfa:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e00:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	65da      	str	r2, [r3, #92]	; 0x5c

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e0c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d112      	bne.n	8003e3a <HAL_ADC_IRQHandler+0x2d6>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e18:	f043 0201 	orr.w	r2, r3, #1
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	65da      	str	r2, [r3, #92]	; 0x5c
 8003e20:	e00b      	b.n	8003e3a <HAL_ADC_IRQHandler+0x2d6>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e26:	f043 0210 	orr.w	r2, r3, #16
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	65da      	str	r2, [r3, #92]	; 0x5c

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003e32:	f043 0201 	orr.w	r2, r3, #1
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	661a      	str	r2, [r3, #96]	; 0x60
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8003e3a:	6878      	ldr	r0, [r7, #4]
 8003e3c:	f7fe fa24 	bl	8002288 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	2260      	movs	r2, #96	; 0x60
 8003e46:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8003e48:	69fb      	ldr	r3, [r7, #28]
 8003e4a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d011      	beq.n	8003e76 <HAL_ADC_IRQHandler+0x312>
 8003e52:	69bb      	ldr	r3, [r7, #24]
 8003e54:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d00c      	beq.n	8003e76 <HAL_ADC_IRQHandler+0x312>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e60:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8003e68:	6878      	ldr	r0, [r7, #4]
 8003e6a:	f000 f89f 	bl	8003fac <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	2280      	movs	r2, #128	; 0x80
 8003e74:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8003e76:	69fb      	ldr	r3, [r7, #28]
 8003e78:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d012      	beq.n	8003ea6 <HAL_ADC_IRQHandler+0x342>
 8003e80:	69bb      	ldr	r3, [r7, #24]
 8003e82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d00d      	beq.n	8003ea6 <HAL_ADC_IRQHandler+0x342>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e8e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8003e96:	6878      	ldr	r0, [r7, #4]
 8003e98:	f000 ff94 	bl	8004dc4 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003ea4:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8003ea6:	69fb      	ldr	r3, [r7, #28]
 8003ea8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d012      	beq.n	8003ed6 <HAL_ADC_IRQHandler+0x372>
 8003eb0:	69bb      	ldr	r3, [r7, #24]
 8003eb2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d00d      	beq.n	8003ed6 <HAL_ADC_IRQHandler+0x372>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ebe:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8003ec6:	6878      	ldr	r0, [r7, #4]
 8003ec8:	f000 ff86 	bl	8004dd8 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003ed4:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8003ed6:	69fb      	ldr	r3, [r7, #28]
 8003ed8:	f003 0310 	and.w	r3, r3, #16
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d036      	beq.n	8003f4e <HAL_ADC_IRQHandler+0x3ea>
 8003ee0:	69bb      	ldr	r3, [r7, #24]
 8003ee2:	f003 0310 	and.w	r3, r3, #16
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d031      	beq.n	8003f4e <HAL_ADC_IRQHandler+0x3ea>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d102      	bne.n	8003ef8 <HAL_ADC_IRQHandler+0x394>
    {
      overrun_error = 1UL;
 8003ef2:	2301      	movs	r3, #1
 8003ef4:	627b      	str	r3, [r7, #36]	; 0x24
 8003ef6:	e014      	b.n	8003f22 <HAL_ADC_IRQHandler+0x3be>
    }
    else
    {
      /* Check DMA configuration */
#if defined(ADC_MULTIMODE_SUPPORT)
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 8003ef8:	697b      	ldr	r3, [r7, #20]
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d008      	beq.n	8003f10 <HAL_ADC_IRQHandler+0x3ac>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8003efe:	4825      	ldr	r0, [pc, #148]	; (8003f94 <HAL_ADC_IRQHandler+0x430>)
 8003f00:	f7ff fbfc 	bl	80036fc <LL_ADC_GetMultiDMATransfer>
 8003f04:	4603      	mov	r3, r0
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d00b      	beq.n	8003f22 <HAL_ADC_IRQHandler+0x3be>
        {
          overrun_error = 1UL;
 8003f0a:	2301      	movs	r3, #1
 8003f0c:	627b      	str	r3, [r7, #36]	; 0x24
 8003f0e:	e008      	b.n	8003f22 <HAL_ADC_IRQHandler+0x3be>
      }
      else
#endif
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	68db      	ldr	r3, [r3, #12]
 8003f16:	f003 0301 	and.w	r3, r3, #1
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d001      	beq.n	8003f22 <HAL_ADC_IRQHandler+0x3be>
        {
          overrun_error = 1UL;
 8003f1e:	2301      	movs	r3, #1
 8003f20:	627b      	str	r3, [r7, #36]	; 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 8003f22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f24:	2b01      	cmp	r3, #1
 8003f26:	d10e      	bne.n	8003f46 <HAL_ADC_IRQHandler+0x3e2>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f2c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003f38:	f043 0202 	orr.w	r2, r3, #2
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	661a      	str	r2, [r3, #96]	; 0x60
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8003f40:	6878      	ldr	r0, [r7, #4]
 8003f42:	f000 f83d 	bl	8003fc0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	2210      	movs	r2, #16
 8003f4c:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8003f4e:	69fb      	ldr	r3, [r7, #28]
 8003f50:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d018      	beq.n	8003f8a <HAL_ADC_IRQHandler+0x426>
 8003f58:	69bb      	ldr	r3, [r7, #24]
 8003f5a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d013      	beq.n	8003f8a <HAL_ADC_IRQHandler+0x426>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f66:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003f72:	f043 0208 	orr.w	r2, r3, #8
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	661a      	str	r2, [r3, #96]	; 0x60

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003f82:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8003f84:	6878      	ldr	r0, [r7, #4]
 8003f86:	f000 ff13 	bl	8004db0 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 8003f8a:	bf00      	nop
 8003f8c:	3728      	adds	r7, #40	; 0x28
 8003f8e:	46bd      	mov	sp, r7
 8003f90:	bd80      	pop	{r7, pc}
 8003f92:	bf00      	nop
 8003f94:	50000300 	.word	0x50000300

08003f98 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003f98:	b480      	push	{r7}
 8003f9a:	b083      	sub	sp, #12
 8003f9c:	af00      	add	r7, sp, #0
 8003f9e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8003fa0:	bf00      	nop
 8003fa2:	370c      	adds	r7, #12
 8003fa4:	46bd      	mov	sp, r7
 8003fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003faa:	4770      	bx	lr

08003fac <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8003fac:	b480      	push	{r7}
 8003fae:	b083      	sub	sp, #12
 8003fb0:	af00      	add	r7, sp, #0
 8003fb2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8003fb4:	bf00      	nop
 8003fb6:	370c      	adds	r7, #12
 8003fb8:	46bd      	mov	sp, r7
 8003fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fbe:	4770      	bx	lr

08003fc0 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003fc0:	b480      	push	{r7}
 8003fc2:	b083      	sub	sp, #12
 8003fc4:	af00      	add	r7, sp, #0
 8003fc6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8003fc8:	bf00      	nop
 8003fca:	370c      	adds	r7, #12
 8003fcc:	46bd      	mov	sp, r7
 8003fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd2:	4770      	bx	lr

08003fd4 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8003fd4:	b580      	push	{r7, lr}
 8003fd6:	b0b6      	sub	sp, #216	; 0xd8
 8003fd8:	af00      	add	r7, sp, #0
 8003fda:	6078      	str	r0, [r7, #4]
 8003fdc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003fde:	2300      	movs	r3, #0
 8003fe0:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8003fe4:	2300      	movs	r3, #0
 8003fe6:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8003fee:	2b01      	cmp	r3, #1
 8003ff0:	d101      	bne.n	8003ff6 <HAL_ADC_ConfigChannel+0x22>
 8003ff2:	2302      	movs	r3, #2
 8003ff4:	e3c8      	b.n	8004788 <HAL_ADC_ConfigChannel+0x7b4>
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	2201      	movs	r2, #1
 8003ffa:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	4618      	mov	r0, r3
 8004004:	f7ff fbfd 	bl	8003802 <LL_ADC_REG_IsConversionOngoing>
 8004008:	4603      	mov	r3, r0
 800400a:	2b00      	cmp	r3, #0
 800400c:	f040 83ad 	bne.w	800476a <HAL_ADC_ConfigChannel+0x796>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	6818      	ldr	r0, [r3, #0]
 8004014:	683b      	ldr	r3, [r7, #0]
 8004016:	6859      	ldr	r1, [r3, #4]
 8004018:	683b      	ldr	r3, [r7, #0]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	461a      	mov	r2, r3
 800401e:	f7ff facc 	bl	80035ba <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	4618      	mov	r0, r3
 8004028:	f7ff fbeb 	bl	8003802 <LL_ADC_REG_IsConversionOngoing>
 800402c:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	4618      	mov	r0, r3
 8004036:	f7ff fbf7 	bl	8003828 <LL_ADC_INJ_IsConversionOngoing>
 800403a:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800403e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8004042:	2b00      	cmp	r3, #0
 8004044:	f040 81d9 	bne.w	80043fa <HAL_ADC_ConfigChannel+0x426>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8004048:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800404c:	2b00      	cmp	r3, #0
 800404e:	f040 81d4 	bne.w	80043fa <HAL_ADC_ConfigChannel+0x426>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8004052:	683b      	ldr	r3, [r7, #0]
 8004054:	689b      	ldr	r3, [r3, #8]
 8004056:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800405a:	d10f      	bne.n	800407c <HAL_ADC_ConfigChannel+0xa8>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	6818      	ldr	r0, [r3, #0]
 8004060:	683b      	ldr	r3, [r7, #0]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	2200      	movs	r2, #0
 8004066:	4619      	mov	r1, r3
 8004068:	f7ff fae6 	bl	8003638 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8004074:	4618      	mov	r0, r3
 8004076:	f7ff fa7a 	bl	800356e <LL_ADC_SetSamplingTimeCommonConfig>
 800407a:	e00e      	b.n	800409a <HAL_ADC_ConfigChannel+0xc6>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	6818      	ldr	r0, [r3, #0]
 8004080:	683b      	ldr	r3, [r7, #0]
 8004082:	6819      	ldr	r1, [r3, #0]
 8004084:	683b      	ldr	r3, [r7, #0]
 8004086:	689b      	ldr	r3, [r3, #8]
 8004088:	461a      	mov	r2, r3
 800408a:	f7ff fad5 	bl	8003638 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	2100      	movs	r1, #0
 8004094:	4618      	mov	r0, r3
 8004096:	f7ff fa6a 	bl	800356e <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 800409a:	683b      	ldr	r3, [r7, #0]
 800409c:	695a      	ldr	r2, [r3, #20]
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	68db      	ldr	r3, [r3, #12]
 80040a4:	08db      	lsrs	r3, r3, #3
 80040a6:	f003 0303 	and.w	r3, r3, #3
 80040aa:	005b      	lsls	r3, r3, #1
 80040ac:	fa02 f303 	lsl.w	r3, r2, r3
 80040b0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80040b4:	683b      	ldr	r3, [r7, #0]
 80040b6:	691b      	ldr	r3, [r3, #16]
 80040b8:	2b04      	cmp	r3, #4
 80040ba:	d022      	beq.n	8004102 <HAL_ADC_ConfigChannel+0x12e>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	6818      	ldr	r0, [r3, #0]
 80040c0:	683b      	ldr	r3, [r7, #0]
 80040c2:	6919      	ldr	r1, [r3, #16]
 80040c4:	683b      	ldr	r3, [r7, #0]
 80040c6:	681a      	ldr	r2, [r3, #0]
 80040c8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80040cc:	f7ff f9c4 	bl	8003458 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(sConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	6818      	ldr	r0, [r3, #0]
 80040d4:	683b      	ldr	r3, [r7, #0]
 80040d6:	6919      	ldr	r1, [r3, #16]
 80040d8:	683b      	ldr	r3, [r7, #0]
 80040da:	699b      	ldr	r3, [r3, #24]
 80040dc:	461a      	mov	r2, r3
 80040de:	f7ff fa10 	bl	8003502 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	6818      	ldr	r0, [r3, #0]
 80040e6:	683b      	ldr	r3, [r7, #0]
 80040e8:	6919      	ldr	r1, [r3, #16]
 80040ea:	683b      	ldr	r3, [r7, #0]
 80040ec:	7f1b      	ldrb	r3, [r3, #28]
 80040ee:	2b01      	cmp	r3, #1
 80040f0:	d102      	bne.n	80040f8 <HAL_ADC_ConfigChannel+0x124>
 80040f2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80040f6:	e000      	b.n	80040fa <HAL_ADC_ConfigChannel+0x126>
 80040f8:	2300      	movs	r3, #0
 80040fa:	461a      	mov	r2, r3
 80040fc:	f7ff fa1c 	bl	8003538 <LL_ADC_SetOffsetSaturation>
 8004100:	e17b      	b.n	80043fa <HAL_ADC_ConfigChannel+0x426>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	2100      	movs	r1, #0
 8004108:	4618      	mov	r0, r3
 800410a:	f7ff f9c9 	bl	80034a0 <LL_ADC_GetOffsetChannel>
 800410e:	4603      	mov	r3, r0
 8004110:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004114:	2b00      	cmp	r3, #0
 8004116:	d10a      	bne.n	800412e <HAL_ADC_ConfigChannel+0x15a>
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	2100      	movs	r1, #0
 800411e:	4618      	mov	r0, r3
 8004120:	f7ff f9be 	bl	80034a0 <LL_ADC_GetOffsetChannel>
 8004124:	4603      	mov	r3, r0
 8004126:	0e9b      	lsrs	r3, r3, #26
 8004128:	f003 021f 	and.w	r2, r3, #31
 800412c:	e01e      	b.n	800416c <HAL_ADC_ConfigChannel+0x198>
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	2100      	movs	r1, #0
 8004134:	4618      	mov	r0, r3
 8004136:	f7ff f9b3 	bl	80034a0 <LL_ADC_GetOffsetChannel>
 800413a:	4603      	mov	r3, r0
 800413c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004140:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8004144:	fa93 f3a3 	rbit	r3, r3
 8004148:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800414c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8004150:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8004154:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004158:	2b00      	cmp	r3, #0
 800415a:	d101      	bne.n	8004160 <HAL_ADC_ConfigChannel+0x18c>
  {
    return 32U;
 800415c:	2320      	movs	r3, #32
 800415e:	e004      	b.n	800416a <HAL_ADC_ConfigChannel+0x196>
  }
  return __builtin_clz(value);
 8004160:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004164:	fab3 f383 	clz	r3, r3
 8004168:	b2db      	uxtb	r3, r3
 800416a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800416c:	683b      	ldr	r3, [r7, #0]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004174:	2b00      	cmp	r3, #0
 8004176:	d105      	bne.n	8004184 <HAL_ADC_ConfigChannel+0x1b0>
 8004178:	683b      	ldr	r3, [r7, #0]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	0e9b      	lsrs	r3, r3, #26
 800417e:	f003 031f 	and.w	r3, r3, #31
 8004182:	e018      	b.n	80041b6 <HAL_ADC_ConfigChannel+0x1e2>
 8004184:	683b      	ldr	r3, [r7, #0]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800418c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8004190:	fa93 f3a3 	rbit	r3, r3
 8004194:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8004198:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800419c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 80041a0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d101      	bne.n	80041ac <HAL_ADC_ConfigChannel+0x1d8>
    return 32U;
 80041a8:	2320      	movs	r3, #32
 80041aa:	e004      	b.n	80041b6 <HAL_ADC_ConfigChannel+0x1e2>
  return __builtin_clz(value);
 80041ac:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80041b0:	fab3 f383 	clz	r3, r3
 80041b4:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80041b6:	429a      	cmp	r2, r3
 80041b8:	d106      	bne.n	80041c8 <HAL_ADC_ConfigChannel+0x1f4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	2200      	movs	r2, #0
 80041c0:	2100      	movs	r1, #0
 80041c2:	4618      	mov	r0, r3
 80041c4:	f7ff f982 	bl	80034cc <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	2101      	movs	r1, #1
 80041ce:	4618      	mov	r0, r3
 80041d0:	f7ff f966 	bl	80034a0 <LL_ADC_GetOffsetChannel>
 80041d4:	4603      	mov	r3, r0
 80041d6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d10a      	bne.n	80041f4 <HAL_ADC_ConfigChannel+0x220>
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	2101      	movs	r1, #1
 80041e4:	4618      	mov	r0, r3
 80041e6:	f7ff f95b 	bl	80034a0 <LL_ADC_GetOffsetChannel>
 80041ea:	4603      	mov	r3, r0
 80041ec:	0e9b      	lsrs	r3, r3, #26
 80041ee:	f003 021f 	and.w	r2, r3, #31
 80041f2:	e01e      	b.n	8004232 <HAL_ADC_ConfigChannel+0x25e>
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	2101      	movs	r1, #1
 80041fa:	4618      	mov	r0, r3
 80041fc:	f7ff f950 	bl	80034a0 <LL_ADC_GetOffsetChannel>
 8004200:	4603      	mov	r3, r0
 8004202:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004206:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800420a:	fa93 f3a3 	rbit	r3, r3
 800420e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8004212:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004216:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 800421a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800421e:	2b00      	cmp	r3, #0
 8004220:	d101      	bne.n	8004226 <HAL_ADC_ConfigChannel+0x252>
    return 32U;
 8004222:	2320      	movs	r3, #32
 8004224:	e004      	b.n	8004230 <HAL_ADC_ConfigChannel+0x25c>
  return __builtin_clz(value);
 8004226:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800422a:	fab3 f383 	clz	r3, r3
 800422e:	b2db      	uxtb	r3, r3
 8004230:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8004232:	683b      	ldr	r3, [r7, #0]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800423a:	2b00      	cmp	r3, #0
 800423c:	d105      	bne.n	800424a <HAL_ADC_ConfigChannel+0x276>
 800423e:	683b      	ldr	r3, [r7, #0]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	0e9b      	lsrs	r3, r3, #26
 8004244:	f003 031f 	and.w	r3, r3, #31
 8004248:	e018      	b.n	800427c <HAL_ADC_ConfigChannel+0x2a8>
 800424a:	683b      	ldr	r3, [r7, #0]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004252:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004256:	fa93 f3a3 	rbit	r3, r3
 800425a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 800425e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8004262:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8004266:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800426a:	2b00      	cmp	r3, #0
 800426c:	d101      	bne.n	8004272 <HAL_ADC_ConfigChannel+0x29e>
    return 32U;
 800426e:	2320      	movs	r3, #32
 8004270:	e004      	b.n	800427c <HAL_ADC_ConfigChannel+0x2a8>
  return __builtin_clz(value);
 8004272:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004276:	fab3 f383 	clz	r3, r3
 800427a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800427c:	429a      	cmp	r2, r3
 800427e:	d106      	bne.n	800428e <HAL_ADC_ConfigChannel+0x2ba>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	2200      	movs	r2, #0
 8004286:	2101      	movs	r1, #1
 8004288:	4618      	mov	r0, r3
 800428a:	f7ff f91f 	bl	80034cc <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	2102      	movs	r1, #2
 8004294:	4618      	mov	r0, r3
 8004296:	f7ff f903 	bl	80034a0 <LL_ADC_GetOffsetChannel>
 800429a:	4603      	mov	r3, r0
 800429c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d10a      	bne.n	80042ba <HAL_ADC_ConfigChannel+0x2e6>
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	2102      	movs	r1, #2
 80042aa:	4618      	mov	r0, r3
 80042ac:	f7ff f8f8 	bl	80034a0 <LL_ADC_GetOffsetChannel>
 80042b0:	4603      	mov	r3, r0
 80042b2:	0e9b      	lsrs	r3, r3, #26
 80042b4:	f003 021f 	and.w	r2, r3, #31
 80042b8:	e01e      	b.n	80042f8 <HAL_ADC_ConfigChannel+0x324>
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	2102      	movs	r1, #2
 80042c0:	4618      	mov	r0, r3
 80042c2:	f7ff f8ed 	bl	80034a0 <LL_ADC_GetOffsetChannel>
 80042c6:	4603      	mov	r3, r0
 80042c8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042cc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80042d0:	fa93 f3a3 	rbit	r3, r3
 80042d4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 80042d8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80042dc:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 80042e0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d101      	bne.n	80042ec <HAL_ADC_ConfigChannel+0x318>
    return 32U;
 80042e8:	2320      	movs	r3, #32
 80042ea:	e004      	b.n	80042f6 <HAL_ADC_ConfigChannel+0x322>
  return __builtin_clz(value);
 80042ec:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80042f0:	fab3 f383 	clz	r3, r3
 80042f4:	b2db      	uxtb	r3, r3
 80042f6:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80042f8:	683b      	ldr	r3, [r7, #0]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004300:	2b00      	cmp	r3, #0
 8004302:	d105      	bne.n	8004310 <HAL_ADC_ConfigChannel+0x33c>
 8004304:	683b      	ldr	r3, [r7, #0]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	0e9b      	lsrs	r3, r3, #26
 800430a:	f003 031f 	and.w	r3, r3, #31
 800430e:	e016      	b.n	800433e <HAL_ADC_ConfigChannel+0x36a>
 8004310:	683b      	ldr	r3, [r7, #0]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004318:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800431c:	fa93 f3a3 	rbit	r3, r3
 8004320:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8004322:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004324:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8004328:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800432c:	2b00      	cmp	r3, #0
 800432e:	d101      	bne.n	8004334 <HAL_ADC_ConfigChannel+0x360>
    return 32U;
 8004330:	2320      	movs	r3, #32
 8004332:	e004      	b.n	800433e <HAL_ADC_ConfigChannel+0x36a>
  return __builtin_clz(value);
 8004334:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004338:	fab3 f383 	clz	r3, r3
 800433c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800433e:	429a      	cmp	r2, r3
 8004340:	d106      	bne.n	8004350 <HAL_ADC_ConfigChannel+0x37c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	2200      	movs	r2, #0
 8004348:	2102      	movs	r1, #2
 800434a:	4618      	mov	r0, r3
 800434c:	f7ff f8be 	bl	80034cc <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	2103      	movs	r1, #3
 8004356:	4618      	mov	r0, r3
 8004358:	f7ff f8a2 	bl	80034a0 <LL_ADC_GetOffsetChannel>
 800435c:	4603      	mov	r3, r0
 800435e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004362:	2b00      	cmp	r3, #0
 8004364:	d10a      	bne.n	800437c <HAL_ADC_ConfigChannel+0x3a8>
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	2103      	movs	r1, #3
 800436c:	4618      	mov	r0, r3
 800436e:	f7ff f897 	bl	80034a0 <LL_ADC_GetOffsetChannel>
 8004372:	4603      	mov	r3, r0
 8004374:	0e9b      	lsrs	r3, r3, #26
 8004376:	f003 021f 	and.w	r2, r3, #31
 800437a:	e017      	b.n	80043ac <HAL_ADC_ConfigChannel+0x3d8>
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	2103      	movs	r1, #3
 8004382:	4618      	mov	r0, r3
 8004384:	f7ff f88c 	bl	80034a0 <LL_ADC_GetOffsetChannel>
 8004388:	4603      	mov	r3, r0
 800438a:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800438c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800438e:	fa93 f3a3 	rbit	r3, r3
 8004392:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8004394:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004396:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8004398:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800439a:	2b00      	cmp	r3, #0
 800439c:	d101      	bne.n	80043a2 <HAL_ADC_ConfigChannel+0x3ce>
    return 32U;
 800439e:	2320      	movs	r3, #32
 80043a0:	e003      	b.n	80043aa <HAL_ADC_ConfigChannel+0x3d6>
  return __builtin_clz(value);
 80043a2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80043a4:	fab3 f383 	clz	r3, r3
 80043a8:	b2db      	uxtb	r3, r3
 80043aa:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80043ac:	683b      	ldr	r3, [r7, #0]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d105      	bne.n	80043c4 <HAL_ADC_ConfigChannel+0x3f0>
 80043b8:	683b      	ldr	r3, [r7, #0]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	0e9b      	lsrs	r3, r3, #26
 80043be:	f003 031f 	and.w	r3, r3, #31
 80043c2:	e011      	b.n	80043e8 <HAL_ADC_ConfigChannel+0x414>
 80043c4:	683b      	ldr	r3, [r7, #0]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80043ca:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80043cc:	fa93 f3a3 	rbit	r3, r3
 80043d0:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 80043d2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80043d4:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 80043d6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d101      	bne.n	80043e0 <HAL_ADC_ConfigChannel+0x40c>
    return 32U;
 80043dc:	2320      	movs	r3, #32
 80043de:	e003      	b.n	80043e8 <HAL_ADC_ConfigChannel+0x414>
  return __builtin_clz(value);
 80043e0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80043e2:	fab3 f383 	clz	r3, r3
 80043e6:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80043e8:	429a      	cmp	r2, r3
 80043ea:	d106      	bne.n	80043fa <HAL_ADC_ConfigChannel+0x426>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	2200      	movs	r2, #0
 80043f2:	2103      	movs	r1, #3
 80043f4:	4618      	mov	r0, r3
 80043f6:	f7ff f869 	bl	80034cc <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	4618      	mov	r0, r3
 8004400:	f7ff f9ec 	bl	80037dc <LL_ADC_IsEnabled>
 8004404:	4603      	mov	r3, r0
 8004406:	2b00      	cmp	r3, #0
 8004408:	f040 8140 	bne.w	800468c <HAL_ADC_ConfigChannel+0x6b8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	6818      	ldr	r0, [r3, #0]
 8004410:	683b      	ldr	r3, [r7, #0]
 8004412:	6819      	ldr	r1, [r3, #0]
 8004414:	683b      	ldr	r3, [r7, #0]
 8004416:	68db      	ldr	r3, [r3, #12]
 8004418:	461a      	mov	r2, r3
 800441a:	f7ff f939 	bl	8003690 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800441e:	683b      	ldr	r3, [r7, #0]
 8004420:	68db      	ldr	r3, [r3, #12]
 8004422:	4a8f      	ldr	r2, [pc, #572]	; (8004660 <HAL_ADC_ConfigChannel+0x68c>)
 8004424:	4293      	cmp	r3, r2
 8004426:	f040 8131 	bne.w	800468c <HAL_ADC_ConfigChannel+0x6b8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800442e:	683b      	ldr	r3, [r7, #0]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004436:	2b00      	cmp	r3, #0
 8004438:	d10b      	bne.n	8004452 <HAL_ADC_ConfigChannel+0x47e>
 800443a:	683b      	ldr	r3, [r7, #0]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	0e9b      	lsrs	r3, r3, #26
 8004440:	3301      	adds	r3, #1
 8004442:	f003 031f 	and.w	r3, r3, #31
 8004446:	2b09      	cmp	r3, #9
 8004448:	bf94      	ite	ls
 800444a:	2301      	movls	r3, #1
 800444c:	2300      	movhi	r3, #0
 800444e:	b2db      	uxtb	r3, r3
 8004450:	e019      	b.n	8004486 <HAL_ADC_ConfigChannel+0x4b2>
 8004452:	683b      	ldr	r3, [r7, #0]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004458:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800445a:	fa93 f3a3 	rbit	r3, r3
 800445e:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8004460:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004462:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8004464:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004466:	2b00      	cmp	r3, #0
 8004468:	d101      	bne.n	800446e <HAL_ADC_ConfigChannel+0x49a>
    return 32U;
 800446a:	2320      	movs	r3, #32
 800446c:	e003      	b.n	8004476 <HAL_ADC_ConfigChannel+0x4a2>
  return __builtin_clz(value);
 800446e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004470:	fab3 f383 	clz	r3, r3
 8004474:	b2db      	uxtb	r3, r3
 8004476:	3301      	adds	r3, #1
 8004478:	f003 031f 	and.w	r3, r3, #31
 800447c:	2b09      	cmp	r3, #9
 800447e:	bf94      	ite	ls
 8004480:	2301      	movls	r3, #1
 8004482:	2300      	movhi	r3, #0
 8004484:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004486:	2b00      	cmp	r3, #0
 8004488:	d079      	beq.n	800457e <HAL_ADC_ConfigChannel+0x5aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800448a:	683b      	ldr	r3, [r7, #0]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004492:	2b00      	cmp	r3, #0
 8004494:	d107      	bne.n	80044a6 <HAL_ADC_ConfigChannel+0x4d2>
 8004496:	683b      	ldr	r3, [r7, #0]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	0e9b      	lsrs	r3, r3, #26
 800449c:	3301      	adds	r3, #1
 800449e:	069b      	lsls	r3, r3, #26
 80044a0:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80044a4:	e015      	b.n	80044d2 <HAL_ADC_ConfigChannel+0x4fe>
 80044a6:	683b      	ldr	r3, [r7, #0]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80044ac:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80044ae:	fa93 f3a3 	rbit	r3, r3
 80044b2:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80044b4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80044b6:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 80044b8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d101      	bne.n	80044c2 <HAL_ADC_ConfigChannel+0x4ee>
    return 32U;
 80044be:	2320      	movs	r3, #32
 80044c0:	e003      	b.n	80044ca <HAL_ADC_ConfigChannel+0x4f6>
  return __builtin_clz(value);
 80044c2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80044c4:	fab3 f383 	clz	r3, r3
 80044c8:	b2db      	uxtb	r3, r3
 80044ca:	3301      	adds	r3, #1
 80044cc:	069b      	lsls	r3, r3, #26
 80044ce:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80044d2:	683b      	ldr	r3, [r7, #0]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d109      	bne.n	80044f2 <HAL_ADC_ConfigChannel+0x51e>
 80044de:	683b      	ldr	r3, [r7, #0]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	0e9b      	lsrs	r3, r3, #26
 80044e4:	3301      	adds	r3, #1
 80044e6:	f003 031f 	and.w	r3, r3, #31
 80044ea:	2101      	movs	r1, #1
 80044ec:	fa01 f303 	lsl.w	r3, r1, r3
 80044f0:	e017      	b.n	8004522 <HAL_ADC_ConfigChannel+0x54e>
 80044f2:	683b      	ldr	r3, [r7, #0]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80044f8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80044fa:	fa93 f3a3 	rbit	r3, r3
 80044fe:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8004500:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004502:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8004504:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004506:	2b00      	cmp	r3, #0
 8004508:	d101      	bne.n	800450e <HAL_ADC_ConfigChannel+0x53a>
    return 32U;
 800450a:	2320      	movs	r3, #32
 800450c:	e003      	b.n	8004516 <HAL_ADC_ConfigChannel+0x542>
  return __builtin_clz(value);
 800450e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004510:	fab3 f383 	clz	r3, r3
 8004514:	b2db      	uxtb	r3, r3
 8004516:	3301      	adds	r3, #1
 8004518:	f003 031f 	and.w	r3, r3, #31
 800451c:	2101      	movs	r1, #1
 800451e:	fa01 f303 	lsl.w	r3, r1, r3
 8004522:	ea42 0103 	orr.w	r1, r2, r3
 8004526:	683b      	ldr	r3, [r7, #0]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800452e:	2b00      	cmp	r3, #0
 8004530:	d10a      	bne.n	8004548 <HAL_ADC_ConfigChannel+0x574>
 8004532:	683b      	ldr	r3, [r7, #0]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	0e9b      	lsrs	r3, r3, #26
 8004538:	3301      	adds	r3, #1
 800453a:	f003 021f 	and.w	r2, r3, #31
 800453e:	4613      	mov	r3, r2
 8004540:	005b      	lsls	r3, r3, #1
 8004542:	4413      	add	r3, r2
 8004544:	051b      	lsls	r3, r3, #20
 8004546:	e018      	b.n	800457a <HAL_ADC_ConfigChannel+0x5a6>
 8004548:	683b      	ldr	r3, [r7, #0]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800454e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004550:	fa93 f3a3 	rbit	r3, r3
 8004554:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8004556:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004558:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 800455a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800455c:	2b00      	cmp	r3, #0
 800455e:	d101      	bne.n	8004564 <HAL_ADC_ConfigChannel+0x590>
    return 32U;
 8004560:	2320      	movs	r3, #32
 8004562:	e003      	b.n	800456c <HAL_ADC_ConfigChannel+0x598>
  return __builtin_clz(value);
 8004564:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004566:	fab3 f383 	clz	r3, r3
 800456a:	b2db      	uxtb	r3, r3
 800456c:	3301      	adds	r3, #1
 800456e:	f003 021f 	and.w	r2, r3, #31
 8004572:	4613      	mov	r3, r2
 8004574:	005b      	lsls	r3, r3, #1
 8004576:	4413      	add	r3, r2
 8004578:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800457a:	430b      	orrs	r3, r1
 800457c:	e081      	b.n	8004682 <HAL_ADC_ConfigChannel+0x6ae>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800457e:	683b      	ldr	r3, [r7, #0]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004586:	2b00      	cmp	r3, #0
 8004588:	d107      	bne.n	800459a <HAL_ADC_ConfigChannel+0x5c6>
 800458a:	683b      	ldr	r3, [r7, #0]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	0e9b      	lsrs	r3, r3, #26
 8004590:	3301      	adds	r3, #1
 8004592:	069b      	lsls	r3, r3, #26
 8004594:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004598:	e015      	b.n	80045c6 <HAL_ADC_ConfigChannel+0x5f2>
 800459a:	683b      	ldr	r3, [r7, #0]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80045a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045a2:	fa93 f3a3 	rbit	r3, r3
 80045a6:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 80045a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045aa:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 80045ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d101      	bne.n	80045b6 <HAL_ADC_ConfigChannel+0x5e2>
    return 32U;
 80045b2:	2320      	movs	r3, #32
 80045b4:	e003      	b.n	80045be <HAL_ADC_ConfigChannel+0x5ea>
  return __builtin_clz(value);
 80045b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045b8:	fab3 f383 	clz	r3, r3
 80045bc:	b2db      	uxtb	r3, r3
 80045be:	3301      	adds	r3, #1
 80045c0:	069b      	lsls	r3, r3, #26
 80045c2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80045c6:	683b      	ldr	r3, [r7, #0]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d109      	bne.n	80045e6 <HAL_ADC_ConfigChannel+0x612>
 80045d2:	683b      	ldr	r3, [r7, #0]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	0e9b      	lsrs	r3, r3, #26
 80045d8:	3301      	adds	r3, #1
 80045da:	f003 031f 	and.w	r3, r3, #31
 80045de:	2101      	movs	r1, #1
 80045e0:	fa01 f303 	lsl.w	r3, r1, r3
 80045e4:	e017      	b.n	8004616 <HAL_ADC_ConfigChannel+0x642>
 80045e6:	683b      	ldr	r3, [r7, #0]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80045ec:	6a3b      	ldr	r3, [r7, #32]
 80045ee:	fa93 f3a3 	rbit	r3, r3
 80045f2:	61fb      	str	r3, [r7, #28]
  return result;
 80045f4:	69fb      	ldr	r3, [r7, #28]
 80045f6:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80045f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d101      	bne.n	8004602 <HAL_ADC_ConfigChannel+0x62e>
    return 32U;
 80045fe:	2320      	movs	r3, #32
 8004600:	e003      	b.n	800460a <HAL_ADC_ConfigChannel+0x636>
  return __builtin_clz(value);
 8004602:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004604:	fab3 f383 	clz	r3, r3
 8004608:	b2db      	uxtb	r3, r3
 800460a:	3301      	adds	r3, #1
 800460c:	f003 031f 	and.w	r3, r3, #31
 8004610:	2101      	movs	r1, #1
 8004612:	fa01 f303 	lsl.w	r3, r1, r3
 8004616:	ea42 0103 	orr.w	r1, r2, r3
 800461a:	683b      	ldr	r3, [r7, #0]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004622:	2b00      	cmp	r3, #0
 8004624:	d10d      	bne.n	8004642 <HAL_ADC_ConfigChannel+0x66e>
 8004626:	683b      	ldr	r3, [r7, #0]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	0e9b      	lsrs	r3, r3, #26
 800462c:	3301      	adds	r3, #1
 800462e:	f003 021f 	and.w	r2, r3, #31
 8004632:	4613      	mov	r3, r2
 8004634:	005b      	lsls	r3, r3, #1
 8004636:	4413      	add	r3, r2
 8004638:	3b1e      	subs	r3, #30
 800463a:	051b      	lsls	r3, r3, #20
 800463c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004640:	e01e      	b.n	8004680 <HAL_ADC_ConfigChannel+0x6ac>
 8004642:	683b      	ldr	r3, [r7, #0]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004648:	697b      	ldr	r3, [r7, #20]
 800464a:	fa93 f3a3 	rbit	r3, r3
 800464e:	613b      	str	r3, [r7, #16]
  return result;
 8004650:	693b      	ldr	r3, [r7, #16]
 8004652:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8004654:	69bb      	ldr	r3, [r7, #24]
 8004656:	2b00      	cmp	r3, #0
 8004658:	d104      	bne.n	8004664 <HAL_ADC_ConfigChannel+0x690>
    return 32U;
 800465a:	2320      	movs	r3, #32
 800465c:	e006      	b.n	800466c <HAL_ADC_ConfigChannel+0x698>
 800465e:	bf00      	nop
 8004660:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8004664:	69bb      	ldr	r3, [r7, #24]
 8004666:	fab3 f383 	clz	r3, r3
 800466a:	b2db      	uxtb	r3, r3
 800466c:	3301      	adds	r3, #1
 800466e:	f003 021f 	and.w	r2, r3, #31
 8004672:	4613      	mov	r3, r2
 8004674:	005b      	lsls	r3, r3, #1
 8004676:	4413      	add	r3, r2
 8004678:	3b1e      	subs	r3, #30
 800467a:	051b      	lsls	r3, r3, #20
 800467c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004680:	430b      	orrs	r3, r1
 8004682:	683a      	ldr	r2, [r7, #0]
 8004684:	6892      	ldr	r2, [r2, #8]
 8004686:	4619      	mov	r1, r3
 8004688:	f7fe ffd6 	bl	8003638 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800468c:	683b      	ldr	r3, [r7, #0]
 800468e:	681a      	ldr	r2, [r3, #0]
 8004690:	4b3f      	ldr	r3, [pc, #252]	; (8004790 <HAL_ADC_ConfigChannel+0x7bc>)
 8004692:	4013      	ands	r3, r2
 8004694:	2b00      	cmp	r3, #0
 8004696:	d071      	beq.n	800477c <HAL_ADC_ConfigChannel+0x7a8>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004698:	483e      	ldr	r0, [pc, #248]	; (8004794 <HAL_ADC_ConfigChannel+0x7c0>)
 800469a:	f7fe fecf 	bl	800343c <LL_ADC_GetCommonPathInternalCh>
 800469e:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 80046a2:	683b      	ldr	r3, [r7, #0]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	4a3c      	ldr	r2, [pc, #240]	; (8004798 <HAL_ADC_ConfigChannel+0x7c4>)
 80046a8:	4293      	cmp	r3, r2
 80046aa:	d004      	beq.n	80046b6 <HAL_ADC_ConfigChannel+0x6e2>
 80046ac:	683b      	ldr	r3, [r7, #0]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	4a3a      	ldr	r2, [pc, #232]	; (800479c <HAL_ADC_ConfigChannel+0x7c8>)
 80046b2:	4293      	cmp	r3, r2
 80046b4:	d127      	bne.n	8004706 <HAL_ADC_ConfigChannel+0x732>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80046b6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80046ba:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d121      	bne.n	8004706 <HAL_ADC_ConfigChannel+0x732>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80046ca:	d157      	bne.n	800477c <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80046cc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80046d0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80046d4:	4619      	mov	r1, r3
 80046d6:	482f      	ldr	r0, [pc, #188]	; (8004794 <HAL_ADC_ConfigChannel+0x7c0>)
 80046d8:	f7fe fe9d 	bl	8003416 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80046dc:	4b30      	ldr	r3, [pc, #192]	; (80047a0 <HAL_ADC_ConfigChannel+0x7cc>)
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	099b      	lsrs	r3, r3, #6
 80046e2:	4a30      	ldr	r2, [pc, #192]	; (80047a4 <HAL_ADC_ConfigChannel+0x7d0>)
 80046e4:	fba2 2303 	umull	r2, r3, r2, r3
 80046e8:	099b      	lsrs	r3, r3, #6
 80046ea:	1c5a      	adds	r2, r3, #1
 80046ec:	4613      	mov	r3, r2
 80046ee:	005b      	lsls	r3, r3, #1
 80046f0:	4413      	add	r3, r2
 80046f2:	009b      	lsls	r3, r3, #2
 80046f4:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80046f6:	e002      	b.n	80046fe <HAL_ADC_ConfigChannel+0x72a>
          {
            wait_loop_index--;
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	3b01      	subs	r3, #1
 80046fc:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	2b00      	cmp	r3, #0
 8004702:	d1f9      	bne.n	80046f8 <HAL_ADC_ConfigChannel+0x724>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004704:	e03a      	b.n	800477c <HAL_ADC_ConfigChannel+0x7a8>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8004706:	683b      	ldr	r3, [r7, #0]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	4a27      	ldr	r2, [pc, #156]	; (80047a8 <HAL_ADC_ConfigChannel+0x7d4>)
 800470c:	4293      	cmp	r3, r2
 800470e:	d113      	bne.n	8004738 <HAL_ADC_ConfigChannel+0x764>
 8004710:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004714:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004718:	2b00      	cmp	r3, #0
 800471a:	d10d      	bne.n	8004738 <HAL_ADC_ConfigChannel+0x764>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	4a22      	ldr	r2, [pc, #136]	; (80047ac <HAL_ADC_ConfigChannel+0x7d8>)
 8004722:	4293      	cmp	r3, r2
 8004724:	d02a      	beq.n	800477c <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004726:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800472a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800472e:	4619      	mov	r1, r3
 8004730:	4818      	ldr	r0, [pc, #96]	; (8004794 <HAL_ADC_ConfigChannel+0x7c0>)
 8004732:	f7fe fe70 	bl	8003416 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004736:	e021      	b.n	800477c <HAL_ADC_ConfigChannel+0x7a8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8004738:	683b      	ldr	r3, [r7, #0]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	4a1c      	ldr	r2, [pc, #112]	; (80047b0 <HAL_ADC_ConfigChannel+0x7dc>)
 800473e:	4293      	cmp	r3, r2
 8004740:	d11c      	bne.n	800477c <HAL_ADC_ConfigChannel+0x7a8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8004742:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004746:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800474a:	2b00      	cmp	r3, #0
 800474c:	d116      	bne.n	800477c <HAL_ADC_ConfigChannel+0x7a8>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	4a16      	ldr	r2, [pc, #88]	; (80047ac <HAL_ADC_ConfigChannel+0x7d8>)
 8004754:	4293      	cmp	r3, r2
 8004756:	d011      	beq.n	800477c <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004758:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800475c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004760:	4619      	mov	r1, r3
 8004762:	480c      	ldr	r0, [pc, #48]	; (8004794 <HAL_ADC_ConfigChannel+0x7c0>)
 8004764:	f7fe fe57 	bl	8003416 <LL_ADC_SetCommonPathInternalCh>
 8004768:	e008      	b.n	800477c <HAL_ADC_ConfigChannel+0x7a8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800476e:	f043 0220 	orr.w	r2, r3, #32
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8004776:	2301      	movs	r3, #1
 8004778:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	2200      	movs	r2, #0
 8004780:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8004784:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8004788:	4618      	mov	r0, r3
 800478a:	37d8      	adds	r7, #216	; 0xd8
 800478c:	46bd      	mov	sp, r7
 800478e:	bd80      	pop	{r7, pc}
 8004790:	80080000 	.word	0x80080000
 8004794:	50000300 	.word	0x50000300
 8004798:	c3210000 	.word	0xc3210000
 800479c:	90c00010 	.word	0x90c00010
 80047a0:	2000001c 	.word	0x2000001c
 80047a4:	053e2d63 	.word	0x053e2d63
 80047a8:	c7520000 	.word	0xc7520000
 80047ac:	50000100 	.word	0x50000100
 80047b0:	cb840000 	.word	0xcb840000

080047b4 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80047b4:	b580      	push	{r7, lr}
 80047b6:	b084      	sub	sp, #16
 80047b8:	af00      	add	r7, sp, #0
 80047ba:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	4618      	mov	r0, r3
 80047c2:	f7ff f80b 	bl	80037dc <LL_ADC_IsEnabled>
 80047c6:	4603      	mov	r3, r0
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d14d      	bne.n	8004868 <ADC_Enable+0xb4>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	689a      	ldr	r2, [r3, #8]
 80047d2:	4b28      	ldr	r3, [pc, #160]	; (8004874 <ADC_Enable+0xc0>)
 80047d4:	4013      	ands	r3, r2
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d00d      	beq.n	80047f6 <ADC_Enable+0x42>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80047de:	f043 0210 	orr.w	r2, r3, #16
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80047ea:	f043 0201 	orr.w	r2, r3, #1
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 80047f2:	2301      	movs	r3, #1
 80047f4:	e039      	b.n	800486a <ADC_Enable+0xb6>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	4618      	mov	r0, r3
 80047fc:	f7fe ffda 	bl	80037b4 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8004800:	f7fe fdc8 	bl	8003394 <HAL_GetTick>
 8004804:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004806:	e028      	b.n	800485a <ADC_Enable+0xa6>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	4618      	mov	r0, r3
 800480e:	f7fe ffe5 	bl	80037dc <LL_ADC_IsEnabled>
 8004812:	4603      	mov	r3, r0
 8004814:	2b00      	cmp	r3, #0
 8004816:	d104      	bne.n	8004822 <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	4618      	mov	r0, r3
 800481e:	f7fe ffc9 	bl	80037b4 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8004822:	f7fe fdb7 	bl	8003394 <HAL_GetTick>
 8004826:	4602      	mov	r2, r0
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	1ad3      	subs	r3, r2, r3
 800482c:	2b02      	cmp	r3, #2
 800482e:	d914      	bls.n	800485a <ADC_Enable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	f003 0301 	and.w	r3, r3, #1
 800483a:	2b01      	cmp	r3, #1
 800483c:	d00d      	beq.n	800485a <ADC_Enable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004842:	f043 0210 	orr.w	r2, r3, #16
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800484e:	f043 0201 	orr.w	r2, r3, #1
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 8004856:	2301      	movs	r3, #1
 8004858:	e007      	b.n	800486a <ADC_Enable+0xb6>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	f003 0301 	and.w	r3, r3, #1
 8004864:	2b01      	cmp	r3, #1
 8004866:	d1cf      	bne.n	8004808 <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8004868:	2300      	movs	r3, #0
}
 800486a:	4618      	mov	r0, r3
 800486c:	3710      	adds	r7, #16
 800486e:	46bd      	mov	sp, r7
 8004870:	bd80      	pop	{r7, pc}
 8004872:	bf00      	nop
 8004874:	8000003f 	.word	0x8000003f

08004878 <LL_ADC_SetCommonPathInternalCh>:
{
 8004878:	b480      	push	{r7}
 800487a:	b083      	sub	sp, #12
 800487c:	af00      	add	r7, sp, #0
 800487e:	6078      	str	r0, [r7, #4]
 8004880:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	689b      	ldr	r3, [r3, #8]
 8004886:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 800488a:	683b      	ldr	r3, [r7, #0]
 800488c:	431a      	orrs	r2, r3
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	609a      	str	r2, [r3, #8]
}
 8004892:	bf00      	nop
 8004894:	370c      	adds	r7, #12
 8004896:	46bd      	mov	sp, r7
 8004898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800489c:	4770      	bx	lr

0800489e <LL_ADC_GetCommonPathInternalCh>:
{
 800489e:	b480      	push	{r7}
 80048a0:	b083      	sub	sp, #12
 80048a2:	af00      	add	r7, sp, #0
 80048a4:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	689b      	ldr	r3, [r3, #8]
 80048aa:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80048ae:	4618      	mov	r0, r3
 80048b0:	370c      	adds	r7, #12
 80048b2:	46bd      	mov	sp, r7
 80048b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048b8:	4770      	bx	lr
	...

080048bc <LL_ADC_SetOffset>:
{
 80048bc:	b480      	push	{r7}
 80048be:	b087      	sub	sp, #28
 80048c0:	af00      	add	r7, sp, #0
 80048c2:	60f8      	str	r0, [r7, #12]
 80048c4:	60b9      	str	r1, [r7, #8]
 80048c6:	607a      	str	r2, [r7, #4]
 80048c8:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	3360      	adds	r3, #96	; 0x60
 80048ce:	461a      	mov	r2, r3
 80048d0:	68bb      	ldr	r3, [r7, #8]
 80048d2:	009b      	lsls	r3, r3, #2
 80048d4:	4413      	add	r3, r2
 80048d6:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg,
 80048d8:	697b      	ldr	r3, [r7, #20]
 80048da:	681a      	ldr	r2, [r3, #0]
 80048dc:	4b08      	ldr	r3, [pc, #32]	; (8004900 <LL_ADC_SetOffset+0x44>)
 80048de:	4013      	ands	r3, r2
 80048e0:	687a      	ldr	r2, [r7, #4]
 80048e2:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 80048e6:	683a      	ldr	r2, [r7, #0]
 80048e8:	430a      	orrs	r2, r1
 80048ea:	4313      	orrs	r3, r2
 80048ec:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80048f0:	697b      	ldr	r3, [r7, #20]
 80048f2:	601a      	str	r2, [r3, #0]
}
 80048f4:	bf00      	nop
 80048f6:	371c      	adds	r7, #28
 80048f8:	46bd      	mov	sp, r7
 80048fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048fe:	4770      	bx	lr
 8004900:	03fff000 	.word	0x03fff000

08004904 <LL_ADC_GetOffsetChannel>:
{
 8004904:	b480      	push	{r7}
 8004906:	b085      	sub	sp, #20
 8004908:	af00      	add	r7, sp, #0
 800490a:	6078      	str	r0, [r7, #4]
 800490c:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	3360      	adds	r3, #96	; 0x60
 8004912:	461a      	mov	r2, r3
 8004914:	683b      	ldr	r3, [r7, #0]
 8004916:	009b      	lsls	r3, r3, #2
 8004918:	4413      	add	r3, r2
 800491a:	60fb      	str	r3, [r7, #12]
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8004924:	4618      	mov	r0, r3
 8004926:	3714      	adds	r7, #20
 8004928:	46bd      	mov	sp, r7
 800492a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800492e:	4770      	bx	lr

08004930 <LL_ADC_SetOffsetState>:
{
 8004930:	b480      	push	{r7}
 8004932:	b087      	sub	sp, #28
 8004934:	af00      	add	r7, sp, #0
 8004936:	60f8      	str	r0, [r7, #12]
 8004938:	60b9      	str	r1, [r7, #8]
 800493a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	3360      	adds	r3, #96	; 0x60
 8004940:	461a      	mov	r2, r3
 8004942:	68bb      	ldr	r3, [r7, #8]
 8004944:	009b      	lsls	r3, r3, #2
 8004946:	4413      	add	r3, r2
 8004948:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg,
 800494a:	697b      	ldr	r3, [r7, #20]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	431a      	orrs	r2, r3
 8004956:	697b      	ldr	r3, [r7, #20]
 8004958:	601a      	str	r2, [r3, #0]
}
 800495a:	bf00      	nop
 800495c:	371c      	adds	r7, #28
 800495e:	46bd      	mov	sp, r7
 8004960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004964:	4770      	bx	lr

08004966 <LL_ADC_SetOffsetSign>:
{
 8004966:	b480      	push	{r7}
 8004968:	b087      	sub	sp, #28
 800496a:	af00      	add	r7, sp, #0
 800496c:	60f8      	str	r0, [r7, #12]
 800496e:	60b9      	str	r1, [r7, #8]
 8004970:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	3360      	adds	r3, #96	; 0x60
 8004976:	461a      	mov	r2, r3
 8004978:	68bb      	ldr	r3, [r7, #8]
 800497a:	009b      	lsls	r3, r3, #2
 800497c:	4413      	add	r3, r2
 800497e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg,
 8004980:	697b      	ldr	r3, [r7, #20]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	431a      	orrs	r2, r3
 800498c:	697b      	ldr	r3, [r7, #20]
 800498e:	601a      	str	r2, [r3, #0]
}
 8004990:	bf00      	nop
 8004992:	371c      	adds	r7, #28
 8004994:	46bd      	mov	sp, r7
 8004996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800499a:	4770      	bx	lr

0800499c <LL_ADC_SetOffsetSaturation>:
{
 800499c:	b480      	push	{r7}
 800499e:	b087      	sub	sp, #28
 80049a0:	af00      	add	r7, sp, #0
 80049a2:	60f8      	str	r0, [r7, #12]
 80049a4:	60b9      	str	r1, [r7, #8]
 80049a6:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	3360      	adds	r3, #96	; 0x60
 80049ac:	461a      	mov	r2, r3
 80049ae:	68bb      	ldr	r3, [r7, #8]
 80049b0:	009b      	lsls	r3, r3, #2
 80049b2:	4413      	add	r3, r2
 80049b4:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg,
 80049b6:	697b      	ldr	r3, [r7, #20]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	431a      	orrs	r2, r3
 80049c2:	697b      	ldr	r3, [r7, #20]
 80049c4:	601a      	str	r2, [r3, #0]
}
 80049c6:	bf00      	nop
 80049c8:	371c      	adds	r7, #28
 80049ca:	46bd      	mov	sp, r7
 80049cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049d0:	4770      	bx	lr

080049d2 <LL_ADC_SetSamplingTimeCommonConfig>:
{
 80049d2:	b480      	push	{r7}
 80049d4:	b083      	sub	sp, #12
 80049d6:	af00      	add	r7, sp, #0
 80049d8:	6078      	str	r0, [r7, #4]
 80049da:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	695b      	ldr	r3, [r3, #20]
 80049e0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80049e4:	683b      	ldr	r3, [r7, #0]
 80049e6:	431a      	orrs	r2, r3
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	615a      	str	r2, [r3, #20]
}
 80049ec:	bf00      	nop
 80049ee:	370c      	adds	r7, #12
 80049f0:	46bd      	mov	sp, r7
 80049f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049f6:	4770      	bx	lr

080049f8 <LL_ADC_INJ_GetTrigAuto>:
{
 80049f8:	b480      	push	{r7}
 80049fa:	b083      	sub	sp, #12
 80049fc:	af00      	add	r7, sp, #0
 80049fe:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCx->CFGR, ADC_CFGR_JAUTO));
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	68db      	ldr	r3, [r3, #12]
 8004a04:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
}
 8004a08:	4618      	mov	r0, r3
 8004a0a:	370c      	adds	r7, #12
 8004a0c:	46bd      	mov	sp, r7
 8004a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a12:	4770      	bx	lr

08004a14 <LL_ADC_SetChannelSamplingTime>:
{
 8004a14:	b480      	push	{r7}
 8004a16:	b087      	sub	sp, #28
 8004a18:	af00      	add	r7, sp, #0
 8004a1a:	60f8      	str	r0, [r7, #12]
 8004a1c:	60b9      	str	r1, [r7, #8]
 8004a1e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	3314      	adds	r3, #20
 8004a24:	461a      	mov	r2, r3
 8004a26:	68bb      	ldr	r3, [r7, #8]
 8004a28:	0e5b      	lsrs	r3, r3, #25
 8004a2a:	009b      	lsls	r3, r3, #2
 8004a2c:	f003 0304 	and.w	r3, r3, #4
 8004a30:	4413      	add	r3, r2
 8004a32:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg,
 8004a34:	697b      	ldr	r3, [r7, #20]
 8004a36:	681a      	ldr	r2, [r3, #0]
 8004a38:	68bb      	ldr	r3, [r7, #8]
 8004a3a:	0d1b      	lsrs	r3, r3, #20
 8004a3c:	f003 031f 	and.w	r3, r3, #31
 8004a40:	2107      	movs	r1, #7
 8004a42:	fa01 f303 	lsl.w	r3, r1, r3
 8004a46:	43db      	mvns	r3, r3
 8004a48:	401a      	ands	r2, r3
 8004a4a:	68bb      	ldr	r3, [r7, #8]
 8004a4c:	0d1b      	lsrs	r3, r3, #20
 8004a4e:	f003 031f 	and.w	r3, r3, #31
 8004a52:	6879      	ldr	r1, [r7, #4]
 8004a54:	fa01 f303 	lsl.w	r3, r1, r3
 8004a58:	431a      	orrs	r2, r3
 8004a5a:	697b      	ldr	r3, [r7, #20]
 8004a5c:	601a      	str	r2, [r3, #0]
}
 8004a5e:	bf00      	nop
 8004a60:	371c      	adds	r7, #28
 8004a62:	46bd      	mov	sp, r7
 8004a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a68:	4770      	bx	lr
	...

08004a6c <LL_ADC_SetChannelSingleDiff>:
{
 8004a6c:	b480      	push	{r7}
 8004a6e:	b085      	sub	sp, #20
 8004a70:	af00      	add	r7, sp, #0
 8004a72:	60f8      	str	r0, [r7, #12]
 8004a74:	60b9      	str	r1, [r7, #8]
 8004a76:	607a      	str	r2, [r7, #4]
  if (SingleDiff == LL_ADC_DIFFERENTIAL_ENDED)
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	4a0f      	ldr	r2, [pc, #60]	; (8004ab8 <LL_ADC_SetChannelSingleDiff+0x4c>)
 8004a7c:	4293      	cmp	r3, r2
 8004a7e:	d10a      	bne.n	8004a96 <LL_ADC_SetChannelSingleDiff+0x2a>
    SET_BIT(ADCx->DIFSEL,
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8004a86:	68bb      	ldr	r3, [r7, #8]
 8004a88:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004a8c:	431a      	orrs	r2, r3
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
 8004a94:	e00a      	b.n	8004aac <LL_ADC_SetChannelSingleDiff+0x40>
    CLEAR_BIT(ADCx->DIFSEL,
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8004a9c:	68bb      	ldr	r3, [r7, #8]
 8004a9e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004aa2:	43db      	mvns	r3, r3
 8004aa4:	401a      	ands	r2, r3
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
 8004aac:	bf00      	nop
 8004aae:	3714      	adds	r7, #20
 8004ab0:	46bd      	mov	sp, r7
 8004ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ab6:	4770      	bx	lr
 8004ab8:	407f0000 	.word	0x407f0000

08004abc <LL_ADC_GetMultimode>:
{
 8004abc:	b480      	push	{r7}
 8004abe:	b083      	sub	sp, #12
 8004ac0:	af00      	add	r7, sp, #0
 8004ac2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	689b      	ldr	r3, [r3, #8]
 8004ac8:	f003 031f 	and.w	r3, r3, #31
}
 8004acc:	4618      	mov	r0, r3
 8004ace:	370c      	adds	r7, #12
 8004ad0:	46bd      	mov	sp, r7
 8004ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ad6:	4770      	bx	lr

08004ad8 <LL_ADC_IsEnabled>:
{
 8004ad8:	b480      	push	{r7}
 8004ada:	b083      	sub	sp, #12
 8004adc:	af00      	add	r7, sp, #0
 8004ade:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	689b      	ldr	r3, [r3, #8]
 8004ae4:	f003 0301 	and.w	r3, r3, #1
 8004ae8:	2b01      	cmp	r3, #1
 8004aea:	d101      	bne.n	8004af0 <LL_ADC_IsEnabled+0x18>
 8004aec:	2301      	movs	r3, #1
 8004aee:	e000      	b.n	8004af2 <LL_ADC_IsEnabled+0x1a>
 8004af0:	2300      	movs	r3, #0
}
 8004af2:	4618      	mov	r0, r3
 8004af4:	370c      	adds	r7, #12
 8004af6:	46bd      	mov	sp, r7
 8004af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004afc:	4770      	bx	lr

08004afe <LL_ADC_REG_IsConversionOngoing>:
{
 8004afe:	b480      	push	{r7}
 8004b00:	b083      	sub	sp, #12
 8004b02:	af00      	add	r7, sp, #0
 8004b04:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	689b      	ldr	r3, [r3, #8]
 8004b0a:	f003 0304 	and.w	r3, r3, #4
 8004b0e:	2b04      	cmp	r3, #4
 8004b10:	d101      	bne.n	8004b16 <LL_ADC_REG_IsConversionOngoing+0x18>
 8004b12:	2301      	movs	r3, #1
 8004b14:	e000      	b.n	8004b18 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8004b16:	2300      	movs	r3, #0
}
 8004b18:	4618      	mov	r0, r3
 8004b1a:	370c      	adds	r7, #12
 8004b1c:	46bd      	mov	sp, r7
 8004b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b22:	4770      	bx	lr

08004b24 <LL_ADC_INJ_StartConversion>:
{
 8004b24:	b480      	push	{r7}
 8004b26:	b083      	sub	sp, #12
 8004b28:	af00      	add	r7, sp, #0
 8004b2a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	689b      	ldr	r3, [r3, #8]
 8004b30:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004b34:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8004b38:	f043 0208 	orr.w	r2, r3, #8
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	609a      	str	r2, [r3, #8]
}
 8004b40:	bf00      	nop
 8004b42:	370c      	adds	r7, #12
 8004b44:	46bd      	mov	sp, r7
 8004b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b4a:	4770      	bx	lr

08004b4c <LL_ADC_INJ_IsConversionOngoing>:
{
 8004b4c:	b480      	push	{r7}
 8004b4e:	b083      	sub	sp, #12
 8004b50:	af00      	add	r7, sp, #0
 8004b52:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	689b      	ldr	r3, [r3, #8]
 8004b58:	f003 0308 	and.w	r3, r3, #8
 8004b5c:	2b08      	cmp	r3, #8
 8004b5e:	d101      	bne.n	8004b64 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8004b60:	2301      	movs	r3, #1
 8004b62:	e000      	b.n	8004b66 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8004b64:	2300      	movs	r3, #0
}
 8004b66:	4618      	mov	r0, r3
 8004b68:	370c      	adds	r7, #12
 8004b6a:	46bd      	mov	sp, r7
 8004b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b70:	4770      	bx	lr
	...

08004b74 <HAL_ADCEx_InjectedStart_IT>:
  *         For ADC master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedStart_IT(ADC_HandleTypeDef *hadc)
{
 8004b74:	b580      	push	{r7, lr}
 8004b76:	b086      	sub	sp, #24
 8004b78:	af00      	add	r7, sp, #0
 8004b7a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  uint32_t tmp_config_injected_queue;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004b7c:	486e      	ldr	r0, [pc, #440]	; (8004d38 <HAL_ADCEx_InjectedStart_IT+0x1c4>)
 8004b7e:	f7ff ff9d 	bl	8004abc <LL_ADC_GetMultimode>
 8004b82:	6178      	str	r0, [r7, #20]
#endif

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	4618      	mov	r0, r3
 8004b8a:	f7ff ffdf 	bl	8004b4c <LL_ADC_INJ_IsConversionOngoing>
 8004b8e:	4603      	mov	r3, r0
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d001      	beq.n	8004b98 <HAL_ADCEx_InjectedStart_IT+0x24>
  {
    return HAL_BUSY;
 8004b94:	2302      	movs	r3, #2
 8004b96:	e0ca      	b.n	8004d2e <HAL_ADCEx_InjectedStart_IT+0x1ba>
       If JQDIS is not set at that point, returns an error
       - since software trigger detection is disabled. User needs to
       resort to HAL_ADCEx_DisableInjectedQueue() API to set JQDIS.
       - or (if JQDIS is intentionally reset) since JEXTEN = 0 which means
         the queue is empty */
    tmp_config_injected_queue = READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JQDIS);
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	68db      	ldr	r3, [r3, #12]
 8004b9e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004ba2:	613b      	str	r3, [r7, #16]

    if ((READ_BIT(hadc->Instance->JSQR, ADC_JSQR_JEXTEN) == 0UL)
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004baa:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d10a      	bne.n	8004bc8 <HAL_ADCEx_InjectedStart_IT+0x54>
        && (tmp_config_injected_queue == 0UL)
 8004bb2:	693b      	ldr	r3, [r7, #16]
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d107      	bne.n	8004bc8 <HAL_ADCEx_InjectedStart_IT+0x54>
       )
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004bbc:	f043 0220 	orr.w	r2, r3, #32
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	65da      	str	r2, [r3, #92]	; 0x5c
      return HAL_ERROR;
 8004bc4:	2301      	movs	r3, #1
 8004bc6:	e0b2      	b.n	8004d2e <HAL_ADCEx_InjectedStart_IT+0x1ba>
    }

    /* Process locked */
    __HAL_LOCK(hadc);
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8004bce:	2b01      	cmp	r3, #1
 8004bd0:	d101      	bne.n	8004bd6 <HAL_ADCEx_InjectedStart_IT+0x62>
 8004bd2:	2302      	movs	r3, #2
 8004bd4:	e0ab      	b.n	8004d2e <HAL_ADCEx_InjectedStart_IT+0x1ba>
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	2201      	movs	r2, #1
 8004bda:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8004bde:	6878      	ldr	r0, [r7, #4]
 8004be0:	f7ff fde8 	bl	80047b4 <ADC_Enable>
 8004be4:	4603      	mov	r3, r0
 8004be6:	73fb      	strb	r3, [r7, #15]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8004be8:	7bfb      	ldrb	r3, [r7, #15]
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	f040 809a 	bne.w	8004d24 <HAL_ADCEx_InjectedStart_IT+0x1b0>
    {
      /* Check if a regular conversion is ongoing */
      if ((hadc->State & HAL_ADC_STATE_REG_BUSY) != 0UL)
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004bf4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d006      	beq.n	8004c0a <HAL_ADCEx_InjectedStart_IT+0x96>
      {
        /* Reset ADC error code field related to injected conversions only */
        CLEAR_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004c00:	f023 0208 	bic.w	r2, r3, #8
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	661a      	str	r2, [r3, #96]	; 0x60
 8004c08:	e002      	b.n	8004c10 <HAL_ADCEx_InjectedStart_IT+0x9c>
      }
      else
      {
        /* Set ADC error code to none */
        ADC_CLEAR_ERRORCODE(hadc);
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	2200      	movs	r2, #0
 8004c0e:	661a      	str	r2, [r3, #96]	; 0x60
      }

      /* Set ADC state                                                        */
      /* - Clear state bitfield related to injected group conversion results  */
      /* - Set state bitfield related to injected operation                   */
      ADC_STATE_CLR_SET(hadc->State,
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c14:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8004c18:	f023 0301 	bic.w	r3, r3, #1
 8004c1c:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	65da      	str	r2, [r3, #92]	; 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	4a44      	ldr	r2, [pc, #272]	; (8004d3c <HAL_ADCEx_InjectedStart_IT+0x1c8>)
 8004c2a:	4293      	cmp	r3, r2
 8004c2c:	d002      	beq.n	8004c34 <HAL_ADCEx_InjectedStart_IT+0xc0>
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	e001      	b.n	8004c38 <HAL_ADCEx_InjectedStart_IT+0xc4>
 8004c34:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8004c38:	687a      	ldr	r2, [r7, #4]
 8004c3a:	6812      	ldr	r2, [r2, #0]
 8004c3c:	4293      	cmp	r3, r2
 8004c3e:	d002      	beq.n	8004c46 <HAL_ADCEx_InjectedStart_IT+0xd2>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8004c40:	697b      	ldr	r3, [r7, #20]
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d105      	bne.n	8004c52 <HAL_ADCEx_InjectedStart_IT+0xde>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c4a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	65da      	str	r2, [r3, #92]	; 0x5c
      }
#endif

      /* Clear ADC group injected group conversion flag */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JEOC | ADC_FLAG_JEOS));
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	2260      	movs	r2, #96	; 0x60
 8004c58:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	2200      	movs	r2, #0
 8004c5e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

      /* Enable ADC Injected context queue overflow interrupt if this feature   */
      /* is enabled.                                                            */
      if ((hadc->Instance->CFGR & ADC_CFGR_JQM) != 0UL)
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	68db      	ldr	r3, [r3, #12]
 8004c68:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d007      	beq.n	8004c80 <HAL_ADCEx_InjectedStart_IT+0x10c>
      {
        __HAL_ADC_ENABLE_IT(hadc, ADC_FLAG_JQOVF);
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	685a      	ldr	r2, [r3, #4]
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004c7e:	605a      	str	r2, [r3, #4]
      }

      /* Enable ADC end of conversion interrupt */
      switch (hadc->Init.EOCSelection)
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	699b      	ldr	r3, [r3, #24]
 8004c84:	2b08      	cmp	r3, #8
 8004c86:	d110      	bne.n	8004caa <HAL_ADCEx_InjectedStart_IT+0x136>
      {
        case ADC_EOC_SEQ_CONV:
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	685a      	ldr	r2, [r3, #4]
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	f022 0220 	bic.w	r2, r2, #32
 8004c96:	605a      	str	r2, [r3, #4]
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOS);
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	685a      	ldr	r2, [r3, #4]
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004ca6:	605a      	str	r2, [r3, #4]
          break;
 8004ca8:	e010      	b.n	8004ccc <HAL_ADCEx_InjectedStart_IT+0x158>
        /* case ADC_EOC_SINGLE_CONV */
        default:
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOS);
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	685a      	ldr	r2, [r3, #4]
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004cb8:	605a      	str	r2, [r3, #4]
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	685a      	ldr	r2, [r3, #4]
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	f042 0220 	orr.w	r2, r2, #32
 8004cc8:	605a      	str	r2, [r3, #4]
          break;
 8004cca:	bf00      	nop
      /*    - if multimode only concerns regular conversion, ADC is enabled     */
      /*     and conversion is started.                                         */
      /* If ADC is master or independent,                                       */
      /*    - ADC is enabled and conversion is started.                         */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	4a1a      	ldr	r2, [pc, #104]	; (8004d3c <HAL_ADCEx_InjectedStart_IT+0x1c8>)
 8004cd2:	4293      	cmp	r3, r2
 8004cd4:	d002      	beq.n	8004cdc <HAL_ADCEx_InjectedStart_IT+0x168>
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	e001      	b.n	8004ce0 <HAL_ADCEx_InjectedStart_IT+0x16c>
 8004cdc:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8004ce0:	687a      	ldr	r2, [r7, #4]
 8004ce2:	6812      	ldr	r2, [r2, #0]
 8004ce4:	4293      	cmp	r3, r2
 8004ce6:	d008      	beq.n	8004cfa <HAL_ADCEx_InjectedStart_IT+0x186>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8004ce8:	697b      	ldr	r3, [r7, #20]
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d005      	beq.n	8004cfa <HAL_ADCEx_InjectedStart_IT+0x186>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 8004cee:	697b      	ldr	r3, [r7, #20]
 8004cf0:	2b06      	cmp	r3, #6
 8004cf2:	d002      	beq.n	8004cfa <HAL_ADCEx_InjectedStart_IT+0x186>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8004cf4:	697b      	ldr	r3, [r7, #20]
 8004cf6:	2b07      	cmp	r3, #7
 8004cf8:	d10d      	bne.n	8004d16 <HAL_ADCEx_InjectedStart_IT+0x1a2>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode injected conversions enabled */
        if (LL_ADC_INJ_GetTrigAuto(hadc->Instance) == LL_ADC_INJ_TRIG_INDEPENDENT)
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	4618      	mov	r0, r3
 8004d00:	f7ff fe7a 	bl	80049f8 <LL_ADC_INJ_GetTrigAuto>
 8004d04:	4603      	mov	r3, r0
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d110      	bne.n	8004d2c <HAL_ADCEx_InjectedStart_IT+0x1b8>
        {
          LL_ADC_INJ_StartConversion(hadc->Instance);
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	4618      	mov	r0, r3
 8004d10:	f7ff ff08 	bl	8004b24 <LL_ADC_INJ_StartConversion>
        if (LL_ADC_INJ_GetTrigAuto(hadc->Instance) == LL_ADC_INJ_TRIG_INDEPENDENT)
 8004d14:	e00a      	b.n	8004d2c <HAL_ADCEx_InjectedStart_IT+0x1b8>
        }
      }
      else
      {
        /* ADC instance is not a multimode slave instance with multimode injected conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004d1a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	65da      	str	r2, [r3, #92]	; 0x5c
 8004d22:	e003      	b.n	8004d2c <HAL_ADCEx_InjectedStart_IT+0x1b8>

    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	2200      	movs	r2, #0
 8004d28:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
    }

    /* Return function status */
    return tmp_hal_status;
 8004d2c:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8004d2e:	4618      	mov	r0, r3
 8004d30:	3718      	adds	r7, #24
 8004d32:	46bd      	mov	sp, r7
 8004d34:	bd80      	pop	{r7, pc}
 8004d36:	bf00      	nop
 8004d38:	50000300 	.word	0x50000300
 8004d3c:	50000100 	.word	0x50000100

08004d40 <HAL_ADCEx_InjectedGetValue>:
  *            @arg @ref ADC_INJECTED_RANK_3 ADC group injected rank 3
  *            @arg @ref ADC_INJECTED_RANK_4 ADC group injected rank 4
  * @retval ADC group injected conversion data
  */
uint32_t HAL_ADCEx_InjectedGetValue(ADC_HandleTypeDef *hadc, uint32_t InjectedRank)
{
 8004d40:	b480      	push	{r7}
 8004d42:	b085      	sub	sp, #20
 8004d44:	af00      	add	r7, sp, #0
 8004d46:	6078      	str	r0, [r7, #4]
 8004d48:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_INJECTED_RANK(InjectedRank));

  /* Get ADC converted value */
  switch (InjectedRank)
 8004d4a:	683b      	ldr	r3, [r7, #0]
 8004d4c:	f240 321b 	movw	r2, #795	; 0x31b
 8004d50:	4293      	cmp	r3, r2
 8004d52:	d00e      	beq.n	8004d72 <HAL_ADCEx_InjectedGetValue+0x32>
 8004d54:	683b      	ldr	r3, [r7, #0]
 8004d56:	f5b3 7f47 	cmp.w	r3, #796	; 0x31c
 8004d5a:	d21c      	bcs.n	8004d96 <HAL_ADCEx_InjectedGetValue+0x56>
 8004d5c:	683b      	ldr	r3, [r7, #0]
 8004d5e:	f240 120f 	movw	r2, #271	; 0x10f
 8004d62:	4293      	cmp	r3, r2
 8004d64:	d011      	beq.n	8004d8a <HAL_ADCEx_InjectedGetValue+0x4a>
 8004d66:	683b      	ldr	r3, [r7, #0]
 8004d68:	f240 2215 	movw	r2, #533	; 0x215
 8004d6c:	4293      	cmp	r3, r2
 8004d6e:	d006      	beq.n	8004d7e <HAL_ADCEx_InjectedGetValue+0x3e>
 8004d70:	e011      	b.n	8004d96 <HAL_ADCEx_InjectedGetValue+0x56>
  {
    case ADC_INJECTED_RANK_4:
      tmp_jdr = hadc->Instance->JDR4;
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004d7a:	60fb      	str	r3, [r7, #12]
      break;
 8004d7c:	e011      	b.n	8004da2 <HAL_ADCEx_InjectedGetValue+0x62>
    case ADC_INJECTED_RANK_3:
      tmp_jdr = hadc->Instance->JDR3;
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d86:	60fb      	str	r3, [r7, #12]
      break;
 8004d88:	e00b      	b.n	8004da2 <HAL_ADCEx_InjectedGetValue+0x62>
    case ADC_INJECTED_RANK_2:
      tmp_jdr = hadc->Instance->JDR2;
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004d92:	60fb      	str	r3, [r7, #12]
      break;
 8004d94:	e005      	b.n	8004da2 <HAL_ADCEx_InjectedGetValue+0x62>
    case ADC_INJECTED_RANK_1:
    default:
      tmp_jdr = hadc->Instance->JDR1;
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004d9e:	60fb      	str	r3, [r7, #12]
      break;
 8004da0:	bf00      	nop
  }

  /* Return ADC converted value */
  return tmp_jdr;
 8004da2:	68fb      	ldr	r3, [r7, #12]
}
 8004da4:	4618      	mov	r0, r3
 8004da6:	3714      	adds	r7, #20
 8004da8:	46bd      	mov	sp, r7
 8004daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dae:	4770      	bx	lr

08004db0 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8004db0:	b480      	push	{r7}
 8004db2:	b083      	sub	sp, #12
 8004db4:	af00      	add	r7, sp, #0
 8004db6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8004db8:	bf00      	nop
 8004dba:	370c      	adds	r7, #12
 8004dbc:	46bd      	mov	sp, r7
 8004dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dc2:	4770      	bx	lr

08004dc4 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8004dc4:	b480      	push	{r7}
 8004dc6:	b083      	sub	sp, #12
 8004dc8:	af00      	add	r7, sp, #0
 8004dca:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8004dcc:	bf00      	nop
 8004dce:	370c      	adds	r7, #12
 8004dd0:	46bd      	mov	sp, r7
 8004dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dd6:	4770      	bx	lr

08004dd8 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8004dd8:	b480      	push	{r7}
 8004dda:	b083      	sub	sp, #12
 8004ddc:	af00      	add	r7, sp, #0
 8004dde:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8004de0:	bf00      	nop
 8004de2:	370c      	adds	r7, #12
 8004de4:	46bd      	mov	sp, r7
 8004de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dea:	4770      	bx	lr

08004dec <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8004dec:	b480      	push	{r7}
 8004dee:	b083      	sub	sp, #12
 8004df0:	af00      	add	r7, sp, #0
 8004df2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8004df4:	bf00      	nop
 8004df6:	370c      	adds	r7, #12
 8004df8:	46bd      	mov	sp, r7
 8004dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dfe:	4770      	bx	lr

08004e00 <HAL_ADCEx_InjectedConfigChannel>:
  * @param sConfigInjected Structure of ADC injected group and ADC channel for
  *         injected group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedConfigChannel(ADC_HandleTypeDef *hadc, ADC_InjectionConfTypeDef *sConfigInjected)
{
 8004e00:	b580      	push	{r7, lr}
 8004e02:	b0b6      	sub	sp, #216	; 0xd8
 8004e04:	af00      	add	r7, sp, #0
 8004e06:	6078      	str	r0, [r7, #4]
 8004e08:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004e0a:	2300      	movs	r3, #0
 8004e0c:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0;
 8004e10:	2300      	movs	r3, #0
 8004e12:	60bb      	str	r3, [r7, #8]

  uint32_t tmp_JSQR_ContextQueueBeingBuilt = 0U;
 8004e14:	2300      	movs	r3, #0
 8004e16:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfigInjected->InjectedChannel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8004e20:	2b01      	cmp	r3, #1
 8004e22:	d102      	bne.n	8004e2a <HAL_ADCEx_InjectedConfigChannel+0x2a>
 8004e24:	2302      	movs	r3, #2
 8004e26:	f000 bcb5 	b.w	8005794 <HAL_ADCEx_InjectedConfigChannel+0x994>
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	2201      	movs	r2, #1
 8004e2e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /*      injected channel rank. It is entered into queue only when all       */
  /*      injected ranks have been set.                                       */
  /*   Note: Scan mode is not present by hardware on this device, but used    */
  /*   by software for alignment over all STM32 devices.                      */

  if ((hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)  ||
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	695b      	ldr	r3, [r3, #20]
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d003      	beq.n	8004e42 <HAL_ADCEx_InjectedConfigChannel+0x42>
      (sConfigInjected->InjectedNbrOfConversion == 1U))
 8004e3a:	683b      	ldr	r3, [r7, #0]
 8004e3c:	6a1b      	ldr	r3, [r3, #32]
  if ((hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)  ||
 8004e3e:	2b01      	cmp	r3, #1
 8004e40:	d130      	bne.n	8004ea4 <HAL_ADCEx_InjectedConfigChannel+0xa4>
    /*    (scan mode disabled, only rank 1 used)                              */
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - channel set to rank 1 (scan mode disabled, only rank 1 can be used) */

    if (sConfigInjected->InjectedRank == ADC_INJECTED_RANK_1)
 8004e42:	683b      	ldr	r3, [r7, #0]
 8004e44:	685b      	ldr	r3, [r3, #4]
 8004e46:	2b09      	cmp	r3, #9
 8004e48:	d179      	bne.n	8004f3e <HAL_ADCEx_InjectedConfigChannel+0x13e>
      /* Enable external trigger if trigger selection is different of         */
      /* software start.                                                      */
      /* Note: This configuration keeps the hardware feature of parameter     */
      /*       ExternalTrigInjecConvEdge "trigger edge none" equivalent to    */
      /*       software start.                                                */
      if (sConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 8004e4a:	683b      	ldr	r3, [r7, #0]
 8004e4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d010      	beq.n	8004e74 <HAL_ADCEx_InjectedConfigChannel+0x74>
      {
        tmp_JSQR_ContextQueueBeingBuilt = (ADC_JSQR_RK(sConfigInjected->InjectedChannel, ADC_INJECTED_RANK_1)
 8004e52:	683b      	ldr	r3, [r7, #0]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	0e9b      	lsrs	r3, r3, #26
 8004e58:	025b      	lsls	r3, r3, #9
 8004e5a:	f403 5278 	and.w	r2, r3, #15872	; 0x3e00
                                           | (sConfigInjected->ExternalTrigInjecConv & ADC_JSQR_JEXTSEL)
 8004e5e:	683b      	ldr	r3, [r7, #0]
 8004e60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e62:	f003 037c 	and.w	r3, r3, #124	; 0x7c
 8004e66:	431a      	orrs	r2, r3
                                           | sConfigInjected->ExternalTrigInjecConvEdge
 8004e68:	683b      	ldr	r3, [r7, #0]
 8004e6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        tmp_JSQR_ContextQueueBeingBuilt = (ADC_JSQR_RK(sConfigInjected->InjectedChannel, ADC_INJECTED_RANK_1)
 8004e6c:	4313      	orrs	r3, r2
 8004e6e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004e72:	e007      	b.n	8004e84 <HAL_ADCEx_InjectedConfigChannel+0x84>
                                          );
      }
      else
      {
        tmp_JSQR_ContextQueueBeingBuilt = (ADC_JSQR_RK(sConfigInjected->InjectedChannel, ADC_INJECTED_RANK_1));
 8004e74:	683b      	ldr	r3, [r7, #0]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	0e9b      	lsrs	r3, r3, #26
 8004e7a:	025b      	lsls	r3, r3, #9
 8004e7c:	f403 5378 	and.w	r3, r3, #15872	; 0x3e00
 8004e80:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
      }

      MODIFY_REG(hadc->Instance->JSQR, ADC_JSQR_FIELDS, tmp_JSQR_ContextQueueBeingBuilt);
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004e8a:	4b84      	ldr	r3, [pc, #528]	; (800509c <HAL_ADCEx_InjectedConfigChannel+0x29c>)
 8004e8c:	4013      	ands	r3, r2
 8004e8e:	687a      	ldr	r2, [r7, #4]
 8004e90:	6812      	ldr	r2, [r2, #0]
 8004e92:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 8004e96:	430b      	orrs	r3, r1
 8004e98:	64d3      	str	r3, [r2, #76]	; 0x4c
      /* For debug and informative reasons, hadc handle saves JSQR setting */
      hadc->InjectionConfig.ContextQueue = tmp_JSQR_ContextQueueBeingBuilt;
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8004ea0:	665a      	str	r2, [r3, #100]	; 0x64
    if (sConfigInjected->InjectedRank == ADC_INJECTED_RANK_1)
 8004ea2:	e04c      	b.n	8004f3e <HAL_ADCEx_InjectedConfigChannel+0x13e>
    /* 1. Start new context and set parameters related to all injected        */
    /*    channels: injected sequence length and trigger.                     */

    /* if hadc->InjectionConfig.ChannelCount is equal to 0, this is the first */
    /*   call of the context under setting                                    */
    if (hadc->InjectionConfig.ChannelCount == 0U)
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d11d      	bne.n	8004ee8 <HAL_ADCEx_InjectedConfigChannel+0xe8>
    {
      /* Initialize number of channels that will be configured on the context */
      /*  being built                                                         */
      hadc->InjectionConfig.ChannelCount = sConfigInjected->InjectedNbrOfConversion;
 8004eac:	683b      	ldr	r3, [r7, #0]
 8004eae:	6a1a      	ldr	r2, [r3, #32]
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	669a      	str	r2, [r3, #104]	; 0x68
      /* Handle hadc saves the context under build up over each HAL_ADCEx_InjectedConfigChannel()
         call, this context will be written in JSQR register at the last call.
         At this point, the context is merely reset  */
      hadc->InjectionConfig.ContextQueue = 0x00000000U;
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	2200      	movs	r2, #0
 8004eb8:	665a      	str	r2, [r3, #100]	; 0x64
      /* Enable external trigger if trigger selection is different of         */
      /* software start.                                                      */
      /* Note: This configuration keeps the hardware feature of parameter     */
      /*       ExternalTrigInjecConvEdge "trigger edge none" equivalent to    */
      /*       software start.                                                */
      if (sConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 8004eba:	683b      	ldr	r3, [r7, #0]
 8004ebc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d00d      	beq.n	8004ede <HAL_ADCEx_InjectedConfigChannel+0xde>
      {
        tmp_JSQR_ContextQueueBeingBuilt = ((sConfigInjected->InjectedNbrOfConversion - 1U)
 8004ec2:	683b      	ldr	r3, [r7, #0]
 8004ec4:	6a1b      	ldr	r3, [r3, #32]
 8004ec6:	1e5a      	subs	r2, r3, #1
                                           | (sConfigInjected->ExternalTrigInjecConv & ADC_JSQR_JEXTSEL)
 8004ec8:	683b      	ldr	r3, [r7, #0]
 8004eca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ecc:	f003 037c 	and.w	r3, r3, #124	; 0x7c
 8004ed0:	431a      	orrs	r2, r3
                                           | sConfigInjected->ExternalTrigInjecConvEdge
 8004ed2:	683b      	ldr	r3, [r7, #0]
 8004ed4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        tmp_JSQR_ContextQueueBeingBuilt = ((sConfigInjected->InjectedNbrOfConversion - 1U)
 8004ed6:	4313      	orrs	r3, r2
 8004ed8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004edc:	e004      	b.n	8004ee8 <HAL_ADCEx_InjectedConfigChannel+0xe8>
                                          );
      }
      else
      {
        tmp_JSQR_ContextQueueBeingBuilt = ((sConfigInjected->InjectedNbrOfConversion - 1U));
 8004ede:	683b      	ldr	r3, [r7, #0]
 8004ee0:	6a1b      	ldr	r3, [r3, #32]
 8004ee2:	3b01      	subs	r3, #1
 8004ee4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    /*    related to each channel: channel rank sequence                    */
    /* Clear the old JSQx bits for the selected rank */
    tmp_JSQR_ContextQueueBeingBuilt &= ~ADC_JSQR_RK(ADC_SQR3_SQ10, sConfigInjected->InjectedRank);

    /* Set the JSQx bits for the selected rank */
    tmp_JSQR_ContextQueueBeingBuilt |= ADC_JSQR_RK(sConfigInjected->InjectedChannel, sConfigInjected->InjectedRank);
 8004ee8:	683b      	ldr	r3, [r7, #0]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	0e9b      	lsrs	r3, r3, #26
 8004eee:	f003 021f 	and.w	r2, r3, #31
 8004ef2:	683b      	ldr	r3, [r7, #0]
 8004ef4:	685b      	ldr	r3, [r3, #4]
 8004ef6:	f003 031f 	and.w	r3, r3, #31
 8004efa:	fa02 f303 	lsl.w	r3, r2, r3
 8004efe:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8004f02:	4313      	orrs	r3, r2
 8004f04:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0

    /* Decrease channel count  */
    hadc->InjectionConfig.ChannelCount--;
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004f0c:	1e5a      	subs	r2, r3, #1
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	669a      	str	r2, [r3, #104]	; 0x68

    /* 3. tmp_JSQR_ContextQueueBeingBuilt is fully built for this HAL_ADCEx_InjectedConfigChannel()
          call, aggregate the setting to those already built during the previous
          HAL_ADCEx_InjectedConfigChannel() calls (for the same context of course)  */
    hadc->InjectionConfig.ContextQueue |= tmp_JSQR_ContextQueueBeingBuilt;
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8004f16:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8004f1a:	431a      	orrs	r2, r3
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	665a      	str	r2, [r3, #100]	; 0x64

    /* 4. End of context setting: if this is the last channel set, then write context
        into register JSQR and make it enter into queue                   */
    if (hadc->InjectionConfig.ChannelCount == 0U)
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d10a      	bne.n	8004f3e <HAL_ADCEx_InjectedConfigChannel+0x13e>
    {
      MODIFY_REG(hadc->Instance->JSQR, ADC_JSQR_FIELDS, hadc->InjectionConfig.ContextQueue);
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004f2e:	4b5b      	ldr	r3, [pc, #364]	; (800509c <HAL_ADCEx_InjectedConfigChannel+0x29c>)
 8004f30:	4013      	ands	r3, r2
 8004f32:	687a      	ldr	r2, [r7, #4]
 8004f34:	6e51      	ldr	r1, [r2, #100]	; 0x64
 8004f36:	687a      	ldr	r2, [r7, #4]
 8004f38:	6812      	ldr	r2, [r2, #0]
 8004f3a:	430b      	orrs	r3, r1
 8004f3c:	64d3      	str	r3, [r2, #76]	; 0x4c
  /* conversion on going on injected group:                                   */
  /*  - Injected context queue: Queue disable (active context is kept) or     */
  /*    enable (context decremented, up to 2 contexts queued)                 */
  /*  - Injected discontinuous mode: can be enabled only if auto-injected     */
  /*    mode is disabled.                                                     */
  if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	4618      	mov	r0, r3
 8004f44:	f7ff fe02 	bl	8004b4c <LL_ADC_INJ_IsConversionOngoing>
 8004f48:	4603      	mov	r3, r0
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d124      	bne.n	8004f98 <HAL_ADCEx_InjectedConfigChannel+0x198>
  {
    /* If auto-injected mode is disabled: no constraint                       */
    if (sConfigInjected->AutoInjectedConv == DISABLE)
 8004f4e:	683b      	ldr	r3, [r7, #0]
 8004f50:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d112      	bne.n	8004f7e <HAL_ADCEx_InjectedConfigChannel+0x17e>
    {
      MODIFY_REG(hadc->Instance->CFGR,
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	68db      	ldr	r3, [r3, #12]
 8004f5e:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8004f62:	683b      	ldr	r3, [r7, #0]
 8004f64:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8004f68:	055a      	lsls	r2, r3, #21
 8004f6a:	683b      	ldr	r3, [r7, #0]
 8004f6c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004f70:	051b      	lsls	r3, r3, #20
 8004f72:	431a      	orrs	r2, r3
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	430a      	orrs	r2, r1
 8004f7a:	60da      	str	r2, [r3, #12]
 8004f7c:	e00c      	b.n	8004f98 <HAL_ADCEx_InjectedConfigChannel+0x198>
    }
    /* If auto-injected mode is enabled: Injected discontinuous setting is    */
    /* discarded.                                                             */
    else
    {
      MODIFY_REG(hadc->Instance->CFGR,
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	68db      	ldr	r3, [r3, #12]
 8004f84:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8004f88:	683b      	ldr	r3, [r7, #0]
 8004f8a:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8004f8e:	055a      	lsls	r2, r3, #21
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	430a      	orrs	r2, r1
 8004f96:	60da      	str	r2, [r3, #12]
  /* conversion on going on regular and injected groups:                      */
  /*  - Automatic injected conversion: can be enabled if injected group       */
  /*    external triggers are disabled.                                       */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	4618      	mov	r0, r3
 8004f9e:	f7ff fdae 	bl	8004afe <LL_ADC_REG_IsConversionOngoing>
 8004fa2:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	4618      	mov	r0, r3
 8004fac:	f7ff fdce 	bl	8004b4c <LL_ADC_INJ_IsConversionOngoing>
 8004fb0:	f8c7 00c8 	str.w	r0, [r7, #200]	; 0xc8

  if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8004fb4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	f040 822e 	bne.w	800541a <HAL_ADCEx_InjectedConfigChannel+0x61a>
      && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8004fbe:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	f040 8229 	bne.w	800541a <HAL_ADCEx_InjectedConfigChannel+0x61a>
     )
  {
    /* If injected group external triggers are disabled (set to injected      */
    /* software start): no constraint                                         */
    if ((sConfigInjected->ExternalTrigInjecConv == ADC_INJECTED_SOFTWARE_START)
 8004fc8:	683b      	ldr	r3, [r7, #0]
 8004fca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d003      	beq.n	8004fd8 <HAL_ADCEx_InjectedConfigChannel+0x1d8>
        || (sConfigInjected->ExternalTrigInjecConvEdge == ADC_EXTERNALTRIGINJECCONV_EDGE_NONE))
 8004fd0:	683b      	ldr	r3, [r7, #0]
 8004fd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d116      	bne.n	8005006 <HAL_ADCEx_InjectedConfigChannel+0x206>
    {
      if (sConfigInjected->AutoInjectedConv == ENABLE)
 8004fd8:	683b      	ldr	r3, [r7, #0]
 8004fda:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8004fde:	2b01      	cmp	r3, #1
 8004fe0:	d108      	bne.n	8004ff4 <HAL_ADCEx_InjectedConfigChannel+0x1f4>
      {
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO);
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	68da      	ldr	r2, [r3, #12]
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 8004ff0:	60da      	str	r2, [r3, #12]
      if (sConfigInjected->AutoInjectedConv == ENABLE)
 8004ff2:	e01f      	b.n	8005034 <HAL_ADCEx_InjectedConfigChannel+0x234>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO);
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	68da      	ldr	r2, [r3, #12]
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	f022 7200 	bic.w	r2, r2, #33554432	; 0x2000000
 8005002:	60da      	str	r2, [r3, #12]
      if (sConfigInjected->AutoInjectedConv == ENABLE)
 8005004:	e016      	b.n	8005034 <HAL_ADCEx_InjectedConfigChannel+0x234>
    }
    /* If Automatic injected conversion was intended to be set and could not  */
    /* due to injected group external triggers enabled, error is reported.    */
    else
    {
      if (sConfigInjected->AutoInjectedConv == ENABLE)
 8005006:	683b      	ldr	r3, [r7, #0]
 8005008:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800500c:	2b01      	cmp	r3, #1
 800500e:	d109      	bne.n	8005024 <HAL_ADCEx_InjectedConfigChannel+0x224>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005014:	f043 0220 	orr.w	r2, r3, #32
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	65da      	str	r2, [r3, #92]	; 0x5c

        tmp_hal_status = HAL_ERROR;
 800501c:	2301      	movs	r3, #1
 800501e:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 8005022:	e007      	b.n	8005034 <HAL_ADCEx_InjectedConfigChannel+0x234>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO);
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	68da      	ldr	r2, [r3, #12]
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	f022 7200 	bic.w	r2, r2, #33554432	; 0x2000000
 8005032:	60da      	str	r2, [r3, #12]
      }
    }

    if (sConfigInjected->InjecOversamplingMode == ENABLE)
 8005034:	683b      	ldr	r3, [r7, #0]
 8005036:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800503a:	2b01      	cmp	r3, #1
 800503c:	d110      	bne.n	8005060 <HAL_ADCEx_InjectedConfigChannel+0x260>
      /* Configuration of Injected Oversampler:                                 */
      /*  - Oversampling Ratio                                                  */
      /*  - Right bit shift                                                     */

      /* Enable OverSampling mode */
      MODIFY_REG(hadc->Instance->CFGR2,
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	691b      	ldr	r3, [r3, #16]
 8005044:	f423 72ff 	bic.w	r2, r3, #510	; 0x1fe
 8005048:	683b      	ldr	r3, [r7, #0]
 800504a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800504c:	683b      	ldr	r3, [r7, #0]
 800504e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005050:	430b      	orrs	r3, r1
 8005052:	431a      	orrs	r2, r3
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	f042 0202 	orr.w	r2, r2, #2
 800505c:	611a      	str	r2, [r3, #16]
 800505e:	e007      	b.n	8005070 <HAL_ADCEx_InjectedConfigChannel+0x270>
                );
    }
    else
    {
      /* Disable Regular OverSampling */
      CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_JOVSE);
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	691a      	ldr	r2, [r3, #16]
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	f022 0202 	bic.w	r2, r2, #2
 800506e:	611a      	str	r2, [r3, #16]
    }

    /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
    if (sConfigInjected->InjectedSamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8005070:	683b      	ldr	r3, [r7, #0]
 8005072:	689b      	ldr	r3, [r3, #8]
 8005074:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005078:	d112      	bne.n	80050a0 <HAL_ADCEx_InjectedConfigChannel+0x2a0>
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfigInjected->InjectedChannel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	6818      	ldr	r0, [r3, #0]
 800507e:	683b      	ldr	r3, [r7, #0]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	2200      	movs	r2, #0
 8005084:	4619      	mov	r1, r3
 8005086:	f7ff fcc5 	bl	8004a14 <LL_ADC_SetChannelSamplingTime>

      /* Set ADC sampling time common configuration */
      LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8005092:	4618      	mov	r0, r3
 8005094:	f7ff fc9d 	bl	80049d2 <LL_ADC_SetSamplingTimeCommonConfig>
 8005098:	e011      	b.n	80050be <HAL_ADCEx_InjectedConfigChannel+0x2be>
 800509a:	bf00      	nop
 800509c:	04104000 	.word	0x04104000
    }
    else
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfigInjected->InjectedChannel, sConfigInjected->InjectedSamplingTime);
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	6818      	ldr	r0, [r3, #0]
 80050a4:	683b      	ldr	r3, [r7, #0]
 80050a6:	6819      	ldr	r1, [r3, #0]
 80050a8:	683b      	ldr	r3, [r7, #0]
 80050aa:	689b      	ldr	r3, [r3, #8]
 80050ac:	461a      	mov	r2, r3
 80050ae:	f7ff fcb1 	bl	8004a14 <LL_ADC_SetChannelSamplingTime>

      /* Set ADC sampling time common configuration */
      LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	2100      	movs	r1, #0
 80050b8:	4618      	mov	r0, r3
 80050ba:	f7ff fc8a 	bl	80049d2 <LL_ADC_SetSamplingTimeCommonConfig>

    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset with respect to the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfigInjected->InjectedOffset);
 80050be:	683b      	ldr	r3, [r7, #0]
 80050c0:	695a      	ldr	r2, [r3, #20]
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	68db      	ldr	r3, [r3, #12]
 80050c8:	08db      	lsrs	r3, r3, #3
 80050ca:	f003 0303 	and.w	r3, r3, #3
 80050ce:	005b      	lsls	r3, r3, #1
 80050d0:	fa02 f303 	lsl.w	r3, r2, r3
 80050d4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4

    if (sConfigInjected->InjectedOffsetNumber != ADC_OFFSET_NONE)
 80050d8:	683b      	ldr	r3, [r7, #0]
 80050da:	691b      	ldr	r3, [r3, #16]
 80050dc:	2b04      	cmp	r3, #4
 80050de:	d022      	beq.n	8005126 <HAL_ADCEx_InjectedConfigChannel+0x326>
    {
      /* Set ADC selected offset number */
      LL_ADC_SetOffset(hadc->Instance, sConfigInjected->InjectedOffsetNumber, sConfigInjected->InjectedChannel,
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	6818      	ldr	r0, [r3, #0]
 80050e4:	683b      	ldr	r3, [r7, #0]
 80050e6:	6919      	ldr	r1, [r3, #16]
 80050e8:	683b      	ldr	r3, [r7, #0]
 80050ea:	681a      	ldr	r2, [r3, #0]
 80050ec:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80050f0:	f7ff fbe4 	bl	80048bc <LL_ADC_SetOffset>
                       tmpOffsetShifted);

      /* Set ADC selected offset sign & saturation */
      LL_ADC_SetOffsetSign(hadc->Instance, sConfigInjected->InjectedOffsetNumber, sConfigInjected->InjectedOffsetSign);
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	6818      	ldr	r0, [r3, #0]
 80050f8:	683b      	ldr	r3, [r7, #0]
 80050fa:	6919      	ldr	r1, [r3, #16]
 80050fc:	683b      	ldr	r3, [r7, #0]
 80050fe:	699b      	ldr	r3, [r3, #24]
 8005100:	461a      	mov	r2, r3
 8005102:	f7ff fc30 	bl	8004966 <LL_ADC_SetOffsetSign>
      LL_ADC_SetOffsetSaturation(hadc->Instance, sConfigInjected->InjectedOffsetNumber,
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	6818      	ldr	r0, [r3, #0]
 800510a:	683b      	ldr	r3, [r7, #0]
 800510c:	6919      	ldr	r1, [r3, #16]
                                 (sConfigInjected->InjectedOffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 800510e:	683b      	ldr	r3, [r7, #0]
 8005110:	7f1b      	ldrb	r3, [r3, #28]
      LL_ADC_SetOffsetSaturation(hadc->Instance, sConfigInjected->InjectedOffsetNumber,
 8005112:	2b01      	cmp	r3, #1
 8005114:	d102      	bne.n	800511c <HAL_ADCEx_InjectedConfigChannel+0x31c>
 8005116:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800511a:	e000      	b.n	800511e <HAL_ADCEx_InjectedConfigChannel+0x31e>
 800511c:	2300      	movs	r3, #0
 800511e:	461a      	mov	r2, r3
 8005120:	f7ff fc3c 	bl	800499c <LL_ADC_SetOffsetSaturation>
 8005124:	e179      	b.n	800541a <HAL_ADCEx_InjectedConfigChannel+0x61a>
    }
    else
    {
      /* Scan each offset register to check if the selected channel is targeted. */
      /* If this is the case, the corresponding offset number is disabled.       */
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	2100      	movs	r1, #0
 800512c:	4618      	mov	r0, r3
 800512e:	f7ff fbe9 	bl	8004904 <LL_ADC_GetOffsetChannel>
 8005132:	4603      	mov	r3, r0
 8005134:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005138:	2b00      	cmp	r3, #0
 800513a:	d10a      	bne.n	8005152 <HAL_ADCEx_InjectedConfigChannel+0x352>
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	2100      	movs	r1, #0
 8005142:	4618      	mov	r0, r3
 8005144:	f7ff fbde 	bl	8004904 <LL_ADC_GetOffsetChannel>
 8005148:	4603      	mov	r3, r0
 800514a:	0e9b      	lsrs	r3, r3, #26
 800514c:	f003 021f 	and.w	r2, r3, #31
 8005150:	e01e      	b.n	8005190 <HAL_ADCEx_InjectedConfigChannel+0x390>
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	2100      	movs	r1, #0
 8005158:	4618      	mov	r0, r3
 800515a:	f7ff fbd3 	bl	8004904 <LL_ADC_GetOffsetChannel>
 800515e:	4603      	mov	r3, r0
 8005160:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005164:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005168:	fa93 f3a3 	rbit	r3, r3
 800516c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  return result;
 8005170:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8005174:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  if (value == 0U)
 8005178:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800517c:	2b00      	cmp	r3, #0
 800517e:	d101      	bne.n	8005184 <HAL_ADCEx_InjectedConfigChannel+0x384>
    return 32U;
 8005180:	2320      	movs	r3, #32
 8005182:	e004      	b.n	800518e <HAL_ADCEx_InjectedConfigChannel+0x38e>
  return __builtin_clz(value);
 8005184:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8005188:	fab3 f383 	clz	r3, r3
 800518c:	b2db      	uxtb	r3, r3
 800518e:	461a      	mov	r2, r3
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfigInjected->InjectedChannel))
 8005190:	683b      	ldr	r3, [r7, #0]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005198:	2b00      	cmp	r3, #0
 800519a:	d105      	bne.n	80051a8 <HAL_ADCEx_InjectedConfigChannel+0x3a8>
 800519c:	683b      	ldr	r3, [r7, #0]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	0e9b      	lsrs	r3, r3, #26
 80051a2:	f003 031f 	and.w	r3, r3, #31
 80051a6:	e018      	b.n	80051da <HAL_ADCEx_InjectedConfigChannel+0x3da>
 80051a8:	683b      	ldr	r3, [r7, #0]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80051b0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80051b4:	fa93 f3a3 	rbit	r3, r3
 80051b8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  return result;
 80051bc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80051c0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  if (value == 0U)
 80051c4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d101      	bne.n	80051d0 <HAL_ADCEx_InjectedConfigChannel+0x3d0>
    return 32U;
 80051cc:	2320      	movs	r3, #32
 80051ce:	e004      	b.n	80051da <HAL_ADCEx_InjectedConfigChannel+0x3da>
  return __builtin_clz(value);
 80051d0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80051d4:	fab3 f383 	clz	r3, r3
 80051d8:	b2db      	uxtb	r3, r3
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80051da:	429a      	cmp	r2, r3
 80051dc:	d106      	bne.n	80051ec <HAL_ADCEx_InjectedConfigChannel+0x3ec>
      {
        LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	2200      	movs	r2, #0
 80051e4:	2100      	movs	r1, #0
 80051e6:	4618      	mov	r0, r3
 80051e8:	f7ff fba2 	bl	8004930 <LL_ADC_SetOffsetState>
      }
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	2101      	movs	r1, #1
 80051f2:	4618      	mov	r0, r3
 80051f4:	f7ff fb86 	bl	8004904 <LL_ADC_GetOffsetChannel>
 80051f8:	4603      	mov	r3, r0
 80051fa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d10a      	bne.n	8005218 <HAL_ADCEx_InjectedConfigChannel+0x418>
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	2101      	movs	r1, #1
 8005208:	4618      	mov	r0, r3
 800520a:	f7ff fb7b 	bl	8004904 <LL_ADC_GetOffsetChannel>
 800520e:	4603      	mov	r3, r0
 8005210:	0e9b      	lsrs	r3, r3, #26
 8005212:	f003 021f 	and.w	r2, r3, #31
 8005216:	e01e      	b.n	8005256 <HAL_ADCEx_InjectedConfigChannel+0x456>
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	2101      	movs	r1, #1
 800521e:	4618      	mov	r0, r3
 8005220:	f7ff fb70 	bl	8004904 <LL_ADC_GetOffsetChannel>
 8005224:	4603      	mov	r3, r0
 8005226:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800522a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800522e:	fa93 f3a3 	rbit	r3, r3
 8005232:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  return result;
 8005236:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800523a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (value == 0U)
 800523e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8005242:	2b00      	cmp	r3, #0
 8005244:	d101      	bne.n	800524a <HAL_ADCEx_InjectedConfigChannel+0x44a>
    return 32U;
 8005246:	2320      	movs	r3, #32
 8005248:	e004      	b.n	8005254 <HAL_ADCEx_InjectedConfigChannel+0x454>
  return __builtin_clz(value);
 800524a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800524e:	fab3 f383 	clz	r3, r3
 8005252:	b2db      	uxtb	r3, r3
 8005254:	461a      	mov	r2, r3
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfigInjected->InjectedChannel))
 8005256:	683b      	ldr	r3, [r7, #0]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800525e:	2b00      	cmp	r3, #0
 8005260:	d105      	bne.n	800526e <HAL_ADCEx_InjectedConfigChannel+0x46e>
 8005262:	683b      	ldr	r3, [r7, #0]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	0e9b      	lsrs	r3, r3, #26
 8005268:	f003 031f 	and.w	r3, r3, #31
 800526c:	e018      	b.n	80052a0 <HAL_ADCEx_InjectedConfigChannel+0x4a0>
 800526e:	683b      	ldr	r3, [r7, #0]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005276:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800527a:	fa93 f3a3 	rbit	r3, r3
 800527e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  return result;
 8005282:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005286:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  if (value == 0U)
 800528a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800528e:	2b00      	cmp	r3, #0
 8005290:	d101      	bne.n	8005296 <HAL_ADCEx_InjectedConfigChannel+0x496>
    return 32U;
 8005292:	2320      	movs	r3, #32
 8005294:	e004      	b.n	80052a0 <HAL_ADCEx_InjectedConfigChannel+0x4a0>
  return __builtin_clz(value);
 8005296:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800529a:	fab3 f383 	clz	r3, r3
 800529e:	b2db      	uxtb	r3, r3
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80052a0:	429a      	cmp	r2, r3
 80052a2:	d106      	bne.n	80052b2 <HAL_ADCEx_InjectedConfigChannel+0x4b2>
      {
        LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	2200      	movs	r2, #0
 80052aa:	2101      	movs	r1, #1
 80052ac:	4618      	mov	r0, r3
 80052ae:	f7ff fb3f 	bl	8004930 <LL_ADC_SetOffsetState>
      }
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	2102      	movs	r1, #2
 80052b8:	4618      	mov	r0, r3
 80052ba:	f7ff fb23 	bl	8004904 <LL_ADC_GetOffsetChannel>
 80052be:	4603      	mov	r3, r0
 80052c0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d10a      	bne.n	80052de <HAL_ADCEx_InjectedConfigChannel+0x4de>
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	2102      	movs	r1, #2
 80052ce:	4618      	mov	r0, r3
 80052d0:	f7ff fb18 	bl	8004904 <LL_ADC_GetOffsetChannel>
 80052d4:	4603      	mov	r3, r0
 80052d6:	0e9b      	lsrs	r3, r3, #26
 80052d8:	f003 021f 	and.w	r2, r3, #31
 80052dc:	e01e      	b.n	800531c <HAL_ADCEx_InjectedConfigChannel+0x51c>
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	2102      	movs	r1, #2
 80052e4:	4618      	mov	r0, r3
 80052e6:	f7ff fb0d 	bl	8004904 <LL_ADC_GetOffsetChannel>
 80052ea:	4603      	mov	r3, r0
 80052ec:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80052f0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80052f4:	fa93 f3a3 	rbit	r3, r3
 80052f8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  return result;
 80052fc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005300:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (value == 0U)
 8005304:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005308:	2b00      	cmp	r3, #0
 800530a:	d101      	bne.n	8005310 <HAL_ADCEx_InjectedConfigChannel+0x510>
    return 32U;
 800530c:	2320      	movs	r3, #32
 800530e:	e004      	b.n	800531a <HAL_ADCEx_InjectedConfigChannel+0x51a>
  return __builtin_clz(value);
 8005310:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005314:	fab3 f383 	clz	r3, r3
 8005318:	b2db      	uxtb	r3, r3
 800531a:	461a      	mov	r2, r3
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfigInjected->InjectedChannel))
 800531c:	683b      	ldr	r3, [r7, #0]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005324:	2b00      	cmp	r3, #0
 8005326:	d105      	bne.n	8005334 <HAL_ADCEx_InjectedConfigChannel+0x534>
 8005328:	683b      	ldr	r3, [r7, #0]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	0e9b      	lsrs	r3, r3, #26
 800532e:	f003 031f 	and.w	r3, r3, #31
 8005332:	e014      	b.n	800535e <HAL_ADCEx_InjectedConfigChannel+0x55e>
 8005334:	683b      	ldr	r3, [r7, #0]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800533a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800533c:	fa93 f3a3 	rbit	r3, r3
 8005340:	67bb      	str	r3, [r7, #120]	; 0x78
  return result;
 8005342:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005344:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  if (value == 0U)
 8005348:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800534c:	2b00      	cmp	r3, #0
 800534e:	d101      	bne.n	8005354 <HAL_ADCEx_InjectedConfigChannel+0x554>
    return 32U;
 8005350:	2320      	movs	r3, #32
 8005352:	e004      	b.n	800535e <HAL_ADCEx_InjectedConfigChannel+0x55e>
  return __builtin_clz(value);
 8005354:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005358:	fab3 f383 	clz	r3, r3
 800535c:	b2db      	uxtb	r3, r3
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800535e:	429a      	cmp	r2, r3
 8005360:	d106      	bne.n	8005370 <HAL_ADCEx_InjectedConfigChannel+0x570>
      {
        LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	2200      	movs	r2, #0
 8005368:	2102      	movs	r1, #2
 800536a:	4618      	mov	r0, r3
 800536c:	f7ff fae0 	bl	8004930 <LL_ADC_SetOffsetState>
      }
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	2103      	movs	r1, #3
 8005376:	4618      	mov	r0, r3
 8005378:	f7ff fac4 	bl	8004904 <LL_ADC_GetOffsetChannel>
 800537c:	4603      	mov	r3, r0
 800537e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005382:	2b00      	cmp	r3, #0
 8005384:	d10a      	bne.n	800539c <HAL_ADCEx_InjectedConfigChannel+0x59c>
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	2103      	movs	r1, #3
 800538c:	4618      	mov	r0, r3
 800538e:	f7ff fab9 	bl	8004904 <LL_ADC_GetOffsetChannel>
 8005392:	4603      	mov	r3, r0
 8005394:	0e9b      	lsrs	r3, r3, #26
 8005396:	f003 021f 	and.w	r2, r3, #31
 800539a:	e017      	b.n	80053cc <HAL_ADCEx_InjectedConfigChannel+0x5cc>
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	2103      	movs	r1, #3
 80053a2:	4618      	mov	r0, r3
 80053a4:	f7ff faae 	bl	8004904 <LL_ADC_GetOffsetChannel>
 80053a8:	4603      	mov	r3, r0
 80053aa:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80053ac:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80053ae:	fa93 f3a3 	rbit	r3, r3
 80053b2:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 80053b4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80053b6:	677b      	str	r3, [r7, #116]	; 0x74
  if (value == 0U)
 80053b8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d101      	bne.n	80053c2 <HAL_ADCEx_InjectedConfigChannel+0x5c2>
    return 32U;
 80053be:	2320      	movs	r3, #32
 80053c0:	e003      	b.n	80053ca <HAL_ADCEx_InjectedConfigChannel+0x5ca>
  return __builtin_clz(value);
 80053c2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80053c4:	fab3 f383 	clz	r3, r3
 80053c8:	b2db      	uxtb	r3, r3
 80053ca:	461a      	mov	r2, r3
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfigInjected->InjectedChannel))
 80053cc:	683b      	ldr	r3, [r7, #0]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d105      	bne.n	80053e4 <HAL_ADCEx_InjectedConfigChannel+0x5e4>
 80053d8:	683b      	ldr	r3, [r7, #0]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	0e9b      	lsrs	r3, r3, #26
 80053de:	f003 031f 	and.w	r3, r3, #31
 80053e2:	e011      	b.n	8005408 <HAL_ADCEx_InjectedConfigChannel+0x608>
 80053e4:	683b      	ldr	r3, [r7, #0]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80053ea:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80053ec:	fa93 f3a3 	rbit	r3, r3
 80053f0:	663b      	str	r3, [r7, #96]	; 0x60
  return result;
 80053f2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80053f4:	66bb      	str	r3, [r7, #104]	; 0x68
  if (value == 0U)
 80053f6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d101      	bne.n	8005400 <HAL_ADCEx_InjectedConfigChannel+0x600>
    return 32U;
 80053fc:	2320      	movs	r3, #32
 80053fe:	e003      	b.n	8005408 <HAL_ADCEx_InjectedConfigChannel+0x608>
  return __builtin_clz(value);
 8005400:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005402:	fab3 f383 	clz	r3, r3
 8005406:	b2db      	uxtb	r3, r3
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8005408:	429a      	cmp	r2, r3
 800540a:	d106      	bne.n	800541a <HAL_ADCEx_InjectedConfigChannel+0x61a>
      {
        LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	2200      	movs	r2, #0
 8005412:	2103      	movs	r1, #3
 8005414:	4618      	mov	r0, r3
 8005416:	f7ff fa8b 	bl	8004930 <LL_ADC_SetOffsetState>
  }

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	4618      	mov	r0, r3
 8005420:	f7ff fb5a 	bl	8004ad8 <LL_ADC_IsEnabled>
 8005424:	4603      	mov	r3, r0
 8005426:	2b00      	cmp	r3, #0
 8005428:	f040 8140 	bne.w	80056ac <HAL_ADCEx_InjectedConfigChannel+0x8ac>
  {
    /* Set mode single-ended or differential input of the selected ADC channel */
    LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfigInjected->InjectedChannel, sConfigInjected->InjectedSingleDiff);
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	6818      	ldr	r0, [r3, #0]
 8005430:	683b      	ldr	r3, [r7, #0]
 8005432:	6819      	ldr	r1, [r3, #0]
 8005434:	683b      	ldr	r3, [r7, #0]
 8005436:	68db      	ldr	r3, [r3, #12]
 8005438:	461a      	mov	r2, r3
 800543a:	f7ff fb17 	bl	8004a6c <LL_ADC_SetChannelSingleDiff>

    /* Configuration of differential mode */
    /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
    if (sConfigInjected->InjectedSingleDiff == ADC_DIFFERENTIAL_ENDED)
 800543e:	683b      	ldr	r3, [r7, #0]
 8005440:	68db      	ldr	r3, [r3, #12]
 8005442:	4a8f      	ldr	r2, [pc, #572]	; (8005680 <HAL_ADCEx_InjectedConfigChannel+0x880>)
 8005444:	4293      	cmp	r3, r2
 8005446:	f040 8131 	bne.w	80056ac <HAL_ADCEx_InjectedConfigChannel+0x8ac>
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	6818      	ldr	r0, [r3, #0]
                                    (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfigInjected->InjectedChannel)
 800544e:	683b      	ldr	r3, [r7, #0]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005456:	2b00      	cmp	r3, #0
 8005458:	d10b      	bne.n	8005472 <HAL_ADCEx_InjectedConfigChannel+0x672>
 800545a:	683b      	ldr	r3, [r7, #0]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	0e9b      	lsrs	r3, r3, #26
 8005460:	3301      	adds	r3, #1
 8005462:	f003 031f 	and.w	r3, r3, #31
 8005466:	2b09      	cmp	r3, #9
 8005468:	bf94      	ite	ls
 800546a:	2301      	movls	r3, #1
 800546c:	2300      	movhi	r3, #0
 800546e:	b2db      	uxtb	r3, r3
 8005470:	e019      	b.n	80054a6 <HAL_ADCEx_InjectedConfigChannel+0x6a6>
 8005472:	683b      	ldr	r3, [r7, #0]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005478:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800547a:	fa93 f3a3 	rbit	r3, r3
 800547e:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8005480:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005482:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 8005484:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005486:	2b00      	cmp	r3, #0
 8005488:	d101      	bne.n	800548e <HAL_ADCEx_InjectedConfigChannel+0x68e>
    return 32U;
 800548a:	2320      	movs	r3, #32
 800548c:	e003      	b.n	8005496 <HAL_ADCEx_InjectedConfigChannel+0x696>
  return __builtin_clz(value);
 800548e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005490:	fab3 f383 	clz	r3, r3
 8005494:	b2db      	uxtb	r3, r3
 8005496:	3301      	adds	r3, #1
 8005498:	f003 031f 	and.w	r3, r3, #31
 800549c:	2b09      	cmp	r3, #9
 800549e:	bf94      	ite	ls
 80054a0:	2301      	movls	r3, #1
 80054a2:	2300      	movhi	r3, #0
 80054a4:	b2db      	uxtb	r3, r3
      LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d079      	beq.n	800559e <HAL_ADCEx_InjectedConfigChannel+0x79e>
                                    (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfigInjected->InjectedChannel)
 80054aa:	683b      	ldr	r3, [r7, #0]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d107      	bne.n	80054c6 <HAL_ADCEx_InjectedConfigChannel+0x6c6>
 80054b6:	683b      	ldr	r3, [r7, #0]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	0e9b      	lsrs	r3, r3, #26
 80054bc:	3301      	adds	r3, #1
 80054be:	069b      	lsls	r3, r3, #26
 80054c0:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80054c4:	e015      	b.n	80054f2 <HAL_ADCEx_InjectedConfigChannel+0x6f2>
 80054c6:	683b      	ldr	r3, [r7, #0]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80054cc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80054ce:	fa93 f3a3 	rbit	r3, r3
 80054d2:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 80054d4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80054d6:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 80054d8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d101      	bne.n	80054e2 <HAL_ADCEx_InjectedConfigChannel+0x6e2>
    return 32U;
 80054de:	2320      	movs	r3, #32
 80054e0:	e003      	b.n	80054ea <HAL_ADCEx_InjectedConfigChannel+0x6ea>
  return __builtin_clz(value);
 80054e2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80054e4:	fab3 f383 	clz	r3, r3
 80054e8:	b2db      	uxtb	r3, r3
 80054ea:	3301      	adds	r3, #1
 80054ec:	069b      	lsls	r3, r3, #26
 80054ee:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80054f2:	683b      	ldr	r3, [r7, #0]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d109      	bne.n	8005512 <HAL_ADCEx_InjectedConfigChannel+0x712>
 80054fe:	683b      	ldr	r3, [r7, #0]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	0e9b      	lsrs	r3, r3, #26
 8005504:	3301      	adds	r3, #1
 8005506:	f003 031f 	and.w	r3, r3, #31
 800550a:	2101      	movs	r1, #1
 800550c:	fa01 f303 	lsl.w	r3, r1, r3
 8005510:	e017      	b.n	8005542 <HAL_ADCEx_InjectedConfigChannel+0x742>
 8005512:	683b      	ldr	r3, [r7, #0]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005518:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800551a:	fa93 f3a3 	rbit	r3, r3
 800551e:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8005520:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005522:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 8005524:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005526:	2b00      	cmp	r3, #0
 8005528:	d101      	bne.n	800552e <HAL_ADCEx_InjectedConfigChannel+0x72e>
    return 32U;
 800552a:	2320      	movs	r3, #32
 800552c:	e003      	b.n	8005536 <HAL_ADCEx_InjectedConfigChannel+0x736>
  return __builtin_clz(value);
 800552e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005530:	fab3 f383 	clz	r3, r3
 8005534:	b2db      	uxtb	r3, r3
 8005536:	3301      	adds	r3, #1
 8005538:	f003 031f 	and.w	r3, r3, #31
 800553c:	2101      	movs	r1, #1
 800553e:	fa01 f303 	lsl.w	r3, r1, r3
 8005542:	ea42 0103 	orr.w	r1, r2, r3
 8005546:	683b      	ldr	r3, [r7, #0]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800554e:	2b00      	cmp	r3, #0
 8005550:	d10a      	bne.n	8005568 <HAL_ADCEx_InjectedConfigChannel+0x768>
 8005552:	683b      	ldr	r3, [r7, #0]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	0e9b      	lsrs	r3, r3, #26
 8005558:	3301      	adds	r3, #1
 800555a:	f003 021f 	and.w	r2, r3, #31
 800555e:	4613      	mov	r3, r2
 8005560:	005b      	lsls	r3, r3, #1
 8005562:	4413      	add	r3, r2
 8005564:	051b      	lsls	r3, r3, #20
 8005566:	e018      	b.n	800559a <HAL_ADCEx_InjectedConfigChannel+0x79a>
 8005568:	683b      	ldr	r3, [r7, #0]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800556e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005570:	fa93 f3a3 	rbit	r3, r3
 8005574:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 8005576:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005578:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 800557a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800557c:	2b00      	cmp	r3, #0
 800557e:	d101      	bne.n	8005584 <HAL_ADCEx_InjectedConfigChannel+0x784>
    return 32U;
 8005580:	2320      	movs	r3, #32
 8005582:	e003      	b.n	800558c <HAL_ADCEx_InjectedConfigChannel+0x78c>
  return __builtin_clz(value);
 8005584:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005586:	fab3 f383 	clz	r3, r3
 800558a:	b2db      	uxtb	r3, r3
 800558c:	3301      	adds	r3, #1
 800558e:	f003 021f 	and.w	r2, r3, #31
 8005592:	4613      	mov	r3, r2
 8005594:	005b      	lsls	r3, r3, #1
 8005596:	4413      	add	r3, r2
 8005598:	051b      	lsls	r3, r3, #20
      LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800559a:	430b      	orrs	r3, r1
 800559c:	e081      	b.n	80056a2 <HAL_ADCEx_InjectedConfigChannel+0x8a2>
                                    (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfigInjected->InjectedChannel)
 800559e:	683b      	ldr	r3, [r7, #0]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d107      	bne.n	80055ba <HAL_ADCEx_InjectedConfigChannel+0x7ba>
 80055aa:	683b      	ldr	r3, [r7, #0]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	0e9b      	lsrs	r3, r3, #26
 80055b0:	3301      	adds	r3, #1
 80055b2:	069b      	lsls	r3, r3, #26
 80055b4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80055b8:	e015      	b.n	80055e6 <HAL_ADCEx_InjectedConfigChannel+0x7e6>
 80055ba:	683b      	ldr	r3, [r7, #0]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80055c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055c2:	fa93 f3a3 	rbit	r3, r3
 80055c6:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 80055c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055ca:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 80055cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d101      	bne.n	80055d6 <HAL_ADCEx_InjectedConfigChannel+0x7d6>
    return 32U;
 80055d2:	2320      	movs	r3, #32
 80055d4:	e003      	b.n	80055de <HAL_ADCEx_InjectedConfigChannel+0x7de>
  return __builtin_clz(value);
 80055d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80055d8:	fab3 f383 	clz	r3, r3
 80055dc:	b2db      	uxtb	r3, r3
 80055de:	3301      	adds	r3, #1
 80055e0:	069b      	lsls	r3, r3, #26
 80055e2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80055e6:	683b      	ldr	r3, [r7, #0]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d109      	bne.n	8005606 <HAL_ADCEx_InjectedConfigChannel+0x806>
 80055f2:	683b      	ldr	r3, [r7, #0]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	0e9b      	lsrs	r3, r3, #26
 80055f8:	3301      	adds	r3, #1
 80055fa:	f003 031f 	and.w	r3, r3, #31
 80055fe:	2101      	movs	r1, #1
 8005600:	fa01 f303 	lsl.w	r3, r1, r3
 8005604:	e017      	b.n	8005636 <HAL_ADCEx_InjectedConfigChannel+0x836>
 8005606:	683b      	ldr	r3, [r7, #0]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800560c:	69fb      	ldr	r3, [r7, #28]
 800560e:	fa93 f3a3 	rbit	r3, r3
 8005612:	61bb      	str	r3, [r7, #24]
  return result;
 8005614:	69bb      	ldr	r3, [r7, #24]
 8005616:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8005618:	6a3b      	ldr	r3, [r7, #32]
 800561a:	2b00      	cmp	r3, #0
 800561c:	d101      	bne.n	8005622 <HAL_ADCEx_InjectedConfigChannel+0x822>
    return 32U;
 800561e:	2320      	movs	r3, #32
 8005620:	e003      	b.n	800562a <HAL_ADCEx_InjectedConfigChannel+0x82a>
  return __builtin_clz(value);
 8005622:	6a3b      	ldr	r3, [r7, #32]
 8005624:	fab3 f383 	clz	r3, r3
 8005628:	b2db      	uxtb	r3, r3
 800562a:	3301      	adds	r3, #1
 800562c:	f003 031f 	and.w	r3, r3, #31
 8005630:	2101      	movs	r1, #1
 8005632:	fa01 f303 	lsl.w	r3, r1, r3
 8005636:	ea42 0103 	orr.w	r1, r2, r3
 800563a:	683b      	ldr	r3, [r7, #0]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005642:	2b00      	cmp	r3, #0
 8005644:	d10d      	bne.n	8005662 <HAL_ADCEx_InjectedConfigChannel+0x862>
 8005646:	683b      	ldr	r3, [r7, #0]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	0e9b      	lsrs	r3, r3, #26
 800564c:	3301      	adds	r3, #1
 800564e:	f003 021f 	and.w	r2, r3, #31
 8005652:	4613      	mov	r3, r2
 8005654:	005b      	lsls	r3, r3, #1
 8005656:	4413      	add	r3, r2
 8005658:	3b1e      	subs	r3, #30
 800565a:	051b      	lsls	r3, r3, #20
 800565c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8005660:	e01e      	b.n	80056a0 <HAL_ADCEx_InjectedConfigChannel+0x8a0>
 8005662:	683b      	ldr	r3, [r7, #0]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005668:	693b      	ldr	r3, [r7, #16]
 800566a:	fa93 f3a3 	rbit	r3, r3
 800566e:	60fb      	str	r3, [r7, #12]
  return result;
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8005674:	697b      	ldr	r3, [r7, #20]
 8005676:	2b00      	cmp	r3, #0
 8005678:	d104      	bne.n	8005684 <HAL_ADCEx_InjectedConfigChannel+0x884>
    return 32U;
 800567a:	2320      	movs	r3, #32
 800567c:	e006      	b.n	800568c <HAL_ADCEx_InjectedConfigChannel+0x88c>
 800567e:	bf00      	nop
 8005680:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8005684:	697b      	ldr	r3, [r7, #20]
 8005686:	fab3 f383 	clz	r3, r3
 800568a:	b2db      	uxtb	r3, r3
 800568c:	3301      	adds	r3, #1
 800568e:	f003 021f 	and.w	r2, r3, #31
 8005692:	4613      	mov	r3, r2
 8005694:	005b      	lsls	r3, r3, #1
 8005696:	4413      	add	r3, r2
 8005698:	3b1e      	subs	r3, #30
 800569a:	051b      	lsls	r3, r3, #20
 800569c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
      LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80056a0:	430b      	orrs	r3, r1
 80056a2:	683a      	ldr	r2, [r7, #0]
 80056a4:	6892      	ldr	r2, [r2, #8]
 80056a6:	4619      	mov	r1, r3
 80056a8:	f7ff f9b4 	bl	8004a14 <LL_ADC_SetChannelSamplingTime>
  /* internal measurement paths enable: If internal channel selected,       */
  /* enable dedicated internal buffers and path.                            */
  /* Note: these internal measurement paths can be disabled using           */
  /* HAL_ADC_DeInit().                                                      */

  if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfigInjected->InjectedChannel))
 80056ac:	683b      	ldr	r3, [r7, #0]
 80056ae:	681a      	ldr	r2, [r3, #0]
 80056b0:	4b3a      	ldr	r3, [pc, #232]	; (800579c <HAL_ADCEx_InjectedConfigChannel+0x99c>)
 80056b2:	4013      	ands	r3, r2
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	d067      	beq.n	8005788 <HAL_ADCEx_InjectedConfigChannel+0x988>
  {
    tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80056b8:	4839      	ldr	r0, [pc, #228]	; (80057a0 <HAL_ADCEx_InjectedConfigChannel+0x9a0>)
 80056ba:	f7ff f8f0 	bl	800489e <LL_ADC_GetCommonPathInternalCh>
 80056be:	f8c7 00c0 	str.w	r0, [r7, #192]	; 0xc0

    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR_ADC1)
 80056c2:	683b      	ldr	r3, [r7, #0]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	4a37      	ldr	r2, [pc, #220]	; (80057a4 <HAL_ADCEx_InjectedConfigChannel+0x9a4>)
 80056c8:	4293      	cmp	r3, r2
 80056ca:	d004      	beq.n	80056d6 <HAL_ADCEx_InjectedConfigChannel+0x8d6>
         || (sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 80056cc:	683b      	ldr	r3, [r7, #0]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	4a35      	ldr	r2, [pc, #212]	; (80057a8 <HAL_ADCEx_InjectedConfigChannel+0x9a8>)
 80056d2:	4293      	cmp	r3, r2
 80056d4:	d127      	bne.n	8005726 <HAL_ADCEx_InjectedConfigChannel+0x926>
        && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80056d6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80056da:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d121      	bne.n	8005726 <HAL_ADCEx_InjectedConfigChannel+0x926>
    {
      if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80056ea:	d14d      	bne.n	8005788 <HAL_ADCEx_InjectedConfigChannel+0x988>
      {
        LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80056ec:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80056f0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80056f4:	4619      	mov	r1, r3
 80056f6:	482a      	ldr	r0, [pc, #168]	; (80057a0 <HAL_ADCEx_InjectedConfigChannel+0x9a0>)
 80056f8:	f7ff f8be 	bl	8004878 <LL_ADC_SetCommonPathInternalCh>
        /* Delay for temperature sensor stabilization time */
        /* Wait loop initialization and execution */
        /* Note: Variable divided by 2 to compensate partially              */
        /*       CPU processing cycles, scaling in us split to not          */
        /*       exceed 32 bits register capacity and handle low frequency. */
        wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (((SystemCoreClock / (100000UL * 2UL)) + 1UL) + 1UL));
 80056fc:	4b2b      	ldr	r3, [pc, #172]	; (80057ac <HAL_ADCEx_InjectedConfigChannel+0x9ac>)
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	099b      	lsrs	r3, r3, #6
 8005702:	4a2b      	ldr	r2, [pc, #172]	; (80057b0 <HAL_ADCEx_InjectedConfigChannel+0x9b0>)
 8005704:	fba2 2303 	umull	r2, r3, r2, r3
 8005708:	099a      	lsrs	r2, r3, #6
 800570a:	4613      	mov	r3, r2
 800570c:	005b      	lsls	r3, r3, #1
 800570e:	4413      	add	r3, r2
 8005710:	009b      	lsls	r3, r3, #2
 8005712:	3318      	adds	r3, #24
 8005714:	60bb      	str	r3, [r7, #8]
        while (wait_loop_index != 0UL)
 8005716:	e002      	b.n	800571e <HAL_ADCEx_InjectedConfigChannel+0x91e>
        {
          wait_loop_index--;
 8005718:	68bb      	ldr	r3, [r7, #8]
 800571a:	3b01      	subs	r3, #1
 800571c:	60bb      	str	r3, [r7, #8]
        while (wait_loop_index != 0UL)
 800571e:	68bb      	ldr	r3, [r7, #8]
 8005720:	2b00      	cmp	r3, #0
 8005722:	d1f9      	bne.n	8005718 <HAL_ADCEx_InjectedConfigChannel+0x918>
      if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8005724:	e030      	b.n	8005788 <HAL_ADCEx_InjectedConfigChannel+0x988>
        }
      }
    }
    else if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_VBAT)
 8005726:	683b      	ldr	r3, [r7, #0]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	4a22      	ldr	r2, [pc, #136]	; (80057b4 <HAL_ADCEx_InjectedConfigChannel+0x9b4>)
 800572c:	4293      	cmp	r3, r2
 800572e:	d113      	bne.n	8005758 <HAL_ADCEx_InjectedConfigChannel+0x958>
             && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8005730:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8005734:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005738:	2b00      	cmp	r3, #0
 800573a:	d10d      	bne.n	8005758 <HAL_ADCEx_InjectedConfigChannel+0x958>
    {
      if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	4a1d      	ldr	r2, [pc, #116]	; (80057b8 <HAL_ADCEx_InjectedConfigChannel+0x9b8>)
 8005742:	4293      	cmp	r3, r2
 8005744:	d020      	beq.n	8005788 <HAL_ADCEx_InjectedConfigChannel+0x988>
      {
        LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8005746:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800574a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800574e:	4619      	mov	r1, r3
 8005750:	4813      	ldr	r0, [pc, #76]	; (80057a0 <HAL_ADCEx_InjectedConfigChannel+0x9a0>)
 8005752:	f7ff f891 	bl	8004878 <LL_ADC_SetCommonPathInternalCh>
      if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8005756:	e017      	b.n	8005788 <HAL_ADCEx_InjectedConfigChannel+0x988>
                                       LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
      }
    }
    else if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_VREFINT)
 8005758:	683b      	ldr	r3, [r7, #0]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	4a17      	ldr	r2, [pc, #92]	; (80057bc <HAL_ADCEx_InjectedConfigChannel+0x9bc>)
 800575e:	4293      	cmp	r3, r2
 8005760:	d112      	bne.n	8005788 <HAL_ADCEx_InjectedConfigChannel+0x988>
             && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8005762:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8005766:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800576a:	2b00      	cmp	r3, #0
 800576c:	d10c      	bne.n	8005788 <HAL_ADCEx_InjectedConfigChannel+0x988>
    {
      if (ADC_VREFINT_INSTANCE(hadc))
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	4a11      	ldr	r2, [pc, #68]	; (80057b8 <HAL_ADCEx_InjectedConfigChannel+0x9b8>)
 8005774:	4293      	cmp	r3, r2
 8005776:	d007      	beq.n	8005788 <HAL_ADCEx_InjectedConfigChannel+0x988>
      {
        LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8005778:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800577c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8005780:	4619      	mov	r1, r3
 8005782:	4807      	ldr	r0, [pc, #28]	; (80057a0 <HAL_ADCEx_InjectedConfigChannel+0x9a0>)
 8005784:	f7ff f878 	bl	8004878 <LL_ADC_SetCommonPathInternalCh>
      /* nothing to do */
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	2200      	movs	r2, #0
 800578c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8005790:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8005794:	4618      	mov	r0, r3
 8005796:	37d8      	adds	r7, #216	; 0xd8
 8005798:	46bd      	mov	sp, r7
 800579a:	bd80      	pop	{r7, pc}
 800579c:	80080000 	.word	0x80080000
 80057a0:	50000300 	.word	0x50000300
 80057a4:	c3210000 	.word	0xc3210000
 80057a8:	90c00010 	.word	0x90c00010
 80057ac:	2000001c 	.word	0x2000001c
 80057b0:	053e2d63 	.word	0x053e2d63
 80057b4:	c7520000 	.word	0xc7520000
 80057b8:	50000100 	.word	0x50000100
 80057bc:	cb840000 	.word	0xcb840000

080057c0 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 80057c0:	b590      	push	{r4, r7, lr}
 80057c2:	b0a1      	sub	sp, #132	; 0x84
 80057c4:	af00      	add	r7, sp, #0
 80057c6:	6078      	str	r0, [r7, #4]
 80057c8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80057ca:	2300      	movs	r3, #0
 80057cc:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80057d6:	2b01      	cmp	r3, #1
 80057d8:	d101      	bne.n	80057de <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80057da:	2302      	movs	r3, #2
 80057dc:	e08b      	b.n	80058f6 <HAL_ADCEx_MultiModeConfigChannel+0x136>
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	2201      	movs	r2, #1
 80057e2:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 80057e6:	2300      	movs	r3, #0
 80057e8:	667b      	str	r3, [r7, #100]	; 0x64
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 80057ea:	2300      	movs	r3, #0
 80057ec:	66bb      	str	r3, [r7, #104]	; 0x68

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80057f6:	d102      	bne.n	80057fe <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 80057f8:	4b41      	ldr	r3, [pc, #260]	; (8005900 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 80057fa:	60bb      	str	r3, [r7, #8]
 80057fc:	e001      	b.n	8005802 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 80057fe:	2300      	movs	r3, #0
 8005800:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8005802:	68bb      	ldr	r3, [r7, #8]
 8005804:	2b00      	cmp	r3, #0
 8005806:	d10b      	bne.n	8005820 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800580c:	f043 0220 	orr.w	r2, r3, #32
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	2200      	movs	r2, #0
 8005818:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 800581c:	2301      	movs	r3, #1
 800581e:	e06a      	b.n	80058f6 <HAL_ADCEx_MultiModeConfigChannel+0x136>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8005820:	68bb      	ldr	r3, [r7, #8]
 8005822:	4618      	mov	r0, r3
 8005824:	f7ff f96b 	bl	8004afe <LL_ADC_REG_IsConversionOngoing>
 8005828:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	4618      	mov	r0, r3
 8005830:	f7ff f965 	bl	8004afe <LL_ADC_REG_IsConversionOngoing>
 8005834:	4603      	mov	r3, r0
 8005836:	2b00      	cmp	r3, #0
 8005838:	d14c      	bne.n	80058d4 <HAL_ADCEx_MultiModeConfigChannel+0x114>
      && (tmphadcSlave_conversion_on_going == 0UL))
 800583a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800583c:	2b00      	cmp	r3, #0
 800583e:	d149      	bne.n	80058d4 <HAL_ADCEx_MultiModeConfigChannel+0x114>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8005840:	4b30      	ldr	r3, [pc, #192]	; (8005904 <HAL_ADCEx_MultiModeConfigChannel+0x144>)
 8005842:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8005844:	683b      	ldr	r3, [r7, #0]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	2b00      	cmp	r3, #0
 800584a:	d028      	beq.n	800589e <HAL_ADCEx_MultiModeConfigChannel+0xde>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 800584c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800584e:	689b      	ldr	r3, [r3, #8]
 8005850:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005854:	683b      	ldr	r3, [r7, #0]
 8005856:	6859      	ldr	r1, [r3, #4]
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800585e:	035b      	lsls	r3, r3, #13
 8005860:	430b      	orrs	r3, r1
 8005862:	431a      	orrs	r2, r3
 8005864:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005866:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8005868:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 800586c:	f7ff f934 	bl	8004ad8 <LL_ADC_IsEnabled>
 8005870:	4604      	mov	r4, r0
 8005872:	4823      	ldr	r0, [pc, #140]	; (8005900 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8005874:	f7ff f930 	bl	8004ad8 <LL_ADC_IsEnabled>
 8005878:	4603      	mov	r3, r0
 800587a:	4323      	orrs	r3, r4
 800587c:	2b00      	cmp	r3, #0
 800587e:	d133      	bne.n	80058e8 <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8005880:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005882:	689b      	ldr	r3, [r3, #8]
 8005884:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8005888:	f023 030f 	bic.w	r3, r3, #15
 800588c:	683a      	ldr	r2, [r7, #0]
 800588e:	6811      	ldr	r1, [r2, #0]
 8005890:	683a      	ldr	r2, [r7, #0]
 8005892:	6892      	ldr	r2, [r2, #8]
 8005894:	430a      	orrs	r2, r1
 8005896:	431a      	orrs	r2, r3
 8005898:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800589a:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800589c:	e024      	b.n	80058e8 <HAL_ADCEx_MultiModeConfigChannel+0x128>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 800589e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80058a0:	689b      	ldr	r3, [r3, #8]
 80058a2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80058a6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80058a8:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80058aa:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80058ae:	f7ff f913 	bl	8004ad8 <LL_ADC_IsEnabled>
 80058b2:	4604      	mov	r4, r0
 80058b4:	4812      	ldr	r0, [pc, #72]	; (8005900 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 80058b6:	f7ff f90f 	bl	8004ad8 <LL_ADC_IsEnabled>
 80058ba:	4603      	mov	r3, r0
 80058bc:	4323      	orrs	r3, r4
 80058be:	2b00      	cmp	r3, #0
 80058c0:	d112      	bne.n	80058e8 <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80058c2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80058c4:	689b      	ldr	r3, [r3, #8]
 80058c6:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80058ca:	f023 030f 	bic.w	r3, r3, #15
 80058ce:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80058d0:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80058d2:	e009      	b.n	80058e8 <HAL_ADCEx_MultiModeConfigChannel+0x128>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80058d8:	f043 0220 	orr.w	r2, r3, #32
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80058e0:	2301      	movs	r3, #1
 80058e2:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 80058e6:	e000      	b.n	80058ea <HAL_ADCEx_MultiModeConfigChannel+0x12a>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80058e8:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	2200      	movs	r2, #0
 80058ee:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 80058f2:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 80058f6:	4618      	mov	r0, r3
 80058f8:	3784      	adds	r7, #132	; 0x84
 80058fa:	46bd      	mov	sp, r7
 80058fc:	bd90      	pop	{r4, r7, pc}
 80058fe:	bf00      	nop
 8005900:	50000100 	.word	0x50000100
 8005904:	50000300 	.word	0x50000300

08005908 <HAL_CORDIC_Init>:
  * @brief  Initialize the CORDIC peripheral and the associated handle.
  * @param  hcordic pointer to a CORDIC_HandleTypeDef structure.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CORDIC_Init(CORDIC_HandleTypeDef *hcordic)
{
 8005908:	b580      	push	{r7, lr}
 800590a:	b082      	sub	sp, #8
 800590c:	af00      	add	r7, sp, #0
 800590e:	6078      	str	r0, [r7, #4]
  /* Check the CORDIC handle allocation */
  if (hcordic == NULL)
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	2b00      	cmp	r3, #0
 8005914:	d101      	bne.n	800591a <HAL_CORDIC_Init+0x12>
  {
    /* Return error status */
    return HAL_ERROR;
 8005916:	2301      	movs	r3, #1
 8005918:	e023      	b.n	8005962 <HAL_CORDIC_Init+0x5a>

    /* Initialize the low level hardware */
    hcordic->MspInitCallback(hcordic);
  }
#else
  if (hcordic->State == HAL_CORDIC_STATE_RESET)
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8005920:	b2db      	uxtb	r3, r3
 8005922:	2b00      	cmp	r3, #0
 8005924:	d106      	bne.n	8005934 <HAL_CORDIC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hcordic->Lock = HAL_UNLOCKED;
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	2200      	movs	r2, #0
 800592a:	f883 2020 	strb.w	r2, [r3, #32]

    /* Initialize the low level hardware */
    HAL_CORDIC_MspInit(hcordic);
 800592e:	6878      	ldr	r0, [r7, #4]
 8005930:	f7fc ff86 	bl	8002840 <HAL_CORDIC_MspInit>
  }
#endif /* (USE_HAL_CORDIC_REGISTER_CALLBACKS) */

  /* Set CORDIC error code to none */
  hcordic->ErrorCode = HAL_CORDIC_ERROR_NONE;
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	2200      	movs	r2, #0
 8005938:	625a      	str	r2, [r3, #36]	; 0x24

  /* Reset pInBuff and pOutBuff */
  hcordic->pInBuff = NULL;
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	2200      	movs	r2, #0
 800593e:	605a      	str	r2, [r3, #4]
  hcordic->pOutBuff = NULL;
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	2200      	movs	r2, #0
 8005944:	609a      	str	r2, [r3, #8]

  /* Reset NbCalcToOrder and NbCalcToGet */
  hcordic->NbCalcToOrder = 0U;
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	2200      	movs	r2, #0
 800594a:	60da      	str	r2, [r3, #12]
  hcordic->NbCalcToGet = 0U;
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	2200      	movs	r2, #0
 8005950:	611a      	str	r2, [r3, #16]

  /* Reset DMADirection */
  hcordic->DMADirection = CORDIC_DMA_DIR_NONE;
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	2200      	movs	r2, #0
 8005956:	615a      	str	r2, [r3, #20]

  /* Change CORDIC peripheral state */
  hcordic->State = HAL_CORDIC_STATE_READY;
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	2201      	movs	r2, #1
 800595c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Return function status */
  return HAL_OK;
 8005960:	2300      	movs	r3, #0
}
 8005962:	4618      	mov	r0, r3
 8005964:	3708      	adds	r7, #8
 8005966:	46bd      	mov	sp, r7
 8005968:	bd80      	pop	{r7, pc}
	...

0800596c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800596c:	b480      	push	{r7}
 800596e:	b085      	sub	sp, #20
 8005970:	af00      	add	r7, sp, #0
 8005972:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	f003 0307 	and.w	r3, r3, #7
 800597a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800597c:	4b0c      	ldr	r3, [pc, #48]	; (80059b0 <__NVIC_SetPriorityGrouping+0x44>)
 800597e:	68db      	ldr	r3, [r3, #12]
 8005980:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005982:	68ba      	ldr	r2, [r7, #8]
 8005984:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005988:	4013      	ands	r3, r2
 800598a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005990:	68bb      	ldr	r3, [r7, #8]
 8005992:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005994:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8005998:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800599c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800599e:	4a04      	ldr	r2, [pc, #16]	; (80059b0 <__NVIC_SetPriorityGrouping+0x44>)
 80059a0:	68bb      	ldr	r3, [r7, #8]
 80059a2:	60d3      	str	r3, [r2, #12]
}
 80059a4:	bf00      	nop
 80059a6:	3714      	adds	r7, #20
 80059a8:	46bd      	mov	sp, r7
 80059aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ae:	4770      	bx	lr
 80059b0:	e000ed00 	.word	0xe000ed00

080059b4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80059b4:	b480      	push	{r7}
 80059b6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80059b8:	4b04      	ldr	r3, [pc, #16]	; (80059cc <__NVIC_GetPriorityGrouping+0x18>)
 80059ba:	68db      	ldr	r3, [r3, #12]
 80059bc:	0a1b      	lsrs	r3, r3, #8
 80059be:	f003 0307 	and.w	r3, r3, #7
}
 80059c2:	4618      	mov	r0, r3
 80059c4:	46bd      	mov	sp, r7
 80059c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ca:	4770      	bx	lr
 80059cc:	e000ed00 	.word	0xe000ed00

080059d0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80059d0:	b480      	push	{r7}
 80059d2:	b083      	sub	sp, #12
 80059d4:	af00      	add	r7, sp, #0
 80059d6:	4603      	mov	r3, r0
 80059d8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80059da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80059de:	2b00      	cmp	r3, #0
 80059e0:	db0b      	blt.n	80059fa <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80059e2:	79fb      	ldrb	r3, [r7, #7]
 80059e4:	f003 021f 	and.w	r2, r3, #31
 80059e8:	4907      	ldr	r1, [pc, #28]	; (8005a08 <__NVIC_EnableIRQ+0x38>)
 80059ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80059ee:	095b      	lsrs	r3, r3, #5
 80059f0:	2001      	movs	r0, #1
 80059f2:	fa00 f202 	lsl.w	r2, r0, r2
 80059f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80059fa:	bf00      	nop
 80059fc:	370c      	adds	r7, #12
 80059fe:	46bd      	mov	sp, r7
 8005a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a04:	4770      	bx	lr
 8005a06:	bf00      	nop
 8005a08:	e000e100 	.word	0xe000e100

08005a0c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005a0c:	b480      	push	{r7}
 8005a0e:	b083      	sub	sp, #12
 8005a10:	af00      	add	r7, sp, #0
 8005a12:	4603      	mov	r3, r0
 8005a14:	6039      	str	r1, [r7, #0]
 8005a16:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005a18:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	db0a      	blt.n	8005a36 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005a20:	683b      	ldr	r3, [r7, #0]
 8005a22:	b2da      	uxtb	r2, r3
 8005a24:	490c      	ldr	r1, [pc, #48]	; (8005a58 <__NVIC_SetPriority+0x4c>)
 8005a26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005a2a:	0112      	lsls	r2, r2, #4
 8005a2c:	b2d2      	uxtb	r2, r2
 8005a2e:	440b      	add	r3, r1
 8005a30:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005a34:	e00a      	b.n	8005a4c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005a36:	683b      	ldr	r3, [r7, #0]
 8005a38:	b2da      	uxtb	r2, r3
 8005a3a:	4908      	ldr	r1, [pc, #32]	; (8005a5c <__NVIC_SetPriority+0x50>)
 8005a3c:	79fb      	ldrb	r3, [r7, #7]
 8005a3e:	f003 030f 	and.w	r3, r3, #15
 8005a42:	3b04      	subs	r3, #4
 8005a44:	0112      	lsls	r2, r2, #4
 8005a46:	b2d2      	uxtb	r2, r2
 8005a48:	440b      	add	r3, r1
 8005a4a:	761a      	strb	r2, [r3, #24]
}
 8005a4c:	bf00      	nop
 8005a4e:	370c      	adds	r7, #12
 8005a50:	46bd      	mov	sp, r7
 8005a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a56:	4770      	bx	lr
 8005a58:	e000e100 	.word	0xe000e100
 8005a5c:	e000ed00 	.word	0xe000ed00

08005a60 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005a60:	b480      	push	{r7}
 8005a62:	b089      	sub	sp, #36	; 0x24
 8005a64:	af00      	add	r7, sp, #0
 8005a66:	60f8      	str	r0, [r7, #12]
 8005a68:	60b9      	str	r1, [r7, #8]
 8005a6a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	f003 0307 	and.w	r3, r3, #7
 8005a72:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005a74:	69fb      	ldr	r3, [r7, #28]
 8005a76:	f1c3 0307 	rsb	r3, r3, #7
 8005a7a:	2b04      	cmp	r3, #4
 8005a7c:	bf28      	it	cs
 8005a7e:	2304      	movcs	r3, #4
 8005a80:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005a82:	69fb      	ldr	r3, [r7, #28]
 8005a84:	3304      	adds	r3, #4
 8005a86:	2b06      	cmp	r3, #6
 8005a88:	d902      	bls.n	8005a90 <NVIC_EncodePriority+0x30>
 8005a8a:	69fb      	ldr	r3, [r7, #28]
 8005a8c:	3b03      	subs	r3, #3
 8005a8e:	e000      	b.n	8005a92 <NVIC_EncodePriority+0x32>
 8005a90:	2300      	movs	r3, #0
 8005a92:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005a94:	f04f 32ff 	mov.w	r2, #4294967295
 8005a98:	69bb      	ldr	r3, [r7, #24]
 8005a9a:	fa02 f303 	lsl.w	r3, r2, r3
 8005a9e:	43da      	mvns	r2, r3
 8005aa0:	68bb      	ldr	r3, [r7, #8]
 8005aa2:	401a      	ands	r2, r3
 8005aa4:	697b      	ldr	r3, [r7, #20]
 8005aa6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005aa8:	f04f 31ff 	mov.w	r1, #4294967295
 8005aac:	697b      	ldr	r3, [r7, #20]
 8005aae:	fa01 f303 	lsl.w	r3, r1, r3
 8005ab2:	43d9      	mvns	r1, r3
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005ab8:	4313      	orrs	r3, r2
         );
}
 8005aba:	4618      	mov	r0, r3
 8005abc:	3724      	adds	r7, #36	; 0x24
 8005abe:	46bd      	mov	sp, r7
 8005ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ac4:	4770      	bx	lr
	...

08005ac8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005ac8:	b580      	push	{r7, lr}
 8005aca:	b082      	sub	sp, #8
 8005acc:	af00      	add	r7, sp, #0
 8005ace:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	3b01      	subs	r3, #1
 8005ad4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005ad8:	d301      	bcc.n	8005ade <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005ada:	2301      	movs	r3, #1
 8005adc:	e00f      	b.n	8005afe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005ade:	4a0a      	ldr	r2, [pc, #40]	; (8005b08 <SysTick_Config+0x40>)
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	3b01      	subs	r3, #1
 8005ae4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005ae6:	210f      	movs	r1, #15
 8005ae8:	f04f 30ff 	mov.w	r0, #4294967295
 8005aec:	f7ff ff8e 	bl	8005a0c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005af0:	4b05      	ldr	r3, [pc, #20]	; (8005b08 <SysTick_Config+0x40>)
 8005af2:	2200      	movs	r2, #0
 8005af4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005af6:	4b04      	ldr	r3, [pc, #16]	; (8005b08 <SysTick_Config+0x40>)
 8005af8:	2207      	movs	r2, #7
 8005afa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005afc:	2300      	movs	r3, #0
}
 8005afe:	4618      	mov	r0, r3
 8005b00:	3708      	adds	r7, #8
 8005b02:	46bd      	mov	sp, r7
 8005b04:	bd80      	pop	{r7, pc}
 8005b06:	bf00      	nop
 8005b08:	e000e010 	.word	0xe000e010

08005b0c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005b0c:	b580      	push	{r7, lr}
 8005b0e:	b082      	sub	sp, #8
 8005b10:	af00      	add	r7, sp, #0
 8005b12:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005b14:	6878      	ldr	r0, [r7, #4]
 8005b16:	f7ff ff29 	bl	800596c <__NVIC_SetPriorityGrouping>
}
 8005b1a:	bf00      	nop
 8005b1c:	3708      	adds	r7, #8
 8005b1e:	46bd      	mov	sp, r7
 8005b20:	bd80      	pop	{r7, pc}

08005b22 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005b22:	b580      	push	{r7, lr}
 8005b24:	b086      	sub	sp, #24
 8005b26:	af00      	add	r7, sp, #0
 8005b28:	4603      	mov	r3, r0
 8005b2a:	60b9      	str	r1, [r7, #8]
 8005b2c:	607a      	str	r2, [r7, #4]
 8005b2e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8005b30:	f7ff ff40 	bl	80059b4 <__NVIC_GetPriorityGrouping>
 8005b34:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005b36:	687a      	ldr	r2, [r7, #4]
 8005b38:	68b9      	ldr	r1, [r7, #8]
 8005b3a:	6978      	ldr	r0, [r7, #20]
 8005b3c:	f7ff ff90 	bl	8005a60 <NVIC_EncodePriority>
 8005b40:	4602      	mov	r2, r0
 8005b42:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005b46:	4611      	mov	r1, r2
 8005b48:	4618      	mov	r0, r3
 8005b4a:	f7ff ff5f 	bl	8005a0c <__NVIC_SetPriority>
}
 8005b4e:	bf00      	nop
 8005b50:	3718      	adds	r7, #24
 8005b52:	46bd      	mov	sp, r7
 8005b54:	bd80      	pop	{r7, pc}

08005b56 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005b56:	b580      	push	{r7, lr}
 8005b58:	b082      	sub	sp, #8
 8005b5a:	af00      	add	r7, sp, #0
 8005b5c:	4603      	mov	r3, r0
 8005b5e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005b60:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005b64:	4618      	mov	r0, r3
 8005b66:	f7ff ff33 	bl	80059d0 <__NVIC_EnableIRQ>
}
 8005b6a:	bf00      	nop
 8005b6c:	3708      	adds	r7, #8
 8005b6e:	46bd      	mov	sp, r7
 8005b70:	bd80      	pop	{r7, pc}

08005b72 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005b72:	b580      	push	{r7, lr}
 8005b74:	b082      	sub	sp, #8
 8005b76:	af00      	add	r7, sp, #0
 8005b78:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005b7a:	6878      	ldr	r0, [r7, #4]
 8005b7c:	f7ff ffa4 	bl	8005ac8 <SysTick_Config>
 8005b80:	4603      	mov	r3, r0
}
 8005b82:	4618      	mov	r0, r3
 8005b84:	3708      	adds	r7, #8
 8005b86:	46bd      	mov	sp, r7
 8005b88:	bd80      	pop	{r7, pc}

08005b8a <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8005b8a:	b580      	push	{r7, lr}
 8005b8c:	b082      	sub	sp, #8
 8005b8e:	af00      	add	r7, sp, #0
 8005b90:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	d101      	bne.n	8005b9c <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8005b98:	2301      	movs	r3, #1
 8005b9a:	e014      	b.n	8005bc6 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	791b      	ldrb	r3, [r3, #4]
 8005ba0:	b2db      	uxtb	r3, r3
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	d105      	bne.n	8005bb2 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	2200      	movs	r2, #0
 8005baa:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8005bac:	6878      	ldr	r0, [r7, #4]
 8005bae:	f7fc fe67 	bl	8002880 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	2202      	movs	r2, #2
 8005bb6:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	2200      	movs	r2, #0
 8005bbc:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	2201      	movs	r2, #1
 8005bc2:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8005bc4:	2300      	movs	r3, #0
}
 8005bc6:	4618      	mov	r0, r3
 8005bc8:	3708      	adds	r7, #8
 8005bca:	46bd      	mov	sp, r7
 8005bcc:	bd80      	pop	{r7, pc}

08005bce <HAL_DAC_IRQHandler>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(DAC_HandleTypeDef *hdac)
{
 8005bce:	b580      	push	{r7, lr}
 8005bd0:	b082      	sub	sp, #8
 8005bd2:	af00      	add	r7, sp, #0
 8005bd4:	6078      	str	r0, [r7, #4]
  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR1))
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005be0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005be4:	d120      	bne.n	8005c28 <HAL_DAC_IRQHandler+0x5a>
  {
    /* Check underrun flag of DAC channel 1 */
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR1))
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005bec:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005bf0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005bf4:	d118      	bne.n	8005c28 <HAL_DAC_IRQHandler+0x5a>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	2204      	movs	r2, #4
 8005bfa:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel1 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH1);
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	691b      	ldr	r3, [r3, #16]
 8005c00:	f043 0201 	orr.w	r2, r3, #1
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR1);
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8005c10:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel1 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	681a      	ldr	r2, [r3, #0]
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005c20:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh1(hdac);
#else
      HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 8005c22:	6878      	ldr	r0, [r7, #4]
 8005c24:	f000 f82d 	bl	8005c82 <HAL_DAC_DMAUnderrunCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }


  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR2))
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005c32:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005c36:	d120      	bne.n	8005c7a <HAL_DAC_IRQHandler+0xac>
  {
    /* Check underrun flag of DAC channel 2 */
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR2))
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005c3e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005c42:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005c46:	d118      	bne.n	8005c7a <HAL_DAC_IRQHandler+0xac>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	2204      	movs	r2, #4
 8005c4c:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel2 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH2);
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	691b      	ldr	r3, [r3, #16]
 8005c52:	f043 0202 	orr.w	r2, r3, #2
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR2);
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8005c62:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel2 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	681a      	ldr	r2, [r3, #0]
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8005c72:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh2(hdac);
#else
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 8005c74:	6878      	ldr	r0, [r7, #4]
 8005c76:	f000 f9b7 	bl	8005fe8 <HAL_DACEx_DMAUnderrunCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }

}
 8005c7a:	bf00      	nop
 8005c7c:	3708      	adds	r7, #8
 8005c7e:	46bd      	mov	sp, r7
 8005c80:	bd80      	pop	{r7, pc}

08005c82 <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8005c82:	b480      	push	{r7}
 8005c84:	b083      	sub	sp, #12
 8005c86:	af00      	add	r7, sp, #0
 8005c88:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 8005c8a:	bf00      	nop
 8005c8c:	370c      	adds	r7, #12
 8005c8e:	46bd      	mov	sp, r7
 8005c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c94:	4770      	bx	lr
	...

08005c98 <HAL_DAC_ConfigChannel>:
  *         (1) On this STM32 series, parameter not available on all instances.
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8005c98:	b580      	push	{r7, lr}
 8005c9a:	b08a      	sub	sp, #40	; 0x28
 8005c9c:	af00      	add	r7, sp, #0
 8005c9e:	60f8      	str	r0, [r7, #12]
 8005ca0:	60b9      	str	r1, [r7, #8]
 8005ca2:	607a      	str	r2, [r7, #4]
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_DMADoubleDataMode));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_SignedFormat));

  /* Process locked */
  __HAL_LOCK(hdac);
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	795b      	ldrb	r3, [r3, #5]
 8005ca8:	2b01      	cmp	r3, #1
 8005caa:	d101      	bne.n	8005cb0 <HAL_DAC_ConfigChannel+0x18>
 8005cac:	2302      	movs	r3, #2
 8005cae:	e192      	b.n	8005fd6 <HAL_DAC_ConfigChannel+0x33e>
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	2201      	movs	r2, #1
 8005cb4:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	2202      	movs	r2, #2
 8005cba:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8005cbc:	68bb      	ldr	r3, [r7, #8]
 8005cbe:	689b      	ldr	r3, [r3, #8]
 8005cc0:	2b04      	cmp	r3, #4
 8005cc2:	d174      	bne.n	8005dae <HAL_DAC_ConfigChannel+0x116>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8005cc4:	f7fd fb66 	bl	8003394 <HAL_GetTick>
 8005cc8:	61f8      	str	r0, [r7, #28]

    if (Channel == DAC_CHANNEL_1)
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	d134      	bne.n	8005d3a <HAL_DAC_ConfigChannel+0xa2>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8005cd0:	e011      	b.n	8005cf6 <HAL_DAC_ConfigChannel+0x5e>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8005cd2:	f7fd fb5f 	bl	8003394 <HAL_GetTick>
 8005cd6:	4602      	mov	r2, r0
 8005cd8:	69fb      	ldr	r3, [r7, #28]
 8005cda:	1ad3      	subs	r3, r2, r3
 8005cdc:	2b01      	cmp	r3, #1
 8005cde:	d90a      	bls.n	8005cf6 <HAL_DAC_ConfigChannel+0x5e>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	691b      	ldr	r3, [r3, #16]
 8005ce4:	f043 0208 	orr.w	r2, r3, #8
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	2203      	movs	r2, #3
 8005cf0:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 8005cf2:	2303      	movs	r3, #3
 8005cf4:	e16f      	b.n	8005fd6 <HAL_DAC_ConfigChannel+0x33e>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005cfc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	d1e6      	bne.n	8005cd2 <HAL_DAC_ConfigChannel+0x3a>
        }
      }
      HAL_Delay(1);
 8005d04:	2001      	movs	r0, #1
 8005d06:	f7fd fb51 	bl	80033ac <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	68ba      	ldr	r2, [r7, #8]
 8005d10:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005d12:	641a      	str	r2, [r3, #64]	; 0x40
 8005d14:	e01e      	b.n	8005d54 <HAL_DAC_ConfigChannel+0xbc>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8005d16:	f7fd fb3d 	bl	8003394 <HAL_GetTick>
 8005d1a:	4602      	mov	r2, r0
 8005d1c:	69fb      	ldr	r3, [r7, #28]
 8005d1e:	1ad3      	subs	r3, r2, r3
 8005d20:	2b01      	cmp	r3, #1
 8005d22:	d90a      	bls.n	8005d3a <HAL_DAC_ConfigChannel+0xa2>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	691b      	ldr	r3, [r3, #16]
 8005d28:	f043 0208 	orr.w	r2, r3, #8
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	2203      	movs	r2, #3
 8005d34:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 8005d36:	2303      	movs	r3, #3
 8005d38:	e14d      	b.n	8005fd6 <HAL_DAC_ConfigChannel+0x33e>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	dbe8      	blt.n	8005d16 <HAL_DAC_ConfigChannel+0x7e>
        }
      }
      HAL_Delay(1U);
 8005d44:	2001      	movs	r0, #1
 8005d46:	f7fd fb31 	bl	80033ac <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	68ba      	ldr	r2, [r7, #8]
 8005d50:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005d52:	645a      	str	r2, [r3, #68]	; 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	f003 0310 	and.w	r3, r3, #16
 8005d60:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8005d64:	fa01 f303 	lsl.w	r3, r1, r3
 8005d68:	43db      	mvns	r3, r3
 8005d6a:	ea02 0103 	and.w	r1, r2, r3
 8005d6e:	68bb      	ldr	r3, [r7, #8]
 8005d70:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	f003 0310 	and.w	r3, r3, #16
 8005d78:	409a      	lsls	r2, r3
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	430a      	orrs	r2, r1
 8005d80:	649a      	str	r2, [r3, #72]	; 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	f003 0310 	and.w	r3, r3, #16
 8005d8e:	21ff      	movs	r1, #255	; 0xff
 8005d90:	fa01 f303 	lsl.w	r3, r1, r3
 8005d94:	43db      	mvns	r3, r3
 8005d96:	ea02 0103 	and.w	r1, r2, r3
 8005d9a:	68bb      	ldr	r3, [r7, #8]
 8005d9c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	f003 0310 	and.w	r3, r3, #16
 8005da4:	409a      	lsls	r2, r3
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	430a      	orrs	r2, r1
 8005dac:	64da      	str	r2, [r3, #76]	; 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8005dae:	68bb      	ldr	r3, [r7, #8]
 8005db0:	69db      	ldr	r3, [r3, #28]
 8005db2:	2b01      	cmp	r3, #1
 8005db4:	d11d      	bne.n	8005df2 <HAL_DAC_ConfigChannel+0x15a>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005dbc:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	f003 0310 	and.w	r3, r3, #16
 8005dc4:	221f      	movs	r2, #31
 8005dc6:	fa02 f303 	lsl.w	r3, r2, r3
 8005dca:	43db      	mvns	r3, r3
 8005dcc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005dce:	4013      	ands	r3, r2
 8005dd0:	627b      	str	r3, [r7, #36]	; 0x24
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8005dd2:	68bb      	ldr	r3, [r7, #8]
 8005dd4:	6a1b      	ldr	r3, [r3, #32]
 8005dd6:	61bb      	str	r3, [r7, #24]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	f003 0310 	and.w	r3, r3, #16
 8005dde:	69ba      	ldr	r2, [r7, #24]
 8005de0:	fa02 f303 	lsl.w	r3, r2, r3
 8005de4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005de6:	4313      	orrs	r3, r2
 8005de8:	627b      	str	r3, [r7, #36]	; 0x24
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005df0:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005df8:	627b      	str	r3, [r7, #36]	; 0x24
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	f003 0310 	and.w	r3, r3, #16
 8005e00:	2207      	movs	r2, #7
 8005e02:	fa02 f303 	lsl.w	r3, r2, r3
 8005e06:	43db      	mvns	r3, r3
 8005e08:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005e0a:	4013      	ands	r3, r2
 8005e0c:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 8005e0e:	68bb      	ldr	r3, [r7, #8]
 8005e10:	699b      	ldr	r3, [r3, #24]
 8005e12:	2b01      	cmp	r3, #1
 8005e14:	d102      	bne.n	8005e1c <HAL_DAC_ConfigChannel+0x184>
  {
    connectOnChip = 0x00000000UL;
 8005e16:	2300      	movs	r3, #0
 8005e18:	623b      	str	r3, [r7, #32]
 8005e1a:	e00f      	b.n	8005e3c <HAL_DAC_ConfigChannel+0x1a4>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 8005e1c:	68bb      	ldr	r3, [r7, #8]
 8005e1e:	699b      	ldr	r3, [r3, #24]
 8005e20:	2b02      	cmp	r3, #2
 8005e22:	d102      	bne.n	8005e2a <HAL_DAC_ConfigChannel+0x192>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 8005e24:	2301      	movs	r3, #1
 8005e26:	623b      	str	r3, [r7, #32]
 8005e28:	e008      	b.n	8005e3c <HAL_DAC_ConfigChannel+0x1a4>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 8005e2a:	68bb      	ldr	r3, [r7, #8]
 8005e2c:	695b      	ldr	r3, [r3, #20]
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	d102      	bne.n	8005e38 <HAL_DAC_ConfigChannel+0x1a0>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 8005e32:	2301      	movs	r3, #1
 8005e34:	623b      	str	r3, [r7, #32]
 8005e36:	e001      	b.n	8005e3c <HAL_DAC_ConfigChannel+0x1a4>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 8005e38:	2300      	movs	r3, #0
 8005e3a:	623b      	str	r3, [r7, #32]
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 8005e3c:	68bb      	ldr	r3, [r7, #8]
 8005e3e:	689a      	ldr	r2, [r3, #8]
 8005e40:	68bb      	ldr	r3, [r7, #8]
 8005e42:	695b      	ldr	r3, [r3, #20]
 8005e44:	4313      	orrs	r3, r2
 8005e46:	6a3a      	ldr	r2, [r7, #32]
 8005e48:	4313      	orrs	r3, r2
 8005e4a:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_DMADOUBLEx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_DMADOUBLE1)) << (Channel & 0x10UL));
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	f003 0310 	and.w	r3, r3, #16
 8005e52:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005e56:	fa02 f303 	lsl.w	r3, r2, r3
 8005e5a:	43db      	mvns	r3, r3
 8005e5c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005e5e:	4013      	ands	r3, r2
 8005e60:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: DMA double data mode */
  tmpreg2 |= (sConfig->DAC_DMADoubleDataMode == ENABLE) ? DAC_MCR_DMADOUBLE1 : 0UL;
 8005e62:	68bb      	ldr	r3, [r7, #8]
 8005e64:	791b      	ldrb	r3, [r3, #4]
 8005e66:	2b01      	cmp	r3, #1
 8005e68:	d102      	bne.n	8005e70 <HAL_DAC_ConfigChannel+0x1d8>
 8005e6a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005e6e:	e000      	b.n	8005e72 <HAL_DAC_ConfigChannel+0x1da>
 8005e70:	2300      	movs	r3, #0
 8005e72:	69ba      	ldr	r2, [r7, #24]
 8005e74:	4313      	orrs	r3, r2
 8005e76:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_SINFORMATx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_SINFORMAT1)) << (Channel & 0x10UL));
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	f003 0310 	and.w	r3, r3, #16
 8005e7e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005e82:	fa02 f303 	lsl.w	r3, r2, r3
 8005e86:	43db      	mvns	r3, r3
 8005e88:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005e8a:	4013      	ands	r3, r2
 8005e8c:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: Signed format */
  tmpreg2 |= (sConfig->DAC_SignedFormat == ENABLE) ? DAC_MCR_SINFORMAT1 : 0UL;
 8005e8e:	68bb      	ldr	r3, [r7, #8]
 8005e90:	795b      	ldrb	r3, [r3, #5]
 8005e92:	2b01      	cmp	r3, #1
 8005e94:	d102      	bne.n	8005e9c <HAL_DAC_ConfigChannel+0x204>
 8005e96:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005e9a:	e000      	b.n	8005e9e <HAL_DAC_ConfigChannel+0x206>
 8005e9c:	2300      	movs	r3, #0
 8005e9e:	69ba      	ldr	r2, [r7, #24]
 8005ea0:	4313      	orrs	r3, r2
 8005ea2:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_HFSEL bits */
  tmpreg1 &= ~(DAC_MCR_HFSEL);
 8005ea4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ea6:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8005eaa:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for both DAC channels: high frequency mode */
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC == sConfig->DAC_HighFrequency)
 8005eac:	68bb      	ldr	r3, [r7, #8]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	2b02      	cmp	r3, #2
 8005eb2:	d114      	bne.n	8005ede <HAL_DAC_ConfigChannel+0x246>
  {
    hclkfreq = HAL_RCC_GetHCLKFreq();
 8005eb4:	f001 fa3a 	bl	800732c <HAL_RCC_GetHCLKFreq>
 8005eb8:	6178      	str	r0, [r7, #20]
    if (hclkfreq > HFSEL_ENABLE_THRESHOLD_160MHZ)
 8005eba:	697b      	ldr	r3, [r7, #20]
 8005ebc:	4a48      	ldr	r2, [pc, #288]	; (8005fe0 <HAL_DAC_ConfigChannel+0x348>)
 8005ebe:	4293      	cmp	r3, r2
 8005ec0:	d904      	bls.n	8005ecc <HAL_DAC_ConfigChannel+0x234>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_160MHZ;
 8005ec2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ec4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005ec8:	627b      	str	r3, [r7, #36]	; 0x24
 8005eca:	e00f      	b.n	8005eec <HAL_DAC_ConfigChannel+0x254>
    }
    else if (hclkfreq > HFSEL_ENABLE_THRESHOLD_80MHZ)
 8005ecc:	697b      	ldr	r3, [r7, #20]
 8005ece:	4a45      	ldr	r2, [pc, #276]	; (8005fe4 <HAL_DAC_ConfigChannel+0x34c>)
 8005ed0:	4293      	cmp	r3, r2
 8005ed2:	d90a      	bls.n	8005eea <HAL_DAC_ConfigChannel+0x252>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 8005ed4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ed6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005eda:	627b      	str	r3, [r7, #36]	; 0x24
 8005edc:	e006      	b.n	8005eec <HAL_DAC_ConfigChannel+0x254>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
    }
  }
  else
  {
    tmpreg1 |= sConfig->DAC_HighFrequency;
 8005ede:	68bb      	ldr	r3, [r7, #8]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005ee4:	4313      	orrs	r3, r2
 8005ee6:	627b      	str	r3, [r7, #36]	; 0x24
 8005ee8:	e000      	b.n	8005eec <HAL_DAC_ConfigChannel+0x254>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
 8005eea:	bf00      	nop
  }
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	f003 0310 	and.w	r3, r3, #16
 8005ef2:	69ba      	ldr	r2, [r7, #24]
 8005ef4:	fa02 f303 	lsl.w	r3, r2, r3
 8005ef8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005efa:	4313      	orrs	r3, r2
 8005efc:	627b      	str	r3, [r7, #36]	; 0x24
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005f04:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	6819      	ldr	r1, [r3, #0]
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	f003 0310 	and.w	r3, r3, #16
 8005f12:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8005f16:	fa02 f303 	lsl.w	r3, r2, r3
 8005f1a:	43da      	mvns	r2, r3
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	400a      	ands	r2, r1
 8005f22:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	627b      	str	r3, [r7, #36]	; 0x24
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	f003 0310 	and.w	r3, r3, #16
 8005f32:	f640 72fe 	movw	r2, #4094	; 0xffe
 8005f36:	fa02 f303 	lsl.w	r3, r2, r3
 8005f3a:	43db      	mvns	r3, r3
 8005f3c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005f3e:	4013      	ands	r3, r2
 8005f40:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8005f42:	68bb      	ldr	r3, [r7, #8]
 8005f44:	68db      	ldr	r3, [r3, #12]
 8005f46:	61bb      	str	r3, [r7, #24]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	f003 0310 	and.w	r3, r3, #16
 8005f4e:	69ba      	ldr	r2, [r7, #24]
 8005f50:	fa02 f303 	lsl.w	r3, r2, r3
 8005f54:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005f56:	4313      	orrs	r3, r2
 8005f58:	627b      	str	r3, [r7, #36]	; 0x24
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005f60:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	6819      	ldr	r1, [r3, #0]
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	f003 0310 	and.w	r3, r3, #16
 8005f6e:	22c0      	movs	r2, #192	; 0xc0
 8005f70:	fa02 f303 	lsl.w	r3, r2, r3
 8005f74:	43da      	mvns	r2, r3
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	400a      	ands	r2, r1
 8005f7c:	601a      	str	r2, [r3, #0]

  /* Set STRSTTRIGSELx and STINCTRIGSELx bits according to DAC_Trigger & DAC_Trigger2 values */
  tmpreg2 = ((sConfig->DAC_Trigger & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STRSTTRIGSEL1_Pos;
 8005f7e:	68bb      	ldr	r3, [r7, #8]
 8005f80:	68db      	ldr	r3, [r3, #12]
 8005f82:	089b      	lsrs	r3, r3, #2
 8005f84:	f003 030f 	and.w	r3, r3, #15
 8005f88:	61bb      	str	r3, [r7, #24]
  tmpreg2 |= ((sConfig->DAC_Trigger2 & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STINCTRIGSEL1_Pos;
 8005f8a:	68bb      	ldr	r3, [r7, #8]
 8005f8c:	691b      	ldr	r3, [r3, #16]
 8005f8e:	089b      	lsrs	r3, r3, #2
 8005f90:	021b      	lsls	r3, r3, #8
 8005f92:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8005f96:	69ba      	ldr	r2, [r7, #24]
 8005f98:	4313      	orrs	r3, r2
 8005f9a:	61bb      	str	r3, [r7, #24]
  /* Modify STMODR register value depending on DAC_Channel */
  MODIFY_REG(hdac->Instance->STMODR, (DAC_STMODR_STINCTRIGSEL1 | DAC_STMODR_STRSTTRIGSEL1) << (Channel & 0x10UL), tmpreg2 << (Channel & 0x10UL));
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	f003 0310 	and.w	r3, r3, #16
 8005fa8:	f640 710f 	movw	r1, #3855	; 0xf0f
 8005fac:	fa01 f303 	lsl.w	r3, r1, r3
 8005fb0:	43db      	mvns	r3, r3
 8005fb2:	ea02 0103 	and.w	r1, r2, r3
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	f003 0310 	and.w	r3, r3, #16
 8005fbc:	69ba      	ldr	r2, [r7, #24]
 8005fbe:	409a      	lsls	r2, r3
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	430a      	orrs	r2, r1
 8005fc6:	661a      	str	r2, [r3, #96]	; 0x60
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	2201      	movs	r2, #1
 8005fcc:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	2200      	movs	r2, #0
 8005fd2:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8005fd4:	2300      	movs	r3, #0
}
 8005fd6:	4618      	mov	r0, r3
 8005fd8:	3728      	adds	r7, #40	; 0x28
 8005fda:	46bd      	mov	sp, r7
 8005fdc:	bd80      	pop	{r7, pc}
 8005fde:	bf00      	nop
 8005fe0:	09896800 	.word	0x09896800
 8005fe4:	04c4b400 	.word	0x04c4b400

08005fe8 <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8005fe8:	b480      	push	{r7}
 8005fea:	b083      	sub	sp, #12
 8005fec:	af00      	add	r7, sp, #0
 8005fee:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_DMAUnderrunCallbackCh2 could be implemented in the user file
   */
}
 8005ff0:	bf00      	nop
 8005ff2:	370c      	adds	r7, #12
 8005ff4:	46bd      	mov	sp, r7
 8005ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ffa:	4770      	bx	lr

08005ffc <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8005ffc:	b480      	push	{r7}
 8005ffe:	b085      	sub	sp, #20
 8006000:	af00      	add	r7, sp, #0
 8006002:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006004:	2300      	movs	r3, #0
 8006006:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800600e:	b2db      	uxtb	r3, r3
 8006010:	2b02      	cmp	r3, #2
 8006012:	d005      	beq.n	8006020 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	2204      	movs	r2, #4
 8006018:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 800601a:	2301      	movs	r3, #1
 800601c:	73fb      	strb	r3, [r7, #15]
 800601e:	e037      	b.n	8006090 <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	681a      	ldr	r2, [r3, #0]
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	f022 020e 	bic.w	r2, r2, #14
 800602e:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006034:	681a      	ldr	r2, [r3, #0]
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800603a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800603e:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	681a      	ldr	r2, [r3, #0]
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	f022 0201 	bic.w	r2, r2, #1
 800604e:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006054:	f003 021f 	and.w	r2, r3, #31
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800605c:	2101      	movs	r1, #1
 800605e:	fa01 f202 	lsl.w	r2, r1, r2
 8006062:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006068:	687a      	ldr	r2, [r7, #4]
 800606a:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800606c:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006072:	2b00      	cmp	r3, #0
 8006074:	d00c      	beq.n	8006090 <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800607a:	681a      	ldr	r2, [r3, #0]
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006080:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006084:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800608a:	687a      	ldr	r2, [r7, #4]
 800608c:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800608e:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	2201      	movs	r2, #1
 8006094:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	2200      	movs	r2, #0
 800609c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
 80060a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80060a2:	4618      	mov	r0, r3
 80060a4:	3714      	adds	r7, #20
 80060a6:	46bd      	mov	sp, r7
 80060a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ac:	4770      	bx	lr

080060ae <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80060ae:	b580      	push	{r7, lr}
 80060b0:	b084      	sub	sp, #16
 80060b2:	af00      	add	r7, sp, #0
 80060b4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80060b6:	2300      	movs	r3, #0
 80060b8:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80060c0:	b2db      	uxtb	r3, r3
 80060c2:	2b02      	cmp	r3, #2
 80060c4:	d00d      	beq.n	80060e2 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	2204      	movs	r2, #4
 80060ca:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	2201      	movs	r2, #1
 80060d0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	2200      	movs	r2, #0
 80060d8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    status = HAL_ERROR;
 80060dc:	2301      	movs	r3, #1
 80060de:	73fb      	strb	r3, [r7, #15]
 80060e0:	e047      	b.n	8006172 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	681a      	ldr	r2, [r3, #0]
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	f022 020e 	bic.w	r2, r2, #14
 80060f0:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	681a      	ldr	r2, [r3, #0]
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	f022 0201 	bic.w	r2, r2, #1
 8006100:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006106:	681a      	ldr	r2, [r3, #0]
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800610c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006110:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006116:	f003 021f 	and.w	r2, r3, #31
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800611e:	2101      	movs	r1, #1
 8006120:	fa01 f202 	lsl.w	r2, r1, r2
 8006124:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800612a:	687a      	ldr	r2, [r7, #4]
 800612c:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800612e:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006134:	2b00      	cmp	r3, #0
 8006136:	d00c      	beq.n	8006152 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800613c:	681a      	ldr	r2, [r3, #0]
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006142:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006146:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800614c:	687a      	ldr	r2, [r7, #4]
 800614e:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8006150:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	2201      	movs	r2, #1
 8006156:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	2200      	movs	r2, #0
 800615e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006166:	2b00      	cmp	r3, #0
 8006168:	d003      	beq.n	8006172 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800616e:	6878      	ldr	r0, [r7, #4]
 8006170:	4798      	blx	r3
    }
  }
  return status;
 8006172:	7bfb      	ldrb	r3, [r7, #15]
}
 8006174:	4618      	mov	r0, r3
 8006176:	3710      	adds	r7, #16
 8006178:	46bd      	mov	sp, r7
 800617a:	bd80      	pop	{r7, pc}

0800617c <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 800617c:	b580      	push	{r7, lr}
 800617e:	b084      	sub	sp, #16
 8006180:	af00      	add	r7, sp, #0
 8006182:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	2b00      	cmp	r3, #0
 8006188:	d101      	bne.n	800618e <HAL_FDCAN_Init+0x12>
  {
    return HAL_ERROR;
 800618a:	2301      	movs	r3, #1
 800618c:	e147      	b.n	800641e <HAL_FDCAN_Init+0x2a2>

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8006194:	b2db      	uxtb	r3, r3
 8006196:	2b00      	cmp	r3, #0
 8006198:	d106      	bne.n	80061a8 <HAL_FDCAN_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	2200      	movs	r2, #0
 800619e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 80061a2:	6878      	ldr	r0, [r7, #4]
 80061a4:	f7fc fbb2 	bl	800290c <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	699a      	ldr	r2, [r3, #24]
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	f022 0210 	bic.w	r2, r2, #16
 80061b6:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 80061b8:	f7fd f8ec 	bl	8003394 <HAL_GetTick>
 80061bc:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 80061be:	e012      	b.n	80061e6 <HAL_FDCAN_Init+0x6a>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 80061c0:	f7fd f8e8 	bl	8003394 <HAL_GetTick>
 80061c4:	4602      	mov	r2, r0
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	1ad3      	subs	r3, r2, r3
 80061ca:	2b0a      	cmp	r3, #10
 80061cc:	d90b      	bls.n	80061e6 <HAL_FDCAN_Init+0x6a>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80061d2:	f043 0201 	orr.w	r2, r3, #1
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	661a      	str	r2, [r3, #96]	; 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	2203      	movs	r2, #3
 80061de:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 80061e2:	2301      	movs	r3, #1
 80061e4:	e11b      	b.n	800641e <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	699b      	ldr	r3, [r3, #24]
 80061ec:	f003 0308 	and.w	r3, r3, #8
 80061f0:	2b08      	cmp	r3, #8
 80061f2:	d0e5      	beq.n	80061c0 <HAL_FDCAN_Init+0x44>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	699a      	ldr	r2, [r3, #24]
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	f042 0201 	orr.w	r2, r2, #1
 8006202:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006204:	f7fd f8c6 	bl	8003394 <HAL_GetTick>
 8006208:	60f8      	str	r0, [r7, #12]

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 800620a:	e012      	b.n	8006232 <HAL_FDCAN_Init+0xb6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 800620c:	f7fd f8c2 	bl	8003394 <HAL_GetTick>
 8006210:	4602      	mov	r2, r0
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	1ad3      	subs	r3, r2, r3
 8006216:	2b0a      	cmp	r3, #10
 8006218:	d90b      	bls.n	8006232 <HAL_FDCAN_Init+0xb6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800621e:	f043 0201 	orr.w	r2, r3, #1
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	661a      	str	r2, [r3, #96]	; 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	2203      	movs	r2, #3
 800622a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 800622e:	2301      	movs	r3, #1
 8006230:	e0f5      	b.n	800641e <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	699b      	ldr	r3, [r3, #24]
 8006238:	f003 0301 	and.w	r3, r3, #1
 800623c:	2b00      	cmp	r3, #0
 800623e:	d0e5      	beq.n	800620c <HAL_FDCAN_Init+0x90>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	699a      	ldr	r2, [r3, #24]
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	f042 0202 	orr.w	r2, r2, #2
 800624e:	619a      	str	r2, [r3, #24]

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	4a74      	ldr	r2, [pc, #464]	; (8006428 <HAL_FDCAN_Init+0x2ac>)
 8006256:	4293      	cmp	r3, r2
 8006258:	d103      	bne.n	8006262 <HAL_FDCAN_Init+0xe6>
  {
    /* Configure Clock divider */
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 800625a:	4a74      	ldr	r2, [pc, #464]	; (800642c <HAL_FDCAN_Init+0x2b0>)
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	685b      	ldr	r3, [r3, #4]
 8006260:	6013      	str	r3, [r2, #0]
  }

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	7c1b      	ldrb	r3, [r3, #16]
 8006266:	2b01      	cmp	r3, #1
 8006268:	d108      	bne.n	800627c <HAL_FDCAN_Init+0x100>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	699a      	ldr	r2, [r3, #24]
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006278:	619a      	str	r2, [r3, #24]
 800627a:	e007      	b.n	800628c <HAL_FDCAN_Init+0x110>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	699a      	ldr	r2, [r3, #24]
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800628a:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	7c5b      	ldrb	r3, [r3, #17]
 8006290:	2b01      	cmp	r3, #1
 8006292:	d108      	bne.n	80062a6 <HAL_FDCAN_Init+0x12a>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	699a      	ldr	r2, [r3, #24]
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80062a2:	619a      	str	r2, [r3, #24]
 80062a4:	e007      	b.n	80062b6 <HAL_FDCAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	699a      	ldr	r2, [r3, #24]
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80062b4:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	7c9b      	ldrb	r3, [r3, #18]
 80062ba:	2b01      	cmp	r3, #1
 80062bc:	d108      	bne.n	80062d0 <HAL_FDCAN_Init+0x154>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	699a      	ldr	r2, [r3, #24]
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80062cc:	619a      	str	r2, [r3, #24]
 80062ce:	e007      	b.n	80062e0 <HAL_FDCAN_Init+0x164>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	699a      	ldr	r2, [r3, #24]
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80062de:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	699b      	ldr	r3, [r3, #24]
 80062e6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	689a      	ldr	r2, [r3, #8]
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	430a      	orrs	r2, r1
 80062f4:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	699a      	ldr	r2, [r3, #24]
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 8006304:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	691a      	ldr	r2, [r3, #16]
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	f022 0210 	bic.w	r2, r2, #16
 8006314:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	68db      	ldr	r3, [r3, #12]
 800631a:	2b01      	cmp	r3, #1
 800631c:	d108      	bne.n	8006330 <HAL_FDCAN_Init+0x1b4>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	699a      	ldr	r2, [r3, #24]
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	f042 0204 	orr.w	r2, r2, #4
 800632c:	619a      	str	r2, [r3, #24]
 800632e:	e02c      	b.n	800638a <HAL_FDCAN_Init+0x20e>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	68db      	ldr	r3, [r3, #12]
 8006334:	2b00      	cmp	r3, #0
 8006336:	d028      	beq.n	800638a <HAL_FDCAN_Init+0x20e>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	68db      	ldr	r3, [r3, #12]
 800633c:	2b02      	cmp	r3, #2
 800633e:	d01c      	beq.n	800637a <HAL_FDCAN_Init+0x1fe>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	699a      	ldr	r2, [r3, #24]
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800634e:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	691a      	ldr	r2, [r3, #16]
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	f042 0210 	orr.w	r2, r2, #16
 800635e:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	68db      	ldr	r3, [r3, #12]
 8006364:	2b03      	cmp	r3, #3
 8006366:	d110      	bne.n	800638a <HAL_FDCAN_Init+0x20e>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	699a      	ldr	r2, [r3, #24]
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	f042 0220 	orr.w	r2, r2, #32
 8006376:	619a      	str	r2, [r3, #24]
 8006378:	e007      	b.n	800638a <HAL_FDCAN_Init+0x20e>
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	699a      	ldr	r2, [r3, #24]
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	f042 0220 	orr.w	r2, r2, #32
 8006388:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	699b      	ldr	r3, [r3, #24]
 800638e:	3b01      	subs	r3, #1
 8006390:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	69db      	ldr	r3, [r3, #28]
 8006396:	3b01      	subs	r3, #1
 8006398:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800639a:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	6a1b      	ldr	r3, [r3, #32]
 80063a0:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 80063a2:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	695b      	ldr	r3, [r3, #20]
 80063aa:	3b01      	subs	r3, #1
 80063ac:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 80063b2:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80063b4:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	689b      	ldr	r3, [r3, #8]
 80063ba:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80063be:	d115      	bne.n	80063ec <HAL_FDCAN_Init+0x270>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80063c4:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063ca:	3b01      	subs	r3, #1
 80063cc:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80063ce:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063d4:	3b01      	subs	r3, #1
 80063d6:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 80063d8:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063e0:	3b01      	subs	r3, #1
 80063e2:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 80063e8:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80063ea:	60da      	str	r2, [r3, #12]
  }

  /* Select between Tx FIFO and Tx Queue operation modes */
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	430a      	orrs	r2, r1
 80063fe:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Calculate each RAM block address */
  FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8006402:	6878      	ldr	r0, [r7, #4]
 8006404:	f000 f814 	bl	8006430 <FDCAN_CalcultateRamBlockAddresses>

  /* Initialize the Latest Tx request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	2200      	movs	r2, #0
 800640c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	2200      	movs	r2, #0
 8006412:	661a      	str	r2, [r3, #96]	; 0x60

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	2201      	movs	r2, #1
 8006418:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Return function status */
  return HAL_OK;
 800641c:	2300      	movs	r3, #0
}
 800641e:	4618      	mov	r0, r3
 8006420:	3710      	adds	r7, #16
 8006422:	46bd      	mov	sp, r7
 8006424:	bd80      	pop	{r7, pc}
 8006426:	bf00      	nop
 8006428:	40006400 	.word	0x40006400
 800642c:	40006500 	.word	0x40006500

08006430 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval none
 */
static void FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8006430:	b480      	push	{r7}
 8006432:	b085      	sub	sp, #20
 8006434:	af00      	add	r7, sp, #0
 8006436:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
 8006438:	4b27      	ldr	r3, [pc, #156]	; (80064d8 <FDCAN_CalcultateRamBlockAddresses+0xa8>)
 800643a:	60bb      	str	r3, [r7, #8]
    SramCanInstanceBase += SRAMCAN_SIZE * 2U;
  }
#endif /* FDCAN3 */

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	68ba      	ldr	r2, [r7, #8]
 8006440:	641a      	str	r2, [r3, #64]	; 0x40

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800644a:	f423 11f8 	bic.w	r1, r3, #2031616	; 0x1f0000
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006452:	041a      	lsls	r2, r3, #16
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	430a      	orrs	r2, r1
 800645a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 800645e:	68bb      	ldr	r3, [r7, #8]
 8006460:	f103 0270 	add.w	r2, r3, #112	; 0x70
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	645a      	str	r2, [r3, #68]	; 0x44

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006470:	f023 6170 	bic.w	r1, r3, #251658240	; 0xf000000
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006478:	061a      	lsls	r2, r3, #24
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	430a      	orrs	r2, r1
 8006480:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 8006484:	68bb      	ldr	r3, [r7, #8]
 8006486:	f103 02b0 	add.w	r2, r3, #176	; 0xb0
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	649a      	str	r2, [r3, #72]	; 0x48

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 800648e:	68bb      	ldr	r3, [r7, #8]
 8006490:	f503 72c4 	add.w	r2, r3, #392	; 0x188
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 8006498:	68bb      	ldr	r3, [r7, #8]
 800649a:	f503 7218 	add.w	r2, r3, #608	; 0x260
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	651a      	str	r2, [r3, #80]	; 0x50

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 80064a2:	68bb      	ldr	r3, [r7, #8]
 80064a4:	f503 721e 	add.w	r2, r3, #632	; 0x278
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	655a      	str	r2, [r3, #84]	; 0x54

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 80064ac:	68bb      	ldr	r3, [r7, #8]
 80064ae:	60fb      	str	r3, [r7, #12]
 80064b0:	e005      	b.n	80064be <FDCAN_CalcultateRamBlockAddresses+0x8e>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	2200      	movs	r2, #0
 80064b6:	601a      	str	r2, [r3, #0]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	3304      	adds	r3, #4
 80064bc:	60fb      	str	r3, [r7, #12]
 80064be:	68bb      	ldr	r3, [r7, #8]
 80064c0:	f503 7354 	add.w	r3, r3, #848	; 0x350
 80064c4:	68fa      	ldr	r2, [r7, #12]
 80064c6:	429a      	cmp	r2, r3
 80064c8:	d3f3      	bcc.n	80064b2 <FDCAN_CalcultateRamBlockAddresses+0x82>
  }
}
 80064ca:	bf00      	nop
 80064cc:	bf00      	nop
 80064ce:	3714      	adds	r7, #20
 80064d0:	46bd      	mov	sp, r7
 80064d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064d6:	4770      	bx	lr
 80064d8:	4000a400 	.word	0x4000a400

080064dc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80064dc:	b480      	push	{r7}
 80064de:	b087      	sub	sp, #28
 80064e0:	af00      	add	r7, sp, #0
 80064e2:	6078      	str	r0, [r7, #4]
 80064e4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80064e6:	2300      	movs	r3, #0
 80064e8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80064ea:	e15a      	b.n	80067a2 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80064ec:	683b      	ldr	r3, [r7, #0]
 80064ee:	681a      	ldr	r2, [r3, #0]
 80064f0:	2101      	movs	r1, #1
 80064f2:	697b      	ldr	r3, [r7, #20]
 80064f4:	fa01 f303 	lsl.w	r3, r1, r3
 80064f8:	4013      	ands	r3, r2
 80064fa:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	2b00      	cmp	r3, #0
 8006500:	f000 814c 	beq.w	800679c <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8006504:	683b      	ldr	r3, [r7, #0]
 8006506:	685b      	ldr	r3, [r3, #4]
 8006508:	f003 0303 	and.w	r3, r3, #3
 800650c:	2b01      	cmp	r3, #1
 800650e:	d005      	beq.n	800651c <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8006510:	683b      	ldr	r3, [r7, #0]
 8006512:	685b      	ldr	r3, [r3, #4]
 8006514:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8006518:	2b02      	cmp	r3, #2
 800651a:	d130      	bne.n	800657e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	689b      	ldr	r3, [r3, #8]
 8006520:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8006522:	697b      	ldr	r3, [r7, #20]
 8006524:	005b      	lsls	r3, r3, #1
 8006526:	2203      	movs	r2, #3
 8006528:	fa02 f303 	lsl.w	r3, r2, r3
 800652c:	43db      	mvns	r3, r3
 800652e:	693a      	ldr	r2, [r7, #16]
 8006530:	4013      	ands	r3, r2
 8006532:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8006534:	683b      	ldr	r3, [r7, #0]
 8006536:	68da      	ldr	r2, [r3, #12]
 8006538:	697b      	ldr	r3, [r7, #20]
 800653a:	005b      	lsls	r3, r3, #1
 800653c:	fa02 f303 	lsl.w	r3, r2, r3
 8006540:	693a      	ldr	r2, [r7, #16]
 8006542:	4313      	orrs	r3, r2
 8006544:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	693a      	ldr	r2, [r7, #16]
 800654a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	685b      	ldr	r3, [r3, #4]
 8006550:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8006552:	2201      	movs	r2, #1
 8006554:	697b      	ldr	r3, [r7, #20]
 8006556:	fa02 f303 	lsl.w	r3, r2, r3
 800655a:	43db      	mvns	r3, r3
 800655c:	693a      	ldr	r2, [r7, #16]
 800655e:	4013      	ands	r3, r2
 8006560:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8006562:	683b      	ldr	r3, [r7, #0]
 8006564:	685b      	ldr	r3, [r3, #4]
 8006566:	091b      	lsrs	r3, r3, #4
 8006568:	f003 0201 	and.w	r2, r3, #1
 800656c:	697b      	ldr	r3, [r7, #20]
 800656e:	fa02 f303 	lsl.w	r3, r2, r3
 8006572:	693a      	ldr	r2, [r7, #16]
 8006574:	4313      	orrs	r3, r2
 8006576:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	693a      	ldr	r2, [r7, #16]
 800657c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800657e:	683b      	ldr	r3, [r7, #0]
 8006580:	685b      	ldr	r3, [r3, #4]
 8006582:	f003 0303 	and.w	r3, r3, #3
 8006586:	2b03      	cmp	r3, #3
 8006588:	d017      	beq.n	80065ba <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	68db      	ldr	r3, [r3, #12]
 800658e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8006590:	697b      	ldr	r3, [r7, #20]
 8006592:	005b      	lsls	r3, r3, #1
 8006594:	2203      	movs	r2, #3
 8006596:	fa02 f303 	lsl.w	r3, r2, r3
 800659a:	43db      	mvns	r3, r3
 800659c:	693a      	ldr	r2, [r7, #16]
 800659e:	4013      	ands	r3, r2
 80065a0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80065a2:	683b      	ldr	r3, [r7, #0]
 80065a4:	689a      	ldr	r2, [r3, #8]
 80065a6:	697b      	ldr	r3, [r7, #20]
 80065a8:	005b      	lsls	r3, r3, #1
 80065aa:	fa02 f303 	lsl.w	r3, r2, r3
 80065ae:	693a      	ldr	r2, [r7, #16]
 80065b0:	4313      	orrs	r3, r2
 80065b2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	693a      	ldr	r2, [r7, #16]
 80065b8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80065ba:	683b      	ldr	r3, [r7, #0]
 80065bc:	685b      	ldr	r3, [r3, #4]
 80065be:	f003 0303 	and.w	r3, r3, #3
 80065c2:	2b02      	cmp	r3, #2
 80065c4:	d123      	bne.n	800660e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80065c6:	697b      	ldr	r3, [r7, #20]
 80065c8:	08da      	lsrs	r2, r3, #3
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	3208      	adds	r2, #8
 80065ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80065d2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80065d4:	697b      	ldr	r3, [r7, #20]
 80065d6:	f003 0307 	and.w	r3, r3, #7
 80065da:	009b      	lsls	r3, r3, #2
 80065dc:	220f      	movs	r2, #15
 80065de:	fa02 f303 	lsl.w	r3, r2, r3
 80065e2:	43db      	mvns	r3, r3
 80065e4:	693a      	ldr	r2, [r7, #16]
 80065e6:	4013      	ands	r3, r2
 80065e8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80065ea:	683b      	ldr	r3, [r7, #0]
 80065ec:	691a      	ldr	r2, [r3, #16]
 80065ee:	697b      	ldr	r3, [r7, #20]
 80065f0:	f003 0307 	and.w	r3, r3, #7
 80065f4:	009b      	lsls	r3, r3, #2
 80065f6:	fa02 f303 	lsl.w	r3, r2, r3
 80065fa:	693a      	ldr	r2, [r7, #16]
 80065fc:	4313      	orrs	r3, r2
 80065fe:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8006600:	697b      	ldr	r3, [r7, #20]
 8006602:	08da      	lsrs	r2, r3, #3
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	3208      	adds	r2, #8
 8006608:	6939      	ldr	r1, [r7, #16]
 800660a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8006614:	697b      	ldr	r3, [r7, #20]
 8006616:	005b      	lsls	r3, r3, #1
 8006618:	2203      	movs	r2, #3
 800661a:	fa02 f303 	lsl.w	r3, r2, r3
 800661e:	43db      	mvns	r3, r3
 8006620:	693a      	ldr	r2, [r7, #16]
 8006622:	4013      	ands	r3, r2
 8006624:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8006626:	683b      	ldr	r3, [r7, #0]
 8006628:	685b      	ldr	r3, [r3, #4]
 800662a:	f003 0203 	and.w	r2, r3, #3
 800662e:	697b      	ldr	r3, [r7, #20]
 8006630:	005b      	lsls	r3, r3, #1
 8006632:	fa02 f303 	lsl.w	r3, r2, r3
 8006636:	693a      	ldr	r2, [r7, #16]
 8006638:	4313      	orrs	r3, r2
 800663a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	693a      	ldr	r2, [r7, #16]
 8006640:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8006642:	683b      	ldr	r3, [r7, #0]
 8006644:	685b      	ldr	r3, [r3, #4]
 8006646:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800664a:	2b00      	cmp	r3, #0
 800664c:	f000 80a6 	beq.w	800679c <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006650:	4b5b      	ldr	r3, [pc, #364]	; (80067c0 <HAL_GPIO_Init+0x2e4>)
 8006652:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006654:	4a5a      	ldr	r2, [pc, #360]	; (80067c0 <HAL_GPIO_Init+0x2e4>)
 8006656:	f043 0301 	orr.w	r3, r3, #1
 800665a:	6613      	str	r3, [r2, #96]	; 0x60
 800665c:	4b58      	ldr	r3, [pc, #352]	; (80067c0 <HAL_GPIO_Init+0x2e4>)
 800665e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006660:	f003 0301 	and.w	r3, r3, #1
 8006664:	60bb      	str	r3, [r7, #8]
 8006666:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8006668:	4a56      	ldr	r2, [pc, #344]	; (80067c4 <HAL_GPIO_Init+0x2e8>)
 800666a:	697b      	ldr	r3, [r7, #20]
 800666c:	089b      	lsrs	r3, r3, #2
 800666e:	3302      	adds	r3, #2
 8006670:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006674:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8006676:	697b      	ldr	r3, [r7, #20]
 8006678:	f003 0303 	and.w	r3, r3, #3
 800667c:	009b      	lsls	r3, r3, #2
 800667e:	220f      	movs	r2, #15
 8006680:	fa02 f303 	lsl.w	r3, r2, r3
 8006684:	43db      	mvns	r3, r3
 8006686:	693a      	ldr	r2, [r7, #16]
 8006688:	4013      	ands	r3, r2
 800668a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8006692:	d01f      	beq.n	80066d4 <HAL_GPIO_Init+0x1f8>
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	4a4c      	ldr	r2, [pc, #304]	; (80067c8 <HAL_GPIO_Init+0x2ec>)
 8006698:	4293      	cmp	r3, r2
 800669a:	d019      	beq.n	80066d0 <HAL_GPIO_Init+0x1f4>
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	4a4b      	ldr	r2, [pc, #300]	; (80067cc <HAL_GPIO_Init+0x2f0>)
 80066a0:	4293      	cmp	r3, r2
 80066a2:	d013      	beq.n	80066cc <HAL_GPIO_Init+0x1f0>
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	4a4a      	ldr	r2, [pc, #296]	; (80067d0 <HAL_GPIO_Init+0x2f4>)
 80066a8:	4293      	cmp	r3, r2
 80066aa:	d00d      	beq.n	80066c8 <HAL_GPIO_Init+0x1ec>
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	4a49      	ldr	r2, [pc, #292]	; (80067d4 <HAL_GPIO_Init+0x2f8>)
 80066b0:	4293      	cmp	r3, r2
 80066b2:	d007      	beq.n	80066c4 <HAL_GPIO_Init+0x1e8>
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	4a48      	ldr	r2, [pc, #288]	; (80067d8 <HAL_GPIO_Init+0x2fc>)
 80066b8:	4293      	cmp	r3, r2
 80066ba:	d101      	bne.n	80066c0 <HAL_GPIO_Init+0x1e4>
 80066bc:	2305      	movs	r3, #5
 80066be:	e00a      	b.n	80066d6 <HAL_GPIO_Init+0x1fa>
 80066c0:	2306      	movs	r3, #6
 80066c2:	e008      	b.n	80066d6 <HAL_GPIO_Init+0x1fa>
 80066c4:	2304      	movs	r3, #4
 80066c6:	e006      	b.n	80066d6 <HAL_GPIO_Init+0x1fa>
 80066c8:	2303      	movs	r3, #3
 80066ca:	e004      	b.n	80066d6 <HAL_GPIO_Init+0x1fa>
 80066cc:	2302      	movs	r3, #2
 80066ce:	e002      	b.n	80066d6 <HAL_GPIO_Init+0x1fa>
 80066d0:	2301      	movs	r3, #1
 80066d2:	e000      	b.n	80066d6 <HAL_GPIO_Init+0x1fa>
 80066d4:	2300      	movs	r3, #0
 80066d6:	697a      	ldr	r2, [r7, #20]
 80066d8:	f002 0203 	and.w	r2, r2, #3
 80066dc:	0092      	lsls	r2, r2, #2
 80066de:	4093      	lsls	r3, r2
 80066e0:	693a      	ldr	r2, [r7, #16]
 80066e2:	4313      	orrs	r3, r2
 80066e4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80066e6:	4937      	ldr	r1, [pc, #220]	; (80067c4 <HAL_GPIO_Init+0x2e8>)
 80066e8:	697b      	ldr	r3, [r7, #20]
 80066ea:	089b      	lsrs	r3, r3, #2
 80066ec:	3302      	adds	r3, #2
 80066ee:	693a      	ldr	r2, [r7, #16]
 80066f0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80066f4:	4b39      	ldr	r3, [pc, #228]	; (80067dc <HAL_GPIO_Init+0x300>)
 80066f6:	689b      	ldr	r3, [r3, #8]
 80066f8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	43db      	mvns	r3, r3
 80066fe:	693a      	ldr	r2, [r7, #16]
 8006700:	4013      	ands	r3, r2
 8006702:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8006704:	683b      	ldr	r3, [r7, #0]
 8006706:	685b      	ldr	r3, [r3, #4]
 8006708:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800670c:	2b00      	cmp	r3, #0
 800670e:	d003      	beq.n	8006718 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8006710:	693a      	ldr	r2, [r7, #16]
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	4313      	orrs	r3, r2
 8006716:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8006718:	4a30      	ldr	r2, [pc, #192]	; (80067dc <HAL_GPIO_Init+0x300>)
 800671a:	693b      	ldr	r3, [r7, #16]
 800671c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800671e:	4b2f      	ldr	r3, [pc, #188]	; (80067dc <HAL_GPIO_Init+0x300>)
 8006720:	68db      	ldr	r3, [r3, #12]
 8006722:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	43db      	mvns	r3, r3
 8006728:	693a      	ldr	r2, [r7, #16]
 800672a:	4013      	ands	r3, r2
 800672c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800672e:	683b      	ldr	r3, [r7, #0]
 8006730:	685b      	ldr	r3, [r3, #4]
 8006732:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006736:	2b00      	cmp	r3, #0
 8006738:	d003      	beq.n	8006742 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 800673a:	693a      	ldr	r2, [r7, #16]
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	4313      	orrs	r3, r2
 8006740:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8006742:	4a26      	ldr	r2, [pc, #152]	; (80067dc <HAL_GPIO_Init+0x300>)
 8006744:	693b      	ldr	r3, [r7, #16]
 8006746:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8006748:	4b24      	ldr	r3, [pc, #144]	; (80067dc <HAL_GPIO_Init+0x300>)
 800674a:	685b      	ldr	r3, [r3, #4]
 800674c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	43db      	mvns	r3, r3
 8006752:	693a      	ldr	r2, [r7, #16]
 8006754:	4013      	ands	r3, r2
 8006756:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8006758:	683b      	ldr	r3, [r7, #0]
 800675a:	685b      	ldr	r3, [r3, #4]
 800675c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006760:	2b00      	cmp	r3, #0
 8006762:	d003      	beq.n	800676c <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8006764:	693a      	ldr	r2, [r7, #16]
 8006766:	68fb      	ldr	r3, [r7, #12]
 8006768:	4313      	orrs	r3, r2
 800676a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800676c:	4a1b      	ldr	r2, [pc, #108]	; (80067dc <HAL_GPIO_Init+0x300>)
 800676e:	693b      	ldr	r3, [r7, #16]
 8006770:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8006772:	4b1a      	ldr	r3, [pc, #104]	; (80067dc <HAL_GPIO_Init+0x300>)
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	43db      	mvns	r3, r3
 800677c:	693a      	ldr	r2, [r7, #16]
 800677e:	4013      	ands	r3, r2
 8006780:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8006782:	683b      	ldr	r3, [r7, #0]
 8006784:	685b      	ldr	r3, [r3, #4]
 8006786:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800678a:	2b00      	cmp	r3, #0
 800678c:	d003      	beq.n	8006796 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800678e:	693a      	ldr	r2, [r7, #16]
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	4313      	orrs	r3, r2
 8006794:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8006796:	4a11      	ldr	r2, [pc, #68]	; (80067dc <HAL_GPIO_Init+0x300>)
 8006798:	693b      	ldr	r3, [r7, #16]
 800679a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800679c:	697b      	ldr	r3, [r7, #20]
 800679e:	3301      	adds	r3, #1
 80067a0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 80067a2:	683b      	ldr	r3, [r7, #0]
 80067a4:	681a      	ldr	r2, [r3, #0]
 80067a6:	697b      	ldr	r3, [r7, #20]
 80067a8:	fa22 f303 	lsr.w	r3, r2, r3
 80067ac:	2b00      	cmp	r3, #0
 80067ae:	f47f ae9d 	bne.w	80064ec <HAL_GPIO_Init+0x10>
  }
}
 80067b2:	bf00      	nop
 80067b4:	bf00      	nop
 80067b6:	371c      	adds	r7, #28
 80067b8:	46bd      	mov	sp, r7
 80067ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067be:	4770      	bx	lr
 80067c0:	40021000 	.word	0x40021000
 80067c4:	40010000 	.word	0x40010000
 80067c8:	48000400 	.word	0x48000400
 80067cc:	48000800 	.word	0x48000800
 80067d0:	48000c00 	.word	0x48000c00
 80067d4:	48001000 	.word	0x48001000
 80067d8:	48001400 	.word	0x48001400
 80067dc:	40010400 	.word	0x40010400

080067e0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80067e0:	b480      	push	{r7}
 80067e2:	b083      	sub	sp, #12
 80067e4:	af00      	add	r7, sp, #0
 80067e6:	6078      	str	r0, [r7, #4]
 80067e8:	460b      	mov	r3, r1
 80067ea:	807b      	strh	r3, [r7, #2]
 80067ec:	4613      	mov	r3, r2
 80067ee:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80067f0:	787b      	ldrb	r3, [r7, #1]
 80067f2:	2b00      	cmp	r3, #0
 80067f4:	d003      	beq.n	80067fe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80067f6:	887a      	ldrh	r2, [r7, #2]
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80067fc:	e002      	b.n	8006804 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80067fe:	887a      	ldrh	r2, [r7, #2]
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	629a      	str	r2, [r3, #40]	; 0x28
}
 8006804:	bf00      	nop
 8006806:	370c      	adds	r7, #12
 8006808:	46bd      	mov	sp, r7
 800680a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800680e:	4770      	bx	lr

08006810 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8006810:	b580      	push	{r7, lr}
 8006812:	b082      	sub	sp, #8
 8006814:	af00      	add	r7, sp, #0
 8006816:	4603      	mov	r3, r0
 8006818:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800681a:	4b08      	ldr	r3, [pc, #32]	; (800683c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800681c:	695a      	ldr	r2, [r3, #20]
 800681e:	88fb      	ldrh	r3, [r7, #6]
 8006820:	4013      	ands	r3, r2
 8006822:	2b00      	cmp	r3, #0
 8006824:	d006      	beq.n	8006834 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8006826:	4a05      	ldr	r2, [pc, #20]	; (800683c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006828:	88fb      	ldrh	r3, [r7, #6]
 800682a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800682c:	88fb      	ldrh	r3, [r7, #6]
 800682e:	4618      	mov	r0, r3
 8006830:	f000 f806 	bl	8006840 <HAL_GPIO_EXTI_Callback>
  }
}
 8006834:	bf00      	nop
 8006836:	3708      	adds	r7, #8
 8006838:	46bd      	mov	sp, r7
 800683a:	bd80      	pop	{r7, pc}
 800683c:	40010400 	.word	0x40010400

08006840 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8006840:	b480      	push	{r7}
 8006842:	b083      	sub	sp, #12
 8006844:	af00      	add	r7, sp, #0
 8006846:	4603      	mov	r3, r0
 8006848:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800684a:	bf00      	nop
 800684c:	370c      	adds	r7, #12
 800684e:	46bd      	mov	sp, r7
 8006850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006854:	4770      	bx	lr
	...

08006858 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8006858:	b480      	push	{r7}
 800685a:	b085      	sub	sp, #20
 800685c:	af00      	add	r7, sp, #0
 800685e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	2b00      	cmp	r3, #0
 8006864:	d141      	bne.n	80068ea <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8006866:	4b4b      	ldr	r3, [pc, #300]	; (8006994 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800686e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006872:	d131      	bne.n	80068d8 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8006874:	4b47      	ldr	r3, [pc, #284]	; (8006994 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006876:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800687a:	4a46      	ldr	r2, [pc, #280]	; (8006994 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800687c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006880:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8006884:	4b43      	ldr	r3, [pc, #268]	; (8006994 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800688c:	4a41      	ldr	r2, [pc, #260]	; (8006994 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800688e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006892:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8006894:	4b40      	ldr	r3, [pc, #256]	; (8006998 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	2232      	movs	r2, #50	; 0x32
 800689a:	fb02 f303 	mul.w	r3, r2, r3
 800689e:	4a3f      	ldr	r2, [pc, #252]	; (800699c <HAL_PWREx_ControlVoltageScaling+0x144>)
 80068a0:	fba2 2303 	umull	r2, r3, r2, r3
 80068a4:	0c9b      	lsrs	r3, r3, #18
 80068a6:	3301      	adds	r3, #1
 80068a8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80068aa:	e002      	b.n	80068b2 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80068ac:	68fb      	ldr	r3, [r7, #12]
 80068ae:	3b01      	subs	r3, #1
 80068b0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80068b2:	4b38      	ldr	r3, [pc, #224]	; (8006994 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80068b4:	695b      	ldr	r3, [r3, #20]
 80068b6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80068ba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80068be:	d102      	bne.n	80068c6 <HAL_PWREx_ControlVoltageScaling+0x6e>
 80068c0:	68fb      	ldr	r3, [r7, #12]
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	d1f2      	bne.n	80068ac <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80068c6:	4b33      	ldr	r3, [pc, #204]	; (8006994 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80068c8:	695b      	ldr	r3, [r3, #20]
 80068ca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80068ce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80068d2:	d158      	bne.n	8006986 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80068d4:	2303      	movs	r3, #3
 80068d6:	e057      	b.n	8006988 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80068d8:	4b2e      	ldr	r3, [pc, #184]	; (8006994 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80068da:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80068de:	4a2d      	ldr	r2, [pc, #180]	; (8006994 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80068e0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80068e4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80068e8:	e04d      	b.n	8006986 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80068f0:	d141      	bne.n	8006976 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80068f2:	4b28      	ldr	r3, [pc, #160]	; (8006994 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80068fa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80068fe:	d131      	bne.n	8006964 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8006900:	4b24      	ldr	r3, [pc, #144]	; (8006994 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006902:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006906:	4a23      	ldr	r2, [pc, #140]	; (8006994 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006908:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800690c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8006910:	4b20      	ldr	r3, [pc, #128]	; (8006994 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8006918:	4a1e      	ldr	r2, [pc, #120]	; (8006994 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800691a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800691e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8006920:	4b1d      	ldr	r3, [pc, #116]	; (8006998 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	2232      	movs	r2, #50	; 0x32
 8006926:	fb02 f303 	mul.w	r3, r2, r3
 800692a:	4a1c      	ldr	r2, [pc, #112]	; (800699c <HAL_PWREx_ControlVoltageScaling+0x144>)
 800692c:	fba2 2303 	umull	r2, r3, r2, r3
 8006930:	0c9b      	lsrs	r3, r3, #18
 8006932:	3301      	adds	r3, #1
 8006934:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006936:	e002      	b.n	800693e <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	3b01      	subs	r3, #1
 800693c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800693e:	4b15      	ldr	r3, [pc, #84]	; (8006994 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006940:	695b      	ldr	r3, [r3, #20]
 8006942:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006946:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800694a:	d102      	bne.n	8006952 <HAL_PWREx_ControlVoltageScaling+0xfa>
 800694c:	68fb      	ldr	r3, [r7, #12]
 800694e:	2b00      	cmp	r3, #0
 8006950:	d1f2      	bne.n	8006938 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8006952:	4b10      	ldr	r3, [pc, #64]	; (8006994 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006954:	695b      	ldr	r3, [r3, #20]
 8006956:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800695a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800695e:	d112      	bne.n	8006986 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8006960:	2303      	movs	r3, #3
 8006962:	e011      	b.n	8006988 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8006964:	4b0b      	ldr	r3, [pc, #44]	; (8006994 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006966:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800696a:	4a0a      	ldr	r2, [pc, #40]	; (8006994 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800696c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006970:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8006974:	e007      	b.n	8006986 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8006976:	4b07      	ldr	r3, [pc, #28]	; (8006994 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800697e:	4a05      	ldr	r2, [pc, #20]	; (8006994 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006980:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8006984:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8006986:	2300      	movs	r3, #0
}
 8006988:	4618      	mov	r0, r3
 800698a:	3714      	adds	r7, #20
 800698c:	46bd      	mov	sp, r7
 800698e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006992:	4770      	bx	lr
 8006994:	40007000 	.word	0x40007000
 8006998:	2000001c 	.word	0x2000001c
 800699c:	431bde83 	.word	0x431bde83

080069a0 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 80069a0:	b480      	push	{r7}
 80069a2:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 80069a4:	4b05      	ldr	r3, [pc, #20]	; (80069bc <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80069a6:	689b      	ldr	r3, [r3, #8]
 80069a8:	4a04      	ldr	r2, [pc, #16]	; (80069bc <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80069aa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80069ae:	6093      	str	r3, [r2, #8]
}
 80069b0:	bf00      	nop
 80069b2:	46bd      	mov	sp, r7
 80069b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069b8:	4770      	bx	lr
 80069ba:	bf00      	nop
 80069bc:	40007000 	.word	0x40007000

080069c0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80069c0:	b580      	push	{r7, lr}
 80069c2:	b088      	sub	sp, #32
 80069c4:	af00      	add	r7, sp, #0
 80069c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	2b00      	cmp	r3, #0
 80069cc:	d101      	bne.n	80069d2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80069ce:	2301      	movs	r3, #1
 80069d0:	e306      	b.n	8006fe0 <HAL_RCC_OscConfig+0x620>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	f003 0301 	and.w	r3, r3, #1
 80069da:	2b00      	cmp	r3, #0
 80069dc:	d075      	beq.n	8006aca <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80069de:	4b97      	ldr	r3, [pc, #604]	; (8006c3c <HAL_RCC_OscConfig+0x27c>)
 80069e0:	689b      	ldr	r3, [r3, #8]
 80069e2:	f003 030c 	and.w	r3, r3, #12
 80069e6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80069e8:	4b94      	ldr	r3, [pc, #592]	; (8006c3c <HAL_RCC_OscConfig+0x27c>)
 80069ea:	68db      	ldr	r3, [r3, #12]
 80069ec:	f003 0303 	and.w	r3, r3, #3
 80069f0:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80069f2:	69bb      	ldr	r3, [r7, #24]
 80069f4:	2b0c      	cmp	r3, #12
 80069f6:	d102      	bne.n	80069fe <HAL_RCC_OscConfig+0x3e>
 80069f8:	697b      	ldr	r3, [r7, #20]
 80069fa:	2b03      	cmp	r3, #3
 80069fc:	d002      	beq.n	8006a04 <HAL_RCC_OscConfig+0x44>
 80069fe:	69bb      	ldr	r3, [r7, #24]
 8006a00:	2b08      	cmp	r3, #8
 8006a02:	d10b      	bne.n	8006a1c <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006a04:	4b8d      	ldr	r3, [pc, #564]	; (8006c3c <HAL_RCC_OscConfig+0x27c>)
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006a0c:	2b00      	cmp	r3, #0
 8006a0e:	d05b      	beq.n	8006ac8 <HAL_RCC_OscConfig+0x108>
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	685b      	ldr	r3, [r3, #4]
 8006a14:	2b00      	cmp	r3, #0
 8006a16:	d157      	bne.n	8006ac8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006a18:	2301      	movs	r3, #1
 8006a1a:	e2e1      	b.n	8006fe0 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	685b      	ldr	r3, [r3, #4]
 8006a20:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006a24:	d106      	bne.n	8006a34 <HAL_RCC_OscConfig+0x74>
 8006a26:	4b85      	ldr	r3, [pc, #532]	; (8006c3c <HAL_RCC_OscConfig+0x27c>)
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	4a84      	ldr	r2, [pc, #528]	; (8006c3c <HAL_RCC_OscConfig+0x27c>)
 8006a2c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006a30:	6013      	str	r3, [r2, #0]
 8006a32:	e01d      	b.n	8006a70 <HAL_RCC_OscConfig+0xb0>
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	685b      	ldr	r3, [r3, #4]
 8006a38:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006a3c:	d10c      	bne.n	8006a58 <HAL_RCC_OscConfig+0x98>
 8006a3e:	4b7f      	ldr	r3, [pc, #508]	; (8006c3c <HAL_RCC_OscConfig+0x27c>)
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	4a7e      	ldr	r2, [pc, #504]	; (8006c3c <HAL_RCC_OscConfig+0x27c>)
 8006a44:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006a48:	6013      	str	r3, [r2, #0]
 8006a4a:	4b7c      	ldr	r3, [pc, #496]	; (8006c3c <HAL_RCC_OscConfig+0x27c>)
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	4a7b      	ldr	r2, [pc, #492]	; (8006c3c <HAL_RCC_OscConfig+0x27c>)
 8006a50:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006a54:	6013      	str	r3, [r2, #0]
 8006a56:	e00b      	b.n	8006a70 <HAL_RCC_OscConfig+0xb0>
 8006a58:	4b78      	ldr	r3, [pc, #480]	; (8006c3c <HAL_RCC_OscConfig+0x27c>)
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	4a77      	ldr	r2, [pc, #476]	; (8006c3c <HAL_RCC_OscConfig+0x27c>)
 8006a5e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006a62:	6013      	str	r3, [r2, #0]
 8006a64:	4b75      	ldr	r3, [pc, #468]	; (8006c3c <HAL_RCC_OscConfig+0x27c>)
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	4a74      	ldr	r2, [pc, #464]	; (8006c3c <HAL_RCC_OscConfig+0x27c>)
 8006a6a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006a6e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	685b      	ldr	r3, [r3, #4]
 8006a74:	2b00      	cmp	r3, #0
 8006a76:	d013      	beq.n	8006aa0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006a78:	f7fc fc8c 	bl	8003394 <HAL_GetTick>
 8006a7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006a7e:	e008      	b.n	8006a92 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006a80:	f7fc fc88 	bl	8003394 <HAL_GetTick>
 8006a84:	4602      	mov	r2, r0
 8006a86:	693b      	ldr	r3, [r7, #16]
 8006a88:	1ad3      	subs	r3, r2, r3
 8006a8a:	2b64      	cmp	r3, #100	; 0x64
 8006a8c:	d901      	bls.n	8006a92 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8006a8e:	2303      	movs	r3, #3
 8006a90:	e2a6      	b.n	8006fe0 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006a92:	4b6a      	ldr	r3, [pc, #424]	; (8006c3c <HAL_RCC_OscConfig+0x27c>)
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006a9a:	2b00      	cmp	r3, #0
 8006a9c:	d0f0      	beq.n	8006a80 <HAL_RCC_OscConfig+0xc0>
 8006a9e:	e014      	b.n	8006aca <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006aa0:	f7fc fc78 	bl	8003394 <HAL_GetTick>
 8006aa4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8006aa6:	e008      	b.n	8006aba <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006aa8:	f7fc fc74 	bl	8003394 <HAL_GetTick>
 8006aac:	4602      	mov	r2, r0
 8006aae:	693b      	ldr	r3, [r7, #16]
 8006ab0:	1ad3      	subs	r3, r2, r3
 8006ab2:	2b64      	cmp	r3, #100	; 0x64
 8006ab4:	d901      	bls.n	8006aba <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006ab6:	2303      	movs	r3, #3
 8006ab8:	e292      	b.n	8006fe0 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8006aba:	4b60      	ldr	r3, [pc, #384]	; (8006c3c <HAL_RCC_OscConfig+0x27c>)
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006ac2:	2b00      	cmp	r3, #0
 8006ac4:	d1f0      	bne.n	8006aa8 <HAL_RCC_OscConfig+0xe8>
 8006ac6:	e000      	b.n	8006aca <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006ac8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	f003 0302 	and.w	r3, r3, #2
 8006ad2:	2b00      	cmp	r3, #0
 8006ad4:	d075      	beq.n	8006bc2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006ad6:	4b59      	ldr	r3, [pc, #356]	; (8006c3c <HAL_RCC_OscConfig+0x27c>)
 8006ad8:	689b      	ldr	r3, [r3, #8]
 8006ada:	f003 030c 	and.w	r3, r3, #12
 8006ade:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006ae0:	4b56      	ldr	r3, [pc, #344]	; (8006c3c <HAL_RCC_OscConfig+0x27c>)
 8006ae2:	68db      	ldr	r3, [r3, #12]
 8006ae4:	f003 0303 	and.w	r3, r3, #3
 8006ae8:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8006aea:	69bb      	ldr	r3, [r7, #24]
 8006aec:	2b0c      	cmp	r3, #12
 8006aee:	d102      	bne.n	8006af6 <HAL_RCC_OscConfig+0x136>
 8006af0:	697b      	ldr	r3, [r7, #20]
 8006af2:	2b02      	cmp	r3, #2
 8006af4:	d002      	beq.n	8006afc <HAL_RCC_OscConfig+0x13c>
 8006af6:	69bb      	ldr	r3, [r7, #24]
 8006af8:	2b04      	cmp	r3, #4
 8006afa:	d11f      	bne.n	8006b3c <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006afc:	4b4f      	ldr	r3, [pc, #316]	; (8006c3c <HAL_RCC_OscConfig+0x27c>)
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006b04:	2b00      	cmp	r3, #0
 8006b06:	d005      	beq.n	8006b14 <HAL_RCC_OscConfig+0x154>
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	68db      	ldr	r3, [r3, #12]
 8006b0c:	2b00      	cmp	r3, #0
 8006b0e:	d101      	bne.n	8006b14 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8006b10:	2301      	movs	r3, #1
 8006b12:	e265      	b.n	8006fe0 <HAL_RCC_OscConfig+0x620>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006b14:	4b49      	ldr	r3, [pc, #292]	; (8006c3c <HAL_RCC_OscConfig+0x27c>)
 8006b16:	685b      	ldr	r3, [r3, #4]
 8006b18:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	691b      	ldr	r3, [r3, #16]
 8006b20:	061b      	lsls	r3, r3, #24
 8006b22:	4946      	ldr	r1, [pc, #280]	; (8006c3c <HAL_RCC_OscConfig+0x27c>)
 8006b24:	4313      	orrs	r3, r2
 8006b26:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8006b28:	4b45      	ldr	r3, [pc, #276]	; (8006c40 <HAL_RCC_OscConfig+0x280>)
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	4618      	mov	r0, r3
 8006b2e:	f7fc fbe5 	bl	80032fc <HAL_InitTick>
 8006b32:	4603      	mov	r3, r0
 8006b34:	2b00      	cmp	r3, #0
 8006b36:	d043      	beq.n	8006bc0 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8006b38:	2301      	movs	r3, #1
 8006b3a:	e251      	b.n	8006fe0 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	68db      	ldr	r3, [r3, #12]
 8006b40:	2b00      	cmp	r3, #0
 8006b42:	d023      	beq.n	8006b8c <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006b44:	4b3d      	ldr	r3, [pc, #244]	; (8006c3c <HAL_RCC_OscConfig+0x27c>)
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	4a3c      	ldr	r2, [pc, #240]	; (8006c3c <HAL_RCC_OscConfig+0x27c>)
 8006b4a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006b4e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006b50:	f7fc fc20 	bl	8003394 <HAL_GetTick>
 8006b54:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006b56:	e008      	b.n	8006b6a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006b58:	f7fc fc1c 	bl	8003394 <HAL_GetTick>
 8006b5c:	4602      	mov	r2, r0
 8006b5e:	693b      	ldr	r3, [r7, #16]
 8006b60:	1ad3      	subs	r3, r2, r3
 8006b62:	2b02      	cmp	r3, #2
 8006b64:	d901      	bls.n	8006b6a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8006b66:	2303      	movs	r3, #3
 8006b68:	e23a      	b.n	8006fe0 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006b6a:	4b34      	ldr	r3, [pc, #208]	; (8006c3c <HAL_RCC_OscConfig+0x27c>)
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006b72:	2b00      	cmp	r3, #0
 8006b74:	d0f0      	beq.n	8006b58 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006b76:	4b31      	ldr	r3, [pc, #196]	; (8006c3c <HAL_RCC_OscConfig+0x27c>)
 8006b78:	685b      	ldr	r3, [r3, #4]
 8006b7a:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	691b      	ldr	r3, [r3, #16]
 8006b82:	061b      	lsls	r3, r3, #24
 8006b84:	492d      	ldr	r1, [pc, #180]	; (8006c3c <HAL_RCC_OscConfig+0x27c>)
 8006b86:	4313      	orrs	r3, r2
 8006b88:	604b      	str	r3, [r1, #4]
 8006b8a:	e01a      	b.n	8006bc2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006b8c:	4b2b      	ldr	r3, [pc, #172]	; (8006c3c <HAL_RCC_OscConfig+0x27c>)
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	4a2a      	ldr	r2, [pc, #168]	; (8006c3c <HAL_RCC_OscConfig+0x27c>)
 8006b92:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006b96:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006b98:	f7fc fbfc 	bl	8003394 <HAL_GetTick>
 8006b9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8006b9e:	e008      	b.n	8006bb2 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006ba0:	f7fc fbf8 	bl	8003394 <HAL_GetTick>
 8006ba4:	4602      	mov	r2, r0
 8006ba6:	693b      	ldr	r3, [r7, #16]
 8006ba8:	1ad3      	subs	r3, r2, r3
 8006baa:	2b02      	cmp	r3, #2
 8006bac:	d901      	bls.n	8006bb2 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8006bae:	2303      	movs	r3, #3
 8006bb0:	e216      	b.n	8006fe0 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8006bb2:	4b22      	ldr	r3, [pc, #136]	; (8006c3c <HAL_RCC_OscConfig+0x27c>)
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006bba:	2b00      	cmp	r3, #0
 8006bbc:	d1f0      	bne.n	8006ba0 <HAL_RCC_OscConfig+0x1e0>
 8006bbe:	e000      	b.n	8006bc2 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006bc0:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	f003 0308 	and.w	r3, r3, #8
 8006bca:	2b00      	cmp	r3, #0
 8006bcc:	d041      	beq.n	8006c52 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	695b      	ldr	r3, [r3, #20]
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	d01c      	beq.n	8006c10 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006bd6:	4b19      	ldr	r3, [pc, #100]	; (8006c3c <HAL_RCC_OscConfig+0x27c>)
 8006bd8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006bdc:	4a17      	ldr	r2, [pc, #92]	; (8006c3c <HAL_RCC_OscConfig+0x27c>)
 8006bde:	f043 0301 	orr.w	r3, r3, #1
 8006be2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006be6:	f7fc fbd5 	bl	8003394 <HAL_GetTick>
 8006bea:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8006bec:	e008      	b.n	8006c00 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006bee:	f7fc fbd1 	bl	8003394 <HAL_GetTick>
 8006bf2:	4602      	mov	r2, r0
 8006bf4:	693b      	ldr	r3, [r7, #16]
 8006bf6:	1ad3      	subs	r3, r2, r3
 8006bf8:	2b02      	cmp	r3, #2
 8006bfa:	d901      	bls.n	8006c00 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8006bfc:	2303      	movs	r3, #3
 8006bfe:	e1ef      	b.n	8006fe0 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8006c00:	4b0e      	ldr	r3, [pc, #56]	; (8006c3c <HAL_RCC_OscConfig+0x27c>)
 8006c02:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006c06:	f003 0302 	and.w	r3, r3, #2
 8006c0a:	2b00      	cmp	r3, #0
 8006c0c:	d0ef      	beq.n	8006bee <HAL_RCC_OscConfig+0x22e>
 8006c0e:	e020      	b.n	8006c52 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006c10:	4b0a      	ldr	r3, [pc, #40]	; (8006c3c <HAL_RCC_OscConfig+0x27c>)
 8006c12:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006c16:	4a09      	ldr	r2, [pc, #36]	; (8006c3c <HAL_RCC_OscConfig+0x27c>)
 8006c18:	f023 0301 	bic.w	r3, r3, #1
 8006c1c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006c20:	f7fc fbb8 	bl	8003394 <HAL_GetTick>
 8006c24:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8006c26:	e00d      	b.n	8006c44 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006c28:	f7fc fbb4 	bl	8003394 <HAL_GetTick>
 8006c2c:	4602      	mov	r2, r0
 8006c2e:	693b      	ldr	r3, [r7, #16]
 8006c30:	1ad3      	subs	r3, r2, r3
 8006c32:	2b02      	cmp	r3, #2
 8006c34:	d906      	bls.n	8006c44 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8006c36:	2303      	movs	r3, #3
 8006c38:	e1d2      	b.n	8006fe0 <HAL_RCC_OscConfig+0x620>
 8006c3a:	bf00      	nop
 8006c3c:	40021000 	.word	0x40021000
 8006c40:	20000020 	.word	0x20000020
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8006c44:	4b8c      	ldr	r3, [pc, #560]	; (8006e78 <HAL_RCC_OscConfig+0x4b8>)
 8006c46:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006c4a:	f003 0302 	and.w	r3, r3, #2
 8006c4e:	2b00      	cmp	r3, #0
 8006c50:	d1ea      	bne.n	8006c28 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	f003 0304 	and.w	r3, r3, #4
 8006c5a:	2b00      	cmp	r3, #0
 8006c5c:	f000 80a6 	beq.w	8006dac <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006c60:	2300      	movs	r3, #0
 8006c62:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8006c64:	4b84      	ldr	r3, [pc, #528]	; (8006e78 <HAL_RCC_OscConfig+0x4b8>)
 8006c66:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006c68:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006c6c:	2b00      	cmp	r3, #0
 8006c6e:	d101      	bne.n	8006c74 <HAL_RCC_OscConfig+0x2b4>
 8006c70:	2301      	movs	r3, #1
 8006c72:	e000      	b.n	8006c76 <HAL_RCC_OscConfig+0x2b6>
 8006c74:	2300      	movs	r3, #0
 8006c76:	2b00      	cmp	r3, #0
 8006c78:	d00d      	beq.n	8006c96 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006c7a:	4b7f      	ldr	r3, [pc, #508]	; (8006e78 <HAL_RCC_OscConfig+0x4b8>)
 8006c7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006c7e:	4a7e      	ldr	r2, [pc, #504]	; (8006e78 <HAL_RCC_OscConfig+0x4b8>)
 8006c80:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006c84:	6593      	str	r3, [r2, #88]	; 0x58
 8006c86:	4b7c      	ldr	r3, [pc, #496]	; (8006e78 <HAL_RCC_OscConfig+0x4b8>)
 8006c88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006c8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006c8e:	60fb      	str	r3, [r7, #12]
 8006c90:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8006c92:	2301      	movs	r3, #1
 8006c94:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006c96:	4b79      	ldr	r3, [pc, #484]	; (8006e7c <HAL_RCC_OscConfig+0x4bc>)
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006c9e:	2b00      	cmp	r3, #0
 8006ca0:	d118      	bne.n	8006cd4 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006ca2:	4b76      	ldr	r3, [pc, #472]	; (8006e7c <HAL_RCC_OscConfig+0x4bc>)
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	4a75      	ldr	r2, [pc, #468]	; (8006e7c <HAL_RCC_OscConfig+0x4bc>)
 8006ca8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006cac:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006cae:	f7fc fb71 	bl	8003394 <HAL_GetTick>
 8006cb2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006cb4:	e008      	b.n	8006cc8 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006cb6:	f7fc fb6d 	bl	8003394 <HAL_GetTick>
 8006cba:	4602      	mov	r2, r0
 8006cbc:	693b      	ldr	r3, [r7, #16]
 8006cbe:	1ad3      	subs	r3, r2, r3
 8006cc0:	2b02      	cmp	r3, #2
 8006cc2:	d901      	bls.n	8006cc8 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8006cc4:	2303      	movs	r3, #3
 8006cc6:	e18b      	b.n	8006fe0 <HAL_RCC_OscConfig+0x620>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006cc8:	4b6c      	ldr	r3, [pc, #432]	; (8006e7c <HAL_RCC_OscConfig+0x4bc>)
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006cd0:	2b00      	cmp	r3, #0
 8006cd2:	d0f0      	beq.n	8006cb6 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	689b      	ldr	r3, [r3, #8]
 8006cd8:	2b01      	cmp	r3, #1
 8006cda:	d108      	bne.n	8006cee <HAL_RCC_OscConfig+0x32e>
 8006cdc:	4b66      	ldr	r3, [pc, #408]	; (8006e78 <HAL_RCC_OscConfig+0x4b8>)
 8006cde:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006ce2:	4a65      	ldr	r2, [pc, #404]	; (8006e78 <HAL_RCC_OscConfig+0x4b8>)
 8006ce4:	f043 0301 	orr.w	r3, r3, #1
 8006ce8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8006cec:	e024      	b.n	8006d38 <HAL_RCC_OscConfig+0x378>
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	689b      	ldr	r3, [r3, #8]
 8006cf2:	2b05      	cmp	r3, #5
 8006cf4:	d110      	bne.n	8006d18 <HAL_RCC_OscConfig+0x358>
 8006cf6:	4b60      	ldr	r3, [pc, #384]	; (8006e78 <HAL_RCC_OscConfig+0x4b8>)
 8006cf8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006cfc:	4a5e      	ldr	r2, [pc, #376]	; (8006e78 <HAL_RCC_OscConfig+0x4b8>)
 8006cfe:	f043 0304 	orr.w	r3, r3, #4
 8006d02:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8006d06:	4b5c      	ldr	r3, [pc, #368]	; (8006e78 <HAL_RCC_OscConfig+0x4b8>)
 8006d08:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006d0c:	4a5a      	ldr	r2, [pc, #360]	; (8006e78 <HAL_RCC_OscConfig+0x4b8>)
 8006d0e:	f043 0301 	orr.w	r3, r3, #1
 8006d12:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8006d16:	e00f      	b.n	8006d38 <HAL_RCC_OscConfig+0x378>
 8006d18:	4b57      	ldr	r3, [pc, #348]	; (8006e78 <HAL_RCC_OscConfig+0x4b8>)
 8006d1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006d1e:	4a56      	ldr	r2, [pc, #344]	; (8006e78 <HAL_RCC_OscConfig+0x4b8>)
 8006d20:	f023 0301 	bic.w	r3, r3, #1
 8006d24:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8006d28:	4b53      	ldr	r3, [pc, #332]	; (8006e78 <HAL_RCC_OscConfig+0x4b8>)
 8006d2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006d2e:	4a52      	ldr	r2, [pc, #328]	; (8006e78 <HAL_RCC_OscConfig+0x4b8>)
 8006d30:	f023 0304 	bic.w	r3, r3, #4
 8006d34:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	689b      	ldr	r3, [r3, #8]
 8006d3c:	2b00      	cmp	r3, #0
 8006d3e:	d016      	beq.n	8006d6e <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006d40:	f7fc fb28 	bl	8003394 <HAL_GetTick>
 8006d44:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006d46:	e00a      	b.n	8006d5e <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006d48:	f7fc fb24 	bl	8003394 <HAL_GetTick>
 8006d4c:	4602      	mov	r2, r0
 8006d4e:	693b      	ldr	r3, [r7, #16]
 8006d50:	1ad3      	subs	r3, r2, r3
 8006d52:	f241 3288 	movw	r2, #5000	; 0x1388
 8006d56:	4293      	cmp	r3, r2
 8006d58:	d901      	bls.n	8006d5e <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8006d5a:	2303      	movs	r3, #3
 8006d5c:	e140      	b.n	8006fe0 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006d5e:	4b46      	ldr	r3, [pc, #280]	; (8006e78 <HAL_RCC_OscConfig+0x4b8>)
 8006d60:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006d64:	f003 0302 	and.w	r3, r3, #2
 8006d68:	2b00      	cmp	r3, #0
 8006d6a:	d0ed      	beq.n	8006d48 <HAL_RCC_OscConfig+0x388>
 8006d6c:	e015      	b.n	8006d9a <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006d6e:	f7fc fb11 	bl	8003394 <HAL_GetTick>
 8006d72:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006d74:	e00a      	b.n	8006d8c <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006d76:	f7fc fb0d 	bl	8003394 <HAL_GetTick>
 8006d7a:	4602      	mov	r2, r0
 8006d7c:	693b      	ldr	r3, [r7, #16]
 8006d7e:	1ad3      	subs	r3, r2, r3
 8006d80:	f241 3288 	movw	r2, #5000	; 0x1388
 8006d84:	4293      	cmp	r3, r2
 8006d86:	d901      	bls.n	8006d8c <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8006d88:	2303      	movs	r3, #3
 8006d8a:	e129      	b.n	8006fe0 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006d8c:	4b3a      	ldr	r3, [pc, #232]	; (8006e78 <HAL_RCC_OscConfig+0x4b8>)
 8006d8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006d92:	f003 0302 	and.w	r3, r3, #2
 8006d96:	2b00      	cmp	r3, #0
 8006d98:	d1ed      	bne.n	8006d76 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8006d9a:	7ffb      	ldrb	r3, [r7, #31]
 8006d9c:	2b01      	cmp	r3, #1
 8006d9e:	d105      	bne.n	8006dac <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006da0:	4b35      	ldr	r3, [pc, #212]	; (8006e78 <HAL_RCC_OscConfig+0x4b8>)
 8006da2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006da4:	4a34      	ldr	r2, [pc, #208]	; (8006e78 <HAL_RCC_OscConfig+0x4b8>)
 8006da6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006daa:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	f003 0320 	and.w	r3, r3, #32
 8006db4:	2b00      	cmp	r3, #0
 8006db6:	d03c      	beq.n	8006e32 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	699b      	ldr	r3, [r3, #24]
 8006dbc:	2b00      	cmp	r3, #0
 8006dbe:	d01c      	beq.n	8006dfa <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8006dc0:	4b2d      	ldr	r3, [pc, #180]	; (8006e78 <HAL_RCC_OscConfig+0x4b8>)
 8006dc2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006dc6:	4a2c      	ldr	r2, [pc, #176]	; (8006e78 <HAL_RCC_OscConfig+0x4b8>)
 8006dc8:	f043 0301 	orr.w	r3, r3, #1
 8006dcc:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006dd0:	f7fc fae0 	bl	8003394 <HAL_GetTick>
 8006dd4:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8006dd6:	e008      	b.n	8006dea <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006dd8:	f7fc fadc 	bl	8003394 <HAL_GetTick>
 8006ddc:	4602      	mov	r2, r0
 8006dde:	693b      	ldr	r3, [r7, #16]
 8006de0:	1ad3      	subs	r3, r2, r3
 8006de2:	2b02      	cmp	r3, #2
 8006de4:	d901      	bls.n	8006dea <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8006de6:	2303      	movs	r3, #3
 8006de8:	e0fa      	b.n	8006fe0 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8006dea:	4b23      	ldr	r3, [pc, #140]	; (8006e78 <HAL_RCC_OscConfig+0x4b8>)
 8006dec:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006df0:	f003 0302 	and.w	r3, r3, #2
 8006df4:	2b00      	cmp	r3, #0
 8006df6:	d0ef      	beq.n	8006dd8 <HAL_RCC_OscConfig+0x418>
 8006df8:	e01b      	b.n	8006e32 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8006dfa:	4b1f      	ldr	r3, [pc, #124]	; (8006e78 <HAL_RCC_OscConfig+0x4b8>)
 8006dfc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006e00:	4a1d      	ldr	r2, [pc, #116]	; (8006e78 <HAL_RCC_OscConfig+0x4b8>)
 8006e02:	f023 0301 	bic.w	r3, r3, #1
 8006e06:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006e0a:	f7fc fac3 	bl	8003394 <HAL_GetTick>
 8006e0e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8006e10:	e008      	b.n	8006e24 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006e12:	f7fc fabf 	bl	8003394 <HAL_GetTick>
 8006e16:	4602      	mov	r2, r0
 8006e18:	693b      	ldr	r3, [r7, #16]
 8006e1a:	1ad3      	subs	r3, r2, r3
 8006e1c:	2b02      	cmp	r3, #2
 8006e1e:	d901      	bls.n	8006e24 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8006e20:	2303      	movs	r3, #3
 8006e22:	e0dd      	b.n	8006fe0 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8006e24:	4b14      	ldr	r3, [pc, #80]	; (8006e78 <HAL_RCC_OscConfig+0x4b8>)
 8006e26:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006e2a:	f003 0302 	and.w	r3, r3, #2
 8006e2e:	2b00      	cmp	r3, #0
 8006e30:	d1ef      	bne.n	8006e12 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	69db      	ldr	r3, [r3, #28]
 8006e36:	2b00      	cmp	r3, #0
 8006e38:	f000 80d1 	beq.w	8006fde <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006e3c:	4b0e      	ldr	r3, [pc, #56]	; (8006e78 <HAL_RCC_OscConfig+0x4b8>)
 8006e3e:	689b      	ldr	r3, [r3, #8]
 8006e40:	f003 030c 	and.w	r3, r3, #12
 8006e44:	2b0c      	cmp	r3, #12
 8006e46:	f000 808b 	beq.w	8006f60 <HAL_RCC_OscConfig+0x5a0>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	69db      	ldr	r3, [r3, #28]
 8006e4e:	2b02      	cmp	r3, #2
 8006e50:	d15e      	bne.n	8006f10 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006e52:	4b09      	ldr	r3, [pc, #36]	; (8006e78 <HAL_RCC_OscConfig+0x4b8>)
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	4a08      	ldr	r2, [pc, #32]	; (8006e78 <HAL_RCC_OscConfig+0x4b8>)
 8006e58:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006e5c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006e5e:	f7fc fa99 	bl	8003394 <HAL_GetTick>
 8006e62:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006e64:	e00c      	b.n	8006e80 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006e66:	f7fc fa95 	bl	8003394 <HAL_GetTick>
 8006e6a:	4602      	mov	r2, r0
 8006e6c:	693b      	ldr	r3, [r7, #16]
 8006e6e:	1ad3      	subs	r3, r2, r3
 8006e70:	2b02      	cmp	r3, #2
 8006e72:	d905      	bls.n	8006e80 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8006e74:	2303      	movs	r3, #3
 8006e76:	e0b3      	b.n	8006fe0 <HAL_RCC_OscConfig+0x620>
 8006e78:	40021000 	.word	0x40021000
 8006e7c:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006e80:	4b59      	ldr	r3, [pc, #356]	; (8006fe8 <HAL_RCC_OscConfig+0x628>)
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006e88:	2b00      	cmp	r3, #0
 8006e8a:	d1ec      	bne.n	8006e66 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006e8c:	4b56      	ldr	r3, [pc, #344]	; (8006fe8 <HAL_RCC_OscConfig+0x628>)
 8006e8e:	68da      	ldr	r2, [r3, #12]
 8006e90:	4b56      	ldr	r3, [pc, #344]	; (8006fec <HAL_RCC_OscConfig+0x62c>)
 8006e92:	4013      	ands	r3, r2
 8006e94:	687a      	ldr	r2, [r7, #4]
 8006e96:	6a11      	ldr	r1, [r2, #32]
 8006e98:	687a      	ldr	r2, [r7, #4]
 8006e9a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8006e9c:	3a01      	subs	r2, #1
 8006e9e:	0112      	lsls	r2, r2, #4
 8006ea0:	4311      	orrs	r1, r2
 8006ea2:	687a      	ldr	r2, [r7, #4]
 8006ea4:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8006ea6:	0212      	lsls	r2, r2, #8
 8006ea8:	4311      	orrs	r1, r2
 8006eaa:	687a      	ldr	r2, [r7, #4]
 8006eac:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8006eae:	0852      	lsrs	r2, r2, #1
 8006eb0:	3a01      	subs	r2, #1
 8006eb2:	0552      	lsls	r2, r2, #21
 8006eb4:	4311      	orrs	r1, r2
 8006eb6:	687a      	ldr	r2, [r7, #4]
 8006eb8:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8006eba:	0852      	lsrs	r2, r2, #1
 8006ebc:	3a01      	subs	r2, #1
 8006ebe:	0652      	lsls	r2, r2, #25
 8006ec0:	4311      	orrs	r1, r2
 8006ec2:	687a      	ldr	r2, [r7, #4]
 8006ec4:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8006ec6:	06d2      	lsls	r2, r2, #27
 8006ec8:	430a      	orrs	r2, r1
 8006eca:	4947      	ldr	r1, [pc, #284]	; (8006fe8 <HAL_RCC_OscConfig+0x628>)
 8006ecc:	4313      	orrs	r3, r2
 8006ece:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006ed0:	4b45      	ldr	r3, [pc, #276]	; (8006fe8 <HAL_RCC_OscConfig+0x628>)
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	4a44      	ldr	r2, [pc, #272]	; (8006fe8 <HAL_RCC_OscConfig+0x628>)
 8006ed6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006eda:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8006edc:	4b42      	ldr	r3, [pc, #264]	; (8006fe8 <HAL_RCC_OscConfig+0x628>)
 8006ede:	68db      	ldr	r3, [r3, #12]
 8006ee0:	4a41      	ldr	r2, [pc, #260]	; (8006fe8 <HAL_RCC_OscConfig+0x628>)
 8006ee2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006ee6:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006ee8:	f7fc fa54 	bl	8003394 <HAL_GetTick>
 8006eec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006eee:	e008      	b.n	8006f02 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006ef0:	f7fc fa50 	bl	8003394 <HAL_GetTick>
 8006ef4:	4602      	mov	r2, r0
 8006ef6:	693b      	ldr	r3, [r7, #16]
 8006ef8:	1ad3      	subs	r3, r2, r3
 8006efa:	2b02      	cmp	r3, #2
 8006efc:	d901      	bls.n	8006f02 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8006efe:	2303      	movs	r3, #3
 8006f00:	e06e      	b.n	8006fe0 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006f02:	4b39      	ldr	r3, [pc, #228]	; (8006fe8 <HAL_RCC_OscConfig+0x628>)
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006f0a:	2b00      	cmp	r3, #0
 8006f0c:	d0f0      	beq.n	8006ef0 <HAL_RCC_OscConfig+0x530>
 8006f0e:	e066      	b.n	8006fde <HAL_RCC_OscConfig+0x61e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006f10:	4b35      	ldr	r3, [pc, #212]	; (8006fe8 <HAL_RCC_OscConfig+0x628>)
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	4a34      	ldr	r2, [pc, #208]	; (8006fe8 <HAL_RCC_OscConfig+0x628>)
 8006f16:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006f1a:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8006f1c:	4b32      	ldr	r3, [pc, #200]	; (8006fe8 <HAL_RCC_OscConfig+0x628>)
 8006f1e:	68db      	ldr	r3, [r3, #12]
 8006f20:	4a31      	ldr	r2, [pc, #196]	; (8006fe8 <HAL_RCC_OscConfig+0x628>)
 8006f22:	f023 0303 	bic.w	r3, r3, #3
 8006f26:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8006f28:	4b2f      	ldr	r3, [pc, #188]	; (8006fe8 <HAL_RCC_OscConfig+0x628>)
 8006f2a:	68db      	ldr	r3, [r3, #12]
 8006f2c:	4a2e      	ldr	r2, [pc, #184]	; (8006fe8 <HAL_RCC_OscConfig+0x628>)
 8006f2e:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8006f32:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006f36:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006f38:	f7fc fa2c 	bl	8003394 <HAL_GetTick>
 8006f3c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006f3e:	e008      	b.n	8006f52 <HAL_RCC_OscConfig+0x592>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006f40:	f7fc fa28 	bl	8003394 <HAL_GetTick>
 8006f44:	4602      	mov	r2, r0
 8006f46:	693b      	ldr	r3, [r7, #16]
 8006f48:	1ad3      	subs	r3, r2, r3
 8006f4a:	2b02      	cmp	r3, #2
 8006f4c:	d901      	bls.n	8006f52 <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 8006f4e:	2303      	movs	r3, #3
 8006f50:	e046      	b.n	8006fe0 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006f52:	4b25      	ldr	r3, [pc, #148]	; (8006fe8 <HAL_RCC_OscConfig+0x628>)
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006f5a:	2b00      	cmp	r3, #0
 8006f5c:	d1f0      	bne.n	8006f40 <HAL_RCC_OscConfig+0x580>
 8006f5e:	e03e      	b.n	8006fde <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	69db      	ldr	r3, [r3, #28]
 8006f64:	2b01      	cmp	r3, #1
 8006f66:	d101      	bne.n	8006f6c <HAL_RCC_OscConfig+0x5ac>
      {
        return HAL_ERROR;
 8006f68:	2301      	movs	r3, #1
 8006f6a:	e039      	b.n	8006fe0 <HAL_RCC_OscConfig+0x620>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8006f6c:	4b1e      	ldr	r3, [pc, #120]	; (8006fe8 <HAL_RCC_OscConfig+0x628>)
 8006f6e:	68db      	ldr	r3, [r3, #12]
 8006f70:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006f72:	697b      	ldr	r3, [r7, #20]
 8006f74:	f003 0203 	and.w	r2, r3, #3
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	6a1b      	ldr	r3, [r3, #32]
 8006f7c:	429a      	cmp	r2, r3
 8006f7e:	d12c      	bne.n	8006fda <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8006f80:	697b      	ldr	r3, [r7, #20]
 8006f82:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f8a:	3b01      	subs	r3, #1
 8006f8c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006f8e:	429a      	cmp	r2, r3
 8006f90:	d123      	bne.n	8006fda <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8006f92:	697b      	ldr	r3, [r7, #20]
 8006f94:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f9c:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8006f9e:	429a      	cmp	r2, r3
 8006fa0:	d11b      	bne.n	8006fda <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8006fa2:	697b      	ldr	r3, [r7, #20]
 8006fa4:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006fac:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8006fae:	429a      	cmp	r2, r3
 8006fb0:	d113      	bne.n	8006fda <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006fb2:	697b      	ldr	r3, [r7, #20]
 8006fb4:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006fbc:	085b      	lsrs	r3, r3, #1
 8006fbe:	3b01      	subs	r3, #1
 8006fc0:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8006fc2:	429a      	cmp	r2, r3
 8006fc4:	d109      	bne.n	8006fda <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8006fc6:	697b      	ldr	r3, [r7, #20]
 8006fc8:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006fd0:	085b      	lsrs	r3, r3, #1
 8006fd2:	3b01      	subs	r3, #1
 8006fd4:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006fd6:	429a      	cmp	r2, r3
 8006fd8:	d001      	beq.n	8006fde <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 8006fda:	2301      	movs	r3, #1
 8006fdc:	e000      	b.n	8006fe0 <HAL_RCC_OscConfig+0x620>
      }
    }
  }
  }

  return HAL_OK;
 8006fde:	2300      	movs	r3, #0
}
 8006fe0:	4618      	mov	r0, r3
 8006fe2:	3720      	adds	r7, #32
 8006fe4:	46bd      	mov	sp, r7
 8006fe6:	bd80      	pop	{r7, pc}
 8006fe8:	40021000 	.word	0x40021000
 8006fec:	019f800c 	.word	0x019f800c

08006ff0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006ff0:	b580      	push	{r7, lr}
 8006ff2:	b086      	sub	sp, #24
 8006ff4:	af00      	add	r7, sp, #0
 8006ff6:	6078      	str	r0, [r7, #4]
 8006ff8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8006ffa:	2300      	movs	r3, #0
 8006ffc:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	2b00      	cmp	r3, #0
 8007002:	d101      	bne.n	8007008 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8007004:	2301      	movs	r3, #1
 8007006:	e11e      	b.n	8007246 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8007008:	4b91      	ldr	r3, [pc, #580]	; (8007250 <HAL_RCC_ClockConfig+0x260>)
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	f003 030f 	and.w	r3, r3, #15
 8007010:	683a      	ldr	r2, [r7, #0]
 8007012:	429a      	cmp	r2, r3
 8007014:	d910      	bls.n	8007038 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007016:	4b8e      	ldr	r3, [pc, #568]	; (8007250 <HAL_RCC_ClockConfig+0x260>)
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	f023 020f 	bic.w	r2, r3, #15
 800701e:	498c      	ldr	r1, [pc, #560]	; (8007250 <HAL_RCC_ClockConfig+0x260>)
 8007020:	683b      	ldr	r3, [r7, #0]
 8007022:	4313      	orrs	r3, r2
 8007024:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007026:	4b8a      	ldr	r3, [pc, #552]	; (8007250 <HAL_RCC_ClockConfig+0x260>)
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	f003 030f 	and.w	r3, r3, #15
 800702e:	683a      	ldr	r2, [r7, #0]
 8007030:	429a      	cmp	r2, r3
 8007032:	d001      	beq.n	8007038 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8007034:	2301      	movs	r3, #1
 8007036:	e106      	b.n	8007246 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	f003 0301 	and.w	r3, r3, #1
 8007040:	2b00      	cmp	r3, #0
 8007042:	d073      	beq.n	800712c <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	685b      	ldr	r3, [r3, #4]
 8007048:	2b03      	cmp	r3, #3
 800704a:	d129      	bne.n	80070a0 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800704c:	4b81      	ldr	r3, [pc, #516]	; (8007254 <HAL_RCC_ClockConfig+0x264>)
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007054:	2b00      	cmp	r3, #0
 8007056:	d101      	bne.n	800705c <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8007058:	2301      	movs	r3, #1
 800705a:	e0f4      	b.n	8007246 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 800705c:	f000 f99e 	bl	800739c <RCC_GetSysClockFreqFromPLLSource>
 8007060:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8007062:	693b      	ldr	r3, [r7, #16]
 8007064:	4a7c      	ldr	r2, [pc, #496]	; (8007258 <HAL_RCC_ClockConfig+0x268>)
 8007066:	4293      	cmp	r3, r2
 8007068:	d93f      	bls.n	80070ea <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800706a:	4b7a      	ldr	r3, [pc, #488]	; (8007254 <HAL_RCC_ClockConfig+0x264>)
 800706c:	689b      	ldr	r3, [r3, #8]
 800706e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007072:	2b00      	cmp	r3, #0
 8007074:	d009      	beq.n	800708a <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800707e:	2b00      	cmp	r3, #0
 8007080:	d033      	beq.n	80070ea <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8007086:	2b00      	cmp	r3, #0
 8007088:	d12f      	bne.n	80070ea <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800708a:	4b72      	ldr	r3, [pc, #456]	; (8007254 <HAL_RCC_ClockConfig+0x264>)
 800708c:	689b      	ldr	r3, [r3, #8]
 800708e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007092:	4a70      	ldr	r2, [pc, #448]	; (8007254 <HAL_RCC_ClockConfig+0x264>)
 8007094:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007098:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800709a:	2380      	movs	r3, #128	; 0x80
 800709c:	617b      	str	r3, [r7, #20]
 800709e:	e024      	b.n	80070ea <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	685b      	ldr	r3, [r3, #4]
 80070a4:	2b02      	cmp	r3, #2
 80070a6:	d107      	bne.n	80070b8 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80070a8:	4b6a      	ldr	r3, [pc, #424]	; (8007254 <HAL_RCC_ClockConfig+0x264>)
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80070b0:	2b00      	cmp	r3, #0
 80070b2:	d109      	bne.n	80070c8 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80070b4:	2301      	movs	r3, #1
 80070b6:	e0c6      	b.n	8007246 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80070b8:	4b66      	ldr	r3, [pc, #408]	; (8007254 <HAL_RCC_ClockConfig+0x264>)
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80070c0:	2b00      	cmp	r3, #0
 80070c2:	d101      	bne.n	80070c8 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80070c4:	2301      	movs	r3, #1
 80070c6:	e0be      	b.n	8007246 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 80070c8:	f000 f8ce 	bl	8007268 <HAL_RCC_GetSysClockFreq>
 80070cc:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 80070ce:	693b      	ldr	r3, [r7, #16]
 80070d0:	4a61      	ldr	r2, [pc, #388]	; (8007258 <HAL_RCC_ClockConfig+0x268>)
 80070d2:	4293      	cmp	r3, r2
 80070d4:	d909      	bls.n	80070ea <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80070d6:	4b5f      	ldr	r3, [pc, #380]	; (8007254 <HAL_RCC_ClockConfig+0x264>)
 80070d8:	689b      	ldr	r3, [r3, #8]
 80070da:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80070de:	4a5d      	ldr	r2, [pc, #372]	; (8007254 <HAL_RCC_ClockConfig+0x264>)
 80070e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80070e4:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80070e6:	2380      	movs	r3, #128	; 0x80
 80070e8:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80070ea:	4b5a      	ldr	r3, [pc, #360]	; (8007254 <HAL_RCC_ClockConfig+0x264>)
 80070ec:	689b      	ldr	r3, [r3, #8]
 80070ee:	f023 0203 	bic.w	r2, r3, #3
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	685b      	ldr	r3, [r3, #4]
 80070f6:	4957      	ldr	r1, [pc, #348]	; (8007254 <HAL_RCC_ClockConfig+0x264>)
 80070f8:	4313      	orrs	r3, r2
 80070fa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80070fc:	f7fc f94a 	bl	8003394 <HAL_GetTick>
 8007100:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007102:	e00a      	b.n	800711a <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007104:	f7fc f946 	bl	8003394 <HAL_GetTick>
 8007108:	4602      	mov	r2, r0
 800710a:	68fb      	ldr	r3, [r7, #12]
 800710c:	1ad3      	subs	r3, r2, r3
 800710e:	f241 3288 	movw	r2, #5000	; 0x1388
 8007112:	4293      	cmp	r3, r2
 8007114:	d901      	bls.n	800711a <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8007116:	2303      	movs	r3, #3
 8007118:	e095      	b.n	8007246 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800711a:	4b4e      	ldr	r3, [pc, #312]	; (8007254 <HAL_RCC_ClockConfig+0x264>)
 800711c:	689b      	ldr	r3, [r3, #8]
 800711e:	f003 020c 	and.w	r2, r3, #12
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	685b      	ldr	r3, [r3, #4]
 8007126:	009b      	lsls	r3, r3, #2
 8007128:	429a      	cmp	r2, r3
 800712a:	d1eb      	bne.n	8007104 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	f003 0302 	and.w	r3, r3, #2
 8007134:	2b00      	cmp	r3, #0
 8007136:	d023      	beq.n	8007180 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	f003 0304 	and.w	r3, r3, #4
 8007140:	2b00      	cmp	r3, #0
 8007142:	d005      	beq.n	8007150 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007144:	4b43      	ldr	r3, [pc, #268]	; (8007254 <HAL_RCC_ClockConfig+0x264>)
 8007146:	689b      	ldr	r3, [r3, #8]
 8007148:	4a42      	ldr	r2, [pc, #264]	; (8007254 <HAL_RCC_ClockConfig+0x264>)
 800714a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800714e:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	f003 0308 	and.w	r3, r3, #8
 8007158:	2b00      	cmp	r3, #0
 800715a:	d007      	beq.n	800716c <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 800715c:	4b3d      	ldr	r3, [pc, #244]	; (8007254 <HAL_RCC_ClockConfig+0x264>)
 800715e:	689b      	ldr	r3, [r3, #8]
 8007160:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8007164:	4a3b      	ldr	r2, [pc, #236]	; (8007254 <HAL_RCC_ClockConfig+0x264>)
 8007166:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800716a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800716c:	4b39      	ldr	r3, [pc, #228]	; (8007254 <HAL_RCC_ClockConfig+0x264>)
 800716e:	689b      	ldr	r3, [r3, #8]
 8007170:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	689b      	ldr	r3, [r3, #8]
 8007178:	4936      	ldr	r1, [pc, #216]	; (8007254 <HAL_RCC_ClockConfig+0x264>)
 800717a:	4313      	orrs	r3, r2
 800717c:	608b      	str	r3, [r1, #8]
 800717e:	e008      	b.n	8007192 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8007180:	697b      	ldr	r3, [r7, #20]
 8007182:	2b80      	cmp	r3, #128	; 0x80
 8007184:	d105      	bne.n	8007192 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8007186:	4b33      	ldr	r3, [pc, #204]	; (8007254 <HAL_RCC_ClockConfig+0x264>)
 8007188:	689b      	ldr	r3, [r3, #8]
 800718a:	4a32      	ldr	r2, [pc, #200]	; (8007254 <HAL_RCC_ClockConfig+0x264>)
 800718c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007190:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8007192:	4b2f      	ldr	r3, [pc, #188]	; (8007250 <HAL_RCC_ClockConfig+0x260>)
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	f003 030f 	and.w	r3, r3, #15
 800719a:	683a      	ldr	r2, [r7, #0]
 800719c:	429a      	cmp	r2, r3
 800719e:	d21d      	bcs.n	80071dc <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80071a0:	4b2b      	ldr	r3, [pc, #172]	; (8007250 <HAL_RCC_ClockConfig+0x260>)
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	f023 020f 	bic.w	r2, r3, #15
 80071a8:	4929      	ldr	r1, [pc, #164]	; (8007250 <HAL_RCC_ClockConfig+0x260>)
 80071aa:	683b      	ldr	r3, [r7, #0]
 80071ac:	4313      	orrs	r3, r2
 80071ae:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80071b0:	f7fc f8f0 	bl	8003394 <HAL_GetTick>
 80071b4:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80071b6:	e00a      	b.n	80071ce <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80071b8:	f7fc f8ec 	bl	8003394 <HAL_GetTick>
 80071bc:	4602      	mov	r2, r0
 80071be:	68fb      	ldr	r3, [r7, #12]
 80071c0:	1ad3      	subs	r3, r2, r3
 80071c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80071c6:	4293      	cmp	r3, r2
 80071c8:	d901      	bls.n	80071ce <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 80071ca:	2303      	movs	r3, #3
 80071cc:	e03b      	b.n	8007246 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80071ce:	4b20      	ldr	r3, [pc, #128]	; (8007250 <HAL_RCC_ClockConfig+0x260>)
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	f003 030f 	and.w	r3, r3, #15
 80071d6:	683a      	ldr	r2, [r7, #0]
 80071d8:	429a      	cmp	r2, r3
 80071da:	d1ed      	bne.n	80071b8 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	f003 0304 	and.w	r3, r3, #4
 80071e4:	2b00      	cmp	r3, #0
 80071e6:	d008      	beq.n	80071fa <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80071e8:	4b1a      	ldr	r3, [pc, #104]	; (8007254 <HAL_RCC_ClockConfig+0x264>)
 80071ea:	689b      	ldr	r3, [r3, #8]
 80071ec:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	68db      	ldr	r3, [r3, #12]
 80071f4:	4917      	ldr	r1, [pc, #92]	; (8007254 <HAL_RCC_ClockConfig+0x264>)
 80071f6:	4313      	orrs	r3, r2
 80071f8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	f003 0308 	and.w	r3, r3, #8
 8007202:	2b00      	cmp	r3, #0
 8007204:	d009      	beq.n	800721a <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8007206:	4b13      	ldr	r3, [pc, #76]	; (8007254 <HAL_RCC_ClockConfig+0x264>)
 8007208:	689b      	ldr	r3, [r3, #8]
 800720a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	691b      	ldr	r3, [r3, #16]
 8007212:	00db      	lsls	r3, r3, #3
 8007214:	490f      	ldr	r1, [pc, #60]	; (8007254 <HAL_RCC_ClockConfig+0x264>)
 8007216:	4313      	orrs	r3, r2
 8007218:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800721a:	f000 f825 	bl	8007268 <HAL_RCC_GetSysClockFreq>
 800721e:	4602      	mov	r2, r0
 8007220:	4b0c      	ldr	r3, [pc, #48]	; (8007254 <HAL_RCC_ClockConfig+0x264>)
 8007222:	689b      	ldr	r3, [r3, #8]
 8007224:	091b      	lsrs	r3, r3, #4
 8007226:	f003 030f 	and.w	r3, r3, #15
 800722a:	490c      	ldr	r1, [pc, #48]	; (800725c <HAL_RCC_ClockConfig+0x26c>)
 800722c:	5ccb      	ldrb	r3, [r1, r3]
 800722e:	f003 031f 	and.w	r3, r3, #31
 8007232:	fa22 f303 	lsr.w	r3, r2, r3
 8007236:	4a0a      	ldr	r2, [pc, #40]	; (8007260 <HAL_RCC_ClockConfig+0x270>)
 8007238:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800723a:	4b0a      	ldr	r3, [pc, #40]	; (8007264 <HAL_RCC_ClockConfig+0x274>)
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	4618      	mov	r0, r3
 8007240:	f7fc f85c 	bl	80032fc <HAL_InitTick>
 8007244:	4603      	mov	r3, r0
}
 8007246:	4618      	mov	r0, r3
 8007248:	3718      	adds	r7, #24
 800724a:	46bd      	mov	sp, r7
 800724c:	bd80      	pop	{r7, pc}
 800724e:	bf00      	nop
 8007250:	40022000 	.word	0x40022000
 8007254:	40021000 	.word	0x40021000
 8007258:	04c4b400 	.word	0x04c4b400
 800725c:	0800bda4 	.word	0x0800bda4
 8007260:	2000001c 	.word	0x2000001c
 8007264:	20000020 	.word	0x20000020

08007268 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007268:	b480      	push	{r7}
 800726a:	b087      	sub	sp, #28
 800726c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800726e:	4b2c      	ldr	r3, [pc, #176]	; (8007320 <HAL_RCC_GetSysClockFreq+0xb8>)
 8007270:	689b      	ldr	r3, [r3, #8]
 8007272:	f003 030c 	and.w	r3, r3, #12
 8007276:	2b04      	cmp	r3, #4
 8007278:	d102      	bne.n	8007280 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800727a:	4b2a      	ldr	r3, [pc, #168]	; (8007324 <HAL_RCC_GetSysClockFreq+0xbc>)
 800727c:	613b      	str	r3, [r7, #16]
 800727e:	e047      	b.n	8007310 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8007280:	4b27      	ldr	r3, [pc, #156]	; (8007320 <HAL_RCC_GetSysClockFreq+0xb8>)
 8007282:	689b      	ldr	r3, [r3, #8]
 8007284:	f003 030c 	and.w	r3, r3, #12
 8007288:	2b08      	cmp	r3, #8
 800728a:	d102      	bne.n	8007292 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800728c:	4b26      	ldr	r3, [pc, #152]	; (8007328 <HAL_RCC_GetSysClockFreq+0xc0>)
 800728e:	613b      	str	r3, [r7, #16]
 8007290:	e03e      	b.n	8007310 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8007292:	4b23      	ldr	r3, [pc, #140]	; (8007320 <HAL_RCC_GetSysClockFreq+0xb8>)
 8007294:	689b      	ldr	r3, [r3, #8]
 8007296:	f003 030c 	and.w	r3, r3, #12
 800729a:	2b0c      	cmp	r3, #12
 800729c:	d136      	bne.n	800730c <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800729e:	4b20      	ldr	r3, [pc, #128]	; (8007320 <HAL_RCC_GetSysClockFreq+0xb8>)
 80072a0:	68db      	ldr	r3, [r3, #12]
 80072a2:	f003 0303 	and.w	r3, r3, #3
 80072a6:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80072a8:	4b1d      	ldr	r3, [pc, #116]	; (8007320 <HAL_RCC_GetSysClockFreq+0xb8>)
 80072aa:	68db      	ldr	r3, [r3, #12]
 80072ac:	091b      	lsrs	r3, r3, #4
 80072ae:	f003 030f 	and.w	r3, r3, #15
 80072b2:	3301      	adds	r3, #1
 80072b4:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80072b6:	68fb      	ldr	r3, [r7, #12]
 80072b8:	2b03      	cmp	r3, #3
 80072ba:	d10c      	bne.n	80072d6 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80072bc:	4a1a      	ldr	r2, [pc, #104]	; (8007328 <HAL_RCC_GetSysClockFreq+0xc0>)
 80072be:	68bb      	ldr	r3, [r7, #8]
 80072c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80072c4:	4a16      	ldr	r2, [pc, #88]	; (8007320 <HAL_RCC_GetSysClockFreq+0xb8>)
 80072c6:	68d2      	ldr	r2, [r2, #12]
 80072c8:	0a12      	lsrs	r2, r2, #8
 80072ca:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80072ce:	fb02 f303 	mul.w	r3, r2, r3
 80072d2:	617b      	str	r3, [r7, #20]
      break;
 80072d4:	e00c      	b.n	80072f0 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80072d6:	4a13      	ldr	r2, [pc, #76]	; (8007324 <HAL_RCC_GetSysClockFreq+0xbc>)
 80072d8:	68bb      	ldr	r3, [r7, #8]
 80072da:	fbb2 f3f3 	udiv	r3, r2, r3
 80072de:	4a10      	ldr	r2, [pc, #64]	; (8007320 <HAL_RCC_GetSysClockFreq+0xb8>)
 80072e0:	68d2      	ldr	r2, [r2, #12]
 80072e2:	0a12      	lsrs	r2, r2, #8
 80072e4:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80072e8:	fb02 f303 	mul.w	r3, r2, r3
 80072ec:	617b      	str	r3, [r7, #20]
      break;
 80072ee:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80072f0:	4b0b      	ldr	r3, [pc, #44]	; (8007320 <HAL_RCC_GetSysClockFreq+0xb8>)
 80072f2:	68db      	ldr	r3, [r3, #12]
 80072f4:	0e5b      	lsrs	r3, r3, #25
 80072f6:	f003 0303 	and.w	r3, r3, #3
 80072fa:	3301      	adds	r3, #1
 80072fc:	005b      	lsls	r3, r3, #1
 80072fe:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8007300:	697a      	ldr	r2, [r7, #20]
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	fbb2 f3f3 	udiv	r3, r2, r3
 8007308:	613b      	str	r3, [r7, #16]
 800730a:	e001      	b.n	8007310 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 800730c:	2300      	movs	r3, #0
 800730e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8007310:	693b      	ldr	r3, [r7, #16]
}
 8007312:	4618      	mov	r0, r3
 8007314:	371c      	adds	r7, #28
 8007316:	46bd      	mov	sp, r7
 8007318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800731c:	4770      	bx	lr
 800731e:	bf00      	nop
 8007320:	40021000 	.word	0x40021000
 8007324:	00f42400 	.word	0x00f42400
 8007328:	016e3600 	.word	0x016e3600

0800732c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800732c:	b480      	push	{r7}
 800732e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007330:	4b03      	ldr	r3, [pc, #12]	; (8007340 <HAL_RCC_GetHCLKFreq+0x14>)
 8007332:	681b      	ldr	r3, [r3, #0]
}
 8007334:	4618      	mov	r0, r3
 8007336:	46bd      	mov	sp, r7
 8007338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800733c:	4770      	bx	lr
 800733e:	bf00      	nop
 8007340:	2000001c 	.word	0x2000001c

08007344 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007344:	b580      	push	{r7, lr}
 8007346:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8007348:	f7ff fff0 	bl	800732c <HAL_RCC_GetHCLKFreq>
 800734c:	4602      	mov	r2, r0
 800734e:	4b06      	ldr	r3, [pc, #24]	; (8007368 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007350:	689b      	ldr	r3, [r3, #8]
 8007352:	0a1b      	lsrs	r3, r3, #8
 8007354:	f003 0307 	and.w	r3, r3, #7
 8007358:	4904      	ldr	r1, [pc, #16]	; (800736c <HAL_RCC_GetPCLK1Freq+0x28>)
 800735a:	5ccb      	ldrb	r3, [r1, r3]
 800735c:	f003 031f 	and.w	r3, r3, #31
 8007360:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007364:	4618      	mov	r0, r3
 8007366:	bd80      	pop	{r7, pc}
 8007368:	40021000 	.word	0x40021000
 800736c:	0800bdb4 	.word	0x0800bdb4

08007370 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007370:	b580      	push	{r7, lr}
 8007372:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8007374:	f7ff ffda 	bl	800732c <HAL_RCC_GetHCLKFreq>
 8007378:	4602      	mov	r2, r0
 800737a:	4b06      	ldr	r3, [pc, #24]	; (8007394 <HAL_RCC_GetPCLK2Freq+0x24>)
 800737c:	689b      	ldr	r3, [r3, #8]
 800737e:	0adb      	lsrs	r3, r3, #11
 8007380:	f003 0307 	and.w	r3, r3, #7
 8007384:	4904      	ldr	r1, [pc, #16]	; (8007398 <HAL_RCC_GetPCLK2Freq+0x28>)
 8007386:	5ccb      	ldrb	r3, [r1, r3]
 8007388:	f003 031f 	and.w	r3, r3, #31
 800738c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007390:	4618      	mov	r0, r3
 8007392:	bd80      	pop	{r7, pc}
 8007394:	40021000 	.word	0x40021000
 8007398:	0800bdb4 	.word	0x0800bdb4

0800739c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 800739c:	b480      	push	{r7}
 800739e:	b087      	sub	sp, #28
 80073a0:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80073a2:	4b1e      	ldr	r3, [pc, #120]	; (800741c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80073a4:	68db      	ldr	r3, [r3, #12]
 80073a6:	f003 0303 	and.w	r3, r3, #3
 80073aa:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80073ac:	4b1b      	ldr	r3, [pc, #108]	; (800741c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80073ae:	68db      	ldr	r3, [r3, #12]
 80073b0:	091b      	lsrs	r3, r3, #4
 80073b2:	f003 030f 	and.w	r3, r3, #15
 80073b6:	3301      	adds	r3, #1
 80073b8:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80073ba:	693b      	ldr	r3, [r7, #16]
 80073bc:	2b03      	cmp	r3, #3
 80073be:	d10c      	bne.n	80073da <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80073c0:	4a17      	ldr	r2, [pc, #92]	; (8007420 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80073c2:	68fb      	ldr	r3, [r7, #12]
 80073c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80073c8:	4a14      	ldr	r2, [pc, #80]	; (800741c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80073ca:	68d2      	ldr	r2, [r2, #12]
 80073cc:	0a12      	lsrs	r2, r2, #8
 80073ce:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80073d2:	fb02 f303 	mul.w	r3, r2, r3
 80073d6:	617b      	str	r3, [r7, #20]
    break;
 80073d8:	e00c      	b.n	80073f4 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80073da:	4a12      	ldr	r2, [pc, #72]	; (8007424 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 80073dc:	68fb      	ldr	r3, [r7, #12]
 80073de:	fbb2 f3f3 	udiv	r3, r2, r3
 80073e2:	4a0e      	ldr	r2, [pc, #56]	; (800741c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80073e4:	68d2      	ldr	r2, [r2, #12]
 80073e6:	0a12      	lsrs	r2, r2, #8
 80073e8:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80073ec:	fb02 f303 	mul.w	r3, r2, r3
 80073f0:	617b      	str	r3, [r7, #20]
    break;
 80073f2:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80073f4:	4b09      	ldr	r3, [pc, #36]	; (800741c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80073f6:	68db      	ldr	r3, [r3, #12]
 80073f8:	0e5b      	lsrs	r3, r3, #25
 80073fa:	f003 0303 	and.w	r3, r3, #3
 80073fe:	3301      	adds	r3, #1
 8007400:	005b      	lsls	r3, r3, #1
 8007402:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8007404:	697a      	ldr	r2, [r7, #20]
 8007406:	68bb      	ldr	r3, [r7, #8]
 8007408:	fbb2 f3f3 	udiv	r3, r2, r3
 800740c:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800740e:	687b      	ldr	r3, [r7, #4]
}
 8007410:	4618      	mov	r0, r3
 8007412:	371c      	adds	r7, #28
 8007414:	46bd      	mov	sp, r7
 8007416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800741a:	4770      	bx	lr
 800741c:	40021000 	.word	0x40021000
 8007420:	016e3600 	.word	0x016e3600
 8007424:	00f42400 	.word	0x00f42400

08007428 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007428:	b580      	push	{r7, lr}
 800742a:	b086      	sub	sp, #24
 800742c:	af00      	add	r7, sp, #0
 800742e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8007430:	2300      	movs	r3, #0
 8007432:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8007434:	2300      	movs	r3, #0
 8007436:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007440:	2b00      	cmp	r3, #0
 8007442:	f000 8098 	beq.w	8007576 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007446:	2300      	movs	r3, #0
 8007448:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800744a:	4b43      	ldr	r3, [pc, #268]	; (8007558 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800744c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800744e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007452:	2b00      	cmp	r3, #0
 8007454:	d10d      	bne.n	8007472 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007456:	4b40      	ldr	r3, [pc, #256]	; (8007558 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007458:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800745a:	4a3f      	ldr	r2, [pc, #252]	; (8007558 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800745c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007460:	6593      	str	r3, [r2, #88]	; 0x58
 8007462:	4b3d      	ldr	r3, [pc, #244]	; (8007558 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007464:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007466:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800746a:	60bb      	str	r3, [r7, #8]
 800746c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800746e:	2301      	movs	r3, #1
 8007470:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007472:	4b3a      	ldr	r3, [pc, #232]	; (800755c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	4a39      	ldr	r2, [pc, #228]	; (800755c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8007478:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800747c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800747e:	f7fb ff89 	bl	8003394 <HAL_GetTick>
 8007482:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007484:	e009      	b.n	800749a <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007486:	f7fb ff85 	bl	8003394 <HAL_GetTick>
 800748a:	4602      	mov	r2, r0
 800748c:	68fb      	ldr	r3, [r7, #12]
 800748e:	1ad3      	subs	r3, r2, r3
 8007490:	2b02      	cmp	r3, #2
 8007492:	d902      	bls.n	800749a <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8007494:	2303      	movs	r3, #3
 8007496:	74fb      	strb	r3, [r7, #19]
        break;
 8007498:	e005      	b.n	80074a6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800749a:	4b30      	ldr	r3, [pc, #192]	; (800755c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80074a2:	2b00      	cmp	r3, #0
 80074a4:	d0ef      	beq.n	8007486 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 80074a6:	7cfb      	ldrb	r3, [r7, #19]
 80074a8:	2b00      	cmp	r3, #0
 80074aa:	d159      	bne.n	8007560 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80074ac:	4b2a      	ldr	r3, [pc, #168]	; (8007558 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80074ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80074b2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80074b6:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80074b8:	697b      	ldr	r3, [r7, #20]
 80074ba:	2b00      	cmp	r3, #0
 80074bc:	d01e      	beq.n	80074fc <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074c2:	697a      	ldr	r2, [r7, #20]
 80074c4:	429a      	cmp	r2, r3
 80074c6:	d019      	beq.n	80074fc <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80074c8:	4b23      	ldr	r3, [pc, #140]	; (8007558 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80074ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80074ce:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80074d2:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80074d4:	4b20      	ldr	r3, [pc, #128]	; (8007558 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80074d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80074da:	4a1f      	ldr	r2, [pc, #124]	; (8007558 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80074dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80074e0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80074e4:	4b1c      	ldr	r3, [pc, #112]	; (8007558 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80074e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80074ea:	4a1b      	ldr	r2, [pc, #108]	; (8007558 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80074ec:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80074f0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80074f4:	4a18      	ldr	r2, [pc, #96]	; (8007558 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80074f6:	697b      	ldr	r3, [r7, #20]
 80074f8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80074fc:	697b      	ldr	r3, [r7, #20]
 80074fe:	f003 0301 	and.w	r3, r3, #1
 8007502:	2b00      	cmp	r3, #0
 8007504:	d016      	beq.n	8007534 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007506:	f7fb ff45 	bl	8003394 <HAL_GetTick>
 800750a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800750c:	e00b      	b.n	8007526 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800750e:	f7fb ff41 	bl	8003394 <HAL_GetTick>
 8007512:	4602      	mov	r2, r0
 8007514:	68fb      	ldr	r3, [r7, #12]
 8007516:	1ad3      	subs	r3, r2, r3
 8007518:	f241 3288 	movw	r2, #5000	; 0x1388
 800751c:	4293      	cmp	r3, r2
 800751e:	d902      	bls.n	8007526 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8007520:	2303      	movs	r3, #3
 8007522:	74fb      	strb	r3, [r7, #19]
            break;
 8007524:	e006      	b.n	8007534 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007526:	4b0c      	ldr	r3, [pc, #48]	; (8007558 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007528:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800752c:	f003 0302 	and.w	r3, r3, #2
 8007530:	2b00      	cmp	r3, #0
 8007532:	d0ec      	beq.n	800750e <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8007534:	7cfb      	ldrb	r3, [r7, #19]
 8007536:	2b00      	cmp	r3, #0
 8007538:	d10b      	bne.n	8007552 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800753a:	4b07      	ldr	r3, [pc, #28]	; (8007558 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800753c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007540:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007548:	4903      	ldr	r1, [pc, #12]	; (8007558 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800754a:	4313      	orrs	r3, r2
 800754c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8007550:	e008      	b.n	8007564 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8007552:	7cfb      	ldrb	r3, [r7, #19]
 8007554:	74bb      	strb	r3, [r7, #18]
 8007556:	e005      	b.n	8007564 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8007558:	40021000 	.word	0x40021000
 800755c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007560:	7cfb      	ldrb	r3, [r7, #19]
 8007562:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8007564:	7c7b      	ldrb	r3, [r7, #17]
 8007566:	2b01      	cmp	r3, #1
 8007568:	d105      	bne.n	8007576 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800756a:	4ba6      	ldr	r3, [pc, #664]	; (8007804 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800756c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800756e:	4aa5      	ldr	r2, [pc, #660]	; (8007804 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007570:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007574:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	f003 0301 	and.w	r3, r3, #1
 800757e:	2b00      	cmp	r3, #0
 8007580:	d00a      	beq.n	8007598 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8007582:	4ba0      	ldr	r3, [pc, #640]	; (8007804 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007584:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007588:	f023 0203 	bic.w	r2, r3, #3
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	685b      	ldr	r3, [r3, #4]
 8007590:	499c      	ldr	r1, [pc, #624]	; (8007804 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007592:	4313      	orrs	r3, r2
 8007594:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	f003 0302 	and.w	r3, r3, #2
 80075a0:	2b00      	cmp	r3, #0
 80075a2:	d00a      	beq.n	80075ba <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80075a4:	4b97      	ldr	r3, [pc, #604]	; (8007804 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80075a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80075aa:	f023 020c 	bic.w	r2, r3, #12
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	689b      	ldr	r3, [r3, #8]
 80075b2:	4994      	ldr	r1, [pc, #592]	; (8007804 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80075b4:	4313      	orrs	r3, r2
 80075b6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	681b      	ldr	r3, [r3, #0]
 80075be:	f003 0304 	and.w	r3, r3, #4
 80075c2:	2b00      	cmp	r3, #0
 80075c4:	d00a      	beq.n	80075dc <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80075c6:	4b8f      	ldr	r3, [pc, #572]	; (8007804 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80075c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80075cc:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	68db      	ldr	r3, [r3, #12]
 80075d4:	498b      	ldr	r1, [pc, #556]	; (8007804 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80075d6:	4313      	orrs	r3, r2
 80075d8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	f003 0308 	and.w	r3, r3, #8
 80075e4:	2b00      	cmp	r3, #0
 80075e6:	d00a      	beq.n	80075fe <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80075e8:	4b86      	ldr	r3, [pc, #536]	; (8007804 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80075ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80075ee:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	691b      	ldr	r3, [r3, #16]
 80075f6:	4983      	ldr	r1, [pc, #524]	; (8007804 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80075f8:	4313      	orrs	r3, r2
 80075fa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	f003 0320 	and.w	r3, r3, #32
 8007606:	2b00      	cmp	r3, #0
 8007608:	d00a      	beq.n	8007620 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800760a:	4b7e      	ldr	r3, [pc, #504]	; (8007804 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800760c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007610:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	695b      	ldr	r3, [r3, #20]
 8007618:	497a      	ldr	r1, [pc, #488]	; (8007804 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800761a:	4313      	orrs	r3, r2
 800761c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007628:	2b00      	cmp	r3, #0
 800762a:	d00a      	beq.n	8007642 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800762c:	4b75      	ldr	r3, [pc, #468]	; (8007804 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800762e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007632:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	699b      	ldr	r3, [r3, #24]
 800763a:	4972      	ldr	r1, [pc, #456]	; (8007804 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800763c:	4313      	orrs	r3, r2
 800763e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800764a:	2b00      	cmp	r3, #0
 800764c:	d00a      	beq.n	8007664 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800764e:	4b6d      	ldr	r3, [pc, #436]	; (8007804 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007650:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007654:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	69db      	ldr	r3, [r3, #28]
 800765c:	4969      	ldr	r1, [pc, #420]	; (8007804 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800765e:	4313      	orrs	r3, r2
 8007660:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800766c:	2b00      	cmp	r3, #0
 800766e:	d00a      	beq.n	8007686 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8007670:	4b64      	ldr	r3, [pc, #400]	; (8007804 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007672:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007676:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	6a1b      	ldr	r3, [r3, #32]
 800767e:	4961      	ldr	r1, [pc, #388]	; (8007804 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007680:	4313      	orrs	r3, r2
 8007682:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800768e:	2b00      	cmp	r3, #0
 8007690:	d00a      	beq.n	80076a8 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007692:	4b5c      	ldr	r3, [pc, #368]	; (8007804 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007694:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007698:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076a0:	4958      	ldr	r1, [pc, #352]	; (8007804 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80076a2:	4313      	orrs	r3, r2
 80076a4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80076b0:	2b00      	cmp	r3, #0
 80076b2:	d015      	beq.n	80076e0 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80076b4:	4b53      	ldr	r3, [pc, #332]	; (8007804 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80076b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80076ba:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80076c2:	4950      	ldr	r1, [pc, #320]	; (8007804 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80076c4:	4313      	orrs	r3, r2
 80076c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80076ce:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80076d2:	d105      	bne.n	80076e0 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80076d4:	4b4b      	ldr	r3, [pc, #300]	; (8007804 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80076d6:	68db      	ldr	r3, [r3, #12]
 80076d8:	4a4a      	ldr	r2, [pc, #296]	; (8007804 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80076da:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80076de:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80076e8:	2b00      	cmp	r3, #0
 80076ea:	d015      	beq.n	8007718 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80076ec:	4b45      	ldr	r3, [pc, #276]	; (8007804 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80076ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80076f2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076fa:	4942      	ldr	r1, [pc, #264]	; (8007804 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80076fc:	4313      	orrs	r3, r2
 80076fe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007706:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800770a:	d105      	bne.n	8007718 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800770c:	4b3d      	ldr	r3, [pc, #244]	; (8007804 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800770e:	68db      	ldr	r3, [r3, #12]
 8007710:	4a3c      	ldr	r2, [pc, #240]	; (8007804 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007712:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007716:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007720:	2b00      	cmp	r3, #0
 8007722:	d015      	beq.n	8007750 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8007724:	4b37      	ldr	r3, [pc, #220]	; (8007804 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007726:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800772a:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007732:	4934      	ldr	r1, [pc, #208]	; (8007804 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007734:	4313      	orrs	r3, r2
 8007736:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800773e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8007742:	d105      	bne.n	8007750 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007744:	4b2f      	ldr	r3, [pc, #188]	; (8007804 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007746:	68db      	ldr	r3, [r3, #12]
 8007748:	4a2e      	ldr	r2, [pc, #184]	; (8007804 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800774a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800774e:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	681b      	ldr	r3, [r3, #0]
 8007754:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007758:	2b00      	cmp	r3, #0
 800775a:	d015      	beq.n	8007788 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800775c:	4b29      	ldr	r3, [pc, #164]	; (8007804 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800775e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007762:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800776a:	4926      	ldr	r1, [pc, #152]	; (8007804 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800776c:	4313      	orrs	r3, r2
 800776e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007776:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800777a:	d105      	bne.n	8007788 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800777c:	4b21      	ldr	r3, [pc, #132]	; (8007804 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800777e:	68db      	ldr	r3, [r3, #12]
 8007780:	4a20      	ldr	r2, [pc, #128]	; (8007804 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007782:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007786:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007790:	2b00      	cmp	r3, #0
 8007792:	d015      	beq.n	80077c0 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8007794:	4b1b      	ldr	r3, [pc, #108]	; (8007804 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007796:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800779a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80077a2:	4918      	ldr	r1, [pc, #96]	; (8007804 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80077a4:	4313      	orrs	r3, r2
 80077a6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80077ae:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80077b2:	d105      	bne.n	80077c0 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80077b4:	4b13      	ldr	r3, [pc, #76]	; (8007804 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80077b6:	68db      	ldr	r3, [r3, #12]
 80077b8:	4a12      	ldr	r2, [pc, #72]	; (8007804 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80077ba:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80077be:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80077c8:	2b00      	cmp	r3, #0
 80077ca:	d015      	beq.n	80077f8 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80077cc:	4b0d      	ldr	r3, [pc, #52]	; (8007804 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80077ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80077d2:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80077da:	490a      	ldr	r1, [pc, #40]	; (8007804 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80077dc:	4313      	orrs	r3, r2
 80077de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80077e6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80077ea:	d105      	bne.n	80077f8 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80077ec:	4b05      	ldr	r3, [pc, #20]	; (8007804 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80077ee:	68db      	ldr	r3, [r3, #12]
 80077f0:	4a04      	ldr	r2, [pc, #16]	; (8007804 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80077f2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80077f6:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 80077f8:	7cbb      	ldrb	r3, [r7, #18]
}
 80077fa:	4618      	mov	r0, r3
 80077fc:	3718      	adds	r7, #24
 80077fe:	46bd      	mov	sp, r7
 8007800:	bd80      	pop	{r7, pc}
 8007802:	bf00      	nop
 8007804:	40021000 	.word	0x40021000

08007808 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007808:	b580      	push	{r7, lr}
 800780a:	b084      	sub	sp, #16
 800780c:	af00      	add	r7, sp, #0
 800780e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	2b00      	cmp	r3, #0
 8007814:	d101      	bne.n	800781a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8007816:	2301      	movs	r3, #1
 8007818:	e09d      	b.n	8007956 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800781e:	2b00      	cmp	r3, #0
 8007820:	d108      	bne.n	8007834 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	685b      	ldr	r3, [r3, #4]
 8007826:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800782a:	d009      	beq.n	8007840 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	2200      	movs	r2, #0
 8007830:	61da      	str	r2, [r3, #28]
 8007832:	e005      	b.n	8007840 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	2200      	movs	r2, #0
 8007838:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	2200      	movs	r2, #0
 800783e:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	2200      	movs	r2, #0
 8007844:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800784c:	b2db      	uxtb	r3, r3
 800784e:	2b00      	cmp	r3, #0
 8007850:	d106      	bne.n	8007860 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	2200      	movs	r2, #0
 8007856:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800785a:	6878      	ldr	r0, [r7, #4]
 800785c:	f7fb f8b0 	bl	80029c0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	2202      	movs	r2, #2
 8007864:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	681b      	ldr	r3, [r3, #0]
 800786c:	681a      	ldr	r2, [r3, #0]
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	681b      	ldr	r3, [r3, #0]
 8007872:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007876:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	68db      	ldr	r3, [r3, #12]
 800787c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8007880:	d902      	bls.n	8007888 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8007882:	2300      	movs	r3, #0
 8007884:	60fb      	str	r3, [r7, #12]
 8007886:	e002      	b.n	800788e <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8007888:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800788c:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	68db      	ldr	r3, [r3, #12]
 8007892:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8007896:	d007      	beq.n	80078a8 <HAL_SPI_Init+0xa0>
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	68db      	ldr	r3, [r3, #12]
 800789c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80078a0:	d002      	beq.n	80078a8 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	2200      	movs	r2, #0
 80078a6:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	685b      	ldr	r3, [r3, #4]
 80078ac:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	689b      	ldr	r3, [r3, #8]
 80078b4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80078b8:	431a      	orrs	r2, r3
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	691b      	ldr	r3, [r3, #16]
 80078be:	f003 0302 	and.w	r3, r3, #2
 80078c2:	431a      	orrs	r2, r3
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	695b      	ldr	r3, [r3, #20]
 80078c8:	f003 0301 	and.w	r3, r3, #1
 80078cc:	431a      	orrs	r2, r3
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	699b      	ldr	r3, [r3, #24]
 80078d2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80078d6:	431a      	orrs	r2, r3
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	69db      	ldr	r3, [r3, #28]
 80078dc:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80078e0:	431a      	orrs	r2, r3
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	6a1b      	ldr	r3, [r3, #32]
 80078e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80078ea:	ea42 0103 	orr.w	r1, r2, r3
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80078f2:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	681b      	ldr	r3, [r3, #0]
 80078fa:	430a      	orrs	r2, r1
 80078fc:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	699b      	ldr	r3, [r3, #24]
 8007902:	0c1b      	lsrs	r3, r3, #16
 8007904:	f003 0204 	and.w	r2, r3, #4
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800790c:	f003 0310 	and.w	r3, r3, #16
 8007910:	431a      	orrs	r2, r3
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007916:	f003 0308 	and.w	r3, r3, #8
 800791a:	431a      	orrs	r2, r3
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	68db      	ldr	r3, [r3, #12]
 8007920:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8007924:	ea42 0103 	orr.w	r1, r2, r3
 8007928:	68fb      	ldr	r3, [r7, #12]
 800792a:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	681b      	ldr	r3, [r3, #0]
 8007932:	430a      	orrs	r2, r1
 8007934:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	681b      	ldr	r3, [r3, #0]
 800793a:	69da      	ldr	r2, [r3, #28]
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007944:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	2200      	movs	r2, #0
 800794a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	2201      	movs	r2, #1
 8007950:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8007954:	2300      	movs	r3, #0
}
 8007956:	4618      	mov	r0, r3
 8007958:	3710      	adds	r7, #16
 800795a:	46bd      	mov	sp, r7
 800795c:	bd80      	pop	{r7, pc}

0800795e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800795e:	b580      	push	{r7, lr}
 8007960:	b088      	sub	sp, #32
 8007962:	af00      	add	r7, sp, #0
 8007964:	60f8      	str	r0, [r7, #12]
 8007966:	60b9      	str	r1, [r7, #8]
 8007968:	603b      	str	r3, [r7, #0]
 800796a:	4613      	mov	r3, r2
 800796c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800796e:	2300      	movs	r3, #0
 8007970:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007972:	68fb      	ldr	r3, [r7, #12]
 8007974:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8007978:	2b01      	cmp	r3, #1
 800797a:	d101      	bne.n	8007980 <HAL_SPI_Transmit+0x22>
 800797c:	2302      	movs	r3, #2
 800797e:	e158      	b.n	8007c32 <HAL_SPI_Transmit+0x2d4>
 8007980:	68fb      	ldr	r3, [r7, #12]
 8007982:	2201      	movs	r2, #1
 8007984:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007988:	f7fb fd04 	bl	8003394 <HAL_GetTick>
 800798c:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800798e:	88fb      	ldrh	r3, [r7, #6]
 8007990:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8007992:	68fb      	ldr	r3, [r7, #12]
 8007994:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8007998:	b2db      	uxtb	r3, r3
 800799a:	2b01      	cmp	r3, #1
 800799c:	d002      	beq.n	80079a4 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800799e:	2302      	movs	r3, #2
 80079a0:	77fb      	strb	r3, [r7, #31]
    goto error;
 80079a2:	e13d      	b.n	8007c20 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 80079a4:	68bb      	ldr	r3, [r7, #8]
 80079a6:	2b00      	cmp	r3, #0
 80079a8:	d002      	beq.n	80079b0 <HAL_SPI_Transmit+0x52>
 80079aa:	88fb      	ldrh	r3, [r7, #6]
 80079ac:	2b00      	cmp	r3, #0
 80079ae:	d102      	bne.n	80079b6 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80079b0:	2301      	movs	r3, #1
 80079b2:	77fb      	strb	r3, [r7, #31]
    goto error;
 80079b4:	e134      	b.n	8007c20 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80079b6:	68fb      	ldr	r3, [r7, #12]
 80079b8:	2203      	movs	r2, #3
 80079ba:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80079be:	68fb      	ldr	r3, [r7, #12]
 80079c0:	2200      	movs	r2, #0
 80079c2:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80079c4:	68fb      	ldr	r3, [r7, #12]
 80079c6:	68ba      	ldr	r2, [r7, #8]
 80079c8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 80079ca:	68fb      	ldr	r3, [r7, #12]
 80079cc:	88fa      	ldrh	r2, [r7, #6]
 80079ce:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 80079d0:	68fb      	ldr	r3, [r7, #12]
 80079d2:	88fa      	ldrh	r2, [r7, #6]
 80079d4:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80079d6:	68fb      	ldr	r3, [r7, #12]
 80079d8:	2200      	movs	r2, #0
 80079da:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 80079dc:	68fb      	ldr	r3, [r7, #12]
 80079de:	2200      	movs	r2, #0
 80079e0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 80079e4:	68fb      	ldr	r3, [r7, #12]
 80079e6:	2200      	movs	r2, #0
 80079e8:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 80079ec:	68fb      	ldr	r3, [r7, #12]
 80079ee:	2200      	movs	r2, #0
 80079f0:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 80079f2:	68fb      	ldr	r3, [r7, #12]
 80079f4:	2200      	movs	r2, #0
 80079f6:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80079f8:	68fb      	ldr	r3, [r7, #12]
 80079fa:	689b      	ldr	r3, [r3, #8]
 80079fc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007a00:	d10f      	bne.n	8007a22 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8007a02:	68fb      	ldr	r3, [r7, #12]
 8007a04:	681b      	ldr	r3, [r3, #0]
 8007a06:	681a      	ldr	r2, [r3, #0]
 8007a08:	68fb      	ldr	r3, [r7, #12]
 8007a0a:	681b      	ldr	r3, [r3, #0]
 8007a0c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007a10:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8007a12:	68fb      	ldr	r3, [r7, #12]
 8007a14:	681b      	ldr	r3, [r3, #0]
 8007a16:	681a      	ldr	r2, [r3, #0]
 8007a18:	68fb      	ldr	r3, [r7, #12]
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007a20:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007a22:	68fb      	ldr	r3, [r7, #12]
 8007a24:	681b      	ldr	r3, [r3, #0]
 8007a26:	681b      	ldr	r3, [r3, #0]
 8007a28:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007a2c:	2b40      	cmp	r3, #64	; 0x40
 8007a2e:	d007      	beq.n	8007a40 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007a30:	68fb      	ldr	r3, [r7, #12]
 8007a32:	681b      	ldr	r3, [r3, #0]
 8007a34:	681a      	ldr	r2, [r3, #0]
 8007a36:	68fb      	ldr	r3, [r7, #12]
 8007a38:	681b      	ldr	r3, [r3, #0]
 8007a3a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007a3e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007a40:	68fb      	ldr	r3, [r7, #12]
 8007a42:	68db      	ldr	r3, [r3, #12]
 8007a44:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8007a48:	d94b      	bls.n	8007ae2 <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007a4a:	68fb      	ldr	r3, [r7, #12]
 8007a4c:	685b      	ldr	r3, [r3, #4]
 8007a4e:	2b00      	cmp	r3, #0
 8007a50:	d002      	beq.n	8007a58 <HAL_SPI_Transmit+0xfa>
 8007a52:	8afb      	ldrh	r3, [r7, #22]
 8007a54:	2b01      	cmp	r3, #1
 8007a56:	d13e      	bne.n	8007ad6 <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007a58:	68fb      	ldr	r3, [r7, #12]
 8007a5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a5c:	881a      	ldrh	r2, [r3, #0]
 8007a5e:	68fb      	ldr	r3, [r7, #12]
 8007a60:	681b      	ldr	r3, [r3, #0]
 8007a62:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007a64:	68fb      	ldr	r3, [r7, #12]
 8007a66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a68:	1c9a      	adds	r2, r3, #2
 8007a6a:	68fb      	ldr	r3, [r7, #12]
 8007a6c:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8007a6e:	68fb      	ldr	r3, [r7, #12]
 8007a70:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007a72:	b29b      	uxth	r3, r3
 8007a74:	3b01      	subs	r3, #1
 8007a76:	b29a      	uxth	r2, r3
 8007a78:	68fb      	ldr	r3, [r7, #12]
 8007a7a:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8007a7c:	e02b      	b.n	8007ad6 <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007a7e:	68fb      	ldr	r3, [r7, #12]
 8007a80:	681b      	ldr	r3, [r3, #0]
 8007a82:	689b      	ldr	r3, [r3, #8]
 8007a84:	f003 0302 	and.w	r3, r3, #2
 8007a88:	2b02      	cmp	r3, #2
 8007a8a:	d112      	bne.n	8007ab2 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007a8c:	68fb      	ldr	r3, [r7, #12]
 8007a8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a90:	881a      	ldrh	r2, [r3, #0]
 8007a92:	68fb      	ldr	r3, [r7, #12]
 8007a94:	681b      	ldr	r3, [r3, #0]
 8007a96:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007a98:	68fb      	ldr	r3, [r7, #12]
 8007a9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a9c:	1c9a      	adds	r2, r3, #2
 8007a9e:	68fb      	ldr	r3, [r7, #12]
 8007aa0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8007aa2:	68fb      	ldr	r3, [r7, #12]
 8007aa4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007aa6:	b29b      	uxth	r3, r3
 8007aa8:	3b01      	subs	r3, #1
 8007aaa:	b29a      	uxth	r2, r3
 8007aac:	68fb      	ldr	r3, [r7, #12]
 8007aae:	87da      	strh	r2, [r3, #62]	; 0x3e
 8007ab0:	e011      	b.n	8007ad6 <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007ab2:	f7fb fc6f 	bl	8003394 <HAL_GetTick>
 8007ab6:	4602      	mov	r2, r0
 8007ab8:	69bb      	ldr	r3, [r7, #24]
 8007aba:	1ad3      	subs	r3, r2, r3
 8007abc:	683a      	ldr	r2, [r7, #0]
 8007abe:	429a      	cmp	r2, r3
 8007ac0:	d803      	bhi.n	8007aca <HAL_SPI_Transmit+0x16c>
 8007ac2:	683b      	ldr	r3, [r7, #0]
 8007ac4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007ac8:	d102      	bne.n	8007ad0 <HAL_SPI_Transmit+0x172>
 8007aca:	683b      	ldr	r3, [r7, #0]
 8007acc:	2b00      	cmp	r3, #0
 8007ace:	d102      	bne.n	8007ad6 <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 8007ad0:	2303      	movs	r3, #3
 8007ad2:	77fb      	strb	r3, [r7, #31]
          goto error;
 8007ad4:	e0a4      	b.n	8007c20 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8007ad6:	68fb      	ldr	r3, [r7, #12]
 8007ad8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007ada:	b29b      	uxth	r3, r3
 8007adc:	2b00      	cmp	r3, #0
 8007ade:	d1ce      	bne.n	8007a7e <HAL_SPI_Transmit+0x120>
 8007ae0:	e07c      	b.n	8007bdc <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007ae2:	68fb      	ldr	r3, [r7, #12]
 8007ae4:	685b      	ldr	r3, [r3, #4]
 8007ae6:	2b00      	cmp	r3, #0
 8007ae8:	d002      	beq.n	8007af0 <HAL_SPI_Transmit+0x192>
 8007aea:	8afb      	ldrh	r3, [r7, #22]
 8007aec:	2b01      	cmp	r3, #1
 8007aee:	d170      	bne.n	8007bd2 <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 8007af0:	68fb      	ldr	r3, [r7, #12]
 8007af2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007af4:	b29b      	uxth	r3, r3
 8007af6:	2b01      	cmp	r3, #1
 8007af8:	d912      	bls.n	8007b20 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007afa:	68fb      	ldr	r3, [r7, #12]
 8007afc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007afe:	881a      	ldrh	r2, [r3, #0]
 8007b00:	68fb      	ldr	r3, [r7, #12]
 8007b02:	681b      	ldr	r3, [r3, #0]
 8007b04:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007b06:	68fb      	ldr	r3, [r7, #12]
 8007b08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b0a:	1c9a      	adds	r2, r3, #2
 8007b0c:	68fb      	ldr	r3, [r7, #12]
 8007b0e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8007b10:	68fb      	ldr	r3, [r7, #12]
 8007b12:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007b14:	b29b      	uxth	r3, r3
 8007b16:	3b02      	subs	r3, #2
 8007b18:	b29a      	uxth	r2, r3
 8007b1a:	68fb      	ldr	r3, [r7, #12]
 8007b1c:	87da      	strh	r2, [r3, #62]	; 0x3e
 8007b1e:	e058      	b.n	8007bd2 <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007b20:	68fb      	ldr	r3, [r7, #12]
 8007b22:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007b24:	68fb      	ldr	r3, [r7, #12]
 8007b26:	681b      	ldr	r3, [r3, #0]
 8007b28:	330c      	adds	r3, #12
 8007b2a:	7812      	ldrb	r2, [r2, #0]
 8007b2c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8007b2e:	68fb      	ldr	r3, [r7, #12]
 8007b30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b32:	1c5a      	adds	r2, r3, #1
 8007b34:	68fb      	ldr	r3, [r7, #12]
 8007b36:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8007b38:	68fb      	ldr	r3, [r7, #12]
 8007b3a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007b3c:	b29b      	uxth	r3, r3
 8007b3e:	3b01      	subs	r3, #1
 8007b40:	b29a      	uxth	r2, r3
 8007b42:	68fb      	ldr	r3, [r7, #12]
 8007b44:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8007b46:	e044      	b.n	8007bd2 <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007b48:	68fb      	ldr	r3, [r7, #12]
 8007b4a:	681b      	ldr	r3, [r3, #0]
 8007b4c:	689b      	ldr	r3, [r3, #8]
 8007b4e:	f003 0302 	and.w	r3, r3, #2
 8007b52:	2b02      	cmp	r3, #2
 8007b54:	d12b      	bne.n	8007bae <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 8007b56:	68fb      	ldr	r3, [r7, #12]
 8007b58:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007b5a:	b29b      	uxth	r3, r3
 8007b5c:	2b01      	cmp	r3, #1
 8007b5e:	d912      	bls.n	8007b86 <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007b60:	68fb      	ldr	r3, [r7, #12]
 8007b62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b64:	881a      	ldrh	r2, [r3, #0]
 8007b66:	68fb      	ldr	r3, [r7, #12]
 8007b68:	681b      	ldr	r3, [r3, #0]
 8007b6a:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8007b6c:	68fb      	ldr	r3, [r7, #12]
 8007b6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b70:	1c9a      	adds	r2, r3, #2
 8007b72:	68fb      	ldr	r3, [r7, #12]
 8007b74:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8007b76:	68fb      	ldr	r3, [r7, #12]
 8007b78:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007b7a:	b29b      	uxth	r3, r3
 8007b7c:	3b02      	subs	r3, #2
 8007b7e:	b29a      	uxth	r2, r3
 8007b80:	68fb      	ldr	r3, [r7, #12]
 8007b82:	87da      	strh	r2, [r3, #62]	; 0x3e
 8007b84:	e025      	b.n	8007bd2 <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007b86:	68fb      	ldr	r3, [r7, #12]
 8007b88:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007b8a:	68fb      	ldr	r3, [r7, #12]
 8007b8c:	681b      	ldr	r3, [r3, #0]
 8007b8e:	330c      	adds	r3, #12
 8007b90:	7812      	ldrb	r2, [r2, #0]
 8007b92:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8007b94:	68fb      	ldr	r3, [r7, #12]
 8007b96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b98:	1c5a      	adds	r2, r3, #1
 8007b9a:	68fb      	ldr	r3, [r7, #12]
 8007b9c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8007b9e:	68fb      	ldr	r3, [r7, #12]
 8007ba0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007ba2:	b29b      	uxth	r3, r3
 8007ba4:	3b01      	subs	r3, #1
 8007ba6:	b29a      	uxth	r2, r3
 8007ba8:	68fb      	ldr	r3, [r7, #12]
 8007baa:	87da      	strh	r2, [r3, #62]	; 0x3e
 8007bac:	e011      	b.n	8007bd2 <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007bae:	f7fb fbf1 	bl	8003394 <HAL_GetTick>
 8007bb2:	4602      	mov	r2, r0
 8007bb4:	69bb      	ldr	r3, [r7, #24]
 8007bb6:	1ad3      	subs	r3, r2, r3
 8007bb8:	683a      	ldr	r2, [r7, #0]
 8007bba:	429a      	cmp	r2, r3
 8007bbc:	d803      	bhi.n	8007bc6 <HAL_SPI_Transmit+0x268>
 8007bbe:	683b      	ldr	r3, [r7, #0]
 8007bc0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007bc4:	d102      	bne.n	8007bcc <HAL_SPI_Transmit+0x26e>
 8007bc6:	683b      	ldr	r3, [r7, #0]
 8007bc8:	2b00      	cmp	r3, #0
 8007bca:	d102      	bne.n	8007bd2 <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 8007bcc:	2303      	movs	r3, #3
 8007bce:	77fb      	strb	r3, [r7, #31]
          goto error;
 8007bd0:	e026      	b.n	8007c20 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8007bd2:	68fb      	ldr	r3, [r7, #12]
 8007bd4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007bd6:	b29b      	uxth	r3, r3
 8007bd8:	2b00      	cmp	r3, #0
 8007bda:	d1b5      	bne.n	8007b48 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007bdc:	69ba      	ldr	r2, [r7, #24]
 8007bde:	6839      	ldr	r1, [r7, #0]
 8007be0:	68f8      	ldr	r0, [r7, #12]
 8007be2:	f000 fce3 	bl	80085ac <SPI_EndRxTxTransaction>
 8007be6:	4603      	mov	r3, r0
 8007be8:	2b00      	cmp	r3, #0
 8007bea:	d002      	beq.n	8007bf2 <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007bec:	68fb      	ldr	r3, [r7, #12]
 8007bee:	2220      	movs	r2, #32
 8007bf0:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007bf2:	68fb      	ldr	r3, [r7, #12]
 8007bf4:	689b      	ldr	r3, [r3, #8]
 8007bf6:	2b00      	cmp	r3, #0
 8007bf8:	d10a      	bne.n	8007c10 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007bfa:	2300      	movs	r3, #0
 8007bfc:	613b      	str	r3, [r7, #16]
 8007bfe:	68fb      	ldr	r3, [r7, #12]
 8007c00:	681b      	ldr	r3, [r3, #0]
 8007c02:	68db      	ldr	r3, [r3, #12]
 8007c04:	613b      	str	r3, [r7, #16]
 8007c06:	68fb      	ldr	r3, [r7, #12]
 8007c08:	681b      	ldr	r3, [r3, #0]
 8007c0a:	689b      	ldr	r3, [r3, #8]
 8007c0c:	613b      	str	r3, [r7, #16]
 8007c0e:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007c10:	68fb      	ldr	r3, [r7, #12]
 8007c12:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007c14:	2b00      	cmp	r3, #0
 8007c16:	d002      	beq.n	8007c1e <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 8007c18:	2301      	movs	r3, #1
 8007c1a:	77fb      	strb	r3, [r7, #31]
 8007c1c:	e000      	b.n	8007c20 <HAL_SPI_Transmit+0x2c2>
  }

error:
 8007c1e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8007c20:	68fb      	ldr	r3, [r7, #12]
 8007c22:	2201      	movs	r2, #1
 8007c24:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8007c28:	68fb      	ldr	r3, [r7, #12]
 8007c2a:	2200      	movs	r2, #0
 8007c2c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8007c30:	7ffb      	ldrb	r3, [r7, #31]
}
 8007c32:	4618      	mov	r0, r3
 8007c34:	3720      	adds	r7, #32
 8007c36:	46bd      	mov	sp, r7
 8007c38:	bd80      	pop	{r7, pc}

08007c3a <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007c3a:	b580      	push	{r7, lr}
 8007c3c:	b088      	sub	sp, #32
 8007c3e:	af02      	add	r7, sp, #8
 8007c40:	60f8      	str	r0, [r7, #12]
 8007c42:	60b9      	str	r1, [r7, #8]
 8007c44:	603b      	str	r3, [r7, #0]
 8007c46:	4613      	mov	r3, r2
 8007c48:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8007c4a:	2300      	movs	r3, #0
 8007c4c:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8007c4e:	68fb      	ldr	r3, [r7, #12]
 8007c50:	685b      	ldr	r3, [r3, #4]
 8007c52:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007c56:	d112      	bne.n	8007c7e <HAL_SPI_Receive+0x44>
 8007c58:	68fb      	ldr	r3, [r7, #12]
 8007c5a:	689b      	ldr	r3, [r3, #8]
 8007c5c:	2b00      	cmp	r3, #0
 8007c5e:	d10e      	bne.n	8007c7e <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8007c60:	68fb      	ldr	r3, [r7, #12]
 8007c62:	2204      	movs	r2, #4
 8007c64:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8007c68:	88fa      	ldrh	r2, [r7, #6]
 8007c6a:	683b      	ldr	r3, [r7, #0]
 8007c6c:	9300      	str	r3, [sp, #0]
 8007c6e:	4613      	mov	r3, r2
 8007c70:	68ba      	ldr	r2, [r7, #8]
 8007c72:	68b9      	ldr	r1, [r7, #8]
 8007c74:	68f8      	ldr	r0, [r7, #12]
 8007c76:	f000 f910 	bl	8007e9a <HAL_SPI_TransmitReceive>
 8007c7a:	4603      	mov	r3, r0
 8007c7c:	e109      	b.n	8007e92 <HAL_SPI_Receive+0x258>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007c7e:	68fb      	ldr	r3, [r7, #12]
 8007c80:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8007c84:	2b01      	cmp	r3, #1
 8007c86:	d101      	bne.n	8007c8c <HAL_SPI_Receive+0x52>
 8007c88:	2302      	movs	r3, #2
 8007c8a:	e102      	b.n	8007e92 <HAL_SPI_Receive+0x258>
 8007c8c:	68fb      	ldr	r3, [r7, #12]
 8007c8e:	2201      	movs	r2, #1
 8007c90:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007c94:	f7fb fb7e 	bl	8003394 <HAL_GetTick>
 8007c98:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8007c9a:	68fb      	ldr	r3, [r7, #12]
 8007c9c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8007ca0:	b2db      	uxtb	r3, r3
 8007ca2:	2b01      	cmp	r3, #1
 8007ca4:	d002      	beq.n	8007cac <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8007ca6:	2302      	movs	r3, #2
 8007ca8:	75fb      	strb	r3, [r7, #23]
    goto error;
 8007caa:	e0e9      	b.n	8007e80 <HAL_SPI_Receive+0x246>
  }

  if ((pData == NULL) || (Size == 0U))
 8007cac:	68bb      	ldr	r3, [r7, #8]
 8007cae:	2b00      	cmp	r3, #0
 8007cb0:	d002      	beq.n	8007cb8 <HAL_SPI_Receive+0x7e>
 8007cb2:	88fb      	ldrh	r3, [r7, #6]
 8007cb4:	2b00      	cmp	r3, #0
 8007cb6:	d102      	bne.n	8007cbe <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8007cb8:	2301      	movs	r3, #1
 8007cba:	75fb      	strb	r3, [r7, #23]
    goto error;
 8007cbc:	e0e0      	b.n	8007e80 <HAL_SPI_Receive+0x246>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8007cbe:	68fb      	ldr	r3, [r7, #12]
 8007cc0:	2204      	movs	r2, #4
 8007cc2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007cc6:	68fb      	ldr	r3, [r7, #12]
 8007cc8:	2200      	movs	r2, #0
 8007cca:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8007ccc:	68fb      	ldr	r3, [r7, #12]
 8007cce:	68ba      	ldr	r2, [r7, #8]
 8007cd0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8007cd2:	68fb      	ldr	r3, [r7, #12]
 8007cd4:	88fa      	ldrh	r2, [r7, #6]
 8007cd6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8007cda:	68fb      	ldr	r3, [r7, #12]
 8007cdc:	88fa      	ldrh	r2, [r7, #6]
 8007cde:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8007ce2:	68fb      	ldr	r3, [r7, #12]
 8007ce4:	2200      	movs	r2, #0
 8007ce6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8007ce8:	68fb      	ldr	r3, [r7, #12]
 8007cea:	2200      	movs	r2, #0
 8007cec:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8007cee:	68fb      	ldr	r3, [r7, #12]
 8007cf0:	2200      	movs	r2, #0
 8007cf2:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8007cf4:	68fb      	ldr	r3, [r7, #12]
 8007cf6:	2200      	movs	r2, #0
 8007cf8:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8007cfa:	68fb      	ldr	r3, [r7, #12]
 8007cfc:	2200      	movs	r2, #0
 8007cfe:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007d00:	68fb      	ldr	r3, [r7, #12]
 8007d02:	68db      	ldr	r3, [r3, #12]
 8007d04:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8007d08:	d908      	bls.n	8007d1c <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007d0a:	68fb      	ldr	r3, [r7, #12]
 8007d0c:	681b      	ldr	r3, [r3, #0]
 8007d0e:	685a      	ldr	r2, [r3, #4]
 8007d10:	68fb      	ldr	r3, [r7, #12]
 8007d12:	681b      	ldr	r3, [r3, #0]
 8007d14:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8007d18:	605a      	str	r2, [r3, #4]
 8007d1a:	e007      	b.n	8007d2c <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007d1c:	68fb      	ldr	r3, [r7, #12]
 8007d1e:	681b      	ldr	r3, [r3, #0]
 8007d20:	685a      	ldr	r2, [r3, #4]
 8007d22:	68fb      	ldr	r3, [r7, #12]
 8007d24:	681b      	ldr	r3, [r3, #0]
 8007d26:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007d2a:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007d2c:	68fb      	ldr	r3, [r7, #12]
 8007d2e:	689b      	ldr	r3, [r3, #8]
 8007d30:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007d34:	d10f      	bne.n	8007d56 <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8007d36:	68fb      	ldr	r3, [r7, #12]
 8007d38:	681b      	ldr	r3, [r3, #0]
 8007d3a:	681a      	ldr	r2, [r3, #0]
 8007d3c:	68fb      	ldr	r3, [r7, #12]
 8007d3e:	681b      	ldr	r3, [r3, #0]
 8007d40:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007d44:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8007d46:	68fb      	ldr	r3, [r7, #12]
 8007d48:	681b      	ldr	r3, [r3, #0]
 8007d4a:	681a      	ldr	r2, [r3, #0]
 8007d4c:	68fb      	ldr	r3, [r7, #12]
 8007d4e:	681b      	ldr	r3, [r3, #0]
 8007d50:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8007d54:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007d56:	68fb      	ldr	r3, [r7, #12]
 8007d58:	681b      	ldr	r3, [r3, #0]
 8007d5a:	681b      	ldr	r3, [r3, #0]
 8007d5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007d60:	2b40      	cmp	r3, #64	; 0x40
 8007d62:	d007      	beq.n	8007d74 <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007d64:	68fb      	ldr	r3, [r7, #12]
 8007d66:	681b      	ldr	r3, [r3, #0]
 8007d68:	681a      	ldr	r2, [r3, #0]
 8007d6a:	68fb      	ldr	r3, [r7, #12]
 8007d6c:	681b      	ldr	r3, [r3, #0]
 8007d6e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007d72:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8007d74:	68fb      	ldr	r3, [r7, #12]
 8007d76:	68db      	ldr	r3, [r3, #12]
 8007d78:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8007d7c:	d867      	bhi.n	8007e4e <HAL_SPI_Receive+0x214>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8007d7e:	e030      	b.n	8007de2 <HAL_SPI_Receive+0x1a8>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8007d80:	68fb      	ldr	r3, [r7, #12]
 8007d82:	681b      	ldr	r3, [r3, #0]
 8007d84:	689b      	ldr	r3, [r3, #8]
 8007d86:	f003 0301 	and.w	r3, r3, #1
 8007d8a:	2b01      	cmp	r3, #1
 8007d8c:	d117      	bne.n	8007dbe <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8007d8e:	68fb      	ldr	r3, [r7, #12]
 8007d90:	681b      	ldr	r3, [r3, #0]
 8007d92:	f103 020c 	add.w	r2, r3, #12
 8007d96:	68fb      	ldr	r3, [r7, #12]
 8007d98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d9a:	7812      	ldrb	r2, [r2, #0]
 8007d9c:	b2d2      	uxtb	r2, r2
 8007d9e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8007da0:	68fb      	ldr	r3, [r7, #12]
 8007da2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007da4:	1c5a      	adds	r2, r3, #1
 8007da6:	68fb      	ldr	r3, [r7, #12]
 8007da8:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8007daa:	68fb      	ldr	r3, [r7, #12]
 8007dac:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007db0:	b29b      	uxth	r3, r3
 8007db2:	3b01      	subs	r3, #1
 8007db4:	b29a      	uxth	r2, r3
 8007db6:	68fb      	ldr	r3, [r7, #12]
 8007db8:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8007dbc:	e011      	b.n	8007de2 <HAL_SPI_Receive+0x1a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007dbe:	f7fb fae9 	bl	8003394 <HAL_GetTick>
 8007dc2:	4602      	mov	r2, r0
 8007dc4:	693b      	ldr	r3, [r7, #16]
 8007dc6:	1ad3      	subs	r3, r2, r3
 8007dc8:	683a      	ldr	r2, [r7, #0]
 8007dca:	429a      	cmp	r2, r3
 8007dcc:	d803      	bhi.n	8007dd6 <HAL_SPI_Receive+0x19c>
 8007dce:	683b      	ldr	r3, [r7, #0]
 8007dd0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007dd4:	d102      	bne.n	8007ddc <HAL_SPI_Receive+0x1a2>
 8007dd6:	683b      	ldr	r3, [r7, #0]
 8007dd8:	2b00      	cmp	r3, #0
 8007dda:	d102      	bne.n	8007de2 <HAL_SPI_Receive+0x1a8>
        {
          errorcode = HAL_TIMEOUT;
 8007ddc:	2303      	movs	r3, #3
 8007dde:	75fb      	strb	r3, [r7, #23]
          goto error;
 8007de0:	e04e      	b.n	8007e80 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 8007de2:	68fb      	ldr	r3, [r7, #12]
 8007de4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007de8:	b29b      	uxth	r3, r3
 8007dea:	2b00      	cmp	r3, #0
 8007dec:	d1c8      	bne.n	8007d80 <HAL_SPI_Receive+0x146>
 8007dee:	e034      	b.n	8007e5a <HAL_SPI_Receive+0x220>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8007df0:	68fb      	ldr	r3, [r7, #12]
 8007df2:	681b      	ldr	r3, [r3, #0]
 8007df4:	689b      	ldr	r3, [r3, #8]
 8007df6:	f003 0301 	and.w	r3, r3, #1
 8007dfa:	2b01      	cmp	r3, #1
 8007dfc:	d115      	bne.n	8007e2a <HAL_SPI_Receive+0x1f0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007dfe:	68fb      	ldr	r3, [r7, #12]
 8007e00:	681b      	ldr	r3, [r3, #0]
 8007e02:	68da      	ldr	r2, [r3, #12]
 8007e04:	68fb      	ldr	r3, [r7, #12]
 8007e06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e08:	b292      	uxth	r2, r2
 8007e0a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007e0c:	68fb      	ldr	r3, [r7, #12]
 8007e0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e10:	1c9a      	adds	r2, r3, #2
 8007e12:	68fb      	ldr	r3, [r7, #12]
 8007e14:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8007e16:	68fb      	ldr	r3, [r7, #12]
 8007e18:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007e1c:	b29b      	uxth	r3, r3
 8007e1e:	3b01      	subs	r3, #1
 8007e20:	b29a      	uxth	r2, r3
 8007e22:	68fb      	ldr	r3, [r7, #12]
 8007e24:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8007e28:	e011      	b.n	8007e4e <HAL_SPI_Receive+0x214>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007e2a:	f7fb fab3 	bl	8003394 <HAL_GetTick>
 8007e2e:	4602      	mov	r2, r0
 8007e30:	693b      	ldr	r3, [r7, #16]
 8007e32:	1ad3      	subs	r3, r2, r3
 8007e34:	683a      	ldr	r2, [r7, #0]
 8007e36:	429a      	cmp	r2, r3
 8007e38:	d803      	bhi.n	8007e42 <HAL_SPI_Receive+0x208>
 8007e3a:	683b      	ldr	r3, [r7, #0]
 8007e3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007e40:	d102      	bne.n	8007e48 <HAL_SPI_Receive+0x20e>
 8007e42:	683b      	ldr	r3, [r7, #0]
 8007e44:	2b00      	cmp	r3, #0
 8007e46:	d102      	bne.n	8007e4e <HAL_SPI_Receive+0x214>
        {
          errorcode = HAL_TIMEOUT;
 8007e48:	2303      	movs	r3, #3
 8007e4a:	75fb      	strb	r3, [r7, #23]
          goto error;
 8007e4c:	e018      	b.n	8007e80 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 8007e4e:	68fb      	ldr	r3, [r7, #12]
 8007e50:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007e54:	b29b      	uxth	r3, r3
 8007e56:	2b00      	cmp	r3, #0
 8007e58:	d1ca      	bne.n	8007df0 <HAL_SPI_Receive+0x1b6>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007e5a:	693a      	ldr	r2, [r7, #16]
 8007e5c:	6839      	ldr	r1, [r7, #0]
 8007e5e:	68f8      	ldr	r0, [r7, #12]
 8007e60:	f000 fb4c 	bl	80084fc <SPI_EndRxTransaction>
 8007e64:	4603      	mov	r3, r0
 8007e66:	2b00      	cmp	r3, #0
 8007e68:	d002      	beq.n	8007e70 <HAL_SPI_Receive+0x236>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007e6a:	68fb      	ldr	r3, [r7, #12]
 8007e6c:	2220      	movs	r2, #32
 8007e6e:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007e70:	68fb      	ldr	r3, [r7, #12]
 8007e72:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007e74:	2b00      	cmp	r3, #0
 8007e76:	d002      	beq.n	8007e7e <HAL_SPI_Receive+0x244>
  {
    errorcode = HAL_ERROR;
 8007e78:	2301      	movs	r3, #1
 8007e7a:	75fb      	strb	r3, [r7, #23]
 8007e7c:	e000      	b.n	8007e80 <HAL_SPI_Receive+0x246>
  }

error :
 8007e7e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8007e80:	68fb      	ldr	r3, [r7, #12]
 8007e82:	2201      	movs	r2, #1
 8007e84:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8007e88:	68fb      	ldr	r3, [r7, #12]
 8007e8a:	2200      	movs	r2, #0
 8007e8c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8007e90:	7dfb      	ldrb	r3, [r7, #23]
}
 8007e92:	4618      	mov	r0, r3
 8007e94:	3718      	adds	r7, #24
 8007e96:	46bd      	mov	sp, r7
 8007e98:	bd80      	pop	{r7, pc}

08007e9a <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8007e9a:	b580      	push	{r7, lr}
 8007e9c:	b08a      	sub	sp, #40	; 0x28
 8007e9e:	af00      	add	r7, sp, #0
 8007ea0:	60f8      	str	r0, [r7, #12]
 8007ea2:	60b9      	str	r1, [r7, #8]
 8007ea4:	607a      	str	r2, [r7, #4]
 8007ea6:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8007ea8:	2301      	movs	r3, #1
 8007eaa:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8007eac:	2300      	movs	r3, #0
 8007eae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007eb2:	68fb      	ldr	r3, [r7, #12]
 8007eb4:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8007eb8:	2b01      	cmp	r3, #1
 8007eba:	d101      	bne.n	8007ec0 <HAL_SPI_TransmitReceive+0x26>
 8007ebc:	2302      	movs	r3, #2
 8007ebe:	e1fb      	b.n	80082b8 <HAL_SPI_TransmitReceive+0x41e>
 8007ec0:	68fb      	ldr	r3, [r7, #12]
 8007ec2:	2201      	movs	r2, #1
 8007ec4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007ec8:	f7fb fa64 	bl	8003394 <HAL_GetTick>
 8007ecc:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8007ece:	68fb      	ldr	r3, [r7, #12]
 8007ed0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8007ed4:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8007ed6:	68fb      	ldr	r3, [r7, #12]
 8007ed8:	685b      	ldr	r3, [r3, #4]
 8007eda:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8007edc:	887b      	ldrh	r3, [r7, #2]
 8007ede:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8007ee0:	887b      	ldrh	r3, [r7, #2]
 8007ee2:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8007ee4:	7efb      	ldrb	r3, [r7, #27]
 8007ee6:	2b01      	cmp	r3, #1
 8007ee8:	d00e      	beq.n	8007f08 <HAL_SPI_TransmitReceive+0x6e>
 8007eea:	697b      	ldr	r3, [r7, #20]
 8007eec:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007ef0:	d106      	bne.n	8007f00 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8007ef2:	68fb      	ldr	r3, [r7, #12]
 8007ef4:	689b      	ldr	r3, [r3, #8]
 8007ef6:	2b00      	cmp	r3, #0
 8007ef8:	d102      	bne.n	8007f00 <HAL_SPI_TransmitReceive+0x66>
 8007efa:	7efb      	ldrb	r3, [r7, #27]
 8007efc:	2b04      	cmp	r3, #4
 8007efe:	d003      	beq.n	8007f08 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8007f00:	2302      	movs	r3, #2
 8007f02:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8007f06:	e1cd      	b.n	80082a4 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8007f08:	68bb      	ldr	r3, [r7, #8]
 8007f0a:	2b00      	cmp	r3, #0
 8007f0c:	d005      	beq.n	8007f1a <HAL_SPI_TransmitReceive+0x80>
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	2b00      	cmp	r3, #0
 8007f12:	d002      	beq.n	8007f1a <HAL_SPI_TransmitReceive+0x80>
 8007f14:	887b      	ldrh	r3, [r7, #2]
 8007f16:	2b00      	cmp	r3, #0
 8007f18:	d103      	bne.n	8007f22 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8007f1a:	2301      	movs	r3, #1
 8007f1c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8007f20:	e1c0      	b.n	80082a4 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8007f22:	68fb      	ldr	r3, [r7, #12]
 8007f24:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8007f28:	b2db      	uxtb	r3, r3
 8007f2a:	2b04      	cmp	r3, #4
 8007f2c:	d003      	beq.n	8007f36 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8007f2e:	68fb      	ldr	r3, [r7, #12]
 8007f30:	2205      	movs	r2, #5
 8007f32:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007f36:	68fb      	ldr	r3, [r7, #12]
 8007f38:	2200      	movs	r2, #0
 8007f3a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8007f3c:	68fb      	ldr	r3, [r7, #12]
 8007f3e:	687a      	ldr	r2, [r7, #4]
 8007f40:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8007f42:	68fb      	ldr	r3, [r7, #12]
 8007f44:	887a      	ldrh	r2, [r7, #2]
 8007f46:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8007f4a:	68fb      	ldr	r3, [r7, #12]
 8007f4c:	887a      	ldrh	r2, [r7, #2]
 8007f4e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8007f52:	68fb      	ldr	r3, [r7, #12]
 8007f54:	68ba      	ldr	r2, [r7, #8]
 8007f56:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8007f58:	68fb      	ldr	r3, [r7, #12]
 8007f5a:	887a      	ldrh	r2, [r7, #2]
 8007f5c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8007f5e:	68fb      	ldr	r3, [r7, #12]
 8007f60:	887a      	ldrh	r2, [r7, #2]
 8007f62:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8007f64:	68fb      	ldr	r3, [r7, #12]
 8007f66:	2200      	movs	r2, #0
 8007f68:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8007f6a:	68fb      	ldr	r3, [r7, #12]
 8007f6c:	2200      	movs	r2, #0
 8007f6e:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8007f70:	68fb      	ldr	r3, [r7, #12]
 8007f72:	68db      	ldr	r3, [r3, #12]
 8007f74:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8007f78:	d802      	bhi.n	8007f80 <HAL_SPI_TransmitReceive+0xe6>
 8007f7a:	8a3b      	ldrh	r3, [r7, #16]
 8007f7c:	2b01      	cmp	r3, #1
 8007f7e:	d908      	bls.n	8007f92 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007f80:	68fb      	ldr	r3, [r7, #12]
 8007f82:	681b      	ldr	r3, [r3, #0]
 8007f84:	685a      	ldr	r2, [r3, #4]
 8007f86:	68fb      	ldr	r3, [r7, #12]
 8007f88:	681b      	ldr	r3, [r3, #0]
 8007f8a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8007f8e:	605a      	str	r2, [r3, #4]
 8007f90:	e007      	b.n	8007fa2 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007f92:	68fb      	ldr	r3, [r7, #12]
 8007f94:	681b      	ldr	r3, [r3, #0]
 8007f96:	685a      	ldr	r2, [r3, #4]
 8007f98:	68fb      	ldr	r3, [r7, #12]
 8007f9a:	681b      	ldr	r3, [r3, #0]
 8007f9c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007fa0:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007fa2:	68fb      	ldr	r3, [r7, #12]
 8007fa4:	681b      	ldr	r3, [r3, #0]
 8007fa6:	681b      	ldr	r3, [r3, #0]
 8007fa8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007fac:	2b40      	cmp	r3, #64	; 0x40
 8007fae:	d007      	beq.n	8007fc0 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007fb0:	68fb      	ldr	r3, [r7, #12]
 8007fb2:	681b      	ldr	r3, [r3, #0]
 8007fb4:	681a      	ldr	r2, [r3, #0]
 8007fb6:	68fb      	ldr	r3, [r7, #12]
 8007fb8:	681b      	ldr	r3, [r3, #0]
 8007fba:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007fbe:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007fc0:	68fb      	ldr	r3, [r7, #12]
 8007fc2:	68db      	ldr	r3, [r3, #12]
 8007fc4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8007fc8:	d97c      	bls.n	80080c4 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007fca:	68fb      	ldr	r3, [r7, #12]
 8007fcc:	685b      	ldr	r3, [r3, #4]
 8007fce:	2b00      	cmp	r3, #0
 8007fd0:	d002      	beq.n	8007fd8 <HAL_SPI_TransmitReceive+0x13e>
 8007fd2:	8a7b      	ldrh	r3, [r7, #18]
 8007fd4:	2b01      	cmp	r3, #1
 8007fd6:	d169      	bne.n	80080ac <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007fd8:	68fb      	ldr	r3, [r7, #12]
 8007fda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007fdc:	881a      	ldrh	r2, [r3, #0]
 8007fde:	68fb      	ldr	r3, [r7, #12]
 8007fe0:	681b      	ldr	r3, [r3, #0]
 8007fe2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007fe4:	68fb      	ldr	r3, [r7, #12]
 8007fe6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007fe8:	1c9a      	adds	r2, r3, #2
 8007fea:	68fb      	ldr	r3, [r7, #12]
 8007fec:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8007fee:	68fb      	ldr	r3, [r7, #12]
 8007ff0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007ff2:	b29b      	uxth	r3, r3
 8007ff4:	3b01      	subs	r3, #1
 8007ff6:	b29a      	uxth	r2, r3
 8007ff8:	68fb      	ldr	r3, [r7, #12]
 8007ffa:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007ffc:	e056      	b.n	80080ac <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007ffe:	68fb      	ldr	r3, [r7, #12]
 8008000:	681b      	ldr	r3, [r3, #0]
 8008002:	689b      	ldr	r3, [r3, #8]
 8008004:	f003 0302 	and.w	r3, r3, #2
 8008008:	2b02      	cmp	r3, #2
 800800a:	d11b      	bne.n	8008044 <HAL_SPI_TransmitReceive+0x1aa>
 800800c:	68fb      	ldr	r3, [r7, #12]
 800800e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008010:	b29b      	uxth	r3, r3
 8008012:	2b00      	cmp	r3, #0
 8008014:	d016      	beq.n	8008044 <HAL_SPI_TransmitReceive+0x1aa>
 8008016:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008018:	2b01      	cmp	r3, #1
 800801a:	d113      	bne.n	8008044 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800801c:	68fb      	ldr	r3, [r7, #12]
 800801e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008020:	881a      	ldrh	r2, [r3, #0]
 8008022:	68fb      	ldr	r3, [r7, #12]
 8008024:	681b      	ldr	r3, [r3, #0]
 8008026:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8008028:	68fb      	ldr	r3, [r7, #12]
 800802a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800802c:	1c9a      	adds	r2, r3, #2
 800802e:	68fb      	ldr	r3, [r7, #12]
 8008030:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8008032:	68fb      	ldr	r3, [r7, #12]
 8008034:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008036:	b29b      	uxth	r3, r3
 8008038:	3b01      	subs	r3, #1
 800803a:	b29a      	uxth	r2, r3
 800803c:	68fb      	ldr	r3, [r7, #12]
 800803e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8008040:	2300      	movs	r3, #0
 8008042:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8008044:	68fb      	ldr	r3, [r7, #12]
 8008046:	681b      	ldr	r3, [r3, #0]
 8008048:	689b      	ldr	r3, [r3, #8]
 800804a:	f003 0301 	and.w	r3, r3, #1
 800804e:	2b01      	cmp	r3, #1
 8008050:	d11c      	bne.n	800808c <HAL_SPI_TransmitReceive+0x1f2>
 8008052:	68fb      	ldr	r3, [r7, #12]
 8008054:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008058:	b29b      	uxth	r3, r3
 800805a:	2b00      	cmp	r3, #0
 800805c:	d016      	beq.n	800808c <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800805e:	68fb      	ldr	r3, [r7, #12]
 8008060:	681b      	ldr	r3, [r3, #0]
 8008062:	68da      	ldr	r2, [r3, #12]
 8008064:	68fb      	ldr	r3, [r7, #12]
 8008066:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008068:	b292      	uxth	r2, r2
 800806a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800806c:	68fb      	ldr	r3, [r7, #12]
 800806e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008070:	1c9a      	adds	r2, r3, #2
 8008072:	68fb      	ldr	r3, [r7, #12]
 8008074:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8008076:	68fb      	ldr	r3, [r7, #12]
 8008078:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800807c:	b29b      	uxth	r3, r3
 800807e:	3b01      	subs	r3, #1
 8008080:	b29a      	uxth	r2, r3
 8008082:	68fb      	ldr	r3, [r7, #12]
 8008084:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8008088:	2301      	movs	r3, #1
 800808a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800808c:	f7fb f982 	bl	8003394 <HAL_GetTick>
 8008090:	4602      	mov	r2, r0
 8008092:	69fb      	ldr	r3, [r7, #28]
 8008094:	1ad3      	subs	r3, r2, r3
 8008096:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008098:	429a      	cmp	r2, r3
 800809a:	d807      	bhi.n	80080ac <HAL_SPI_TransmitReceive+0x212>
 800809c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800809e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80080a2:	d003      	beq.n	80080ac <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 80080a4:	2303      	movs	r3, #3
 80080a6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 80080aa:	e0fb      	b.n	80082a4 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80080ac:	68fb      	ldr	r3, [r7, #12]
 80080ae:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80080b0:	b29b      	uxth	r3, r3
 80080b2:	2b00      	cmp	r3, #0
 80080b4:	d1a3      	bne.n	8007ffe <HAL_SPI_TransmitReceive+0x164>
 80080b6:	68fb      	ldr	r3, [r7, #12]
 80080b8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80080bc:	b29b      	uxth	r3, r3
 80080be:	2b00      	cmp	r3, #0
 80080c0:	d19d      	bne.n	8007ffe <HAL_SPI_TransmitReceive+0x164>
 80080c2:	e0df      	b.n	8008284 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80080c4:	68fb      	ldr	r3, [r7, #12]
 80080c6:	685b      	ldr	r3, [r3, #4]
 80080c8:	2b00      	cmp	r3, #0
 80080ca:	d003      	beq.n	80080d4 <HAL_SPI_TransmitReceive+0x23a>
 80080cc:	8a7b      	ldrh	r3, [r7, #18]
 80080ce:	2b01      	cmp	r3, #1
 80080d0:	f040 80cb 	bne.w	800826a <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 80080d4:	68fb      	ldr	r3, [r7, #12]
 80080d6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80080d8:	b29b      	uxth	r3, r3
 80080da:	2b01      	cmp	r3, #1
 80080dc:	d912      	bls.n	8008104 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80080de:	68fb      	ldr	r3, [r7, #12]
 80080e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80080e2:	881a      	ldrh	r2, [r3, #0]
 80080e4:	68fb      	ldr	r3, [r7, #12]
 80080e6:	681b      	ldr	r3, [r3, #0]
 80080e8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80080ea:	68fb      	ldr	r3, [r7, #12]
 80080ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80080ee:	1c9a      	adds	r2, r3, #2
 80080f0:	68fb      	ldr	r3, [r7, #12]
 80080f2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 80080f4:	68fb      	ldr	r3, [r7, #12]
 80080f6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80080f8:	b29b      	uxth	r3, r3
 80080fa:	3b02      	subs	r3, #2
 80080fc:	b29a      	uxth	r2, r3
 80080fe:	68fb      	ldr	r3, [r7, #12]
 8008100:	87da      	strh	r2, [r3, #62]	; 0x3e
 8008102:	e0b2      	b.n	800826a <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8008104:	68fb      	ldr	r3, [r7, #12]
 8008106:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008108:	68fb      	ldr	r3, [r7, #12]
 800810a:	681b      	ldr	r3, [r3, #0]
 800810c:	330c      	adds	r3, #12
 800810e:	7812      	ldrb	r2, [r2, #0]
 8008110:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8008112:	68fb      	ldr	r3, [r7, #12]
 8008114:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008116:	1c5a      	adds	r2, r3, #1
 8008118:	68fb      	ldr	r3, [r7, #12]
 800811a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800811c:	68fb      	ldr	r3, [r7, #12]
 800811e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008120:	b29b      	uxth	r3, r3
 8008122:	3b01      	subs	r3, #1
 8008124:	b29a      	uxth	r2, r3
 8008126:	68fb      	ldr	r3, [r7, #12]
 8008128:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800812a:	e09e      	b.n	800826a <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800812c:	68fb      	ldr	r3, [r7, #12]
 800812e:	681b      	ldr	r3, [r3, #0]
 8008130:	689b      	ldr	r3, [r3, #8]
 8008132:	f003 0302 	and.w	r3, r3, #2
 8008136:	2b02      	cmp	r3, #2
 8008138:	d134      	bne.n	80081a4 <HAL_SPI_TransmitReceive+0x30a>
 800813a:	68fb      	ldr	r3, [r7, #12]
 800813c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800813e:	b29b      	uxth	r3, r3
 8008140:	2b00      	cmp	r3, #0
 8008142:	d02f      	beq.n	80081a4 <HAL_SPI_TransmitReceive+0x30a>
 8008144:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008146:	2b01      	cmp	r3, #1
 8008148:	d12c      	bne.n	80081a4 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 800814a:	68fb      	ldr	r3, [r7, #12]
 800814c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800814e:	b29b      	uxth	r3, r3
 8008150:	2b01      	cmp	r3, #1
 8008152:	d912      	bls.n	800817a <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008154:	68fb      	ldr	r3, [r7, #12]
 8008156:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008158:	881a      	ldrh	r2, [r3, #0]
 800815a:	68fb      	ldr	r3, [r7, #12]
 800815c:	681b      	ldr	r3, [r3, #0]
 800815e:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8008160:	68fb      	ldr	r3, [r7, #12]
 8008162:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008164:	1c9a      	adds	r2, r3, #2
 8008166:	68fb      	ldr	r3, [r7, #12]
 8008168:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800816a:	68fb      	ldr	r3, [r7, #12]
 800816c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800816e:	b29b      	uxth	r3, r3
 8008170:	3b02      	subs	r3, #2
 8008172:	b29a      	uxth	r2, r3
 8008174:	68fb      	ldr	r3, [r7, #12]
 8008176:	87da      	strh	r2, [r3, #62]	; 0x3e
 8008178:	e012      	b.n	80081a0 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800817a:	68fb      	ldr	r3, [r7, #12]
 800817c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800817e:	68fb      	ldr	r3, [r7, #12]
 8008180:	681b      	ldr	r3, [r3, #0]
 8008182:	330c      	adds	r3, #12
 8008184:	7812      	ldrb	r2, [r2, #0]
 8008186:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8008188:	68fb      	ldr	r3, [r7, #12]
 800818a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800818c:	1c5a      	adds	r2, r3, #1
 800818e:	68fb      	ldr	r3, [r7, #12]
 8008190:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8008192:	68fb      	ldr	r3, [r7, #12]
 8008194:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008196:	b29b      	uxth	r3, r3
 8008198:	3b01      	subs	r3, #1
 800819a:	b29a      	uxth	r2, r3
 800819c:	68fb      	ldr	r3, [r7, #12]
 800819e:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80081a0:	2300      	movs	r3, #0
 80081a2:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80081a4:	68fb      	ldr	r3, [r7, #12]
 80081a6:	681b      	ldr	r3, [r3, #0]
 80081a8:	689b      	ldr	r3, [r3, #8]
 80081aa:	f003 0301 	and.w	r3, r3, #1
 80081ae:	2b01      	cmp	r3, #1
 80081b0:	d148      	bne.n	8008244 <HAL_SPI_TransmitReceive+0x3aa>
 80081b2:	68fb      	ldr	r3, [r7, #12]
 80081b4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80081b8:	b29b      	uxth	r3, r3
 80081ba:	2b00      	cmp	r3, #0
 80081bc:	d042      	beq.n	8008244 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 80081be:	68fb      	ldr	r3, [r7, #12]
 80081c0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80081c4:	b29b      	uxth	r3, r3
 80081c6:	2b01      	cmp	r3, #1
 80081c8:	d923      	bls.n	8008212 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80081ca:	68fb      	ldr	r3, [r7, #12]
 80081cc:	681b      	ldr	r3, [r3, #0]
 80081ce:	68da      	ldr	r2, [r3, #12]
 80081d0:	68fb      	ldr	r3, [r7, #12]
 80081d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80081d4:	b292      	uxth	r2, r2
 80081d6:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80081d8:	68fb      	ldr	r3, [r7, #12]
 80081da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80081dc:	1c9a      	adds	r2, r3, #2
 80081de:	68fb      	ldr	r3, [r7, #12]
 80081e0:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 80081e2:	68fb      	ldr	r3, [r7, #12]
 80081e4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80081e8:	b29b      	uxth	r3, r3
 80081ea:	3b02      	subs	r3, #2
 80081ec:	b29a      	uxth	r2, r3
 80081ee:	68fb      	ldr	r3, [r7, #12]
 80081f0:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 80081f4:	68fb      	ldr	r3, [r7, #12]
 80081f6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80081fa:	b29b      	uxth	r3, r3
 80081fc:	2b01      	cmp	r3, #1
 80081fe:	d81f      	bhi.n	8008240 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8008200:	68fb      	ldr	r3, [r7, #12]
 8008202:	681b      	ldr	r3, [r3, #0]
 8008204:	685a      	ldr	r2, [r3, #4]
 8008206:	68fb      	ldr	r3, [r7, #12]
 8008208:	681b      	ldr	r3, [r3, #0]
 800820a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800820e:	605a      	str	r2, [r3, #4]
 8008210:	e016      	b.n	8008240 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8008212:	68fb      	ldr	r3, [r7, #12]
 8008214:	681b      	ldr	r3, [r3, #0]
 8008216:	f103 020c 	add.w	r2, r3, #12
 800821a:	68fb      	ldr	r3, [r7, #12]
 800821c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800821e:	7812      	ldrb	r2, [r2, #0]
 8008220:	b2d2      	uxtb	r2, r2
 8008222:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8008224:	68fb      	ldr	r3, [r7, #12]
 8008226:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008228:	1c5a      	adds	r2, r3, #1
 800822a:	68fb      	ldr	r3, [r7, #12]
 800822c:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 800822e:	68fb      	ldr	r3, [r7, #12]
 8008230:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008234:	b29b      	uxth	r3, r3
 8008236:	3b01      	subs	r3, #1
 8008238:	b29a      	uxth	r2, r3
 800823a:	68fb      	ldr	r3, [r7, #12]
 800823c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8008240:	2301      	movs	r3, #1
 8008242:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8008244:	f7fb f8a6 	bl	8003394 <HAL_GetTick>
 8008248:	4602      	mov	r2, r0
 800824a:	69fb      	ldr	r3, [r7, #28]
 800824c:	1ad3      	subs	r3, r2, r3
 800824e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008250:	429a      	cmp	r2, r3
 8008252:	d803      	bhi.n	800825c <HAL_SPI_TransmitReceive+0x3c2>
 8008254:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008256:	f1b3 3fff 	cmp.w	r3, #4294967295
 800825a:	d102      	bne.n	8008262 <HAL_SPI_TransmitReceive+0x3c8>
 800825c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800825e:	2b00      	cmp	r3, #0
 8008260:	d103      	bne.n	800826a <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 8008262:	2303      	movs	r3, #3
 8008264:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8008268:	e01c      	b.n	80082a4 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800826a:	68fb      	ldr	r3, [r7, #12]
 800826c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800826e:	b29b      	uxth	r3, r3
 8008270:	2b00      	cmp	r3, #0
 8008272:	f47f af5b 	bne.w	800812c <HAL_SPI_TransmitReceive+0x292>
 8008276:	68fb      	ldr	r3, [r7, #12]
 8008278:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800827c:	b29b      	uxth	r3, r3
 800827e:	2b00      	cmp	r3, #0
 8008280:	f47f af54 	bne.w	800812c <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8008284:	69fa      	ldr	r2, [r7, #28]
 8008286:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008288:	68f8      	ldr	r0, [r7, #12]
 800828a:	f000 f98f 	bl	80085ac <SPI_EndRxTxTransaction>
 800828e:	4603      	mov	r3, r0
 8008290:	2b00      	cmp	r3, #0
 8008292:	d006      	beq.n	80082a2 <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 8008294:	2301      	movs	r3, #1
 8008296:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800829a:	68fb      	ldr	r3, [r7, #12]
 800829c:	2220      	movs	r2, #32
 800829e:	661a      	str	r2, [r3, #96]	; 0x60
 80082a0:	e000      	b.n	80082a4 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 80082a2:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80082a4:	68fb      	ldr	r3, [r7, #12]
 80082a6:	2201      	movs	r2, #1
 80082a8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 80082ac:	68fb      	ldr	r3, [r7, #12]
 80082ae:	2200      	movs	r2, #0
 80082b0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80082b4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 80082b8:	4618      	mov	r0, r3
 80082ba:	3728      	adds	r7, #40	; 0x28
 80082bc:	46bd      	mov	sp, r7
 80082be:	bd80      	pop	{r7, pc}

080082c0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80082c0:	b580      	push	{r7, lr}
 80082c2:	b088      	sub	sp, #32
 80082c4:	af00      	add	r7, sp, #0
 80082c6:	60f8      	str	r0, [r7, #12]
 80082c8:	60b9      	str	r1, [r7, #8]
 80082ca:	603b      	str	r3, [r7, #0]
 80082cc:	4613      	mov	r3, r2
 80082ce:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80082d0:	f7fb f860 	bl	8003394 <HAL_GetTick>
 80082d4:	4602      	mov	r2, r0
 80082d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082d8:	1a9b      	subs	r3, r3, r2
 80082da:	683a      	ldr	r2, [r7, #0]
 80082dc:	4413      	add	r3, r2
 80082de:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80082e0:	f7fb f858 	bl	8003394 <HAL_GetTick>
 80082e4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80082e6:	4b39      	ldr	r3, [pc, #228]	; (80083cc <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80082e8:	681b      	ldr	r3, [r3, #0]
 80082ea:	015b      	lsls	r3, r3, #5
 80082ec:	0d1b      	lsrs	r3, r3, #20
 80082ee:	69fa      	ldr	r2, [r7, #28]
 80082f0:	fb02 f303 	mul.w	r3, r2, r3
 80082f4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80082f6:	e054      	b.n	80083a2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80082f8:	683b      	ldr	r3, [r7, #0]
 80082fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80082fe:	d050      	beq.n	80083a2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8008300:	f7fb f848 	bl	8003394 <HAL_GetTick>
 8008304:	4602      	mov	r2, r0
 8008306:	69bb      	ldr	r3, [r7, #24]
 8008308:	1ad3      	subs	r3, r2, r3
 800830a:	69fa      	ldr	r2, [r7, #28]
 800830c:	429a      	cmp	r2, r3
 800830e:	d902      	bls.n	8008316 <SPI_WaitFlagStateUntilTimeout+0x56>
 8008310:	69fb      	ldr	r3, [r7, #28]
 8008312:	2b00      	cmp	r3, #0
 8008314:	d13d      	bne.n	8008392 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8008316:	68fb      	ldr	r3, [r7, #12]
 8008318:	681b      	ldr	r3, [r3, #0]
 800831a:	685a      	ldr	r2, [r3, #4]
 800831c:	68fb      	ldr	r3, [r7, #12]
 800831e:	681b      	ldr	r3, [r3, #0]
 8008320:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8008324:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008326:	68fb      	ldr	r3, [r7, #12]
 8008328:	685b      	ldr	r3, [r3, #4]
 800832a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800832e:	d111      	bne.n	8008354 <SPI_WaitFlagStateUntilTimeout+0x94>
 8008330:	68fb      	ldr	r3, [r7, #12]
 8008332:	689b      	ldr	r3, [r3, #8]
 8008334:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008338:	d004      	beq.n	8008344 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800833a:	68fb      	ldr	r3, [r7, #12]
 800833c:	689b      	ldr	r3, [r3, #8]
 800833e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008342:	d107      	bne.n	8008354 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8008344:	68fb      	ldr	r3, [r7, #12]
 8008346:	681b      	ldr	r3, [r3, #0]
 8008348:	681a      	ldr	r2, [r3, #0]
 800834a:	68fb      	ldr	r3, [r7, #12]
 800834c:	681b      	ldr	r3, [r3, #0]
 800834e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008352:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8008354:	68fb      	ldr	r3, [r7, #12]
 8008356:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008358:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800835c:	d10f      	bne.n	800837e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800835e:	68fb      	ldr	r3, [r7, #12]
 8008360:	681b      	ldr	r3, [r3, #0]
 8008362:	681a      	ldr	r2, [r3, #0]
 8008364:	68fb      	ldr	r3, [r7, #12]
 8008366:	681b      	ldr	r3, [r3, #0]
 8008368:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800836c:	601a      	str	r2, [r3, #0]
 800836e:	68fb      	ldr	r3, [r7, #12]
 8008370:	681b      	ldr	r3, [r3, #0]
 8008372:	681a      	ldr	r2, [r3, #0]
 8008374:	68fb      	ldr	r3, [r7, #12]
 8008376:	681b      	ldr	r3, [r3, #0]
 8008378:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800837c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800837e:	68fb      	ldr	r3, [r7, #12]
 8008380:	2201      	movs	r2, #1
 8008382:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8008386:	68fb      	ldr	r3, [r7, #12]
 8008388:	2200      	movs	r2, #0
 800838a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800838e:	2303      	movs	r3, #3
 8008390:	e017      	b.n	80083c2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8008392:	697b      	ldr	r3, [r7, #20]
 8008394:	2b00      	cmp	r3, #0
 8008396:	d101      	bne.n	800839c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8008398:	2300      	movs	r3, #0
 800839a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800839c:	697b      	ldr	r3, [r7, #20]
 800839e:	3b01      	subs	r3, #1
 80083a0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80083a2:	68fb      	ldr	r3, [r7, #12]
 80083a4:	681b      	ldr	r3, [r3, #0]
 80083a6:	689a      	ldr	r2, [r3, #8]
 80083a8:	68bb      	ldr	r3, [r7, #8]
 80083aa:	4013      	ands	r3, r2
 80083ac:	68ba      	ldr	r2, [r7, #8]
 80083ae:	429a      	cmp	r2, r3
 80083b0:	bf0c      	ite	eq
 80083b2:	2301      	moveq	r3, #1
 80083b4:	2300      	movne	r3, #0
 80083b6:	b2db      	uxtb	r3, r3
 80083b8:	461a      	mov	r2, r3
 80083ba:	79fb      	ldrb	r3, [r7, #7]
 80083bc:	429a      	cmp	r2, r3
 80083be:	d19b      	bne.n	80082f8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80083c0:	2300      	movs	r3, #0
}
 80083c2:	4618      	mov	r0, r3
 80083c4:	3720      	adds	r7, #32
 80083c6:	46bd      	mov	sp, r7
 80083c8:	bd80      	pop	{r7, pc}
 80083ca:	bf00      	nop
 80083cc:	2000001c 	.word	0x2000001c

080083d0 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80083d0:	b580      	push	{r7, lr}
 80083d2:	b08a      	sub	sp, #40	; 0x28
 80083d4:	af00      	add	r7, sp, #0
 80083d6:	60f8      	str	r0, [r7, #12]
 80083d8:	60b9      	str	r1, [r7, #8]
 80083da:	607a      	str	r2, [r7, #4]
 80083dc:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80083de:	2300      	movs	r3, #0
 80083e0:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80083e2:	f7fa ffd7 	bl	8003394 <HAL_GetTick>
 80083e6:	4602      	mov	r2, r0
 80083e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083ea:	1a9b      	subs	r3, r3, r2
 80083ec:	683a      	ldr	r2, [r7, #0]
 80083ee:	4413      	add	r3, r2
 80083f0:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 80083f2:	f7fa ffcf 	bl	8003394 <HAL_GetTick>
 80083f6:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80083f8:	68fb      	ldr	r3, [r7, #12]
 80083fa:	681b      	ldr	r3, [r3, #0]
 80083fc:	330c      	adds	r3, #12
 80083fe:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8008400:	4b3d      	ldr	r3, [pc, #244]	; (80084f8 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8008402:	681a      	ldr	r2, [r3, #0]
 8008404:	4613      	mov	r3, r2
 8008406:	009b      	lsls	r3, r3, #2
 8008408:	4413      	add	r3, r2
 800840a:	00da      	lsls	r2, r3, #3
 800840c:	1ad3      	subs	r3, r2, r3
 800840e:	0d1b      	lsrs	r3, r3, #20
 8008410:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008412:	fb02 f303 	mul.w	r3, r2, r3
 8008416:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8008418:	e060      	b.n	80084dc <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800841a:	68bb      	ldr	r3, [r7, #8]
 800841c:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8008420:	d107      	bne.n	8008432 <SPI_WaitFifoStateUntilTimeout+0x62>
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	2b00      	cmp	r3, #0
 8008426:	d104      	bne.n	8008432 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8008428:	69fb      	ldr	r3, [r7, #28]
 800842a:	781b      	ldrb	r3, [r3, #0]
 800842c:	b2db      	uxtb	r3, r3
 800842e:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8008430:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8008432:	683b      	ldr	r3, [r7, #0]
 8008434:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008438:	d050      	beq.n	80084dc <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800843a:	f7fa ffab 	bl	8003394 <HAL_GetTick>
 800843e:	4602      	mov	r2, r0
 8008440:	6a3b      	ldr	r3, [r7, #32]
 8008442:	1ad3      	subs	r3, r2, r3
 8008444:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008446:	429a      	cmp	r2, r3
 8008448:	d902      	bls.n	8008450 <SPI_WaitFifoStateUntilTimeout+0x80>
 800844a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800844c:	2b00      	cmp	r3, #0
 800844e:	d13d      	bne.n	80084cc <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8008450:	68fb      	ldr	r3, [r7, #12]
 8008452:	681b      	ldr	r3, [r3, #0]
 8008454:	685a      	ldr	r2, [r3, #4]
 8008456:	68fb      	ldr	r3, [r7, #12]
 8008458:	681b      	ldr	r3, [r3, #0]
 800845a:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800845e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008460:	68fb      	ldr	r3, [r7, #12]
 8008462:	685b      	ldr	r3, [r3, #4]
 8008464:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008468:	d111      	bne.n	800848e <SPI_WaitFifoStateUntilTimeout+0xbe>
 800846a:	68fb      	ldr	r3, [r7, #12]
 800846c:	689b      	ldr	r3, [r3, #8]
 800846e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008472:	d004      	beq.n	800847e <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008474:	68fb      	ldr	r3, [r7, #12]
 8008476:	689b      	ldr	r3, [r3, #8]
 8008478:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800847c:	d107      	bne.n	800848e <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800847e:	68fb      	ldr	r3, [r7, #12]
 8008480:	681b      	ldr	r3, [r3, #0]
 8008482:	681a      	ldr	r2, [r3, #0]
 8008484:	68fb      	ldr	r3, [r7, #12]
 8008486:	681b      	ldr	r3, [r3, #0]
 8008488:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800848c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800848e:	68fb      	ldr	r3, [r7, #12]
 8008490:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008492:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008496:	d10f      	bne.n	80084b8 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8008498:	68fb      	ldr	r3, [r7, #12]
 800849a:	681b      	ldr	r3, [r3, #0]
 800849c:	681a      	ldr	r2, [r3, #0]
 800849e:	68fb      	ldr	r3, [r7, #12]
 80084a0:	681b      	ldr	r3, [r3, #0]
 80084a2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80084a6:	601a      	str	r2, [r3, #0]
 80084a8:	68fb      	ldr	r3, [r7, #12]
 80084aa:	681b      	ldr	r3, [r3, #0]
 80084ac:	681a      	ldr	r2, [r3, #0]
 80084ae:	68fb      	ldr	r3, [r7, #12]
 80084b0:	681b      	ldr	r3, [r3, #0]
 80084b2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80084b6:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80084b8:	68fb      	ldr	r3, [r7, #12]
 80084ba:	2201      	movs	r2, #1
 80084bc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80084c0:	68fb      	ldr	r3, [r7, #12]
 80084c2:	2200      	movs	r2, #0
 80084c4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80084c8:	2303      	movs	r3, #3
 80084ca:	e010      	b.n	80084ee <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80084cc:	69bb      	ldr	r3, [r7, #24]
 80084ce:	2b00      	cmp	r3, #0
 80084d0:	d101      	bne.n	80084d6 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 80084d2:	2300      	movs	r3, #0
 80084d4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 80084d6:	69bb      	ldr	r3, [r7, #24]
 80084d8:	3b01      	subs	r3, #1
 80084da:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80084dc:	68fb      	ldr	r3, [r7, #12]
 80084de:	681b      	ldr	r3, [r3, #0]
 80084e0:	689a      	ldr	r2, [r3, #8]
 80084e2:	68bb      	ldr	r3, [r7, #8]
 80084e4:	4013      	ands	r3, r2
 80084e6:	687a      	ldr	r2, [r7, #4]
 80084e8:	429a      	cmp	r2, r3
 80084ea:	d196      	bne.n	800841a <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 80084ec:	2300      	movs	r3, #0
}
 80084ee:	4618      	mov	r0, r3
 80084f0:	3728      	adds	r7, #40	; 0x28
 80084f2:	46bd      	mov	sp, r7
 80084f4:	bd80      	pop	{r7, pc}
 80084f6:	bf00      	nop
 80084f8:	2000001c 	.word	0x2000001c

080084fc <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80084fc:	b580      	push	{r7, lr}
 80084fe:	b086      	sub	sp, #24
 8008500:	af02      	add	r7, sp, #8
 8008502:	60f8      	str	r0, [r7, #12]
 8008504:	60b9      	str	r1, [r7, #8]
 8008506:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008508:	68fb      	ldr	r3, [r7, #12]
 800850a:	685b      	ldr	r3, [r3, #4]
 800850c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008510:	d111      	bne.n	8008536 <SPI_EndRxTransaction+0x3a>
 8008512:	68fb      	ldr	r3, [r7, #12]
 8008514:	689b      	ldr	r3, [r3, #8]
 8008516:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800851a:	d004      	beq.n	8008526 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800851c:	68fb      	ldr	r3, [r7, #12]
 800851e:	689b      	ldr	r3, [r3, #8]
 8008520:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008524:	d107      	bne.n	8008536 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8008526:	68fb      	ldr	r3, [r7, #12]
 8008528:	681b      	ldr	r3, [r3, #0]
 800852a:	681a      	ldr	r2, [r3, #0]
 800852c:	68fb      	ldr	r3, [r7, #12]
 800852e:	681b      	ldr	r3, [r3, #0]
 8008530:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008534:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	9300      	str	r3, [sp, #0]
 800853a:	68bb      	ldr	r3, [r7, #8]
 800853c:	2200      	movs	r2, #0
 800853e:	2180      	movs	r1, #128	; 0x80
 8008540:	68f8      	ldr	r0, [r7, #12]
 8008542:	f7ff febd 	bl	80082c0 <SPI_WaitFlagStateUntilTimeout>
 8008546:	4603      	mov	r3, r0
 8008548:	2b00      	cmp	r3, #0
 800854a:	d007      	beq.n	800855c <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800854c:	68fb      	ldr	r3, [r7, #12]
 800854e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008550:	f043 0220 	orr.w	r2, r3, #32
 8008554:	68fb      	ldr	r3, [r7, #12]
 8008556:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8008558:	2303      	movs	r3, #3
 800855a:	e023      	b.n	80085a4 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800855c:	68fb      	ldr	r3, [r7, #12]
 800855e:	685b      	ldr	r3, [r3, #4]
 8008560:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008564:	d11d      	bne.n	80085a2 <SPI_EndRxTransaction+0xa6>
 8008566:	68fb      	ldr	r3, [r7, #12]
 8008568:	689b      	ldr	r3, [r3, #8]
 800856a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800856e:	d004      	beq.n	800857a <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008570:	68fb      	ldr	r3, [r7, #12]
 8008572:	689b      	ldr	r3, [r3, #8]
 8008574:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008578:	d113      	bne.n	80085a2 <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	9300      	str	r3, [sp, #0]
 800857e:	68bb      	ldr	r3, [r7, #8]
 8008580:	2200      	movs	r2, #0
 8008582:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8008586:	68f8      	ldr	r0, [r7, #12]
 8008588:	f7ff ff22 	bl	80083d0 <SPI_WaitFifoStateUntilTimeout>
 800858c:	4603      	mov	r3, r0
 800858e:	2b00      	cmp	r3, #0
 8008590:	d007      	beq.n	80085a2 <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008592:	68fb      	ldr	r3, [r7, #12]
 8008594:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008596:	f043 0220 	orr.w	r2, r3, #32
 800859a:	68fb      	ldr	r3, [r7, #12]
 800859c:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 800859e:	2303      	movs	r3, #3
 80085a0:	e000      	b.n	80085a4 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 80085a2:	2300      	movs	r3, #0
}
 80085a4:	4618      	mov	r0, r3
 80085a6:	3710      	adds	r7, #16
 80085a8:	46bd      	mov	sp, r7
 80085aa:	bd80      	pop	{r7, pc}

080085ac <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80085ac:	b580      	push	{r7, lr}
 80085ae:	b086      	sub	sp, #24
 80085b0:	af02      	add	r7, sp, #8
 80085b2:	60f8      	str	r0, [r7, #12]
 80085b4:	60b9      	str	r1, [r7, #8]
 80085b6:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	9300      	str	r3, [sp, #0]
 80085bc:	68bb      	ldr	r3, [r7, #8]
 80085be:	2200      	movs	r2, #0
 80085c0:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 80085c4:	68f8      	ldr	r0, [r7, #12]
 80085c6:	f7ff ff03 	bl	80083d0 <SPI_WaitFifoStateUntilTimeout>
 80085ca:	4603      	mov	r3, r0
 80085cc:	2b00      	cmp	r3, #0
 80085ce:	d007      	beq.n	80085e0 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80085d0:	68fb      	ldr	r3, [r7, #12]
 80085d2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80085d4:	f043 0220 	orr.w	r2, r3, #32
 80085d8:	68fb      	ldr	r3, [r7, #12]
 80085da:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80085dc:	2303      	movs	r3, #3
 80085de:	e027      	b.n	8008630 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	9300      	str	r3, [sp, #0]
 80085e4:	68bb      	ldr	r3, [r7, #8]
 80085e6:	2200      	movs	r2, #0
 80085e8:	2180      	movs	r1, #128	; 0x80
 80085ea:	68f8      	ldr	r0, [r7, #12]
 80085ec:	f7ff fe68 	bl	80082c0 <SPI_WaitFlagStateUntilTimeout>
 80085f0:	4603      	mov	r3, r0
 80085f2:	2b00      	cmp	r3, #0
 80085f4:	d007      	beq.n	8008606 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80085f6:	68fb      	ldr	r3, [r7, #12]
 80085f8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80085fa:	f043 0220 	orr.w	r2, r3, #32
 80085fe:	68fb      	ldr	r3, [r7, #12]
 8008600:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8008602:	2303      	movs	r3, #3
 8008604:	e014      	b.n	8008630 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	9300      	str	r3, [sp, #0]
 800860a:	68bb      	ldr	r3, [r7, #8]
 800860c:	2200      	movs	r2, #0
 800860e:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8008612:	68f8      	ldr	r0, [r7, #12]
 8008614:	f7ff fedc 	bl	80083d0 <SPI_WaitFifoStateUntilTimeout>
 8008618:	4603      	mov	r3, r0
 800861a:	2b00      	cmp	r3, #0
 800861c:	d007      	beq.n	800862e <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800861e:	68fb      	ldr	r3, [r7, #12]
 8008620:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008622:	f043 0220 	orr.w	r2, r3, #32
 8008626:	68fb      	ldr	r3, [r7, #12]
 8008628:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800862a:	2303      	movs	r3, #3
 800862c:	e000      	b.n	8008630 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800862e:	2300      	movs	r3, #0
}
 8008630:	4618      	mov	r0, r3
 8008632:	3710      	adds	r7, #16
 8008634:	46bd      	mov	sp, r7
 8008636:	bd80      	pop	{r7, pc}

08008638 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008638:	b580      	push	{r7, lr}
 800863a:	b082      	sub	sp, #8
 800863c:	af00      	add	r7, sp, #0
 800863e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	2b00      	cmp	r3, #0
 8008644:	d101      	bne.n	800864a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008646:	2301      	movs	r3, #1
 8008648:	e049      	b.n	80086de <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008650:	b2db      	uxtb	r3, r3
 8008652:	2b00      	cmp	r3, #0
 8008654:	d106      	bne.n	8008664 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	2200      	movs	r2, #0
 800865a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800865e:	6878      	ldr	r0, [r7, #4]
 8008660:	f7fa f9f2 	bl	8002a48 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	2202      	movs	r2, #2
 8008668:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	681a      	ldr	r2, [r3, #0]
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	3304      	adds	r3, #4
 8008674:	4619      	mov	r1, r3
 8008676:	4610      	mov	r0, r2
 8008678:	f000 fef6 	bl	8009468 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	2201      	movs	r2, #1
 8008680:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	2201      	movs	r2, #1
 8008688:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	2201      	movs	r2, #1
 8008690:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	2201      	movs	r2, #1
 8008698:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	2201      	movs	r2, #1
 80086a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	2201      	movs	r2, #1
 80086a8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	2201      	movs	r2, #1
 80086b0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	2201      	movs	r2, #1
 80086b8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	2201      	movs	r2, #1
 80086c0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	2201      	movs	r2, #1
 80086c8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	2201      	movs	r2, #1
 80086d0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	2201      	movs	r2, #1
 80086d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80086dc:	2300      	movs	r3, #0
}
 80086de:	4618      	mov	r0, r3
 80086e0:	3708      	adds	r7, #8
 80086e2:	46bd      	mov	sp, r7
 80086e4:	bd80      	pop	{r7, pc}

080086e6 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80086e6:	b580      	push	{r7, lr}
 80086e8:	b082      	sub	sp, #8
 80086ea:	af00      	add	r7, sp, #0
 80086ec:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	2b00      	cmp	r3, #0
 80086f2:	d101      	bne.n	80086f8 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80086f4:	2301      	movs	r3, #1
 80086f6:	e049      	b.n	800878c <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80086fe:	b2db      	uxtb	r3, r3
 8008700:	2b00      	cmp	r3, #0
 8008702:	d106      	bne.n	8008712 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	2200      	movs	r2, #0
 8008708:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800870c:	6878      	ldr	r0, [r7, #4]
 800870e:	f000 f841 	bl	8008794 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	2202      	movs	r2, #2
 8008716:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	681a      	ldr	r2, [r3, #0]
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	3304      	adds	r3, #4
 8008722:	4619      	mov	r1, r3
 8008724:	4610      	mov	r0, r2
 8008726:	f000 fe9f 	bl	8009468 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	2201      	movs	r2, #1
 800872e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	2201      	movs	r2, #1
 8008736:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	2201      	movs	r2, #1
 800873e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	2201      	movs	r2, #1
 8008746:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	2201      	movs	r2, #1
 800874e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	2201      	movs	r2, #1
 8008756:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	2201      	movs	r2, #1
 800875e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	2201      	movs	r2, #1
 8008766:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	2201      	movs	r2, #1
 800876e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	2201      	movs	r2, #1
 8008776:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	2201      	movs	r2, #1
 800877e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	2201      	movs	r2, #1
 8008786:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800878a:	2300      	movs	r3, #0
}
 800878c:	4618      	mov	r0, r3
 800878e:	3708      	adds	r7, #8
 8008790:	46bd      	mov	sp, r7
 8008792:	bd80      	pop	{r7, pc}

08008794 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8008794:	b480      	push	{r7}
 8008796:	b083      	sub	sp, #12
 8008798:	af00      	add	r7, sp, #0
 800879a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800879c:	bf00      	nop
 800879e:	370c      	adds	r7, #12
 80087a0:	46bd      	mov	sp, r7
 80087a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087a6:	4770      	bx	lr

080087a8 <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80087a8:	b580      	push	{r7, lr}
 80087aa:	b084      	sub	sp, #16
 80087ac:	af00      	add	r7, sp, #0
 80087ae:	6078      	str	r0, [r7, #4]
 80087b0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80087b2:	2300      	movs	r3, #0
 80087b4:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80087b6:	683b      	ldr	r3, [r7, #0]
 80087b8:	2b00      	cmp	r3, #0
 80087ba:	d109      	bne.n	80087d0 <HAL_TIM_PWM_Start_IT+0x28>
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80087c2:	b2db      	uxtb	r3, r3
 80087c4:	2b01      	cmp	r3, #1
 80087c6:	bf14      	ite	ne
 80087c8:	2301      	movne	r3, #1
 80087ca:	2300      	moveq	r3, #0
 80087cc:	b2db      	uxtb	r3, r3
 80087ce:	e03c      	b.n	800884a <HAL_TIM_PWM_Start_IT+0xa2>
 80087d0:	683b      	ldr	r3, [r7, #0]
 80087d2:	2b04      	cmp	r3, #4
 80087d4:	d109      	bne.n	80087ea <HAL_TIM_PWM_Start_IT+0x42>
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80087dc:	b2db      	uxtb	r3, r3
 80087de:	2b01      	cmp	r3, #1
 80087e0:	bf14      	ite	ne
 80087e2:	2301      	movne	r3, #1
 80087e4:	2300      	moveq	r3, #0
 80087e6:	b2db      	uxtb	r3, r3
 80087e8:	e02f      	b.n	800884a <HAL_TIM_PWM_Start_IT+0xa2>
 80087ea:	683b      	ldr	r3, [r7, #0]
 80087ec:	2b08      	cmp	r3, #8
 80087ee:	d109      	bne.n	8008804 <HAL_TIM_PWM_Start_IT+0x5c>
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80087f6:	b2db      	uxtb	r3, r3
 80087f8:	2b01      	cmp	r3, #1
 80087fa:	bf14      	ite	ne
 80087fc:	2301      	movne	r3, #1
 80087fe:	2300      	moveq	r3, #0
 8008800:	b2db      	uxtb	r3, r3
 8008802:	e022      	b.n	800884a <HAL_TIM_PWM_Start_IT+0xa2>
 8008804:	683b      	ldr	r3, [r7, #0]
 8008806:	2b0c      	cmp	r3, #12
 8008808:	d109      	bne.n	800881e <HAL_TIM_PWM_Start_IT+0x76>
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008810:	b2db      	uxtb	r3, r3
 8008812:	2b01      	cmp	r3, #1
 8008814:	bf14      	ite	ne
 8008816:	2301      	movne	r3, #1
 8008818:	2300      	moveq	r3, #0
 800881a:	b2db      	uxtb	r3, r3
 800881c:	e015      	b.n	800884a <HAL_TIM_PWM_Start_IT+0xa2>
 800881e:	683b      	ldr	r3, [r7, #0]
 8008820:	2b10      	cmp	r3, #16
 8008822:	d109      	bne.n	8008838 <HAL_TIM_PWM_Start_IT+0x90>
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800882a:	b2db      	uxtb	r3, r3
 800882c:	2b01      	cmp	r3, #1
 800882e:	bf14      	ite	ne
 8008830:	2301      	movne	r3, #1
 8008832:	2300      	moveq	r3, #0
 8008834:	b2db      	uxtb	r3, r3
 8008836:	e008      	b.n	800884a <HAL_TIM_PWM_Start_IT+0xa2>
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800883e:	b2db      	uxtb	r3, r3
 8008840:	2b01      	cmp	r3, #1
 8008842:	bf14      	ite	ne
 8008844:	2301      	movne	r3, #1
 8008846:	2300      	moveq	r3, #0
 8008848:	b2db      	uxtb	r3, r3
 800884a:	2b00      	cmp	r3, #0
 800884c:	d001      	beq.n	8008852 <HAL_TIM_PWM_Start_IT+0xaa>
  {
    return HAL_ERROR;
 800884e:	2301      	movs	r3, #1
 8008850:	e0e2      	b.n	8008a18 <HAL_TIM_PWM_Start_IT+0x270>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8008852:	683b      	ldr	r3, [r7, #0]
 8008854:	2b00      	cmp	r3, #0
 8008856:	d104      	bne.n	8008862 <HAL_TIM_PWM_Start_IT+0xba>
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	2202      	movs	r2, #2
 800885c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008860:	e023      	b.n	80088aa <HAL_TIM_PWM_Start_IT+0x102>
 8008862:	683b      	ldr	r3, [r7, #0]
 8008864:	2b04      	cmp	r3, #4
 8008866:	d104      	bne.n	8008872 <HAL_TIM_PWM_Start_IT+0xca>
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	2202      	movs	r2, #2
 800886c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008870:	e01b      	b.n	80088aa <HAL_TIM_PWM_Start_IT+0x102>
 8008872:	683b      	ldr	r3, [r7, #0]
 8008874:	2b08      	cmp	r3, #8
 8008876:	d104      	bne.n	8008882 <HAL_TIM_PWM_Start_IT+0xda>
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	2202      	movs	r2, #2
 800887c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008880:	e013      	b.n	80088aa <HAL_TIM_PWM_Start_IT+0x102>
 8008882:	683b      	ldr	r3, [r7, #0]
 8008884:	2b0c      	cmp	r3, #12
 8008886:	d104      	bne.n	8008892 <HAL_TIM_PWM_Start_IT+0xea>
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	2202      	movs	r2, #2
 800888c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008890:	e00b      	b.n	80088aa <HAL_TIM_PWM_Start_IT+0x102>
 8008892:	683b      	ldr	r3, [r7, #0]
 8008894:	2b10      	cmp	r3, #16
 8008896:	d104      	bne.n	80088a2 <HAL_TIM_PWM_Start_IT+0xfa>
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	2202      	movs	r2, #2
 800889c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80088a0:	e003      	b.n	80088aa <HAL_TIM_PWM_Start_IT+0x102>
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	2202      	movs	r2, #2
 80088a6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  switch (Channel)
 80088aa:	683b      	ldr	r3, [r7, #0]
 80088ac:	2b0c      	cmp	r3, #12
 80088ae:	d841      	bhi.n	8008934 <HAL_TIM_PWM_Start_IT+0x18c>
 80088b0:	a201      	add	r2, pc, #4	; (adr r2, 80088b8 <HAL_TIM_PWM_Start_IT+0x110>)
 80088b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80088b6:	bf00      	nop
 80088b8:	080088ed 	.word	0x080088ed
 80088bc:	08008935 	.word	0x08008935
 80088c0:	08008935 	.word	0x08008935
 80088c4:	08008935 	.word	0x08008935
 80088c8:	080088ff 	.word	0x080088ff
 80088cc:	08008935 	.word	0x08008935
 80088d0:	08008935 	.word	0x08008935
 80088d4:	08008935 	.word	0x08008935
 80088d8:	08008911 	.word	0x08008911
 80088dc:	08008935 	.word	0x08008935
 80088e0:	08008935 	.word	0x08008935
 80088e4:	08008935 	.word	0x08008935
 80088e8:	08008923 	.word	0x08008923
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	681b      	ldr	r3, [r3, #0]
 80088f0:	68da      	ldr	r2, [r3, #12]
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	681b      	ldr	r3, [r3, #0]
 80088f6:	f042 0202 	orr.w	r2, r2, #2
 80088fa:	60da      	str	r2, [r3, #12]
      break;
 80088fc:	e01d      	b.n	800893a <HAL_TIM_PWM_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	681b      	ldr	r3, [r3, #0]
 8008902:	68da      	ldr	r2, [r3, #12]
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	681b      	ldr	r3, [r3, #0]
 8008908:	f042 0204 	orr.w	r2, r2, #4
 800890c:	60da      	str	r2, [r3, #12]
      break;
 800890e:	e014      	b.n	800893a <HAL_TIM_PWM_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	681b      	ldr	r3, [r3, #0]
 8008914:	68da      	ldr	r2, [r3, #12]
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	681b      	ldr	r3, [r3, #0]
 800891a:	f042 0208 	orr.w	r2, r2, #8
 800891e:	60da      	str	r2, [r3, #12]
      break;
 8008920:	e00b      	b.n	800893a <HAL_TIM_PWM_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	681b      	ldr	r3, [r3, #0]
 8008926:	68da      	ldr	r2, [r3, #12]
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	681b      	ldr	r3, [r3, #0]
 800892c:	f042 0210 	orr.w	r2, r2, #16
 8008930:	60da      	str	r2, [r3, #12]
      break;
 8008932:	e002      	b.n	800893a <HAL_TIM_PWM_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 8008934:	2301      	movs	r3, #1
 8008936:	73fb      	strb	r3, [r7, #15]
      break;
 8008938:	bf00      	nop
  }

  if (status == HAL_OK)
 800893a:	7bfb      	ldrb	r3, [r7, #15]
 800893c:	2b00      	cmp	r3, #0
 800893e:	d16a      	bne.n	8008a16 <HAL_TIM_PWM_Start_IT+0x26e>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	681b      	ldr	r3, [r3, #0]
 8008944:	2201      	movs	r2, #1
 8008946:	6839      	ldr	r1, [r7, #0]
 8008948:	4618      	mov	r0, r3
 800894a:	f001 f9af 	bl	8009cac <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	681b      	ldr	r3, [r3, #0]
 8008952:	4a33      	ldr	r2, [pc, #204]	; (8008a20 <HAL_TIM_PWM_Start_IT+0x278>)
 8008954:	4293      	cmp	r3, r2
 8008956:	d013      	beq.n	8008980 <HAL_TIM_PWM_Start_IT+0x1d8>
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	681b      	ldr	r3, [r3, #0]
 800895c:	4a31      	ldr	r2, [pc, #196]	; (8008a24 <HAL_TIM_PWM_Start_IT+0x27c>)
 800895e:	4293      	cmp	r3, r2
 8008960:	d00e      	beq.n	8008980 <HAL_TIM_PWM_Start_IT+0x1d8>
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	681b      	ldr	r3, [r3, #0]
 8008966:	4a30      	ldr	r2, [pc, #192]	; (8008a28 <HAL_TIM_PWM_Start_IT+0x280>)
 8008968:	4293      	cmp	r3, r2
 800896a:	d009      	beq.n	8008980 <HAL_TIM_PWM_Start_IT+0x1d8>
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	681b      	ldr	r3, [r3, #0]
 8008970:	4a2e      	ldr	r2, [pc, #184]	; (8008a2c <HAL_TIM_PWM_Start_IT+0x284>)
 8008972:	4293      	cmp	r3, r2
 8008974:	d004      	beq.n	8008980 <HAL_TIM_PWM_Start_IT+0x1d8>
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	681b      	ldr	r3, [r3, #0]
 800897a:	4a2d      	ldr	r2, [pc, #180]	; (8008a30 <HAL_TIM_PWM_Start_IT+0x288>)
 800897c:	4293      	cmp	r3, r2
 800897e:	d101      	bne.n	8008984 <HAL_TIM_PWM_Start_IT+0x1dc>
 8008980:	2301      	movs	r3, #1
 8008982:	e000      	b.n	8008986 <HAL_TIM_PWM_Start_IT+0x1de>
 8008984:	2300      	movs	r3, #0
 8008986:	2b00      	cmp	r3, #0
 8008988:	d007      	beq.n	800899a <HAL_TIM_PWM_Start_IT+0x1f2>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	681b      	ldr	r3, [r3, #0]
 800898e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	681b      	ldr	r3, [r3, #0]
 8008994:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008998:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	681b      	ldr	r3, [r3, #0]
 800899e:	4a20      	ldr	r2, [pc, #128]	; (8008a20 <HAL_TIM_PWM_Start_IT+0x278>)
 80089a0:	4293      	cmp	r3, r2
 80089a2:	d018      	beq.n	80089d6 <HAL_TIM_PWM_Start_IT+0x22e>
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	681b      	ldr	r3, [r3, #0]
 80089a8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80089ac:	d013      	beq.n	80089d6 <HAL_TIM_PWM_Start_IT+0x22e>
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	681b      	ldr	r3, [r3, #0]
 80089b2:	4a20      	ldr	r2, [pc, #128]	; (8008a34 <HAL_TIM_PWM_Start_IT+0x28c>)
 80089b4:	4293      	cmp	r3, r2
 80089b6:	d00e      	beq.n	80089d6 <HAL_TIM_PWM_Start_IT+0x22e>
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	681b      	ldr	r3, [r3, #0]
 80089bc:	4a1e      	ldr	r2, [pc, #120]	; (8008a38 <HAL_TIM_PWM_Start_IT+0x290>)
 80089be:	4293      	cmp	r3, r2
 80089c0:	d009      	beq.n	80089d6 <HAL_TIM_PWM_Start_IT+0x22e>
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	681b      	ldr	r3, [r3, #0]
 80089c6:	4a17      	ldr	r2, [pc, #92]	; (8008a24 <HAL_TIM_PWM_Start_IT+0x27c>)
 80089c8:	4293      	cmp	r3, r2
 80089ca:	d004      	beq.n	80089d6 <HAL_TIM_PWM_Start_IT+0x22e>
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	681b      	ldr	r3, [r3, #0]
 80089d0:	4a15      	ldr	r2, [pc, #84]	; (8008a28 <HAL_TIM_PWM_Start_IT+0x280>)
 80089d2:	4293      	cmp	r3, r2
 80089d4:	d115      	bne.n	8008a02 <HAL_TIM_PWM_Start_IT+0x25a>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	681b      	ldr	r3, [r3, #0]
 80089da:	689a      	ldr	r2, [r3, #8]
 80089dc:	4b17      	ldr	r3, [pc, #92]	; (8008a3c <HAL_TIM_PWM_Start_IT+0x294>)
 80089de:	4013      	ands	r3, r2
 80089e0:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80089e2:	68bb      	ldr	r3, [r7, #8]
 80089e4:	2b06      	cmp	r3, #6
 80089e6:	d015      	beq.n	8008a14 <HAL_TIM_PWM_Start_IT+0x26c>
 80089e8:	68bb      	ldr	r3, [r7, #8]
 80089ea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80089ee:	d011      	beq.n	8008a14 <HAL_TIM_PWM_Start_IT+0x26c>
      {
        __HAL_TIM_ENABLE(htim);
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	681b      	ldr	r3, [r3, #0]
 80089f4:	681a      	ldr	r2, [r3, #0]
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	681b      	ldr	r3, [r3, #0]
 80089fa:	f042 0201 	orr.w	r2, r2, #1
 80089fe:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008a00:	e008      	b.n	8008a14 <HAL_TIM_PWM_Start_IT+0x26c>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	681b      	ldr	r3, [r3, #0]
 8008a06:	681a      	ldr	r2, [r3, #0]
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	681b      	ldr	r3, [r3, #0]
 8008a0c:	f042 0201 	orr.w	r2, r2, #1
 8008a10:	601a      	str	r2, [r3, #0]
 8008a12:	e000      	b.n	8008a16 <HAL_TIM_PWM_Start_IT+0x26e>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008a14:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 8008a16:	7bfb      	ldrb	r3, [r7, #15]
}
 8008a18:	4618      	mov	r0, r3
 8008a1a:	3710      	adds	r7, #16
 8008a1c:	46bd      	mov	sp, r7
 8008a1e:	bd80      	pop	{r7, pc}
 8008a20:	40012c00 	.word	0x40012c00
 8008a24:	40013400 	.word	0x40013400
 8008a28:	40014000 	.word	0x40014000
 8008a2c:	40014400 	.word	0x40014400
 8008a30:	40014800 	.word	0x40014800
 8008a34:	40000400 	.word	0x40000400
 8008a38:	40000800 	.word	0x40000800
 8008a3c:	00010007 	.word	0x00010007

08008a40 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8008a40:	b580      	push	{r7, lr}
 8008a42:	b086      	sub	sp, #24
 8008a44:	af00      	add	r7, sp, #0
 8008a46:	6078      	str	r0, [r7, #4]
 8008a48:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	2b00      	cmp	r3, #0
 8008a4e:	d101      	bne.n	8008a54 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8008a50:	2301      	movs	r3, #1
 8008a52:	e097      	b.n	8008b84 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008a5a:	b2db      	uxtb	r3, r3
 8008a5c:	2b00      	cmp	r3, #0
 8008a5e:	d106      	bne.n	8008a6e <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	2200      	movs	r2, #0
 8008a64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8008a68:	6878      	ldr	r0, [r7, #4]
 8008a6a:	f7fa f863 	bl	8002b34 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	2202      	movs	r2, #2
 8008a72:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	681b      	ldr	r3, [r3, #0]
 8008a7a:	689b      	ldr	r3, [r3, #8]
 8008a7c:	687a      	ldr	r2, [r7, #4]
 8008a7e:	6812      	ldr	r2, [r2, #0]
 8008a80:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 8008a84:	f023 0307 	bic.w	r3, r3, #7
 8008a88:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	681a      	ldr	r2, [r3, #0]
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	3304      	adds	r3, #4
 8008a92:	4619      	mov	r1, r3
 8008a94:	4610      	mov	r0, r2
 8008a96:	f000 fce7 	bl	8009468 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	681b      	ldr	r3, [r3, #0]
 8008a9e:	689b      	ldr	r3, [r3, #8]
 8008aa0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	681b      	ldr	r3, [r3, #0]
 8008aa6:	699b      	ldr	r3, [r3, #24]
 8008aa8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	681b      	ldr	r3, [r3, #0]
 8008aae:	6a1b      	ldr	r3, [r3, #32]
 8008ab0:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8008ab2:	683b      	ldr	r3, [r7, #0]
 8008ab4:	681b      	ldr	r3, [r3, #0]
 8008ab6:	697a      	ldr	r2, [r7, #20]
 8008ab8:	4313      	orrs	r3, r2
 8008aba:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8008abc:	693b      	ldr	r3, [r7, #16]
 8008abe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008ac2:	f023 0303 	bic.w	r3, r3, #3
 8008ac6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8008ac8:	683b      	ldr	r3, [r7, #0]
 8008aca:	689a      	ldr	r2, [r3, #8]
 8008acc:	683b      	ldr	r3, [r7, #0]
 8008ace:	699b      	ldr	r3, [r3, #24]
 8008ad0:	021b      	lsls	r3, r3, #8
 8008ad2:	4313      	orrs	r3, r2
 8008ad4:	693a      	ldr	r2, [r7, #16]
 8008ad6:	4313      	orrs	r3, r2
 8008ad8:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8008ada:	693b      	ldr	r3, [r7, #16]
 8008adc:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8008ae0:	f023 030c 	bic.w	r3, r3, #12
 8008ae4:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8008ae6:	693b      	ldr	r3, [r7, #16]
 8008ae8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008aec:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008af0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8008af2:	683b      	ldr	r3, [r7, #0]
 8008af4:	68da      	ldr	r2, [r3, #12]
 8008af6:	683b      	ldr	r3, [r7, #0]
 8008af8:	69db      	ldr	r3, [r3, #28]
 8008afa:	021b      	lsls	r3, r3, #8
 8008afc:	4313      	orrs	r3, r2
 8008afe:	693a      	ldr	r2, [r7, #16]
 8008b00:	4313      	orrs	r3, r2
 8008b02:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8008b04:	683b      	ldr	r3, [r7, #0]
 8008b06:	691b      	ldr	r3, [r3, #16]
 8008b08:	011a      	lsls	r2, r3, #4
 8008b0a:	683b      	ldr	r3, [r7, #0]
 8008b0c:	6a1b      	ldr	r3, [r3, #32]
 8008b0e:	031b      	lsls	r3, r3, #12
 8008b10:	4313      	orrs	r3, r2
 8008b12:	693a      	ldr	r2, [r7, #16]
 8008b14:	4313      	orrs	r3, r2
 8008b16:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8008b18:	68fb      	ldr	r3, [r7, #12]
 8008b1a:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8008b1e:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8008b20:	68fb      	ldr	r3, [r7, #12]
 8008b22:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8008b26:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8008b28:	683b      	ldr	r3, [r7, #0]
 8008b2a:	685a      	ldr	r2, [r3, #4]
 8008b2c:	683b      	ldr	r3, [r7, #0]
 8008b2e:	695b      	ldr	r3, [r3, #20]
 8008b30:	011b      	lsls	r3, r3, #4
 8008b32:	4313      	orrs	r3, r2
 8008b34:	68fa      	ldr	r2, [r7, #12]
 8008b36:	4313      	orrs	r3, r2
 8008b38:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	681b      	ldr	r3, [r3, #0]
 8008b3e:	697a      	ldr	r2, [r7, #20]
 8008b40:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	681b      	ldr	r3, [r3, #0]
 8008b46:	693a      	ldr	r2, [r7, #16]
 8008b48:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	681b      	ldr	r3, [r3, #0]
 8008b4e:	68fa      	ldr	r2, [r7, #12]
 8008b50:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	2201      	movs	r2, #1
 8008b56:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	2201      	movs	r2, #1
 8008b5e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	2201      	movs	r2, #1
 8008b66:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	2201      	movs	r2, #1
 8008b6e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	2201      	movs	r2, #1
 8008b76:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	2201      	movs	r2, #1
 8008b7e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008b82:	2300      	movs	r3, #0
}
 8008b84:	4618      	mov	r0, r3
 8008b86:	3718      	adds	r7, #24
 8008b88:	46bd      	mov	sp, r7
 8008b8a:	bd80      	pop	{r7, pc}

08008b8c <HAL_TIM_Encoder_Start_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008b8c:	b580      	push	{r7, lr}
 8008b8e:	b084      	sub	sp, #16
 8008b90:	af00      	add	r7, sp, #0
 8008b92:	6078      	str	r0, [r7, #4]
 8008b94:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008b9c:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8008ba4:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008bac:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008bb4:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8008bb6:	683b      	ldr	r3, [r7, #0]
 8008bb8:	2b00      	cmp	r3, #0
 8008bba:	d110      	bne.n	8008bde <HAL_TIM_Encoder_Start_IT+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8008bbc:	7bfb      	ldrb	r3, [r7, #15]
 8008bbe:	2b01      	cmp	r3, #1
 8008bc0:	d102      	bne.n	8008bc8 <HAL_TIM_Encoder_Start_IT+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8008bc2:	7b7b      	ldrb	r3, [r7, #13]
 8008bc4:	2b01      	cmp	r3, #1
 8008bc6:	d001      	beq.n	8008bcc <HAL_TIM_Encoder_Start_IT+0x40>
    {
      return HAL_ERROR;
 8008bc8:	2301      	movs	r3, #1
 8008bca:	e089      	b.n	8008ce0 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	2202      	movs	r2, #2
 8008bd0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	2202      	movs	r2, #2
 8008bd8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008bdc:	e031      	b.n	8008c42 <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8008bde:	683b      	ldr	r3, [r7, #0]
 8008be0:	2b04      	cmp	r3, #4
 8008be2:	d110      	bne.n	8008c06 <HAL_TIM_Encoder_Start_IT+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8008be4:	7bbb      	ldrb	r3, [r7, #14]
 8008be6:	2b01      	cmp	r3, #1
 8008be8:	d102      	bne.n	8008bf0 <HAL_TIM_Encoder_Start_IT+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8008bea:	7b3b      	ldrb	r3, [r7, #12]
 8008bec:	2b01      	cmp	r3, #1
 8008bee:	d001      	beq.n	8008bf4 <HAL_TIM_Encoder_Start_IT+0x68>
    {
      return HAL_ERROR;
 8008bf0:	2301      	movs	r3, #1
 8008bf2:	e075      	b.n	8008ce0 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	2202      	movs	r2, #2
 8008bf8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	2202      	movs	r2, #2
 8008c00:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008c04:	e01d      	b.n	8008c42 <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8008c06:	7bfb      	ldrb	r3, [r7, #15]
 8008c08:	2b01      	cmp	r3, #1
 8008c0a:	d108      	bne.n	8008c1e <HAL_TIM_Encoder_Start_IT+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8008c0c:	7bbb      	ldrb	r3, [r7, #14]
 8008c0e:	2b01      	cmp	r3, #1
 8008c10:	d105      	bne.n	8008c1e <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8008c12:	7b7b      	ldrb	r3, [r7, #13]
 8008c14:	2b01      	cmp	r3, #1
 8008c16:	d102      	bne.n	8008c1e <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8008c18:	7b3b      	ldrb	r3, [r7, #12]
 8008c1a:	2b01      	cmp	r3, #1
 8008c1c:	d001      	beq.n	8008c22 <HAL_TIM_Encoder_Start_IT+0x96>
    {
      return HAL_ERROR;
 8008c1e:	2301      	movs	r3, #1
 8008c20:	e05e      	b.n	8008ce0 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	2202      	movs	r2, #2
 8008c26:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	2202      	movs	r2, #2
 8008c2e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	2202      	movs	r2, #2
 8008c36:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	2202      	movs	r2, #2
 8008c3e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
  }

  /* Enable the encoder interface channels */
  /* Enable the capture compare Interrupts 1 and/or 2 */
  switch (Channel)
 8008c42:	683b      	ldr	r3, [r7, #0]
 8008c44:	2b00      	cmp	r3, #0
 8008c46:	d003      	beq.n	8008c50 <HAL_TIM_Encoder_Start_IT+0xc4>
 8008c48:	683b      	ldr	r3, [r7, #0]
 8008c4a:	2b04      	cmp	r3, #4
 8008c4c:	d010      	beq.n	8008c70 <HAL_TIM_Encoder_Start_IT+0xe4>
 8008c4e:	e01f      	b.n	8008c90 <HAL_TIM_Encoder_Start_IT+0x104>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	681b      	ldr	r3, [r3, #0]
 8008c54:	2201      	movs	r2, #1
 8008c56:	2100      	movs	r1, #0
 8008c58:	4618      	mov	r0, r3
 8008c5a:	f001 f827 	bl	8009cac <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	681b      	ldr	r3, [r3, #0]
 8008c62:	68da      	ldr	r2, [r3, #12]
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	681b      	ldr	r3, [r3, #0]
 8008c68:	f042 0202 	orr.w	r2, r2, #2
 8008c6c:	60da      	str	r2, [r3, #12]
      break;
 8008c6e:	e02e      	b.n	8008cce <HAL_TIM_Encoder_Start_IT+0x142>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	681b      	ldr	r3, [r3, #0]
 8008c74:	2201      	movs	r2, #1
 8008c76:	2104      	movs	r1, #4
 8008c78:	4618      	mov	r0, r3
 8008c7a:	f001 f817 	bl	8009cac <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	681b      	ldr	r3, [r3, #0]
 8008c82:	68da      	ldr	r2, [r3, #12]
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	681b      	ldr	r3, [r3, #0]
 8008c88:	f042 0204 	orr.w	r2, r2, #4
 8008c8c:	60da      	str	r2, [r3, #12]
      break;
 8008c8e:	e01e      	b.n	8008cce <HAL_TIM_Encoder_Start_IT+0x142>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	681b      	ldr	r3, [r3, #0]
 8008c94:	2201      	movs	r2, #1
 8008c96:	2100      	movs	r1, #0
 8008c98:	4618      	mov	r0, r3
 8008c9a:	f001 f807 	bl	8009cac <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	681b      	ldr	r3, [r3, #0]
 8008ca2:	2201      	movs	r2, #1
 8008ca4:	2104      	movs	r1, #4
 8008ca6:	4618      	mov	r0, r3
 8008ca8:	f001 f800 	bl	8009cac <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	681b      	ldr	r3, [r3, #0]
 8008cb0:	68da      	ldr	r2, [r3, #12]
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	681b      	ldr	r3, [r3, #0]
 8008cb6:	f042 0202 	orr.w	r2, r2, #2
 8008cba:	60da      	str	r2, [r3, #12]
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	681b      	ldr	r3, [r3, #0]
 8008cc0:	68da      	ldr	r2, [r3, #12]
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	681b      	ldr	r3, [r3, #0]
 8008cc6:	f042 0204 	orr.w	r2, r2, #4
 8008cca:	60da      	str	r2, [r3, #12]
      break;
 8008ccc:	bf00      	nop
    }
  }

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	681b      	ldr	r3, [r3, #0]
 8008cd2:	681a      	ldr	r2, [r3, #0]
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	681b      	ldr	r3, [r3, #0]
 8008cd8:	f042 0201 	orr.w	r2, r2, #1
 8008cdc:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8008cde:	2300      	movs	r3, #0
}
 8008ce0:	4618      	mov	r0, r3
 8008ce2:	3710      	adds	r7, #16
 8008ce4:	46bd      	mov	sp, r7
 8008ce6:	bd80      	pop	{r7, pc}

08008ce8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008ce8:	b580      	push	{r7, lr}
 8008cea:	b082      	sub	sp, #8
 8008cec:	af00      	add	r7, sp, #0
 8008cee:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	681b      	ldr	r3, [r3, #0]
 8008cf4:	691b      	ldr	r3, [r3, #16]
 8008cf6:	f003 0302 	and.w	r3, r3, #2
 8008cfa:	2b02      	cmp	r3, #2
 8008cfc:	d122      	bne.n	8008d44 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	681b      	ldr	r3, [r3, #0]
 8008d02:	68db      	ldr	r3, [r3, #12]
 8008d04:	f003 0302 	and.w	r3, r3, #2
 8008d08:	2b02      	cmp	r3, #2
 8008d0a:	d11b      	bne.n	8008d44 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	681b      	ldr	r3, [r3, #0]
 8008d10:	f06f 0202 	mvn.w	r2, #2
 8008d14:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	2201      	movs	r2, #1
 8008d1a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	681b      	ldr	r3, [r3, #0]
 8008d20:	699b      	ldr	r3, [r3, #24]
 8008d22:	f003 0303 	and.w	r3, r3, #3
 8008d26:	2b00      	cmp	r3, #0
 8008d28:	d003      	beq.n	8008d32 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008d2a:	6878      	ldr	r0, [r7, #4]
 8008d2c:	f000 fb7e 	bl	800942c <HAL_TIM_IC_CaptureCallback>
 8008d30:	e005      	b.n	8008d3e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008d32:	6878      	ldr	r0, [r7, #4]
 8008d34:	f000 fb70 	bl	8009418 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008d38:	6878      	ldr	r0, [r7, #4]
 8008d3a:	f000 fb81 	bl	8009440 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	2200      	movs	r2, #0
 8008d42:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	681b      	ldr	r3, [r3, #0]
 8008d48:	691b      	ldr	r3, [r3, #16]
 8008d4a:	f003 0304 	and.w	r3, r3, #4
 8008d4e:	2b04      	cmp	r3, #4
 8008d50:	d122      	bne.n	8008d98 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	681b      	ldr	r3, [r3, #0]
 8008d56:	68db      	ldr	r3, [r3, #12]
 8008d58:	f003 0304 	and.w	r3, r3, #4
 8008d5c:	2b04      	cmp	r3, #4
 8008d5e:	d11b      	bne.n	8008d98 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	681b      	ldr	r3, [r3, #0]
 8008d64:	f06f 0204 	mvn.w	r2, #4
 8008d68:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	2202      	movs	r2, #2
 8008d6e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	681b      	ldr	r3, [r3, #0]
 8008d74:	699b      	ldr	r3, [r3, #24]
 8008d76:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008d7a:	2b00      	cmp	r3, #0
 8008d7c:	d003      	beq.n	8008d86 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008d7e:	6878      	ldr	r0, [r7, #4]
 8008d80:	f000 fb54 	bl	800942c <HAL_TIM_IC_CaptureCallback>
 8008d84:	e005      	b.n	8008d92 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008d86:	6878      	ldr	r0, [r7, #4]
 8008d88:	f000 fb46 	bl	8009418 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008d8c:	6878      	ldr	r0, [r7, #4]
 8008d8e:	f000 fb57 	bl	8009440 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	2200      	movs	r2, #0
 8008d96:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	681b      	ldr	r3, [r3, #0]
 8008d9c:	691b      	ldr	r3, [r3, #16]
 8008d9e:	f003 0308 	and.w	r3, r3, #8
 8008da2:	2b08      	cmp	r3, #8
 8008da4:	d122      	bne.n	8008dec <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	681b      	ldr	r3, [r3, #0]
 8008daa:	68db      	ldr	r3, [r3, #12]
 8008dac:	f003 0308 	and.w	r3, r3, #8
 8008db0:	2b08      	cmp	r3, #8
 8008db2:	d11b      	bne.n	8008dec <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	681b      	ldr	r3, [r3, #0]
 8008db8:	f06f 0208 	mvn.w	r2, #8
 8008dbc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	2204      	movs	r2, #4
 8008dc2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	681b      	ldr	r3, [r3, #0]
 8008dc8:	69db      	ldr	r3, [r3, #28]
 8008dca:	f003 0303 	and.w	r3, r3, #3
 8008dce:	2b00      	cmp	r3, #0
 8008dd0:	d003      	beq.n	8008dda <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008dd2:	6878      	ldr	r0, [r7, #4]
 8008dd4:	f000 fb2a 	bl	800942c <HAL_TIM_IC_CaptureCallback>
 8008dd8:	e005      	b.n	8008de6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008dda:	6878      	ldr	r0, [r7, #4]
 8008ddc:	f000 fb1c 	bl	8009418 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008de0:	6878      	ldr	r0, [r7, #4]
 8008de2:	f000 fb2d 	bl	8009440 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	2200      	movs	r2, #0
 8008dea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	681b      	ldr	r3, [r3, #0]
 8008df0:	691b      	ldr	r3, [r3, #16]
 8008df2:	f003 0310 	and.w	r3, r3, #16
 8008df6:	2b10      	cmp	r3, #16
 8008df8:	d122      	bne.n	8008e40 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	681b      	ldr	r3, [r3, #0]
 8008dfe:	68db      	ldr	r3, [r3, #12]
 8008e00:	f003 0310 	and.w	r3, r3, #16
 8008e04:	2b10      	cmp	r3, #16
 8008e06:	d11b      	bne.n	8008e40 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	681b      	ldr	r3, [r3, #0]
 8008e0c:	f06f 0210 	mvn.w	r2, #16
 8008e10:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	2208      	movs	r2, #8
 8008e16:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	681b      	ldr	r3, [r3, #0]
 8008e1c:	69db      	ldr	r3, [r3, #28]
 8008e1e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008e22:	2b00      	cmp	r3, #0
 8008e24:	d003      	beq.n	8008e2e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008e26:	6878      	ldr	r0, [r7, #4]
 8008e28:	f000 fb00 	bl	800942c <HAL_TIM_IC_CaptureCallback>
 8008e2c:	e005      	b.n	8008e3a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008e2e:	6878      	ldr	r0, [r7, #4]
 8008e30:	f000 faf2 	bl	8009418 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008e34:	6878      	ldr	r0, [r7, #4]
 8008e36:	f000 fb03 	bl	8009440 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	2200      	movs	r2, #0
 8008e3e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	681b      	ldr	r3, [r3, #0]
 8008e44:	691b      	ldr	r3, [r3, #16]
 8008e46:	f003 0301 	and.w	r3, r3, #1
 8008e4a:	2b01      	cmp	r3, #1
 8008e4c:	d10e      	bne.n	8008e6c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	681b      	ldr	r3, [r3, #0]
 8008e52:	68db      	ldr	r3, [r3, #12]
 8008e54:	f003 0301 	and.w	r3, r3, #1
 8008e58:	2b01      	cmp	r3, #1
 8008e5a:	d107      	bne.n	8008e6c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	681b      	ldr	r3, [r3, #0]
 8008e60:	f06f 0201 	mvn.w	r2, #1
 8008e64:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008e66:	6878      	ldr	r0, [r7, #4]
 8008e68:	f000 facc 	bl	8009404 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	681b      	ldr	r3, [r3, #0]
 8008e70:	691b      	ldr	r3, [r3, #16]
 8008e72:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008e76:	2b80      	cmp	r3, #128	; 0x80
 8008e78:	d10e      	bne.n	8008e98 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	681b      	ldr	r3, [r3, #0]
 8008e7e:	68db      	ldr	r3, [r3, #12]
 8008e80:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008e84:	2b80      	cmp	r3, #128	; 0x80
 8008e86:	d107      	bne.n	8008e98 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	681b      	ldr	r3, [r3, #0]
 8008e8c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8008e90:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008e92:	6878      	ldr	r0, [r7, #4]
 8008e94:	f001 f964 	bl	800a160 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	681b      	ldr	r3, [r3, #0]
 8008e9c:	691b      	ldr	r3, [r3, #16]
 8008e9e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008ea2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008ea6:	d10e      	bne.n	8008ec6 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	681b      	ldr	r3, [r3, #0]
 8008eac:	68db      	ldr	r3, [r3, #12]
 8008eae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008eb2:	2b80      	cmp	r3, #128	; 0x80
 8008eb4:	d107      	bne.n	8008ec6 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	681b      	ldr	r3, [r3, #0]
 8008eba:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8008ebe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8008ec0:	6878      	ldr	r0, [r7, #4]
 8008ec2:	f001 f957 	bl	800a174 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	681b      	ldr	r3, [r3, #0]
 8008eca:	691b      	ldr	r3, [r3, #16]
 8008ecc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008ed0:	2b40      	cmp	r3, #64	; 0x40
 8008ed2:	d10e      	bne.n	8008ef2 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	681b      	ldr	r3, [r3, #0]
 8008ed8:	68db      	ldr	r3, [r3, #12]
 8008eda:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008ede:	2b40      	cmp	r3, #64	; 0x40
 8008ee0:	d107      	bne.n	8008ef2 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	681b      	ldr	r3, [r3, #0]
 8008ee6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8008eea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008eec:	6878      	ldr	r0, [r7, #4]
 8008eee:	f000 fab1 	bl	8009454 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	681b      	ldr	r3, [r3, #0]
 8008ef6:	691b      	ldr	r3, [r3, #16]
 8008ef8:	f003 0320 	and.w	r3, r3, #32
 8008efc:	2b20      	cmp	r3, #32
 8008efe:	d10e      	bne.n	8008f1e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	681b      	ldr	r3, [r3, #0]
 8008f04:	68db      	ldr	r3, [r3, #12]
 8008f06:	f003 0320 	and.w	r3, r3, #32
 8008f0a:	2b20      	cmp	r3, #32
 8008f0c:	d107      	bne.n	8008f1e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	681b      	ldr	r3, [r3, #0]
 8008f12:	f06f 0220 	mvn.w	r2, #32
 8008f16:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008f18:	6878      	ldr	r0, [r7, #4]
 8008f1a:	f001 f917 	bl	800a14c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	681b      	ldr	r3, [r3, #0]
 8008f22:	691b      	ldr	r3, [r3, #16]
 8008f24:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008f28:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008f2c:	d10f      	bne.n	8008f4e <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	681b      	ldr	r3, [r3, #0]
 8008f32:	68db      	ldr	r3, [r3, #12]
 8008f34:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008f38:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008f3c:	d107      	bne.n	8008f4e <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	681b      	ldr	r3, [r3, #0]
 8008f42:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 8008f46:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8008f48:	6878      	ldr	r0, [r7, #4]
 8008f4a:	f001 f91d 	bl	800a188 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	681b      	ldr	r3, [r3, #0]
 8008f52:	691b      	ldr	r3, [r3, #16]
 8008f54:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008f58:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008f5c:	d10f      	bne.n	8008f7e <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	681b      	ldr	r3, [r3, #0]
 8008f62:	68db      	ldr	r3, [r3, #12]
 8008f64:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008f68:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008f6c:	d107      	bne.n	8008f7e <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	681b      	ldr	r3, [r3, #0]
 8008f72:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 8008f76:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8008f78:	6878      	ldr	r0, [r7, #4]
 8008f7a:	f001 f90f 	bl	800a19c <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	681b      	ldr	r3, [r3, #0]
 8008f82:	691b      	ldr	r3, [r3, #16]
 8008f84:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008f88:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008f8c:	d10f      	bne.n	8008fae <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	681b      	ldr	r3, [r3, #0]
 8008f92:	68db      	ldr	r3, [r3, #12]
 8008f94:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008f98:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008f9c:	d107      	bne.n	8008fae <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	681b      	ldr	r3, [r3, #0]
 8008fa2:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 8008fa6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8008fa8:	6878      	ldr	r0, [r7, #4]
 8008faa:	f001 f901 	bl	800a1b0 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	681b      	ldr	r3, [r3, #0]
 8008fb2:	691b      	ldr	r3, [r3, #16]
 8008fb4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008fb8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8008fbc:	d10f      	bne.n	8008fde <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	681b      	ldr	r3, [r3, #0]
 8008fc2:	68db      	ldr	r3, [r3, #12]
 8008fc4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008fc8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8008fcc:	d107      	bne.n	8008fde <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	681b      	ldr	r3, [r3, #0]
 8008fd2:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 8008fd6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8008fd8:	6878      	ldr	r0, [r7, #4]
 8008fda:	f001 f8f3 	bl	800a1c4 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008fde:	bf00      	nop
 8008fe0:	3708      	adds	r7, #8
 8008fe2:	46bd      	mov	sp, r7
 8008fe4:	bd80      	pop	{r7, pc}
	...

08008fe8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8008fe8:	b580      	push	{r7, lr}
 8008fea:	b086      	sub	sp, #24
 8008fec:	af00      	add	r7, sp, #0
 8008fee:	60f8      	str	r0, [r7, #12]
 8008ff0:	60b9      	str	r1, [r7, #8]
 8008ff2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008ff4:	2300      	movs	r3, #0
 8008ff6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008ff8:	68fb      	ldr	r3, [r7, #12]
 8008ffa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008ffe:	2b01      	cmp	r3, #1
 8009000:	d101      	bne.n	8009006 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8009002:	2302      	movs	r3, #2
 8009004:	e0ff      	b.n	8009206 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8009006:	68fb      	ldr	r3, [r7, #12]
 8009008:	2201      	movs	r2, #1
 800900a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	2b14      	cmp	r3, #20
 8009012:	f200 80f0 	bhi.w	80091f6 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8009016:	a201      	add	r2, pc, #4	; (adr r2, 800901c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8009018:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800901c:	08009071 	.word	0x08009071
 8009020:	080091f7 	.word	0x080091f7
 8009024:	080091f7 	.word	0x080091f7
 8009028:	080091f7 	.word	0x080091f7
 800902c:	080090b1 	.word	0x080090b1
 8009030:	080091f7 	.word	0x080091f7
 8009034:	080091f7 	.word	0x080091f7
 8009038:	080091f7 	.word	0x080091f7
 800903c:	080090f3 	.word	0x080090f3
 8009040:	080091f7 	.word	0x080091f7
 8009044:	080091f7 	.word	0x080091f7
 8009048:	080091f7 	.word	0x080091f7
 800904c:	08009133 	.word	0x08009133
 8009050:	080091f7 	.word	0x080091f7
 8009054:	080091f7 	.word	0x080091f7
 8009058:	080091f7 	.word	0x080091f7
 800905c:	08009175 	.word	0x08009175
 8009060:	080091f7 	.word	0x080091f7
 8009064:	080091f7 	.word	0x080091f7
 8009068:	080091f7 	.word	0x080091f7
 800906c:	080091b5 	.word	0x080091b5
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8009070:	68fb      	ldr	r3, [r7, #12]
 8009072:	681b      	ldr	r3, [r3, #0]
 8009074:	68b9      	ldr	r1, [r7, #8]
 8009076:	4618      	mov	r0, r3
 8009078:	f000 fa86 	bl	8009588 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800907c:	68fb      	ldr	r3, [r7, #12]
 800907e:	681b      	ldr	r3, [r3, #0]
 8009080:	699a      	ldr	r2, [r3, #24]
 8009082:	68fb      	ldr	r3, [r7, #12]
 8009084:	681b      	ldr	r3, [r3, #0]
 8009086:	f042 0208 	orr.w	r2, r2, #8
 800908a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800908c:	68fb      	ldr	r3, [r7, #12]
 800908e:	681b      	ldr	r3, [r3, #0]
 8009090:	699a      	ldr	r2, [r3, #24]
 8009092:	68fb      	ldr	r3, [r7, #12]
 8009094:	681b      	ldr	r3, [r3, #0]
 8009096:	f022 0204 	bic.w	r2, r2, #4
 800909a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800909c:	68fb      	ldr	r3, [r7, #12]
 800909e:	681b      	ldr	r3, [r3, #0]
 80090a0:	6999      	ldr	r1, [r3, #24]
 80090a2:	68bb      	ldr	r3, [r7, #8]
 80090a4:	691a      	ldr	r2, [r3, #16]
 80090a6:	68fb      	ldr	r3, [r7, #12]
 80090a8:	681b      	ldr	r3, [r3, #0]
 80090aa:	430a      	orrs	r2, r1
 80090ac:	619a      	str	r2, [r3, #24]
      break;
 80090ae:	e0a5      	b.n	80091fc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80090b0:	68fb      	ldr	r3, [r7, #12]
 80090b2:	681b      	ldr	r3, [r3, #0]
 80090b4:	68b9      	ldr	r1, [r7, #8]
 80090b6:	4618      	mov	r0, r3
 80090b8:	f000 faf6 	bl	80096a8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80090bc:	68fb      	ldr	r3, [r7, #12]
 80090be:	681b      	ldr	r3, [r3, #0]
 80090c0:	699a      	ldr	r2, [r3, #24]
 80090c2:	68fb      	ldr	r3, [r7, #12]
 80090c4:	681b      	ldr	r3, [r3, #0]
 80090c6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80090ca:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80090cc:	68fb      	ldr	r3, [r7, #12]
 80090ce:	681b      	ldr	r3, [r3, #0]
 80090d0:	699a      	ldr	r2, [r3, #24]
 80090d2:	68fb      	ldr	r3, [r7, #12]
 80090d4:	681b      	ldr	r3, [r3, #0]
 80090d6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80090da:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80090dc:	68fb      	ldr	r3, [r7, #12]
 80090de:	681b      	ldr	r3, [r3, #0]
 80090e0:	6999      	ldr	r1, [r3, #24]
 80090e2:	68bb      	ldr	r3, [r7, #8]
 80090e4:	691b      	ldr	r3, [r3, #16]
 80090e6:	021a      	lsls	r2, r3, #8
 80090e8:	68fb      	ldr	r3, [r7, #12]
 80090ea:	681b      	ldr	r3, [r3, #0]
 80090ec:	430a      	orrs	r2, r1
 80090ee:	619a      	str	r2, [r3, #24]
      break;
 80090f0:	e084      	b.n	80091fc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80090f2:	68fb      	ldr	r3, [r7, #12]
 80090f4:	681b      	ldr	r3, [r3, #0]
 80090f6:	68b9      	ldr	r1, [r7, #8]
 80090f8:	4618      	mov	r0, r3
 80090fa:	f000 fb5f 	bl	80097bc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80090fe:	68fb      	ldr	r3, [r7, #12]
 8009100:	681b      	ldr	r3, [r3, #0]
 8009102:	69da      	ldr	r2, [r3, #28]
 8009104:	68fb      	ldr	r3, [r7, #12]
 8009106:	681b      	ldr	r3, [r3, #0]
 8009108:	f042 0208 	orr.w	r2, r2, #8
 800910c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800910e:	68fb      	ldr	r3, [r7, #12]
 8009110:	681b      	ldr	r3, [r3, #0]
 8009112:	69da      	ldr	r2, [r3, #28]
 8009114:	68fb      	ldr	r3, [r7, #12]
 8009116:	681b      	ldr	r3, [r3, #0]
 8009118:	f022 0204 	bic.w	r2, r2, #4
 800911c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800911e:	68fb      	ldr	r3, [r7, #12]
 8009120:	681b      	ldr	r3, [r3, #0]
 8009122:	69d9      	ldr	r1, [r3, #28]
 8009124:	68bb      	ldr	r3, [r7, #8]
 8009126:	691a      	ldr	r2, [r3, #16]
 8009128:	68fb      	ldr	r3, [r7, #12]
 800912a:	681b      	ldr	r3, [r3, #0]
 800912c:	430a      	orrs	r2, r1
 800912e:	61da      	str	r2, [r3, #28]
      break;
 8009130:	e064      	b.n	80091fc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8009132:	68fb      	ldr	r3, [r7, #12]
 8009134:	681b      	ldr	r3, [r3, #0]
 8009136:	68b9      	ldr	r1, [r7, #8]
 8009138:	4618      	mov	r0, r3
 800913a:	f000 fbc7 	bl	80098cc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800913e:	68fb      	ldr	r3, [r7, #12]
 8009140:	681b      	ldr	r3, [r3, #0]
 8009142:	69da      	ldr	r2, [r3, #28]
 8009144:	68fb      	ldr	r3, [r7, #12]
 8009146:	681b      	ldr	r3, [r3, #0]
 8009148:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800914c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800914e:	68fb      	ldr	r3, [r7, #12]
 8009150:	681b      	ldr	r3, [r3, #0]
 8009152:	69da      	ldr	r2, [r3, #28]
 8009154:	68fb      	ldr	r3, [r7, #12]
 8009156:	681b      	ldr	r3, [r3, #0]
 8009158:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800915c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800915e:	68fb      	ldr	r3, [r7, #12]
 8009160:	681b      	ldr	r3, [r3, #0]
 8009162:	69d9      	ldr	r1, [r3, #28]
 8009164:	68bb      	ldr	r3, [r7, #8]
 8009166:	691b      	ldr	r3, [r3, #16]
 8009168:	021a      	lsls	r2, r3, #8
 800916a:	68fb      	ldr	r3, [r7, #12]
 800916c:	681b      	ldr	r3, [r3, #0]
 800916e:	430a      	orrs	r2, r1
 8009170:	61da      	str	r2, [r3, #28]
      break;
 8009172:	e043      	b.n	80091fc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8009174:	68fb      	ldr	r3, [r7, #12]
 8009176:	681b      	ldr	r3, [r3, #0]
 8009178:	68b9      	ldr	r1, [r7, #8]
 800917a:	4618      	mov	r0, r3
 800917c:	f000 fc30 	bl	80099e0 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8009180:	68fb      	ldr	r3, [r7, #12]
 8009182:	681b      	ldr	r3, [r3, #0]
 8009184:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8009186:	68fb      	ldr	r3, [r7, #12]
 8009188:	681b      	ldr	r3, [r3, #0]
 800918a:	f042 0208 	orr.w	r2, r2, #8
 800918e:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8009190:	68fb      	ldr	r3, [r7, #12]
 8009192:	681b      	ldr	r3, [r3, #0]
 8009194:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8009196:	68fb      	ldr	r3, [r7, #12]
 8009198:	681b      	ldr	r3, [r3, #0]
 800919a:	f022 0204 	bic.w	r2, r2, #4
 800919e:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80091a0:	68fb      	ldr	r3, [r7, #12]
 80091a2:	681b      	ldr	r3, [r3, #0]
 80091a4:	6d19      	ldr	r1, [r3, #80]	; 0x50
 80091a6:	68bb      	ldr	r3, [r7, #8]
 80091a8:	691a      	ldr	r2, [r3, #16]
 80091aa:	68fb      	ldr	r3, [r7, #12]
 80091ac:	681b      	ldr	r3, [r3, #0]
 80091ae:	430a      	orrs	r2, r1
 80091b0:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 80091b2:	e023      	b.n	80091fc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80091b4:	68fb      	ldr	r3, [r7, #12]
 80091b6:	681b      	ldr	r3, [r3, #0]
 80091b8:	68b9      	ldr	r1, [r7, #8]
 80091ba:	4618      	mov	r0, r3
 80091bc:	f000 fc74 	bl	8009aa8 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80091c0:	68fb      	ldr	r3, [r7, #12]
 80091c2:	681b      	ldr	r3, [r3, #0]
 80091c4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80091c6:	68fb      	ldr	r3, [r7, #12]
 80091c8:	681b      	ldr	r3, [r3, #0]
 80091ca:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80091ce:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80091d0:	68fb      	ldr	r3, [r7, #12]
 80091d2:	681b      	ldr	r3, [r3, #0]
 80091d4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80091d6:	68fb      	ldr	r3, [r7, #12]
 80091d8:	681b      	ldr	r3, [r3, #0]
 80091da:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80091de:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80091e0:	68fb      	ldr	r3, [r7, #12]
 80091e2:	681b      	ldr	r3, [r3, #0]
 80091e4:	6d19      	ldr	r1, [r3, #80]	; 0x50
 80091e6:	68bb      	ldr	r3, [r7, #8]
 80091e8:	691b      	ldr	r3, [r3, #16]
 80091ea:	021a      	lsls	r2, r3, #8
 80091ec:	68fb      	ldr	r3, [r7, #12]
 80091ee:	681b      	ldr	r3, [r3, #0]
 80091f0:	430a      	orrs	r2, r1
 80091f2:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 80091f4:	e002      	b.n	80091fc <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80091f6:	2301      	movs	r3, #1
 80091f8:	75fb      	strb	r3, [r7, #23]
      break;
 80091fa:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80091fc:	68fb      	ldr	r3, [r7, #12]
 80091fe:	2200      	movs	r2, #0
 8009200:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8009204:	7dfb      	ldrb	r3, [r7, #23]
}
 8009206:	4618      	mov	r0, r3
 8009208:	3718      	adds	r7, #24
 800920a:	46bd      	mov	sp, r7
 800920c:	bd80      	pop	{r7, pc}
 800920e:	bf00      	nop

08009210 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8009210:	b580      	push	{r7, lr}
 8009212:	b084      	sub	sp, #16
 8009214:	af00      	add	r7, sp, #0
 8009216:	6078      	str	r0, [r7, #4]
 8009218:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800921a:	2300      	movs	r3, #0
 800921c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009224:	2b01      	cmp	r3, #1
 8009226:	d101      	bne.n	800922c <HAL_TIM_ConfigClockSource+0x1c>
 8009228:	2302      	movs	r3, #2
 800922a:	e0de      	b.n	80093ea <HAL_TIM_ConfigClockSource+0x1da>
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	2201      	movs	r2, #1
 8009230:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	2202      	movs	r2, #2
 8009238:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	681b      	ldr	r3, [r3, #0]
 8009240:	689b      	ldr	r3, [r3, #8]
 8009242:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8009244:	68bb      	ldr	r3, [r7, #8]
 8009246:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 800924a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800924e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009250:	68bb      	ldr	r3, [r7, #8]
 8009252:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009256:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	681b      	ldr	r3, [r3, #0]
 800925c:	68ba      	ldr	r2, [r7, #8]
 800925e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8009260:	683b      	ldr	r3, [r7, #0]
 8009262:	681b      	ldr	r3, [r3, #0]
 8009264:	4a63      	ldr	r2, [pc, #396]	; (80093f4 <HAL_TIM_ConfigClockSource+0x1e4>)
 8009266:	4293      	cmp	r3, r2
 8009268:	f000 80a9 	beq.w	80093be <HAL_TIM_ConfigClockSource+0x1ae>
 800926c:	4a61      	ldr	r2, [pc, #388]	; (80093f4 <HAL_TIM_ConfigClockSource+0x1e4>)
 800926e:	4293      	cmp	r3, r2
 8009270:	f200 80ae 	bhi.w	80093d0 <HAL_TIM_ConfigClockSource+0x1c0>
 8009274:	4a60      	ldr	r2, [pc, #384]	; (80093f8 <HAL_TIM_ConfigClockSource+0x1e8>)
 8009276:	4293      	cmp	r3, r2
 8009278:	f000 80a1 	beq.w	80093be <HAL_TIM_ConfigClockSource+0x1ae>
 800927c:	4a5e      	ldr	r2, [pc, #376]	; (80093f8 <HAL_TIM_ConfigClockSource+0x1e8>)
 800927e:	4293      	cmp	r3, r2
 8009280:	f200 80a6 	bhi.w	80093d0 <HAL_TIM_ConfigClockSource+0x1c0>
 8009284:	4a5d      	ldr	r2, [pc, #372]	; (80093fc <HAL_TIM_ConfigClockSource+0x1ec>)
 8009286:	4293      	cmp	r3, r2
 8009288:	f000 8099 	beq.w	80093be <HAL_TIM_ConfigClockSource+0x1ae>
 800928c:	4a5b      	ldr	r2, [pc, #364]	; (80093fc <HAL_TIM_ConfigClockSource+0x1ec>)
 800928e:	4293      	cmp	r3, r2
 8009290:	f200 809e 	bhi.w	80093d0 <HAL_TIM_ConfigClockSource+0x1c0>
 8009294:	4a5a      	ldr	r2, [pc, #360]	; (8009400 <HAL_TIM_ConfigClockSource+0x1f0>)
 8009296:	4293      	cmp	r3, r2
 8009298:	f000 8091 	beq.w	80093be <HAL_TIM_ConfigClockSource+0x1ae>
 800929c:	4a58      	ldr	r2, [pc, #352]	; (8009400 <HAL_TIM_ConfigClockSource+0x1f0>)
 800929e:	4293      	cmp	r3, r2
 80092a0:	f200 8096 	bhi.w	80093d0 <HAL_TIM_ConfigClockSource+0x1c0>
 80092a4:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 80092a8:	f000 8089 	beq.w	80093be <HAL_TIM_ConfigClockSource+0x1ae>
 80092ac:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 80092b0:	f200 808e 	bhi.w	80093d0 <HAL_TIM_ConfigClockSource+0x1c0>
 80092b4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80092b8:	d03e      	beq.n	8009338 <HAL_TIM_ConfigClockSource+0x128>
 80092ba:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80092be:	f200 8087 	bhi.w	80093d0 <HAL_TIM_ConfigClockSource+0x1c0>
 80092c2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80092c6:	f000 8086 	beq.w	80093d6 <HAL_TIM_ConfigClockSource+0x1c6>
 80092ca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80092ce:	d87f      	bhi.n	80093d0 <HAL_TIM_ConfigClockSource+0x1c0>
 80092d0:	2b70      	cmp	r3, #112	; 0x70
 80092d2:	d01a      	beq.n	800930a <HAL_TIM_ConfigClockSource+0xfa>
 80092d4:	2b70      	cmp	r3, #112	; 0x70
 80092d6:	d87b      	bhi.n	80093d0 <HAL_TIM_ConfigClockSource+0x1c0>
 80092d8:	2b60      	cmp	r3, #96	; 0x60
 80092da:	d050      	beq.n	800937e <HAL_TIM_ConfigClockSource+0x16e>
 80092dc:	2b60      	cmp	r3, #96	; 0x60
 80092de:	d877      	bhi.n	80093d0 <HAL_TIM_ConfigClockSource+0x1c0>
 80092e0:	2b50      	cmp	r3, #80	; 0x50
 80092e2:	d03c      	beq.n	800935e <HAL_TIM_ConfigClockSource+0x14e>
 80092e4:	2b50      	cmp	r3, #80	; 0x50
 80092e6:	d873      	bhi.n	80093d0 <HAL_TIM_ConfigClockSource+0x1c0>
 80092e8:	2b40      	cmp	r3, #64	; 0x40
 80092ea:	d058      	beq.n	800939e <HAL_TIM_ConfigClockSource+0x18e>
 80092ec:	2b40      	cmp	r3, #64	; 0x40
 80092ee:	d86f      	bhi.n	80093d0 <HAL_TIM_ConfigClockSource+0x1c0>
 80092f0:	2b30      	cmp	r3, #48	; 0x30
 80092f2:	d064      	beq.n	80093be <HAL_TIM_ConfigClockSource+0x1ae>
 80092f4:	2b30      	cmp	r3, #48	; 0x30
 80092f6:	d86b      	bhi.n	80093d0 <HAL_TIM_ConfigClockSource+0x1c0>
 80092f8:	2b20      	cmp	r3, #32
 80092fa:	d060      	beq.n	80093be <HAL_TIM_ConfigClockSource+0x1ae>
 80092fc:	2b20      	cmp	r3, #32
 80092fe:	d867      	bhi.n	80093d0 <HAL_TIM_ConfigClockSource+0x1c0>
 8009300:	2b00      	cmp	r3, #0
 8009302:	d05c      	beq.n	80093be <HAL_TIM_ConfigClockSource+0x1ae>
 8009304:	2b10      	cmp	r3, #16
 8009306:	d05a      	beq.n	80093be <HAL_TIM_ConfigClockSource+0x1ae>
 8009308:	e062      	b.n	80093d0 <HAL_TIM_ConfigClockSource+0x1c0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	6818      	ldr	r0, [r3, #0]
 800930e:	683b      	ldr	r3, [r7, #0]
 8009310:	6899      	ldr	r1, [r3, #8]
 8009312:	683b      	ldr	r3, [r7, #0]
 8009314:	685a      	ldr	r2, [r3, #4]
 8009316:	683b      	ldr	r3, [r7, #0]
 8009318:	68db      	ldr	r3, [r3, #12]
 800931a:	f000 fca7 	bl	8009c6c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	681b      	ldr	r3, [r3, #0]
 8009322:	689b      	ldr	r3, [r3, #8]
 8009324:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8009326:	68bb      	ldr	r3, [r7, #8]
 8009328:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800932c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	681b      	ldr	r3, [r3, #0]
 8009332:	68ba      	ldr	r2, [r7, #8]
 8009334:	609a      	str	r2, [r3, #8]
      break;
 8009336:	e04f      	b.n	80093d8 <HAL_TIM_ConfigClockSource+0x1c8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	6818      	ldr	r0, [r3, #0]
 800933c:	683b      	ldr	r3, [r7, #0]
 800933e:	6899      	ldr	r1, [r3, #8]
 8009340:	683b      	ldr	r3, [r7, #0]
 8009342:	685a      	ldr	r2, [r3, #4]
 8009344:	683b      	ldr	r3, [r7, #0]
 8009346:	68db      	ldr	r3, [r3, #12]
 8009348:	f000 fc90 	bl	8009c6c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	681b      	ldr	r3, [r3, #0]
 8009350:	689a      	ldr	r2, [r3, #8]
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	681b      	ldr	r3, [r3, #0]
 8009356:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800935a:	609a      	str	r2, [r3, #8]
      break;
 800935c:	e03c      	b.n	80093d8 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	6818      	ldr	r0, [r3, #0]
 8009362:	683b      	ldr	r3, [r7, #0]
 8009364:	6859      	ldr	r1, [r3, #4]
 8009366:	683b      	ldr	r3, [r7, #0]
 8009368:	68db      	ldr	r3, [r3, #12]
 800936a:	461a      	mov	r2, r3
 800936c:	f000 fc02 	bl	8009b74 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	681b      	ldr	r3, [r3, #0]
 8009374:	2150      	movs	r1, #80	; 0x50
 8009376:	4618      	mov	r0, r3
 8009378:	f000 fc5b 	bl	8009c32 <TIM_ITRx_SetConfig>
      break;
 800937c:	e02c      	b.n	80093d8 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	6818      	ldr	r0, [r3, #0]
 8009382:	683b      	ldr	r3, [r7, #0]
 8009384:	6859      	ldr	r1, [r3, #4]
 8009386:	683b      	ldr	r3, [r7, #0]
 8009388:	68db      	ldr	r3, [r3, #12]
 800938a:	461a      	mov	r2, r3
 800938c:	f000 fc21 	bl	8009bd2 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	681b      	ldr	r3, [r3, #0]
 8009394:	2160      	movs	r1, #96	; 0x60
 8009396:	4618      	mov	r0, r3
 8009398:	f000 fc4b 	bl	8009c32 <TIM_ITRx_SetConfig>
      break;
 800939c:	e01c      	b.n	80093d8 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	6818      	ldr	r0, [r3, #0]
 80093a2:	683b      	ldr	r3, [r7, #0]
 80093a4:	6859      	ldr	r1, [r3, #4]
 80093a6:	683b      	ldr	r3, [r7, #0]
 80093a8:	68db      	ldr	r3, [r3, #12]
 80093aa:	461a      	mov	r2, r3
 80093ac:	f000 fbe2 	bl	8009b74 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	681b      	ldr	r3, [r3, #0]
 80093b4:	2140      	movs	r1, #64	; 0x40
 80093b6:	4618      	mov	r0, r3
 80093b8:	f000 fc3b 	bl	8009c32 <TIM_ITRx_SetConfig>
      break;
 80093bc:	e00c      	b.n	80093d8 <HAL_TIM_ConfigClockSource+0x1c8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	681a      	ldr	r2, [r3, #0]
 80093c2:	683b      	ldr	r3, [r7, #0]
 80093c4:	681b      	ldr	r3, [r3, #0]
 80093c6:	4619      	mov	r1, r3
 80093c8:	4610      	mov	r0, r2
 80093ca:	f000 fc32 	bl	8009c32 <TIM_ITRx_SetConfig>
      break;
 80093ce:	e003      	b.n	80093d8 <HAL_TIM_ConfigClockSource+0x1c8>
    }

    default:
      status = HAL_ERROR;
 80093d0:	2301      	movs	r3, #1
 80093d2:	73fb      	strb	r3, [r7, #15]
      break;
 80093d4:	e000      	b.n	80093d8 <HAL_TIM_ConfigClockSource+0x1c8>
      break;
 80093d6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	2201      	movs	r2, #1
 80093dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	2200      	movs	r2, #0
 80093e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80093e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80093ea:	4618      	mov	r0, r3
 80093ec:	3710      	adds	r7, #16
 80093ee:	46bd      	mov	sp, r7
 80093f0:	bd80      	pop	{r7, pc}
 80093f2:	bf00      	nop
 80093f4:	00100070 	.word	0x00100070
 80093f8:	00100040 	.word	0x00100040
 80093fc:	00100030 	.word	0x00100030
 8009400:	00100020 	.word	0x00100020

08009404 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009404:	b480      	push	{r7}
 8009406:	b083      	sub	sp, #12
 8009408:	af00      	add	r7, sp, #0
 800940a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800940c:	bf00      	nop
 800940e:	370c      	adds	r7, #12
 8009410:	46bd      	mov	sp, r7
 8009412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009416:	4770      	bx	lr

08009418 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009418:	b480      	push	{r7}
 800941a:	b083      	sub	sp, #12
 800941c:	af00      	add	r7, sp, #0
 800941e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8009420:	bf00      	nop
 8009422:	370c      	adds	r7, #12
 8009424:	46bd      	mov	sp, r7
 8009426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800942a:	4770      	bx	lr

0800942c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800942c:	b480      	push	{r7}
 800942e:	b083      	sub	sp, #12
 8009430:	af00      	add	r7, sp, #0
 8009432:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8009434:	bf00      	nop
 8009436:	370c      	adds	r7, #12
 8009438:	46bd      	mov	sp, r7
 800943a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800943e:	4770      	bx	lr

08009440 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8009440:	b480      	push	{r7}
 8009442:	b083      	sub	sp, #12
 8009444:	af00      	add	r7, sp, #0
 8009446:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8009448:	bf00      	nop
 800944a:	370c      	adds	r7, #12
 800944c:	46bd      	mov	sp, r7
 800944e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009452:	4770      	bx	lr

08009454 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8009454:	b480      	push	{r7}
 8009456:	b083      	sub	sp, #12
 8009458:	af00      	add	r7, sp, #0
 800945a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800945c:	bf00      	nop
 800945e:	370c      	adds	r7, #12
 8009460:	46bd      	mov	sp, r7
 8009462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009466:	4770      	bx	lr

08009468 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8009468:	b480      	push	{r7}
 800946a:	b085      	sub	sp, #20
 800946c:	af00      	add	r7, sp, #0
 800946e:	6078      	str	r0, [r7, #4]
 8009470:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	681b      	ldr	r3, [r3, #0]
 8009476:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	4a3c      	ldr	r2, [pc, #240]	; (800956c <TIM_Base_SetConfig+0x104>)
 800947c:	4293      	cmp	r3, r2
 800947e:	d00f      	beq.n	80094a0 <TIM_Base_SetConfig+0x38>
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009486:	d00b      	beq.n	80094a0 <TIM_Base_SetConfig+0x38>
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	4a39      	ldr	r2, [pc, #228]	; (8009570 <TIM_Base_SetConfig+0x108>)
 800948c:	4293      	cmp	r3, r2
 800948e:	d007      	beq.n	80094a0 <TIM_Base_SetConfig+0x38>
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	4a38      	ldr	r2, [pc, #224]	; (8009574 <TIM_Base_SetConfig+0x10c>)
 8009494:	4293      	cmp	r3, r2
 8009496:	d003      	beq.n	80094a0 <TIM_Base_SetConfig+0x38>
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	4a37      	ldr	r2, [pc, #220]	; (8009578 <TIM_Base_SetConfig+0x110>)
 800949c:	4293      	cmp	r3, r2
 800949e:	d108      	bne.n	80094b2 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80094a0:	68fb      	ldr	r3, [r7, #12]
 80094a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80094a6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80094a8:	683b      	ldr	r3, [r7, #0]
 80094aa:	685b      	ldr	r3, [r3, #4]
 80094ac:	68fa      	ldr	r2, [r7, #12]
 80094ae:	4313      	orrs	r3, r2
 80094b0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	4a2d      	ldr	r2, [pc, #180]	; (800956c <TIM_Base_SetConfig+0x104>)
 80094b6:	4293      	cmp	r3, r2
 80094b8:	d01b      	beq.n	80094f2 <TIM_Base_SetConfig+0x8a>
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80094c0:	d017      	beq.n	80094f2 <TIM_Base_SetConfig+0x8a>
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	4a2a      	ldr	r2, [pc, #168]	; (8009570 <TIM_Base_SetConfig+0x108>)
 80094c6:	4293      	cmp	r3, r2
 80094c8:	d013      	beq.n	80094f2 <TIM_Base_SetConfig+0x8a>
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	4a29      	ldr	r2, [pc, #164]	; (8009574 <TIM_Base_SetConfig+0x10c>)
 80094ce:	4293      	cmp	r3, r2
 80094d0:	d00f      	beq.n	80094f2 <TIM_Base_SetConfig+0x8a>
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	4a28      	ldr	r2, [pc, #160]	; (8009578 <TIM_Base_SetConfig+0x110>)
 80094d6:	4293      	cmp	r3, r2
 80094d8:	d00b      	beq.n	80094f2 <TIM_Base_SetConfig+0x8a>
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	4a27      	ldr	r2, [pc, #156]	; (800957c <TIM_Base_SetConfig+0x114>)
 80094de:	4293      	cmp	r3, r2
 80094e0:	d007      	beq.n	80094f2 <TIM_Base_SetConfig+0x8a>
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	4a26      	ldr	r2, [pc, #152]	; (8009580 <TIM_Base_SetConfig+0x118>)
 80094e6:	4293      	cmp	r3, r2
 80094e8:	d003      	beq.n	80094f2 <TIM_Base_SetConfig+0x8a>
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	4a25      	ldr	r2, [pc, #148]	; (8009584 <TIM_Base_SetConfig+0x11c>)
 80094ee:	4293      	cmp	r3, r2
 80094f0:	d108      	bne.n	8009504 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80094f2:	68fb      	ldr	r3, [r7, #12]
 80094f4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80094f8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80094fa:	683b      	ldr	r3, [r7, #0]
 80094fc:	68db      	ldr	r3, [r3, #12]
 80094fe:	68fa      	ldr	r2, [r7, #12]
 8009500:	4313      	orrs	r3, r2
 8009502:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009504:	68fb      	ldr	r3, [r7, #12]
 8009506:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800950a:	683b      	ldr	r3, [r7, #0]
 800950c:	695b      	ldr	r3, [r3, #20]
 800950e:	4313      	orrs	r3, r2
 8009510:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	68fa      	ldr	r2, [r7, #12]
 8009516:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009518:	683b      	ldr	r3, [r7, #0]
 800951a:	689a      	ldr	r2, [r3, #8]
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009520:	683b      	ldr	r3, [r7, #0]
 8009522:	681a      	ldr	r2, [r3, #0]
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	4a10      	ldr	r2, [pc, #64]	; (800956c <TIM_Base_SetConfig+0x104>)
 800952c:	4293      	cmp	r3, r2
 800952e:	d00f      	beq.n	8009550 <TIM_Base_SetConfig+0xe8>
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	4a11      	ldr	r2, [pc, #68]	; (8009578 <TIM_Base_SetConfig+0x110>)
 8009534:	4293      	cmp	r3, r2
 8009536:	d00b      	beq.n	8009550 <TIM_Base_SetConfig+0xe8>
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	4a10      	ldr	r2, [pc, #64]	; (800957c <TIM_Base_SetConfig+0x114>)
 800953c:	4293      	cmp	r3, r2
 800953e:	d007      	beq.n	8009550 <TIM_Base_SetConfig+0xe8>
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	4a0f      	ldr	r2, [pc, #60]	; (8009580 <TIM_Base_SetConfig+0x118>)
 8009544:	4293      	cmp	r3, r2
 8009546:	d003      	beq.n	8009550 <TIM_Base_SetConfig+0xe8>
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	4a0e      	ldr	r2, [pc, #56]	; (8009584 <TIM_Base_SetConfig+0x11c>)
 800954c:	4293      	cmp	r3, r2
 800954e:	d103      	bne.n	8009558 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009550:	683b      	ldr	r3, [r7, #0]
 8009552:	691a      	ldr	r2, [r3, #16]
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	2201      	movs	r2, #1
 800955c:	615a      	str	r2, [r3, #20]
}
 800955e:	bf00      	nop
 8009560:	3714      	adds	r7, #20
 8009562:	46bd      	mov	sp, r7
 8009564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009568:	4770      	bx	lr
 800956a:	bf00      	nop
 800956c:	40012c00 	.word	0x40012c00
 8009570:	40000400 	.word	0x40000400
 8009574:	40000800 	.word	0x40000800
 8009578:	40013400 	.word	0x40013400
 800957c:	40014000 	.word	0x40014000
 8009580:	40014400 	.word	0x40014400
 8009584:	40014800 	.word	0x40014800

08009588 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009588:	b480      	push	{r7}
 800958a:	b087      	sub	sp, #28
 800958c:	af00      	add	r7, sp, #0
 800958e:	6078      	str	r0, [r7, #4]
 8009590:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	6a1b      	ldr	r3, [r3, #32]
 8009596:	f023 0201 	bic.w	r2, r3, #1
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	6a1b      	ldr	r3, [r3, #32]
 80095a2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	685b      	ldr	r3, [r3, #4]
 80095a8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	699b      	ldr	r3, [r3, #24]
 80095ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80095b0:	68fb      	ldr	r3, [r7, #12]
 80095b2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80095b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80095ba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80095bc:	68fb      	ldr	r3, [r7, #12]
 80095be:	f023 0303 	bic.w	r3, r3, #3
 80095c2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80095c4:	683b      	ldr	r3, [r7, #0]
 80095c6:	681b      	ldr	r3, [r3, #0]
 80095c8:	68fa      	ldr	r2, [r7, #12]
 80095ca:	4313      	orrs	r3, r2
 80095cc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80095ce:	697b      	ldr	r3, [r7, #20]
 80095d0:	f023 0302 	bic.w	r3, r3, #2
 80095d4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80095d6:	683b      	ldr	r3, [r7, #0]
 80095d8:	689b      	ldr	r3, [r3, #8]
 80095da:	697a      	ldr	r2, [r7, #20]
 80095dc:	4313      	orrs	r3, r2
 80095de:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	4a2c      	ldr	r2, [pc, #176]	; (8009694 <TIM_OC1_SetConfig+0x10c>)
 80095e4:	4293      	cmp	r3, r2
 80095e6:	d00f      	beq.n	8009608 <TIM_OC1_SetConfig+0x80>
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	4a2b      	ldr	r2, [pc, #172]	; (8009698 <TIM_OC1_SetConfig+0x110>)
 80095ec:	4293      	cmp	r3, r2
 80095ee:	d00b      	beq.n	8009608 <TIM_OC1_SetConfig+0x80>
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	4a2a      	ldr	r2, [pc, #168]	; (800969c <TIM_OC1_SetConfig+0x114>)
 80095f4:	4293      	cmp	r3, r2
 80095f6:	d007      	beq.n	8009608 <TIM_OC1_SetConfig+0x80>
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	4a29      	ldr	r2, [pc, #164]	; (80096a0 <TIM_OC1_SetConfig+0x118>)
 80095fc:	4293      	cmp	r3, r2
 80095fe:	d003      	beq.n	8009608 <TIM_OC1_SetConfig+0x80>
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	4a28      	ldr	r2, [pc, #160]	; (80096a4 <TIM_OC1_SetConfig+0x11c>)
 8009604:	4293      	cmp	r3, r2
 8009606:	d10c      	bne.n	8009622 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8009608:	697b      	ldr	r3, [r7, #20]
 800960a:	f023 0308 	bic.w	r3, r3, #8
 800960e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8009610:	683b      	ldr	r3, [r7, #0]
 8009612:	68db      	ldr	r3, [r3, #12]
 8009614:	697a      	ldr	r2, [r7, #20]
 8009616:	4313      	orrs	r3, r2
 8009618:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800961a:	697b      	ldr	r3, [r7, #20]
 800961c:	f023 0304 	bic.w	r3, r3, #4
 8009620:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	4a1b      	ldr	r2, [pc, #108]	; (8009694 <TIM_OC1_SetConfig+0x10c>)
 8009626:	4293      	cmp	r3, r2
 8009628:	d00f      	beq.n	800964a <TIM_OC1_SetConfig+0xc2>
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	4a1a      	ldr	r2, [pc, #104]	; (8009698 <TIM_OC1_SetConfig+0x110>)
 800962e:	4293      	cmp	r3, r2
 8009630:	d00b      	beq.n	800964a <TIM_OC1_SetConfig+0xc2>
 8009632:	687b      	ldr	r3, [r7, #4]
 8009634:	4a19      	ldr	r2, [pc, #100]	; (800969c <TIM_OC1_SetConfig+0x114>)
 8009636:	4293      	cmp	r3, r2
 8009638:	d007      	beq.n	800964a <TIM_OC1_SetConfig+0xc2>
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	4a18      	ldr	r2, [pc, #96]	; (80096a0 <TIM_OC1_SetConfig+0x118>)
 800963e:	4293      	cmp	r3, r2
 8009640:	d003      	beq.n	800964a <TIM_OC1_SetConfig+0xc2>
 8009642:	687b      	ldr	r3, [r7, #4]
 8009644:	4a17      	ldr	r2, [pc, #92]	; (80096a4 <TIM_OC1_SetConfig+0x11c>)
 8009646:	4293      	cmp	r3, r2
 8009648:	d111      	bne.n	800966e <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800964a:	693b      	ldr	r3, [r7, #16]
 800964c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009650:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8009652:	693b      	ldr	r3, [r7, #16]
 8009654:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009658:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800965a:	683b      	ldr	r3, [r7, #0]
 800965c:	695b      	ldr	r3, [r3, #20]
 800965e:	693a      	ldr	r2, [r7, #16]
 8009660:	4313      	orrs	r3, r2
 8009662:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8009664:	683b      	ldr	r3, [r7, #0]
 8009666:	699b      	ldr	r3, [r3, #24]
 8009668:	693a      	ldr	r2, [r7, #16]
 800966a:	4313      	orrs	r3, r2
 800966c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	693a      	ldr	r2, [r7, #16]
 8009672:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	68fa      	ldr	r2, [r7, #12]
 8009678:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800967a:	683b      	ldr	r3, [r7, #0]
 800967c:	685a      	ldr	r2, [r3, #4]
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009682:	687b      	ldr	r3, [r7, #4]
 8009684:	697a      	ldr	r2, [r7, #20]
 8009686:	621a      	str	r2, [r3, #32]
}
 8009688:	bf00      	nop
 800968a:	371c      	adds	r7, #28
 800968c:	46bd      	mov	sp, r7
 800968e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009692:	4770      	bx	lr
 8009694:	40012c00 	.word	0x40012c00
 8009698:	40013400 	.word	0x40013400
 800969c:	40014000 	.word	0x40014000
 80096a0:	40014400 	.word	0x40014400
 80096a4:	40014800 	.word	0x40014800

080096a8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80096a8:	b480      	push	{r7}
 80096aa:	b087      	sub	sp, #28
 80096ac:	af00      	add	r7, sp, #0
 80096ae:	6078      	str	r0, [r7, #4]
 80096b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80096b2:	687b      	ldr	r3, [r7, #4]
 80096b4:	6a1b      	ldr	r3, [r3, #32]
 80096b6:	f023 0210 	bic.w	r2, r3, #16
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	6a1b      	ldr	r3, [r3, #32]
 80096c2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	685b      	ldr	r3, [r3, #4]
 80096c8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	699b      	ldr	r3, [r3, #24]
 80096ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80096d0:	68fb      	ldr	r3, [r7, #12]
 80096d2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80096d6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80096da:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80096dc:	68fb      	ldr	r3, [r7, #12]
 80096de:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80096e2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80096e4:	683b      	ldr	r3, [r7, #0]
 80096e6:	681b      	ldr	r3, [r3, #0]
 80096e8:	021b      	lsls	r3, r3, #8
 80096ea:	68fa      	ldr	r2, [r7, #12]
 80096ec:	4313      	orrs	r3, r2
 80096ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80096f0:	697b      	ldr	r3, [r7, #20]
 80096f2:	f023 0320 	bic.w	r3, r3, #32
 80096f6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80096f8:	683b      	ldr	r3, [r7, #0]
 80096fa:	689b      	ldr	r3, [r3, #8]
 80096fc:	011b      	lsls	r3, r3, #4
 80096fe:	697a      	ldr	r2, [r7, #20]
 8009700:	4313      	orrs	r3, r2
 8009702:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	4a28      	ldr	r2, [pc, #160]	; (80097a8 <TIM_OC2_SetConfig+0x100>)
 8009708:	4293      	cmp	r3, r2
 800970a:	d003      	beq.n	8009714 <TIM_OC2_SetConfig+0x6c>
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	4a27      	ldr	r2, [pc, #156]	; (80097ac <TIM_OC2_SetConfig+0x104>)
 8009710:	4293      	cmp	r3, r2
 8009712:	d10d      	bne.n	8009730 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8009714:	697b      	ldr	r3, [r7, #20]
 8009716:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800971a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800971c:	683b      	ldr	r3, [r7, #0]
 800971e:	68db      	ldr	r3, [r3, #12]
 8009720:	011b      	lsls	r3, r3, #4
 8009722:	697a      	ldr	r2, [r7, #20]
 8009724:	4313      	orrs	r3, r2
 8009726:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8009728:	697b      	ldr	r3, [r7, #20]
 800972a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800972e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009730:	687b      	ldr	r3, [r7, #4]
 8009732:	4a1d      	ldr	r2, [pc, #116]	; (80097a8 <TIM_OC2_SetConfig+0x100>)
 8009734:	4293      	cmp	r3, r2
 8009736:	d00f      	beq.n	8009758 <TIM_OC2_SetConfig+0xb0>
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	4a1c      	ldr	r2, [pc, #112]	; (80097ac <TIM_OC2_SetConfig+0x104>)
 800973c:	4293      	cmp	r3, r2
 800973e:	d00b      	beq.n	8009758 <TIM_OC2_SetConfig+0xb0>
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	4a1b      	ldr	r2, [pc, #108]	; (80097b0 <TIM_OC2_SetConfig+0x108>)
 8009744:	4293      	cmp	r3, r2
 8009746:	d007      	beq.n	8009758 <TIM_OC2_SetConfig+0xb0>
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	4a1a      	ldr	r2, [pc, #104]	; (80097b4 <TIM_OC2_SetConfig+0x10c>)
 800974c:	4293      	cmp	r3, r2
 800974e:	d003      	beq.n	8009758 <TIM_OC2_SetConfig+0xb0>
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	4a19      	ldr	r2, [pc, #100]	; (80097b8 <TIM_OC2_SetConfig+0x110>)
 8009754:	4293      	cmp	r3, r2
 8009756:	d113      	bne.n	8009780 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8009758:	693b      	ldr	r3, [r7, #16]
 800975a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800975e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8009760:	693b      	ldr	r3, [r7, #16]
 8009762:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009766:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8009768:	683b      	ldr	r3, [r7, #0]
 800976a:	695b      	ldr	r3, [r3, #20]
 800976c:	009b      	lsls	r3, r3, #2
 800976e:	693a      	ldr	r2, [r7, #16]
 8009770:	4313      	orrs	r3, r2
 8009772:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8009774:	683b      	ldr	r3, [r7, #0]
 8009776:	699b      	ldr	r3, [r3, #24]
 8009778:	009b      	lsls	r3, r3, #2
 800977a:	693a      	ldr	r2, [r7, #16]
 800977c:	4313      	orrs	r3, r2
 800977e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	693a      	ldr	r2, [r7, #16]
 8009784:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009786:	687b      	ldr	r3, [r7, #4]
 8009788:	68fa      	ldr	r2, [r7, #12]
 800978a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800978c:	683b      	ldr	r3, [r7, #0]
 800978e:	685a      	ldr	r2, [r3, #4]
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	697a      	ldr	r2, [r7, #20]
 8009798:	621a      	str	r2, [r3, #32]
}
 800979a:	bf00      	nop
 800979c:	371c      	adds	r7, #28
 800979e:	46bd      	mov	sp, r7
 80097a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097a4:	4770      	bx	lr
 80097a6:	bf00      	nop
 80097a8:	40012c00 	.word	0x40012c00
 80097ac:	40013400 	.word	0x40013400
 80097b0:	40014000 	.word	0x40014000
 80097b4:	40014400 	.word	0x40014400
 80097b8:	40014800 	.word	0x40014800

080097bc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80097bc:	b480      	push	{r7}
 80097be:	b087      	sub	sp, #28
 80097c0:	af00      	add	r7, sp, #0
 80097c2:	6078      	str	r0, [r7, #4]
 80097c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80097c6:	687b      	ldr	r3, [r7, #4]
 80097c8:	6a1b      	ldr	r3, [r3, #32]
 80097ca:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80097ce:	687b      	ldr	r3, [r7, #4]
 80097d0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80097d2:	687b      	ldr	r3, [r7, #4]
 80097d4:	6a1b      	ldr	r3, [r3, #32]
 80097d6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	685b      	ldr	r3, [r3, #4]
 80097dc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	69db      	ldr	r3, [r3, #28]
 80097e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80097e4:	68fb      	ldr	r3, [r7, #12]
 80097e6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80097ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80097ee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80097f0:	68fb      	ldr	r3, [r7, #12]
 80097f2:	f023 0303 	bic.w	r3, r3, #3
 80097f6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80097f8:	683b      	ldr	r3, [r7, #0]
 80097fa:	681b      	ldr	r3, [r3, #0]
 80097fc:	68fa      	ldr	r2, [r7, #12]
 80097fe:	4313      	orrs	r3, r2
 8009800:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8009802:	697b      	ldr	r3, [r7, #20]
 8009804:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009808:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800980a:	683b      	ldr	r3, [r7, #0]
 800980c:	689b      	ldr	r3, [r3, #8]
 800980e:	021b      	lsls	r3, r3, #8
 8009810:	697a      	ldr	r2, [r7, #20]
 8009812:	4313      	orrs	r3, r2
 8009814:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8009816:	687b      	ldr	r3, [r7, #4]
 8009818:	4a27      	ldr	r2, [pc, #156]	; (80098b8 <TIM_OC3_SetConfig+0xfc>)
 800981a:	4293      	cmp	r3, r2
 800981c:	d003      	beq.n	8009826 <TIM_OC3_SetConfig+0x6a>
 800981e:	687b      	ldr	r3, [r7, #4]
 8009820:	4a26      	ldr	r2, [pc, #152]	; (80098bc <TIM_OC3_SetConfig+0x100>)
 8009822:	4293      	cmp	r3, r2
 8009824:	d10d      	bne.n	8009842 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8009826:	697b      	ldr	r3, [r7, #20]
 8009828:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800982c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800982e:	683b      	ldr	r3, [r7, #0]
 8009830:	68db      	ldr	r3, [r3, #12]
 8009832:	021b      	lsls	r3, r3, #8
 8009834:	697a      	ldr	r2, [r7, #20]
 8009836:	4313      	orrs	r3, r2
 8009838:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800983a:	697b      	ldr	r3, [r7, #20]
 800983c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009840:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	4a1c      	ldr	r2, [pc, #112]	; (80098b8 <TIM_OC3_SetConfig+0xfc>)
 8009846:	4293      	cmp	r3, r2
 8009848:	d00f      	beq.n	800986a <TIM_OC3_SetConfig+0xae>
 800984a:	687b      	ldr	r3, [r7, #4]
 800984c:	4a1b      	ldr	r2, [pc, #108]	; (80098bc <TIM_OC3_SetConfig+0x100>)
 800984e:	4293      	cmp	r3, r2
 8009850:	d00b      	beq.n	800986a <TIM_OC3_SetConfig+0xae>
 8009852:	687b      	ldr	r3, [r7, #4]
 8009854:	4a1a      	ldr	r2, [pc, #104]	; (80098c0 <TIM_OC3_SetConfig+0x104>)
 8009856:	4293      	cmp	r3, r2
 8009858:	d007      	beq.n	800986a <TIM_OC3_SetConfig+0xae>
 800985a:	687b      	ldr	r3, [r7, #4]
 800985c:	4a19      	ldr	r2, [pc, #100]	; (80098c4 <TIM_OC3_SetConfig+0x108>)
 800985e:	4293      	cmp	r3, r2
 8009860:	d003      	beq.n	800986a <TIM_OC3_SetConfig+0xae>
 8009862:	687b      	ldr	r3, [r7, #4]
 8009864:	4a18      	ldr	r2, [pc, #96]	; (80098c8 <TIM_OC3_SetConfig+0x10c>)
 8009866:	4293      	cmp	r3, r2
 8009868:	d113      	bne.n	8009892 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800986a:	693b      	ldr	r3, [r7, #16]
 800986c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009870:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8009872:	693b      	ldr	r3, [r7, #16]
 8009874:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009878:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800987a:	683b      	ldr	r3, [r7, #0]
 800987c:	695b      	ldr	r3, [r3, #20]
 800987e:	011b      	lsls	r3, r3, #4
 8009880:	693a      	ldr	r2, [r7, #16]
 8009882:	4313      	orrs	r3, r2
 8009884:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8009886:	683b      	ldr	r3, [r7, #0]
 8009888:	699b      	ldr	r3, [r3, #24]
 800988a:	011b      	lsls	r3, r3, #4
 800988c:	693a      	ldr	r2, [r7, #16]
 800988e:	4313      	orrs	r3, r2
 8009890:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009892:	687b      	ldr	r3, [r7, #4]
 8009894:	693a      	ldr	r2, [r7, #16]
 8009896:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	68fa      	ldr	r2, [r7, #12]
 800989c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800989e:	683b      	ldr	r3, [r7, #0]
 80098a0:	685a      	ldr	r2, [r3, #4]
 80098a2:	687b      	ldr	r3, [r7, #4]
 80098a4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	697a      	ldr	r2, [r7, #20]
 80098aa:	621a      	str	r2, [r3, #32]
}
 80098ac:	bf00      	nop
 80098ae:	371c      	adds	r7, #28
 80098b0:	46bd      	mov	sp, r7
 80098b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098b6:	4770      	bx	lr
 80098b8:	40012c00 	.word	0x40012c00
 80098bc:	40013400 	.word	0x40013400
 80098c0:	40014000 	.word	0x40014000
 80098c4:	40014400 	.word	0x40014400
 80098c8:	40014800 	.word	0x40014800

080098cc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80098cc:	b480      	push	{r7}
 80098ce:	b087      	sub	sp, #28
 80098d0:	af00      	add	r7, sp, #0
 80098d2:	6078      	str	r0, [r7, #4]
 80098d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80098d6:	687b      	ldr	r3, [r7, #4]
 80098d8:	6a1b      	ldr	r3, [r3, #32]
 80098da:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80098de:	687b      	ldr	r3, [r7, #4]
 80098e0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80098e2:	687b      	ldr	r3, [r7, #4]
 80098e4:	6a1b      	ldr	r3, [r3, #32]
 80098e6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80098e8:	687b      	ldr	r3, [r7, #4]
 80098ea:	685b      	ldr	r3, [r3, #4]
 80098ec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80098ee:	687b      	ldr	r3, [r7, #4]
 80098f0:	69db      	ldr	r3, [r3, #28]
 80098f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80098f4:	68fb      	ldr	r3, [r7, #12]
 80098f6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80098fa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80098fe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8009900:	68fb      	ldr	r3, [r7, #12]
 8009902:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009906:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009908:	683b      	ldr	r3, [r7, #0]
 800990a:	681b      	ldr	r3, [r3, #0]
 800990c:	021b      	lsls	r3, r3, #8
 800990e:	68fa      	ldr	r2, [r7, #12]
 8009910:	4313      	orrs	r3, r2
 8009912:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8009914:	697b      	ldr	r3, [r7, #20]
 8009916:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800991a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800991c:	683b      	ldr	r3, [r7, #0]
 800991e:	689b      	ldr	r3, [r3, #8]
 8009920:	031b      	lsls	r3, r3, #12
 8009922:	697a      	ldr	r2, [r7, #20]
 8009924:	4313      	orrs	r3, r2
 8009926:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8009928:	687b      	ldr	r3, [r7, #4]
 800992a:	4a28      	ldr	r2, [pc, #160]	; (80099cc <TIM_OC4_SetConfig+0x100>)
 800992c:	4293      	cmp	r3, r2
 800992e:	d003      	beq.n	8009938 <TIM_OC4_SetConfig+0x6c>
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	4a27      	ldr	r2, [pc, #156]	; (80099d0 <TIM_OC4_SetConfig+0x104>)
 8009934:	4293      	cmp	r3, r2
 8009936:	d10d      	bne.n	8009954 <TIM_OC4_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8009938:	697b      	ldr	r3, [r7, #20]
 800993a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800993e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8009940:	683b      	ldr	r3, [r7, #0]
 8009942:	68db      	ldr	r3, [r3, #12]
 8009944:	031b      	lsls	r3, r3, #12
 8009946:	697a      	ldr	r2, [r7, #20]
 8009948:	4313      	orrs	r3, r2
 800994a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 800994c:	697b      	ldr	r3, [r7, #20]
 800994e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009952:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009954:	687b      	ldr	r3, [r7, #4]
 8009956:	4a1d      	ldr	r2, [pc, #116]	; (80099cc <TIM_OC4_SetConfig+0x100>)
 8009958:	4293      	cmp	r3, r2
 800995a:	d00f      	beq.n	800997c <TIM_OC4_SetConfig+0xb0>
 800995c:	687b      	ldr	r3, [r7, #4]
 800995e:	4a1c      	ldr	r2, [pc, #112]	; (80099d0 <TIM_OC4_SetConfig+0x104>)
 8009960:	4293      	cmp	r3, r2
 8009962:	d00b      	beq.n	800997c <TIM_OC4_SetConfig+0xb0>
 8009964:	687b      	ldr	r3, [r7, #4]
 8009966:	4a1b      	ldr	r2, [pc, #108]	; (80099d4 <TIM_OC4_SetConfig+0x108>)
 8009968:	4293      	cmp	r3, r2
 800996a:	d007      	beq.n	800997c <TIM_OC4_SetConfig+0xb0>
 800996c:	687b      	ldr	r3, [r7, #4]
 800996e:	4a1a      	ldr	r2, [pc, #104]	; (80099d8 <TIM_OC4_SetConfig+0x10c>)
 8009970:	4293      	cmp	r3, r2
 8009972:	d003      	beq.n	800997c <TIM_OC4_SetConfig+0xb0>
 8009974:	687b      	ldr	r3, [r7, #4]
 8009976:	4a19      	ldr	r2, [pc, #100]	; (80099dc <TIM_OC4_SetConfig+0x110>)
 8009978:	4293      	cmp	r3, r2
 800997a:	d113      	bne.n	80099a4 <TIM_OC4_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800997c:	693b      	ldr	r3, [r7, #16]
 800997e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009982:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8009984:	693b      	ldr	r3, [r7, #16]
 8009986:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800998a:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800998c:	683b      	ldr	r3, [r7, #0]
 800998e:	695b      	ldr	r3, [r3, #20]
 8009990:	019b      	lsls	r3, r3, #6
 8009992:	693a      	ldr	r2, [r7, #16]
 8009994:	4313      	orrs	r3, r2
 8009996:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8009998:	683b      	ldr	r3, [r7, #0]
 800999a:	699b      	ldr	r3, [r3, #24]
 800999c:	019b      	lsls	r3, r3, #6
 800999e:	693a      	ldr	r2, [r7, #16]
 80099a0:	4313      	orrs	r3, r2
 80099a2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80099a4:	687b      	ldr	r3, [r7, #4]
 80099a6:	693a      	ldr	r2, [r7, #16]
 80099a8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80099aa:	687b      	ldr	r3, [r7, #4]
 80099ac:	68fa      	ldr	r2, [r7, #12]
 80099ae:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80099b0:	683b      	ldr	r3, [r7, #0]
 80099b2:	685a      	ldr	r2, [r3, #4]
 80099b4:	687b      	ldr	r3, [r7, #4]
 80099b6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80099b8:	687b      	ldr	r3, [r7, #4]
 80099ba:	697a      	ldr	r2, [r7, #20]
 80099bc:	621a      	str	r2, [r3, #32]
}
 80099be:	bf00      	nop
 80099c0:	371c      	adds	r7, #28
 80099c2:	46bd      	mov	sp, r7
 80099c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099c8:	4770      	bx	lr
 80099ca:	bf00      	nop
 80099cc:	40012c00 	.word	0x40012c00
 80099d0:	40013400 	.word	0x40013400
 80099d4:	40014000 	.word	0x40014000
 80099d8:	40014400 	.word	0x40014400
 80099dc:	40014800 	.word	0x40014800

080099e0 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80099e0:	b480      	push	{r7}
 80099e2:	b087      	sub	sp, #28
 80099e4:	af00      	add	r7, sp, #0
 80099e6:	6078      	str	r0, [r7, #4]
 80099e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80099ea:	687b      	ldr	r3, [r7, #4]
 80099ec:	6a1b      	ldr	r3, [r3, #32]
 80099ee:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80099f2:	687b      	ldr	r3, [r7, #4]
 80099f4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80099f6:	687b      	ldr	r3, [r7, #4]
 80099f8:	6a1b      	ldr	r3, [r3, #32]
 80099fa:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80099fc:	687b      	ldr	r3, [r7, #4]
 80099fe:	685b      	ldr	r3, [r3, #4]
 8009a00:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8009a02:	687b      	ldr	r3, [r7, #4]
 8009a04:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009a06:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8009a08:	68fb      	ldr	r3, [r7, #12]
 8009a0a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009a0e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009a12:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009a14:	683b      	ldr	r3, [r7, #0]
 8009a16:	681b      	ldr	r3, [r3, #0]
 8009a18:	68fa      	ldr	r2, [r7, #12]
 8009a1a:	4313      	orrs	r3, r2
 8009a1c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8009a1e:	693b      	ldr	r3, [r7, #16]
 8009a20:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8009a24:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8009a26:	683b      	ldr	r3, [r7, #0]
 8009a28:	689b      	ldr	r3, [r3, #8]
 8009a2a:	041b      	lsls	r3, r3, #16
 8009a2c:	693a      	ldr	r2, [r7, #16]
 8009a2e:	4313      	orrs	r3, r2
 8009a30:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009a32:	687b      	ldr	r3, [r7, #4]
 8009a34:	4a17      	ldr	r2, [pc, #92]	; (8009a94 <TIM_OC5_SetConfig+0xb4>)
 8009a36:	4293      	cmp	r3, r2
 8009a38:	d00f      	beq.n	8009a5a <TIM_OC5_SetConfig+0x7a>
 8009a3a:	687b      	ldr	r3, [r7, #4]
 8009a3c:	4a16      	ldr	r2, [pc, #88]	; (8009a98 <TIM_OC5_SetConfig+0xb8>)
 8009a3e:	4293      	cmp	r3, r2
 8009a40:	d00b      	beq.n	8009a5a <TIM_OC5_SetConfig+0x7a>
 8009a42:	687b      	ldr	r3, [r7, #4]
 8009a44:	4a15      	ldr	r2, [pc, #84]	; (8009a9c <TIM_OC5_SetConfig+0xbc>)
 8009a46:	4293      	cmp	r3, r2
 8009a48:	d007      	beq.n	8009a5a <TIM_OC5_SetConfig+0x7a>
 8009a4a:	687b      	ldr	r3, [r7, #4]
 8009a4c:	4a14      	ldr	r2, [pc, #80]	; (8009aa0 <TIM_OC5_SetConfig+0xc0>)
 8009a4e:	4293      	cmp	r3, r2
 8009a50:	d003      	beq.n	8009a5a <TIM_OC5_SetConfig+0x7a>
 8009a52:	687b      	ldr	r3, [r7, #4]
 8009a54:	4a13      	ldr	r2, [pc, #76]	; (8009aa4 <TIM_OC5_SetConfig+0xc4>)
 8009a56:	4293      	cmp	r3, r2
 8009a58:	d109      	bne.n	8009a6e <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8009a5a:	697b      	ldr	r3, [r7, #20]
 8009a5c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009a60:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8009a62:	683b      	ldr	r3, [r7, #0]
 8009a64:	695b      	ldr	r3, [r3, #20]
 8009a66:	021b      	lsls	r3, r3, #8
 8009a68:	697a      	ldr	r2, [r7, #20]
 8009a6a:	4313      	orrs	r3, r2
 8009a6c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009a6e:	687b      	ldr	r3, [r7, #4]
 8009a70:	697a      	ldr	r2, [r7, #20]
 8009a72:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	68fa      	ldr	r2, [r7, #12]
 8009a78:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8009a7a:	683b      	ldr	r3, [r7, #0]
 8009a7c:	685a      	ldr	r2, [r3, #4]
 8009a7e:	687b      	ldr	r3, [r7, #4]
 8009a80:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009a82:	687b      	ldr	r3, [r7, #4]
 8009a84:	693a      	ldr	r2, [r7, #16]
 8009a86:	621a      	str	r2, [r3, #32]
}
 8009a88:	bf00      	nop
 8009a8a:	371c      	adds	r7, #28
 8009a8c:	46bd      	mov	sp, r7
 8009a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a92:	4770      	bx	lr
 8009a94:	40012c00 	.word	0x40012c00
 8009a98:	40013400 	.word	0x40013400
 8009a9c:	40014000 	.word	0x40014000
 8009aa0:	40014400 	.word	0x40014400
 8009aa4:	40014800 	.word	0x40014800

08009aa8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8009aa8:	b480      	push	{r7}
 8009aaa:	b087      	sub	sp, #28
 8009aac:	af00      	add	r7, sp, #0
 8009aae:	6078      	str	r0, [r7, #4]
 8009ab0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8009ab2:	687b      	ldr	r3, [r7, #4]
 8009ab4:	6a1b      	ldr	r3, [r3, #32]
 8009ab6:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8009aba:	687b      	ldr	r3, [r7, #4]
 8009abc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009abe:	687b      	ldr	r3, [r7, #4]
 8009ac0:	6a1b      	ldr	r3, [r3, #32]
 8009ac2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009ac4:	687b      	ldr	r3, [r7, #4]
 8009ac6:	685b      	ldr	r3, [r3, #4]
 8009ac8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8009aca:	687b      	ldr	r3, [r7, #4]
 8009acc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009ace:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8009ad0:	68fb      	ldr	r3, [r7, #12]
 8009ad2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8009ad6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009ada:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009adc:	683b      	ldr	r3, [r7, #0]
 8009ade:	681b      	ldr	r3, [r3, #0]
 8009ae0:	021b      	lsls	r3, r3, #8
 8009ae2:	68fa      	ldr	r2, [r7, #12]
 8009ae4:	4313      	orrs	r3, r2
 8009ae6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8009ae8:	693b      	ldr	r3, [r7, #16]
 8009aea:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8009aee:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8009af0:	683b      	ldr	r3, [r7, #0]
 8009af2:	689b      	ldr	r3, [r3, #8]
 8009af4:	051b      	lsls	r3, r3, #20
 8009af6:	693a      	ldr	r2, [r7, #16]
 8009af8:	4313      	orrs	r3, r2
 8009afa:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	4a18      	ldr	r2, [pc, #96]	; (8009b60 <TIM_OC6_SetConfig+0xb8>)
 8009b00:	4293      	cmp	r3, r2
 8009b02:	d00f      	beq.n	8009b24 <TIM_OC6_SetConfig+0x7c>
 8009b04:	687b      	ldr	r3, [r7, #4]
 8009b06:	4a17      	ldr	r2, [pc, #92]	; (8009b64 <TIM_OC6_SetConfig+0xbc>)
 8009b08:	4293      	cmp	r3, r2
 8009b0a:	d00b      	beq.n	8009b24 <TIM_OC6_SetConfig+0x7c>
 8009b0c:	687b      	ldr	r3, [r7, #4]
 8009b0e:	4a16      	ldr	r2, [pc, #88]	; (8009b68 <TIM_OC6_SetConfig+0xc0>)
 8009b10:	4293      	cmp	r3, r2
 8009b12:	d007      	beq.n	8009b24 <TIM_OC6_SetConfig+0x7c>
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	4a15      	ldr	r2, [pc, #84]	; (8009b6c <TIM_OC6_SetConfig+0xc4>)
 8009b18:	4293      	cmp	r3, r2
 8009b1a:	d003      	beq.n	8009b24 <TIM_OC6_SetConfig+0x7c>
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	4a14      	ldr	r2, [pc, #80]	; (8009b70 <TIM_OC6_SetConfig+0xc8>)
 8009b20:	4293      	cmp	r3, r2
 8009b22:	d109      	bne.n	8009b38 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8009b24:	697b      	ldr	r3, [r7, #20]
 8009b26:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8009b2a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8009b2c:	683b      	ldr	r3, [r7, #0]
 8009b2e:	695b      	ldr	r3, [r3, #20]
 8009b30:	029b      	lsls	r3, r3, #10
 8009b32:	697a      	ldr	r2, [r7, #20]
 8009b34:	4313      	orrs	r3, r2
 8009b36:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009b38:	687b      	ldr	r3, [r7, #4]
 8009b3a:	697a      	ldr	r2, [r7, #20]
 8009b3c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8009b3e:	687b      	ldr	r3, [r7, #4]
 8009b40:	68fa      	ldr	r2, [r7, #12]
 8009b42:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8009b44:	683b      	ldr	r3, [r7, #0]
 8009b46:	685a      	ldr	r2, [r3, #4]
 8009b48:	687b      	ldr	r3, [r7, #4]
 8009b4a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009b4c:	687b      	ldr	r3, [r7, #4]
 8009b4e:	693a      	ldr	r2, [r7, #16]
 8009b50:	621a      	str	r2, [r3, #32]
}
 8009b52:	bf00      	nop
 8009b54:	371c      	adds	r7, #28
 8009b56:	46bd      	mov	sp, r7
 8009b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b5c:	4770      	bx	lr
 8009b5e:	bf00      	nop
 8009b60:	40012c00 	.word	0x40012c00
 8009b64:	40013400 	.word	0x40013400
 8009b68:	40014000 	.word	0x40014000
 8009b6c:	40014400 	.word	0x40014400
 8009b70:	40014800 	.word	0x40014800

08009b74 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009b74:	b480      	push	{r7}
 8009b76:	b087      	sub	sp, #28
 8009b78:	af00      	add	r7, sp, #0
 8009b7a:	60f8      	str	r0, [r7, #12]
 8009b7c:	60b9      	str	r1, [r7, #8]
 8009b7e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8009b80:	68fb      	ldr	r3, [r7, #12]
 8009b82:	6a1b      	ldr	r3, [r3, #32]
 8009b84:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009b86:	68fb      	ldr	r3, [r7, #12]
 8009b88:	6a1b      	ldr	r3, [r3, #32]
 8009b8a:	f023 0201 	bic.w	r2, r3, #1
 8009b8e:	68fb      	ldr	r3, [r7, #12]
 8009b90:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009b92:	68fb      	ldr	r3, [r7, #12]
 8009b94:	699b      	ldr	r3, [r3, #24]
 8009b96:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009b98:	693b      	ldr	r3, [r7, #16]
 8009b9a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009b9e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8009ba0:	687b      	ldr	r3, [r7, #4]
 8009ba2:	011b      	lsls	r3, r3, #4
 8009ba4:	693a      	ldr	r2, [r7, #16]
 8009ba6:	4313      	orrs	r3, r2
 8009ba8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8009baa:	697b      	ldr	r3, [r7, #20]
 8009bac:	f023 030a 	bic.w	r3, r3, #10
 8009bb0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8009bb2:	697a      	ldr	r2, [r7, #20]
 8009bb4:	68bb      	ldr	r3, [r7, #8]
 8009bb6:	4313      	orrs	r3, r2
 8009bb8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8009bba:	68fb      	ldr	r3, [r7, #12]
 8009bbc:	693a      	ldr	r2, [r7, #16]
 8009bbe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009bc0:	68fb      	ldr	r3, [r7, #12]
 8009bc2:	697a      	ldr	r2, [r7, #20]
 8009bc4:	621a      	str	r2, [r3, #32]
}
 8009bc6:	bf00      	nop
 8009bc8:	371c      	adds	r7, #28
 8009bca:	46bd      	mov	sp, r7
 8009bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bd0:	4770      	bx	lr

08009bd2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009bd2:	b480      	push	{r7}
 8009bd4:	b087      	sub	sp, #28
 8009bd6:	af00      	add	r7, sp, #0
 8009bd8:	60f8      	str	r0, [r7, #12]
 8009bda:	60b9      	str	r1, [r7, #8]
 8009bdc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009bde:	68fb      	ldr	r3, [r7, #12]
 8009be0:	6a1b      	ldr	r3, [r3, #32]
 8009be2:	f023 0210 	bic.w	r2, r3, #16
 8009be6:	68fb      	ldr	r3, [r7, #12]
 8009be8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009bea:	68fb      	ldr	r3, [r7, #12]
 8009bec:	699b      	ldr	r3, [r3, #24]
 8009bee:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8009bf0:	68fb      	ldr	r3, [r7, #12]
 8009bf2:	6a1b      	ldr	r3, [r3, #32]
 8009bf4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8009bf6:	697b      	ldr	r3, [r7, #20]
 8009bf8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8009bfc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8009bfe:	687b      	ldr	r3, [r7, #4]
 8009c00:	031b      	lsls	r3, r3, #12
 8009c02:	697a      	ldr	r2, [r7, #20]
 8009c04:	4313      	orrs	r3, r2
 8009c06:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009c08:	693b      	ldr	r3, [r7, #16]
 8009c0a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8009c0e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8009c10:	68bb      	ldr	r3, [r7, #8]
 8009c12:	011b      	lsls	r3, r3, #4
 8009c14:	693a      	ldr	r2, [r7, #16]
 8009c16:	4313      	orrs	r3, r2
 8009c18:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8009c1a:	68fb      	ldr	r3, [r7, #12]
 8009c1c:	697a      	ldr	r2, [r7, #20]
 8009c1e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009c20:	68fb      	ldr	r3, [r7, #12]
 8009c22:	693a      	ldr	r2, [r7, #16]
 8009c24:	621a      	str	r2, [r3, #32]
}
 8009c26:	bf00      	nop
 8009c28:	371c      	adds	r7, #28
 8009c2a:	46bd      	mov	sp, r7
 8009c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c30:	4770      	bx	lr

08009c32 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8009c32:	b480      	push	{r7}
 8009c34:	b085      	sub	sp, #20
 8009c36:	af00      	add	r7, sp, #0
 8009c38:	6078      	str	r0, [r7, #4]
 8009c3a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8009c3c:	687b      	ldr	r3, [r7, #4]
 8009c3e:	689b      	ldr	r3, [r3, #8]
 8009c40:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8009c42:	68fb      	ldr	r3, [r7, #12]
 8009c44:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8009c48:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009c4c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8009c4e:	683a      	ldr	r2, [r7, #0]
 8009c50:	68fb      	ldr	r3, [r7, #12]
 8009c52:	4313      	orrs	r3, r2
 8009c54:	f043 0307 	orr.w	r3, r3, #7
 8009c58:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009c5a:	687b      	ldr	r3, [r7, #4]
 8009c5c:	68fa      	ldr	r2, [r7, #12]
 8009c5e:	609a      	str	r2, [r3, #8]
}
 8009c60:	bf00      	nop
 8009c62:	3714      	adds	r7, #20
 8009c64:	46bd      	mov	sp, r7
 8009c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c6a:	4770      	bx	lr

08009c6c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8009c6c:	b480      	push	{r7}
 8009c6e:	b087      	sub	sp, #28
 8009c70:	af00      	add	r7, sp, #0
 8009c72:	60f8      	str	r0, [r7, #12]
 8009c74:	60b9      	str	r1, [r7, #8]
 8009c76:	607a      	str	r2, [r7, #4]
 8009c78:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8009c7a:	68fb      	ldr	r3, [r7, #12]
 8009c7c:	689b      	ldr	r3, [r3, #8]
 8009c7e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009c80:	697b      	ldr	r3, [r7, #20]
 8009c82:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009c86:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8009c88:	683b      	ldr	r3, [r7, #0]
 8009c8a:	021a      	lsls	r2, r3, #8
 8009c8c:	687b      	ldr	r3, [r7, #4]
 8009c8e:	431a      	orrs	r2, r3
 8009c90:	68bb      	ldr	r3, [r7, #8]
 8009c92:	4313      	orrs	r3, r2
 8009c94:	697a      	ldr	r2, [r7, #20]
 8009c96:	4313      	orrs	r3, r2
 8009c98:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009c9a:	68fb      	ldr	r3, [r7, #12]
 8009c9c:	697a      	ldr	r2, [r7, #20]
 8009c9e:	609a      	str	r2, [r3, #8]
}
 8009ca0:	bf00      	nop
 8009ca2:	371c      	adds	r7, #28
 8009ca4:	46bd      	mov	sp, r7
 8009ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009caa:	4770      	bx	lr

08009cac <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8009cac:	b480      	push	{r7}
 8009cae:	b087      	sub	sp, #28
 8009cb0:	af00      	add	r7, sp, #0
 8009cb2:	60f8      	str	r0, [r7, #12]
 8009cb4:	60b9      	str	r1, [r7, #8]
 8009cb6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8009cb8:	68bb      	ldr	r3, [r7, #8]
 8009cba:	f003 031f 	and.w	r3, r3, #31
 8009cbe:	2201      	movs	r2, #1
 8009cc0:	fa02 f303 	lsl.w	r3, r2, r3
 8009cc4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8009cc6:	68fb      	ldr	r3, [r7, #12]
 8009cc8:	6a1a      	ldr	r2, [r3, #32]
 8009cca:	697b      	ldr	r3, [r7, #20]
 8009ccc:	43db      	mvns	r3, r3
 8009cce:	401a      	ands	r2, r3
 8009cd0:	68fb      	ldr	r3, [r7, #12]
 8009cd2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8009cd4:	68fb      	ldr	r3, [r7, #12]
 8009cd6:	6a1a      	ldr	r2, [r3, #32]
 8009cd8:	68bb      	ldr	r3, [r7, #8]
 8009cda:	f003 031f 	and.w	r3, r3, #31
 8009cde:	6879      	ldr	r1, [r7, #4]
 8009ce0:	fa01 f303 	lsl.w	r3, r1, r3
 8009ce4:	431a      	orrs	r2, r3
 8009ce6:	68fb      	ldr	r3, [r7, #12]
 8009ce8:	621a      	str	r2, [r3, #32]
}
 8009cea:	bf00      	nop
 8009cec:	371c      	adds	r7, #28
 8009cee:	46bd      	mov	sp, r7
 8009cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cf4:	4770      	bx	lr
	...

08009cf8 <HAL_TIMEx_PWMN_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8009cf8:	b580      	push	{r7, lr}
 8009cfa:	b084      	sub	sp, #16
 8009cfc:	af00      	add	r7, sp, #0
 8009cfe:	6078      	str	r0, [r7, #4]
 8009d00:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8009d02:	2300      	movs	r3, #0
 8009d04:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8009d06:	683b      	ldr	r3, [r7, #0]
 8009d08:	2b00      	cmp	r3, #0
 8009d0a:	d109      	bne.n	8009d20 <HAL_TIMEx_PWMN_Start_IT+0x28>
 8009d0c:	687b      	ldr	r3, [r7, #4]
 8009d0e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009d12:	b2db      	uxtb	r3, r3
 8009d14:	2b01      	cmp	r3, #1
 8009d16:	bf14      	ite	ne
 8009d18:	2301      	movne	r3, #1
 8009d1a:	2300      	moveq	r3, #0
 8009d1c:	b2db      	uxtb	r3, r3
 8009d1e:	e022      	b.n	8009d66 <HAL_TIMEx_PWMN_Start_IT+0x6e>
 8009d20:	683b      	ldr	r3, [r7, #0]
 8009d22:	2b04      	cmp	r3, #4
 8009d24:	d109      	bne.n	8009d3a <HAL_TIMEx_PWMN_Start_IT+0x42>
 8009d26:	687b      	ldr	r3, [r7, #4]
 8009d28:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009d2c:	b2db      	uxtb	r3, r3
 8009d2e:	2b01      	cmp	r3, #1
 8009d30:	bf14      	ite	ne
 8009d32:	2301      	movne	r3, #1
 8009d34:	2300      	moveq	r3, #0
 8009d36:	b2db      	uxtb	r3, r3
 8009d38:	e015      	b.n	8009d66 <HAL_TIMEx_PWMN_Start_IT+0x6e>
 8009d3a:	683b      	ldr	r3, [r7, #0]
 8009d3c:	2b08      	cmp	r3, #8
 8009d3e:	d109      	bne.n	8009d54 <HAL_TIMEx_PWMN_Start_IT+0x5c>
 8009d40:	687b      	ldr	r3, [r7, #4]
 8009d42:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8009d46:	b2db      	uxtb	r3, r3
 8009d48:	2b01      	cmp	r3, #1
 8009d4a:	bf14      	ite	ne
 8009d4c:	2301      	movne	r3, #1
 8009d4e:	2300      	moveq	r3, #0
 8009d50:	b2db      	uxtb	r3, r3
 8009d52:	e008      	b.n	8009d66 <HAL_TIMEx_PWMN_Start_IT+0x6e>
 8009d54:	687b      	ldr	r3, [r7, #4]
 8009d56:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 8009d5a:	b2db      	uxtb	r3, r3
 8009d5c:	2b01      	cmp	r3, #1
 8009d5e:	bf14      	ite	ne
 8009d60:	2301      	movne	r3, #1
 8009d62:	2300      	moveq	r3, #0
 8009d64:	b2db      	uxtb	r3, r3
 8009d66:	2b00      	cmp	r3, #0
 8009d68:	d001      	beq.n	8009d6e <HAL_TIMEx_PWMN_Start_IT+0x76>
  {
    return HAL_ERROR;
 8009d6a:	2301      	movs	r3, #1
 8009d6c:	e0bc      	b.n	8009ee8 <HAL_TIMEx_PWMN_Start_IT+0x1f0>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8009d6e:	683b      	ldr	r3, [r7, #0]
 8009d70:	2b00      	cmp	r3, #0
 8009d72:	d104      	bne.n	8009d7e <HAL_TIMEx_PWMN_Start_IT+0x86>
 8009d74:	687b      	ldr	r3, [r7, #4]
 8009d76:	2202      	movs	r2, #2
 8009d78:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009d7c:	e013      	b.n	8009da6 <HAL_TIMEx_PWMN_Start_IT+0xae>
 8009d7e:	683b      	ldr	r3, [r7, #0]
 8009d80:	2b04      	cmp	r3, #4
 8009d82:	d104      	bne.n	8009d8e <HAL_TIMEx_PWMN_Start_IT+0x96>
 8009d84:	687b      	ldr	r3, [r7, #4]
 8009d86:	2202      	movs	r2, #2
 8009d88:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009d8c:	e00b      	b.n	8009da6 <HAL_TIMEx_PWMN_Start_IT+0xae>
 8009d8e:	683b      	ldr	r3, [r7, #0]
 8009d90:	2b08      	cmp	r3, #8
 8009d92:	d104      	bne.n	8009d9e <HAL_TIMEx_PWMN_Start_IT+0xa6>
 8009d94:	687b      	ldr	r3, [r7, #4]
 8009d96:	2202      	movs	r2, #2
 8009d98:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8009d9c:	e003      	b.n	8009da6 <HAL_TIMEx_PWMN_Start_IT+0xae>
 8009d9e:	687b      	ldr	r3, [r7, #4]
 8009da0:	2202      	movs	r2, #2
 8009da2:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  switch (Channel)
 8009da6:	683b      	ldr	r3, [r7, #0]
 8009da8:	2b0c      	cmp	r3, #12
 8009daa:	d841      	bhi.n	8009e30 <HAL_TIMEx_PWMN_Start_IT+0x138>
 8009dac:	a201      	add	r2, pc, #4	; (adr r2, 8009db4 <HAL_TIMEx_PWMN_Start_IT+0xbc>)
 8009dae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009db2:	bf00      	nop
 8009db4:	08009de9 	.word	0x08009de9
 8009db8:	08009e31 	.word	0x08009e31
 8009dbc:	08009e31 	.word	0x08009e31
 8009dc0:	08009e31 	.word	0x08009e31
 8009dc4:	08009dfb 	.word	0x08009dfb
 8009dc8:	08009e31 	.word	0x08009e31
 8009dcc:	08009e31 	.word	0x08009e31
 8009dd0:	08009e31 	.word	0x08009e31
 8009dd4:	08009e0d 	.word	0x08009e0d
 8009dd8:	08009e31 	.word	0x08009e31
 8009ddc:	08009e31 	.word	0x08009e31
 8009de0:	08009e31 	.word	0x08009e31
 8009de4:	08009e1f 	.word	0x08009e1f
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8009de8:	687b      	ldr	r3, [r7, #4]
 8009dea:	681b      	ldr	r3, [r3, #0]
 8009dec:	68da      	ldr	r2, [r3, #12]
 8009dee:	687b      	ldr	r3, [r7, #4]
 8009df0:	681b      	ldr	r3, [r3, #0]
 8009df2:	f042 0202 	orr.w	r2, r2, #2
 8009df6:	60da      	str	r2, [r3, #12]
      break;
 8009df8:	e01d      	b.n	8009e36 <HAL_TIMEx_PWMN_Start_IT+0x13e>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8009dfa:	687b      	ldr	r3, [r7, #4]
 8009dfc:	681b      	ldr	r3, [r3, #0]
 8009dfe:	68da      	ldr	r2, [r3, #12]
 8009e00:	687b      	ldr	r3, [r7, #4]
 8009e02:	681b      	ldr	r3, [r3, #0]
 8009e04:	f042 0204 	orr.w	r2, r2, #4
 8009e08:	60da      	str	r2, [r3, #12]
      break;
 8009e0a:	e014      	b.n	8009e36 <HAL_TIMEx_PWMN_Start_IT+0x13e>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8009e0c:	687b      	ldr	r3, [r7, #4]
 8009e0e:	681b      	ldr	r3, [r3, #0]
 8009e10:	68da      	ldr	r2, [r3, #12]
 8009e12:	687b      	ldr	r3, [r7, #4]
 8009e14:	681b      	ldr	r3, [r3, #0]
 8009e16:	f042 0208 	orr.w	r2, r2, #8
 8009e1a:	60da      	str	r2, [r3, #12]
      break;
 8009e1c:	e00b      	b.n	8009e36 <HAL_TIMEx_PWMN_Start_IT+0x13e>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8009e1e:	687b      	ldr	r3, [r7, #4]
 8009e20:	681b      	ldr	r3, [r3, #0]
 8009e22:	68da      	ldr	r2, [r3, #12]
 8009e24:	687b      	ldr	r3, [r7, #4]
 8009e26:	681b      	ldr	r3, [r3, #0]
 8009e28:	f042 0210 	orr.w	r2, r2, #16
 8009e2c:	60da      	str	r2, [r3, #12]
      break;
 8009e2e:	e002      	b.n	8009e36 <HAL_TIMEx_PWMN_Start_IT+0x13e>
    }

    default:
      status = HAL_ERROR;
 8009e30:	2301      	movs	r3, #1
 8009e32:	73fb      	strb	r3, [r7, #15]
      break;
 8009e34:	bf00      	nop
  }

  if (status == HAL_OK)
 8009e36:	7bfb      	ldrb	r3, [r7, #15]
 8009e38:	2b00      	cmp	r3, #0
 8009e3a:	d154      	bne.n	8009ee6 <HAL_TIMEx_PWMN_Start_IT+0x1ee>
  {
    /* Enable the TIM Break interrupt */
    __HAL_TIM_ENABLE_IT(htim, TIM_IT_BREAK);
 8009e3c:	687b      	ldr	r3, [r7, #4]
 8009e3e:	681b      	ldr	r3, [r3, #0]
 8009e40:	68da      	ldr	r2, [r3, #12]
 8009e42:	687b      	ldr	r3, [r7, #4]
 8009e44:	681b      	ldr	r3, [r3, #0]
 8009e46:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8009e4a:	60da      	str	r2, [r3, #12]

    /* Enable the complementary PWM output  */
    TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 8009e4c:	687b      	ldr	r3, [r7, #4]
 8009e4e:	681b      	ldr	r3, [r3, #0]
 8009e50:	2204      	movs	r2, #4
 8009e52:	6839      	ldr	r1, [r7, #0]
 8009e54:	4618      	mov	r0, r3
 8009e56:	f000 f9bf 	bl	800a1d8 <TIM_CCxNChannelCmd>

    /* Enable the Main Output */
    __HAL_TIM_MOE_ENABLE(htim);
 8009e5a:	687b      	ldr	r3, [r7, #4]
 8009e5c:	681b      	ldr	r3, [r3, #0]
 8009e5e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009e60:	687b      	ldr	r3, [r7, #4]
 8009e62:	681b      	ldr	r3, [r3, #0]
 8009e64:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8009e68:	645a      	str	r2, [r3, #68]	; 0x44

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009e6a:	687b      	ldr	r3, [r7, #4]
 8009e6c:	681b      	ldr	r3, [r3, #0]
 8009e6e:	4a20      	ldr	r2, [pc, #128]	; (8009ef0 <HAL_TIMEx_PWMN_Start_IT+0x1f8>)
 8009e70:	4293      	cmp	r3, r2
 8009e72:	d018      	beq.n	8009ea6 <HAL_TIMEx_PWMN_Start_IT+0x1ae>
 8009e74:	687b      	ldr	r3, [r7, #4]
 8009e76:	681b      	ldr	r3, [r3, #0]
 8009e78:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009e7c:	d013      	beq.n	8009ea6 <HAL_TIMEx_PWMN_Start_IT+0x1ae>
 8009e7e:	687b      	ldr	r3, [r7, #4]
 8009e80:	681b      	ldr	r3, [r3, #0]
 8009e82:	4a1c      	ldr	r2, [pc, #112]	; (8009ef4 <HAL_TIMEx_PWMN_Start_IT+0x1fc>)
 8009e84:	4293      	cmp	r3, r2
 8009e86:	d00e      	beq.n	8009ea6 <HAL_TIMEx_PWMN_Start_IT+0x1ae>
 8009e88:	687b      	ldr	r3, [r7, #4]
 8009e8a:	681b      	ldr	r3, [r3, #0]
 8009e8c:	4a1a      	ldr	r2, [pc, #104]	; (8009ef8 <HAL_TIMEx_PWMN_Start_IT+0x200>)
 8009e8e:	4293      	cmp	r3, r2
 8009e90:	d009      	beq.n	8009ea6 <HAL_TIMEx_PWMN_Start_IT+0x1ae>
 8009e92:	687b      	ldr	r3, [r7, #4]
 8009e94:	681b      	ldr	r3, [r3, #0]
 8009e96:	4a19      	ldr	r2, [pc, #100]	; (8009efc <HAL_TIMEx_PWMN_Start_IT+0x204>)
 8009e98:	4293      	cmp	r3, r2
 8009e9a:	d004      	beq.n	8009ea6 <HAL_TIMEx_PWMN_Start_IT+0x1ae>
 8009e9c:	687b      	ldr	r3, [r7, #4]
 8009e9e:	681b      	ldr	r3, [r3, #0]
 8009ea0:	4a17      	ldr	r2, [pc, #92]	; (8009f00 <HAL_TIMEx_PWMN_Start_IT+0x208>)
 8009ea2:	4293      	cmp	r3, r2
 8009ea4:	d115      	bne.n	8009ed2 <HAL_TIMEx_PWMN_Start_IT+0x1da>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009ea6:	687b      	ldr	r3, [r7, #4]
 8009ea8:	681b      	ldr	r3, [r3, #0]
 8009eaa:	689a      	ldr	r2, [r3, #8]
 8009eac:	4b15      	ldr	r3, [pc, #84]	; (8009f04 <HAL_TIMEx_PWMN_Start_IT+0x20c>)
 8009eae:	4013      	ands	r3, r2
 8009eb0:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009eb2:	68bb      	ldr	r3, [r7, #8]
 8009eb4:	2b06      	cmp	r3, #6
 8009eb6:	d015      	beq.n	8009ee4 <HAL_TIMEx_PWMN_Start_IT+0x1ec>
 8009eb8:	68bb      	ldr	r3, [r7, #8]
 8009eba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009ebe:	d011      	beq.n	8009ee4 <HAL_TIMEx_PWMN_Start_IT+0x1ec>
      {
        __HAL_TIM_ENABLE(htim);
 8009ec0:	687b      	ldr	r3, [r7, #4]
 8009ec2:	681b      	ldr	r3, [r3, #0]
 8009ec4:	681a      	ldr	r2, [r3, #0]
 8009ec6:	687b      	ldr	r3, [r7, #4]
 8009ec8:	681b      	ldr	r3, [r3, #0]
 8009eca:	f042 0201 	orr.w	r2, r2, #1
 8009ece:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009ed0:	e008      	b.n	8009ee4 <HAL_TIMEx_PWMN_Start_IT+0x1ec>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8009ed2:	687b      	ldr	r3, [r7, #4]
 8009ed4:	681b      	ldr	r3, [r3, #0]
 8009ed6:	681a      	ldr	r2, [r3, #0]
 8009ed8:	687b      	ldr	r3, [r7, #4]
 8009eda:	681b      	ldr	r3, [r3, #0]
 8009edc:	f042 0201 	orr.w	r2, r2, #1
 8009ee0:	601a      	str	r2, [r3, #0]
 8009ee2:	e000      	b.n	8009ee6 <HAL_TIMEx_PWMN_Start_IT+0x1ee>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009ee4:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 8009ee6:	7bfb      	ldrb	r3, [r7, #15]
}
 8009ee8:	4618      	mov	r0, r3
 8009eea:	3710      	adds	r7, #16
 8009eec:	46bd      	mov	sp, r7
 8009eee:	bd80      	pop	{r7, pc}
 8009ef0:	40012c00 	.word	0x40012c00
 8009ef4:	40000400 	.word	0x40000400
 8009ef8:	40000800 	.word	0x40000800
 8009efc:	40013400 	.word	0x40013400
 8009f00:	40014000 	.word	0x40014000
 8009f04:	00010007 	.word	0x00010007

08009f08 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009f08:	b480      	push	{r7}
 8009f0a:	b085      	sub	sp, #20
 8009f0c:	af00      	add	r7, sp, #0
 8009f0e:	6078      	str	r0, [r7, #4]
 8009f10:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009f12:	687b      	ldr	r3, [r7, #4]
 8009f14:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009f18:	2b01      	cmp	r3, #1
 8009f1a:	d101      	bne.n	8009f20 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009f1c:	2302      	movs	r3, #2
 8009f1e:	e065      	b.n	8009fec <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 8009f20:	687b      	ldr	r3, [r7, #4]
 8009f22:	2201      	movs	r2, #1
 8009f24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009f28:	687b      	ldr	r3, [r7, #4]
 8009f2a:	2202      	movs	r2, #2
 8009f2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009f30:	687b      	ldr	r3, [r7, #4]
 8009f32:	681b      	ldr	r3, [r3, #0]
 8009f34:	685b      	ldr	r3, [r3, #4]
 8009f36:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009f38:	687b      	ldr	r3, [r7, #4]
 8009f3a:	681b      	ldr	r3, [r3, #0]
 8009f3c:	689b      	ldr	r3, [r3, #8]
 8009f3e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8009f40:	687b      	ldr	r3, [r7, #4]
 8009f42:	681b      	ldr	r3, [r3, #0]
 8009f44:	4a2c      	ldr	r2, [pc, #176]	; (8009ff8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8009f46:	4293      	cmp	r3, r2
 8009f48:	d004      	beq.n	8009f54 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8009f4a:	687b      	ldr	r3, [r7, #4]
 8009f4c:	681b      	ldr	r3, [r3, #0]
 8009f4e:	4a2b      	ldr	r2, [pc, #172]	; (8009ffc <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8009f50:	4293      	cmp	r3, r2
 8009f52:	d108      	bne.n	8009f66 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8009f54:	68fb      	ldr	r3, [r7, #12]
 8009f56:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8009f5a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8009f5c:	683b      	ldr	r3, [r7, #0]
 8009f5e:	685b      	ldr	r3, [r3, #4]
 8009f60:	68fa      	ldr	r2, [r7, #12]
 8009f62:	4313      	orrs	r3, r2
 8009f64:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009f66:	68fb      	ldr	r3, [r7, #12]
 8009f68:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8009f6c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009f70:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009f72:	683b      	ldr	r3, [r7, #0]
 8009f74:	681b      	ldr	r3, [r3, #0]
 8009f76:	68fa      	ldr	r2, [r7, #12]
 8009f78:	4313      	orrs	r3, r2
 8009f7a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009f7c:	687b      	ldr	r3, [r7, #4]
 8009f7e:	681b      	ldr	r3, [r3, #0]
 8009f80:	68fa      	ldr	r2, [r7, #12]
 8009f82:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009f84:	687b      	ldr	r3, [r7, #4]
 8009f86:	681b      	ldr	r3, [r3, #0]
 8009f88:	4a1b      	ldr	r2, [pc, #108]	; (8009ff8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8009f8a:	4293      	cmp	r3, r2
 8009f8c:	d018      	beq.n	8009fc0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8009f8e:	687b      	ldr	r3, [r7, #4]
 8009f90:	681b      	ldr	r3, [r3, #0]
 8009f92:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009f96:	d013      	beq.n	8009fc0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8009f98:	687b      	ldr	r3, [r7, #4]
 8009f9a:	681b      	ldr	r3, [r3, #0]
 8009f9c:	4a18      	ldr	r2, [pc, #96]	; (800a000 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8009f9e:	4293      	cmp	r3, r2
 8009fa0:	d00e      	beq.n	8009fc0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8009fa2:	687b      	ldr	r3, [r7, #4]
 8009fa4:	681b      	ldr	r3, [r3, #0]
 8009fa6:	4a17      	ldr	r2, [pc, #92]	; (800a004 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8009fa8:	4293      	cmp	r3, r2
 8009faa:	d009      	beq.n	8009fc0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8009fac:	687b      	ldr	r3, [r7, #4]
 8009fae:	681b      	ldr	r3, [r3, #0]
 8009fb0:	4a12      	ldr	r2, [pc, #72]	; (8009ffc <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8009fb2:	4293      	cmp	r3, r2
 8009fb4:	d004      	beq.n	8009fc0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8009fb6:	687b      	ldr	r3, [r7, #4]
 8009fb8:	681b      	ldr	r3, [r3, #0]
 8009fba:	4a13      	ldr	r2, [pc, #76]	; (800a008 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8009fbc:	4293      	cmp	r3, r2
 8009fbe:	d10c      	bne.n	8009fda <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009fc0:	68bb      	ldr	r3, [r7, #8]
 8009fc2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009fc6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009fc8:	683b      	ldr	r3, [r7, #0]
 8009fca:	689b      	ldr	r3, [r3, #8]
 8009fcc:	68ba      	ldr	r2, [r7, #8]
 8009fce:	4313      	orrs	r3, r2
 8009fd0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009fd2:	687b      	ldr	r3, [r7, #4]
 8009fd4:	681b      	ldr	r3, [r3, #0]
 8009fd6:	68ba      	ldr	r2, [r7, #8]
 8009fd8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009fda:	687b      	ldr	r3, [r7, #4]
 8009fdc:	2201      	movs	r2, #1
 8009fde:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009fe2:	687b      	ldr	r3, [r7, #4]
 8009fe4:	2200      	movs	r2, #0
 8009fe6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009fea:	2300      	movs	r3, #0
}
 8009fec:	4618      	mov	r0, r3
 8009fee:	3714      	adds	r7, #20
 8009ff0:	46bd      	mov	sp, r7
 8009ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ff6:	4770      	bx	lr
 8009ff8:	40012c00 	.word	0x40012c00
 8009ffc:	40013400 	.word	0x40013400
 800a000:	40000400 	.word	0x40000400
 800a004:	40000800 	.word	0x40000800
 800a008:	40014000 	.word	0x40014000

0800a00c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800a00c:	b480      	push	{r7}
 800a00e:	b085      	sub	sp, #20
 800a010:	af00      	add	r7, sp, #0
 800a012:	6078      	str	r0, [r7, #4]
 800a014:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800a016:	2300      	movs	r3, #0
 800a018:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800a01a:	687b      	ldr	r3, [r7, #4]
 800a01c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a020:	2b01      	cmp	r3, #1
 800a022:	d101      	bne.n	800a028 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800a024:	2302      	movs	r3, #2
 800a026:	e087      	b.n	800a138 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>
 800a028:	687b      	ldr	r3, [r7, #4]
 800a02a:	2201      	movs	r2, #1
 800a02c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800a030:	68fb      	ldr	r3, [r7, #12]
 800a032:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800a036:	683b      	ldr	r3, [r7, #0]
 800a038:	68db      	ldr	r3, [r3, #12]
 800a03a:	4313      	orrs	r3, r2
 800a03c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800a03e:	68fb      	ldr	r3, [r7, #12]
 800a040:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800a044:	683b      	ldr	r3, [r7, #0]
 800a046:	689b      	ldr	r3, [r3, #8]
 800a048:	4313      	orrs	r3, r2
 800a04a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800a04c:	68fb      	ldr	r3, [r7, #12]
 800a04e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800a052:	683b      	ldr	r3, [r7, #0]
 800a054:	685b      	ldr	r3, [r3, #4]
 800a056:	4313      	orrs	r3, r2
 800a058:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800a05a:	68fb      	ldr	r3, [r7, #12]
 800a05c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800a060:	683b      	ldr	r3, [r7, #0]
 800a062:	681b      	ldr	r3, [r3, #0]
 800a064:	4313      	orrs	r3, r2
 800a066:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800a068:	68fb      	ldr	r3, [r7, #12]
 800a06a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800a06e:	683b      	ldr	r3, [r7, #0]
 800a070:	691b      	ldr	r3, [r3, #16]
 800a072:	4313      	orrs	r3, r2
 800a074:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800a076:	68fb      	ldr	r3, [r7, #12]
 800a078:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800a07c:	683b      	ldr	r3, [r7, #0]
 800a07e:	695b      	ldr	r3, [r3, #20]
 800a080:	4313      	orrs	r3, r2
 800a082:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800a084:	68fb      	ldr	r3, [r7, #12]
 800a086:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800a08a:	683b      	ldr	r3, [r7, #0]
 800a08c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a08e:	4313      	orrs	r3, r2
 800a090:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800a092:	68fb      	ldr	r3, [r7, #12]
 800a094:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800a098:	683b      	ldr	r3, [r7, #0]
 800a09a:	699b      	ldr	r3, [r3, #24]
 800a09c:	041b      	lsls	r3, r3, #16
 800a09e:	4313      	orrs	r3, r2
 800a0a0:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800a0a2:	687b      	ldr	r3, [r7, #4]
 800a0a4:	681b      	ldr	r3, [r3, #0]
 800a0a6:	4a27      	ldr	r2, [pc, #156]	; (800a144 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 800a0a8:	4293      	cmp	r3, r2
 800a0aa:	d004      	beq.n	800a0b6 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800a0ac:	687b      	ldr	r3, [r7, #4]
 800a0ae:	681b      	ldr	r3, [r3, #0]
 800a0b0:	4a25      	ldr	r2, [pc, #148]	; (800a148 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 800a0b2:	4293      	cmp	r3, r2
 800a0b4:	d106      	bne.n	800a0c4 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800a0b6:	68fb      	ldr	r3, [r7, #12]
 800a0b8:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800a0bc:	683b      	ldr	r3, [r7, #0]
 800a0be:	69db      	ldr	r3, [r3, #28]
 800a0c0:	4313      	orrs	r3, r2
 800a0c2:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800a0c4:	687b      	ldr	r3, [r7, #4]
 800a0c6:	681b      	ldr	r3, [r3, #0]
 800a0c8:	4a1e      	ldr	r2, [pc, #120]	; (800a144 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 800a0ca:	4293      	cmp	r3, r2
 800a0cc:	d004      	beq.n	800a0d8 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
 800a0ce:	687b      	ldr	r3, [r7, #4]
 800a0d0:	681b      	ldr	r3, [r3, #0]
 800a0d2:	4a1d      	ldr	r2, [pc, #116]	; (800a148 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 800a0d4:	4293      	cmp	r3, r2
 800a0d6:	d126      	bne.n	800a126 <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800a0d8:	68fb      	ldr	r3, [r7, #12]
 800a0da:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800a0de:	683b      	ldr	r3, [r7, #0]
 800a0e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a0e2:	051b      	lsls	r3, r3, #20
 800a0e4:	4313      	orrs	r3, r2
 800a0e6:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800a0e8:	68fb      	ldr	r3, [r7, #12]
 800a0ea:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800a0ee:	683b      	ldr	r3, [r7, #0]
 800a0f0:	6a1b      	ldr	r3, [r3, #32]
 800a0f2:	4313      	orrs	r3, r2
 800a0f4:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800a0f6:	68fb      	ldr	r3, [r7, #12]
 800a0f8:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800a0fc:	683b      	ldr	r3, [r7, #0]
 800a0fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a100:	4313      	orrs	r3, r2
 800a102:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800a104:	687b      	ldr	r3, [r7, #4]
 800a106:	681b      	ldr	r3, [r3, #0]
 800a108:	4a0e      	ldr	r2, [pc, #56]	; (800a144 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 800a10a:	4293      	cmp	r3, r2
 800a10c:	d004      	beq.n	800a118 <HAL_TIMEx_ConfigBreakDeadTime+0x10c>
 800a10e:	687b      	ldr	r3, [r7, #4]
 800a110:	681b      	ldr	r3, [r3, #0]
 800a112:	4a0d      	ldr	r2, [pc, #52]	; (800a148 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 800a114:	4293      	cmp	r3, r2
 800a116:	d106      	bne.n	800a126 <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800a118:	68fb      	ldr	r3, [r7, #12]
 800a11a:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800a11e:	683b      	ldr	r3, [r7, #0]
 800a120:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a122:	4313      	orrs	r3, r2
 800a124:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800a126:	687b      	ldr	r3, [r7, #4]
 800a128:	681b      	ldr	r3, [r3, #0]
 800a12a:	68fa      	ldr	r2, [r7, #12]
 800a12c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800a12e:	687b      	ldr	r3, [r7, #4]
 800a130:	2200      	movs	r2, #0
 800a132:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a136:	2300      	movs	r3, #0
}
 800a138:	4618      	mov	r0, r3
 800a13a:	3714      	adds	r7, #20
 800a13c:	46bd      	mov	sp, r7
 800a13e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a142:	4770      	bx	lr
 800a144:	40012c00 	.word	0x40012c00
 800a148:	40013400 	.word	0x40013400

0800a14c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800a14c:	b480      	push	{r7}
 800a14e:	b083      	sub	sp, #12
 800a150:	af00      	add	r7, sp, #0
 800a152:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800a154:	bf00      	nop
 800a156:	370c      	adds	r7, #12
 800a158:	46bd      	mov	sp, r7
 800a15a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a15e:	4770      	bx	lr

0800a160 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800a160:	b480      	push	{r7}
 800a162:	b083      	sub	sp, #12
 800a164:	af00      	add	r7, sp, #0
 800a166:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800a168:	bf00      	nop
 800a16a:	370c      	adds	r7, #12
 800a16c:	46bd      	mov	sp, r7
 800a16e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a172:	4770      	bx	lr

0800a174 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800a174:	b480      	push	{r7}
 800a176:	b083      	sub	sp, #12
 800a178:	af00      	add	r7, sp, #0
 800a17a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800a17c:	bf00      	nop
 800a17e:	370c      	adds	r7, #12
 800a180:	46bd      	mov	sp, r7
 800a182:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a186:	4770      	bx	lr

0800a188 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 800a188:	b480      	push	{r7}
 800a18a:	b083      	sub	sp, #12
 800a18c:	af00      	add	r7, sp, #0
 800a18e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 800a190:	bf00      	nop
 800a192:	370c      	adds	r7, #12
 800a194:	46bd      	mov	sp, r7
 800a196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a19a:	4770      	bx	lr

0800a19c <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 800a19c:	b480      	push	{r7}
 800a19e:	b083      	sub	sp, #12
 800a1a0:	af00      	add	r7, sp, #0
 800a1a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 800a1a4:	bf00      	nop
 800a1a6:	370c      	adds	r7, #12
 800a1a8:	46bd      	mov	sp, r7
 800a1aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1ae:	4770      	bx	lr

0800a1b0 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 800a1b0:	b480      	push	{r7}
 800a1b2:	b083      	sub	sp, #12
 800a1b4:	af00      	add	r7, sp, #0
 800a1b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 800a1b8:	bf00      	nop
 800a1ba:	370c      	adds	r7, #12
 800a1bc:	46bd      	mov	sp, r7
 800a1be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1c2:	4770      	bx	lr

0800a1c4 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 800a1c4:	b480      	push	{r7}
 800a1c6:	b083      	sub	sp, #12
 800a1c8:	af00      	add	r7, sp, #0
 800a1ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 800a1cc:	bf00      	nop
 800a1ce:	370c      	adds	r7, #12
 800a1d0:	46bd      	mov	sp, r7
 800a1d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1d6:	4770      	bx	lr

0800a1d8 <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 800a1d8:	b480      	push	{r7}
 800a1da:	b087      	sub	sp, #28
 800a1dc:	af00      	add	r7, sp, #0
 800a1de:	60f8      	str	r0, [r7, #12]
 800a1e0:	60b9      	str	r1, [r7, #8]
 800a1e2:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800a1e4:	68bb      	ldr	r3, [r7, #8]
 800a1e6:	f003 031f 	and.w	r3, r3, #31
 800a1ea:	2204      	movs	r2, #4
 800a1ec:	fa02 f303 	lsl.w	r3, r2, r3
 800a1f0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 800a1f2:	68fb      	ldr	r3, [r7, #12]
 800a1f4:	6a1a      	ldr	r2, [r3, #32]
 800a1f6:	697b      	ldr	r3, [r7, #20]
 800a1f8:	43db      	mvns	r3, r3
 800a1fa:	401a      	ands	r2, r3
 800a1fc:	68fb      	ldr	r3, [r7, #12]
 800a1fe:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800a200:	68fb      	ldr	r3, [r7, #12]
 800a202:	6a1a      	ldr	r2, [r3, #32]
 800a204:	68bb      	ldr	r3, [r7, #8]
 800a206:	f003 031f 	and.w	r3, r3, #31
 800a20a:	6879      	ldr	r1, [r7, #4]
 800a20c:	fa01 f303 	lsl.w	r3, r1, r3
 800a210:	431a      	orrs	r2, r3
 800a212:	68fb      	ldr	r3, [r7, #12]
 800a214:	621a      	str	r2, [r3, #32]
}
 800a216:	bf00      	nop
 800a218:	371c      	adds	r7, #28
 800a21a:	46bd      	mov	sp, r7
 800a21c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a220:	4770      	bx	lr

0800a222 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a222:	b580      	push	{r7, lr}
 800a224:	b082      	sub	sp, #8
 800a226:	af00      	add	r7, sp, #0
 800a228:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a22a:	687b      	ldr	r3, [r7, #4]
 800a22c:	2b00      	cmp	r3, #0
 800a22e:	d101      	bne.n	800a234 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a230:	2301      	movs	r3, #1
 800a232:	e042      	b.n	800a2ba <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800a234:	687b      	ldr	r3, [r7, #4]
 800a236:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a23a:	2b00      	cmp	r3, #0
 800a23c:	d106      	bne.n	800a24c <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a23e:	687b      	ldr	r3, [r7, #4]
 800a240:	2200      	movs	r2, #0
 800a242:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800a246:	6878      	ldr	r0, [r7, #4]
 800a248:	f7f8 fd32 	bl	8002cb0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a24c:	687b      	ldr	r3, [r7, #4]
 800a24e:	2224      	movs	r2, #36	; 0x24
 800a250:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800a254:	687b      	ldr	r3, [r7, #4]
 800a256:	681b      	ldr	r3, [r3, #0]
 800a258:	681a      	ldr	r2, [r3, #0]
 800a25a:	687b      	ldr	r3, [r7, #4]
 800a25c:	681b      	ldr	r3, [r3, #0]
 800a25e:	f022 0201 	bic.w	r2, r2, #1
 800a262:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800a264:	6878      	ldr	r0, [r7, #4]
 800a266:	f000 fbfb 	bl	800aa60 <UART_SetConfig>
 800a26a:	4603      	mov	r3, r0
 800a26c:	2b01      	cmp	r3, #1
 800a26e:	d101      	bne.n	800a274 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800a270:	2301      	movs	r3, #1
 800a272:	e022      	b.n	800a2ba <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800a274:	687b      	ldr	r3, [r7, #4]
 800a276:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a278:	2b00      	cmp	r3, #0
 800a27a:	d002      	beq.n	800a282 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800a27c:	6878      	ldr	r0, [r7, #4]
 800a27e:	f000 febb 	bl	800aff8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a282:	687b      	ldr	r3, [r7, #4]
 800a284:	681b      	ldr	r3, [r3, #0]
 800a286:	685a      	ldr	r2, [r3, #4]
 800a288:	687b      	ldr	r3, [r7, #4]
 800a28a:	681b      	ldr	r3, [r3, #0]
 800a28c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800a290:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a292:	687b      	ldr	r3, [r7, #4]
 800a294:	681b      	ldr	r3, [r3, #0]
 800a296:	689a      	ldr	r2, [r3, #8]
 800a298:	687b      	ldr	r3, [r7, #4]
 800a29a:	681b      	ldr	r3, [r3, #0]
 800a29c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800a2a0:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800a2a2:	687b      	ldr	r3, [r7, #4]
 800a2a4:	681b      	ldr	r3, [r3, #0]
 800a2a6:	681a      	ldr	r2, [r3, #0]
 800a2a8:	687b      	ldr	r3, [r7, #4]
 800a2aa:	681b      	ldr	r3, [r3, #0]
 800a2ac:	f042 0201 	orr.w	r2, r2, #1
 800a2b0:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800a2b2:	6878      	ldr	r0, [r7, #4]
 800a2b4:	f000 ff42 	bl	800b13c <UART_CheckIdleState>
 800a2b8:	4603      	mov	r3, r0
}
 800a2ba:	4618      	mov	r0, r3
 800a2bc:	3708      	adds	r7, #8
 800a2be:	46bd      	mov	sp, r7
 800a2c0:	bd80      	pop	{r7, pc}

0800a2c2 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a2c2:	b580      	push	{r7, lr}
 800a2c4:	b08a      	sub	sp, #40	; 0x28
 800a2c6:	af02      	add	r7, sp, #8
 800a2c8:	60f8      	str	r0, [r7, #12]
 800a2ca:	60b9      	str	r1, [r7, #8]
 800a2cc:	603b      	str	r3, [r7, #0]
 800a2ce:	4613      	mov	r3, r2
 800a2d0:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800a2d2:	68fb      	ldr	r3, [r7, #12]
 800a2d4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a2d8:	2b20      	cmp	r3, #32
 800a2da:	f040 8083 	bne.w	800a3e4 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 800a2de:	68bb      	ldr	r3, [r7, #8]
 800a2e0:	2b00      	cmp	r3, #0
 800a2e2:	d002      	beq.n	800a2ea <HAL_UART_Transmit+0x28>
 800a2e4:	88fb      	ldrh	r3, [r7, #6]
 800a2e6:	2b00      	cmp	r3, #0
 800a2e8:	d101      	bne.n	800a2ee <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 800a2ea:	2301      	movs	r3, #1
 800a2ec:	e07b      	b.n	800a3e6 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 800a2ee:	68fb      	ldr	r3, [r7, #12]
 800a2f0:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800a2f4:	2b01      	cmp	r3, #1
 800a2f6:	d101      	bne.n	800a2fc <HAL_UART_Transmit+0x3a>
 800a2f8:	2302      	movs	r3, #2
 800a2fa:	e074      	b.n	800a3e6 <HAL_UART_Transmit+0x124>
 800a2fc:	68fb      	ldr	r3, [r7, #12]
 800a2fe:	2201      	movs	r2, #1
 800a300:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a304:	68fb      	ldr	r3, [r7, #12]
 800a306:	2200      	movs	r2, #0
 800a308:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800a30c:	68fb      	ldr	r3, [r7, #12]
 800a30e:	2221      	movs	r2, #33	; 0x21
 800a310:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800a314:	f7f9 f83e 	bl	8003394 <HAL_GetTick>
 800a318:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800a31a:	68fb      	ldr	r3, [r7, #12]
 800a31c:	88fa      	ldrh	r2, [r7, #6]
 800a31e:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800a322:	68fb      	ldr	r3, [r7, #12]
 800a324:	88fa      	ldrh	r2, [r7, #6]
 800a326:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a32a:	68fb      	ldr	r3, [r7, #12]
 800a32c:	689b      	ldr	r3, [r3, #8]
 800a32e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a332:	d108      	bne.n	800a346 <HAL_UART_Transmit+0x84>
 800a334:	68fb      	ldr	r3, [r7, #12]
 800a336:	691b      	ldr	r3, [r3, #16]
 800a338:	2b00      	cmp	r3, #0
 800a33a:	d104      	bne.n	800a346 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 800a33c:	2300      	movs	r3, #0
 800a33e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800a340:	68bb      	ldr	r3, [r7, #8]
 800a342:	61bb      	str	r3, [r7, #24]
 800a344:	e003      	b.n	800a34e <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 800a346:	68bb      	ldr	r3, [r7, #8]
 800a348:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800a34a:	2300      	movs	r3, #0
 800a34c:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800a34e:	68fb      	ldr	r3, [r7, #12]
 800a350:	2200      	movs	r2, #0
 800a352:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 800a356:	e02c      	b.n	800a3b2 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800a358:	683b      	ldr	r3, [r7, #0]
 800a35a:	9300      	str	r3, [sp, #0]
 800a35c:	697b      	ldr	r3, [r7, #20]
 800a35e:	2200      	movs	r2, #0
 800a360:	2180      	movs	r1, #128	; 0x80
 800a362:	68f8      	ldr	r0, [r7, #12]
 800a364:	f000 ff35 	bl	800b1d2 <UART_WaitOnFlagUntilTimeout>
 800a368:	4603      	mov	r3, r0
 800a36a:	2b00      	cmp	r3, #0
 800a36c:	d001      	beq.n	800a372 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 800a36e:	2303      	movs	r3, #3
 800a370:	e039      	b.n	800a3e6 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 800a372:	69fb      	ldr	r3, [r7, #28]
 800a374:	2b00      	cmp	r3, #0
 800a376:	d10b      	bne.n	800a390 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800a378:	69bb      	ldr	r3, [r7, #24]
 800a37a:	881b      	ldrh	r3, [r3, #0]
 800a37c:	461a      	mov	r2, r3
 800a37e:	68fb      	ldr	r3, [r7, #12]
 800a380:	681b      	ldr	r3, [r3, #0]
 800a382:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800a386:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800a388:	69bb      	ldr	r3, [r7, #24]
 800a38a:	3302      	adds	r3, #2
 800a38c:	61bb      	str	r3, [r7, #24]
 800a38e:	e007      	b.n	800a3a0 <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800a390:	69fb      	ldr	r3, [r7, #28]
 800a392:	781a      	ldrb	r2, [r3, #0]
 800a394:	68fb      	ldr	r3, [r7, #12]
 800a396:	681b      	ldr	r3, [r3, #0]
 800a398:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800a39a:	69fb      	ldr	r3, [r7, #28]
 800a39c:	3301      	adds	r3, #1
 800a39e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800a3a0:	68fb      	ldr	r3, [r7, #12]
 800a3a2:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800a3a6:	b29b      	uxth	r3, r3
 800a3a8:	3b01      	subs	r3, #1
 800a3aa:	b29a      	uxth	r2, r3
 800a3ac:	68fb      	ldr	r3, [r7, #12]
 800a3ae:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800a3b2:	68fb      	ldr	r3, [r7, #12]
 800a3b4:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800a3b8:	b29b      	uxth	r3, r3
 800a3ba:	2b00      	cmp	r3, #0
 800a3bc:	d1cc      	bne.n	800a358 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800a3be:	683b      	ldr	r3, [r7, #0]
 800a3c0:	9300      	str	r3, [sp, #0]
 800a3c2:	697b      	ldr	r3, [r7, #20]
 800a3c4:	2200      	movs	r2, #0
 800a3c6:	2140      	movs	r1, #64	; 0x40
 800a3c8:	68f8      	ldr	r0, [r7, #12]
 800a3ca:	f000 ff02 	bl	800b1d2 <UART_WaitOnFlagUntilTimeout>
 800a3ce:	4603      	mov	r3, r0
 800a3d0:	2b00      	cmp	r3, #0
 800a3d2:	d001      	beq.n	800a3d8 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 800a3d4:	2303      	movs	r3, #3
 800a3d6:	e006      	b.n	800a3e6 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800a3d8:	68fb      	ldr	r3, [r7, #12]
 800a3da:	2220      	movs	r2, #32
 800a3dc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 800a3e0:	2300      	movs	r3, #0
 800a3e2:	e000      	b.n	800a3e6 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 800a3e4:	2302      	movs	r3, #2
  }
}
 800a3e6:	4618      	mov	r0, r3
 800a3e8:	3720      	adds	r7, #32
 800a3ea:	46bd      	mov	sp, r7
 800a3ec:	bd80      	pop	{r7, pc}
	...

0800a3f0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800a3f0:	b580      	push	{r7, lr}
 800a3f2:	b0ba      	sub	sp, #232	; 0xe8
 800a3f4:	af00      	add	r7, sp, #0
 800a3f6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800a3f8:	687b      	ldr	r3, [r7, #4]
 800a3fa:	681b      	ldr	r3, [r3, #0]
 800a3fc:	69db      	ldr	r3, [r3, #28]
 800a3fe:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800a402:	687b      	ldr	r3, [r7, #4]
 800a404:	681b      	ldr	r3, [r3, #0]
 800a406:	681b      	ldr	r3, [r3, #0]
 800a408:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800a40c:	687b      	ldr	r3, [r7, #4]
 800a40e:	681b      	ldr	r3, [r3, #0]
 800a410:	689b      	ldr	r3, [r3, #8]
 800a412:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800a416:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800a41a:	f640 030f 	movw	r3, #2063	; 0x80f
 800a41e:	4013      	ands	r3, r2
 800a420:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800a424:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800a428:	2b00      	cmp	r3, #0
 800a42a:	d11b      	bne.n	800a464 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800a42c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a430:	f003 0320 	and.w	r3, r3, #32
 800a434:	2b00      	cmp	r3, #0
 800a436:	d015      	beq.n	800a464 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800a438:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a43c:	f003 0320 	and.w	r3, r3, #32
 800a440:	2b00      	cmp	r3, #0
 800a442:	d105      	bne.n	800a450 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800a444:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a448:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a44c:	2b00      	cmp	r3, #0
 800a44e:	d009      	beq.n	800a464 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800a450:	687b      	ldr	r3, [r7, #4]
 800a452:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a454:	2b00      	cmp	r3, #0
 800a456:	f000 82d6 	beq.w	800aa06 <HAL_UART_IRQHandler+0x616>
      {
        huart->RxISR(huart);
 800a45a:	687b      	ldr	r3, [r7, #4]
 800a45c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a45e:	6878      	ldr	r0, [r7, #4]
 800a460:	4798      	blx	r3
      }
      return;
 800a462:	e2d0      	b.n	800aa06 <HAL_UART_IRQHandler+0x616>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800a464:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800a468:	2b00      	cmp	r3, #0
 800a46a:	f000 811f 	beq.w	800a6ac <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800a46e:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800a472:	4b8b      	ldr	r3, [pc, #556]	; (800a6a0 <HAL_UART_IRQHandler+0x2b0>)
 800a474:	4013      	ands	r3, r2
 800a476:	2b00      	cmp	r3, #0
 800a478:	d106      	bne.n	800a488 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800a47a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800a47e:	4b89      	ldr	r3, [pc, #548]	; (800a6a4 <HAL_UART_IRQHandler+0x2b4>)
 800a480:	4013      	ands	r3, r2
 800a482:	2b00      	cmp	r3, #0
 800a484:	f000 8112 	beq.w	800a6ac <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800a488:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a48c:	f003 0301 	and.w	r3, r3, #1
 800a490:	2b00      	cmp	r3, #0
 800a492:	d011      	beq.n	800a4b8 <HAL_UART_IRQHandler+0xc8>
 800a494:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a498:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a49c:	2b00      	cmp	r3, #0
 800a49e:	d00b      	beq.n	800a4b8 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800a4a0:	687b      	ldr	r3, [r7, #4]
 800a4a2:	681b      	ldr	r3, [r3, #0]
 800a4a4:	2201      	movs	r2, #1
 800a4a6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800a4a8:	687b      	ldr	r3, [r7, #4]
 800a4aa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a4ae:	f043 0201 	orr.w	r2, r3, #1
 800a4b2:	687b      	ldr	r3, [r7, #4]
 800a4b4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a4b8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a4bc:	f003 0302 	and.w	r3, r3, #2
 800a4c0:	2b00      	cmp	r3, #0
 800a4c2:	d011      	beq.n	800a4e8 <HAL_UART_IRQHandler+0xf8>
 800a4c4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a4c8:	f003 0301 	and.w	r3, r3, #1
 800a4cc:	2b00      	cmp	r3, #0
 800a4ce:	d00b      	beq.n	800a4e8 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800a4d0:	687b      	ldr	r3, [r7, #4]
 800a4d2:	681b      	ldr	r3, [r3, #0]
 800a4d4:	2202      	movs	r2, #2
 800a4d6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800a4d8:	687b      	ldr	r3, [r7, #4]
 800a4da:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a4de:	f043 0204 	orr.w	r2, r3, #4
 800a4e2:	687b      	ldr	r3, [r7, #4]
 800a4e4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a4e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a4ec:	f003 0304 	and.w	r3, r3, #4
 800a4f0:	2b00      	cmp	r3, #0
 800a4f2:	d011      	beq.n	800a518 <HAL_UART_IRQHandler+0x128>
 800a4f4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a4f8:	f003 0301 	and.w	r3, r3, #1
 800a4fc:	2b00      	cmp	r3, #0
 800a4fe:	d00b      	beq.n	800a518 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800a500:	687b      	ldr	r3, [r7, #4]
 800a502:	681b      	ldr	r3, [r3, #0]
 800a504:	2204      	movs	r2, #4
 800a506:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800a508:	687b      	ldr	r3, [r7, #4]
 800a50a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a50e:	f043 0202 	orr.w	r2, r3, #2
 800a512:	687b      	ldr	r3, [r7, #4]
 800a514:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800a518:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a51c:	f003 0308 	and.w	r3, r3, #8
 800a520:	2b00      	cmp	r3, #0
 800a522:	d017      	beq.n	800a554 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800a524:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a528:	f003 0320 	and.w	r3, r3, #32
 800a52c:	2b00      	cmp	r3, #0
 800a52e:	d105      	bne.n	800a53c <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800a530:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800a534:	4b5a      	ldr	r3, [pc, #360]	; (800a6a0 <HAL_UART_IRQHandler+0x2b0>)
 800a536:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800a538:	2b00      	cmp	r3, #0
 800a53a:	d00b      	beq.n	800a554 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800a53c:	687b      	ldr	r3, [r7, #4]
 800a53e:	681b      	ldr	r3, [r3, #0]
 800a540:	2208      	movs	r2, #8
 800a542:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800a544:	687b      	ldr	r3, [r7, #4]
 800a546:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a54a:	f043 0208 	orr.w	r2, r3, #8
 800a54e:	687b      	ldr	r3, [r7, #4]
 800a550:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800a554:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a558:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a55c:	2b00      	cmp	r3, #0
 800a55e:	d012      	beq.n	800a586 <HAL_UART_IRQHandler+0x196>
 800a560:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a564:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800a568:	2b00      	cmp	r3, #0
 800a56a:	d00c      	beq.n	800a586 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a56c:	687b      	ldr	r3, [r7, #4]
 800a56e:	681b      	ldr	r3, [r3, #0]
 800a570:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800a574:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800a576:	687b      	ldr	r3, [r7, #4]
 800a578:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a57c:	f043 0220 	orr.w	r2, r3, #32
 800a580:	687b      	ldr	r3, [r7, #4]
 800a582:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800a586:	687b      	ldr	r3, [r7, #4]
 800a588:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a58c:	2b00      	cmp	r3, #0
 800a58e:	f000 823c 	beq.w	800aa0a <HAL_UART_IRQHandler+0x61a>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800a592:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a596:	f003 0320 	and.w	r3, r3, #32
 800a59a:	2b00      	cmp	r3, #0
 800a59c:	d013      	beq.n	800a5c6 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800a59e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a5a2:	f003 0320 	and.w	r3, r3, #32
 800a5a6:	2b00      	cmp	r3, #0
 800a5a8:	d105      	bne.n	800a5b6 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800a5aa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a5ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a5b2:	2b00      	cmp	r3, #0
 800a5b4:	d007      	beq.n	800a5c6 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800a5b6:	687b      	ldr	r3, [r7, #4]
 800a5b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a5ba:	2b00      	cmp	r3, #0
 800a5bc:	d003      	beq.n	800a5c6 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800a5be:	687b      	ldr	r3, [r7, #4]
 800a5c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a5c2:	6878      	ldr	r0, [r7, #4]
 800a5c4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800a5c6:	687b      	ldr	r3, [r7, #4]
 800a5c8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a5cc:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800a5d0:	687b      	ldr	r3, [r7, #4]
 800a5d2:	681b      	ldr	r3, [r3, #0]
 800a5d4:	689b      	ldr	r3, [r3, #8]
 800a5d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a5da:	2b40      	cmp	r3, #64	; 0x40
 800a5dc:	d005      	beq.n	800a5ea <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800a5de:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800a5e2:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800a5e6:	2b00      	cmp	r3, #0
 800a5e8:	d04f      	beq.n	800a68a <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800a5ea:	6878      	ldr	r0, [r7, #4]
 800a5ec:	f000 feb9 	bl	800b362 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a5f0:	687b      	ldr	r3, [r7, #4]
 800a5f2:	681b      	ldr	r3, [r3, #0]
 800a5f4:	689b      	ldr	r3, [r3, #8]
 800a5f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a5fa:	2b40      	cmp	r3, #64	; 0x40
 800a5fc:	d141      	bne.n	800a682 <HAL_UART_IRQHandler+0x292>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a5fe:	687b      	ldr	r3, [r7, #4]
 800a600:	681b      	ldr	r3, [r3, #0]
 800a602:	3308      	adds	r3, #8
 800a604:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a608:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800a60c:	e853 3f00 	ldrex	r3, [r3]
 800a610:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800a614:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800a618:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a61c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800a620:	687b      	ldr	r3, [r7, #4]
 800a622:	681b      	ldr	r3, [r3, #0]
 800a624:	3308      	adds	r3, #8
 800a626:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800a62a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800a62e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a632:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800a636:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800a63a:	e841 2300 	strex	r3, r2, [r1]
 800a63e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800a642:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800a646:	2b00      	cmp	r3, #0
 800a648:	d1d9      	bne.n	800a5fe <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800a64a:	687b      	ldr	r3, [r7, #4]
 800a64c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a64e:	2b00      	cmp	r3, #0
 800a650:	d013      	beq.n	800a67a <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800a652:	687b      	ldr	r3, [r7, #4]
 800a654:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a656:	4a14      	ldr	r2, [pc, #80]	; (800a6a8 <HAL_UART_IRQHandler+0x2b8>)
 800a658:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800a65a:	687b      	ldr	r3, [r7, #4]
 800a65c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a65e:	4618      	mov	r0, r3
 800a660:	f7fb fd25 	bl	80060ae <HAL_DMA_Abort_IT>
 800a664:	4603      	mov	r3, r0
 800a666:	2b00      	cmp	r3, #0
 800a668:	d017      	beq.n	800a69a <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800a66a:	687b      	ldr	r3, [r7, #4]
 800a66c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a66e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a670:	687a      	ldr	r2, [r7, #4]
 800a672:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 800a674:	4610      	mov	r0, r2
 800a676:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a678:	e00f      	b.n	800a69a <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800a67a:	6878      	ldr	r0, [r7, #4]
 800a67c:	f000 f9da 	bl	800aa34 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a680:	e00b      	b.n	800a69a <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800a682:	6878      	ldr	r0, [r7, #4]
 800a684:	f000 f9d6 	bl	800aa34 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a688:	e007      	b.n	800a69a <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800a68a:	6878      	ldr	r0, [r7, #4]
 800a68c:	f000 f9d2 	bl	800aa34 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a690:	687b      	ldr	r3, [r7, #4]
 800a692:	2200      	movs	r2, #0
 800a694:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 800a698:	e1b7      	b.n	800aa0a <HAL_UART_IRQHandler+0x61a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a69a:	bf00      	nop
    return;
 800a69c:	e1b5      	b.n	800aa0a <HAL_UART_IRQHandler+0x61a>
 800a69e:	bf00      	nop
 800a6a0:	10000001 	.word	0x10000001
 800a6a4:	04000120 	.word	0x04000120
 800a6a8:	0800b42f 	.word	0x0800b42f

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a6ac:	687b      	ldr	r3, [r7, #4]
 800a6ae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a6b0:	2b01      	cmp	r3, #1
 800a6b2:	f040 814a 	bne.w	800a94a <HAL_UART_IRQHandler+0x55a>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800a6b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a6ba:	f003 0310 	and.w	r3, r3, #16
 800a6be:	2b00      	cmp	r3, #0
 800a6c0:	f000 8143 	beq.w	800a94a <HAL_UART_IRQHandler+0x55a>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800a6c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a6c8:	f003 0310 	and.w	r3, r3, #16
 800a6cc:	2b00      	cmp	r3, #0
 800a6ce:	f000 813c 	beq.w	800a94a <HAL_UART_IRQHandler+0x55a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800a6d2:	687b      	ldr	r3, [r7, #4]
 800a6d4:	681b      	ldr	r3, [r3, #0]
 800a6d6:	2210      	movs	r2, #16
 800a6d8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a6da:	687b      	ldr	r3, [r7, #4]
 800a6dc:	681b      	ldr	r3, [r3, #0]
 800a6de:	689b      	ldr	r3, [r3, #8]
 800a6e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a6e4:	2b40      	cmp	r3, #64	; 0x40
 800a6e6:	f040 80b5 	bne.w	800a854 <HAL_UART_IRQHandler+0x464>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800a6ea:	687b      	ldr	r3, [r7, #4]
 800a6ec:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a6ee:	681b      	ldr	r3, [r3, #0]
 800a6f0:	685b      	ldr	r3, [r3, #4]
 800a6f2:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800a6f6:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800a6fa:	2b00      	cmp	r3, #0
 800a6fc:	f000 8187 	beq.w	800aa0e <HAL_UART_IRQHandler+0x61e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800a700:	687b      	ldr	r3, [r7, #4]
 800a702:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800a706:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800a70a:	429a      	cmp	r2, r3
 800a70c:	f080 817f 	bcs.w	800aa0e <HAL_UART_IRQHandler+0x61e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800a710:	687b      	ldr	r3, [r7, #4]
 800a712:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800a716:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800a71a:	687b      	ldr	r3, [r7, #4]
 800a71c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a71e:	681b      	ldr	r3, [r3, #0]
 800a720:	681b      	ldr	r3, [r3, #0]
 800a722:	f003 0320 	and.w	r3, r3, #32
 800a726:	2b00      	cmp	r3, #0
 800a728:	f040 8086 	bne.w	800a838 <HAL_UART_IRQHandler+0x448>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a72c:	687b      	ldr	r3, [r7, #4]
 800a72e:	681b      	ldr	r3, [r3, #0]
 800a730:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a734:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800a738:	e853 3f00 	ldrex	r3, [r3]
 800a73c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800a740:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800a744:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a748:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800a74c:	687b      	ldr	r3, [r7, #4]
 800a74e:	681b      	ldr	r3, [r3, #0]
 800a750:	461a      	mov	r2, r3
 800a752:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800a756:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800a75a:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a75e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800a762:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800a766:	e841 2300 	strex	r3, r2, [r1]
 800a76a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800a76e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a772:	2b00      	cmp	r3, #0
 800a774:	d1da      	bne.n	800a72c <HAL_UART_IRQHandler+0x33c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a776:	687b      	ldr	r3, [r7, #4]
 800a778:	681b      	ldr	r3, [r3, #0]
 800a77a:	3308      	adds	r3, #8
 800a77c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a77e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a780:	e853 3f00 	ldrex	r3, [r3]
 800a784:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800a786:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800a788:	f023 0301 	bic.w	r3, r3, #1
 800a78c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800a790:	687b      	ldr	r3, [r7, #4]
 800a792:	681b      	ldr	r3, [r3, #0]
 800a794:	3308      	adds	r3, #8
 800a796:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800a79a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800a79e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a7a0:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800a7a2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800a7a6:	e841 2300 	strex	r3, r2, [r1]
 800a7aa:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800a7ac:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a7ae:	2b00      	cmp	r3, #0
 800a7b0:	d1e1      	bne.n	800a776 <HAL_UART_IRQHandler+0x386>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a7b2:	687b      	ldr	r3, [r7, #4]
 800a7b4:	681b      	ldr	r3, [r3, #0]
 800a7b6:	3308      	adds	r3, #8
 800a7b8:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a7ba:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a7bc:	e853 3f00 	ldrex	r3, [r3]
 800a7c0:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800a7c2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a7c4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a7c8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800a7cc:	687b      	ldr	r3, [r7, #4]
 800a7ce:	681b      	ldr	r3, [r3, #0]
 800a7d0:	3308      	adds	r3, #8
 800a7d2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800a7d6:	66fa      	str	r2, [r7, #108]	; 0x6c
 800a7d8:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a7da:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800a7dc:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800a7de:	e841 2300 	strex	r3, r2, [r1]
 800a7e2:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800a7e4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a7e6:	2b00      	cmp	r3, #0
 800a7e8:	d1e3      	bne.n	800a7b2 <HAL_UART_IRQHandler+0x3c2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800a7ea:	687b      	ldr	r3, [r7, #4]
 800a7ec:	2220      	movs	r2, #32
 800a7ee:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a7f2:	687b      	ldr	r3, [r7, #4]
 800a7f4:	2200      	movs	r2, #0
 800a7f6:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a7f8:	687b      	ldr	r3, [r7, #4]
 800a7fa:	681b      	ldr	r3, [r3, #0]
 800a7fc:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a7fe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a800:	e853 3f00 	ldrex	r3, [r3]
 800a804:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800a806:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a808:	f023 0310 	bic.w	r3, r3, #16
 800a80c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800a810:	687b      	ldr	r3, [r7, #4]
 800a812:	681b      	ldr	r3, [r3, #0]
 800a814:	461a      	mov	r2, r3
 800a816:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800a81a:	65bb      	str	r3, [r7, #88]	; 0x58
 800a81c:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a81e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800a820:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800a822:	e841 2300 	strex	r3, r2, [r1]
 800a826:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800a828:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a82a:	2b00      	cmp	r3, #0
 800a82c:	d1e4      	bne.n	800a7f8 <HAL_UART_IRQHandler+0x408>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800a82e:	687b      	ldr	r3, [r7, #4]
 800a830:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a832:	4618      	mov	r0, r3
 800a834:	f7fb fbe2 	bl	8005ffc <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800a838:	687b      	ldr	r3, [r7, #4]
 800a83a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800a83e:	687b      	ldr	r3, [r7, #4]
 800a840:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800a844:	b29b      	uxth	r3, r3
 800a846:	1ad3      	subs	r3, r2, r3
 800a848:	b29b      	uxth	r3, r3
 800a84a:	4619      	mov	r1, r3
 800a84c:	6878      	ldr	r0, [r7, #4]
 800a84e:	f000 f8fb 	bl	800aa48 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800a852:	e0dc      	b.n	800aa0e <HAL_UART_IRQHandler+0x61e>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800a854:	687b      	ldr	r3, [r7, #4]
 800a856:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800a85a:	687b      	ldr	r3, [r7, #4]
 800a85c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800a860:	b29b      	uxth	r3, r3
 800a862:	1ad3      	subs	r3, r2, r3
 800a864:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800a868:	687b      	ldr	r3, [r7, #4]
 800a86a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800a86e:	b29b      	uxth	r3, r3
 800a870:	2b00      	cmp	r3, #0
 800a872:	f000 80ce 	beq.w	800aa12 <HAL_UART_IRQHandler+0x622>
          && (nb_rx_data > 0U))
 800a876:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800a87a:	2b00      	cmp	r3, #0
 800a87c:	f000 80c9 	beq.w	800aa12 <HAL_UART_IRQHandler+0x622>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a880:	687b      	ldr	r3, [r7, #4]
 800a882:	681b      	ldr	r3, [r3, #0]
 800a884:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a886:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a888:	e853 3f00 	ldrex	r3, [r3]
 800a88c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800a88e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a890:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800a894:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800a898:	687b      	ldr	r3, [r7, #4]
 800a89a:	681b      	ldr	r3, [r3, #0]
 800a89c:	461a      	mov	r2, r3
 800a89e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800a8a2:	647b      	str	r3, [r7, #68]	; 0x44
 800a8a4:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a8a6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800a8a8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a8aa:	e841 2300 	strex	r3, r2, [r1]
 800a8ae:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800a8b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a8b2:	2b00      	cmp	r3, #0
 800a8b4:	d1e4      	bne.n	800a880 <HAL_UART_IRQHandler+0x490>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800a8b6:	687b      	ldr	r3, [r7, #4]
 800a8b8:	681b      	ldr	r3, [r3, #0]
 800a8ba:	3308      	adds	r3, #8
 800a8bc:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a8be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a8c0:	e853 3f00 	ldrex	r3, [r3]
 800a8c4:	623b      	str	r3, [r7, #32]
   return(result);
 800a8c6:	6a3b      	ldr	r3, [r7, #32]
 800a8c8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a8cc:	f023 0301 	bic.w	r3, r3, #1
 800a8d0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800a8d4:	687b      	ldr	r3, [r7, #4]
 800a8d6:	681b      	ldr	r3, [r3, #0]
 800a8d8:	3308      	adds	r3, #8
 800a8da:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800a8de:	633a      	str	r2, [r7, #48]	; 0x30
 800a8e0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a8e2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a8e4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a8e6:	e841 2300 	strex	r3, r2, [r1]
 800a8ea:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800a8ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a8ee:	2b00      	cmp	r3, #0
 800a8f0:	d1e1      	bne.n	800a8b6 <HAL_UART_IRQHandler+0x4c6>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800a8f2:	687b      	ldr	r3, [r7, #4]
 800a8f4:	2220      	movs	r2, #32
 800a8f6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a8fa:	687b      	ldr	r3, [r7, #4]
 800a8fc:	2200      	movs	r2, #0
 800a8fe:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800a900:	687b      	ldr	r3, [r7, #4]
 800a902:	2200      	movs	r2, #0
 800a904:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a906:	687b      	ldr	r3, [r7, #4]
 800a908:	681b      	ldr	r3, [r3, #0]
 800a90a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a90c:	693b      	ldr	r3, [r7, #16]
 800a90e:	e853 3f00 	ldrex	r3, [r3]
 800a912:	60fb      	str	r3, [r7, #12]
   return(result);
 800a914:	68fb      	ldr	r3, [r7, #12]
 800a916:	f023 0310 	bic.w	r3, r3, #16
 800a91a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800a91e:	687b      	ldr	r3, [r7, #4]
 800a920:	681b      	ldr	r3, [r3, #0]
 800a922:	461a      	mov	r2, r3
 800a924:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800a928:	61fb      	str	r3, [r7, #28]
 800a92a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a92c:	69b9      	ldr	r1, [r7, #24]
 800a92e:	69fa      	ldr	r2, [r7, #28]
 800a930:	e841 2300 	strex	r3, r2, [r1]
 800a934:	617b      	str	r3, [r7, #20]
   return(result);
 800a936:	697b      	ldr	r3, [r7, #20]
 800a938:	2b00      	cmp	r3, #0
 800a93a:	d1e4      	bne.n	800a906 <HAL_UART_IRQHandler+0x516>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800a93c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800a940:	4619      	mov	r1, r3
 800a942:	6878      	ldr	r0, [r7, #4]
 800a944:	f000 f880 	bl	800aa48 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800a948:	e063      	b.n	800aa12 <HAL_UART_IRQHandler+0x622>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800a94a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a94e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800a952:	2b00      	cmp	r3, #0
 800a954:	d00e      	beq.n	800a974 <HAL_UART_IRQHandler+0x584>
 800a956:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a95a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a95e:	2b00      	cmp	r3, #0
 800a960:	d008      	beq.n	800a974 <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800a962:	687b      	ldr	r3, [r7, #4]
 800a964:	681b      	ldr	r3, [r3, #0]
 800a966:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800a96a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800a96c:	6878      	ldr	r0, [r7, #4]
 800a96e:	f000 fd9f 	bl	800b4b0 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800a972:	e051      	b.n	800aa18 <HAL_UART_IRQHandler+0x628>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800a974:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a978:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a97c:	2b00      	cmp	r3, #0
 800a97e:	d014      	beq.n	800a9aa <HAL_UART_IRQHandler+0x5ba>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800a980:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a984:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a988:	2b00      	cmp	r3, #0
 800a98a:	d105      	bne.n	800a998 <HAL_UART_IRQHandler+0x5a8>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800a98c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a990:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a994:	2b00      	cmp	r3, #0
 800a996:	d008      	beq.n	800a9aa <HAL_UART_IRQHandler+0x5ba>
  {
    if (huart->TxISR != NULL)
 800a998:	687b      	ldr	r3, [r7, #4]
 800a99a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a99c:	2b00      	cmp	r3, #0
 800a99e:	d03a      	beq.n	800aa16 <HAL_UART_IRQHandler+0x626>
    {
      huart->TxISR(huart);
 800a9a0:	687b      	ldr	r3, [r7, #4]
 800a9a2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a9a4:	6878      	ldr	r0, [r7, #4]
 800a9a6:	4798      	blx	r3
    }
    return;
 800a9a8:	e035      	b.n	800aa16 <HAL_UART_IRQHandler+0x626>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800a9aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a9ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a9b2:	2b00      	cmp	r3, #0
 800a9b4:	d009      	beq.n	800a9ca <HAL_UART_IRQHandler+0x5da>
 800a9b6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a9ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a9be:	2b00      	cmp	r3, #0
 800a9c0:	d003      	beq.n	800a9ca <HAL_UART_IRQHandler+0x5da>
  {
    UART_EndTransmit_IT(huart);
 800a9c2:	6878      	ldr	r0, [r7, #4]
 800a9c4:	f000 fd49 	bl	800b45a <UART_EndTransmit_IT>
    return;
 800a9c8:	e026      	b.n	800aa18 <HAL_UART_IRQHandler+0x628>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800a9ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a9ce:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a9d2:	2b00      	cmp	r3, #0
 800a9d4:	d009      	beq.n	800a9ea <HAL_UART_IRQHandler+0x5fa>
 800a9d6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a9da:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800a9de:	2b00      	cmp	r3, #0
 800a9e0:	d003      	beq.n	800a9ea <HAL_UART_IRQHandler+0x5fa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800a9e2:	6878      	ldr	r0, [r7, #4]
 800a9e4:	f000 fd78 	bl	800b4d8 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800a9e8:	e016      	b.n	800aa18 <HAL_UART_IRQHandler+0x628>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800a9ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a9ee:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800a9f2:	2b00      	cmp	r3, #0
 800a9f4:	d010      	beq.n	800aa18 <HAL_UART_IRQHandler+0x628>
 800a9f6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a9fa:	2b00      	cmp	r3, #0
 800a9fc:	da0c      	bge.n	800aa18 <HAL_UART_IRQHandler+0x628>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800a9fe:	6878      	ldr	r0, [r7, #4]
 800aa00:	f000 fd60 	bl	800b4c4 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800aa04:	e008      	b.n	800aa18 <HAL_UART_IRQHandler+0x628>
      return;
 800aa06:	bf00      	nop
 800aa08:	e006      	b.n	800aa18 <HAL_UART_IRQHandler+0x628>
    return;
 800aa0a:	bf00      	nop
 800aa0c:	e004      	b.n	800aa18 <HAL_UART_IRQHandler+0x628>
      return;
 800aa0e:	bf00      	nop
 800aa10:	e002      	b.n	800aa18 <HAL_UART_IRQHandler+0x628>
      return;
 800aa12:	bf00      	nop
 800aa14:	e000      	b.n	800aa18 <HAL_UART_IRQHandler+0x628>
    return;
 800aa16:	bf00      	nop
  }
}
 800aa18:	37e8      	adds	r7, #232	; 0xe8
 800aa1a:	46bd      	mov	sp, r7
 800aa1c:	bd80      	pop	{r7, pc}
 800aa1e:	bf00      	nop

0800aa20 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800aa20:	b480      	push	{r7}
 800aa22:	b083      	sub	sp, #12
 800aa24:	af00      	add	r7, sp, #0
 800aa26:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800aa28:	bf00      	nop
 800aa2a:	370c      	adds	r7, #12
 800aa2c:	46bd      	mov	sp, r7
 800aa2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa32:	4770      	bx	lr

0800aa34 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800aa34:	b480      	push	{r7}
 800aa36:	b083      	sub	sp, #12
 800aa38:	af00      	add	r7, sp, #0
 800aa3a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800aa3c:	bf00      	nop
 800aa3e:	370c      	adds	r7, #12
 800aa40:	46bd      	mov	sp, r7
 800aa42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa46:	4770      	bx	lr

0800aa48 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800aa48:	b480      	push	{r7}
 800aa4a:	b083      	sub	sp, #12
 800aa4c:	af00      	add	r7, sp, #0
 800aa4e:	6078      	str	r0, [r7, #4]
 800aa50:	460b      	mov	r3, r1
 800aa52:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800aa54:	bf00      	nop
 800aa56:	370c      	adds	r7, #12
 800aa58:	46bd      	mov	sp, r7
 800aa5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa5e:	4770      	bx	lr

0800aa60 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800aa60:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800aa64:	b08c      	sub	sp, #48	; 0x30
 800aa66:	af00      	add	r7, sp, #0
 800aa68:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800aa6a:	2300      	movs	r3, #0
 800aa6c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800aa70:	697b      	ldr	r3, [r7, #20]
 800aa72:	689a      	ldr	r2, [r3, #8]
 800aa74:	697b      	ldr	r3, [r7, #20]
 800aa76:	691b      	ldr	r3, [r3, #16]
 800aa78:	431a      	orrs	r2, r3
 800aa7a:	697b      	ldr	r3, [r7, #20]
 800aa7c:	695b      	ldr	r3, [r3, #20]
 800aa7e:	431a      	orrs	r2, r3
 800aa80:	697b      	ldr	r3, [r7, #20]
 800aa82:	69db      	ldr	r3, [r3, #28]
 800aa84:	4313      	orrs	r3, r2
 800aa86:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800aa88:	697b      	ldr	r3, [r7, #20]
 800aa8a:	681b      	ldr	r3, [r3, #0]
 800aa8c:	681a      	ldr	r2, [r3, #0]
 800aa8e:	4bab      	ldr	r3, [pc, #684]	; (800ad3c <UART_SetConfig+0x2dc>)
 800aa90:	4013      	ands	r3, r2
 800aa92:	697a      	ldr	r2, [r7, #20]
 800aa94:	6812      	ldr	r2, [r2, #0]
 800aa96:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800aa98:	430b      	orrs	r3, r1
 800aa9a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800aa9c:	697b      	ldr	r3, [r7, #20]
 800aa9e:	681b      	ldr	r3, [r3, #0]
 800aaa0:	685b      	ldr	r3, [r3, #4]
 800aaa2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800aaa6:	697b      	ldr	r3, [r7, #20]
 800aaa8:	68da      	ldr	r2, [r3, #12]
 800aaaa:	697b      	ldr	r3, [r7, #20]
 800aaac:	681b      	ldr	r3, [r3, #0]
 800aaae:	430a      	orrs	r2, r1
 800aab0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800aab2:	697b      	ldr	r3, [r7, #20]
 800aab4:	699b      	ldr	r3, [r3, #24]
 800aab6:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800aab8:	697b      	ldr	r3, [r7, #20]
 800aaba:	681b      	ldr	r3, [r3, #0]
 800aabc:	4aa0      	ldr	r2, [pc, #640]	; (800ad40 <UART_SetConfig+0x2e0>)
 800aabe:	4293      	cmp	r3, r2
 800aac0:	d004      	beq.n	800aacc <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800aac2:	697b      	ldr	r3, [r7, #20]
 800aac4:	6a1b      	ldr	r3, [r3, #32]
 800aac6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800aac8:	4313      	orrs	r3, r2
 800aaca:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800aacc:	697b      	ldr	r3, [r7, #20]
 800aace:	681b      	ldr	r3, [r3, #0]
 800aad0:	689b      	ldr	r3, [r3, #8]
 800aad2:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 800aad6:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 800aada:	697a      	ldr	r2, [r7, #20]
 800aadc:	6812      	ldr	r2, [r2, #0]
 800aade:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800aae0:	430b      	orrs	r3, r1
 800aae2:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800aae4:	697b      	ldr	r3, [r7, #20]
 800aae6:	681b      	ldr	r3, [r3, #0]
 800aae8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aaea:	f023 010f 	bic.w	r1, r3, #15
 800aaee:	697b      	ldr	r3, [r7, #20]
 800aaf0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800aaf2:	697b      	ldr	r3, [r7, #20]
 800aaf4:	681b      	ldr	r3, [r3, #0]
 800aaf6:	430a      	orrs	r2, r1
 800aaf8:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800aafa:	697b      	ldr	r3, [r7, #20]
 800aafc:	681b      	ldr	r3, [r3, #0]
 800aafe:	4a91      	ldr	r2, [pc, #580]	; (800ad44 <UART_SetConfig+0x2e4>)
 800ab00:	4293      	cmp	r3, r2
 800ab02:	d125      	bne.n	800ab50 <UART_SetConfig+0xf0>
 800ab04:	4b90      	ldr	r3, [pc, #576]	; (800ad48 <UART_SetConfig+0x2e8>)
 800ab06:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ab0a:	f003 0303 	and.w	r3, r3, #3
 800ab0e:	2b03      	cmp	r3, #3
 800ab10:	d81a      	bhi.n	800ab48 <UART_SetConfig+0xe8>
 800ab12:	a201      	add	r2, pc, #4	; (adr r2, 800ab18 <UART_SetConfig+0xb8>)
 800ab14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ab18:	0800ab29 	.word	0x0800ab29
 800ab1c:	0800ab39 	.word	0x0800ab39
 800ab20:	0800ab31 	.word	0x0800ab31
 800ab24:	0800ab41 	.word	0x0800ab41
 800ab28:	2301      	movs	r3, #1
 800ab2a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ab2e:	e0d6      	b.n	800acde <UART_SetConfig+0x27e>
 800ab30:	2302      	movs	r3, #2
 800ab32:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ab36:	e0d2      	b.n	800acde <UART_SetConfig+0x27e>
 800ab38:	2304      	movs	r3, #4
 800ab3a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ab3e:	e0ce      	b.n	800acde <UART_SetConfig+0x27e>
 800ab40:	2308      	movs	r3, #8
 800ab42:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ab46:	e0ca      	b.n	800acde <UART_SetConfig+0x27e>
 800ab48:	2310      	movs	r3, #16
 800ab4a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ab4e:	e0c6      	b.n	800acde <UART_SetConfig+0x27e>
 800ab50:	697b      	ldr	r3, [r7, #20]
 800ab52:	681b      	ldr	r3, [r3, #0]
 800ab54:	4a7d      	ldr	r2, [pc, #500]	; (800ad4c <UART_SetConfig+0x2ec>)
 800ab56:	4293      	cmp	r3, r2
 800ab58:	d138      	bne.n	800abcc <UART_SetConfig+0x16c>
 800ab5a:	4b7b      	ldr	r3, [pc, #492]	; (800ad48 <UART_SetConfig+0x2e8>)
 800ab5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ab60:	f003 030c 	and.w	r3, r3, #12
 800ab64:	2b0c      	cmp	r3, #12
 800ab66:	d82d      	bhi.n	800abc4 <UART_SetConfig+0x164>
 800ab68:	a201      	add	r2, pc, #4	; (adr r2, 800ab70 <UART_SetConfig+0x110>)
 800ab6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ab6e:	bf00      	nop
 800ab70:	0800aba5 	.word	0x0800aba5
 800ab74:	0800abc5 	.word	0x0800abc5
 800ab78:	0800abc5 	.word	0x0800abc5
 800ab7c:	0800abc5 	.word	0x0800abc5
 800ab80:	0800abb5 	.word	0x0800abb5
 800ab84:	0800abc5 	.word	0x0800abc5
 800ab88:	0800abc5 	.word	0x0800abc5
 800ab8c:	0800abc5 	.word	0x0800abc5
 800ab90:	0800abad 	.word	0x0800abad
 800ab94:	0800abc5 	.word	0x0800abc5
 800ab98:	0800abc5 	.word	0x0800abc5
 800ab9c:	0800abc5 	.word	0x0800abc5
 800aba0:	0800abbd 	.word	0x0800abbd
 800aba4:	2300      	movs	r3, #0
 800aba6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800abaa:	e098      	b.n	800acde <UART_SetConfig+0x27e>
 800abac:	2302      	movs	r3, #2
 800abae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800abb2:	e094      	b.n	800acde <UART_SetConfig+0x27e>
 800abb4:	2304      	movs	r3, #4
 800abb6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800abba:	e090      	b.n	800acde <UART_SetConfig+0x27e>
 800abbc:	2308      	movs	r3, #8
 800abbe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800abc2:	e08c      	b.n	800acde <UART_SetConfig+0x27e>
 800abc4:	2310      	movs	r3, #16
 800abc6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800abca:	e088      	b.n	800acde <UART_SetConfig+0x27e>
 800abcc:	697b      	ldr	r3, [r7, #20]
 800abce:	681b      	ldr	r3, [r3, #0]
 800abd0:	4a5f      	ldr	r2, [pc, #380]	; (800ad50 <UART_SetConfig+0x2f0>)
 800abd2:	4293      	cmp	r3, r2
 800abd4:	d125      	bne.n	800ac22 <UART_SetConfig+0x1c2>
 800abd6:	4b5c      	ldr	r3, [pc, #368]	; (800ad48 <UART_SetConfig+0x2e8>)
 800abd8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800abdc:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800abe0:	2b30      	cmp	r3, #48	; 0x30
 800abe2:	d016      	beq.n	800ac12 <UART_SetConfig+0x1b2>
 800abe4:	2b30      	cmp	r3, #48	; 0x30
 800abe6:	d818      	bhi.n	800ac1a <UART_SetConfig+0x1ba>
 800abe8:	2b20      	cmp	r3, #32
 800abea:	d00a      	beq.n	800ac02 <UART_SetConfig+0x1a2>
 800abec:	2b20      	cmp	r3, #32
 800abee:	d814      	bhi.n	800ac1a <UART_SetConfig+0x1ba>
 800abf0:	2b00      	cmp	r3, #0
 800abf2:	d002      	beq.n	800abfa <UART_SetConfig+0x19a>
 800abf4:	2b10      	cmp	r3, #16
 800abf6:	d008      	beq.n	800ac0a <UART_SetConfig+0x1aa>
 800abf8:	e00f      	b.n	800ac1a <UART_SetConfig+0x1ba>
 800abfa:	2300      	movs	r3, #0
 800abfc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ac00:	e06d      	b.n	800acde <UART_SetConfig+0x27e>
 800ac02:	2302      	movs	r3, #2
 800ac04:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ac08:	e069      	b.n	800acde <UART_SetConfig+0x27e>
 800ac0a:	2304      	movs	r3, #4
 800ac0c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ac10:	e065      	b.n	800acde <UART_SetConfig+0x27e>
 800ac12:	2308      	movs	r3, #8
 800ac14:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ac18:	e061      	b.n	800acde <UART_SetConfig+0x27e>
 800ac1a:	2310      	movs	r3, #16
 800ac1c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ac20:	e05d      	b.n	800acde <UART_SetConfig+0x27e>
 800ac22:	697b      	ldr	r3, [r7, #20]
 800ac24:	681b      	ldr	r3, [r3, #0]
 800ac26:	4a4b      	ldr	r2, [pc, #300]	; (800ad54 <UART_SetConfig+0x2f4>)
 800ac28:	4293      	cmp	r3, r2
 800ac2a:	d125      	bne.n	800ac78 <UART_SetConfig+0x218>
 800ac2c:	4b46      	ldr	r3, [pc, #280]	; (800ad48 <UART_SetConfig+0x2e8>)
 800ac2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ac32:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800ac36:	2bc0      	cmp	r3, #192	; 0xc0
 800ac38:	d016      	beq.n	800ac68 <UART_SetConfig+0x208>
 800ac3a:	2bc0      	cmp	r3, #192	; 0xc0
 800ac3c:	d818      	bhi.n	800ac70 <UART_SetConfig+0x210>
 800ac3e:	2b80      	cmp	r3, #128	; 0x80
 800ac40:	d00a      	beq.n	800ac58 <UART_SetConfig+0x1f8>
 800ac42:	2b80      	cmp	r3, #128	; 0x80
 800ac44:	d814      	bhi.n	800ac70 <UART_SetConfig+0x210>
 800ac46:	2b00      	cmp	r3, #0
 800ac48:	d002      	beq.n	800ac50 <UART_SetConfig+0x1f0>
 800ac4a:	2b40      	cmp	r3, #64	; 0x40
 800ac4c:	d008      	beq.n	800ac60 <UART_SetConfig+0x200>
 800ac4e:	e00f      	b.n	800ac70 <UART_SetConfig+0x210>
 800ac50:	2300      	movs	r3, #0
 800ac52:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ac56:	e042      	b.n	800acde <UART_SetConfig+0x27e>
 800ac58:	2302      	movs	r3, #2
 800ac5a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ac5e:	e03e      	b.n	800acde <UART_SetConfig+0x27e>
 800ac60:	2304      	movs	r3, #4
 800ac62:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ac66:	e03a      	b.n	800acde <UART_SetConfig+0x27e>
 800ac68:	2308      	movs	r3, #8
 800ac6a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ac6e:	e036      	b.n	800acde <UART_SetConfig+0x27e>
 800ac70:	2310      	movs	r3, #16
 800ac72:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ac76:	e032      	b.n	800acde <UART_SetConfig+0x27e>
 800ac78:	697b      	ldr	r3, [r7, #20]
 800ac7a:	681b      	ldr	r3, [r3, #0]
 800ac7c:	4a30      	ldr	r2, [pc, #192]	; (800ad40 <UART_SetConfig+0x2e0>)
 800ac7e:	4293      	cmp	r3, r2
 800ac80:	d12a      	bne.n	800acd8 <UART_SetConfig+0x278>
 800ac82:	4b31      	ldr	r3, [pc, #196]	; (800ad48 <UART_SetConfig+0x2e8>)
 800ac84:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ac88:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800ac8c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800ac90:	d01a      	beq.n	800acc8 <UART_SetConfig+0x268>
 800ac92:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800ac96:	d81b      	bhi.n	800acd0 <UART_SetConfig+0x270>
 800ac98:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800ac9c:	d00c      	beq.n	800acb8 <UART_SetConfig+0x258>
 800ac9e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800aca2:	d815      	bhi.n	800acd0 <UART_SetConfig+0x270>
 800aca4:	2b00      	cmp	r3, #0
 800aca6:	d003      	beq.n	800acb0 <UART_SetConfig+0x250>
 800aca8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800acac:	d008      	beq.n	800acc0 <UART_SetConfig+0x260>
 800acae:	e00f      	b.n	800acd0 <UART_SetConfig+0x270>
 800acb0:	2300      	movs	r3, #0
 800acb2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800acb6:	e012      	b.n	800acde <UART_SetConfig+0x27e>
 800acb8:	2302      	movs	r3, #2
 800acba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800acbe:	e00e      	b.n	800acde <UART_SetConfig+0x27e>
 800acc0:	2304      	movs	r3, #4
 800acc2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800acc6:	e00a      	b.n	800acde <UART_SetConfig+0x27e>
 800acc8:	2308      	movs	r3, #8
 800acca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800acce:	e006      	b.n	800acde <UART_SetConfig+0x27e>
 800acd0:	2310      	movs	r3, #16
 800acd2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800acd6:	e002      	b.n	800acde <UART_SetConfig+0x27e>
 800acd8:	2310      	movs	r3, #16
 800acda:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800acde:	697b      	ldr	r3, [r7, #20]
 800ace0:	681b      	ldr	r3, [r3, #0]
 800ace2:	4a17      	ldr	r2, [pc, #92]	; (800ad40 <UART_SetConfig+0x2e0>)
 800ace4:	4293      	cmp	r3, r2
 800ace6:	f040 80a8 	bne.w	800ae3a <UART_SetConfig+0x3da>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800acea:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800acee:	2b08      	cmp	r3, #8
 800acf0:	d834      	bhi.n	800ad5c <UART_SetConfig+0x2fc>
 800acf2:	a201      	add	r2, pc, #4	; (adr r2, 800acf8 <UART_SetConfig+0x298>)
 800acf4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800acf8:	0800ad1d 	.word	0x0800ad1d
 800acfc:	0800ad5d 	.word	0x0800ad5d
 800ad00:	0800ad25 	.word	0x0800ad25
 800ad04:	0800ad5d 	.word	0x0800ad5d
 800ad08:	0800ad2b 	.word	0x0800ad2b
 800ad0c:	0800ad5d 	.word	0x0800ad5d
 800ad10:	0800ad5d 	.word	0x0800ad5d
 800ad14:	0800ad5d 	.word	0x0800ad5d
 800ad18:	0800ad33 	.word	0x0800ad33
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800ad1c:	f7fc fb12 	bl	8007344 <HAL_RCC_GetPCLK1Freq>
 800ad20:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800ad22:	e021      	b.n	800ad68 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800ad24:	4b0c      	ldr	r3, [pc, #48]	; (800ad58 <UART_SetConfig+0x2f8>)
 800ad26:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800ad28:	e01e      	b.n	800ad68 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800ad2a:	f7fc fa9d 	bl	8007268 <HAL_RCC_GetSysClockFreq>
 800ad2e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800ad30:	e01a      	b.n	800ad68 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800ad32:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ad36:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800ad38:	e016      	b.n	800ad68 <UART_SetConfig+0x308>
 800ad3a:	bf00      	nop
 800ad3c:	cfff69f3 	.word	0xcfff69f3
 800ad40:	40008000 	.word	0x40008000
 800ad44:	40013800 	.word	0x40013800
 800ad48:	40021000 	.word	0x40021000
 800ad4c:	40004400 	.word	0x40004400
 800ad50:	40004800 	.word	0x40004800
 800ad54:	40004c00 	.word	0x40004c00
 800ad58:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 800ad5c:	2300      	movs	r3, #0
 800ad5e:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800ad60:	2301      	movs	r3, #1
 800ad62:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800ad66:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800ad68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad6a:	2b00      	cmp	r3, #0
 800ad6c:	f000 812a 	beq.w	800afc4 <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800ad70:	697b      	ldr	r3, [r7, #20]
 800ad72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad74:	4a9e      	ldr	r2, [pc, #632]	; (800aff0 <UART_SetConfig+0x590>)
 800ad76:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ad7a:	461a      	mov	r2, r3
 800ad7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad7e:	fbb3 f3f2 	udiv	r3, r3, r2
 800ad82:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800ad84:	697b      	ldr	r3, [r7, #20]
 800ad86:	685a      	ldr	r2, [r3, #4]
 800ad88:	4613      	mov	r3, r2
 800ad8a:	005b      	lsls	r3, r3, #1
 800ad8c:	4413      	add	r3, r2
 800ad8e:	69ba      	ldr	r2, [r7, #24]
 800ad90:	429a      	cmp	r2, r3
 800ad92:	d305      	bcc.n	800ada0 <UART_SetConfig+0x340>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800ad94:	697b      	ldr	r3, [r7, #20]
 800ad96:	685b      	ldr	r3, [r3, #4]
 800ad98:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800ad9a:	69ba      	ldr	r2, [r7, #24]
 800ad9c:	429a      	cmp	r2, r3
 800ad9e:	d903      	bls.n	800ada8 <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 800ada0:	2301      	movs	r3, #1
 800ada2:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800ada6:	e10d      	b.n	800afc4 <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ada8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800adaa:	2200      	movs	r2, #0
 800adac:	60bb      	str	r3, [r7, #8]
 800adae:	60fa      	str	r2, [r7, #12]
 800adb0:	697b      	ldr	r3, [r7, #20]
 800adb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800adb4:	4a8e      	ldr	r2, [pc, #568]	; (800aff0 <UART_SetConfig+0x590>)
 800adb6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800adba:	b29b      	uxth	r3, r3
 800adbc:	2200      	movs	r2, #0
 800adbe:	603b      	str	r3, [r7, #0]
 800adc0:	607a      	str	r2, [r7, #4]
 800adc2:	e9d7 2300 	ldrd	r2, r3, [r7]
 800adc6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800adca:	f7f5 fd53 	bl	8000874 <__aeabi_uldivmod>
 800adce:	4602      	mov	r2, r0
 800add0:	460b      	mov	r3, r1
 800add2:	4610      	mov	r0, r2
 800add4:	4619      	mov	r1, r3
 800add6:	f04f 0200 	mov.w	r2, #0
 800adda:	f04f 0300 	mov.w	r3, #0
 800adde:	020b      	lsls	r3, r1, #8
 800ade0:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800ade4:	0202      	lsls	r2, r0, #8
 800ade6:	6979      	ldr	r1, [r7, #20]
 800ade8:	6849      	ldr	r1, [r1, #4]
 800adea:	0849      	lsrs	r1, r1, #1
 800adec:	2000      	movs	r0, #0
 800adee:	460c      	mov	r4, r1
 800adf0:	4605      	mov	r5, r0
 800adf2:	eb12 0804 	adds.w	r8, r2, r4
 800adf6:	eb43 0905 	adc.w	r9, r3, r5
 800adfa:	697b      	ldr	r3, [r7, #20]
 800adfc:	685b      	ldr	r3, [r3, #4]
 800adfe:	2200      	movs	r2, #0
 800ae00:	469a      	mov	sl, r3
 800ae02:	4693      	mov	fp, r2
 800ae04:	4652      	mov	r2, sl
 800ae06:	465b      	mov	r3, fp
 800ae08:	4640      	mov	r0, r8
 800ae0a:	4649      	mov	r1, r9
 800ae0c:	f7f5 fd32 	bl	8000874 <__aeabi_uldivmod>
 800ae10:	4602      	mov	r2, r0
 800ae12:	460b      	mov	r3, r1
 800ae14:	4613      	mov	r3, r2
 800ae16:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800ae18:	6a3b      	ldr	r3, [r7, #32]
 800ae1a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800ae1e:	d308      	bcc.n	800ae32 <UART_SetConfig+0x3d2>
 800ae20:	6a3b      	ldr	r3, [r7, #32]
 800ae22:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ae26:	d204      	bcs.n	800ae32 <UART_SetConfig+0x3d2>
        {
          huart->Instance->BRR = usartdiv;
 800ae28:	697b      	ldr	r3, [r7, #20]
 800ae2a:	681b      	ldr	r3, [r3, #0]
 800ae2c:	6a3a      	ldr	r2, [r7, #32]
 800ae2e:	60da      	str	r2, [r3, #12]
 800ae30:	e0c8      	b.n	800afc4 <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 800ae32:	2301      	movs	r3, #1
 800ae34:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800ae38:	e0c4      	b.n	800afc4 <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800ae3a:	697b      	ldr	r3, [r7, #20]
 800ae3c:	69db      	ldr	r3, [r3, #28]
 800ae3e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ae42:	d167      	bne.n	800af14 <UART_SetConfig+0x4b4>
  {
    switch (clocksource)
 800ae44:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800ae48:	2b08      	cmp	r3, #8
 800ae4a:	d828      	bhi.n	800ae9e <UART_SetConfig+0x43e>
 800ae4c:	a201      	add	r2, pc, #4	; (adr r2, 800ae54 <UART_SetConfig+0x3f4>)
 800ae4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ae52:	bf00      	nop
 800ae54:	0800ae79 	.word	0x0800ae79
 800ae58:	0800ae81 	.word	0x0800ae81
 800ae5c:	0800ae89 	.word	0x0800ae89
 800ae60:	0800ae9f 	.word	0x0800ae9f
 800ae64:	0800ae8f 	.word	0x0800ae8f
 800ae68:	0800ae9f 	.word	0x0800ae9f
 800ae6c:	0800ae9f 	.word	0x0800ae9f
 800ae70:	0800ae9f 	.word	0x0800ae9f
 800ae74:	0800ae97 	.word	0x0800ae97
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800ae78:	f7fc fa64 	bl	8007344 <HAL_RCC_GetPCLK1Freq>
 800ae7c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800ae7e:	e014      	b.n	800aeaa <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800ae80:	f7fc fa76 	bl	8007370 <HAL_RCC_GetPCLK2Freq>
 800ae84:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800ae86:	e010      	b.n	800aeaa <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800ae88:	4b5a      	ldr	r3, [pc, #360]	; (800aff4 <UART_SetConfig+0x594>)
 800ae8a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800ae8c:	e00d      	b.n	800aeaa <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800ae8e:	f7fc f9eb 	bl	8007268 <HAL_RCC_GetSysClockFreq>
 800ae92:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800ae94:	e009      	b.n	800aeaa <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800ae96:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ae9a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800ae9c:	e005      	b.n	800aeaa <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 800ae9e:	2300      	movs	r3, #0
 800aea0:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800aea2:	2301      	movs	r3, #1
 800aea4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800aea8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800aeaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aeac:	2b00      	cmp	r3, #0
 800aeae:	f000 8089 	beq.w	800afc4 <UART_SetConfig+0x564>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800aeb2:	697b      	ldr	r3, [r7, #20]
 800aeb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aeb6:	4a4e      	ldr	r2, [pc, #312]	; (800aff0 <UART_SetConfig+0x590>)
 800aeb8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800aebc:	461a      	mov	r2, r3
 800aebe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aec0:	fbb3 f3f2 	udiv	r3, r3, r2
 800aec4:	005a      	lsls	r2, r3, #1
 800aec6:	697b      	ldr	r3, [r7, #20]
 800aec8:	685b      	ldr	r3, [r3, #4]
 800aeca:	085b      	lsrs	r3, r3, #1
 800aecc:	441a      	add	r2, r3
 800aece:	697b      	ldr	r3, [r7, #20]
 800aed0:	685b      	ldr	r3, [r3, #4]
 800aed2:	fbb2 f3f3 	udiv	r3, r2, r3
 800aed6:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800aed8:	6a3b      	ldr	r3, [r7, #32]
 800aeda:	2b0f      	cmp	r3, #15
 800aedc:	d916      	bls.n	800af0c <UART_SetConfig+0x4ac>
 800aede:	6a3b      	ldr	r3, [r7, #32]
 800aee0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800aee4:	d212      	bcs.n	800af0c <UART_SetConfig+0x4ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800aee6:	6a3b      	ldr	r3, [r7, #32]
 800aee8:	b29b      	uxth	r3, r3
 800aeea:	f023 030f 	bic.w	r3, r3, #15
 800aeee:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800aef0:	6a3b      	ldr	r3, [r7, #32]
 800aef2:	085b      	lsrs	r3, r3, #1
 800aef4:	b29b      	uxth	r3, r3
 800aef6:	f003 0307 	and.w	r3, r3, #7
 800aefa:	b29a      	uxth	r2, r3
 800aefc:	8bfb      	ldrh	r3, [r7, #30]
 800aefe:	4313      	orrs	r3, r2
 800af00:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800af02:	697b      	ldr	r3, [r7, #20]
 800af04:	681b      	ldr	r3, [r3, #0]
 800af06:	8bfa      	ldrh	r2, [r7, #30]
 800af08:	60da      	str	r2, [r3, #12]
 800af0a:	e05b      	b.n	800afc4 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 800af0c:	2301      	movs	r3, #1
 800af0e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800af12:	e057      	b.n	800afc4 <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 800af14:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800af18:	2b08      	cmp	r3, #8
 800af1a:	d828      	bhi.n	800af6e <UART_SetConfig+0x50e>
 800af1c:	a201      	add	r2, pc, #4	; (adr r2, 800af24 <UART_SetConfig+0x4c4>)
 800af1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800af22:	bf00      	nop
 800af24:	0800af49 	.word	0x0800af49
 800af28:	0800af51 	.word	0x0800af51
 800af2c:	0800af59 	.word	0x0800af59
 800af30:	0800af6f 	.word	0x0800af6f
 800af34:	0800af5f 	.word	0x0800af5f
 800af38:	0800af6f 	.word	0x0800af6f
 800af3c:	0800af6f 	.word	0x0800af6f
 800af40:	0800af6f 	.word	0x0800af6f
 800af44:	0800af67 	.word	0x0800af67
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800af48:	f7fc f9fc 	bl	8007344 <HAL_RCC_GetPCLK1Freq>
 800af4c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800af4e:	e014      	b.n	800af7a <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800af50:	f7fc fa0e 	bl	8007370 <HAL_RCC_GetPCLK2Freq>
 800af54:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800af56:	e010      	b.n	800af7a <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800af58:	4b26      	ldr	r3, [pc, #152]	; (800aff4 <UART_SetConfig+0x594>)
 800af5a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800af5c:	e00d      	b.n	800af7a <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800af5e:	f7fc f983 	bl	8007268 <HAL_RCC_GetSysClockFreq>
 800af62:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800af64:	e009      	b.n	800af7a <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800af66:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800af6a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800af6c:	e005      	b.n	800af7a <UART_SetConfig+0x51a>
      default:
        pclk = 0U;
 800af6e:	2300      	movs	r3, #0
 800af70:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800af72:	2301      	movs	r3, #1
 800af74:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800af78:	bf00      	nop
    }

    if (pclk != 0U)
 800af7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af7c:	2b00      	cmp	r3, #0
 800af7e:	d021      	beq.n	800afc4 <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800af80:	697b      	ldr	r3, [r7, #20]
 800af82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af84:	4a1a      	ldr	r2, [pc, #104]	; (800aff0 <UART_SetConfig+0x590>)
 800af86:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800af8a:	461a      	mov	r2, r3
 800af8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af8e:	fbb3 f2f2 	udiv	r2, r3, r2
 800af92:	697b      	ldr	r3, [r7, #20]
 800af94:	685b      	ldr	r3, [r3, #4]
 800af96:	085b      	lsrs	r3, r3, #1
 800af98:	441a      	add	r2, r3
 800af9a:	697b      	ldr	r3, [r7, #20]
 800af9c:	685b      	ldr	r3, [r3, #4]
 800af9e:	fbb2 f3f3 	udiv	r3, r2, r3
 800afa2:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800afa4:	6a3b      	ldr	r3, [r7, #32]
 800afa6:	2b0f      	cmp	r3, #15
 800afa8:	d909      	bls.n	800afbe <UART_SetConfig+0x55e>
 800afaa:	6a3b      	ldr	r3, [r7, #32]
 800afac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800afb0:	d205      	bcs.n	800afbe <UART_SetConfig+0x55e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800afb2:	6a3b      	ldr	r3, [r7, #32]
 800afb4:	b29a      	uxth	r2, r3
 800afb6:	697b      	ldr	r3, [r7, #20]
 800afb8:	681b      	ldr	r3, [r3, #0]
 800afba:	60da      	str	r2, [r3, #12]
 800afbc:	e002      	b.n	800afc4 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 800afbe:	2301      	movs	r3, #1
 800afc0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800afc4:	697b      	ldr	r3, [r7, #20]
 800afc6:	2201      	movs	r2, #1
 800afc8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800afcc:	697b      	ldr	r3, [r7, #20]
 800afce:	2201      	movs	r2, #1
 800afd0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800afd4:	697b      	ldr	r3, [r7, #20]
 800afd6:	2200      	movs	r2, #0
 800afd8:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800afda:	697b      	ldr	r3, [r7, #20]
 800afdc:	2200      	movs	r2, #0
 800afde:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800afe0:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 800afe4:	4618      	mov	r0, r3
 800afe6:	3730      	adds	r7, #48	; 0x30
 800afe8:	46bd      	mov	sp, r7
 800afea:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800afee:	bf00      	nop
 800aff0:	0800bdbc 	.word	0x0800bdbc
 800aff4:	00f42400 	.word	0x00f42400

0800aff8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800aff8:	b480      	push	{r7}
 800affa:	b083      	sub	sp, #12
 800affc:	af00      	add	r7, sp, #0
 800affe:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800b000:	687b      	ldr	r3, [r7, #4]
 800b002:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b004:	f003 0301 	and.w	r3, r3, #1
 800b008:	2b00      	cmp	r3, #0
 800b00a:	d00a      	beq.n	800b022 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800b00c:	687b      	ldr	r3, [r7, #4]
 800b00e:	681b      	ldr	r3, [r3, #0]
 800b010:	685b      	ldr	r3, [r3, #4]
 800b012:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800b016:	687b      	ldr	r3, [r7, #4]
 800b018:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b01a:	687b      	ldr	r3, [r7, #4]
 800b01c:	681b      	ldr	r3, [r3, #0]
 800b01e:	430a      	orrs	r2, r1
 800b020:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800b022:	687b      	ldr	r3, [r7, #4]
 800b024:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b026:	f003 0302 	and.w	r3, r3, #2
 800b02a:	2b00      	cmp	r3, #0
 800b02c:	d00a      	beq.n	800b044 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800b02e:	687b      	ldr	r3, [r7, #4]
 800b030:	681b      	ldr	r3, [r3, #0]
 800b032:	685b      	ldr	r3, [r3, #4]
 800b034:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800b038:	687b      	ldr	r3, [r7, #4]
 800b03a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b03c:	687b      	ldr	r3, [r7, #4]
 800b03e:	681b      	ldr	r3, [r3, #0]
 800b040:	430a      	orrs	r2, r1
 800b042:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800b044:	687b      	ldr	r3, [r7, #4]
 800b046:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b048:	f003 0304 	and.w	r3, r3, #4
 800b04c:	2b00      	cmp	r3, #0
 800b04e:	d00a      	beq.n	800b066 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800b050:	687b      	ldr	r3, [r7, #4]
 800b052:	681b      	ldr	r3, [r3, #0]
 800b054:	685b      	ldr	r3, [r3, #4]
 800b056:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800b05a:	687b      	ldr	r3, [r7, #4]
 800b05c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b05e:	687b      	ldr	r3, [r7, #4]
 800b060:	681b      	ldr	r3, [r3, #0]
 800b062:	430a      	orrs	r2, r1
 800b064:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800b066:	687b      	ldr	r3, [r7, #4]
 800b068:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b06a:	f003 0308 	and.w	r3, r3, #8
 800b06e:	2b00      	cmp	r3, #0
 800b070:	d00a      	beq.n	800b088 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800b072:	687b      	ldr	r3, [r7, #4]
 800b074:	681b      	ldr	r3, [r3, #0]
 800b076:	685b      	ldr	r3, [r3, #4]
 800b078:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800b07c:	687b      	ldr	r3, [r7, #4]
 800b07e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b080:	687b      	ldr	r3, [r7, #4]
 800b082:	681b      	ldr	r3, [r3, #0]
 800b084:	430a      	orrs	r2, r1
 800b086:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800b088:	687b      	ldr	r3, [r7, #4]
 800b08a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b08c:	f003 0310 	and.w	r3, r3, #16
 800b090:	2b00      	cmp	r3, #0
 800b092:	d00a      	beq.n	800b0aa <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800b094:	687b      	ldr	r3, [r7, #4]
 800b096:	681b      	ldr	r3, [r3, #0]
 800b098:	689b      	ldr	r3, [r3, #8]
 800b09a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800b09e:	687b      	ldr	r3, [r7, #4]
 800b0a0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800b0a2:	687b      	ldr	r3, [r7, #4]
 800b0a4:	681b      	ldr	r3, [r3, #0]
 800b0a6:	430a      	orrs	r2, r1
 800b0a8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800b0aa:	687b      	ldr	r3, [r7, #4]
 800b0ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b0ae:	f003 0320 	and.w	r3, r3, #32
 800b0b2:	2b00      	cmp	r3, #0
 800b0b4:	d00a      	beq.n	800b0cc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800b0b6:	687b      	ldr	r3, [r7, #4]
 800b0b8:	681b      	ldr	r3, [r3, #0]
 800b0ba:	689b      	ldr	r3, [r3, #8]
 800b0bc:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800b0c0:	687b      	ldr	r3, [r7, #4]
 800b0c2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800b0c4:	687b      	ldr	r3, [r7, #4]
 800b0c6:	681b      	ldr	r3, [r3, #0]
 800b0c8:	430a      	orrs	r2, r1
 800b0ca:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800b0cc:	687b      	ldr	r3, [r7, #4]
 800b0ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b0d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b0d4:	2b00      	cmp	r3, #0
 800b0d6:	d01a      	beq.n	800b10e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800b0d8:	687b      	ldr	r3, [r7, #4]
 800b0da:	681b      	ldr	r3, [r3, #0]
 800b0dc:	685b      	ldr	r3, [r3, #4]
 800b0de:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800b0e2:	687b      	ldr	r3, [r7, #4]
 800b0e4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b0e6:	687b      	ldr	r3, [r7, #4]
 800b0e8:	681b      	ldr	r3, [r3, #0]
 800b0ea:	430a      	orrs	r2, r1
 800b0ec:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800b0ee:	687b      	ldr	r3, [r7, #4]
 800b0f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b0f2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b0f6:	d10a      	bne.n	800b10e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800b0f8:	687b      	ldr	r3, [r7, #4]
 800b0fa:	681b      	ldr	r3, [r3, #0]
 800b0fc:	685b      	ldr	r3, [r3, #4]
 800b0fe:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800b102:	687b      	ldr	r3, [r7, #4]
 800b104:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800b106:	687b      	ldr	r3, [r7, #4]
 800b108:	681b      	ldr	r3, [r3, #0]
 800b10a:	430a      	orrs	r2, r1
 800b10c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800b10e:	687b      	ldr	r3, [r7, #4]
 800b110:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b112:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b116:	2b00      	cmp	r3, #0
 800b118:	d00a      	beq.n	800b130 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800b11a:	687b      	ldr	r3, [r7, #4]
 800b11c:	681b      	ldr	r3, [r3, #0]
 800b11e:	685b      	ldr	r3, [r3, #4]
 800b120:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800b124:	687b      	ldr	r3, [r7, #4]
 800b126:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800b128:	687b      	ldr	r3, [r7, #4]
 800b12a:	681b      	ldr	r3, [r3, #0]
 800b12c:	430a      	orrs	r2, r1
 800b12e:	605a      	str	r2, [r3, #4]
  }
}
 800b130:	bf00      	nop
 800b132:	370c      	adds	r7, #12
 800b134:	46bd      	mov	sp, r7
 800b136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b13a:	4770      	bx	lr

0800b13c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800b13c:	b580      	push	{r7, lr}
 800b13e:	b086      	sub	sp, #24
 800b140:	af02      	add	r7, sp, #8
 800b142:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b144:	687b      	ldr	r3, [r7, #4]
 800b146:	2200      	movs	r2, #0
 800b148:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800b14c:	f7f8 f922 	bl	8003394 <HAL_GetTick>
 800b150:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800b152:	687b      	ldr	r3, [r7, #4]
 800b154:	681b      	ldr	r3, [r3, #0]
 800b156:	681b      	ldr	r3, [r3, #0]
 800b158:	f003 0308 	and.w	r3, r3, #8
 800b15c:	2b08      	cmp	r3, #8
 800b15e:	d10e      	bne.n	800b17e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b160:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800b164:	9300      	str	r3, [sp, #0]
 800b166:	68fb      	ldr	r3, [r7, #12]
 800b168:	2200      	movs	r2, #0
 800b16a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800b16e:	6878      	ldr	r0, [r7, #4]
 800b170:	f000 f82f 	bl	800b1d2 <UART_WaitOnFlagUntilTimeout>
 800b174:	4603      	mov	r3, r0
 800b176:	2b00      	cmp	r3, #0
 800b178:	d001      	beq.n	800b17e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b17a:	2303      	movs	r3, #3
 800b17c:	e025      	b.n	800b1ca <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800b17e:	687b      	ldr	r3, [r7, #4]
 800b180:	681b      	ldr	r3, [r3, #0]
 800b182:	681b      	ldr	r3, [r3, #0]
 800b184:	f003 0304 	and.w	r3, r3, #4
 800b188:	2b04      	cmp	r3, #4
 800b18a:	d10e      	bne.n	800b1aa <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b18c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800b190:	9300      	str	r3, [sp, #0]
 800b192:	68fb      	ldr	r3, [r7, #12]
 800b194:	2200      	movs	r2, #0
 800b196:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800b19a:	6878      	ldr	r0, [r7, #4]
 800b19c:	f000 f819 	bl	800b1d2 <UART_WaitOnFlagUntilTimeout>
 800b1a0:	4603      	mov	r3, r0
 800b1a2:	2b00      	cmp	r3, #0
 800b1a4:	d001      	beq.n	800b1aa <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b1a6:	2303      	movs	r3, #3
 800b1a8:	e00f      	b.n	800b1ca <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800b1aa:	687b      	ldr	r3, [r7, #4]
 800b1ac:	2220      	movs	r2, #32
 800b1ae:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800b1b2:	687b      	ldr	r3, [r7, #4]
 800b1b4:	2220      	movs	r2, #32
 800b1b6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b1ba:	687b      	ldr	r3, [r7, #4]
 800b1bc:	2200      	movs	r2, #0
 800b1be:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800b1c0:	687b      	ldr	r3, [r7, #4]
 800b1c2:	2200      	movs	r2, #0
 800b1c4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800b1c8:	2300      	movs	r3, #0
}
 800b1ca:	4618      	mov	r0, r3
 800b1cc:	3710      	adds	r7, #16
 800b1ce:	46bd      	mov	sp, r7
 800b1d0:	bd80      	pop	{r7, pc}

0800b1d2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800b1d2:	b580      	push	{r7, lr}
 800b1d4:	b09c      	sub	sp, #112	; 0x70
 800b1d6:	af00      	add	r7, sp, #0
 800b1d8:	60f8      	str	r0, [r7, #12]
 800b1da:	60b9      	str	r1, [r7, #8]
 800b1dc:	603b      	str	r3, [r7, #0]
 800b1de:	4613      	mov	r3, r2
 800b1e0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b1e2:	e0a9      	b.n	800b338 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b1e4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b1e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b1ea:	f000 80a5 	beq.w	800b338 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b1ee:	f7f8 f8d1 	bl	8003394 <HAL_GetTick>
 800b1f2:	4602      	mov	r2, r0
 800b1f4:	683b      	ldr	r3, [r7, #0]
 800b1f6:	1ad3      	subs	r3, r2, r3
 800b1f8:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800b1fa:	429a      	cmp	r2, r3
 800b1fc:	d302      	bcc.n	800b204 <UART_WaitOnFlagUntilTimeout+0x32>
 800b1fe:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b200:	2b00      	cmp	r3, #0
 800b202:	d140      	bne.n	800b286 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800b204:	68fb      	ldr	r3, [r7, #12]
 800b206:	681b      	ldr	r3, [r3, #0]
 800b208:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b20a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b20c:	e853 3f00 	ldrex	r3, [r3]
 800b210:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800b212:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b214:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800b218:	667b      	str	r3, [r7, #100]	; 0x64
 800b21a:	68fb      	ldr	r3, [r7, #12]
 800b21c:	681b      	ldr	r3, [r3, #0]
 800b21e:	461a      	mov	r2, r3
 800b220:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b222:	65fb      	str	r3, [r7, #92]	; 0x5c
 800b224:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b226:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800b228:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800b22a:	e841 2300 	strex	r3, r2, [r1]
 800b22e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800b230:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b232:	2b00      	cmp	r3, #0
 800b234:	d1e6      	bne.n	800b204 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b236:	68fb      	ldr	r3, [r7, #12]
 800b238:	681b      	ldr	r3, [r3, #0]
 800b23a:	3308      	adds	r3, #8
 800b23c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b23e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b240:	e853 3f00 	ldrex	r3, [r3]
 800b244:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800b246:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b248:	f023 0301 	bic.w	r3, r3, #1
 800b24c:	663b      	str	r3, [r7, #96]	; 0x60
 800b24e:	68fb      	ldr	r3, [r7, #12]
 800b250:	681b      	ldr	r3, [r3, #0]
 800b252:	3308      	adds	r3, #8
 800b254:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800b256:	64ba      	str	r2, [r7, #72]	; 0x48
 800b258:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b25a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800b25c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b25e:	e841 2300 	strex	r3, r2, [r1]
 800b262:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800b264:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b266:	2b00      	cmp	r3, #0
 800b268:	d1e5      	bne.n	800b236 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800b26a:	68fb      	ldr	r3, [r7, #12]
 800b26c:	2220      	movs	r2, #32
 800b26e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800b272:	68fb      	ldr	r3, [r7, #12]
 800b274:	2220      	movs	r2, #32
 800b276:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800b27a:	68fb      	ldr	r3, [r7, #12]
 800b27c:	2200      	movs	r2, #0
 800b27e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800b282:	2303      	movs	r3, #3
 800b284:	e069      	b.n	800b35a <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800b286:	68fb      	ldr	r3, [r7, #12]
 800b288:	681b      	ldr	r3, [r3, #0]
 800b28a:	681b      	ldr	r3, [r3, #0]
 800b28c:	f003 0304 	and.w	r3, r3, #4
 800b290:	2b00      	cmp	r3, #0
 800b292:	d051      	beq.n	800b338 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800b294:	68fb      	ldr	r3, [r7, #12]
 800b296:	681b      	ldr	r3, [r3, #0]
 800b298:	69db      	ldr	r3, [r3, #28]
 800b29a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b29e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b2a2:	d149      	bne.n	800b338 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800b2a4:	68fb      	ldr	r3, [r7, #12]
 800b2a6:	681b      	ldr	r3, [r3, #0]
 800b2a8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800b2ac:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800b2ae:	68fb      	ldr	r3, [r7, #12]
 800b2b0:	681b      	ldr	r3, [r3, #0]
 800b2b2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b2b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b2b6:	e853 3f00 	ldrex	r3, [r3]
 800b2ba:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800b2bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b2be:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800b2c2:	66fb      	str	r3, [r7, #108]	; 0x6c
 800b2c4:	68fb      	ldr	r3, [r7, #12]
 800b2c6:	681b      	ldr	r3, [r3, #0]
 800b2c8:	461a      	mov	r2, r3
 800b2ca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b2cc:	637b      	str	r3, [r7, #52]	; 0x34
 800b2ce:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b2d0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800b2d2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b2d4:	e841 2300 	strex	r3, r2, [r1]
 800b2d8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800b2da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b2dc:	2b00      	cmp	r3, #0
 800b2de:	d1e6      	bne.n	800b2ae <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b2e0:	68fb      	ldr	r3, [r7, #12]
 800b2e2:	681b      	ldr	r3, [r3, #0]
 800b2e4:	3308      	adds	r3, #8
 800b2e6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b2e8:	697b      	ldr	r3, [r7, #20]
 800b2ea:	e853 3f00 	ldrex	r3, [r3]
 800b2ee:	613b      	str	r3, [r7, #16]
   return(result);
 800b2f0:	693b      	ldr	r3, [r7, #16]
 800b2f2:	f023 0301 	bic.w	r3, r3, #1
 800b2f6:	66bb      	str	r3, [r7, #104]	; 0x68
 800b2f8:	68fb      	ldr	r3, [r7, #12]
 800b2fa:	681b      	ldr	r3, [r3, #0]
 800b2fc:	3308      	adds	r3, #8
 800b2fe:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800b300:	623a      	str	r2, [r7, #32]
 800b302:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b304:	69f9      	ldr	r1, [r7, #28]
 800b306:	6a3a      	ldr	r2, [r7, #32]
 800b308:	e841 2300 	strex	r3, r2, [r1]
 800b30c:	61bb      	str	r3, [r7, #24]
   return(result);
 800b30e:	69bb      	ldr	r3, [r7, #24]
 800b310:	2b00      	cmp	r3, #0
 800b312:	d1e5      	bne.n	800b2e0 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 800b314:	68fb      	ldr	r3, [r7, #12]
 800b316:	2220      	movs	r2, #32
 800b318:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800b31c:	68fb      	ldr	r3, [r7, #12]
 800b31e:	2220      	movs	r2, #32
 800b320:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800b324:	68fb      	ldr	r3, [r7, #12]
 800b326:	2220      	movs	r2, #32
 800b328:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800b32c:	68fb      	ldr	r3, [r7, #12]
 800b32e:	2200      	movs	r2, #0
 800b330:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800b334:	2303      	movs	r3, #3
 800b336:	e010      	b.n	800b35a <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b338:	68fb      	ldr	r3, [r7, #12]
 800b33a:	681b      	ldr	r3, [r3, #0]
 800b33c:	69da      	ldr	r2, [r3, #28]
 800b33e:	68bb      	ldr	r3, [r7, #8]
 800b340:	4013      	ands	r3, r2
 800b342:	68ba      	ldr	r2, [r7, #8]
 800b344:	429a      	cmp	r2, r3
 800b346:	bf0c      	ite	eq
 800b348:	2301      	moveq	r3, #1
 800b34a:	2300      	movne	r3, #0
 800b34c:	b2db      	uxtb	r3, r3
 800b34e:	461a      	mov	r2, r3
 800b350:	79fb      	ldrb	r3, [r7, #7]
 800b352:	429a      	cmp	r2, r3
 800b354:	f43f af46 	beq.w	800b1e4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800b358:	2300      	movs	r3, #0
}
 800b35a:	4618      	mov	r0, r3
 800b35c:	3770      	adds	r7, #112	; 0x70
 800b35e:	46bd      	mov	sp, r7
 800b360:	bd80      	pop	{r7, pc}

0800b362 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800b362:	b480      	push	{r7}
 800b364:	b095      	sub	sp, #84	; 0x54
 800b366:	af00      	add	r7, sp, #0
 800b368:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b36a:	687b      	ldr	r3, [r7, #4]
 800b36c:	681b      	ldr	r3, [r3, #0]
 800b36e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b370:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b372:	e853 3f00 	ldrex	r3, [r3]
 800b376:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800b378:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b37a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800b37e:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b380:	687b      	ldr	r3, [r7, #4]
 800b382:	681b      	ldr	r3, [r3, #0]
 800b384:	461a      	mov	r2, r3
 800b386:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b388:	643b      	str	r3, [r7, #64]	; 0x40
 800b38a:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b38c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800b38e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800b390:	e841 2300 	strex	r3, r2, [r1]
 800b394:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800b396:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b398:	2b00      	cmp	r3, #0
 800b39a:	d1e6      	bne.n	800b36a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800b39c:	687b      	ldr	r3, [r7, #4]
 800b39e:	681b      	ldr	r3, [r3, #0]
 800b3a0:	3308      	adds	r3, #8
 800b3a2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b3a4:	6a3b      	ldr	r3, [r7, #32]
 800b3a6:	e853 3f00 	ldrex	r3, [r3]
 800b3aa:	61fb      	str	r3, [r7, #28]
   return(result);
 800b3ac:	69fb      	ldr	r3, [r7, #28]
 800b3ae:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800b3b2:	f023 0301 	bic.w	r3, r3, #1
 800b3b6:	64bb      	str	r3, [r7, #72]	; 0x48
 800b3b8:	687b      	ldr	r3, [r7, #4]
 800b3ba:	681b      	ldr	r3, [r3, #0]
 800b3bc:	3308      	adds	r3, #8
 800b3be:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b3c0:	62fa      	str	r2, [r7, #44]	; 0x2c
 800b3c2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b3c4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800b3c6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b3c8:	e841 2300 	strex	r3, r2, [r1]
 800b3cc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800b3ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b3d0:	2b00      	cmp	r3, #0
 800b3d2:	d1e3      	bne.n	800b39c <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b3d4:	687b      	ldr	r3, [r7, #4]
 800b3d6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b3d8:	2b01      	cmp	r3, #1
 800b3da:	d118      	bne.n	800b40e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b3dc:	687b      	ldr	r3, [r7, #4]
 800b3de:	681b      	ldr	r3, [r3, #0]
 800b3e0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b3e2:	68fb      	ldr	r3, [r7, #12]
 800b3e4:	e853 3f00 	ldrex	r3, [r3]
 800b3e8:	60bb      	str	r3, [r7, #8]
   return(result);
 800b3ea:	68bb      	ldr	r3, [r7, #8]
 800b3ec:	f023 0310 	bic.w	r3, r3, #16
 800b3f0:	647b      	str	r3, [r7, #68]	; 0x44
 800b3f2:	687b      	ldr	r3, [r7, #4]
 800b3f4:	681b      	ldr	r3, [r3, #0]
 800b3f6:	461a      	mov	r2, r3
 800b3f8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b3fa:	61bb      	str	r3, [r7, #24]
 800b3fc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b3fe:	6979      	ldr	r1, [r7, #20]
 800b400:	69ba      	ldr	r2, [r7, #24]
 800b402:	e841 2300 	strex	r3, r2, [r1]
 800b406:	613b      	str	r3, [r7, #16]
   return(result);
 800b408:	693b      	ldr	r3, [r7, #16]
 800b40a:	2b00      	cmp	r3, #0
 800b40c:	d1e6      	bne.n	800b3dc <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800b40e:	687b      	ldr	r3, [r7, #4]
 800b410:	2220      	movs	r2, #32
 800b412:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b416:	687b      	ldr	r3, [r7, #4]
 800b418:	2200      	movs	r2, #0
 800b41a:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800b41c:	687b      	ldr	r3, [r7, #4]
 800b41e:	2200      	movs	r2, #0
 800b420:	671a      	str	r2, [r3, #112]	; 0x70
}
 800b422:	bf00      	nop
 800b424:	3754      	adds	r7, #84	; 0x54
 800b426:	46bd      	mov	sp, r7
 800b428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b42c:	4770      	bx	lr

0800b42e <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800b42e:	b580      	push	{r7, lr}
 800b430:	b084      	sub	sp, #16
 800b432:	af00      	add	r7, sp, #0
 800b434:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b436:	687b      	ldr	r3, [r7, #4]
 800b438:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b43a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800b43c:	68fb      	ldr	r3, [r7, #12]
 800b43e:	2200      	movs	r2, #0
 800b440:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800b444:	68fb      	ldr	r3, [r7, #12]
 800b446:	2200      	movs	r2, #0
 800b448:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800b44c:	68f8      	ldr	r0, [r7, #12]
 800b44e:	f7ff faf1 	bl	800aa34 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b452:	bf00      	nop
 800b454:	3710      	adds	r7, #16
 800b456:	46bd      	mov	sp, r7
 800b458:	bd80      	pop	{r7, pc}

0800b45a <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800b45a:	b580      	push	{r7, lr}
 800b45c:	b088      	sub	sp, #32
 800b45e:	af00      	add	r7, sp, #0
 800b460:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800b462:	687b      	ldr	r3, [r7, #4]
 800b464:	681b      	ldr	r3, [r3, #0]
 800b466:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b468:	68fb      	ldr	r3, [r7, #12]
 800b46a:	e853 3f00 	ldrex	r3, [r3]
 800b46e:	60bb      	str	r3, [r7, #8]
   return(result);
 800b470:	68bb      	ldr	r3, [r7, #8]
 800b472:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b476:	61fb      	str	r3, [r7, #28]
 800b478:	687b      	ldr	r3, [r7, #4]
 800b47a:	681b      	ldr	r3, [r3, #0]
 800b47c:	461a      	mov	r2, r3
 800b47e:	69fb      	ldr	r3, [r7, #28]
 800b480:	61bb      	str	r3, [r7, #24]
 800b482:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b484:	6979      	ldr	r1, [r7, #20]
 800b486:	69ba      	ldr	r2, [r7, #24]
 800b488:	e841 2300 	strex	r3, r2, [r1]
 800b48c:	613b      	str	r3, [r7, #16]
   return(result);
 800b48e:	693b      	ldr	r3, [r7, #16]
 800b490:	2b00      	cmp	r3, #0
 800b492:	d1e6      	bne.n	800b462 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800b494:	687b      	ldr	r3, [r7, #4]
 800b496:	2220      	movs	r2, #32
 800b498:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800b49c:	687b      	ldr	r3, [r7, #4]
 800b49e:	2200      	movs	r2, #0
 800b4a0:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800b4a2:	6878      	ldr	r0, [r7, #4]
 800b4a4:	f7ff fabc 	bl	800aa20 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b4a8:	bf00      	nop
 800b4aa:	3720      	adds	r7, #32
 800b4ac:	46bd      	mov	sp, r7
 800b4ae:	bd80      	pop	{r7, pc}

0800b4b0 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800b4b0:	b480      	push	{r7}
 800b4b2:	b083      	sub	sp, #12
 800b4b4:	af00      	add	r7, sp, #0
 800b4b6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800b4b8:	bf00      	nop
 800b4ba:	370c      	adds	r7, #12
 800b4bc:	46bd      	mov	sp, r7
 800b4be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4c2:	4770      	bx	lr

0800b4c4 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800b4c4:	b480      	push	{r7}
 800b4c6:	b083      	sub	sp, #12
 800b4c8:	af00      	add	r7, sp, #0
 800b4ca:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800b4cc:	bf00      	nop
 800b4ce:	370c      	adds	r7, #12
 800b4d0:	46bd      	mov	sp, r7
 800b4d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4d6:	4770      	bx	lr

0800b4d8 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800b4d8:	b480      	push	{r7}
 800b4da:	b083      	sub	sp, #12
 800b4dc:	af00      	add	r7, sp, #0
 800b4de:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800b4e0:	bf00      	nop
 800b4e2:	370c      	adds	r7, #12
 800b4e4:	46bd      	mov	sp, r7
 800b4e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4ea:	4770      	bx	lr

0800b4ec <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800b4ec:	b480      	push	{r7}
 800b4ee:	b085      	sub	sp, #20
 800b4f0:	af00      	add	r7, sp, #0
 800b4f2:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b4f4:	687b      	ldr	r3, [r7, #4]
 800b4f6:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800b4fa:	2b01      	cmp	r3, #1
 800b4fc:	d101      	bne.n	800b502 <HAL_UARTEx_DisableFifoMode+0x16>
 800b4fe:	2302      	movs	r3, #2
 800b500:	e027      	b.n	800b552 <HAL_UARTEx_DisableFifoMode+0x66>
 800b502:	687b      	ldr	r3, [r7, #4]
 800b504:	2201      	movs	r2, #1
 800b506:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800b50a:	687b      	ldr	r3, [r7, #4]
 800b50c:	2224      	movs	r2, #36	; 0x24
 800b50e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b512:	687b      	ldr	r3, [r7, #4]
 800b514:	681b      	ldr	r3, [r3, #0]
 800b516:	681b      	ldr	r3, [r3, #0]
 800b518:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b51a:	687b      	ldr	r3, [r7, #4]
 800b51c:	681b      	ldr	r3, [r3, #0]
 800b51e:	681a      	ldr	r2, [r3, #0]
 800b520:	687b      	ldr	r3, [r7, #4]
 800b522:	681b      	ldr	r3, [r3, #0]
 800b524:	f022 0201 	bic.w	r2, r2, #1
 800b528:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800b52a:	68fb      	ldr	r3, [r7, #12]
 800b52c:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800b530:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800b532:	687b      	ldr	r3, [r7, #4]
 800b534:	2200      	movs	r2, #0
 800b536:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b538:	687b      	ldr	r3, [r7, #4]
 800b53a:	681b      	ldr	r3, [r3, #0]
 800b53c:	68fa      	ldr	r2, [r7, #12]
 800b53e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b540:	687b      	ldr	r3, [r7, #4]
 800b542:	2220      	movs	r2, #32
 800b544:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b548:	687b      	ldr	r3, [r7, #4]
 800b54a:	2200      	movs	r2, #0
 800b54c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800b550:	2300      	movs	r3, #0
}
 800b552:	4618      	mov	r0, r3
 800b554:	3714      	adds	r7, #20
 800b556:	46bd      	mov	sp, r7
 800b558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b55c:	4770      	bx	lr

0800b55e <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800b55e:	b580      	push	{r7, lr}
 800b560:	b084      	sub	sp, #16
 800b562:	af00      	add	r7, sp, #0
 800b564:	6078      	str	r0, [r7, #4]
 800b566:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b568:	687b      	ldr	r3, [r7, #4]
 800b56a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800b56e:	2b01      	cmp	r3, #1
 800b570:	d101      	bne.n	800b576 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800b572:	2302      	movs	r3, #2
 800b574:	e02d      	b.n	800b5d2 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800b576:	687b      	ldr	r3, [r7, #4]
 800b578:	2201      	movs	r2, #1
 800b57a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800b57e:	687b      	ldr	r3, [r7, #4]
 800b580:	2224      	movs	r2, #36	; 0x24
 800b582:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b586:	687b      	ldr	r3, [r7, #4]
 800b588:	681b      	ldr	r3, [r3, #0]
 800b58a:	681b      	ldr	r3, [r3, #0]
 800b58c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b58e:	687b      	ldr	r3, [r7, #4]
 800b590:	681b      	ldr	r3, [r3, #0]
 800b592:	681a      	ldr	r2, [r3, #0]
 800b594:	687b      	ldr	r3, [r7, #4]
 800b596:	681b      	ldr	r3, [r3, #0]
 800b598:	f022 0201 	bic.w	r2, r2, #1
 800b59c:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800b59e:	687b      	ldr	r3, [r7, #4]
 800b5a0:	681b      	ldr	r3, [r3, #0]
 800b5a2:	689b      	ldr	r3, [r3, #8]
 800b5a4:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800b5a8:	687b      	ldr	r3, [r7, #4]
 800b5aa:	681b      	ldr	r3, [r3, #0]
 800b5ac:	683a      	ldr	r2, [r7, #0]
 800b5ae:	430a      	orrs	r2, r1
 800b5b0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800b5b2:	6878      	ldr	r0, [r7, #4]
 800b5b4:	f000 f850 	bl	800b658 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b5b8:	687b      	ldr	r3, [r7, #4]
 800b5ba:	681b      	ldr	r3, [r3, #0]
 800b5bc:	68fa      	ldr	r2, [r7, #12]
 800b5be:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b5c0:	687b      	ldr	r3, [r7, #4]
 800b5c2:	2220      	movs	r2, #32
 800b5c4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b5c8:	687b      	ldr	r3, [r7, #4]
 800b5ca:	2200      	movs	r2, #0
 800b5cc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800b5d0:	2300      	movs	r3, #0
}
 800b5d2:	4618      	mov	r0, r3
 800b5d4:	3710      	adds	r7, #16
 800b5d6:	46bd      	mov	sp, r7
 800b5d8:	bd80      	pop	{r7, pc}

0800b5da <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800b5da:	b580      	push	{r7, lr}
 800b5dc:	b084      	sub	sp, #16
 800b5de:	af00      	add	r7, sp, #0
 800b5e0:	6078      	str	r0, [r7, #4]
 800b5e2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b5e4:	687b      	ldr	r3, [r7, #4]
 800b5e6:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800b5ea:	2b01      	cmp	r3, #1
 800b5ec:	d101      	bne.n	800b5f2 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800b5ee:	2302      	movs	r3, #2
 800b5f0:	e02d      	b.n	800b64e <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800b5f2:	687b      	ldr	r3, [r7, #4]
 800b5f4:	2201      	movs	r2, #1
 800b5f6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800b5fa:	687b      	ldr	r3, [r7, #4]
 800b5fc:	2224      	movs	r2, #36	; 0x24
 800b5fe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b602:	687b      	ldr	r3, [r7, #4]
 800b604:	681b      	ldr	r3, [r3, #0]
 800b606:	681b      	ldr	r3, [r3, #0]
 800b608:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b60a:	687b      	ldr	r3, [r7, #4]
 800b60c:	681b      	ldr	r3, [r3, #0]
 800b60e:	681a      	ldr	r2, [r3, #0]
 800b610:	687b      	ldr	r3, [r7, #4]
 800b612:	681b      	ldr	r3, [r3, #0]
 800b614:	f022 0201 	bic.w	r2, r2, #1
 800b618:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800b61a:	687b      	ldr	r3, [r7, #4]
 800b61c:	681b      	ldr	r3, [r3, #0]
 800b61e:	689b      	ldr	r3, [r3, #8]
 800b620:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800b624:	687b      	ldr	r3, [r7, #4]
 800b626:	681b      	ldr	r3, [r3, #0]
 800b628:	683a      	ldr	r2, [r7, #0]
 800b62a:	430a      	orrs	r2, r1
 800b62c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800b62e:	6878      	ldr	r0, [r7, #4]
 800b630:	f000 f812 	bl	800b658 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b634:	687b      	ldr	r3, [r7, #4]
 800b636:	681b      	ldr	r3, [r3, #0]
 800b638:	68fa      	ldr	r2, [r7, #12]
 800b63a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b63c:	687b      	ldr	r3, [r7, #4]
 800b63e:	2220      	movs	r2, #32
 800b640:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b644:	687b      	ldr	r3, [r7, #4]
 800b646:	2200      	movs	r2, #0
 800b648:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800b64c:	2300      	movs	r3, #0
}
 800b64e:	4618      	mov	r0, r3
 800b650:	3710      	adds	r7, #16
 800b652:	46bd      	mov	sp, r7
 800b654:	bd80      	pop	{r7, pc}
	...

0800b658 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800b658:	b480      	push	{r7}
 800b65a:	b085      	sub	sp, #20
 800b65c:	af00      	add	r7, sp, #0
 800b65e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800b660:	687b      	ldr	r3, [r7, #4]
 800b662:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b664:	2b00      	cmp	r3, #0
 800b666:	d108      	bne.n	800b67a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800b668:	687b      	ldr	r3, [r7, #4]
 800b66a:	2201      	movs	r2, #1
 800b66c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800b670:	687b      	ldr	r3, [r7, #4]
 800b672:	2201      	movs	r2, #1
 800b674:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800b678:	e031      	b.n	800b6de <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800b67a:	2308      	movs	r3, #8
 800b67c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800b67e:	2308      	movs	r3, #8
 800b680:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800b682:	687b      	ldr	r3, [r7, #4]
 800b684:	681b      	ldr	r3, [r3, #0]
 800b686:	689b      	ldr	r3, [r3, #8]
 800b688:	0e5b      	lsrs	r3, r3, #25
 800b68a:	b2db      	uxtb	r3, r3
 800b68c:	f003 0307 	and.w	r3, r3, #7
 800b690:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800b692:	687b      	ldr	r3, [r7, #4]
 800b694:	681b      	ldr	r3, [r3, #0]
 800b696:	689b      	ldr	r3, [r3, #8]
 800b698:	0f5b      	lsrs	r3, r3, #29
 800b69a:	b2db      	uxtb	r3, r3
 800b69c:	f003 0307 	and.w	r3, r3, #7
 800b6a0:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800b6a2:	7bbb      	ldrb	r3, [r7, #14]
 800b6a4:	7b3a      	ldrb	r2, [r7, #12]
 800b6a6:	4911      	ldr	r1, [pc, #68]	; (800b6ec <UARTEx_SetNbDataToProcess+0x94>)
 800b6a8:	5c8a      	ldrb	r2, [r1, r2]
 800b6aa:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800b6ae:	7b3a      	ldrb	r2, [r7, #12]
 800b6b0:	490f      	ldr	r1, [pc, #60]	; (800b6f0 <UARTEx_SetNbDataToProcess+0x98>)
 800b6b2:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800b6b4:	fb93 f3f2 	sdiv	r3, r3, r2
 800b6b8:	b29a      	uxth	r2, r3
 800b6ba:	687b      	ldr	r3, [r7, #4]
 800b6bc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800b6c0:	7bfb      	ldrb	r3, [r7, #15]
 800b6c2:	7b7a      	ldrb	r2, [r7, #13]
 800b6c4:	4909      	ldr	r1, [pc, #36]	; (800b6ec <UARTEx_SetNbDataToProcess+0x94>)
 800b6c6:	5c8a      	ldrb	r2, [r1, r2]
 800b6c8:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800b6cc:	7b7a      	ldrb	r2, [r7, #13]
 800b6ce:	4908      	ldr	r1, [pc, #32]	; (800b6f0 <UARTEx_SetNbDataToProcess+0x98>)
 800b6d0:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800b6d2:	fb93 f3f2 	sdiv	r3, r3, r2
 800b6d6:	b29a      	uxth	r2, r3
 800b6d8:	687b      	ldr	r3, [r7, #4]
 800b6da:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800b6de:	bf00      	nop
 800b6e0:	3714      	adds	r7, #20
 800b6e2:	46bd      	mov	sp, r7
 800b6e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6e8:	4770      	bx	lr
 800b6ea:	bf00      	nop
 800b6ec:	0800bdd4 	.word	0x0800bdd4
 800b6f0:	0800bddc 	.word	0x0800bddc

0800b6f4 <memset>:
 800b6f4:	4402      	add	r2, r0
 800b6f6:	4603      	mov	r3, r0
 800b6f8:	4293      	cmp	r3, r2
 800b6fa:	d100      	bne.n	800b6fe <memset+0xa>
 800b6fc:	4770      	bx	lr
 800b6fe:	f803 1b01 	strb.w	r1, [r3], #1
 800b702:	e7f9      	b.n	800b6f8 <memset+0x4>

0800b704 <__libc_init_array>:
 800b704:	b570      	push	{r4, r5, r6, lr}
 800b706:	4d0d      	ldr	r5, [pc, #52]	; (800b73c <__libc_init_array+0x38>)
 800b708:	4c0d      	ldr	r4, [pc, #52]	; (800b740 <__libc_init_array+0x3c>)
 800b70a:	1b64      	subs	r4, r4, r5
 800b70c:	10a4      	asrs	r4, r4, #2
 800b70e:	2600      	movs	r6, #0
 800b710:	42a6      	cmp	r6, r4
 800b712:	d109      	bne.n	800b728 <__libc_init_array+0x24>
 800b714:	4d0b      	ldr	r5, [pc, #44]	; (800b744 <__libc_init_array+0x40>)
 800b716:	4c0c      	ldr	r4, [pc, #48]	; (800b748 <__libc_init_array+0x44>)
 800b718:	f000 f818 	bl	800b74c <_init>
 800b71c:	1b64      	subs	r4, r4, r5
 800b71e:	10a4      	asrs	r4, r4, #2
 800b720:	2600      	movs	r6, #0
 800b722:	42a6      	cmp	r6, r4
 800b724:	d105      	bne.n	800b732 <__libc_init_array+0x2e>
 800b726:	bd70      	pop	{r4, r5, r6, pc}
 800b728:	f855 3b04 	ldr.w	r3, [r5], #4
 800b72c:	4798      	blx	r3
 800b72e:	3601      	adds	r6, #1
 800b730:	e7ee      	b.n	800b710 <__libc_init_array+0xc>
 800b732:	f855 3b04 	ldr.w	r3, [r5], #4
 800b736:	4798      	blx	r3
 800b738:	3601      	adds	r6, #1
 800b73a:	e7f2      	b.n	800b722 <__libc_init_array+0x1e>
 800b73c:	0800bdec 	.word	0x0800bdec
 800b740:	0800bdec 	.word	0x0800bdec
 800b744:	0800bdec 	.word	0x0800bdec
 800b748:	0800bdf0 	.word	0x0800bdf0

0800b74c <_init>:
 800b74c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b74e:	bf00      	nop
 800b750:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b752:	bc08      	pop	{r3}
 800b754:	469e      	mov	lr, r3
 800b756:	4770      	bx	lr

0800b758 <_fini>:
 800b758:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b75a:	bf00      	nop
 800b75c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b75e:	bc08      	pop	{r3}
 800b760:	469e      	mov	lr, r3
 800b762:	4770      	bx	lr
