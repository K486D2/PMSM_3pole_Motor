
Doktorat_G431_3_polemotor_git.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b53c  080001d8  080001d8  000101d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000680  0800b714  0800b714  0001b714  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800bd94  0800bd94  00020028  2**0
                  CONTENTS
  4 .ARM          00000008  0800bd94  0800bd94  0001bd94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800bd9c  0800bd9c  00020028  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800bd9c  0800bd9c  0001bd9c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800bda0  0800bda0  0001bda0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000028  20000000  0800bda4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004f8  20000028  0800bdcc  00020028  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000520  0800bdcc  00020520  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020028  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020058  2**0
                  CONTENTS, READONLY
 13 .debug_info   000216cd  00000000  00000000  0002009b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000038cd  00000000  00000000  00041768  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001c00  00000000  00000000  00045038  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001aa8  00000000  00000000  00046c38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00022c33  00000000  00000000  000486e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001fa03  00000000  00000000  0006b313  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e7e99  00000000  00000000  0008ad16  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00007b24  00000000  00000000  00172bb0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000028 	.word	0x20000028
 80001f4:	00000000 	.word	0x00000000
 80001f8:	0800b6fc 	.word	0x0800b6fc

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	2000002c 	.word	0x2000002c
 8000214:	0800b6fc 	.word	0x0800b6fc

08000218 <__aeabi_dmul>:
 8000218:	b570      	push	{r4, r5, r6, lr}
 800021a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800021e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000222:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000226:	bf1d      	ittte	ne
 8000228:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800022c:	ea94 0f0c 	teqne	r4, ip
 8000230:	ea95 0f0c 	teqne	r5, ip
 8000234:	f000 f8de 	bleq	80003f4 <__aeabi_dmul+0x1dc>
 8000238:	442c      	add	r4, r5
 800023a:	ea81 0603 	eor.w	r6, r1, r3
 800023e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000242:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000246:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800024a:	bf18      	it	ne
 800024c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000250:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000254:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000258:	d038      	beq.n	80002cc <__aeabi_dmul+0xb4>
 800025a:	fba0 ce02 	umull	ip, lr, r0, r2
 800025e:	f04f 0500 	mov.w	r5, #0
 8000262:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000266:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800026a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800026e:	f04f 0600 	mov.w	r6, #0
 8000272:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000276:	f09c 0f00 	teq	ip, #0
 800027a:	bf18      	it	ne
 800027c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000280:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000284:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000288:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800028c:	d204      	bcs.n	8000298 <__aeabi_dmul+0x80>
 800028e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000292:	416d      	adcs	r5, r5
 8000294:	eb46 0606 	adc.w	r6, r6, r6
 8000298:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800029c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80002a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80002a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80002a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80002ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80002b0:	bf88      	it	hi
 80002b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80002b6:	d81e      	bhi.n	80002f6 <__aeabi_dmul+0xde>
 80002b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80002bc:	bf08      	it	eq
 80002be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80002c2:	f150 0000 	adcs.w	r0, r0, #0
 80002c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002ca:	bd70      	pop	{r4, r5, r6, pc}
 80002cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80002d0:	ea46 0101 	orr.w	r1, r6, r1
 80002d4:	ea40 0002 	orr.w	r0, r0, r2
 80002d8:	ea81 0103 	eor.w	r1, r1, r3
 80002dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80002e0:	bfc2      	ittt	gt
 80002e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80002e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80002ea:	bd70      	popgt	{r4, r5, r6, pc}
 80002ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80002f0:	f04f 0e00 	mov.w	lr, #0
 80002f4:	3c01      	subs	r4, #1
 80002f6:	f300 80ab 	bgt.w	8000450 <__aeabi_dmul+0x238>
 80002fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80002fe:	bfde      	ittt	le
 8000300:	2000      	movle	r0, #0
 8000302:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000306:	bd70      	pople	{r4, r5, r6, pc}
 8000308:	f1c4 0400 	rsb	r4, r4, #0
 800030c:	3c20      	subs	r4, #32
 800030e:	da35      	bge.n	800037c <__aeabi_dmul+0x164>
 8000310:	340c      	adds	r4, #12
 8000312:	dc1b      	bgt.n	800034c <__aeabi_dmul+0x134>
 8000314:	f104 0414 	add.w	r4, r4, #20
 8000318:	f1c4 0520 	rsb	r5, r4, #32
 800031c:	fa00 f305 	lsl.w	r3, r0, r5
 8000320:	fa20 f004 	lsr.w	r0, r0, r4
 8000324:	fa01 f205 	lsl.w	r2, r1, r5
 8000328:	ea40 0002 	orr.w	r0, r0, r2
 800032c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000330:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000334:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000338:	fa21 f604 	lsr.w	r6, r1, r4
 800033c:	eb42 0106 	adc.w	r1, r2, r6
 8000340:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000344:	bf08      	it	eq
 8000346:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800034a:	bd70      	pop	{r4, r5, r6, pc}
 800034c:	f1c4 040c 	rsb	r4, r4, #12
 8000350:	f1c4 0520 	rsb	r5, r4, #32
 8000354:	fa00 f304 	lsl.w	r3, r0, r4
 8000358:	fa20 f005 	lsr.w	r0, r0, r5
 800035c:	fa01 f204 	lsl.w	r2, r1, r4
 8000360:	ea40 0002 	orr.w	r0, r0, r2
 8000364:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000368:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000374:	bf08      	it	eq
 8000376:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800037a:	bd70      	pop	{r4, r5, r6, pc}
 800037c:	f1c4 0520 	rsb	r5, r4, #32
 8000380:	fa00 f205 	lsl.w	r2, r0, r5
 8000384:	ea4e 0e02 	orr.w	lr, lr, r2
 8000388:	fa20 f304 	lsr.w	r3, r0, r4
 800038c:	fa01 f205 	lsl.w	r2, r1, r5
 8000390:	ea43 0302 	orr.w	r3, r3, r2
 8000394:	fa21 f004 	lsr.w	r0, r1, r4
 8000398:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800039c:	fa21 f204 	lsr.w	r2, r1, r4
 80003a0:	ea20 0002 	bic.w	r0, r0, r2
 80003a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80003a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003ac:	bf08      	it	eq
 80003ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003b2:	bd70      	pop	{r4, r5, r6, pc}
 80003b4:	f094 0f00 	teq	r4, #0
 80003b8:	d10f      	bne.n	80003da <__aeabi_dmul+0x1c2>
 80003ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80003be:	0040      	lsls	r0, r0, #1
 80003c0:	eb41 0101 	adc.w	r1, r1, r1
 80003c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003c8:	bf08      	it	eq
 80003ca:	3c01      	subeq	r4, #1
 80003cc:	d0f7      	beq.n	80003be <__aeabi_dmul+0x1a6>
 80003ce:	ea41 0106 	orr.w	r1, r1, r6
 80003d2:	f095 0f00 	teq	r5, #0
 80003d6:	bf18      	it	ne
 80003d8:	4770      	bxne	lr
 80003da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80003de:	0052      	lsls	r2, r2, #1
 80003e0:	eb43 0303 	adc.w	r3, r3, r3
 80003e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80003e8:	bf08      	it	eq
 80003ea:	3d01      	subeq	r5, #1
 80003ec:	d0f7      	beq.n	80003de <__aeabi_dmul+0x1c6>
 80003ee:	ea43 0306 	orr.w	r3, r3, r6
 80003f2:	4770      	bx	lr
 80003f4:	ea94 0f0c 	teq	r4, ip
 80003f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80003fc:	bf18      	it	ne
 80003fe:	ea95 0f0c 	teqne	r5, ip
 8000402:	d00c      	beq.n	800041e <__aeabi_dmul+0x206>
 8000404:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000408:	bf18      	it	ne
 800040a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800040e:	d1d1      	bne.n	80003b4 <__aeabi_dmul+0x19c>
 8000410:	ea81 0103 	eor.w	r1, r1, r3
 8000414:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000418:	f04f 0000 	mov.w	r0, #0
 800041c:	bd70      	pop	{r4, r5, r6, pc}
 800041e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000422:	bf06      	itte	eq
 8000424:	4610      	moveq	r0, r2
 8000426:	4619      	moveq	r1, r3
 8000428:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800042c:	d019      	beq.n	8000462 <__aeabi_dmul+0x24a>
 800042e:	ea94 0f0c 	teq	r4, ip
 8000432:	d102      	bne.n	800043a <__aeabi_dmul+0x222>
 8000434:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000438:	d113      	bne.n	8000462 <__aeabi_dmul+0x24a>
 800043a:	ea95 0f0c 	teq	r5, ip
 800043e:	d105      	bne.n	800044c <__aeabi_dmul+0x234>
 8000440:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000444:	bf1c      	itt	ne
 8000446:	4610      	movne	r0, r2
 8000448:	4619      	movne	r1, r3
 800044a:	d10a      	bne.n	8000462 <__aeabi_dmul+0x24a>
 800044c:	ea81 0103 	eor.w	r1, r1, r3
 8000450:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000454:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000458:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800045c:	f04f 0000 	mov.w	r0, #0
 8000460:	bd70      	pop	{r4, r5, r6, pc}
 8000462:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000466:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800046a:	bd70      	pop	{r4, r5, r6, pc}

0800046c <__aeabi_drsub>:
 800046c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000470:	e002      	b.n	8000478 <__adddf3>
 8000472:	bf00      	nop

08000474 <__aeabi_dsub>:
 8000474:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000478 <__adddf3>:
 8000478:	b530      	push	{r4, r5, lr}
 800047a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800047e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000482:	ea94 0f05 	teq	r4, r5
 8000486:	bf08      	it	eq
 8000488:	ea90 0f02 	teqeq	r0, r2
 800048c:	bf1f      	itttt	ne
 800048e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000492:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000496:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800049a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800049e:	f000 80e2 	beq.w	8000666 <__adddf3+0x1ee>
 80004a2:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80004a6:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80004aa:	bfb8      	it	lt
 80004ac:	426d      	neglt	r5, r5
 80004ae:	dd0c      	ble.n	80004ca <__adddf3+0x52>
 80004b0:	442c      	add	r4, r5
 80004b2:	ea80 0202 	eor.w	r2, r0, r2
 80004b6:	ea81 0303 	eor.w	r3, r1, r3
 80004ba:	ea82 0000 	eor.w	r0, r2, r0
 80004be:	ea83 0101 	eor.w	r1, r3, r1
 80004c2:	ea80 0202 	eor.w	r2, r0, r2
 80004c6:	ea81 0303 	eor.w	r3, r1, r3
 80004ca:	2d36      	cmp	r5, #54	; 0x36
 80004cc:	bf88      	it	hi
 80004ce:	bd30      	pophi	{r4, r5, pc}
 80004d0:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80004d4:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80004d8:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80004dc:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80004e0:	d002      	beq.n	80004e8 <__adddf3+0x70>
 80004e2:	4240      	negs	r0, r0
 80004e4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004e8:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80004ec:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80004f0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80004f4:	d002      	beq.n	80004fc <__adddf3+0x84>
 80004f6:	4252      	negs	r2, r2
 80004f8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80004fc:	ea94 0f05 	teq	r4, r5
 8000500:	f000 80a7 	beq.w	8000652 <__adddf3+0x1da>
 8000504:	f1a4 0401 	sub.w	r4, r4, #1
 8000508:	f1d5 0e20 	rsbs	lr, r5, #32
 800050c:	db0d      	blt.n	800052a <__adddf3+0xb2>
 800050e:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000512:	fa22 f205 	lsr.w	r2, r2, r5
 8000516:	1880      	adds	r0, r0, r2
 8000518:	f141 0100 	adc.w	r1, r1, #0
 800051c:	fa03 f20e 	lsl.w	r2, r3, lr
 8000520:	1880      	adds	r0, r0, r2
 8000522:	fa43 f305 	asr.w	r3, r3, r5
 8000526:	4159      	adcs	r1, r3
 8000528:	e00e      	b.n	8000548 <__adddf3+0xd0>
 800052a:	f1a5 0520 	sub.w	r5, r5, #32
 800052e:	f10e 0e20 	add.w	lr, lr, #32
 8000532:	2a01      	cmp	r2, #1
 8000534:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000538:	bf28      	it	cs
 800053a:	f04c 0c02 	orrcs.w	ip, ip, #2
 800053e:	fa43 f305 	asr.w	r3, r3, r5
 8000542:	18c0      	adds	r0, r0, r3
 8000544:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000548:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800054c:	d507      	bpl.n	800055e <__adddf3+0xe6>
 800054e:	f04f 0e00 	mov.w	lr, #0
 8000552:	f1dc 0c00 	rsbs	ip, ip, #0
 8000556:	eb7e 0000 	sbcs.w	r0, lr, r0
 800055a:	eb6e 0101 	sbc.w	r1, lr, r1
 800055e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000562:	d31b      	bcc.n	800059c <__adddf3+0x124>
 8000564:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000568:	d30c      	bcc.n	8000584 <__adddf3+0x10c>
 800056a:	0849      	lsrs	r1, r1, #1
 800056c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000570:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000574:	f104 0401 	add.w	r4, r4, #1
 8000578:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800057c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000580:	f080 809a 	bcs.w	80006b8 <__adddf3+0x240>
 8000584:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000588:	bf08      	it	eq
 800058a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800058e:	f150 0000 	adcs.w	r0, r0, #0
 8000592:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000596:	ea41 0105 	orr.w	r1, r1, r5
 800059a:	bd30      	pop	{r4, r5, pc}
 800059c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80005a0:	4140      	adcs	r0, r0
 80005a2:	eb41 0101 	adc.w	r1, r1, r1
 80005a6:	3c01      	subs	r4, #1
 80005a8:	bf28      	it	cs
 80005aa:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80005ae:	d2e9      	bcs.n	8000584 <__adddf3+0x10c>
 80005b0:	f091 0f00 	teq	r1, #0
 80005b4:	bf04      	itt	eq
 80005b6:	4601      	moveq	r1, r0
 80005b8:	2000      	moveq	r0, #0
 80005ba:	fab1 f381 	clz	r3, r1
 80005be:	bf08      	it	eq
 80005c0:	3320      	addeq	r3, #32
 80005c2:	f1a3 030b 	sub.w	r3, r3, #11
 80005c6:	f1b3 0220 	subs.w	r2, r3, #32
 80005ca:	da0c      	bge.n	80005e6 <__adddf3+0x16e>
 80005cc:	320c      	adds	r2, #12
 80005ce:	dd08      	ble.n	80005e2 <__adddf3+0x16a>
 80005d0:	f102 0c14 	add.w	ip, r2, #20
 80005d4:	f1c2 020c 	rsb	r2, r2, #12
 80005d8:	fa01 f00c 	lsl.w	r0, r1, ip
 80005dc:	fa21 f102 	lsr.w	r1, r1, r2
 80005e0:	e00c      	b.n	80005fc <__adddf3+0x184>
 80005e2:	f102 0214 	add.w	r2, r2, #20
 80005e6:	bfd8      	it	le
 80005e8:	f1c2 0c20 	rsble	ip, r2, #32
 80005ec:	fa01 f102 	lsl.w	r1, r1, r2
 80005f0:	fa20 fc0c 	lsr.w	ip, r0, ip
 80005f4:	bfdc      	itt	le
 80005f6:	ea41 010c 	orrle.w	r1, r1, ip
 80005fa:	4090      	lslle	r0, r2
 80005fc:	1ae4      	subs	r4, r4, r3
 80005fe:	bfa2      	ittt	ge
 8000600:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000604:	4329      	orrge	r1, r5
 8000606:	bd30      	popge	{r4, r5, pc}
 8000608:	ea6f 0404 	mvn.w	r4, r4
 800060c:	3c1f      	subs	r4, #31
 800060e:	da1c      	bge.n	800064a <__adddf3+0x1d2>
 8000610:	340c      	adds	r4, #12
 8000612:	dc0e      	bgt.n	8000632 <__adddf3+0x1ba>
 8000614:	f104 0414 	add.w	r4, r4, #20
 8000618:	f1c4 0220 	rsb	r2, r4, #32
 800061c:	fa20 f004 	lsr.w	r0, r0, r4
 8000620:	fa01 f302 	lsl.w	r3, r1, r2
 8000624:	ea40 0003 	orr.w	r0, r0, r3
 8000628:	fa21 f304 	lsr.w	r3, r1, r4
 800062c:	ea45 0103 	orr.w	r1, r5, r3
 8000630:	bd30      	pop	{r4, r5, pc}
 8000632:	f1c4 040c 	rsb	r4, r4, #12
 8000636:	f1c4 0220 	rsb	r2, r4, #32
 800063a:	fa20 f002 	lsr.w	r0, r0, r2
 800063e:	fa01 f304 	lsl.w	r3, r1, r4
 8000642:	ea40 0003 	orr.w	r0, r0, r3
 8000646:	4629      	mov	r1, r5
 8000648:	bd30      	pop	{r4, r5, pc}
 800064a:	fa21 f004 	lsr.w	r0, r1, r4
 800064e:	4629      	mov	r1, r5
 8000650:	bd30      	pop	{r4, r5, pc}
 8000652:	f094 0f00 	teq	r4, #0
 8000656:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800065a:	bf06      	itte	eq
 800065c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000660:	3401      	addeq	r4, #1
 8000662:	3d01      	subne	r5, #1
 8000664:	e74e      	b.n	8000504 <__adddf3+0x8c>
 8000666:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800066a:	bf18      	it	ne
 800066c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000670:	d029      	beq.n	80006c6 <__adddf3+0x24e>
 8000672:	ea94 0f05 	teq	r4, r5
 8000676:	bf08      	it	eq
 8000678:	ea90 0f02 	teqeq	r0, r2
 800067c:	d005      	beq.n	800068a <__adddf3+0x212>
 800067e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000682:	bf04      	itt	eq
 8000684:	4619      	moveq	r1, r3
 8000686:	4610      	moveq	r0, r2
 8000688:	bd30      	pop	{r4, r5, pc}
 800068a:	ea91 0f03 	teq	r1, r3
 800068e:	bf1e      	ittt	ne
 8000690:	2100      	movne	r1, #0
 8000692:	2000      	movne	r0, #0
 8000694:	bd30      	popne	{r4, r5, pc}
 8000696:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800069a:	d105      	bne.n	80006a8 <__adddf3+0x230>
 800069c:	0040      	lsls	r0, r0, #1
 800069e:	4149      	adcs	r1, r1
 80006a0:	bf28      	it	cs
 80006a2:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80006a6:	bd30      	pop	{r4, r5, pc}
 80006a8:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80006ac:	bf3c      	itt	cc
 80006ae:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80006b2:	bd30      	popcc	{r4, r5, pc}
 80006b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80006b8:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80006bc:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80006c0:	f04f 0000 	mov.w	r0, #0
 80006c4:	bd30      	pop	{r4, r5, pc}
 80006c6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80006ca:	bf1a      	itte	ne
 80006cc:	4619      	movne	r1, r3
 80006ce:	4610      	movne	r0, r2
 80006d0:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80006d4:	bf1c      	itt	ne
 80006d6:	460b      	movne	r3, r1
 80006d8:	4602      	movne	r2, r0
 80006da:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80006de:	bf06      	itte	eq
 80006e0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80006e4:	ea91 0f03 	teqeq	r1, r3
 80006e8:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80006ec:	bd30      	pop	{r4, r5, pc}
 80006ee:	bf00      	nop

080006f0 <__aeabi_ui2d>:
 80006f0:	f090 0f00 	teq	r0, #0
 80006f4:	bf04      	itt	eq
 80006f6:	2100      	moveq	r1, #0
 80006f8:	4770      	bxeq	lr
 80006fa:	b530      	push	{r4, r5, lr}
 80006fc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000700:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000704:	f04f 0500 	mov.w	r5, #0
 8000708:	f04f 0100 	mov.w	r1, #0
 800070c:	e750      	b.n	80005b0 <__adddf3+0x138>
 800070e:	bf00      	nop

08000710 <__aeabi_i2d>:
 8000710:	f090 0f00 	teq	r0, #0
 8000714:	bf04      	itt	eq
 8000716:	2100      	moveq	r1, #0
 8000718:	4770      	bxeq	lr
 800071a:	b530      	push	{r4, r5, lr}
 800071c:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000720:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000724:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000728:	bf48      	it	mi
 800072a:	4240      	negmi	r0, r0
 800072c:	f04f 0100 	mov.w	r1, #0
 8000730:	e73e      	b.n	80005b0 <__adddf3+0x138>
 8000732:	bf00      	nop

08000734 <__aeabi_f2d>:
 8000734:	0042      	lsls	r2, r0, #1
 8000736:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800073a:	ea4f 0131 	mov.w	r1, r1, rrx
 800073e:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000742:	bf1f      	itttt	ne
 8000744:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000748:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 800074c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000750:	4770      	bxne	lr
 8000752:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000756:	bf08      	it	eq
 8000758:	4770      	bxeq	lr
 800075a:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800075e:	bf04      	itt	eq
 8000760:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000764:	4770      	bxeq	lr
 8000766:	b530      	push	{r4, r5, lr}
 8000768:	f44f 7460 	mov.w	r4, #896	; 0x380
 800076c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000770:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000774:	e71c      	b.n	80005b0 <__adddf3+0x138>
 8000776:	bf00      	nop

08000778 <__aeabi_ul2d>:
 8000778:	ea50 0201 	orrs.w	r2, r0, r1
 800077c:	bf08      	it	eq
 800077e:	4770      	bxeq	lr
 8000780:	b530      	push	{r4, r5, lr}
 8000782:	f04f 0500 	mov.w	r5, #0
 8000786:	e00a      	b.n	800079e <__aeabi_l2d+0x16>

08000788 <__aeabi_l2d>:
 8000788:	ea50 0201 	orrs.w	r2, r0, r1
 800078c:	bf08      	it	eq
 800078e:	4770      	bxeq	lr
 8000790:	b530      	push	{r4, r5, lr}
 8000792:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000796:	d502      	bpl.n	800079e <__aeabi_l2d+0x16>
 8000798:	4240      	negs	r0, r0
 800079a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800079e:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80007a2:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80007a6:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80007aa:	f43f aed8 	beq.w	800055e <__adddf3+0xe6>
 80007ae:	f04f 0203 	mov.w	r2, #3
 80007b2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80007b6:	bf18      	it	ne
 80007b8:	3203      	addne	r2, #3
 80007ba:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80007be:	bf18      	it	ne
 80007c0:	3203      	addne	r2, #3
 80007c2:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80007c6:	f1c2 0320 	rsb	r3, r2, #32
 80007ca:	fa00 fc03 	lsl.w	ip, r0, r3
 80007ce:	fa20 f002 	lsr.w	r0, r0, r2
 80007d2:	fa01 fe03 	lsl.w	lr, r1, r3
 80007d6:	ea40 000e 	orr.w	r0, r0, lr
 80007da:	fa21 f102 	lsr.w	r1, r1, r2
 80007de:	4414      	add	r4, r2
 80007e0:	e6bd      	b.n	800055e <__adddf3+0xe6>
 80007e2:	bf00      	nop

080007e4 <__aeabi_d2iz>:
 80007e4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80007e8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80007ec:	d215      	bcs.n	800081a <__aeabi_d2iz+0x36>
 80007ee:	d511      	bpl.n	8000814 <__aeabi_d2iz+0x30>
 80007f0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80007f4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80007f8:	d912      	bls.n	8000820 <__aeabi_d2iz+0x3c>
 80007fa:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80007fe:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000802:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000806:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800080a:	fa23 f002 	lsr.w	r0, r3, r2
 800080e:	bf18      	it	ne
 8000810:	4240      	negne	r0, r0
 8000812:	4770      	bx	lr
 8000814:	f04f 0000 	mov.w	r0, #0
 8000818:	4770      	bx	lr
 800081a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800081e:	d105      	bne.n	800082c <__aeabi_d2iz+0x48>
 8000820:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000824:	bf08      	it	eq
 8000826:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 800082a:	4770      	bx	lr
 800082c:	f04f 0000 	mov.w	r0, #0
 8000830:	4770      	bx	lr
 8000832:	bf00      	nop

08000834 <__aeabi_d2uiz>:
 8000834:	004a      	lsls	r2, r1, #1
 8000836:	d211      	bcs.n	800085c <__aeabi_d2uiz+0x28>
 8000838:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 800083c:	d211      	bcs.n	8000862 <__aeabi_d2uiz+0x2e>
 800083e:	d50d      	bpl.n	800085c <__aeabi_d2uiz+0x28>
 8000840:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000844:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000848:	d40e      	bmi.n	8000868 <__aeabi_d2uiz+0x34>
 800084a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800084e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000852:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000856:	fa23 f002 	lsr.w	r0, r3, r2
 800085a:	4770      	bx	lr
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	4770      	bx	lr
 8000862:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000866:	d102      	bne.n	800086e <__aeabi_d2uiz+0x3a>
 8000868:	f04f 30ff 	mov.w	r0, #4294967295
 800086c:	4770      	bx	lr
 800086e:	f04f 0000 	mov.w	r0, #0
 8000872:	4770      	bx	lr

08000874 <__aeabi_uldivmod>:
 8000874:	b953      	cbnz	r3, 800088c <__aeabi_uldivmod+0x18>
 8000876:	b94a      	cbnz	r2, 800088c <__aeabi_uldivmod+0x18>
 8000878:	2900      	cmp	r1, #0
 800087a:	bf08      	it	eq
 800087c:	2800      	cmpeq	r0, #0
 800087e:	bf1c      	itt	ne
 8000880:	f04f 31ff 	movne.w	r1, #4294967295
 8000884:	f04f 30ff 	movne.w	r0, #4294967295
 8000888:	f000 b970 	b.w	8000b6c <__aeabi_idiv0>
 800088c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000890:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000894:	f000 f806 	bl	80008a4 <__udivmoddi4>
 8000898:	f8dd e004 	ldr.w	lr, [sp, #4]
 800089c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80008a0:	b004      	add	sp, #16
 80008a2:	4770      	bx	lr

080008a4 <__udivmoddi4>:
 80008a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80008a8:	9e08      	ldr	r6, [sp, #32]
 80008aa:	460d      	mov	r5, r1
 80008ac:	4604      	mov	r4, r0
 80008ae:	460f      	mov	r7, r1
 80008b0:	2b00      	cmp	r3, #0
 80008b2:	d14a      	bne.n	800094a <__udivmoddi4+0xa6>
 80008b4:	428a      	cmp	r2, r1
 80008b6:	4694      	mov	ip, r2
 80008b8:	d965      	bls.n	8000986 <__udivmoddi4+0xe2>
 80008ba:	fab2 f382 	clz	r3, r2
 80008be:	b143      	cbz	r3, 80008d2 <__udivmoddi4+0x2e>
 80008c0:	fa02 fc03 	lsl.w	ip, r2, r3
 80008c4:	f1c3 0220 	rsb	r2, r3, #32
 80008c8:	409f      	lsls	r7, r3
 80008ca:	fa20 f202 	lsr.w	r2, r0, r2
 80008ce:	4317      	orrs	r7, r2
 80008d0:	409c      	lsls	r4, r3
 80008d2:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80008d6:	fa1f f58c 	uxth.w	r5, ip
 80008da:	fbb7 f1fe 	udiv	r1, r7, lr
 80008de:	0c22      	lsrs	r2, r4, #16
 80008e0:	fb0e 7711 	mls	r7, lr, r1, r7
 80008e4:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80008e8:	fb01 f005 	mul.w	r0, r1, r5
 80008ec:	4290      	cmp	r0, r2
 80008ee:	d90a      	bls.n	8000906 <__udivmoddi4+0x62>
 80008f0:	eb1c 0202 	adds.w	r2, ip, r2
 80008f4:	f101 37ff 	add.w	r7, r1, #4294967295
 80008f8:	f080 811c 	bcs.w	8000b34 <__udivmoddi4+0x290>
 80008fc:	4290      	cmp	r0, r2
 80008fe:	f240 8119 	bls.w	8000b34 <__udivmoddi4+0x290>
 8000902:	3902      	subs	r1, #2
 8000904:	4462      	add	r2, ip
 8000906:	1a12      	subs	r2, r2, r0
 8000908:	b2a4      	uxth	r4, r4
 800090a:	fbb2 f0fe 	udiv	r0, r2, lr
 800090e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000912:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000916:	fb00 f505 	mul.w	r5, r0, r5
 800091a:	42a5      	cmp	r5, r4
 800091c:	d90a      	bls.n	8000934 <__udivmoddi4+0x90>
 800091e:	eb1c 0404 	adds.w	r4, ip, r4
 8000922:	f100 32ff 	add.w	r2, r0, #4294967295
 8000926:	f080 8107 	bcs.w	8000b38 <__udivmoddi4+0x294>
 800092a:	42a5      	cmp	r5, r4
 800092c:	f240 8104 	bls.w	8000b38 <__udivmoddi4+0x294>
 8000930:	4464      	add	r4, ip
 8000932:	3802      	subs	r0, #2
 8000934:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000938:	1b64      	subs	r4, r4, r5
 800093a:	2100      	movs	r1, #0
 800093c:	b11e      	cbz	r6, 8000946 <__udivmoddi4+0xa2>
 800093e:	40dc      	lsrs	r4, r3
 8000940:	2300      	movs	r3, #0
 8000942:	e9c6 4300 	strd	r4, r3, [r6]
 8000946:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800094a:	428b      	cmp	r3, r1
 800094c:	d908      	bls.n	8000960 <__udivmoddi4+0xbc>
 800094e:	2e00      	cmp	r6, #0
 8000950:	f000 80ed 	beq.w	8000b2e <__udivmoddi4+0x28a>
 8000954:	2100      	movs	r1, #0
 8000956:	e9c6 0500 	strd	r0, r5, [r6]
 800095a:	4608      	mov	r0, r1
 800095c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000960:	fab3 f183 	clz	r1, r3
 8000964:	2900      	cmp	r1, #0
 8000966:	d149      	bne.n	80009fc <__udivmoddi4+0x158>
 8000968:	42ab      	cmp	r3, r5
 800096a:	d302      	bcc.n	8000972 <__udivmoddi4+0xce>
 800096c:	4282      	cmp	r2, r0
 800096e:	f200 80f8 	bhi.w	8000b62 <__udivmoddi4+0x2be>
 8000972:	1a84      	subs	r4, r0, r2
 8000974:	eb65 0203 	sbc.w	r2, r5, r3
 8000978:	2001      	movs	r0, #1
 800097a:	4617      	mov	r7, r2
 800097c:	2e00      	cmp	r6, #0
 800097e:	d0e2      	beq.n	8000946 <__udivmoddi4+0xa2>
 8000980:	e9c6 4700 	strd	r4, r7, [r6]
 8000984:	e7df      	b.n	8000946 <__udivmoddi4+0xa2>
 8000986:	b902      	cbnz	r2, 800098a <__udivmoddi4+0xe6>
 8000988:	deff      	udf	#255	; 0xff
 800098a:	fab2 f382 	clz	r3, r2
 800098e:	2b00      	cmp	r3, #0
 8000990:	f040 8090 	bne.w	8000ab4 <__udivmoddi4+0x210>
 8000994:	1a8a      	subs	r2, r1, r2
 8000996:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800099a:	fa1f fe8c 	uxth.w	lr, ip
 800099e:	2101      	movs	r1, #1
 80009a0:	fbb2 f5f7 	udiv	r5, r2, r7
 80009a4:	fb07 2015 	mls	r0, r7, r5, r2
 80009a8:	0c22      	lsrs	r2, r4, #16
 80009aa:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80009ae:	fb0e f005 	mul.w	r0, lr, r5
 80009b2:	4290      	cmp	r0, r2
 80009b4:	d908      	bls.n	80009c8 <__udivmoddi4+0x124>
 80009b6:	eb1c 0202 	adds.w	r2, ip, r2
 80009ba:	f105 38ff 	add.w	r8, r5, #4294967295
 80009be:	d202      	bcs.n	80009c6 <__udivmoddi4+0x122>
 80009c0:	4290      	cmp	r0, r2
 80009c2:	f200 80cb 	bhi.w	8000b5c <__udivmoddi4+0x2b8>
 80009c6:	4645      	mov	r5, r8
 80009c8:	1a12      	subs	r2, r2, r0
 80009ca:	b2a4      	uxth	r4, r4
 80009cc:	fbb2 f0f7 	udiv	r0, r2, r7
 80009d0:	fb07 2210 	mls	r2, r7, r0, r2
 80009d4:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80009d8:	fb0e fe00 	mul.w	lr, lr, r0
 80009dc:	45a6      	cmp	lr, r4
 80009de:	d908      	bls.n	80009f2 <__udivmoddi4+0x14e>
 80009e0:	eb1c 0404 	adds.w	r4, ip, r4
 80009e4:	f100 32ff 	add.w	r2, r0, #4294967295
 80009e8:	d202      	bcs.n	80009f0 <__udivmoddi4+0x14c>
 80009ea:	45a6      	cmp	lr, r4
 80009ec:	f200 80bb 	bhi.w	8000b66 <__udivmoddi4+0x2c2>
 80009f0:	4610      	mov	r0, r2
 80009f2:	eba4 040e 	sub.w	r4, r4, lr
 80009f6:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80009fa:	e79f      	b.n	800093c <__udivmoddi4+0x98>
 80009fc:	f1c1 0720 	rsb	r7, r1, #32
 8000a00:	408b      	lsls	r3, r1
 8000a02:	fa22 fc07 	lsr.w	ip, r2, r7
 8000a06:	ea4c 0c03 	orr.w	ip, ip, r3
 8000a0a:	fa05 f401 	lsl.w	r4, r5, r1
 8000a0e:	fa20 f307 	lsr.w	r3, r0, r7
 8000a12:	40fd      	lsrs	r5, r7
 8000a14:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000a18:	4323      	orrs	r3, r4
 8000a1a:	fbb5 f8f9 	udiv	r8, r5, r9
 8000a1e:	fa1f fe8c 	uxth.w	lr, ip
 8000a22:	fb09 5518 	mls	r5, r9, r8, r5
 8000a26:	0c1c      	lsrs	r4, r3, #16
 8000a28:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000a2c:	fb08 f50e 	mul.w	r5, r8, lr
 8000a30:	42a5      	cmp	r5, r4
 8000a32:	fa02 f201 	lsl.w	r2, r2, r1
 8000a36:	fa00 f001 	lsl.w	r0, r0, r1
 8000a3a:	d90b      	bls.n	8000a54 <__udivmoddi4+0x1b0>
 8000a3c:	eb1c 0404 	adds.w	r4, ip, r4
 8000a40:	f108 3aff 	add.w	sl, r8, #4294967295
 8000a44:	f080 8088 	bcs.w	8000b58 <__udivmoddi4+0x2b4>
 8000a48:	42a5      	cmp	r5, r4
 8000a4a:	f240 8085 	bls.w	8000b58 <__udivmoddi4+0x2b4>
 8000a4e:	f1a8 0802 	sub.w	r8, r8, #2
 8000a52:	4464      	add	r4, ip
 8000a54:	1b64      	subs	r4, r4, r5
 8000a56:	b29d      	uxth	r5, r3
 8000a58:	fbb4 f3f9 	udiv	r3, r4, r9
 8000a5c:	fb09 4413 	mls	r4, r9, r3, r4
 8000a60:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000a64:	fb03 fe0e 	mul.w	lr, r3, lr
 8000a68:	45a6      	cmp	lr, r4
 8000a6a:	d908      	bls.n	8000a7e <__udivmoddi4+0x1da>
 8000a6c:	eb1c 0404 	adds.w	r4, ip, r4
 8000a70:	f103 35ff 	add.w	r5, r3, #4294967295
 8000a74:	d26c      	bcs.n	8000b50 <__udivmoddi4+0x2ac>
 8000a76:	45a6      	cmp	lr, r4
 8000a78:	d96a      	bls.n	8000b50 <__udivmoddi4+0x2ac>
 8000a7a:	3b02      	subs	r3, #2
 8000a7c:	4464      	add	r4, ip
 8000a7e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000a82:	fba3 9502 	umull	r9, r5, r3, r2
 8000a86:	eba4 040e 	sub.w	r4, r4, lr
 8000a8a:	42ac      	cmp	r4, r5
 8000a8c:	46c8      	mov	r8, r9
 8000a8e:	46ae      	mov	lr, r5
 8000a90:	d356      	bcc.n	8000b40 <__udivmoddi4+0x29c>
 8000a92:	d053      	beq.n	8000b3c <__udivmoddi4+0x298>
 8000a94:	b156      	cbz	r6, 8000aac <__udivmoddi4+0x208>
 8000a96:	ebb0 0208 	subs.w	r2, r0, r8
 8000a9a:	eb64 040e 	sbc.w	r4, r4, lr
 8000a9e:	fa04 f707 	lsl.w	r7, r4, r7
 8000aa2:	40ca      	lsrs	r2, r1
 8000aa4:	40cc      	lsrs	r4, r1
 8000aa6:	4317      	orrs	r7, r2
 8000aa8:	e9c6 7400 	strd	r7, r4, [r6]
 8000aac:	4618      	mov	r0, r3
 8000aae:	2100      	movs	r1, #0
 8000ab0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ab4:	f1c3 0120 	rsb	r1, r3, #32
 8000ab8:	fa02 fc03 	lsl.w	ip, r2, r3
 8000abc:	fa20 f201 	lsr.w	r2, r0, r1
 8000ac0:	fa25 f101 	lsr.w	r1, r5, r1
 8000ac4:	409d      	lsls	r5, r3
 8000ac6:	432a      	orrs	r2, r5
 8000ac8:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000acc:	fa1f fe8c 	uxth.w	lr, ip
 8000ad0:	fbb1 f0f7 	udiv	r0, r1, r7
 8000ad4:	fb07 1510 	mls	r5, r7, r0, r1
 8000ad8:	0c11      	lsrs	r1, r2, #16
 8000ada:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000ade:	fb00 f50e 	mul.w	r5, r0, lr
 8000ae2:	428d      	cmp	r5, r1
 8000ae4:	fa04 f403 	lsl.w	r4, r4, r3
 8000ae8:	d908      	bls.n	8000afc <__udivmoddi4+0x258>
 8000aea:	eb1c 0101 	adds.w	r1, ip, r1
 8000aee:	f100 38ff 	add.w	r8, r0, #4294967295
 8000af2:	d22f      	bcs.n	8000b54 <__udivmoddi4+0x2b0>
 8000af4:	428d      	cmp	r5, r1
 8000af6:	d92d      	bls.n	8000b54 <__udivmoddi4+0x2b0>
 8000af8:	3802      	subs	r0, #2
 8000afa:	4461      	add	r1, ip
 8000afc:	1b49      	subs	r1, r1, r5
 8000afe:	b292      	uxth	r2, r2
 8000b00:	fbb1 f5f7 	udiv	r5, r1, r7
 8000b04:	fb07 1115 	mls	r1, r7, r5, r1
 8000b08:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000b0c:	fb05 f10e 	mul.w	r1, r5, lr
 8000b10:	4291      	cmp	r1, r2
 8000b12:	d908      	bls.n	8000b26 <__udivmoddi4+0x282>
 8000b14:	eb1c 0202 	adds.w	r2, ip, r2
 8000b18:	f105 38ff 	add.w	r8, r5, #4294967295
 8000b1c:	d216      	bcs.n	8000b4c <__udivmoddi4+0x2a8>
 8000b1e:	4291      	cmp	r1, r2
 8000b20:	d914      	bls.n	8000b4c <__udivmoddi4+0x2a8>
 8000b22:	3d02      	subs	r5, #2
 8000b24:	4462      	add	r2, ip
 8000b26:	1a52      	subs	r2, r2, r1
 8000b28:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000b2c:	e738      	b.n	80009a0 <__udivmoddi4+0xfc>
 8000b2e:	4631      	mov	r1, r6
 8000b30:	4630      	mov	r0, r6
 8000b32:	e708      	b.n	8000946 <__udivmoddi4+0xa2>
 8000b34:	4639      	mov	r1, r7
 8000b36:	e6e6      	b.n	8000906 <__udivmoddi4+0x62>
 8000b38:	4610      	mov	r0, r2
 8000b3a:	e6fb      	b.n	8000934 <__udivmoddi4+0x90>
 8000b3c:	4548      	cmp	r0, r9
 8000b3e:	d2a9      	bcs.n	8000a94 <__udivmoddi4+0x1f0>
 8000b40:	ebb9 0802 	subs.w	r8, r9, r2
 8000b44:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000b48:	3b01      	subs	r3, #1
 8000b4a:	e7a3      	b.n	8000a94 <__udivmoddi4+0x1f0>
 8000b4c:	4645      	mov	r5, r8
 8000b4e:	e7ea      	b.n	8000b26 <__udivmoddi4+0x282>
 8000b50:	462b      	mov	r3, r5
 8000b52:	e794      	b.n	8000a7e <__udivmoddi4+0x1da>
 8000b54:	4640      	mov	r0, r8
 8000b56:	e7d1      	b.n	8000afc <__udivmoddi4+0x258>
 8000b58:	46d0      	mov	r8, sl
 8000b5a:	e77b      	b.n	8000a54 <__udivmoddi4+0x1b0>
 8000b5c:	3d02      	subs	r5, #2
 8000b5e:	4462      	add	r2, ip
 8000b60:	e732      	b.n	80009c8 <__udivmoddi4+0x124>
 8000b62:	4608      	mov	r0, r1
 8000b64:	e70a      	b.n	800097c <__udivmoddi4+0xd8>
 8000b66:	4464      	add	r4, ip
 8000b68:	3802      	subs	r0, #2
 8000b6a:	e742      	b.n	80009f2 <__udivmoddi4+0x14e>

08000b6c <__aeabi_idiv0>:
 8000b6c:	4770      	bx	lr
 8000b6e:	bf00      	nop

08000b70 <PI_REG>:


  /* Regulatory PI*/

void PI_REG(PI_reg *Reg, int16_t fdb_value, int16_t ref_value, int32_t *pi_out)
 {
 8000b70:	b480      	push	{r7}
 8000b72:	b085      	sub	sp, #20
 8000b74:	af00      	add	r7, sp, #0
 8000b76:	60f8      	str	r0, [r7, #12]
 8000b78:	607b      	str	r3, [r7, #4]
 8000b7a:	460b      	mov	r3, r1
 8000b7c:	817b      	strh	r3, [r7, #10]
 8000b7e:	4613      	mov	r3, r2
 8000b80:	813b      	strh	r3, [r7, #8]
	/*uchyb regulacji*/
	Reg->error = (ref_value) - fdb_value; // dopisac antiwindup oraz limity wartosci aby nie doszlo do przeregulowan
 8000b82:	893a      	ldrh	r2, [r7, #8]
 8000b84:	897b      	ldrh	r3, [r7, #10]
 8000b86:	1ad3      	subs	r3, r2, r3
 8000b88:	b29b      	uxth	r3, r3
 8000b8a:	b21a      	sxth	r2, r3
 8000b8c:	68fb      	ldr	r3, [r7, #12]
 8000b8e:	801a      	strh	r2, [r3, #0]
	Reg->error_sum = Reg->error_sum + Reg->error; // kierunek nie gra tu roli, regulator dzia�a tak samo
 8000b90:	68fb      	ldr	r3, [r7, #12]
 8000b92:	685b      	ldr	r3, [r3, #4]
 8000b94:	68fa      	ldr	r2, [r7, #12]
 8000b96:	f9b2 2000 	ldrsh.w	r2, [r2]
 8000b9a:	441a      	add	r2, r3
 8000b9c:	68fb      	ldr	r3, [r7, #12]
 8000b9e:	605a      	str	r2, [r3, #4]

	if (Reg->error_sum > 1000000) Reg->error_sum  =  1000000;
 8000ba0:	68fb      	ldr	r3, [r7, #12]
 8000ba2:	685b      	ldr	r3, [r3, #4]
 8000ba4:	4a20      	ldr	r2, [pc, #128]	; (8000c28 <PI_REG+0xb8>)
 8000ba6:	4293      	cmp	r3, r2
 8000ba8:	dd02      	ble.n	8000bb0 <PI_REG+0x40>
 8000baa:	68fb      	ldr	r3, [r7, #12]
 8000bac:	4a1e      	ldr	r2, [pc, #120]	; (8000c28 <PI_REG+0xb8>)
 8000bae:	605a      	str	r2, [r3, #4]
	if (Reg->error_sum <-1000000) Reg->error_sum  = -1000000;
 8000bb0:	68fb      	ldr	r3, [r7, #12]
 8000bb2:	685b      	ldr	r3, [r3, #4]
 8000bb4:	4a1d      	ldr	r2, [pc, #116]	; (8000c2c <PI_REG+0xbc>)
 8000bb6:	4293      	cmp	r3, r2
 8000bb8:	da02      	bge.n	8000bc0 <PI_REG+0x50>
 8000bba:	68fb      	ldr	r3, [r7, #12]
 8000bbc:	4a1b      	ldr	r2, [pc, #108]	; (8000c2c <PI_REG+0xbc>)
 8000bbe:	605a      	str	r2, [r3, #4]
	Reg->out = (Reg->KP * Reg->error) + (Reg->KI * Reg->error_sum);
 8000bc0:	68fb      	ldr	r3, [r7, #12]
 8000bc2:	899b      	ldrh	r3, [r3, #12]
 8000bc4:	461a      	mov	r2, r3
 8000bc6:	68fb      	ldr	r3, [r7, #12]
 8000bc8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000bcc:	fb03 f202 	mul.w	r2, r3, r2
 8000bd0:	68fb      	ldr	r3, [r7, #12]
 8000bd2:	89db      	ldrh	r3, [r3, #14]
 8000bd4:	4619      	mov	r1, r3
 8000bd6:	68fb      	ldr	r3, [r7, #12]
 8000bd8:	685b      	ldr	r3, [r3, #4]
 8000bda:	fb01 f303 	mul.w	r3, r1, r3
 8000bde:	441a      	add	r2, r3
 8000be0:	68fb      	ldr	r3, [r7, #12]
 8000be2:	609a      	str	r2, [r3, #8]
	if(Reg->out > 10000000)Reg->out= 10000000;
 8000be4:	68fb      	ldr	r3, [r7, #12]
 8000be6:	689b      	ldr	r3, [r3, #8]
 8000be8:	4a11      	ldr	r2, [pc, #68]	; (8000c30 <PI_REG+0xc0>)
 8000bea:	4293      	cmp	r3, r2
 8000bec:	dd02      	ble.n	8000bf4 <PI_REG+0x84>
 8000bee:	68fb      	ldr	r3, [r7, #12]
 8000bf0:	4a0f      	ldr	r2, [pc, #60]	; (8000c30 <PI_REG+0xc0>)
 8000bf2:	609a      	str	r2, [r3, #8]
	if(Reg->out <-10000000)Reg->out=-10000000;
 8000bf4:	68fb      	ldr	r3, [r7, #12]
 8000bf6:	689b      	ldr	r3, [r3, #8]
 8000bf8:	4a0e      	ldr	r2, [pc, #56]	; (8000c34 <PI_REG+0xc4>)
 8000bfa:	4293      	cmp	r3, r2
 8000bfc:	da02      	bge.n	8000c04 <PI_REG+0x94>
 8000bfe:	68fb      	ldr	r3, [r7, #12]
 8000c00:	4a0c      	ldr	r2, [pc, #48]	; (8000c34 <PI_REG+0xc4>)
 8000c02:	609a      	str	r2, [r3, #8]

	*pi_out = (int16_t)(Reg->out/10000); //max output in decimal scale 1000
 8000c04:	68fb      	ldr	r3, [r7, #12]
 8000c06:	689b      	ldr	r3, [r3, #8]
 8000c08:	4a0b      	ldr	r2, [pc, #44]	; (8000c38 <PI_REG+0xc8>)
 8000c0a:	fb82 1203 	smull	r1, r2, r2, r3
 8000c0e:	1312      	asrs	r2, r2, #12
 8000c10:	17db      	asrs	r3, r3, #31
 8000c12:	1ad3      	subs	r3, r2, r3
 8000c14:	b21b      	sxth	r3, r3
 8000c16:	461a      	mov	r2, r3
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	601a      	str	r2, [r3, #0]

 }
 8000c1c:	bf00      	nop
 8000c1e:	3714      	adds	r7, #20
 8000c20:	46bd      	mov	sp, r7
 8000c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c26:	4770      	bx	lr
 8000c28:	000f4240 	.word	0x000f4240
 8000c2c:	fff0bdc0 	.word	0xfff0bdc0
 8000c30:	00989680 	.word	0x00989680
 8000c34:	ff676980 	.word	0xff676980
 8000c38:	68db8bad 	.word	0x68db8bad
 8000c3c:	00000000 	.word	0x00000000

08000c40 <angle_theta_calc>:



		/**OBLICZENIA KĄTA THETA**/
void angle_theta_calc()
{
 8000c40:	b580      	push	{r7, lr}
 8000c42:	b082      	sub	sp, #8
 8000c44:	af00      	add	r7, sp, #0
int16_t tmp_poz_walu;
tmp_poz_walu = pozycja_walu + rotor_offset; //0,044 bo dwie pary biegunów
 8000c46:	4b22      	ldr	r3, [pc, #136]	; (8000cd0 <angle_theta_calc+0x90>)
 8000c48:	881b      	ldrh	r3, [r3, #0]
 8000c4a:	b29a      	uxth	r2, r3
 8000c4c:	4b21      	ldr	r3, [pc, #132]	; (8000cd4 <angle_theta_calc+0x94>)
 8000c4e:	b29b      	uxth	r3, r3
 8000c50:	4413      	add	r3, r2
 8000c52:	b29b      	uxth	r3, r3
 8000c54:	80fb      	strh	r3, [r7, #6]

    if(tmp_poz_walu < 0){
 8000c56:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000c5a:	2b00      	cmp	r3, #0
 8000c5c:	da16      	bge.n	8000c8c <angle_theta_calc+0x4c>
	pozycja_walu_deg = (ENK_ABS_RES +  tmp_poz_walu) * 0.037; // bo 3 pp, 200 elementow tablicy = 16384/600
 8000c5e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000c62:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8000c66:	4618      	mov	r0, r3
 8000c68:	f7ff fd42 	bl	80006f0 <__aeabi_ui2d>
 8000c6c:	a316      	add	r3, pc, #88	; (adr r3, 8000cc8 <angle_theta_calc+0x88>)
 8000c6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000c72:	f7ff fad1 	bl	8000218 <__aeabi_dmul>
 8000c76:	4602      	mov	r2, r0
 8000c78:	460b      	mov	r3, r1
 8000c7a:	4610      	mov	r0, r2
 8000c7c:	4619      	mov	r1, r3
 8000c7e:	f7ff fdd9 	bl	8000834 <__aeabi_d2uiz>
 8000c82:	4603      	mov	r3, r0
 8000c84:	b29a      	uxth	r2, r3
 8000c86:	4b14      	ldr	r3, [pc, #80]	; (8000cd8 <angle_theta_calc+0x98>)
 8000c88:	801a      	strh	r2, [r3, #0]
    }
    else {
    pozycja_walu_deg = (pozycja_walu + rotor_offset) * 0.037;
    }
}
 8000c8a:	e017      	b.n	8000cbc <angle_theta_calc+0x7c>
    pozycja_walu_deg = (pozycja_walu + rotor_offset) * 0.037;
 8000c8c:	4b10      	ldr	r3, [pc, #64]	; (8000cd0 <angle_theta_calc+0x90>)
 8000c8e:	881b      	ldrh	r3, [r3, #0]
 8000c90:	b29b      	uxth	r3, r3
 8000c92:	461a      	mov	r2, r3
 8000c94:	4b0f      	ldr	r3, [pc, #60]	; (8000cd4 <angle_theta_calc+0x94>)
 8000c96:	4413      	add	r3, r2
 8000c98:	4618      	mov	r0, r3
 8000c9a:	f7ff fd39 	bl	8000710 <__aeabi_i2d>
 8000c9e:	a30a      	add	r3, pc, #40	; (adr r3, 8000cc8 <angle_theta_calc+0x88>)
 8000ca0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ca4:	f7ff fab8 	bl	8000218 <__aeabi_dmul>
 8000ca8:	4602      	mov	r2, r0
 8000caa:	460b      	mov	r3, r1
 8000cac:	4610      	mov	r0, r2
 8000cae:	4619      	mov	r1, r3
 8000cb0:	f7ff fdc0 	bl	8000834 <__aeabi_d2uiz>
 8000cb4:	4603      	mov	r3, r0
 8000cb6:	b29a      	uxth	r2, r3
 8000cb8:	4b07      	ldr	r3, [pc, #28]	; (8000cd8 <angle_theta_calc+0x98>)
 8000cba:	801a      	strh	r2, [r3, #0]
}
 8000cbc:	bf00      	nop
 8000cbe:	3708      	adds	r7, #8
 8000cc0:	46bd      	mov	sp, r7
 8000cc2:	bd80      	pop	{r7, pc}
 8000cc4:	f3af 8000 	nop.w
 8000cc8:	fbe76c8b 	.word	0xfbe76c8b
 8000ccc:	3fa2f1a9 	.word	0x3fa2f1a9
 8000cd0:	20000048 	.word	0x20000048
 8000cd4:	fffffd8a 	.word	0xfffffd8a
 8000cd8:	2000004a 	.word	0x2000004a
 8000cdc:	00000000 	.word	0x00000000

08000ce0 <clark_transf>:

		/**TRANSFORMACJA CLARK**/
void clark_transf(int16_t prad_a, int16_t prad_b, int16_t *alpha, int16_t *beta)
{
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	b084      	sub	sp, #16
 8000ce4:	af00      	add	r7, sp, #0
 8000ce6:	60ba      	str	r2, [r7, #8]
 8000ce8:	607b      	str	r3, [r7, #4]
 8000cea:	4603      	mov	r3, r0
 8000cec:	81fb      	strh	r3, [r7, #14]
 8000cee:	460b      	mov	r3, r1
 8000cf0:	81bb      	strh	r3, [r7, #12]
	*alpha = prad_a;
 8000cf2:	68bb      	ldr	r3, [r7, #8]
 8000cf4:	89fa      	ldrh	r2, [r7, #14]
 8000cf6:	801a      	strh	r2, [r3, #0]
	*beta  = (prad_a + 2 * prad_b) * 0.577;
 8000cf8:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8000cfc:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8000d00:	005b      	lsls	r3, r3, #1
 8000d02:	4413      	add	r3, r2
 8000d04:	4618      	mov	r0, r3
 8000d06:	f7ff fd03 	bl	8000710 <__aeabi_i2d>
 8000d0a:	a309      	add	r3, pc, #36	; (adr r3, 8000d30 <clark_transf+0x50>)
 8000d0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d10:	f7ff fa82 	bl	8000218 <__aeabi_dmul>
 8000d14:	4602      	mov	r2, r0
 8000d16:	460b      	mov	r3, r1
 8000d18:	4610      	mov	r0, r2
 8000d1a:	4619      	mov	r1, r3
 8000d1c:	f7ff fd62 	bl	80007e4 <__aeabi_d2iz>
 8000d20:	4603      	mov	r3, r0
 8000d22:	b21a      	sxth	r2, r3
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	801a      	strh	r2, [r3, #0]
}
 8000d28:	bf00      	nop
 8000d2a:	3710      	adds	r7, #16
 8000d2c:	46bd      	mov	sp, r7
 8000d2e:	bd80      	pop	{r7, pc}
 8000d30:	b4395810 	.word	0xb4395810
 8000d34:	3fe276c8 	.word	0x3fe276c8

08000d38 <park_transf>:

	/**TRANSFORMACJA PARK**/
void park_transf(int16_t alpha, int16_t beta, int16_t rotor_pos, volatile int16_t *q, volatile int16_t *d)
{
 8000d38:	b480      	push	{r7}
 8000d3a:	b087      	sub	sp, #28
 8000d3c:	af00      	add	r7, sp, #0
 8000d3e:	607b      	str	r3, [r7, #4]
 8000d40:	4603      	mov	r3, r0
 8000d42:	81fb      	strh	r3, [r7, #14]
 8000d44:	460b      	mov	r3, r1
 8000d46:	81bb      	strh	r3, [r7, #12]
 8000d48:	4613      	mov	r3, r2
 8000d4a:	817b      	strh	r3, [r7, #10]
	uint16_t idx = 0;
 8000d4c:	2300      	movs	r3, #0
 8000d4e:	82fb      	strh	r3, [r7, #22]
	idx = (rotor_pos) % 200;
 8000d50:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8000d54:	4a2d      	ldr	r2, [pc, #180]	; (8000e0c <park_transf+0xd4>)
 8000d56:	fb82 1203 	smull	r1, r2, r2, r3
 8000d5a:	1191      	asrs	r1, r2, #6
 8000d5c:	17da      	asrs	r2, r3, #31
 8000d5e:	1a8a      	subs	r2, r1, r2
 8000d60:	21c8      	movs	r1, #200	; 0xc8
 8000d62:	fb01 f202 	mul.w	r2, r1, r2
 8000d66:	1a9b      	subs	r3, r3, r2
 8000d68:	b21b      	sxth	r3, r3
 8000d6a:	82fb      	strh	r3, [r7, #22]
	*q = (beta  * cos_tab[idx] - alpha * sin_tab[idx]);
 8000d6c:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8000d70:	ee07 3a90 	vmov	s15, r3
 8000d74:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000d78:	8afb      	ldrh	r3, [r7, #22]
 8000d7a:	4a25      	ldr	r2, [pc, #148]	; (8000e10 <park_transf+0xd8>)
 8000d7c:	009b      	lsls	r3, r3, #2
 8000d7e:	4413      	add	r3, r2
 8000d80:	edd3 7a00 	vldr	s15, [r3]
 8000d84:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000d88:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000d8c:	ee07 3a90 	vmov	s15, r3
 8000d90:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000d94:	8afb      	ldrh	r3, [r7, #22]
 8000d96:	4a1f      	ldr	r2, [pc, #124]	; (8000e14 <park_transf+0xdc>)
 8000d98:	009b      	lsls	r3, r3, #2
 8000d9a:	4413      	add	r3, r2
 8000d9c:	edd3 7a00 	vldr	s15, [r3]
 8000da0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000da4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000da8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000dac:	ee17 3a90 	vmov	r3, s15
 8000db0:	b21a      	sxth	r2, r3
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	801a      	strh	r2, [r3, #0]
	*d = (alpha * cos_tab[idx] + beta  * sin_tab[idx]);
 8000db6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000dba:	ee07 3a90 	vmov	s15, r3
 8000dbe:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000dc2:	8afb      	ldrh	r3, [r7, #22]
 8000dc4:	4a12      	ldr	r2, [pc, #72]	; (8000e10 <park_transf+0xd8>)
 8000dc6:	009b      	lsls	r3, r3, #2
 8000dc8:	4413      	add	r3, r2
 8000dca:	edd3 7a00 	vldr	s15, [r3]
 8000dce:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000dd2:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8000dd6:	ee07 3a90 	vmov	s15, r3
 8000dda:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000dde:	8afb      	ldrh	r3, [r7, #22]
 8000de0:	4a0c      	ldr	r2, [pc, #48]	; (8000e14 <park_transf+0xdc>)
 8000de2:	009b      	lsls	r3, r3, #2
 8000de4:	4413      	add	r3, r2
 8000de6:	edd3 7a00 	vldr	s15, [r3]
 8000dea:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000dee:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000df2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000df6:	ee17 3a90 	vmov	r3, s15
 8000dfa:	b21a      	sxth	r2, r3
 8000dfc:	6a3b      	ldr	r3, [r7, #32]
 8000dfe:	801a      	strh	r2, [r3, #0]

}
 8000e00:	bf00      	nop
 8000e02:	371c      	adds	r7, #28
 8000e04:	46bd      	mov	sp, r7
 8000e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e0a:	4770      	bx	lr
 8000e0c:	51eb851f 	.word	0x51eb851f
 8000e10:	0800ba34 	.word	0x0800ba34
 8000e14:	0800b714 	.word	0x0800b714

08000e18 <park_rev_transf>:

	/**TRANSFORMATA ODWROTNA PARK'a**/
void park_rev_transf(int32_t Vd, int32_t Vq, int16_t rotor_pos,  int32_t *u_alpha,   int32_t *u_beta)
{
 8000e18:	b480      	push	{r7}
 8000e1a:	b087      	sub	sp, #28
 8000e1c:	af00      	add	r7, sp, #0
 8000e1e:	60f8      	str	r0, [r7, #12]
 8000e20:	60b9      	str	r1, [r7, #8]
 8000e22:	603b      	str	r3, [r7, #0]
 8000e24:	4613      	mov	r3, r2
 8000e26:	80fb      	strh	r3, [r7, #6]
	uint16_t idx = 0;
 8000e28:	2300      	movs	r3, #0
 8000e2a:	82fb      	strh	r3, [r7, #22]
	idx = (rotor_pos) % 200;
 8000e2c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000e30:	4a2a      	ldr	r2, [pc, #168]	; (8000edc <park_rev_transf+0xc4>)
 8000e32:	fb82 1203 	smull	r1, r2, r2, r3
 8000e36:	1191      	asrs	r1, r2, #6
 8000e38:	17da      	asrs	r2, r3, #31
 8000e3a:	1a8a      	subs	r2, r1, r2
 8000e3c:	21c8      	movs	r1, #200	; 0xc8
 8000e3e:	fb01 f202 	mul.w	r2, r1, r2
 8000e42:	1a9b      	subs	r3, r3, r2
 8000e44:	b21b      	sxth	r3, r3
 8000e46:	82fb      	strh	r3, [r7, #22]
	*u_alpha = (Vd * cos_tab[idx] - Vq * sin_tab[idx]) * 1; 	//0.000002 // skalowanie do max +/- 1000 dec
 8000e48:	68fb      	ldr	r3, [r7, #12]
 8000e4a:	ee07 3a90 	vmov	s15, r3
 8000e4e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000e52:	8afb      	ldrh	r3, [r7, #22]
 8000e54:	4a22      	ldr	r2, [pc, #136]	; (8000ee0 <park_rev_transf+0xc8>)
 8000e56:	009b      	lsls	r3, r3, #2
 8000e58:	4413      	add	r3, r2
 8000e5a:	edd3 7a00 	vldr	s15, [r3]
 8000e5e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000e62:	68bb      	ldr	r3, [r7, #8]
 8000e64:	ee07 3a90 	vmov	s15, r3
 8000e68:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000e6c:	8afb      	ldrh	r3, [r7, #22]
 8000e6e:	4a1d      	ldr	r2, [pc, #116]	; (8000ee4 <park_rev_transf+0xcc>)
 8000e70:	009b      	lsls	r3, r3, #2
 8000e72:	4413      	add	r3, r2
 8000e74:	edd3 7a00 	vldr	s15, [r3]
 8000e78:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000e7c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000e80:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000e84:	ee17 2a90 	vmov	r2, s15
 8000e88:	683b      	ldr	r3, [r7, #0]
 8000e8a:	601a      	str	r2, [r3, #0]
	*u_beta  = (Vq * cos_tab[idx] + Vd * sin_tab[idx]) * 1; 	// 0.000002
 8000e8c:	68bb      	ldr	r3, [r7, #8]
 8000e8e:	ee07 3a90 	vmov	s15, r3
 8000e92:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000e96:	8afb      	ldrh	r3, [r7, #22]
 8000e98:	4a11      	ldr	r2, [pc, #68]	; (8000ee0 <park_rev_transf+0xc8>)
 8000e9a:	009b      	lsls	r3, r3, #2
 8000e9c:	4413      	add	r3, r2
 8000e9e:	edd3 7a00 	vldr	s15, [r3]
 8000ea2:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000ea6:	68fb      	ldr	r3, [r7, #12]
 8000ea8:	ee07 3a90 	vmov	s15, r3
 8000eac:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000eb0:	8afb      	ldrh	r3, [r7, #22]
 8000eb2:	4a0c      	ldr	r2, [pc, #48]	; (8000ee4 <park_rev_transf+0xcc>)
 8000eb4:	009b      	lsls	r3, r3, #2
 8000eb6:	4413      	add	r3, r2
 8000eb8:	edd3 7a00 	vldr	s15, [r3]
 8000ebc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000ec0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000ec4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000ec8:	ee17 2a90 	vmov	r2, s15
 8000ecc:	6a3b      	ldr	r3, [r7, #32]
 8000ece:	601a      	str	r2, [r3, #0]
}
 8000ed0:	bf00      	nop
 8000ed2:	371c      	adds	r7, #28
 8000ed4:	46bd      	mov	sp, r7
 8000ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eda:	4770      	bx	lr
 8000edc:	51eb851f 	.word	0x51eb851f
 8000ee0:	0800ba34 	.word	0x0800ba34
 8000ee4:	0800b714 	.word	0x0800b714

08000ee8 <SPWM_modulacja>:




void SPWM_modulacja()
{
 8000ee8:	b480      	push	{r7}
 8000eea:	af00      	add	r7, sp, #0

	if(FOC_ON==1)
 8000eec:	4b0c      	ldr	r3, [pc, #48]	; (8000f20 <SPWM_modulacja+0x38>)
 8000eee:	781b      	ldrb	r3, [r3, #0]
 8000ef0:	b2db      	uxtb	r3, r3
 8000ef2:	2b01      	cmp	r3, #1
 8000ef4:	d10e      	bne.n	8000f14 <SPWM_modulacja+0x2c>
	{
		TIM1->CCR1 = PWM_U;
 8000ef6:	4b0b      	ldr	r3, [pc, #44]	; (8000f24 <SPWM_modulacja+0x3c>)
 8000ef8:	881b      	ldrh	r3, [r3, #0]
 8000efa:	b29a      	uxth	r2, r3
 8000efc:	4b0a      	ldr	r3, [pc, #40]	; (8000f28 <SPWM_modulacja+0x40>)
 8000efe:	635a      	str	r2, [r3, #52]	; 0x34
		TIM1->CCR2 = PWM_V;
 8000f00:	4b0a      	ldr	r3, [pc, #40]	; (8000f2c <SPWM_modulacja+0x44>)
 8000f02:	881b      	ldrh	r3, [r3, #0]
 8000f04:	b29a      	uxth	r2, r3
 8000f06:	4b08      	ldr	r3, [pc, #32]	; (8000f28 <SPWM_modulacja+0x40>)
 8000f08:	639a      	str	r2, [r3, #56]	; 0x38
		TIM1->CCR3 = PWM_W;
 8000f0a:	4b09      	ldr	r3, [pc, #36]	; (8000f30 <SPWM_modulacja+0x48>)
 8000f0c:	881b      	ldrh	r3, [r3, #0]
 8000f0e:	b29a      	uxth	r2, r3
 8000f10:	4b05      	ldr	r3, [pc, #20]	; (8000f28 <SPWM_modulacja+0x40>)
 8000f12:	63da      	str	r2, [r3, #60]	; 0x3c
	}

}
 8000f14:	bf00      	nop
 8000f16:	46bd      	mov	sp, r7
 8000f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f1c:	4770      	bx	lr
 8000f1e:	bf00      	nop
 8000f20:	20000000 	.word	0x20000000
 8000f24:	20000092 	.word	0x20000092
 8000f28:	40012c00 	.word	0x40012c00
 8000f2c:	20000094 	.word	0x20000094
 8000f30:	20000096 	.word	0x20000096

08000f34 <Pozycja>:




int16_t Pozycja(uint16_t pozycja_ak,uint16_t pozycja_pop, int32_t *poz_calk, uint16_t kier)
{
 8000f34:	b480      	push	{r7}
 8000f36:	b087      	sub	sp, #28
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	60ba      	str	r2, [r7, #8]
 8000f3c:	461a      	mov	r2, r3
 8000f3e:	4603      	mov	r3, r0
 8000f40:	81fb      	strh	r3, [r7, #14]
 8000f42:	460b      	mov	r3, r1
 8000f44:	81bb      	strh	r3, [r7, #12]
 8000f46:	4613      	mov	r3, r2
 8000f48:	80fb      	strh	r3, [r7, #6]
int16_t  delta_poz, delta_2;
delta_2=pozycja_pop-pozycja_ak;
 8000f4a:	89ba      	ldrh	r2, [r7, #12]
 8000f4c:	89fb      	ldrh	r3, [r7, #14]
 8000f4e:	1ad3      	subs	r3, r2, r3
 8000f50:	b29b      	uxth	r3, r3
 8000f52:	82bb      	strh	r3, [r7, #20]
	if(abs(pozycja_pop-pozycja_ak)>20)
 8000f54:	89ba      	ldrh	r2, [r7, #12]
 8000f56:	89fb      	ldrh	r3, [r7, #14]
 8000f58:	1ad3      	subs	r3, r2, r3
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	bfb8      	it	lt
 8000f5e:	425b      	neglt	r3, r3
 8000f60:	2b14      	cmp	r3, #20
 8000f62:	dd41      	ble.n	8000fe8 <Pozycja+0xb4>
	{
		if(pozycja_pop>pozycja_ak&&kier==16)
 8000f64:	89ba      	ldrh	r2, [r7, #12]
 8000f66:	89fb      	ldrh	r3, [r7, #14]
 8000f68:	429a      	cmp	r2, r3
 8000f6a:	d908      	bls.n	8000f7e <Pozycja+0x4a>
 8000f6c:	88fb      	ldrh	r3, [r7, #6]
 8000f6e:	2b10      	cmp	r3, #16
 8000f70:	d105      	bne.n	8000f7e <Pozycja+0x4a>
			{
				delta_poz = -(pozycja_pop-pozycja_ak);
 8000f72:	89fa      	ldrh	r2, [r7, #14]
 8000f74:	89bb      	ldrh	r3, [r7, #12]
 8000f76:	1ad3      	subs	r3, r2, r3
 8000f78:	b29b      	uxth	r3, r3
 8000f7a:	82fb      	strh	r3, [r7, #22]
 8000f7c:	e02d      	b.n	8000fda <Pozycja+0xa6>
			}
		else if(pozycja_pop<pozycja_ak&&kier==16)
 8000f7e:	89ba      	ldrh	r2, [r7, #12]
 8000f80:	89fb      	ldrh	r3, [r7, #14]
 8000f82:	429a      	cmp	r2, r3
 8000f84:	d20c      	bcs.n	8000fa0 <Pozycja+0x6c>
 8000f86:	88fb      	ldrh	r3, [r7, #6]
 8000f88:	2b10      	cmp	r3, #16
 8000f8a:	d109      	bne.n	8000fa0 <Pozycja+0x6c>
			{
				delta_poz = -((16385-pozycja_ak)+pozycja_pop);
 8000f8c:	89fa      	ldrh	r2, [r7, #14]
 8000f8e:	89bb      	ldrh	r3, [r7, #12]
 8000f90:	1ad3      	subs	r3, r2, r3
 8000f92:	b29b      	uxth	r3, r3
 8000f94:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 8000f98:	3b01      	subs	r3, #1
 8000f9a:	b29b      	uxth	r3, r3
 8000f9c:	82fb      	strh	r3, [r7, #22]
 8000f9e:	e01c      	b.n	8000fda <Pozycja+0xa6>
			}
		else if(pozycja_pop>pozycja_ak&&kier==0)
 8000fa0:	89ba      	ldrh	r2, [r7, #12]
 8000fa2:	89fb      	ldrh	r3, [r7, #14]
 8000fa4:	429a      	cmp	r2, r3
 8000fa6:	d90c      	bls.n	8000fc2 <Pozycja+0x8e>
 8000fa8:	88fb      	ldrh	r3, [r7, #6]
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	d109      	bne.n	8000fc2 <Pozycja+0x8e>
			{
				delta_poz = (16385-pozycja_pop)+pozycja_ak;
 8000fae:	89fa      	ldrh	r2, [r7, #14]
 8000fb0:	89bb      	ldrh	r3, [r7, #12]
 8000fb2:	1ad3      	subs	r3, r2, r3
 8000fb4:	b29b      	uxth	r3, r3
 8000fb6:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8000fba:	3301      	adds	r3, #1
 8000fbc:	b29b      	uxth	r3, r3
 8000fbe:	82fb      	strh	r3, [r7, #22]
 8000fc0:	e00b      	b.n	8000fda <Pozycja+0xa6>
			}
		else if(pozycja_pop<pozycja_ak&&kier==0)
 8000fc2:	89ba      	ldrh	r2, [r7, #12]
 8000fc4:	89fb      	ldrh	r3, [r7, #14]
 8000fc6:	429a      	cmp	r2, r3
 8000fc8:	d207      	bcs.n	8000fda <Pozycja+0xa6>
 8000fca:	88fb      	ldrh	r3, [r7, #6]
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	d104      	bne.n	8000fda <Pozycja+0xa6>
			{
				delta_poz = pozycja_ak-pozycja_pop;
 8000fd0:	89fa      	ldrh	r2, [r7, #14]
 8000fd2:	89bb      	ldrh	r3, [r7, #12]
 8000fd4:	1ad3      	subs	r3, r2, r3
 8000fd6:	b29b      	uxth	r3, r3
 8000fd8:	82fb      	strh	r3, [r7, #22]
			}


		*poz_calk+=delta_poz;
 8000fda:	68bb      	ldr	r3, [r7, #8]
 8000fdc:	681a      	ldr	r2, [r3, #0]
 8000fde:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8000fe2:	441a      	add	r2, r3
 8000fe4:	68bb      	ldr	r3, [r7, #8]
 8000fe6:	601a      	str	r2, [r3, #0]

	}
	return delta_poz;
 8000fe8:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
}
 8000fec:	4618      	mov	r0, r3
 8000fee:	371c      	adds	r7, #28
 8000ff0:	46bd      	mov	sp, r7
 8000ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff6:	4770      	bx	lr

08000ff8 <SVPWM_modulacja>:
	return delta_enc;


}
void SVPWM_modulacja(int32_t u_alpha, int32_t u_beta, int16_t *U_SVM, int16_t *V_SVM, int16_t *W_SVM)
{
 8000ff8:	b5b0      	push	{r4, r5, r7, lr}
 8000ffa:	b08c      	sub	sp, #48	; 0x30
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	60f8      	str	r0, [r7, #12]
 8001000:	60b9      	str	r1, [r7, #8]
 8001002:	607a      	str	r2, [r7, #4]
 8001004:	603b      	str	r3, [r7, #0]

	// U_alpha i beta to zmienne in z transformacji, *x_SVM to pointery na wrzucenie zmiennych out
int32_t u, v, w, T1, T2, T0;
uint8_t sektor;

		u = (u_alpha * 1.73 - u_beta) * 0.5;
 8001006:	68f8      	ldr	r0, [r7, #12]
 8001008:	f7ff fb82 	bl	8000710 <__aeabi_i2d>
 800100c:	a3b2      	add	r3, pc, #712	; (adr r3, 80012d8 <SVPWM_modulacja+0x2e0>)
 800100e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001012:	f7ff f901 	bl	8000218 <__aeabi_dmul>
 8001016:	4602      	mov	r2, r0
 8001018:	460b      	mov	r3, r1
 800101a:	4614      	mov	r4, r2
 800101c:	461d      	mov	r5, r3
 800101e:	68b8      	ldr	r0, [r7, #8]
 8001020:	f7ff fb76 	bl	8000710 <__aeabi_i2d>
 8001024:	4602      	mov	r2, r0
 8001026:	460b      	mov	r3, r1
 8001028:	4620      	mov	r0, r4
 800102a:	4629      	mov	r1, r5
 800102c:	f7ff fa22 	bl	8000474 <__aeabi_dsub>
 8001030:	4602      	mov	r2, r0
 8001032:	460b      	mov	r3, r1
 8001034:	4610      	mov	r0, r2
 8001036:	4619      	mov	r1, r3
 8001038:	f04f 0200 	mov.w	r2, #0
 800103c:	4ba8      	ldr	r3, [pc, #672]	; (80012e0 <SVPWM_modulacja+0x2e8>)
 800103e:	f7ff f8eb 	bl	8000218 <__aeabi_dmul>
 8001042:	4602      	mov	r2, r0
 8001044:	460b      	mov	r3, r1
 8001046:	4610      	mov	r0, r2
 8001048:	4619      	mov	r1, r3
 800104a:	f7ff fbcb 	bl	80007e4 <__aeabi_d2iz>
 800104e:	4603      	mov	r3, r0
 8001050:	62bb      	str	r3, [r7, #40]	; 0x28
		v = u_beta;
 8001052:	68bb      	ldr	r3, [r7, #8]
 8001054:	627b      	str	r3, [r7, #36]	; 0x24
		w = (-u_alpha * 1.73 - u_beta) * 0.5;
 8001056:	68fb      	ldr	r3, [r7, #12]
 8001058:	425b      	negs	r3, r3
 800105a:	4618      	mov	r0, r3
 800105c:	f7ff fb58 	bl	8000710 <__aeabi_i2d>
 8001060:	a39d      	add	r3, pc, #628	; (adr r3, 80012d8 <SVPWM_modulacja+0x2e0>)
 8001062:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001066:	f7ff f8d7 	bl	8000218 <__aeabi_dmul>
 800106a:	4602      	mov	r2, r0
 800106c:	460b      	mov	r3, r1
 800106e:	4614      	mov	r4, r2
 8001070:	461d      	mov	r5, r3
 8001072:	68b8      	ldr	r0, [r7, #8]
 8001074:	f7ff fb4c 	bl	8000710 <__aeabi_i2d>
 8001078:	4602      	mov	r2, r0
 800107a:	460b      	mov	r3, r1
 800107c:	4620      	mov	r0, r4
 800107e:	4629      	mov	r1, r5
 8001080:	f7ff f9f8 	bl	8000474 <__aeabi_dsub>
 8001084:	4602      	mov	r2, r0
 8001086:	460b      	mov	r3, r1
 8001088:	4610      	mov	r0, r2
 800108a:	4619      	mov	r1, r3
 800108c:	f04f 0200 	mov.w	r2, #0
 8001090:	4b93      	ldr	r3, [pc, #588]	; (80012e0 <SVPWM_modulacja+0x2e8>)
 8001092:	f7ff f8c1 	bl	8000218 <__aeabi_dmul>
 8001096:	4602      	mov	r2, r0
 8001098:	460b      	mov	r3, r1
 800109a:	4610      	mov	r0, r2
 800109c:	4619      	mov	r1, r3
 800109e:	f7ff fba1 	bl	80007e4 <__aeabi_d2iz>
 80010a2:	4603      	mov	r3, r0
 80010a4:	623b      	str	r3, [r7, #32]

		if(u > 0 && v > 0 && w < 0)
 80010a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	dd09      	ble.n	80010c0 <SVPWM_modulacja+0xc8>
 80010ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	dd06      	ble.n	80010c0 <SVPWM_modulacja+0xc8>
 80010b2:	6a3b      	ldr	r3, [r7, #32]
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	da03      	bge.n	80010c0 <SVPWM_modulacja+0xc8>
			{
			sektor = 1;
 80010b8:	2301      	movs	r3, #1
 80010ba:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80010be:	e03f      	b.n	8001140 <SVPWM_modulacja+0x148>
			}
		else if(v >0 && w < 0 && u < 0)
 80010c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	dd09      	ble.n	80010da <SVPWM_modulacja+0xe2>
 80010c6:	6a3b      	ldr	r3, [r7, #32]
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	da06      	bge.n	80010da <SVPWM_modulacja+0xe2>
 80010cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	da03      	bge.n	80010da <SVPWM_modulacja+0xe2>
			{
			sektor = 2;
 80010d2:	2302      	movs	r3, #2
 80010d4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80010d8:	e032      	b.n	8001140 <SVPWM_modulacja+0x148>
			}
		else if(v > 0 && w >0 && u < 0)
 80010da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010dc:	2b00      	cmp	r3, #0
 80010de:	dd09      	ble.n	80010f4 <SVPWM_modulacja+0xfc>
 80010e0:	6a3b      	ldr	r3, [r7, #32]
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	dd06      	ble.n	80010f4 <SVPWM_modulacja+0xfc>
 80010e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	da03      	bge.n	80010f4 <SVPWM_modulacja+0xfc>
			{
			sektor = 3;
 80010ec:	2303      	movs	r3, #3
 80010ee:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80010f2:	e025      	b.n	8001140 <SVPWM_modulacja+0x148>
			}
		else if(v <0 && w > 0 && u < 0)
 80010f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	da09      	bge.n	800110e <SVPWM_modulacja+0x116>
 80010fa:	6a3b      	ldr	r3, [r7, #32]
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	dd06      	ble.n	800110e <SVPWM_modulacja+0x116>
 8001100:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001102:	2b00      	cmp	r3, #0
 8001104:	da03      	bge.n	800110e <SVPWM_modulacja+0x116>
			{
			sektor = 4;
 8001106:	2304      	movs	r3, #4
 8001108:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800110c:	e018      	b.n	8001140 <SVPWM_modulacja+0x148>
			}
		else if(v < 0 && w > 0 && u > 0)
 800110e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001110:	2b00      	cmp	r3, #0
 8001112:	da09      	bge.n	8001128 <SVPWM_modulacja+0x130>
 8001114:	6a3b      	ldr	r3, [r7, #32]
 8001116:	2b00      	cmp	r3, #0
 8001118:	dd06      	ble.n	8001128 <SVPWM_modulacja+0x130>
 800111a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800111c:	2b00      	cmp	r3, #0
 800111e:	dd03      	ble.n	8001128 <SVPWM_modulacja+0x130>
			{
			sektor = 5;
 8001120:	2305      	movs	r3, #5
 8001122:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8001126:	e00b      	b.n	8001140 <SVPWM_modulacja+0x148>
			}
		else if(v < 0 && w < 0 && u > 0)
 8001128:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800112a:	2b00      	cmp	r3, #0
 800112c:	da08      	bge.n	8001140 <SVPWM_modulacja+0x148>
 800112e:	6a3b      	ldr	r3, [r7, #32]
 8001130:	2b00      	cmp	r3, #0
 8001132:	da05      	bge.n	8001140 <SVPWM_modulacja+0x148>
 8001134:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001136:	2b00      	cmp	r3, #0
 8001138:	dd02      	ble.n	8001140 <SVPWM_modulacja+0x148>
			{
			sektor = 6;
 800113a:	2306      	movs	r3, #6
 800113c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			}

		switch(sektor)
 8001140:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001144:	3b01      	subs	r3, #1
 8001146:	2b05      	cmp	r3, #5
 8001148:	f200 8238 	bhi.w	80015bc <SVPWM_modulacja+0x5c4>
 800114c:	a201      	add	r2, pc, #4	; (adr r2, 8001154 <SVPWM_modulacja+0x15c>)
 800114e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001152:	bf00      	nop
 8001154:	0800116d 	.word	0x0800116d
 8001158:	08001221 	.word	0x08001221
 800115c:	080012e5 	.word	0x080012e5
 8001160:	08001399 	.word	0x08001399
 8001164:	08001451 	.word	0x08001451
 8001168:	08001505 	.word	0x08001505
		{
		case 1:	T1 = u;
 800116c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800116e:	61fb      	str	r3, [r7, #28]
				T2 = v;
 8001170:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001172:	61bb      	str	r3, [r7, #24]
				T0 = 1 - T1 - T2;
 8001174:	69fb      	ldr	r3, [r7, #28]
 8001176:	f1c3 0201 	rsb	r2, r3, #1
 800117a:	69bb      	ldr	r3, [r7, #24]
 800117c:	1ad3      	subs	r3, r2, r3
 800117e:	617b      	str	r3, [r7, #20]
				*U_SVM = T1 + T2 + 0.5 * T0;
 8001180:	69fa      	ldr	r2, [r7, #28]
 8001182:	69bb      	ldr	r3, [r7, #24]
 8001184:	4413      	add	r3, r2
 8001186:	4618      	mov	r0, r3
 8001188:	f7ff fac2 	bl	8000710 <__aeabi_i2d>
 800118c:	4604      	mov	r4, r0
 800118e:	460d      	mov	r5, r1
 8001190:	6978      	ldr	r0, [r7, #20]
 8001192:	f7ff fabd 	bl	8000710 <__aeabi_i2d>
 8001196:	f04f 0200 	mov.w	r2, #0
 800119a:	4b51      	ldr	r3, [pc, #324]	; (80012e0 <SVPWM_modulacja+0x2e8>)
 800119c:	f7ff f83c 	bl	8000218 <__aeabi_dmul>
 80011a0:	4602      	mov	r2, r0
 80011a2:	460b      	mov	r3, r1
 80011a4:	4620      	mov	r0, r4
 80011a6:	4629      	mov	r1, r5
 80011a8:	f7ff f966 	bl	8000478 <__adddf3>
 80011ac:	4602      	mov	r2, r0
 80011ae:	460b      	mov	r3, r1
 80011b0:	4610      	mov	r0, r2
 80011b2:	4619      	mov	r1, r3
 80011b4:	f7ff fb16 	bl	80007e4 <__aeabi_d2iz>
 80011b8:	4603      	mov	r3, r0
 80011ba:	b21a      	sxth	r2, r3
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	801a      	strh	r2, [r3, #0]
				*V_SVM = T2 +0.5 * T0;
 80011c0:	69b8      	ldr	r0, [r7, #24]
 80011c2:	f7ff faa5 	bl	8000710 <__aeabi_i2d>
 80011c6:	4604      	mov	r4, r0
 80011c8:	460d      	mov	r5, r1
 80011ca:	6978      	ldr	r0, [r7, #20]
 80011cc:	f7ff faa0 	bl	8000710 <__aeabi_i2d>
 80011d0:	f04f 0200 	mov.w	r2, #0
 80011d4:	4b42      	ldr	r3, [pc, #264]	; (80012e0 <SVPWM_modulacja+0x2e8>)
 80011d6:	f7ff f81f 	bl	8000218 <__aeabi_dmul>
 80011da:	4602      	mov	r2, r0
 80011dc:	460b      	mov	r3, r1
 80011de:	4620      	mov	r0, r4
 80011e0:	4629      	mov	r1, r5
 80011e2:	f7ff f949 	bl	8000478 <__adddf3>
 80011e6:	4602      	mov	r2, r0
 80011e8:	460b      	mov	r3, r1
 80011ea:	4610      	mov	r0, r2
 80011ec:	4619      	mov	r1, r3
 80011ee:	f7ff faf9 	bl	80007e4 <__aeabi_d2iz>
 80011f2:	4603      	mov	r3, r0
 80011f4:	b21a      	sxth	r2, r3
 80011f6:	683b      	ldr	r3, [r7, #0]
 80011f8:	801a      	strh	r2, [r3, #0]
				*W_SVM = 0.5 * T0;
 80011fa:	6978      	ldr	r0, [r7, #20]
 80011fc:	f7ff fa88 	bl	8000710 <__aeabi_i2d>
 8001200:	f04f 0200 	mov.w	r2, #0
 8001204:	4b36      	ldr	r3, [pc, #216]	; (80012e0 <SVPWM_modulacja+0x2e8>)
 8001206:	f7ff f807 	bl	8000218 <__aeabi_dmul>
 800120a:	4602      	mov	r2, r0
 800120c:	460b      	mov	r3, r1
 800120e:	4610      	mov	r0, r2
 8001210:	4619      	mov	r1, r3
 8001212:	f7ff fae7 	bl	80007e4 <__aeabi_d2iz>
 8001216:	4603      	mov	r3, r0
 8001218:	b21a      	sxth	r2, r3
 800121a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800121c:	801a      	strh	r2, [r3, #0]
				break;
 800121e:	e1cd      	b.n	80015bc <SVPWM_modulacja+0x5c4>
		case 2:	T1 = -w;
 8001220:	6a3b      	ldr	r3, [r7, #32]
 8001222:	425b      	negs	r3, r3
 8001224:	61fb      	str	r3, [r7, #28]
				T2 = -u;
 8001226:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001228:	425b      	negs	r3, r3
 800122a:	61bb      	str	r3, [r7, #24]
				T0 = 1 - T1 - T2;
 800122c:	69fb      	ldr	r3, [r7, #28]
 800122e:	f1c3 0201 	rsb	r2, r3, #1
 8001232:	69bb      	ldr	r3, [r7, #24]
 8001234:	1ad3      	subs	r3, r2, r3
 8001236:	617b      	str	r3, [r7, #20]
				*U_SVM = T1 + 0.5 * T0;
 8001238:	69f8      	ldr	r0, [r7, #28]
 800123a:	f7ff fa69 	bl	8000710 <__aeabi_i2d>
 800123e:	4604      	mov	r4, r0
 8001240:	460d      	mov	r5, r1
 8001242:	6978      	ldr	r0, [r7, #20]
 8001244:	f7ff fa64 	bl	8000710 <__aeabi_i2d>
 8001248:	f04f 0200 	mov.w	r2, #0
 800124c:	4b24      	ldr	r3, [pc, #144]	; (80012e0 <SVPWM_modulacja+0x2e8>)
 800124e:	f7fe ffe3 	bl	8000218 <__aeabi_dmul>
 8001252:	4602      	mov	r2, r0
 8001254:	460b      	mov	r3, r1
 8001256:	4620      	mov	r0, r4
 8001258:	4629      	mov	r1, r5
 800125a:	f7ff f90d 	bl	8000478 <__adddf3>
 800125e:	4602      	mov	r2, r0
 8001260:	460b      	mov	r3, r1
 8001262:	4610      	mov	r0, r2
 8001264:	4619      	mov	r1, r3
 8001266:	f7ff fabd 	bl	80007e4 <__aeabi_d2iz>
 800126a:	4603      	mov	r3, r0
 800126c:	b21a      	sxth	r2, r3
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	801a      	strh	r2, [r3, #0]
				*V_SVM = T1 + T2 + 0.5 * T0;
 8001272:	69fa      	ldr	r2, [r7, #28]
 8001274:	69bb      	ldr	r3, [r7, #24]
 8001276:	4413      	add	r3, r2
 8001278:	4618      	mov	r0, r3
 800127a:	f7ff fa49 	bl	8000710 <__aeabi_i2d>
 800127e:	4604      	mov	r4, r0
 8001280:	460d      	mov	r5, r1
 8001282:	6978      	ldr	r0, [r7, #20]
 8001284:	f7ff fa44 	bl	8000710 <__aeabi_i2d>
 8001288:	f04f 0200 	mov.w	r2, #0
 800128c:	4b14      	ldr	r3, [pc, #80]	; (80012e0 <SVPWM_modulacja+0x2e8>)
 800128e:	f7fe ffc3 	bl	8000218 <__aeabi_dmul>
 8001292:	4602      	mov	r2, r0
 8001294:	460b      	mov	r3, r1
 8001296:	4620      	mov	r0, r4
 8001298:	4629      	mov	r1, r5
 800129a:	f7ff f8ed 	bl	8000478 <__adddf3>
 800129e:	4602      	mov	r2, r0
 80012a0:	460b      	mov	r3, r1
 80012a2:	4610      	mov	r0, r2
 80012a4:	4619      	mov	r1, r3
 80012a6:	f7ff fa9d 	bl	80007e4 <__aeabi_d2iz>
 80012aa:	4603      	mov	r3, r0
 80012ac:	b21a      	sxth	r2, r3
 80012ae:	683b      	ldr	r3, [r7, #0]
 80012b0:	801a      	strh	r2, [r3, #0]
				*W_SVM = 0.5 * T0;
 80012b2:	6978      	ldr	r0, [r7, #20]
 80012b4:	f7ff fa2c 	bl	8000710 <__aeabi_i2d>
 80012b8:	f04f 0200 	mov.w	r2, #0
 80012bc:	4b08      	ldr	r3, [pc, #32]	; (80012e0 <SVPWM_modulacja+0x2e8>)
 80012be:	f7fe ffab 	bl	8000218 <__aeabi_dmul>
 80012c2:	4602      	mov	r2, r0
 80012c4:	460b      	mov	r3, r1
 80012c6:	4610      	mov	r0, r2
 80012c8:	4619      	mov	r1, r3
 80012ca:	f7ff fa8b 	bl	80007e4 <__aeabi_d2iz>
 80012ce:	4603      	mov	r3, r0
 80012d0:	b21a      	sxth	r2, r3
 80012d2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80012d4:	801a      	strh	r2, [r3, #0]
				break;
 80012d6:	e171      	b.n	80015bc <SVPWM_modulacja+0x5c4>
 80012d8:	7ae147ae 	.word	0x7ae147ae
 80012dc:	3ffbae14 	.word	0x3ffbae14
 80012e0:	3fe00000 	.word	0x3fe00000
		case 3:	T1 = v;
 80012e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012e6:	61fb      	str	r3, [r7, #28]
				T2 = w;
 80012e8:	6a3b      	ldr	r3, [r7, #32]
 80012ea:	61bb      	str	r3, [r7, #24]
				T0 = 1 - T1 - T2;
 80012ec:	69fb      	ldr	r3, [r7, #28]
 80012ee:	f1c3 0201 	rsb	r2, r3, #1
 80012f2:	69bb      	ldr	r3, [r7, #24]
 80012f4:	1ad3      	subs	r3, r2, r3
 80012f6:	617b      	str	r3, [r7, #20]
				*U_SVM = 0.5 * T0;
 80012f8:	6978      	ldr	r0, [r7, #20]
 80012fa:	f7ff fa09 	bl	8000710 <__aeabi_i2d>
 80012fe:	f04f 0200 	mov.w	r2, #0
 8001302:	4bb0      	ldr	r3, [pc, #704]	; (80015c4 <SVPWM_modulacja+0x5cc>)
 8001304:	f7fe ff88 	bl	8000218 <__aeabi_dmul>
 8001308:	4602      	mov	r2, r0
 800130a:	460b      	mov	r3, r1
 800130c:	4610      	mov	r0, r2
 800130e:	4619      	mov	r1, r3
 8001310:	f7ff fa68 	bl	80007e4 <__aeabi_d2iz>
 8001314:	4603      	mov	r3, r0
 8001316:	b21a      	sxth	r2, r3
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	801a      	strh	r2, [r3, #0]
				*V_SVM = T1 + T2 + 0.5 * T0;
 800131c:	69fa      	ldr	r2, [r7, #28]
 800131e:	69bb      	ldr	r3, [r7, #24]
 8001320:	4413      	add	r3, r2
 8001322:	4618      	mov	r0, r3
 8001324:	f7ff f9f4 	bl	8000710 <__aeabi_i2d>
 8001328:	4604      	mov	r4, r0
 800132a:	460d      	mov	r5, r1
 800132c:	6978      	ldr	r0, [r7, #20]
 800132e:	f7ff f9ef 	bl	8000710 <__aeabi_i2d>
 8001332:	f04f 0200 	mov.w	r2, #0
 8001336:	4ba3      	ldr	r3, [pc, #652]	; (80015c4 <SVPWM_modulacja+0x5cc>)
 8001338:	f7fe ff6e 	bl	8000218 <__aeabi_dmul>
 800133c:	4602      	mov	r2, r0
 800133e:	460b      	mov	r3, r1
 8001340:	4620      	mov	r0, r4
 8001342:	4629      	mov	r1, r5
 8001344:	f7ff f898 	bl	8000478 <__adddf3>
 8001348:	4602      	mov	r2, r0
 800134a:	460b      	mov	r3, r1
 800134c:	4610      	mov	r0, r2
 800134e:	4619      	mov	r1, r3
 8001350:	f7ff fa48 	bl	80007e4 <__aeabi_d2iz>
 8001354:	4603      	mov	r3, r0
 8001356:	b21a      	sxth	r2, r3
 8001358:	683b      	ldr	r3, [r7, #0]
 800135a:	801a      	strh	r2, [r3, #0]
				*W_SVM = T2 + 0.5 * T0;
 800135c:	69b8      	ldr	r0, [r7, #24]
 800135e:	f7ff f9d7 	bl	8000710 <__aeabi_i2d>
 8001362:	4604      	mov	r4, r0
 8001364:	460d      	mov	r5, r1
 8001366:	6978      	ldr	r0, [r7, #20]
 8001368:	f7ff f9d2 	bl	8000710 <__aeabi_i2d>
 800136c:	f04f 0200 	mov.w	r2, #0
 8001370:	4b94      	ldr	r3, [pc, #592]	; (80015c4 <SVPWM_modulacja+0x5cc>)
 8001372:	f7fe ff51 	bl	8000218 <__aeabi_dmul>
 8001376:	4602      	mov	r2, r0
 8001378:	460b      	mov	r3, r1
 800137a:	4620      	mov	r0, r4
 800137c:	4629      	mov	r1, r5
 800137e:	f7ff f87b 	bl	8000478 <__adddf3>
 8001382:	4602      	mov	r2, r0
 8001384:	460b      	mov	r3, r1
 8001386:	4610      	mov	r0, r2
 8001388:	4619      	mov	r1, r3
 800138a:	f7ff fa2b 	bl	80007e4 <__aeabi_d2iz>
 800138e:	4603      	mov	r3, r0
 8001390:	b21a      	sxth	r2, r3
 8001392:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001394:	801a      	strh	r2, [r3, #0]
				break;
 8001396:	e111      	b.n	80015bc <SVPWM_modulacja+0x5c4>
		case 4:	T1 = -u;
 8001398:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800139a:	425b      	negs	r3, r3
 800139c:	61fb      	str	r3, [r7, #28]
				T2 = -v;
 800139e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013a0:	425b      	negs	r3, r3
 80013a2:	61bb      	str	r3, [r7, #24]
				T0 = 1 - T1 - T2;
 80013a4:	69fb      	ldr	r3, [r7, #28]
 80013a6:	f1c3 0201 	rsb	r2, r3, #1
 80013aa:	69bb      	ldr	r3, [r7, #24]
 80013ac:	1ad3      	subs	r3, r2, r3
 80013ae:	617b      	str	r3, [r7, #20]
				*U_SVM = 0.5 * T0;
 80013b0:	6978      	ldr	r0, [r7, #20]
 80013b2:	f7ff f9ad 	bl	8000710 <__aeabi_i2d>
 80013b6:	f04f 0200 	mov.w	r2, #0
 80013ba:	4b82      	ldr	r3, [pc, #520]	; (80015c4 <SVPWM_modulacja+0x5cc>)
 80013bc:	f7fe ff2c 	bl	8000218 <__aeabi_dmul>
 80013c0:	4602      	mov	r2, r0
 80013c2:	460b      	mov	r3, r1
 80013c4:	4610      	mov	r0, r2
 80013c6:	4619      	mov	r1, r3
 80013c8:	f7ff fa0c 	bl	80007e4 <__aeabi_d2iz>
 80013cc:	4603      	mov	r3, r0
 80013ce:	b21a      	sxth	r2, r3
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	801a      	strh	r2, [r3, #0]
				*V_SVM = T1 + 0.5 * T0;
 80013d4:	69f8      	ldr	r0, [r7, #28]
 80013d6:	f7ff f99b 	bl	8000710 <__aeabi_i2d>
 80013da:	4604      	mov	r4, r0
 80013dc:	460d      	mov	r5, r1
 80013de:	6978      	ldr	r0, [r7, #20]
 80013e0:	f7ff f996 	bl	8000710 <__aeabi_i2d>
 80013e4:	f04f 0200 	mov.w	r2, #0
 80013e8:	4b76      	ldr	r3, [pc, #472]	; (80015c4 <SVPWM_modulacja+0x5cc>)
 80013ea:	f7fe ff15 	bl	8000218 <__aeabi_dmul>
 80013ee:	4602      	mov	r2, r0
 80013f0:	460b      	mov	r3, r1
 80013f2:	4620      	mov	r0, r4
 80013f4:	4629      	mov	r1, r5
 80013f6:	f7ff f83f 	bl	8000478 <__adddf3>
 80013fa:	4602      	mov	r2, r0
 80013fc:	460b      	mov	r3, r1
 80013fe:	4610      	mov	r0, r2
 8001400:	4619      	mov	r1, r3
 8001402:	f7ff f9ef 	bl	80007e4 <__aeabi_d2iz>
 8001406:	4603      	mov	r3, r0
 8001408:	b21a      	sxth	r2, r3
 800140a:	683b      	ldr	r3, [r7, #0]
 800140c:	801a      	strh	r2, [r3, #0]
				*W_SVM = T1 + T2 + 0.5 * T0;
 800140e:	69fa      	ldr	r2, [r7, #28]
 8001410:	69bb      	ldr	r3, [r7, #24]
 8001412:	4413      	add	r3, r2
 8001414:	4618      	mov	r0, r3
 8001416:	f7ff f97b 	bl	8000710 <__aeabi_i2d>
 800141a:	4604      	mov	r4, r0
 800141c:	460d      	mov	r5, r1
 800141e:	6978      	ldr	r0, [r7, #20]
 8001420:	f7ff f976 	bl	8000710 <__aeabi_i2d>
 8001424:	f04f 0200 	mov.w	r2, #0
 8001428:	4b66      	ldr	r3, [pc, #408]	; (80015c4 <SVPWM_modulacja+0x5cc>)
 800142a:	f7fe fef5 	bl	8000218 <__aeabi_dmul>
 800142e:	4602      	mov	r2, r0
 8001430:	460b      	mov	r3, r1
 8001432:	4620      	mov	r0, r4
 8001434:	4629      	mov	r1, r5
 8001436:	f7ff f81f 	bl	8000478 <__adddf3>
 800143a:	4602      	mov	r2, r0
 800143c:	460b      	mov	r3, r1
 800143e:	4610      	mov	r0, r2
 8001440:	4619      	mov	r1, r3
 8001442:	f7ff f9cf 	bl	80007e4 <__aeabi_d2iz>
 8001446:	4603      	mov	r3, r0
 8001448:	b21a      	sxth	r2, r3
 800144a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800144c:	801a      	strh	r2, [r3, #0]
				break;
 800144e:	e0b5      	b.n	80015bc <SVPWM_modulacja+0x5c4>
		case 5:	T1 = w;
 8001450:	6a3b      	ldr	r3, [r7, #32]
 8001452:	61fb      	str	r3, [r7, #28]
				T2 = u;
 8001454:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001456:	61bb      	str	r3, [r7, #24]
				T0 = 1 - T1 - T2;
 8001458:	69fb      	ldr	r3, [r7, #28]
 800145a:	f1c3 0201 	rsb	r2, r3, #1
 800145e:	69bb      	ldr	r3, [r7, #24]
 8001460:	1ad3      	subs	r3, r2, r3
 8001462:	617b      	str	r3, [r7, #20]
				*U_SVM = T2 + 0.5 * T0;
 8001464:	69b8      	ldr	r0, [r7, #24]
 8001466:	f7ff f953 	bl	8000710 <__aeabi_i2d>
 800146a:	4604      	mov	r4, r0
 800146c:	460d      	mov	r5, r1
 800146e:	6978      	ldr	r0, [r7, #20]
 8001470:	f7ff f94e 	bl	8000710 <__aeabi_i2d>
 8001474:	f04f 0200 	mov.w	r2, #0
 8001478:	4b52      	ldr	r3, [pc, #328]	; (80015c4 <SVPWM_modulacja+0x5cc>)
 800147a:	f7fe fecd 	bl	8000218 <__aeabi_dmul>
 800147e:	4602      	mov	r2, r0
 8001480:	460b      	mov	r3, r1
 8001482:	4620      	mov	r0, r4
 8001484:	4629      	mov	r1, r5
 8001486:	f7fe fff7 	bl	8000478 <__adddf3>
 800148a:	4602      	mov	r2, r0
 800148c:	460b      	mov	r3, r1
 800148e:	4610      	mov	r0, r2
 8001490:	4619      	mov	r1, r3
 8001492:	f7ff f9a7 	bl	80007e4 <__aeabi_d2iz>
 8001496:	4603      	mov	r3, r0
 8001498:	b21a      	sxth	r2, r3
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	801a      	strh	r2, [r3, #0]
				*V_SVM = 0.5 * T0;
 800149e:	6978      	ldr	r0, [r7, #20]
 80014a0:	f7ff f936 	bl	8000710 <__aeabi_i2d>
 80014a4:	f04f 0200 	mov.w	r2, #0
 80014a8:	4b46      	ldr	r3, [pc, #280]	; (80015c4 <SVPWM_modulacja+0x5cc>)
 80014aa:	f7fe feb5 	bl	8000218 <__aeabi_dmul>
 80014ae:	4602      	mov	r2, r0
 80014b0:	460b      	mov	r3, r1
 80014b2:	4610      	mov	r0, r2
 80014b4:	4619      	mov	r1, r3
 80014b6:	f7ff f995 	bl	80007e4 <__aeabi_d2iz>
 80014ba:	4603      	mov	r3, r0
 80014bc:	b21a      	sxth	r2, r3
 80014be:	683b      	ldr	r3, [r7, #0]
 80014c0:	801a      	strh	r2, [r3, #0]
				*W_SVM = T1 + T2 + 0.5 * T0;
 80014c2:	69fa      	ldr	r2, [r7, #28]
 80014c4:	69bb      	ldr	r3, [r7, #24]
 80014c6:	4413      	add	r3, r2
 80014c8:	4618      	mov	r0, r3
 80014ca:	f7ff f921 	bl	8000710 <__aeabi_i2d>
 80014ce:	4604      	mov	r4, r0
 80014d0:	460d      	mov	r5, r1
 80014d2:	6978      	ldr	r0, [r7, #20]
 80014d4:	f7ff f91c 	bl	8000710 <__aeabi_i2d>
 80014d8:	f04f 0200 	mov.w	r2, #0
 80014dc:	4b39      	ldr	r3, [pc, #228]	; (80015c4 <SVPWM_modulacja+0x5cc>)
 80014de:	f7fe fe9b 	bl	8000218 <__aeabi_dmul>
 80014e2:	4602      	mov	r2, r0
 80014e4:	460b      	mov	r3, r1
 80014e6:	4620      	mov	r0, r4
 80014e8:	4629      	mov	r1, r5
 80014ea:	f7fe ffc5 	bl	8000478 <__adddf3>
 80014ee:	4602      	mov	r2, r0
 80014f0:	460b      	mov	r3, r1
 80014f2:	4610      	mov	r0, r2
 80014f4:	4619      	mov	r1, r3
 80014f6:	f7ff f975 	bl	80007e4 <__aeabi_d2iz>
 80014fa:	4603      	mov	r3, r0
 80014fc:	b21a      	sxth	r2, r3
 80014fe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001500:	801a      	strh	r2, [r3, #0]
				break;
 8001502:	e05b      	b.n	80015bc <SVPWM_modulacja+0x5c4>
		case 6:	T1 = -v;
 8001504:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001506:	425b      	negs	r3, r3
 8001508:	61fb      	str	r3, [r7, #28]
				T2 = -w;
 800150a:	6a3b      	ldr	r3, [r7, #32]
 800150c:	425b      	negs	r3, r3
 800150e:	61bb      	str	r3, [r7, #24]
				T0 = 1 - T1 - T2;
 8001510:	69fb      	ldr	r3, [r7, #28]
 8001512:	f1c3 0201 	rsb	r2, r3, #1
 8001516:	69bb      	ldr	r3, [r7, #24]
 8001518:	1ad3      	subs	r3, r2, r3
 800151a:	617b      	str	r3, [r7, #20]
				*U_SVM = T1 + T2 + 0.5 * T0;
 800151c:	69fa      	ldr	r2, [r7, #28]
 800151e:	69bb      	ldr	r3, [r7, #24]
 8001520:	4413      	add	r3, r2
 8001522:	4618      	mov	r0, r3
 8001524:	f7ff f8f4 	bl	8000710 <__aeabi_i2d>
 8001528:	4604      	mov	r4, r0
 800152a:	460d      	mov	r5, r1
 800152c:	6978      	ldr	r0, [r7, #20]
 800152e:	f7ff f8ef 	bl	8000710 <__aeabi_i2d>
 8001532:	f04f 0200 	mov.w	r2, #0
 8001536:	4b23      	ldr	r3, [pc, #140]	; (80015c4 <SVPWM_modulacja+0x5cc>)
 8001538:	f7fe fe6e 	bl	8000218 <__aeabi_dmul>
 800153c:	4602      	mov	r2, r0
 800153e:	460b      	mov	r3, r1
 8001540:	4620      	mov	r0, r4
 8001542:	4629      	mov	r1, r5
 8001544:	f7fe ff98 	bl	8000478 <__adddf3>
 8001548:	4602      	mov	r2, r0
 800154a:	460b      	mov	r3, r1
 800154c:	4610      	mov	r0, r2
 800154e:	4619      	mov	r1, r3
 8001550:	f7ff f948 	bl	80007e4 <__aeabi_d2iz>
 8001554:	4603      	mov	r3, r0
 8001556:	b21a      	sxth	r2, r3
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	801a      	strh	r2, [r3, #0]
				*V_SVM = 0.5 * T0;
 800155c:	6978      	ldr	r0, [r7, #20]
 800155e:	f7ff f8d7 	bl	8000710 <__aeabi_i2d>
 8001562:	f04f 0200 	mov.w	r2, #0
 8001566:	4b17      	ldr	r3, [pc, #92]	; (80015c4 <SVPWM_modulacja+0x5cc>)
 8001568:	f7fe fe56 	bl	8000218 <__aeabi_dmul>
 800156c:	4602      	mov	r2, r0
 800156e:	460b      	mov	r3, r1
 8001570:	4610      	mov	r0, r2
 8001572:	4619      	mov	r1, r3
 8001574:	f7ff f936 	bl	80007e4 <__aeabi_d2iz>
 8001578:	4603      	mov	r3, r0
 800157a:	b21a      	sxth	r2, r3
 800157c:	683b      	ldr	r3, [r7, #0]
 800157e:	801a      	strh	r2, [r3, #0]
				*W_SVM = T1 + 0.5 * T0;
 8001580:	69f8      	ldr	r0, [r7, #28]
 8001582:	f7ff f8c5 	bl	8000710 <__aeabi_i2d>
 8001586:	4604      	mov	r4, r0
 8001588:	460d      	mov	r5, r1
 800158a:	6978      	ldr	r0, [r7, #20]
 800158c:	f7ff f8c0 	bl	8000710 <__aeabi_i2d>
 8001590:	f04f 0200 	mov.w	r2, #0
 8001594:	4b0b      	ldr	r3, [pc, #44]	; (80015c4 <SVPWM_modulacja+0x5cc>)
 8001596:	f7fe fe3f 	bl	8000218 <__aeabi_dmul>
 800159a:	4602      	mov	r2, r0
 800159c:	460b      	mov	r3, r1
 800159e:	4620      	mov	r0, r4
 80015a0:	4629      	mov	r1, r5
 80015a2:	f7fe ff69 	bl	8000478 <__adddf3>
 80015a6:	4602      	mov	r2, r0
 80015a8:	460b      	mov	r3, r1
 80015aa:	4610      	mov	r0, r2
 80015ac:	4619      	mov	r1, r3
 80015ae:	f7ff f919 	bl	80007e4 <__aeabi_d2iz>
 80015b2:	4603      	mov	r3, r0
 80015b4:	b21a      	sxth	r2, r3
 80015b6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80015b8:	801a      	strh	r2, [r3, #0]
				break;
 80015ba:	bf00      	nop
		}

}
 80015bc:	bf00      	nop
 80015be:	3730      	adds	r7, #48	; 0x30
 80015c0:	46bd      	mov	sp, r7
 80015c2:	bdb0      	pop	{r4, r5, r7, pc}
 80015c4:	3fe00000 	.word	0x3fe00000

080015c8 <PID_REG>:



void PID_REG(PID_reg *Reg, int32_t act_value,int32_t ref_value, int32_t *iq_out)

{
 80015c8:	b480      	push	{r7}
 80015ca:	b085      	sub	sp, #20
 80015cc:	af00      	add	r7, sp, #0
 80015ce:	60f8      	str	r0, [r7, #12]
 80015d0:	60b9      	str	r1, [r7, #8]
 80015d2:	607a      	str	r2, [r7, #4]
 80015d4:	603b      	str	r3, [r7, #0]
	static int32_t last_error, tmp_out;
	Reg->PI_error = (ref_value) - act_value; // dopisac antiwindup oraz limity wartosci aby nie doszlo do przeregulowan
 80015d6:	687a      	ldr	r2, [r7, #4]
 80015d8:	68bb      	ldr	r3, [r7, #8]
 80015da:	1ad2      	subs	r2, r2, r3
 80015dc:	68fb      	ldr	r3, [r7, #12]
 80015de:	601a      	str	r2, [r3, #0]
	Reg->PI_error_sum= Reg->PI_error_sum + Reg->PI_error;
 80015e0:	68fb      	ldr	r3, [r7, #12]
 80015e2:	685a      	ldr	r2, [r3, #4]
 80015e4:	68fb      	ldr	r3, [r7, #12]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	441a      	add	r2, r3
 80015ea:	68fb      	ldr	r3, [r7, #12]
 80015ec:	605a      	str	r2, [r3, #4]
	Reg->PI_diff = Reg->PI_error-last_error; //error-last_erroe
 80015ee:	68fb      	ldr	r3, [r7, #12]
 80015f0:	681a      	ldr	r2, [r3, #0]
 80015f2:	4b34      	ldr	r3, [pc, #208]	; (80016c4 <PID_REG+0xfc>)
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	1ad2      	subs	r2, r2, r3
 80015f8:	68fb      	ldr	r3, [r7, #12]
 80015fa:	609a      	str	r2, [r3, #8]

	if (Reg->PI_error_sum > 10000000) Reg->PI_error_sum  =  10000000;
 80015fc:	68fb      	ldr	r3, [r7, #12]
 80015fe:	685b      	ldr	r3, [r3, #4]
 8001600:	4a31      	ldr	r2, [pc, #196]	; (80016c8 <PID_REG+0x100>)
 8001602:	4293      	cmp	r3, r2
 8001604:	dd02      	ble.n	800160c <PID_REG+0x44>
 8001606:	68fb      	ldr	r3, [r7, #12]
 8001608:	4a2f      	ldr	r2, [pc, #188]	; (80016c8 <PID_REG+0x100>)
 800160a:	605a      	str	r2, [r3, #4]
	if (Reg->PI_error_sum <-10000000) Reg->PI_error_sum  = -10000000;
 800160c:	68fb      	ldr	r3, [r7, #12]
 800160e:	685b      	ldr	r3, [r3, #4]
 8001610:	4a2e      	ldr	r2, [pc, #184]	; (80016cc <PID_REG+0x104>)
 8001612:	4293      	cmp	r3, r2
 8001614:	da02      	bge.n	800161c <PID_REG+0x54>
 8001616:	68fb      	ldr	r3, [r7, #12]
 8001618:	4a2c      	ldr	r2, [pc, #176]	; (80016cc <PID_REG+0x104>)
 800161a:	605a      	str	r2, [r3, #4]

	Reg->PI_out = Reg->KP * Reg->PI_error + Reg->KI * Reg->PI_error_sum + Reg->KD*Reg->PI_diff;
 800161c:	68fb      	ldr	r3, [r7, #12]
 800161e:	ed93 7a04 	vldr	s14, [r3, #16]
 8001622:	68fb      	ldr	r3, [r7, #12]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	ee07 3a90 	vmov	s15, r3
 800162a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800162e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001632:	68fb      	ldr	r3, [r7, #12]
 8001634:	edd3 6a05 	vldr	s13, [r3, #20]
 8001638:	68fb      	ldr	r3, [r7, #12]
 800163a:	685b      	ldr	r3, [r3, #4]
 800163c:	ee07 3a90 	vmov	s15, r3
 8001640:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001644:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001648:	ee37 7a27 	vadd.f32	s14, s14, s15
 800164c:	68fb      	ldr	r3, [r7, #12]
 800164e:	edd3 6a06 	vldr	s13, [r3, #24]
 8001652:	68fb      	ldr	r3, [r7, #12]
 8001654:	689b      	ldr	r3, [r3, #8]
 8001656:	ee07 3a90 	vmov	s15, r3
 800165a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800165e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001662:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001666:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800166a:	ee17 2a90 	vmov	r2, s15
 800166e:	68fb      	ldr	r3, [r7, #12]
 8001670:	60da      	str	r2, [r3, #12]

	if(Reg->PI_out > 50000000)Reg->PI_out= 50000000;
 8001672:	68fb      	ldr	r3, [r7, #12]
 8001674:	68db      	ldr	r3, [r3, #12]
 8001676:	4a16      	ldr	r2, [pc, #88]	; (80016d0 <PID_REG+0x108>)
 8001678:	4293      	cmp	r3, r2
 800167a:	dd02      	ble.n	8001682 <PID_REG+0xba>
 800167c:	68fb      	ldr	r3, [r7, #12]
 800167e:	4a14      	ldr	r2, [pc, #80]	; (80016d0 <PID_REG+0x108>)
 8001680:	60da      	str	r2, [r3, #12]
	if(Reg->PI_out <-50000000)Reg->PI_out=-50000000;
 8001682:	68fb      	ldr	r3, [r7, #12]
 8001684:	68db      	ldr	r3, [r3, #12]
 8001686:	4a13      	ldr	r2, [pc, #76]	; (80016d4 <PID_REG+0x10c>)
 8001688:	4293      	cmp	r3, r2
 800168a:	da02      	bge.n	8001692 <PID_REG+0xca>
 800168c:	68fb      	ldr	r3, [r7, #12]
 800168e:	4a11      	ldr	r2, [pc, #68]	; (80016d4 <PID_REG+0x10c>)
 8001690:	60da      	str	r2, [r3, #12]


	last_error=Reg->PI_error;
 8001692:	68fb      	ldr	r3, [r7, #12]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	4a0b      	ldr	r2, [pc, #44]	; (80016c4 <PID_REG+0xfc>)
 8001698:	6013      	str	r3, [r2, #0]
	tmp_out=(Reg->PI_out/100000);
 800169a:	68fb      	ldr	r3, [r7, #12]
 800169c:	68db      	ldr	r3, [r3, #12]
 800169e:	4a0e      	ldr	r2, [pc, #56]	; (80016d8 <PID_REG+0x110>)
 80016a0:	fb82 1203 	smull	r1, r2, r2, r3
 80016a4:	1352      	asrs	r2, r2, #13
 80016a6:	17db      	asrs	r3, r3, #31
 80016a8:	1ad3      	subs	r3, r2, r3
 80016aa:	4a0c      	ldr	r2, [pc, #48]	; (80016dc <PID_REG+0x114>)
 80016ac:	6013      	str	r3, [r2, #0]
	*iq_out = tmp_out; // dla PMSM vectro control method
 80016ae:	4b0b      	ldr	r3, [pc, #44]	; (80016dc <PID_REG+0x114>)
 80016b0:	681a      	ldr	r2, [r3, #0]
 80016b2:	683b      	ldr	r3, [r7, #0]
 80016b4:	601a      	str	r2, [r3, #0]

}
 80016b6:	bf00      	nop
 80016b8:	3714      	adds	r7, #20
 80016ba:	46bd      	mov	sp, r7
 80016bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c0:	4770      	bx	lr
 80016c2:	bf00      	nop
 80016c4:	200000a8 	.word	0x200000a8
 80016c8:	00989680 	.word	0x00989680
 80016cc:	ff676980 	.word	0xff676980
 80016d0:	02faf080 	.word	0x02faf080
 80016d4:	fd050f80 	.word	0xfd050f80
 80016d8:	14f8b589 	.word	0x14f8b589
 80016dc:	200000ac 	.word	0x200000ac

080016e0 <lpf_init>:

//======FIRST ORDER LOW PASS FILTER======

void lpf_init(LowPassFilter *fil, int16_t input, float alp)
{
 80016e0:	b480      	push	{r7}
 80016e2:	b085      	sub	sp, #20
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	60f8      	str	r0, [r7, #12]
 80016e8:	460b      	mov	r3, r1
 80016ea:	ed87 0a01 	vstr	s0, [r7, #4]
 80016ee:	817b      	strh	r3, [r7, #10]

	fil->alp_gain = alp;
 80016f0:	edd7 7a01 	vldr	s15, [r7, #4]
 80016f4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80016f8:	ee17 3a90 	vmov	r3, s15
 80016fc:	b21a      	sxth	r2, r3
 80016fe:	68fb      	ldr	r3, [r7, #12]
 8001700:	805a      	strh	r2, [r3, #2]
}
 8001702:	bf00      	nop
 8001704:	3714      	adds	r7, #20
 8001706:	46bd      	mov	sp, r7
 8001708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800170c:	4770      	bx	lr

0800170e <lpf_update>:

int16_t lpf_update(LowPassFilter *fil, int32_t input)
{
 800170e:	b480      	push	{r7}
 8001710:	b083      	sub	sp, #12
 8001712:	af00      	add	r7, sp, #0
 8001714:	6078      	str	r0, [r7, #4]
 8001716:	6039      	str	r1, [r7, #0]

    fil->out = fil->out - ( fil->alp_gain * (fil->out - input));
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800171e:	b29a      	uxth	r2, r3
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001726:	b299      	uxth	r1, r3
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800172e:	4618      	mov	r0, r3
 8001730:	683b      	ldr	r3, [r7, #0]
 8001732:	1ac3      	subs	r3, r0, r3
 8001734:	b29b      	uxth	r3, r3
 8001736:	fb11 f303 	smulbb	r3, r1, r3
 800173a:	b29b      	uxth	r3, r3
 800173c:	1ad3      	subs	r3, r2, r3
 800173e:	b29b      	uxth	r3, r3
 8001740:	b21a      	sxth	r2, r3
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	801a      	strh	r2, [r3, #0]
    return fil->out ;
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	f9b3 3000 	ldrsh.w	r3, [r3]
}
 800174c:	4618      	mov	r0, r3
 800174e:	370c      	adds	r7, #12
 8001750:	46bd      	mov	sp, r7
 8001752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001756:	4770      	bx	lr

08001758 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001758:	b580      	push	{r7, lr}
 800175a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

	Iq_reg.KP = 10000;
 800175c:	4b62      	ldr	r3, [pc, #392]	; (80018e8 <main+0x190>)
 800175e:	f242 7210 	movw	r2, #10000	; 0x2710
 8001762:	819a      	strh	r2, [r3, #12]
	Iq_reg.KI = 200;
 8001764:	4b60      	ldr	r3, [pc, #384]	; (80018e8 <main+0x190>)
 8001766:	22c8      	movs	r2, #200	; 0xc8
 8001768:	81da      	strh	r2, [r3, #14]
	Id_reg.KP = 10000;
 800176a:	4b60      	ldr	r3, [pc, #384]	; (80018ec <main+0x194>)
 800176c:	f242 7210 	movw	r2, #10000	; 0x2710
 8001770:	819a      	strh	r2, [r3, #12]
	Id_reg.KI = 200;
 8001772:	4b5e      	ldr	r3, [pc, #376]	; (80018ec <main+0x194>)
 8001774:	22c8      	movs	r2, #200	; 0xc8
 8001776:	81da      	strh	r2, [r3, #14]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001778:	f001 fd7f 	bl	800327a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800177c:	f000 f8de 	bl	800193c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001780:	f000 fcf0 	bl	8002164 <MX_GPIO_Init>
  MX_ADC1_Init();
 8001784:	f000 f926 	bl	80019d4 <MX_ADC1_Init>
  MX_SPI3_Init();
 8001788:	f000 fad6 	bl	8001d38 <MX_SPI3_Init>
  MX_TIM1_Init();
 800178c:	f000 fb12 	bl	8001db4 <MX_TIM1_Init>
  MX_TIM6_Init();
 8001790:	f000 fc40 	bl	8002014 <MX_TIM6_Init>
  MX_TIM17_Init();
 8001794:	f000 fc74 	bl	8002080 <MX_TIM17_Init>
  MX_ADC2_Init();
 8001798:	f000 f9d2 	bl	8001b40 <MX_ADC2_Init>
  MX_DAC1_Init();
 800179c:	f000 fa4c 	bl	8001c38 <MX_DAC1_Init>
  MX_TIM2_Init();
 80017a0:	f000 fbe4 	bl	8001f6c <MX_TIM2_Init>
  MX_CORDIC_Init();
 80017a4:	f000 fa34 	bl	8001c10 <MX_CORDIC_Init>
  MX_USART1_UART_Init();
 80017a8:	f000 fc90 	bl	80020cc <MX_USART1_UART_Init>
  MX_FDCAN1_Init();
 80017ac:	f000 fa7e 	bl	8001cac <MX_FDCAN1_Init>
  /* USER CODE BEGIN 2 */



HAL_SPI_Init(&hspi3);
 80017b0:	484f      	ldr	r0, [pc, #316]	; (80018f0 <main+0x198>)
 80017b2:	f006 f801 	bl	80077b8 <HAL_SPI_Init>
//REG_ANGLECOM=get_even_flag(REG_ANGLECOM_ADR|0X4000);
//REG_ANGLEUNC=get_even_flag(REG_ANGLEUNC_ADR|0X4000);
//REG_DIAAGC  =get_even_flag(REG_DIAAGC_ADR |0X4000 );
HAL_TIM_PWM_Start_IT(&htim1,TIM_CHANNEL_1);
 80017b6:	2100      	movs	r1, #0
 80017b8:	484e      	ldr	r0, [pc, #312]	; (80018f4 <main+0x19c>)
 80017ba:	f006 ffcd 	bl	8008758 <HAL_TIM_PWM_Start_IT>
HAL_TIM_PWM_Start_IT(&htim1,TIM_CHANNEL_2);
 80017be:	2104      	movs	r1, #4
 80017c0:	484c      	ldr	r0, [pc, #304]	; (80018f4 <main+0x19c>)
 80017c2:	f006 ffc9 	bl	8008758 <HAL_TIM_PWM_Start_IT>
HAL_TIM_PWM_Start_IT(&htim1,TIM_CHANNEL_3);
 80017c6:	2108      	movs	r1, #8
 80017c8:	484a      	ldr	r0, [pc, #296]	; (80018f4 <main+0x19c>)
 80017ca:	f006 ffc5 	bl	8008758 <HAL_TIM_PWM_Start_IT>
HAL_TIM_PWM_Start_IT(&htim1,TIM_CHANNEL_4);
 80017ce:	210c      	movs	r1, #12
 80017d0:	4848      	ldr	r0, [pc, #288]	; (80018f4 <main+0x19c>)
 80017d2:	f006 ffc1 	bl	8008758 <HAL_TIM_PWM_Start_IT>
HAL_TIMEx_PWMN_Start_IT(&htim1, TIM_CHANNEL_1);
 80017d6:	2100      	movs	r1, #0
 80017d8:	4846      	ldr	r0, [pc, #280]	; (80018f4 <main+0x19c>)
 80017da:	f008 fa65 	bl	8009ca8 <HAL_TIMEx_PWMN_Start_IT>
HAL_TIMEx_PWMN_Start_IT(&htim1, TIM_CHANNEL_2);
 80017de:	2104      	movs	r1, #4
 80017e0:	4844      	ldr	r0, [pc, #272]	; (80018f4 <main+0x19c>)
 80017e2:	f008 fa61 	bl	8009ca8 <HAL_TIMEx_PWMN_Start_IT>
HAL_TIMEx_PWMN_Start_IT(&htim1, TIM_CHANNEL_3);
 80017e6:	2108      	movs	r1, #8
 80017e8:	4842      	ldr	r0, [pc, #264]	; (80018f4 <main+0x19c>)
 80017ea:	f008 fa5d 	bl	8009ca8 <HAL_TIMEx_PWMN_Start_IT>
HAL_TIM_Encoder_Start_IT(&htim2, TIM_CHANNEL_1);
 80017ee:	2100      	movs	r1, #0
 80017f0:	4841      	ldr	r0, [pc, #260]	; (80018f8 <main+0x1a0>)
 80017f2:	f007 f9a3 	bl	8008b3c <HAL_TIM_Encoder_Start_IT>
HAL_TIM_Encoder_Start_IT(&htim2, TIM_CHANNEL_2);
 80017f6:	2104      	movs	r1, #4
 80017f8:	483f      	ldr	r0, [pc, #252]	; (80018f8 <main+0x1a0>)
 80017fa:	f007 f99f 	bl	8008b3c <HAL_TIM_Encoder_Start_IT>

HAL_Delay(1);
 80017fe:	2001      	movs	r0, #1
 8001800:	f001 fdac 	bl	800335c <HAL_Delay>
SPI_bufor_tx[0]=REG_ANGLECOM_ADR;//odczyt_pozycji;
 8001804:	4b3d      	ldr	r3, [pc, #244]	; (80018fc <main+0x1a4>)
 8001806:	881b      	ldrh	r3, [r3, #0]
 8001808:	b29a      	uxth	r2, r3
 800180a:	4b3d      	ldr	r3, [pc, #244]	; (8001900 <main+0x1a8>)
 800180c:	801a      	strh	r2, [r3, #0]
               	  		 // SPI_bufor_tx[1]=odczyt_pozycji&0XFF;
HAL_GPIO_WritePin(GPIOD,GPIO_PIN_2,0);
 800180e:	2200      	movs	r2, #0
 8001810:	2104      	movs	r1, #4
 8001812:	483c      	ldr	r0, [pc, #240]	; (8001904 <main+0x1ac>)
 8001814:	f004 ffbc 	bl	8006790 <HAL_GPIO_WritePin>
HAL_SPI_Transmit(&hspi3,&SPI_bufor_tx,1,2);
 8001818:	2302      	movs	r3, #2
 800181a:	2201      	movs	r2, #1
 800181c:	4938      	ldr	r1, [pc, #224]	; (8001900 <main+0x1a8>)
 800181e:	4834      	ldr	r0, [pc, #208]	; (80018f0 <main+0x198>)
 8001820:	f006 f875 	bl	800790e <HAL_SPI_Transmit>
HAL_GPIO_WritePin(GPIOD,GPIO_PIN_2,1);
 8001824:	2201      	movs	r2, #1
 8001826:	2104      	movs	r1, #4
 8001828:	4836      	ldr	r0, [pc, #216]	; (8001904 <main+0x1ac>)
 800182a:	f004 ffb1 	bl	8006790 <HAL_GPIO_WritePin>
SPI_bufor_tx[0]=0X0000;
 800182e:	4b34      	ldr	r3, [pc, #208]	; (8001900 <main+0x1a8>)
 8001830:	2200      	movs	r2, #0
 8001832:	801a      	strh	r2, [r3, #0]
HAL_GPIO_WritePin(GPIOD,GPIO_PIN_2,0);
 8001834:	2200      	movs	r2, #0
 8001836:	2104      	movs	r1, #4
 8001838:	4832      	ldr	r0, [pc, #200]	; (8001904 <main+0x1ac>)
 800183a:	f004 ffa9 	bl	8006790 <HAL_GPIO_WritePin>
HAL_SPI_Receive(&hspi3,&SPI_bufor_rx,1,2);
 800183e:	2302      	movs	r3, #2
 8001840:	2201      	movs	r2, #1
 8001842:	4931      	ldr	r1, [pc, #196]	; (8001908 <main+0x1b0>)
 8001844:	482a      	ldr	r0, [pc, #168]	; (80018f0 <main+0x198>)
 8001846:	f006 f9d0 	bl	8007bea <HAL_SPI_Receive>
HAL_GPIO_WritePin(GPIOD,GPIO_PIN_2,1);
 800184a:	2201      	movs	r2, #1
 800184c:	2104      	movs	r1, #4
 800184e:	482d      	ldr	r0, [pc, #180]	; (8001904 <main+0x1ac>)
 8001850:	f004 ff9e 	bl	8006790 <HAL_GPIO_WritePin>
REG_ANGLECOM=pozycja_walu=SPI_bufor_rx[0]&0X3fff;
 8001854:	4b2c      	ldr	r3, [pc, #176]	; (8001908 <main+0x1b0>)
 8001856:	881b      	ldrh	r3, [r3, #0]
 8001858:	b29b      	uxth	r3, r3
 800185a:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800185e:	b29a      	uxth	r2, r3
 8001860:	4b2a      	ldr	r3, [pc, #168]	; (800190c <main+0x1b4>)
 8001862:	4611      	mov	r1, r2
 8001864:	8019      	strh	r1, [r3, #0]
 8001866:	4b2a      	ldr	r3, [pc, #168]	; (8001910 <main+0x1b8>)
 8001868:	801a      	strh	r2, [r3, #0]

SPI_bufor_rx[0]=0;
 800186a:	4b27      	ldr	r3, [pc, #156]	; (8001908 <main+0x1b0>)
 800186c:	2200      	movs	r2, #0
 800186e:	801a      	strh	r2, [r3, #0]

HAL_ADCEx_InjectedStart_IT(&hadc1);
 8001870:	4828      	ldr	r0, [pc, #160]	; (8001914 <main+0x1bc>)
 8001872:	f003 f957 	bl	8004b24 <HAL_ADCEx_InjectedStart_IT>
POSTION.KP=20000;
 8001876:	4b28      	ldr	r3, [pc, #160]	; (8001918 <main+0x1c0>)
 8001878:	4a28      	ldr	r2, [pc, #160]	; (800191c <main+0x1c4>)
 800187a:	611a      	str	r2, [r3, #16]
POSTION.KI=1U;
 800187c:	4b26      	ldr	r3, [pc, #152]	; (8001918 <main+0x1c0>)
 800187e:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8001882:	615a      	str	r2, [r3, #20]
POSTION.KD=220000;
 8001884:	4b24      	ldr	r3, [pc, #144]	; (8001918 <main+0x1c0>)
 8001886:	4a26      	ldr	r2, [pc, #152]	; (8001920 <main+0x1c8>)
 8001888:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN WHILE */
  while (1)
  {


	  if(czas_100ms==1)
 800188a:	4b26      	ldr	r3, [pc, #152]	; (8001924 <main+0x1cc>)
 800188c:	881b      	ldrh	r3, [r3, #0]
 800188e:	b29b      	uxth	r3, r3
 8001890:	2b01      	cmp	r3, #1
 8001892:	d119      	bne.n	80018c8 <main+0x170>
	  {
		  //bufor_tx[0]='$'; // synchro
		  bufor_tx[1]=rpm_speed>>8;
 8001894:	4b24      	ldr	r3, [pc, #144]	; (8001928 <main+0x1d0>)
 8001896:	881b      	ldrh	r3, [r3, #0]
 8001898:	b21b      	sxth	r3, r3
 800189a:	121b      	asrs	r3, r3, #8
 800189c:	b21b      	sxth	r3, r3
 800189e:	b2da      	uxtb	r2, r3
 80018a0:	4b22      	ldr	r3, [pc, #136]	; (800192c <main+0x1d4>)
 80018a2:	705a      	strb	r2, [r3, #1]
		  bufor_tx[2]=rpm_speed;
 80018a4:	4b20      	ldr	r3, [pc, #128]	; (8001928 <main+0x1d0>)
 80018a6:	881b      	ldrh	r3, [r3, #0]
 80018a8:	b21b      	sxth	r3, r3
 80018aa:	b2da      	uxtb	r2, r3
 80018ac:	4b1f      	ldr	r3, [pc, #124]	; (800192c <main+0x1d4>)
 80018ae:	709a      	strb	r2, [r3, #2]
		  bufor_tx[0]=0x55;
 80018b0:	4b1e      	ldr	r3, [pc, #120]	; (800192c <main+0x1d4>)
 80018b2:	2255      	movs	r2, #85	; 0x55
 80018b4:	701a      	strb	r2, [r3, #0]
		  HAL_UART_Transmit(&huart1,bufor_tx , 3, 1);
 80018b6:	2301      	movs	r3, #1
 80018b8:	2203      	movs	r2, #3
 80018ba:	491c      	ldr	r1, [pc, #112]	; (800192c <main+0x1d4>)
 80018bc:	481c      	ldr	r0, [pc, #112]	; (8001930 <main+0x1d8>)
 80018be:	f008 fcd8 	bl	800a272 <HAL_UART_Transmit>
		  czas_100ms=0;
 80018c2:	4b18      	ldr	r3, [pc, #96]	; (8001924 <main+0x1cc>)
 80018c4:	2200      	movs	r2, #0
 80018c6:	801a      	strh	r2, [r3, #0]

	  }

kierunek2=(TIM2->CR1)&0x10;
 80018c8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	b29b      	uxth	r3, r3
 80018d0:	f003 0310 	and.w	r3, r3, #16
 80018d4:	b29a      	uxth	r2, r3
 80018d6:	4b17      	ldr	r3, [pc, #92]	; (8001934 <main+0x1dc>)
 80018d8:	801a      	strh	r2, [r3, #0]
kierunek=kierunek2;
 80018da:	4b16      	ldr	r3, [pc, #88]	; (8001934 <main+0x1dc>)
 80018dc:	881b      	ldrh	r3, [r3, #0]
 80018de:	b29a      	uxth	r2, r3
 80018e0:	4b15      	ldr	r3, [pc, #84]	; (8001938 <main+0x1e0>)
 80018e2:	801a      	strh	r2, [r3, #0]
	  if(czas_100ms==1)
 80018e4:	e7d1      	b.n	800188a <main+0x132>
 80018e6:	bf00      	nop
 80018e8:	20000468 	.word	0x20000468
 80018ec:	20000490 	.word	0x20000490
 80018f0:	20000228 	.word	0x20000228
 80018f4:	2000028c 	.word	0x2000028c
 80018f8:	200002d8 	.word	0x200002d8
 80018fc:	20000004 	.word	0x20000004
 8001900:	20000008 	.word	0x20000008
 8001904:	48000c00 	.word	0x48000c00
 8001908:	20000450 	.word	0x20000450
 800190c:	20000048 	.word	0x20000048
 8001910:	2000044c 	.word	0x2000044c
 8001914:	200000b0 	.word	0x200000b0
 8001918:	200004c4 	.word	0x200004c4
 800191c:	469c4000 	.word	0x469c4000
 8001920:	4856d800 	.word	0x4856d800
 8001924:	20000466 	.word	0x20000466
 8001928:	20000080 	.word	0x20000080
 800192c:	20000014 	.word	0x20000014
 8001930:	200003bc 	.word	0x200003bc
 8001934:	2000045c 	.word	0x2000045c
 8001938:	2000045a 	.word	0x2000045a

0800193c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800193c:	b580      	push	{r7, lr}
 800193e:	b094      	sub	sp, #80	; 0x50
 8001940:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001942:	f107 0318 	add.w	r3, r7, #24
 8001946:	2238      	movs	r2, #56	; 0x38
 8001948:	2100      	movs	r1, #0
 800194a:	4618      	mov	r0, r3
 800194c:	f009 feaa 	bl	800b6a4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001950:	1d3b      	adds	r3, r7, #4
 8001952:	2200      	movs	r2, #0
 8001954:	601a      	str	r2, [r3, #0]
 8001956:	605a      	str	r2, [r3, #4]
 8001958:	609a      	str	r2, [r3, #8]
 800195a:	60da      	str	r2, [r3, #12]
 800195c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 800195e:	2000      	movs	r0, #0
 8001960:	f004 ff52 	bl	8006808 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001964:	2302      	movs	r3, #2
 8001966:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001968:	f44f 7380 	mov.w	r3, #256	; 0x100
 800196c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800196e:	2340      	movs	r3, #64	; 0x40
 8001970:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001972:	2302      	movs	r3, #2
 8001974:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001976:	2302      	movs	r3, #2
 8001978:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 800197a:	2304      	movs	r3, #4
 800197c:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 800197e:	2355      	movs	r3, #85	; 0x55
 8001980:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001982:	2302      	movs	r3, #2
 8001984:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001986:	2302      	movs	r3, #2
 8001988:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800198a:	2302      	movs	r3, #2
 800198c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800198e:	f107 0318 	add.w	r3, r7, #24
 8001992:	4618      	mov	r0, r3
 8001994:	f004 ffec 	bl	8006970 <HAL_RCC_OscConfig>
 8001998:	4603      	mov	r3, r0
 800199a:	2b00      	cmp	r3, #0
 800199c:	d001      	beq.n	80019a2 <SystemClock_Config+0x66>
  {
    Error_Handler();
 800199e:	f000 fe2b 	bl	80025f8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80019a2:	230f      	movs	r3, #15
 80019a4:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80019a6:	2303      	movs	r3, #3
 80019a8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80019aa:	2300      	movs	r3, #0
 80019ac:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80019ae:	2300      	movs	r3, #0
 80019b0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80019b2:	2300      	movs	r3, #0
 80019b4:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80019b6:	1d3b      	adds	r3, r7, #4
 80019b8:	2104      	movs	r1, #4
 80019ba:	4618      	mov	r0, r3
 80019bc:	f005 faf0 	bl	8006fa0 <HAL_RCC_ClockConfig>
 80019c0:	4603      	mov	r3, r0
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d001      	beq.n	80019ca <SystemClock_Config+0x8e>
  {
    Error_Handler();
 80019c6:	f000 fe17 	bl	80025f8 <Error_Handler>
  }
}
 80019ca:	bf00      	nop
 80019cc:	3750      	adds	r7, #80	; 0x50
 80019ce:	46bd      	mov	sp, r7
 80019d0:	bd80      	pop	{r7, pc}
	...

080019d4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80019d4:	b580      	push	{r7, lr}
 80019d6:	b092      	sub	sp, #72	; 0x48
 80019d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80019da:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80019de:	2200      	movs	r2, #0
 80019e0:	601a      	str	r2, [r3, #0]
 80019e2:	605a      	str	r2, [r3, #4]
 80019e4:	609a      	str	r2, [r3, #8]
  ADC_InjectionConfTypeDef sConfigInjected = {0};
 80019e6:	463b      	mov	r3, r7
 80019e8:	223c      	movs	r2, #60	; 0x3c
 80019ea:	2100      	movs	r1, #0
 80019ec:	4618      	mov	r0, r3
 80019ee:	f009 fe59 	bl	800b6a4 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80019f2:	4b4e      	ldr	r3, [pc, #312]	; (8001b2c <MX_ADC1_Init+0x158>)
 80019f4:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80019f8:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV4;
 80019fa:	4b4c      	ldr	r3, [pc, #304]	; (8001b2c <MX_ADC1_Init+0x158>)
 80019fc:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8001a00:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001a02:	4b4a      	ldr	r3, [pc, #296]	; (8001b2c <MX_ADC1_Init+0x158>)
 8001a04:	2200      	movs	r2, #0
 8001a06:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001a08:	4b48      	ldr	r3, [pc, #288]	; (8001b2c <MX_ADC1_Init+0x158>)
 8001a0a:	2200      	movs	r2, #0
 8001a0c:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 8001a0e:	4b47      	ldr	r3, [pc, #284]	; (8001b2c <MX_ADC1_Init+0x158>)
 8001a10:	2200      	movs	r2, #0
 8001a12:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8001a14:	4b45      	ldr	r3, [pc, #276]	; (8001b2c <MX_ADC1_Init+0x158>)
 8001a16:	2201      	movs	r2, #1
 8001a18:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001a1a:	4b44      	ldr	r3, [pc, #272]	; (8001b2c <MX_ADC1_Init+0x158>)
 8001a1c:	2204      	movs	r2, #4
 8001a1e:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001a20:	4b42      	ldr	r3, [pc, #264]	; (8001b2c <MX_ADC1_Init+0x158>)
 8001a22:	2200      	movs	r2, #0
 8001a24:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001a26:	4b41      	ldr	r3, [pc, #260]	; (8001b2c <MX_ADC1_Init+0x158>)
 8001a28:	2200      	movs	r2, #0
 8001a2a:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 8001a2c:	4b3f      	ldr	r3, [pc, #252]	; (8001b2c <MX_ADC1_Init+0x158>)
 8001a2e:	2201      	movs	r2, #1
 8001a30:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001a32:	4b3e      	ldr	r3, [pc, #248]	; (8001b2c <MX_ADC1_Init+0x158>)
 8001a34:	2200      	movs	r2, #0
 8001a36:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001a3a:	4b3c      	ldr	r3, [pc, #240]	; (8001b2c <MX_ADC1_Init+0x158>)
 8001a3c:	2200      	movs	r2, #0
 8001a3e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001a42:	4b3a      	ldr	r3, [pc, #232]	; (8001b2c <MX_ADC1_Init+0x158>)
 8001a44:	2200      	movs	r2, #0
 8001a46:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8001a48:	4b38      	ldr	r3, [pc, #224]	; (8001b2c <MX_ADC1_Init+0x158>)
 8001a4a:	2200      	movs	r2, #0
 8001a4c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001a50:	4836      	ldr	r0, [pc, #216]	; (8001b2c <MX_ADC1_Init+0x158>)
 8001a52:	f001 fed5 	bl	8003800 <HAL_ADC_Init>
 8001a56:	4603      	mov	r3, r0
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d001      	beq.n	8001a60 <MX_ADC1_Init+0x8c>
  {
    Error_Handler();
 8001a5c:	f000 fdcc 	bl	80025f8 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8001a60:	2300      	movs	r3, #0
 8001a62:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8001a64:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001a68:	4619      	mov	r1, r3
 8001a6a:	4830      	ldr	r0, [pc, #192]	; (8001b2c <MX_ADC1_Init+0x158>)
 8001a6c:	f003 fe80 	bl	8005770 <HAL_ADCEx_MultiModeConfigChannel>
 8001a70:	4603      	mov	r3, r0
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d001      	beq.n	8001a7a <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 8001a76:	f000 fdbf 	bl	80025f8 <Error_Handler>
  }

  /** Configure Injected Channel
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_1;
 8001a7a:	4b2d      	ldr	r3, [pc, #180]	; (8001b30 <MX_ADC1_Init+0x15c>)
 8001a7c:	603b      	str	r3, [r7, #0]
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_1;
 8001a7e:	2309      	movs	r3, #9
 8001a80:	607b      	str	r3, [r7, #4]
  sConfigInjected.InjectedSamplingTime = ADC_SAMPLETIME_12CYCLES_5;
 8001a82:	2302      	movs	r3, #2
 8001a84:	60bb      	str	r3, [r7, #8]
  sConfigInjected.InjectedSingleDiff = ADC_SINGLE_ENDED;
 8001a86:	237f      	movs	r3, #127	; 0x7f
 8001a88:	60fb      	str	r3, [r7, #12]
  sConfigInjected.InjectedOffsetNumber = ADC_OFFSET_NONE;
 8001a8a:	2304      	movs	r3, #4
 8001a8c:	613b      	str	r3, [r7, #16]
  sConfigInjected.InjectedOffset = 0;
 8001a8e:	2300      	movs	r3, #0
 8001a90:	617b      	str	r3, [r7, #20]
  sConfigInjected.InjectedNbrOfConversion = 4;
 8001a92:	2304      	movs	r3, #4
 8001a94:	623b      	str	r3, [r7, #32]
  sConfigInjected.InjectedDiscontinuousConvMode = DISABLE;
 8001a96:	2300      	movs	r3, #0
 8001a98:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  sConfigInjected.AutoInjectedConv = DISABLE;
 8001a9c:	2300      	movs	r3, #0
 8001a9e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  sConfigInjected.QueueInjectedContext = DISABLE;
 8001aa2:	2300      	movs	r3, #0
 8001aa4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  sConfigInjected.ExternalTrigInjecConv = ADC_EXTERNALTRIGINJEC_T1_CC4;
 8001aa8:	2384      	movs	r3, #132	; 0x84
 8001aaa:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigInjected.ExternalTrigInjecConvEdge = ADC_EXTERNALTRIGINJECCONV_EDGE_RISING;
 8001aac:	2380      	movs	r3, #128	; 0x80
 8001aae:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigInjected.InjecOversamplingMode = DISABLE;
 8001ab0:	2300      	movs	r3, #0
 8001ab2:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 8001ab6:	463b      	mov	r3, r7
 8001ab8:	4619      	mov	r1, r3
 8001aba:	481c      	ldr	r0, [pc, #112]	; (8001b2c <MX_ADC1_Init+0x158>)
 8001abc:	f003 f978 	bl	8004db0 <HAL_ADCEx_InjectedConfigChannel>
 8001ac0:	4603      	mov	r3, r0
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d001      	beq.n	8001aca <MX_ADC1_Init+0xf6>
  {
    Error_Handler();
 8001ac6:	f000 fd97 	bl	80025f8 <Error_Handler>
  }

  /** Configure Injected Channel
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_2;
 8001aca:	4b1a      	ldr	r3, [pc, #104]	; (8001b34 <MX_ADC1_Init+0x160>)
 8001acc:	603b      	str	r3, [r7, #0]
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_2;
 8001ace:	f240 130f 	movw	r3, #271	; 0x10f
 8001ad2:	607b      	str	r3, [r7, #4]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 8001ad4:	463b      	mov	r3, r7
 8001ad6:	4619      	mov	r1, r3
 8001ad8:	4814      	ldr	r0, [pc, #80]	; (8001b2c <MX_ADC1_Init+0x158>)
 8001ada:	f003 f969 	bl	8004db0 <HAL_ADCEx_InjectedConfigChannel>
 8001ade:	4603      	mov	r3, r0
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d001      	beq.n	8001ae8 <MX_ADC1_Init+0x114>
  {
    Error_Handler();
 8001ae4:	f000 fd88 	bl	80025f8 <Error_Handler>
  }

  /** Configure Injected Channel
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_6;
 8001ae8:	4b13      	ldr	r3, [pc, #76]	; (8001b38 <MX_ADC1_Init+0x164>)
 8001aea:	603b      	str	r3, [r7, #0]
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_3;
 8001aec:	f240 2315 	movw	r3, #533	; 0x215
 8001af0:	607b      	str	r3, [r7, #4]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 8001af2:	463b      	mov	r3, r7
 8001af4:	4619      	mov	r1, r3
 8001af6:	480d      	ldr	r0, [pc, #52]	; (8001b2c <MX_ADC1_Init+0x158>)
 8001af8:	f003 f95a 	bl	8004db0 <HAL_ADCEx_InjectedConfigChannel>
 8001afc:	4603      	mov	r3, r0
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d001      	beq.n	8001b06 <MX_ADC1_Init+0x132>
  {
    Error_Handler();
 8001b02:	f000 fd79 	bl	80025f8 <Error_Handler>
  }

  /** Configure Injected Channel
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_7;
 8001b06:	4b0d      	ldr	r3, [pc, #52]	; (8001b3c <MX_ADC1_Init+0x168>)
 8001b08:	603b      	str	r3, [r7, #0]
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_4;
 8001b0a:	f240 331b 	movw	r3, #795	; 0x31b
 8001b0e:	607b      	str	r3, [r7, #4]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 8001b10:	463b      	mov	r3, r7
 8001b12:	4619      	mov	r1, r3
 8001b14:	4805      	ldr	r0, [pc, #20]	; (8001b2c <MX_ADC1_Init+0x158>)
 8001b16:	f003 f94b 	bl	8004db0 <HAL_ADCEx_InjectedConfigChannel>
 8001b1a:	4603      	mov	r3, r0
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d001      	beq.n	8001b24 <MX_ADC1_Init+0x150>
  {
    Error_Handler();
 8001b20:	f000 fd6a 	bl	80025f8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001b24:	bf00      	nop
 8001b26:	3748      	adds	r7, #72	; 0x48
 8001b28:	46bd      	mov	sp, r7
 8001b2a:	bd80      	pop	{r7, pc}
 8001b2c:	200000b0 	.word	0x200000b0
 8001b30:	04300002 	.word	0x04300002
 8001b34:	08600004 	.word	0x08600004
 8001b38:	19200040 	.word	0x19200040
 8001b3c:	1d500080 	.word	0x1d500080

08001b40 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8001b40:	b580      	push	{r7, lr}
 8001b42:	b088      	sub	sp, #32
 8001b44:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001b46:	463b      	mov	r3, r7
 8001b48:	2220      	movs	r2, #32
 8001b4a:	2100      	movs	r1, #0
 8001b4c:	4618      	mov	r0, r3
 8001b4e:	f009 fda9 	bl	800b6a4 <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8001b52:	4b2c      	ldr	r3, [pc, #176]	; (8001c04 <MX_ADC2_Init+0xc4>)
 8001b54:	4a2c      	ldr	r2, [pc, #176]	; (8001c08 <MX_ADC2_Init+0xc8>)
 8001b56:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV4;
 8001b58:	4b2a      	ldr	r3, [pc, #168]	; (8001c04 <MX_ADC2_Init+0xc4>)
 8001b5a:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8001b5e:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8001b60:	4b28      	ldr	r3, [pc, #160]	; (8001c04 <MX_ADC2_Init+0xc4>)
 8001b62:	2200      	movs	r2, #0
 8001b64:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001b66:	4b27      	ldr	r3, [pc, #156]	; (8001c04 <MX_ADC2_Init+0xc4>)
 8001b68:	2200      	movs	r2, #0
 8001b6a:	60da      	str	r2, [r3, #12]
  hadc2.Init.GainCompensation = 0;
 8001b6c:	4b25      	ldr	r3, [pc, #148]	; (8001c04 <MX_ADC2_Init+0xc4>)
 8001b6e:	2200      	movs	r2, #0
 8001b70:	611a      	str	r2, [r3, #16]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001b72:	4b24      	ldr	r3, [pc, #144]	; (8001c04 <MX_ADC2_Init+0xc4>)
 8001b74:	2200      	movs	r2, #0
 8001b76:	615a      	str	r2, [r3, #20]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001b78:	4b22      	ldr	r3, [pc, #136]	; (8001c04 <MX_ADC2_Init+0xc4>)
 8001b7a:	2204      	movs	r2, #4
 8001b7c:	619a      	str	r2, [r3, #24]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8001b7e:	4b21      	ldr	r3, [pc, #132]	; (8001c04 <MX_ADC2_Init+0xc4>)
 8001b80:	2200      	movs	r2, #0
 8001b82:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8001b84:	4b1f      	ldr	r3, [pc, #124]	; (8001c04 <MX_ADC2_Init+0xc4>)
 8001b86:	2200      	movs	r2, #0
 8001b88:	775a      	strb	r2, [r3, #29]
  hadc2.Init.NbrOfConversion = 1;
 8001b8a:	4b1e      	ldr	r3, [pc, #120]	; (8001c04 <MX_ADC2_Init+0xc4>)
 8001b8c:	2201      	movs	r2, #1
 8001b8e:	621a      	str	r2, [r3, #32]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8001b90:	4b1c      	ldr	r3, [pc, #112]	; (8001c04 <MX_ADC2_Init+0xc4>)
 8001b92:	2200      	movs	r2, #0
 8001b94:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc2.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T6_TRGO;
 8001b98:	4b1a      	ldr	r3, [pc, #104]	; (8001c04 <MX_ADC2_Init+0xc4>)
 8001b9a:	f44f 62b4 	mov.w	r2, #1440	; 0x5a0
 8001b9e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8001ba0:	4b18      	ldr	r3, [pc, #96]	; (8001c04 <MX_ADC2_Init+0xc4>)
 8001ba2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001ba6:	631a      	str	r2, [r3, #48]	; 0x30
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8001ba8:	4b16      	ldr	r3, [pc, #88]	; (8001c04 <MX_ADC2_Init+0xc4>)
 8001baa:	2200      	movs	r2, #0
 8001bac:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001bb0:	4b14      	ldr	r3, [pc, #80]	; (8001c04 <MX_ADC2_Init+0xc4>)
 8001bb2:	2200      	movs	r2, #0
 8001bb4:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc2.Init.OversamplingMode = DISABLE;
 8001bb6:	4b13      	ldr	r3, [pc, #76]	; (8001c04 <MX_ADC2_Init+0xc4>)
 8001bb8:	2200      	movs	r2, #0
 8001bba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8001bbe:	4811      	ldr	r0, [pc, #68]	; (8001c04 <MX_ADC2_Init+0xc4>)
 8001bc0:	f001 fe1e 	bl	8003800 <HAL_ADC_Init>
 8001bc4:	4603      	mov	r3, r0
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d001      	beq.n	8001bce <MX_ADC2_Init+0x8e>
  {
    Error_Handler();
 8001bca:	f000 fd15 	bl	80025f8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8001bce:	4b0f      	ldr	r3, [pc, #60]	; (8001c0c <MX_ADC2_Init+0xcc>)
 8001bd0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001bd2:	2306      	movs	r3, #6
 8001bd4:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8001bd6:	2300      	movs	r3, #0
 8001bd8:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001bda:	237f      	movs	r3, #127	; 0x7f
 8001bdc:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001bde:	2304      	movs	r3, #4
 8001be0:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8001be2:	2300      	movs	r3, #0
 8001be4:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001be6:	463b      	mov	r3, r7
 8001be8:	4619      	mov	r1, r3
 8001bea:	4806      	ldr	r0, [pc, #24]	; (8001c04 <MX_ADC2_Init+0xc4>)
 8001bec:	f002 f9ca 	bl	8003f84 <HAL_ADC_ConfigChannel>
 8001bf0:	4603      	mov	r3, r0
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d001      	beq.n	8001bfa <MX_ADC2_Init+0xba>
  {
    Error_Handler();
 8001bf6:	f000 fcff 	bl	80025f8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8001bfa:	bf00      	nop
 8001bfc:	3720      	adds	r7, #32
 8001bfe:	46bd      	mov	sp, r7
 8001c00:	bd80      	pop	{r7, pc}
 8001c02:	bf00      	nop
 8001c04:	2000011c 	.word	0x2000011c
 8001c08:	50000100 	.word	0x50000100
 8001c0c:	21800100 	.word	0x21800100

08001c10 <MX_CORDIC_Init>:
  * @brief CORDIC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CORDIC_Init(void)
{
 8001c10:	b580      	push	{r7, lr}
 8001c12:	af00      	add	r7, sp, #0
  /* USER CODE END CORDIC_Init 0 */

  /* USER CODE BEGIN CORDIC_Init 1 */

  /* USER CODE END CORDIC_Init 1 */
  hcordic.Instance = CORDIC;
 8001c14:	4b06      	ldr	r3, [pc, #24]	; (8001c30 <MX_CORDIC_Init+0x20>)
 8001c16:	4a07      	ldr	r2, [pc, #28]	; (8001c34 <MX_CORDIC_Init+0x24>)
 8001c18:	601a      	str	r2, [r3, #0]
  if (HAL_CORDIC_Init(&hcordic) != HAL_OK)
 8001c1a:	4805      	ldr	r0, [pc, #20]	; (8001c30 <MX_CORDIC_Init+0x20>)
 8001c1c:	f003 fe4c 	bl	80058b8 <HAL_CORDIC_Init>
 8001c20:	4603      	mov	r3, r0
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d001      	beq.n	8001c2a <MX_CORDIC_Init+0x1a>
  {
    Error_Handler();
 8001c26:	f000 fce7 	bl	80025f8 <Error_Handler>
  }
  /* USER CODE BEGIN CORDIC_Init 2 */

  /* USER CODE END CORDIC_Init 2 */

}
 8001c2a:	bf00      	nop
 8001c2c:	bd80      	pop	{r7, pc}
 8001c2e:	bf00      	nop
 8001c30:	20000188 	.word	0x20000188
 8001c34:	40020c00 	.word	0x40020c00

08001c38 <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 8001c38:	b580      	push	{r7, lr}
 8001c3a:	b08c      	sub	sp, #48	; 0x30
 8001c3c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8001c3e:	463b      	mov	r3, r7
 8001c40:	2230      	movs	r2, #48	; 0x30
 8001c42:	2100      	movs	r1, #0
 8001c44:	4618      	mov	r0, r3
 8001c46:	f009 fd2d 	bl	800b6a4 <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 8001c4a:	4b16      	ldr	r3, [pc, #88]	; (8001ca4 <MX_DAC1_Init+0x6c>)
 8001c4c:	4a16      	ldr	r2, [pc, #88]	; (8001ca8 <MX_DAC1_Init+0x70>)
 8001c4e:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8001c50:	4814      	ldr	r0, [pc, #80]	; (8001ca4 <MX_DAC1_Init+0x6c>)
 8001c52:	f003 ff72 	bl	8005b3a <HAL_DAC_Init>
 8001c56:	4603      	mov	r3, r0
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d001      	beq.n	8001c60 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 8001c5c:	f000 fccc 	bl	80025f8 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC;
 8001c60:	2302      	movs	r3, #2
 8001c62:	603b      	str	r3, [r7, #0]
  sConfig.DAC_DMADoubleDataMode = DISABLE;
 8001c64:	2300      	movs	r3, #0
 8001c66:	713b      	strb	r3, [r7, #4]
  sConfig.DAC_SignedFormat = DISABLE;
 8001c68:	2300      	movs	r3, #0
 8001c6a:	717b      	strb	r3, [r7, #5]
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8001c6c:	2300      	movs	r3, #0
 8001c6e:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_Trigger = DAC_TRIGGER_SOFTWARE;
 8001c70:	2302      	movs	r3, #2
 8001c72:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 8001c74:	2300      	movs	r3, #0
 8001c76:	613b      	str	r3, [r7, #16]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8001c78:	2300      	movs	r3, #0
 8001c7a:	617b      	str	r3, [r7, #20]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_EXTERNAL;
 8001c7c:	2301      	movs	r3, #1
 8001c7e:	61bb      	str	r3, [r7, #24]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8001c80:	2300      	movs	r3, #0
 8001c82:	61fb      	str	r3, [r7, #28]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8001c84:	463b      	mov	r3, r7
 8001c86:	2200      	movs	r2, #0
 8001c88:	4619      	mov	r1, r3
 8001c8a:	4806      	ldr	r0, [pc, #24]	; (8001ca4 <MX_DAC1_Init+0x6c>)
 8001c8c:	f003 ffdc 	bl	8005c48 <HAL_DAC_ConfigChannel>
 8001c90:	4603      	mov	r3, r0
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d001      	beq.n	8001c9a <MX_DAC1_Init+0x62>
  {
    Error_Handler();
 8001c96:	f000 fcaf 	bl	80025f8 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 8001c9a:	bf00      	nop
 8001c9c:	3730      	adds	r7, #48	; 0x30
 8001c9e:	46bd      	mov	sp, r7
 8001ca0:	bd80      	pop	{r7, pc}
 8001ca2:	bf00      	nop
 8001ca4:	200001b0 	.word	0x200001b0
 8001ca8:	50000800 	.word	0x50000800

08001cac <MX_FDCAN1_Init>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 8001cac:	b580      	push	{r7, lr}
 8001cae:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 8001cb0:	4b1f      	ldr	r3, [pc, #124]	; (8001d30 <MX_FDCAN1_Init+0x84>)
 8001cb2:	4a20      	ldr	r2, [pc, #128]	; (8001d34 <MX_FDCAN1_Init+0x88>)
 8001cb4:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 8001cb6:	4b1e      	ldr	r3, [pc, #120]	; (8001d30 <MX_FDCAN1_Init+0x84>)
 8001cb8:	2200      	movs	r2, #0
 8001cba:	605a      	str	r2, [r3, #4]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8001cbc:	4b1c      	ldr	r3, [pc, #112]	; (8001d30 <MX_FDCAN1_Init+0x84>)
 8001cbe:	2200      	movs	r2, #0
 8001cc0:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 8001cc2:	4b1b      	ldr	r3, [pc, #108]	; (8001d30 <MX_FDCAN1_Init+0x84>)
 8001cc4:	2200      	movs	r2, #0
 8001cc6:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 8001cc8:	4b19      	ldr	r3, [pc, #100]	; (8001d30 <MX_FDCAN1_Init+0x84>)
 8001cca:	2200      	movs	r2, #0
 8001ccc:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 8001cce:	4b18      	ldr	r3, [pc, #96]	; (8001d30 <MX_FDCAN1_Init+0x84>)
 8001cd0:	2200      	movs	r2, #0
 8001cd2:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 8001cd4:	4b16      	ldr	r3, [pc, #88]	; (8001d30 <MX_FDCAN1_Init+0x84>)
 8001cd6:	2200      	movs	r2, #0
 8001cd8:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 16;
 8001cda:	4b15      	ldr	r3, [pc, #84]	; (8001d30 <MX_FDCAN1_Init+0x84>)
 8001cdc:	2210      	movs	r2, #16
 8001cde:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 8001ce0:	4b13      	ldr	r3, [pc, #76]	; (8001d30 <MX_FDCAN1_Init+0x84>)
 8001ce2:	2201      	movs	r2, #1
 8001ce4:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 2;
 8001ce6:	4b12      	ldr	r3, [pc, #72]	; (8001d30 <MX_FDCAN1_Init+0x84>)
 8001ce8:	2202      	movs	r2, #2
 8001cea:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 2;
 8001cec:	4b10      	ldr	r3, [pc, #64]	; (8001d30 <MX_FDCAN1_Init+0x84>)
 8001cee:	2202      	movs	r2, #2
 8001cf0:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 8001cf2:	4b0f      	ldr	r3, [pc, #60]	; (8001d30 <MX_FDCAN1_Init+0x84>)
 8001cf4:	2201      	movs	r2, #1
 8001cf6:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 8001cf8:	4b0d      	ldr	r3, [pc, #52]	; (8001d30 <MX_FDCAN1_Init+0x84>)
 8001cfa:	2201      	movs	r2, #1
 8001cfc:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan1.Init.DataTimeSeg1 = 1;
 8001cfe:	4b0c      	ldr	r3, [pc, #48]	; (8001d30 <MX_FDCAN1_Init+0x84>)
 8001d00:	2201      	movs	r2, #1
 8001d02:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan1.Init.DataTimeSeg2 = 1;
 8001d04:	4b0a      	ldr	r3, [pc, #40]	; (8001d30 <MX_FDCAN1_Init+0x84>)
 8001d06:	2201      	movs	r2, #1
 8001d08:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan1.Init.StdFiltersNbr = 0;
 8001d0a:	4b09      	ldr	r3, [pc, #36]	; (8001d30 <MX_FDCAN1_Init+0x84>)
 8001d0c:	2200      	movs	r2, #0
 8001d0e:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan1.Init.ExtFiltersNbr = 0;
 8001d10:	4b07      	ldr	r3, [pc, #28]	; (8001d30 <MX_FDCAN1_Init+0x84>)
 8001d12:	2200      	movs	r2, #0
 8001d14:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8001d16:	4b06      	ldr	r3, [pc, #24]	; (8001d30 <MX_FDCAN1_Init+0x84>)
 8001d18:	2200      	movs	r2, #0
 8001d1a:	63da      	str	r2, [r3, #60]	; 0x3c
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 8001d1c:	4804      	ldr	r0, [pc, #16]	; (8001d30 <MX_FDCAN1_Init+0x84>)
 8001d1e:	f004 fa05 	bl	800612c <HAL_FDCAN_Init>
 8001d22:	4603      	mov	r3, r0
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d001      	beq.n	8001d2c <MX_FDCAN1_Init+0x80>
  {
    Error_Handler();
 8001d28:	f000 fc66 	bl	80025f8 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 8001d2c:	bf00      	nop
 8001d2e:	bd80      	pop	{r7, pc}
 8001d30:	200001c4 	.word	0x200001c4
 8001d34:	40006400 	.word	0x40006400

08001d38 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8001d38:	b580      	push	{r7, lr}
 8001d3a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8001d3c:	4b1b      	ldr	r3, [pc, #108]	; (8001dac <MX_SPI3_Init+0x74>)
 8001d3e:	4a1c      	ldr	r2, [pc, #112]	; (8001db0 <MX_SPI3_Init+0x78>)
 8001d40:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8001d42:	4b1a      	ldr	r3, [pc, #104]	; (8001dac <MX_SPI3_Init+0x74>)
 8001d44:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001d48:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8001d4a:	4b18      	ldr	r3, [pc, #96]	; (8001dac <MX_SPI3_Init+0x74>)
 8001d4c:	2200      	movs	r2, #0
 8001d4e:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_16BIT;
 8001d50:	4b16      	ldr	r3, [pc, #88]	; (8001dac <MX_SPI3_Init+0x74>)
 8001d52:	f44f 6270 	mov.w	r2, #3840	; 0xf00
 8001d56:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001d58:	4b14      	ldr	r3, [pc, #80]	; (8001dac <MX_SPI3_Init+0x74>)
 8001d5a:	2200      	movs	r2, #0
 8001d5c:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_2EDGE;
 8001d5e:	4b13      	ldr	r3, [pc, #76]	; (8001dac <MX_SPI3_Init+0x74>)
 8001d60:	2201      	movs	r2, #1
 8001d62:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8001d64:	4b11      	ldr	r3, [pc, #68]	; (8001dac <MX_SPI3_Init+0x74>)
 8001d66:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001d6a:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8001d6c:	4b0f      	ldr	r3, [pc, #60]	; (8001dac <MX_SPI3_Init+0x74>)
 8001d6e:	2218      	movs	r2, #24
 8001d70:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001d72:	4b0e      	ldr	r3, [pc, #56]	; (8001dac <MX_SPI3_Init+0x74>)
 8001d74:	2200      	movs	r2, #0
 8001d76:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8001d78:	4b0c      	ldr	r3, [pc, #48]	; (8001dac <MX_SPI3_Init+0x74>)
 8001d7a:	2200      	movs	r2, #0
 8001d7c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001d7e:	4b0b      	ldr	r3, [pc, #44]	; (8001dac <MX_SPI3_Init+0x74>)
 8001d80:	2200      	movs	r2, #0
 8001d82:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 8001d84:	4b09      	ldr	r3, [pc, #36]	; (8001dac <MX_SPI3_Init+0x74>)
 8001d86:	2207      	movs	r2, #7
 8001d88:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001d8a:	4b08      	ldr	r3, [pc, #32]	; (8001dac <MX_SPI3_Init+0x74>)
 8001d8c:	2200      	movs	r2, #0
 8001d8e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8001d90:	4b06      	ldr	r3, [pc, #24]	; (8001dac <MX_SPI3_Init+0x74>)
 8001d92:	2200      	movs	r2, #0
 8001d94:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8001d96:	4805      	ldr	r0, [pc, #20]	; (8001dac <MX_SPI3_Init+0x74>)
 8001d98:	f005 fd0e 	bl	80077b8 <HAL_SPI_Init>
 8001d9c:	4603      	mov	r3, r0
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d001      	beq.n	8001da6 <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 8001da2:	f000 fc29 	bl	80025f8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8001da6:	bf00      	nop
 8001da8:	bd80      	pop	{r7, pc}
 8001daa:	bf00      	nop
 8001dac:	20000228 	.word	0x20000228
 8001db0:	40003c00 	.word	0x40003c00

08001db4 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001db4:	b580      	push	{r7, lr}
 8001db6:	b09c      	sub	sp, #112	; 0x70
 8001db8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001dba:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8001dbe:	2200      	movs	r2, #0
 8001dc0:	601a      	str	r2, [r3, #0]
 8001dc2:	605a      	str	r2, [r3, #4]
 8001dc4:	609a      	str	r2, [r3, #8]
 8001dc6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001dc8:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001dcc:	2200      	movs	r2, #0
 8001dce:	601a      	str	r2, [r3, #0]
 8001dd0:	605a      	str	r2, [r3, #4]
 8001dd2:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001dd4:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001dd8:	2200      	movs	r2, #0
 8001dda:	601a      	str	r2, [r3, #0]
 8001ddc:	605a      	str	r2, [r3, #4]
 8001dde:	609a      	str	r2, [r3, #8]
 8001de0:	60da      	str	r2, [r3, #12]
 8001de2:	611a      	str	r2, [r3, #16]
 8001de4:	615a      	str	r2, [r3, #20]
 8001de6:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001de8:	1d3b      	adds	r3, r7, #4
 8001dea:	2234      	movs	r2, #52	; 0x34
 8001dec:	2100      	movs	r1, #0
 8001dee:	4618      	mov	r0, r3
 8001df0:	f009 fc58 	bl	800b6a4 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001df4:	4b5b      	ldr	r3, [pc, #364]	; (8001f64 <MX_TIM1_Init+0x1b0>)
 8001df6:	4a5c      	ldr	r2, [pc, #368]	; (8001f68 <MX_TIM1_Init+0x1b4>)
 8001df8:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 7;
 8001dfa:	4b5a      	ldr	r3, [pc, #360]	; (8001f64 <MX_TIM1_Init+0x1b0>)
 8001dfc:	2207      	movs	r2, #7
 8001dfe:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 8001e00:	4b58      	ldr	r3, [pc, #352]	; (8001f64 <MX_TIM1_Init+0x1b0>)
 8001e02:	2220      	movs	r2, #32
 8001e04:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000;
 8001e06:	4b57      	ldr	r3, [pc, #348]	; (8001f64 <MX_TIM1_Init+0x1b0>)
 8001e08:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001e0c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001e0e:	4b55      	ldr	r3, [pc, #340]	; (8001f64 <MX_TIM1_Init+0x1b0>)
 8001e10:	2200      	movs	r2, #0
 8001e12:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001e14:	4b53      	ldr	r3, [pc, #332]	; (8001f64 <MX_TIM1_Init+0x1b0>)
 8001e16:	2200      	movs	r2, #0
 8001e18:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001e1a:	4b52      	ldr	r3, [pc, #328]	; (8001f64 <MX_TIM1_Init+0x1b0>)
 8001e1c:	2200      	movs	r2, #0
 8001e1e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001e20:	4850      	ldr	r0, [pc, #320]	; (8001f64 <MX_TIM1_Init+0x1b0>)
 8001e22:	f006 fbe1 	bl	80085e8 <HAL_TIM_Base_Init>
 8001e26:	4603      	mov	r3, r0
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d001      	beq.n	8001e30 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8001e2c:	f000 fbe4 	bl	80025f8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001e30:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001e34:	663b      	str	r3, [r7, #96]	; 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001e36:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8001e3a:	4619      	mov	r1, r3
 8001e3c:	4849      	ldr	r0, [pc, #292]	; (8001f64 <MX_TIM1_Init+0x1b0>)
 8001e3e:	f007 f9bf 	bl	80091c0 <HAL_TIM_ConfigClockSource>
 8001e42:	4603      	mov	r3, r0
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d001      	beq.n	8001e4c <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8001e48:	f000 fbd6 	bl	80025f8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001e4c:	4845      	ldr	r0, [pc, #276]	; (8001f64 <MX_TIM1_Init+0x1b0>)
 8001e4e:	f006 fc22 	bl	8008696 <HAL_TIM_PWM_Init>
 8001e52:	4603      	mov	r3, r0
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d001      	beq.n	8001e5c <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8001e58:	f000 fbce 	bl	80025f8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC4REF;
 8001e5c:	2370      	movs	r3, #112	; 0x70
 8001e5e:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_OC4REF;
 8001e60:	f44f 03e0 	mov.w	r3, #7340032	; 0x700000
 8001e64:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001e66:	2300      	movs	r3, #0
 8001e68:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001e6a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001e6e:	4619      	mov	r1, r3
 8001e70:	483c      	ldr	r0, [pc, #240]	; (8001f64 <MX_TIM1_Init+0x1b0>)
 8001e72:	f008 f821 	bl	8009eb8 <HAL_TIMEx_MasterConfigSynchronization>
 8001e76:	4603      	mov	r3, r0
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d001      	beq.n	8001e80 <MX_TIM1_Init+0xcc>
  {
    Error_Handler();
 8001e7c:	f000 fbbc 	bl	80025f8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001e80:	2360      	movs	r3, #96	; 0x60
 8001e82:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 8001e84:	2300      	movs	r3, #0
 8001e86:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001e88:	2300      	movs	r3, #0
 8001e8a:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_LOW;
 8001e8c:	2308      	movs	r3, #8
 8001e8e:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001e90:	2300      	movs	r3, #0
 8001e92:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001e94:	2300      	movs	r3, #0
 8001e96:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001e98:	2300      	movs	r3, #0
 8001e9a:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001e9c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001ea0:	2200      	movs	r2, #0
 8001ea2:	4619      	mov	r1, r3
 8001ea4:	482f      	ldr	r0, [pc, #188]	; (8001f64 <MX_TIM1_Init+0x1b0>)
 8001ea6:	f007 f877 	bl	8008f98 <HAL_TIM_PWM_ConfigChannel>
 8001eaa:	4603      	mov	r3, r0
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d001      	beq.n	8001eb4 <MX_TIM1_Init+0x100>
  {
    Error_Handler();
 8001eb0:	f000 fba2 	bl	80025f8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001eb4:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001eb8:	2204      	movs	r2, #4
 8001eba:	4619      	mov	r1, r3
 8001ebc:	4829      	ldr	r0, [pc, #164]	; (8001f64 <MX_TIM1_Init+0x1b0>)
 8001ebe:	f007 f86b 	bl	8008f98 <HAL_TIM_PWM_ConfigChannel>
 8001ec2:	4603      	mov	r3, r0
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d001      	beq.n	8001ecc <MX_TIM1_Init+0x118>
  {
    Error_Handler();
 8001ec8:	f000 fb96 	bl	80025f8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001ecc:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001ed0:	2208      	movs	r2, #8
 8001ed2:	4619      	mov	r1, r3
 8001ed4:	4823      	ldr	r0, [pc, #140]	; (8001f64 <MX_TIM1_Init+0x1b0>)
 8001ed6:	f007 f85f 	bl	8008f98 <HAL_TIM_PWM_ConfigChannel>
 8001eda:	4603      	mov	r3, r0
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d001      	beq.n	8001ee4 <MX_TIM1_Init+0x130>
  {
    Error_Handler();
 8001ee0:	f000 fb8a 	bl	80025f8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM2;
 8001ee4:	2370      	movs	r3, #112	; 0x70
 8001ee6:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 990;
 8001ee8:	f240 33de 	movw	r3, #990	; 0x3de
 8001eec:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001eee:	2300      	movs	r3, #0
 8001ef0:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001ef2:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001ef6:	220c      	movs	r2, #12
 8001ef8:	4619      	mov	r1, r3
 8001efa:	481a      	ldr	r0, [pc, #104]	; (8001f64 <MX_TIM1_Init+0x1b0>)
 8001efc:	f007 f84c 	bl	8008f98 <HAL_TIM_PWM_ConfigChannel>
 8001f00:	4603      	mov	r3, r0
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d001      	beq.n	8001f0a <MX_TIM1_Init+0x156>
  {
    Error_Handler();
 8001f06:	f000 fb77 	bl	80025f8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001f0a:	2300      	movs	r3, #0
 8001f0c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001f0e:	2300      	movs	r3, #0
 8001f10:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001f12:	2300      	movs	r3, #0
 8001f14:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 70;
 8001f16:	2346      	movs	r3, #70	; 0x46
 8001f18:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001f1a:	2300      	movs	r3, #0
 8001f1c:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001f1e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001f22:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001f24:	2300      	movs	r3, #0
 8001f26:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8001f28:	2300      	movs	r3, #0
 8001f2a:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001f2c:	2300      	movs	r3, #0
 8001f2e:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001f30:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001f34:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001f36:	2300      	movs	r3, #0
 8001f38:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8001f3a:	2300      	movs	r3, #0
 8001f3c:	633b      	str	r3, [r7, #48]	; 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001f3e:	2300      	movs	r3, #0
 8001f40:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001f42:	1d3b      	adds	r3, r7, #4
 8001f44:	4619      	mov	r1, r3
 8001f46:	4807      	ldr	r0, [pc, #28]	; (8001f64 <MX_TIM1_Init+0x1b0>)
 8001f48:	f008 f838 	bl	8009fbc <HAL_TIMEx_ConfigBreakDeadTime>
 8001f4c:	4603      	mov	r3, r0
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d001      	beq.n	8001f56 <MX_TIM1_Init+0x1a2>
  {
    Error_Handler();
 8001f52:	f000 fb51 	bl	80025f8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001f56:	4803      	ldr	r0, [pc, #12]	; (8001f64 <MX_TIM1_Init+0x1b0>)
 8001f58:	f000 fe28 	bl	8002bac <HAL_TIM_MspPostInit>

}
 8001f5c:	bf00      	nop
 8001f5e:	3770      	adds	r7, #112	; 0x70
 8001f60:	46bd      	mov	sp, r7
 8001f62:	bd80      	pop	{r7, pc}
 8001f64:	2000028c 	.word	0x2000028c
 8001f68:	40012c00 	.word	0x40012c00

08001f6c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001f6c:	b580      	push	{r7, lr}
 8001f6e:	b08c      	sub	sp, #48	; 0x30
 8001f70:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001f72:	f107 030c 	add.w	r3, r7, #12
 8001f76:	2224      	movs	r2, #36	; 0x24
 8001f78:	2100      	movs	r1, #0
 8001f7a:	4618      	mov	r0, r3
 8001f7c:	f009 fb92 	bl	800b6a4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001f80:	463b      	mov	r3, r7
 8001f82:	2200      	movs	r2, #0
 8001f84:	601a      	str	r2, [r3, #0]
 8001f86:	605a      	str	r2, [r3, #4]
 8001f88:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001f8a:	4b21      	ldr	r3, [pc, #132]	; (8002010 <MX_TIM2_Init+0xa4>)
 8001f8c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001f90:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001f92:	4b1f      	ldr	r3, [pc, #124]	; (8002010 <MX_TIM2_Init+0xa4>)
 8001f94:	2200      	movs	r2, #0
 8001f96:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f98:	4b1d      	ldr	r3, [pc, #116]	; (8002010 <MX_TIM2_Init+0xa4>)
 8001f9a:	2200      	movs	r2, #0
 8001f9c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 2000;
 8001f9e:	4b1c      	ldr	r3, [pc, #112]	; (8002010 <MX_TIM2_Init+0xa4>)
 8001fa0:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8001fa4:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001fa6:	4b1a      	ldr	r3, [pc, #104]	; (8002010 <MX_TIM2_Init+0xa4>)
 8001fa8:	2200      	movs	r2, #0
 8001faa:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001fac:	4b18      	ldr	r3, [pc, #96]	; (8002010 <MX_TIM2_Init+0xa4>)
 8001fae:	2200      	movs	r2, #0
 8001fb0:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8001fb2:	2301      	movs	r3, #1
 8001fb4:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001fb6:	2300      	movs	r3, #0
 8001fb8:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001fba:	2301      	movs	r3, #1
 8001fbc:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001fbe:	2300      	movs	r3, #0
 8001fc0:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 8001fc2:	230a      	movs	r3, #10
 8001fc4:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001fc6:	2300      	movs	r3, #0
 8001fc8:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001fca:	2301      	movs	r3, #1
 8001fcc:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001fce:	2300      	movs	r3, #0
 8001fd0:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 10;
 8001fd2:	230a      	movs	r3, #10
 8001fd4:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8001fd6:	f107 030c 	add.w	r3, r7, #12
 8001fda:	4619      	mov	r1, r3
 8001fdc:	480c      	ldr	r0, [pc, #48]	; (8002010 <MX_TIM2_Init+0xa4>)
 8001fde:	f006 fd07 	bl	80089f0 <HAL_TIM_Encoder_Init>
 8001fe2:	4603      	mov	r3, r0
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d001      	beq.n	8001fec <MX_TIM2_Init+0x80>
  {
    Error_Handler();
 8001fe8:	f000 fb06 	bl	80025f8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001fec:	2320      	movs	r3, #32
 8001fee:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001ff0:	2300      	movs	r3, #0
 8001ff2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001ff4:	463b      	mov	r3, r7
 8001ff6:	4619      	mov	r1, r3
 8001ff8:	4805      	ldr	r0, [pc, #20]	; (8002010 <MX_TIM2_Init+0xa4>)
 8001ffa:	f007 ff5d 	bl	8009eb8 <HAL_TIMEx_MasterConfigSynchronization>
 8001ffe:	4603      	mov	r3, r0
 8002000:	2b00      	cmp	r3, #0
 8002002:	d001      	beq.n	8002008 <MX_TIM2_Init+0x9c>
  {
    Error_Handler();
 8002004:	f000 faf8 	bl	80025f8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002008:	bf00      	nop
 800200a:	3730      	adds	r7, #48	; 0x30
 800200c:	46bd      	mov	sp, r7
 800200e:	bd80      	pop	{r7, pc}
 8002010:	200002d8 	.word	0x200002d8

08002014 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8002014:	b580      	push	{r7, lr}
 8002016:	b084      	sub	sp, #16
 8002018:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800201a:	1d3b      	adds	r3, r7, #4
 800201c:	2200      	movs	r2, #0
 800201e:	601a      	str	r2, [r3, #0]
 8002020:	605a      	str	r2, [r3, #4]
 8002022:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8002024:	4b14      	ldr	r3, [pc, #80]	; (8002078 <MX_TIM6_Init+0x64>)
 8002026:	4a15      	ldr	r2, [pc, #84]	; (800207c <MX_TIM6_Init+0x68>)
 8002028:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 16;
 800202a:	4b13      	ldr	r3, [pc, #76]	; (8002078 <MX_TIM6_Init+0x64>)
 800202c:	2210      	movs	r2, #16
 800202e:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002030:	4b11      	ldr	r3, [pc, #68]	; (8002078 <MX_TIM6_Init+0x64>)
 8002032:	2200      	movs	r2, #0
 8002034:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 999;
 8002036:	4b10      	ldr	r3, [pc, #64]	; (8002078 <MX_TIM6_Init+0x64>)
 8002038:	f240 32e7 	movw	r2, #999	; 0x3e7
 800203c:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800203e:	4b0e      	ldr	r3, [pc, #56]	; (8002078 <MX_TIM6_Init+0x64>)
 8002040:	2200      	movs	r2, #0
 8002042:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8002044:	480c      	ldr	r0, [pc, #48]	; (8002078 <MX_TIM6_Init+0x64>)
 8002046:	f006 facf 	bl	80085e8 <HAL_TIM_Base_Init>
 800204a:	4603      	mov	r3, r0
 800204c:	2b00      	cmp	r3, #0
 800204e:	d001      	beq.n	8002054 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8002050:	f000 fad2 	bl	80025f8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002054:	2300      	movs	r3, #0
 8002056:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002058:	2300      	movs	r3, #0
 800205a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800205c:	1d3b      	adds	r3, r7, #4
 800205e:	4619      	mov	r1, r3
 8002060:	4805      	ldr	r0, [pc, #20]	; (8002078 <MX_TIM6_Init+0x64>)
 8002062:	f007 ff29 	bl	8009eb8 <HAL_TIMEx_MasterConfigSynchronization>
 8002066:	4603      	mov	r3, r0
 8002068:	2b00      	cmp	r3, #0
 800206a:	d001      	beq.n	8002070 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 800206c:	f000 fac4 	bl	80025f8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8002070:	bf00      	nop
 8002072:	3710      	adds	r7, #16
 8002074:	46bd      	mov	sp, r7
 8002076:	bd80      	pop	{r7, pc}
 8002078:	20000324 	.word	0x20000324
 800207c:	40001000 	.word	0x40001000

08002080 <MX_TIM17_Init>:
  * @brief TIM17 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM17_Init(void)
{
 8002080:	b580      	push	{r7, lr}
 8002082:	af00      	add	r7, sp, #0
  /* USER CODE END TIM17_Init 0 */

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 8002084:	4b0f      	ldr	r3, [pc, #60]	; (80020c4 <MX_TIM17_Init+0x44>)
 8002086:	4a10      	ldr	r2, [pc, #64]	; (80020c8 <MX_TIM17_Init+0x48>)
 8002088:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 0;
 800208a:	4b0e      	ldr	r3, [pc, #56]	; (80020c4 <MX_TIM17_Init+0x44>)
 800208c:	2200      	movs	r2, #0
 800208e:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002090:	4b0c      	ldr	r3, [pc, #48]	; (80020c4 <MX_TIM17_Init+0x44>)
 8002092:	2200      	movs	r2, #0
 8002094:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 65535;
 8002096:	4b0b      	ldr	r3, [pc, #44]	; (80020c4 <MX_TIM17_Init+0x44>)
 8002098:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800209c:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800209e:	4b09      	ldr	r3, [pc, #36]	; (80020c4 <MX_TIM17_Init+0x44>)
 80020a0:	2200      	movs	r2, #0
 80020a2:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 80020a4:	4b07      	ldr	r3, [pc, #28]	; (80020c4 <MX_TIM17_Init+0x44>)
 80020a6:	2200      	movs	r2, #0
 80020a8:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80020aa:	4b06      	ldr	r3, [pc, #24]	; (80020c4 <MX_TIM17_Init+0x44>)
 80020ac:	2200      	movs	r2, #0
 80020ae:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 80020b0:	4804      	ldr	r0, [pc, #16]	; (80020c4 <MX_TIM17_Init+0x44>)
 80020b2:	f006 fa99 	bl	80085e8 <HAL_TIM_Base_Init>
 80020b6:	4603      	mov	r3, r0
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d001      	beq.n	80020c0 <MX_TIM17_Init+0x40>
  {
    Error_Handler();
 80020bc:	f000 fa9c 	bl	80025f8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */

}
 80020c0:	bf00      	nop
 80020c2:	bd80      	pop	{r7, pc}
 80020c4:	20000370 	.word	0x20000370
 80020c8:	40014800 	.word	0x40014800

080020cc <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80020cc:	b580      	push	{r7, lr}
 80020ce:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80020d0:	4b22      	ldr	r3, [pc, #136]	; (800215c <MX_USART1_UART_Init+0x90>)
 80020d2:	4a23      	ldr	r2, [pc, #140]	; (8002160 <MX_USART1_UART_Init+0x94>)
 80020d4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600; //921600
 80020d6:	4b21      	ldr	r3, [pc, #132]	; (800215c <MX_USART1_UART_Init+0x90>)
 80020d8:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80020dc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80020de:	4b1f      	ldr	r3, [pc, #124]	; (800215c <MX_USART1_UART_Init+0x90>)
 80020e0:	2200      	movs	r2, #0
 80020e2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80020e4:	4b1d      	ldr	r3, [pc, #116]	; (800215c <MX_USART1_UART_Init+0x90>)
 80020e6:	2200      	movs	r2, #0
 80020e8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80020ea:	4b1c      	ldr	r3, [pc, #112]	; (800215c <MX_USART1_UART_Init+0x90>)
 80020ec:	2200      	movs	r2, #0
 80020ee:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80020f0:	4b1a      	ldr	r3, [pc, #104]	; (800215c <MX_USART1_UART_Init+0x90>)
 80020f2:	220c      	movs	r2, #12
 80020f4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80020f6:	4b19      	ldr	r3, [pc, #100]	; (800215c <MX_USART1_UART_Init+0x90>)
 80020f8:	2200      	movs	r2, #0
 80020fa:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80020fc:	4b17      	ldr	r3, [pc, #92]	; (800215c <MX_USART1_UART_Init+0x90>)
 80020fe:	2200      	movs	r2, #0
 8002100:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002102:	4b16      	ldr	r3, [pc, #88]	; (800215c <MX_USART1_UART_Init+0x90>)
 8002104:	2200      	movs	r2, #0
 8002106:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002108:	4b14      	ldr	r3, [pc, #80]	; (800215c <MX_USART1_UART_Init+0x90>)
 800210a:	2200      	movs	r2, #0
 800210c:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800210e:	4b13      	ldr	r3, [pc, #76]	; (800215c <MX_USART1_UART_Init+0x90>)
 8002110:	2200      	movs	r2, #0
 8002112:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002114:	4811      	ldr	r0, [pc, #68]	; (800215c <MX_USART1_UART_Init+0x90>)
 8002116:	f008 f85c 	bl	800a1d2 <HAL_UART_Init>
 800211a:	4603      	mov	r3, r0
 800211c:	2b00      	cmp	r3, #0
 800211e:	d001      	beq.n	8002124 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8002120:	f000 fa6a 	bl	80025f8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002124:	2100      	movs	r1, #0
 8002126:	480d      	ldr	r0, [pc, #52]	; (800215c <MX_USART1_UART_Init+0x90>)
 8002128:	f009 f9f1 	bl	800b50e <HAL_UARTEx_SetTxFifoThreshold>
 800212c:	4603      	mov	r3, r0
 800212e:	2b00      	cmp	r3, #0
 8002130:	d001      	beq.n	8002136 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8002132:	f000 fa61 	bl	80025f8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002136:	2100      	movs	r1, #0
 8002138:	4808      	ldr	r0, [pc, #32]	; (800215c <MX_USART1_UART_Init+0x90>)
 800213a:	f009 fa26 	bl	800b58a <HAL_UARTEx_SetRxFifoThreshold>
 800213e:	4603      	mov	r3, r0
 8002140:	2b00      	cmp	r3, #0
 8002142:	d001      	beq.n	8002148 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8002144:	f000 fa58 	bl	80025f8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8002148:	4804      	ldr	r0, [pc, #16]	; (800215c <MX_USART1_UART_Init+0x90>)
 800214a:	f009 f9a7 	bl	800b49c <HAL_UARTEx_DisableFifoMode>
 800214e:	4603      	mov	r3, r0
 8002150:	2b00      	cmp	r3, #0
 8002152:	d001      	beq.n	8002158 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8002154:	f000 fa50 	bl	80025f8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002158:	bf00      	nop
 800215a:	bd80      	pop	{r7, pc}
 800215c:	200003bc 	.word	0x200003bc
 8002160:	40013800 	.word	0x40013800

08002164 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002164:	b580      	push	{r7, lr}
 8002166:	b08a      	sub	sp, #40	; 0x28
 8002168:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800216a:	f107 0314 	add.w	r3, r7, #20
 800216e:	2200      	movs	r2, #0
 8002170:	601a      	str	r2, [r3, #0]
 8002172:	605a      	str	r2, [r3, #4]
 8002174:	609a      	str	r2, [r3, #8]
 8002176:	60da      	str	r2, [r3, #12]
 8002178:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800217a:	4b3f      	ldr	r3, [pc, #252]	; (8002278 <MX_GPIO_Init+0x114>)
 800217c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800217e:	4a3e      	ldr	r2, [pc, #248]	; (8002278 <MX_GPIO_Init+0x114>)
 8002180:	f043 0304 	orr.w	r3, r3, #4
 8002184:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002186:	4b3c      	ldr	r3, [pc, #240]	; (8002278 <MX_GPIO_Init+0x114>)
 8002188:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800218a:	f003 0304 	and.w	r3, r3, #4
 800218e:	613b      	str	r3, [r7, #16]
 8002190:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002192:	4b39      	ldr	r3, [pc, #228]	; (8002278 <MX_GPIO_Init+0x114>)
 8002194:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002196:	4a38      	ldr	r2, [pc, #224]	; (8002278 <MX_GPIO_Init+0x114>)
 8002198:	f043 0320 	orr.w	r3, r3, #32
 800219c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800219e:	4b36      	ldr	r3, [pc, #216]	; (8002278 <MX_GPIO_Init+0x114>)
 80021a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021a2:	f003 0320 	and.w	r3, r3, #32
 80021a6:	60fb      	str	r3, [r7, #12]
 80021a8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80021aa:	4b33      	ldr	r3, [pc, #204]	; (8002278 <MX_GPIO_Init+0x114>)
 80021ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021ae:	4a32      	ldr	r2, [pc, #200]	; (8002278 <MX_GPIO_Init+0x114>)
 80021b0:	f043 0301 	orr.w	r3, r3, #1
 80021b4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80021b6:	4b30      	ldr	r3, [pc, #192]	; (8002278 <MX_GPIO_Init+0x114>)
 80021b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021ba:	f003 0301 	and.w	r3, r3, #1
 80021be:	60bb      	str	r3, [r7, #8]
 80021c0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80021c2:	4b2d      	ldr	r3, [pc, #180]	; (8002278 <MX_GPIO_Init+0x114>)
 80021c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021c6:	4a2c      	ldr	r2, [pc, #176]	; (8002278 <MX_GPIO_Init+0x114>)
 80021c8:	f043 0302 	orr.w	r3, r3, #2
 80021cc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80021ce:	4b2a      	ldr	r3, [pc, #168]	; (8002278 <MX_GPIO_Init+0x114>)
 80021d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021d2:	f003 0302 	and.w	r3, r3, #2
 80021d6:	607b      	str	r3, [r7, #4]
 80021d8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80021da:	4b27      	ldr	r3, [pc, #156]	; (8002278 <MX_GPIO_Init+0x114>)
 80021dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021de:	4a26      	ldr	r2, [pc, #152]	; (8002278 <MX_GPIO_Init+0x114>)
 80021e0:	f043 0308 	orr.w	r3, r3, #8
 80021e4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80021e6:	4b24      	ldr	r3, [pc, #144]	; (8002278 <MX_GPIO_Init+0x114>)
 80021e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021ea:	f003 0308 	and.w	r3, r3, #8
 80021ee:	603b      	str	r3, [r7, #0]
 80021f0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80021f2:	2200      	movs	r2, #0
 80021f4:	2120      	movs	r1, #32
 80021f6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80021fa:	f004 fac9 	bl	8006790 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_RESET);
 80021fe:	2200      	movs	r2, #0
 8002200:	2104      	movs	r1, #4
 8002202:	481e      	ldr	r0, [pc, #120]	; (800227c <MX_GPIO_Init+0x118>)
 8002204:	f004 fac4 	bl	8006790 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8002208:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800220c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800220e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8002212:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002214:	2300      	movs	r3, #0
 8002216:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8002218:	f107 0314 	add.w	r3, r7, #20
 800221c:	4619      	mov	r1, r3
 800221e:	4818      	ldr	r0, [pc, #96]	; (8002280 <MX_GPIO_Init+0x11c>)
 8002220:	f004 f934 	bl	800648c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8002224:	2320      	movs	r3, #32
 8002226:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002228:	2301      	movs	r3, #1
 800222a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800222c:	2300      	movs	r3, #0
 800222e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002230:	2300      	movs	r3, #0
 8002232:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8002234:	f107 0314 	add.w	r3, r7, #20
 8002238:	4619      	mov	r1, r3
 800223a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800223e:	f004 f925 	bl	800648c <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002242:	2304      	movs	r3, #4
 8002244:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002246:	2301      	movs	r3, #1
 8002248:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800224a:	2300      	movs	r3, #0
 800224c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800224e:	2300      	movs	r3, #0
 8002250:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002252:	f107 0314 	add.w	r3, r7, #20
 8002256:	4619      	mov	r1, r3
 8002258:	4808      	ldr	r0, [pc, #32]	; (800227c <MX_GPIO_Init+0x118>)
 800225a:	f004 f917 	bl	800648c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800225e:	2200      	movs	r2, #0
 8002260:	2100      	movs	r1, #0
 8002262:	2028      	movs	r0, #40	; 0x28
 8002264:	f003 fc35 	bl	8005ad2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8002268:	2028      	movs	r0, #40	; 0x28
 800226a:	f003 fc4c 	bl	8005b06 <HAL_NVIC_EnableIRQ>

}
 800226e:	bf00      	nop
 8002270:	3728      	adds	r7, #40	; 0x28
 8002272:	46bd      	mov	sp, r7
 8002274:	bd80      	pop	{r7, pc}
 8002276:	bf00      	nop
 8002278:	40021000 	.word	0x40021000
 800227c:	48000c00 	.word	0x48000c00
 8002280:	48000800 	.word	0x48000800
 8002284:	00000000 	.word	0x00000000

08002288 <HAL_ADCEx_InjectedConvCpltCallback>:

/* USER CODE BEGIN 4 */

void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002288:	b5b0      	push	{r4, r5, r7, lr}
 800228a:	b086      	sub	sp, #24
 800228c:	af02      	add	r7, sp, #8
 800228e:	6078      	str	r0, [r7, #4]


	/**POMIAR PRADU **/ //2us
	//====offset ADC=====//
	GPIOA->ODR|= 1<<5;
 8002290:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8002294:	695b      	ldr	r3, [r3, #20]
 8002296:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800229a:	f043 0320 	orr.w	r3, r3, #32
 800229e:	6153      	str	r3, [r2, #20]
if(CAL_status==0)
 80022a0:	4b09      	ldr	r3, [pc, #36]	; (80022c8 <HAL_ADCEx_InjectedConvCpltCallback+0x40>)
 80022a2:	781b      	ldrb	r3, [r3, #0]
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d12e      	bne.n	8002306 <HAL_ADCEx_InjectedConvCpltCallback+0x7e>
{
	TIM1->CCR1=1000;TIM1->CCR2=1000;TIM1->CCR3=1000;
 80022a8:	4b08      	ldr	r3, [pc, #32]	; (80022cc <HAL_ADCEx_InjectedConvCpltCallback+0x44>)
 80022aa:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80022ae:	635a      	str	r2, [r3, #52]	; 0x34
 80022b0:	4b06      	ldr	r3, [pc, #24]	; (80022cc <HAL_ADCEx_InjectedConvCpltCallback+0x44>)
 80022b2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80022b6:	639a      	str	r2, [r3, #56]	; 0x38
 80022b8:	4b04      	ldr	r3, [pc, #16]	; (80022cc <HAL_ADCEx_InjectedConvCpltCallback+0x44>)
 80022ba:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80022be:	63da      	str	r2, [r3, #60]	; 0x3c
	for(int i=0;i<1000000;i++)
 80022c0:	2300      	movs	r3, #0
 80022c2:	60fb      	str	r3, [r7, #12]
 80022c4:	e018      	b.n	80022f8 <HAL_ADCEx_InjectedConvCpltCallback+0x70>
 80022c6:	bf00      	nop
 80022c8:	20000458 	.word	0x20000458
 80022cc:	40012c00 	.word	0x40012c00
	{
		ADC_CAL[0]=HAL_ADCEx_InjectedGetValue(&hadc1, ADC_INJECTED_RANK_1);
 80022d0:	2109      	movs	r1, #9
 80022d2:	48a3      	ldr	r0, [pc, #652]	; (8002560 <HAL_ADCEx_InjectedConvCpltCallback+0x2d8>)
 80022d4:	f002 fd0c 	bl	8004cf0 <HAL_ADCEx_InjectedGetValue>
 80022d8:	4603      	mov	r3, r0
 80022da:	b29a      	uxth	r2, r3
 80022dc:	4ba1      	ldr	r3, [pc, #644]	; (8002564 <HAL_ADCEx_InjectedConvCpltCallback+0x2dc>)
 80022de:	801a      	strh	r2, [r3, #0]
		ADC_CAL[2]=HAL_ADCEx_InjectedGetValue(&hadc1, ADC_INJECTED_RANK_4);
 80022e0:	f240 311b 	movw	r1, #795	; 0x31b
 80022e4:	489e      	ldr	r0, [pc, #632]	; (8002560 <HAL_ADCEx_InjectedConvCpltCallback+0x2d8>)
 80022e6:	f002 fd03 	bl	8004cf0 <HAL_ADCEx_InjectedGetValue>
 80022ea:	4603      	mov	r3, r0
 80022ec:	b29a      	uxth	r2, r3
 80022ee:	4b9d      	ldr	r3, [pc, #628]	; (8002564 <HAL_ADCEx_InjectedConvCpltCallback+0x2dc>)
 80022f0:	809a      	strh	r2, [r3, #4]
	for(int i=0;i<1000000;i++)
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	3301      	adds	r3, #1
 80022f6:	60fb      	str	r3, [r7, #12]
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	4a9b      	ldr	r2, [pc, #620]	; (8002568 <HAL_ADCEx_InjectedConvCpltCallback+0x2e0>)
 80022fc:	4293      	cmp	r3, r2
 80022fe:	dde7      	ble.n	80022d0 <HAL_ADCEx_InjectedConvCpltCallback+0x48>
	}
	CAL_status=1;
 8002300:	4b9a      	ldr	r3, [pc, #616]	; (800256c <HAL_ADCEx_InjectedConvCpltCallback+0x2e4>)
 8002302:	2201      	movs	r2, #1
 8002304:	701a      	strb	r2, [r3, #0]

}
	//====offset ADC=====//

prad[0] = HAL_ADCEx_InjectedGetValue(&hadc1, ADC_INJECTED_RANK_1);
 8002306:	2109      	movs	r1, #9
 8002308:	4895      	ldr	r0, [pc, #596]	; (8002560 <HAL_ADCEx_InjectedConvCpltCallback+0x2d8>)
 800230a:	f002 fcf1 	bl	8004cf0 <HAL_ADCEx_InjectedGetValue>
 800230e:	4603      	mov	r3, r0
 8002310:	b29a      	uxth	r2, r3
 8002312:	4b97      	ldr	r3, [pc, #604]	; (8002570 <HAL_ADCEx_InjectedConvCpltCallback+0x2e8>)
 8002314:	801a      	strh	r2, [r3, #0]
prad[1] = HAL_ADCEx_InjectedGetValue(&hadc1, ADC_INJECTED_RANK_2);
 8002316:	f240 110f 	movw	r1, #271	; 0x10f
 800231a:	4891      	ldr	r0, [pc, #580]	; (8002560 <HAL_ADCEx_InjectedConvCpltCallback+0x2d8>)
 800231c:	f002 fce8 	bl	8004cf0 <HAL_ADCEx_InjectedGetValue>
 8002320:	4603      	mov	r3, r0
 8002322:	b29a      	uxth	r2, r3
 8002324:	4b92      	ldr	r3, [pc, #584]	; (8002570 <HAL_ADCEx_InjectedConvCpltCallback+0x2e8>)
 8002326:	805a      	strh	r2, [r3, #2]
prad[2] = HAL_ADCEx_InjectedGetValue(&hadc1, ADC_INJECTED_RANK_3);
 8002328:	f240 2115 	movw	r1, #533	; 0x215
 800232c:	488c      	ldr	r0, [pc, #560]	; (8002560 <HAL_ADCEx_InjectedConvCpltCallback+0x2d8>)
 800232e:	f002 fcdf 	bl	8004cf0 <HAL_ADCEx_InjectedGetValue>
 8002332:	4603      	mov	r3, r0
 8002334:	b29a      	uxth	r2, r3
 8002336:	4b8e      	ldr	r3, [pc, #568]	; (8002570 <HAL_ADCEx_InjectedConvCpltCallback+0x2e8>)
 8002338:	809a      	strh	r2, [r3, #4]
prad[3] = HAL_ADCEx_InjectedGetValue(&hadc1, ADC_INJECTED_RANK_4);
 800233a:	f240 311b 	movw	r1, #795	; 0x31b
 800233e:	4888      	ldr	r0, [pc, #544]	; (8002560 <HAL_ADCEx_InjectedConvCpltCallback+0x2d8>)
 8002340:	f002 fcd6 	bl	8004cf0 <HAL_ADCEx_InjectedGetValue>
 8002344:	4603      	mov	r3, r0
 8002346:	b29a      	uxth	r2, r3
 8002348:	4b89      	ldr	r3, [pc, #548]	; (8002570 <HAL_ADCEx_InjectedConvCpltCallback+0x2e8>)
 800234a:	80da      	strh	r2, [r3, #6]
I_a_ADC = -(prad[0] - ADC_CAL[0]); // prad fazy A
 800234c:	4b85      	ldr	r3, [pc, #532]	; (8002564 <HAL_ADCEx_InjectedConvCpltCallback+0x2dc>)
 800234e:	881a      	ldrh	r2, [r3, #0]
 8002350:	4b87      	ldr	r3, [pc, #540]	; (8002570 <HAL_ADCEx_InjectedConvCpltCallback+0x2e8>)
 8002352:	881b      	ldrh	r3, [r3, #0]
 8002354:	1ad3      	subs	r3, r2, r3
 8002356:	b29a      	uxth	r2, r3
 8002358:	4b86      	ldr	r3, [pc, #536]	; (8002574 <HAL_ADCEx_InjectedConvCpltCallback+0x2ec>)
 800235a:	801a      	strh	r2, [r3, #0]
I_b_ADC=  -(prad[3] - ADC_CAL[2]); // prad fazy B
 800235c:	4b81      	ldr	r3, [pc, #516]	; (8002564 <HAL_ADCEx_InjectedConvCpltCallback+0x2dc>)
 800235e:	889a      	ldrh	r2, [r3, #4]
 8002360:	4b83      	ldr	r3, [pc, #524]	; (8002570 <HAL_ADCEx_InjectedConvCpltCallback+0x2e8>)
 8002362:	88db      	ldrh	r3, [r3, #6]
 8002364:	1ad3      	subs	r3, r2, r3
 8002366:	b29a      	uxth	r2, r3
 8002368:	4b83      	ldr	r3, [pc, #524]	; (8002578 <HAL_ADCEx_InjectedConvCpltCallback+0x2f0>)
 800236a:	801a      	strh	r2, [r3, #0]
DC_bus_volt_ADC = prad[1];		 // napięcie szyny DC
 800236c:	4b80      	ldr	r3, [pc, #512]	; (8002570 <HAL_ADCEx_InjectedConvCpltCallback+0x2e8>)
 800236e:	885a      	ldrh	r2, [r3, #2]
 8002370:	4b82      	ldr	r3, [pc, #520]	; (800257c <HAL_ADCEx_InjectedConvCpltCallback+0x2f4>)
 8002372:	801a      	strh	r2, [r3, #0]


						/**POMIAR POZYCJI**/ //6us

SPI_bufor_tx[0]=REG_ANGLECOM_ADR;
 8002374:	4b82      	ldr	r3, [pc, #520]	; (8002580 <HAL_ADCEx_InjectedConvCpltCallback+0x2f8>)
 8002376:	881b      	ldrh	r3, [r3, #0]
 8002378:	b29a      	uxth	r2, r3
 800237a:	4b82      	ldr	r3, [pc, #520]	; (8002584 <HAL_ADCEx_InjectedConvCpltCallback+0x2fc>)
 800237c:	801a      	strh	r2, [r3, #0]
HAL_GPIO_WritePin(GPIOD,GPIO_PIN_2,0);
 800237e:	2200      	movs	r2, #0
 8002380:	2104      	movs	r1, #4
 8002382:	4881      	ldr	r0, [pc, #516]	; (8002588 <HAL_ADCEx_InjectedConvCpltCallback+0x300>)
 8002384:	f004 fa04 	bl	8006790 <HAL_GPIO_WritePin>
HAL_SPI_TransmitReceive(&hspi3, (uint8_t*)SPI_bufor_tx, (uint8_t*)SPI_bufor_rx, 1, 0);
 8002388:	2300      	movs	r3, #0
 800238a:	9300      	str	r3, [sp, #0]
 800238c:	2301      	movs	r3, #1
 800238e:	4a7f      	ldr	r2, [pc, #508]	; (800258c <HAL_ADCEx_InjectedConvCpltCallback+0x304>)
 8002390:	497c      	ldr	r1, [pc, #496]	; (8002584 <HAL_ADCEx_InjectedConvCpltCallback+0x2fc>)
 8002392:	487f      	ldr	r0, [pc, #508]	; (8002590 <HAL_ADCEx_InjectedConvCpltCallback+0x308>)
 8002394:	f005 fd59 	bl	8007e4a <HAL_SPI_TransmitReceive>
HAL_GPIO_WritePin(GPIOD,GPIO_PIN_2,1);
 8002398:	2201      	movs	r2, #1
 800239a:	2104      	movs	r1, #4
 800239c:	487a      	ldr	r0, [pc, #488]	; (8002588 <HAL_ADCEx_InjectedConvCpltCallback+0x300>)
 800239e:	f004 f9f7 	bl	8006790 <HAL_GPIO_WritePin>
REG_ANGLECOM=pozycja_walu=SPI_bufor_rx[0]&0X3fff;
 80023a2:	4b7a      	ldr	r3, [pc, #488]	; (800258c <HAL_ADCEx_InjectedConvCpltCallback+0x304>)
 80023a4:	881b      	ldrh	r3, [r3, #0]
 80023a6:	b29b      	uxth	r3, r3
 80023a8:	f3c3 030d 	ubfx	r3, r3, #0, #14
 80023ac:	b29a      	uxth	r2, r3
 80023ae:	4b79      	ldr	r3, [pc, #484]	; (8002594 <HAL_ADCEx_InjectedConvCpltCallback+0x30c>)
 80023b0:	4611      	mov	r1, r2
 80023b2:	8019      	strh	r1, [r3, #0]
 80023b4:	4b78      	ldr	r3, [pc, #480]	; (8002598 <HAL_ADCEx_InjectedConvCpltCallback+0x310>)
 80023b6:	801a      	strh	r2, [r3, #0]


					/**OBLICZENIA WEKTOR FOC**/ //15us

/**OBLICZENIA KĄTA THETA**/
angle_theta_calc();
 80023b8:	f7fe fc42 	bl	8000c40 <angle_theta_calc>

/**TRANS CLARK **/
clark_transf(I_a_ADC, I_b_ADC, (int16_t*)&prad_alpha, (int16_t*)&prad_beta);
 80023bc:	4b6d      	ldr	r3, [pc, #436]	; (8002574 <HAL_ADCEx_InjectedConvCpltCallback+0x2ec>)
 80023be:	881b      	ldrh	r3, [r3, #0]
 80023c0:	b29b      	uxth	r3, r3
 80023c2:	b218      	sxth	r0, r3
 80023c4:	4b6c      	ldr	r3, [pc, #432]	; (8002578 <HAL_ADCEx_InjectedConvCpltCallback+0x2f0>)
 80023c6:	881b      	ldrh	r3, [r3, #0]
 80023c8:	b29b      	uxth	r3, r3
 80023ca:	b219      	sxth	r1, r3
 80023cc:	4b73      	ldr	r3, [pc, #460]	; (800259c <HAL_ADCEx_InjectedConvCpltCallback+0x314>)
 80023ce:	4a74      	ldr	r2, [pc, #464]	; (80025a0 <HAL_ADCEx_InjectedConvCpltCallback+0x318>)
 80023d0:	f7fe fc86 	bl	8000ce0 <clark_transf>

/**TRANS PARK **/
park_transf(prad_alpha, prad_beta, pozycja_walu_deg, &prad_q, &prad_d);
 80023d4:	4b72      	ldr	r3, [pc, #456]	; (80025a0 <HAL_ADCEx_InjectedConvCpltCallback+0x318>)
 80023d6:	881b      	ldrh	r3, [r3, #0]
 80023d8:	b218      	sxth	r0, r3
 80023da:	4b70      	ldr	r3, [pc, #448]	; (800259c <HAL_ADCEx_InjectedConvCpltCallback+0x314>)
 80023dc:	881b      	ldrh	r3, [r3, #0]
 80023de:	b219      	sxth	r1, r3
 80023e0:	4b70      	ldr	r3, [pc, #448]	; (80025a4 <HAL_ADCEx_InjectedConvCpltCallback+0x31c>)
 80023e2:	881b      	ldrh	r3, [r3, #0]
 80023e4:	b29b      	uxth	r3, r3
 80023e6:	b21a      	sxth	r2, r3
 80023e8:	4b6f      	ldr	r3, [pc, #444]	; (80025a8 <HAL_ADCEx_InjectedConvCpltCallback+0x320>)
 80023ea:	9300      	str	r3, [sp, #0]
 80023ec:	4b6f      	ldr	r3, [pc, #444]	; (80025ac <HAL_ADCEx_InjectedConvCpltCallback+0x324>)
 80023ee:	f7fe fca3 	bl	8000d38 <park_transf>

/**TORQ, FLUX REG PI **/
//Iqd_current_reg();
PI_REG(&Iq_reg, prad_q, prad_q_zad, (int32_t*)&PI_VQ_out);
 80023f2:	4b6e      	ldr	r3, [pc, #440]	; (80025ac <HAL_ADCEx_InjectedConvCpltCallback+0x324>)
 80023f4:	881b      	ldrh	r3, [r3, #0]
 80023f6:	b219      	sxth	r1, r3
 80023f8:	4b6d      	ldr	r3, [pc, #436]	; (80025b0 <HAL_ADCEx_InjectedConvCpltCallback+0x328>)
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	b21a      	sxth	r2, r3
 80023fe:	4b6d      	ldr	r3, [pc, #436]	; (80025b4 <HAL_ADCEx_InjectedConvCpltCallback+0x32c>)
 8002400:	486d      	ldr	r0, [pc, #436]	; (80025b8 <HAL_ADCEx_InjectedConvCpltCallback+0x330>)
 8002402:	f7fe fbb5 	bl	8000b70 <PI_REG>
PI_REG(&Id_reg, prad_d, prad_d_zad, (int32_t*)&PI_VD_out);
 8002406:	4b68      	ldr	r3, [pc, #416]	; (80025a8 <HAL_ADCEx_InjectedConvCpltCallback+0x320>)
 8002408:	881b      	ldrh	r3, [r3, #0]
 800240a:	b219      	sxth	r1, r3
 800240c:	4b6b      	ldr	r3, [pc, #428]	; (80025bc <HAL_ADCEx_InjectedConvCpltCallback+0x334>)
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	b21a      	sxth	r2, r3
 8002412:	4b6b      	ldr	r3, [pc, #428]	; (80025c0 <HAL_ADCEx_InjectedConvCpltCallback+0x338>)
 8002414:	486b      	ldr	r0, [pc, #428]	; (80025c4 <HAL_ADCEx_InjectedConvCpltCallback+0x33c>)
 8002416:	f7fe fbab 	bl	8000b70 <PI_REG>


							/**TRANSFORMATA ODWROTNA PARK'a**/
park_rev_transf(PI_VD_out, PI_VQ_out, pozycja_walu_deg,
 800241a:	4b69      	ldr	r3, [pc, #420]	; (80025c0 <HAL_ADCEx_InjectedConvCpltCallback+0x338>)
 800241c:	6818      	ldr	r0, [r3, #0]
 800241e:	4b65      	ldr	r3, [pc, #404]	; (80025b4 <HAL_ADCEx_InjectedConvCpltCallback+0x32c>)
 8002420:	6819      	ldr	r1, [r3, #0]
 8002422:	4b60      	ldr	r3, [pc, #384]	; (80025a4 <HAL_ADCEx_InjectedConvCpltCallback+0x31c>)
 8002424:	881b      	ldrh	r3, [r3, #0]
 8002426:	b29b      	uxth	r3, r3
 8002428:	b21a      	sxth	r2, r3
 800242a:	4b67      	ldr	r3, [pc, #412]	; (80025c8 <HAL_ADCEx_InjectedConvCpltCallback+0x340>)
 800242c:	9300      	str	r3, [sp, #0]
 800242e:	4b67      	ldr	r3, [pc, #412]	; (80025cc <HAL_ADCEx_InjectedConvCpltCallback+0x344>)
 8002430:	f7fe fcf2 	bl	8000e18 <park_rev_transf>
		(int32_t*)&napiecie_Ualpha, (int32_t*)&napiecie_Ubeta);

							/**TRANSFORMATA ODWROTNA CLARKA'a**/ //jesli SVPWM to ta transformata nie potrzena
napiecie_U_U = napiecie_Ualpha;
 8002434:	4b65      	ldr	r3, [pc, #404]	; (80025cc <HAL_ADCEx_InjectedConvCpltCallback+0x344>)
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	4a65      	ldr	r2, [pc, #404]	; (80025d0 <HAL_ADCEx_InjectedConvCpltCallback+0x348>)
 800243a:	6013      	str	r3, [r2, #0]
napiecie_U_V = ((napiecie_Ubeta * 1.73) - napiecie_Ualpha) * 0.5;
 800243c:	4b62      	ldr	r3, [pc, #392]	; (80025c8 <HAL_ADCEx_InjectedConvCpltCallback+0x340>)
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	4618      	mov	r0, r3
 8002442:	f7fe f965 	bl	8000710 <__aeabi_i2d>
 8002446:	a344      	add	r3, pc, #272	; (adr r3, 8002558 <HAL_ADCEx_InjectedConvCpltCallback+0x2d0>)
 8002448:	e9d3 2300 	ldrd	r2, r3, [r3]
 800244c:	f7fd fee4 	bl	8000218 <__aeabi_dmul>
 8002450:	4602      	mov	r2, r0
 8002452:	460b      	mov	r3, r1
 8002454:	4614      	mov	r4, r2
 8002456:	461d      	mov	r5, r3
 8002458:	4b5c      	ldr	r3, [pc, #368]	; (80025cc <HAL_ADCEx_InjectedConvCpltCallback+0x344>)
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	4618      	mov	r0, r3
 800245e:	f7fe f957 	bl	8000710 <__aeabi_i2d>
 8002462:	4602      	mov	r2, r0
 8002464:	460b      	mov	r3, r1
 8002466:	4620      	mov	r0, r4
 8002468:	4629      	mov	r1, r5
 800246a:	f7fe f803 	bl	8000474 <__aeabi_dsub>
 800246e:	4602      	mov	r2, r0
 8002470:	460b      	mov	r3, r1
 8002472:	4610      	mov	r0, r2
 8002474:	4619      	mov	r1, r3
 8002476:	f04f 0200 	mov.w	r2, #0
 800247a:	4b56      	ldr	r3, [pc, #344]	; (80025d4 <HAL_ADCEx_InjectedConvCpltCallback+0x34c>)
 800247c:	f7fd fecc 	bl	8000218 <__aeabi_dmul>
 8002480:	4602      	mov	r2, r0
 8002482:	460b      	mov	r3, r1
 8002484:	4610      	mov	r0, r2
 8002486:	4619      	mov	r1, r3
 8002488:	f7fe f9ac 	bl	80007e4 <__aeabi_d2iz>
 800248c:	4603      	mov	r3, r0
 800248e:	4a52      	ldr	r2, [pc, #328]	; (80025d8 <HAL_ADCEx_InjectedConvCpltCallback+0x350>)
 8002490:	6013      	str	r3, [r2, #0]
napiecie_U_W = ((-napiecie_Ubeta * 1.73) - napiecie_Ualpha) * 0.5;
 8002492:	4b4d      	ldr	r3, [pc, #308]	; (80025c8 <HAL_ADCEx_InjectedConvCpltCallback+0x340>)
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	425b      	negs	r3, r3
 8002498:	4618      	mov	r0, r3
 800249a:	f7fe f939 	bl	8000710 <__aeabi_i2d>
 800249e:	a32e      	add	r3, pc, #184	; (adr r3, 8002558 <HAL_ADCEx_InjectedConvCpltCallback+0x2d0>)
 80024a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024a4:	f7fd feb8 	bl	8000218 <__aeabi_dmul>
 80024a8:	4602      	mov	r2, r0
 80024aa:	460b      	mov	r3, r1
 80024ac:	4614      	mov	r4, r2
 80024ae:	461d      	mov	r5, r3
 80024b0:	4b46      	ldr	r3, [pc, #280]	; (80025cc <HAL_ADCEx_InjectedConvCpltCallback+0x344>)
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	4618      	mov	r0, r3
 80024b6:	f7fe f92b 	bl	8000710 <__aeabi_i2d>
 80024ba:	4602      	mov	r2, r0
 80024bc:	460b      	mov	r3, r1
 80024be:	4620      	mov	r0, r4
 80024c0:	4629      	mov	r1, r5
 80024c2:	f7fd ffd7 	bl	8000474 <__aeabi_dsub>
 80024c6:	4602      	mov	r2, r0
 80024c8:	460b      	mov	r3, r1
 80024ca:	4610      	mov	r0, r2
 80024cc:	4619      	mov	r1, r3
 80024ce:	f04f 0200 	mov.w	r2, #0
 80024d2:	4b40      	ldr	r3, [pc, #256]	; (80025d4 <HAL_ADCEx_InjectedConvCpltCallback+0x34c>)
 80024d4:	f7fd fea0 	bl	8000218 <__aeabi_dmul>
 80024d8:	4602      	mov	r2, r0
 80024da:	460b      	mov	r3, r1
 80024dc:	4610      	mov	r0, r2
 80024de:	4619      	mov	r1, r3
 80024e0:	f7fe f980 	bl	80007e4 <__aeabi_d2iz>
 80024e4:	4603      	mov	r3, r0
 80024e6:	4a3d      	ldr	r2, [pc, #244]	; (80025dc <HAL_ADCEx_InjectedConvCpltCallback+0x354>)
 80024e8:	6013      	str	r3, [r2, #0]

							/**MODULACJA PWM**/

SVPWM_modulacja(napiecie_Ualpha, napiecie_Ubeta, &U_SVPWM, &V_SVPWM, &W_SVPWM );
 80024ea:	4b38      	ldr	r3, [pc, #224]	; (80025cc <HAL_ADCEx_InjectedConvCpltCallback+0x344>)
 80024ec:	6818      	ldr	r0, [r3, #0]
 80024ee:	4b36      	ldr	r3, [pc, #216]	; (80025c8 <HAL_ADCEx_InjectedConvCpltCallback+0x340>)
 80024f0:	6819      	ldr	r1, [r3, #0]
 80024f2:	4b3b      	ldr	r3, [pc, #236]	; (80025e0 <HAL_ADCEx_InjectedConvCpltCallback+0x358>)
 80024f4:	9300      	str	r3, [sp, #0]
 80024f6:	4b3b      	ldr	r3, [pc, #236]	; (80025e4 <HAL_ADCEx_InjectedConvCpltCallback+0x35c>)
 80024f8:	4a3b      	ldr	r2, [pc, #236]	; (80025e8 <HAL_ADCEx_InjectedConvCpltCallback+0x360>)
 80024fa:	f7fe fd7d 	bl	8000ff8 <SVPWM_modulacja>


PWM_U = (uint16_t)((U_SVPWM) + 500); // 500 bo to 0.5PWM offset
 80024fe:	4b3a      	ldr	r3, [pc, #232]	; (80025e8 <HAL_ADCEx_InjectedConvCpltCallback+0x360>)
 8002500:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002504:	b29b      	uxth	r3, r3
 8002506:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800250a:	b29a      	uxth	r2, r3
 800250c:	4b37      	ldr	r3, [pc, #220]	; (80025ec <HAL_ADCEx_InjectedConvCpltCallback+0x364>)
 800250e:	801a      	strh	r2, [r3, #0]
PWM_V = (uint16_t)((V_SVPWM) + 500);
 8002510:	4b34      	ldr	r3, [pc, #208]	; (80025e4 <HAL_ADCEx_InjectedConvCpltCallback+0x35c>)
 8002512:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002516:	b29b      	uxth	r3, r3
 8002518:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800251c:	b29a      	uxth	r2, r3
 800251e:	4b34      	ldr	r3, [pc, #208]	; (80025f0 <HAL_ADCEx_InjectedConvCpltCallback+0x368>)
 8002520:	801a      	strh	r2, [r3, #0]
PWM_W = (uint16_t)((W_SVPWM) + 500);
 8002522:	4b2f      	ldr	r3, [pc, #188]	; (80025e0 <HAL_ADCEx_InjectedConvCpltCallback+0x358>)
 8002524:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002528:	b29b      	uxth	r3, r3
 800252a:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800252e:	b29a      	uxth	r2, r3
 8002530:	4b30      	ldr	r3, [pc, #192]	; (80025f4 <HAL_ADCEx_InjectedConvCpltCallback+0x36c>)
 8002532:	801a      	strh	r2, [r3, #0]

SPWM_modulacja();
 8002534:	f7fe fcd8 	bl	8000ee8 <SPWM_modulacja>
							/**pomocnicze**///25u
/*
Generacja_Sinusa();
SPWM_modulacja();
*/
SPI_bufor_rx[0]=0;
 8002538:	4b14      	ldr	r3, [pc, #80]	; (800258c <HAL_ADCEx_InjectedConvCpltCallback+0x304>)
 800253a:	2200      	movs	r2, #0
 800253c:	801a      	strh	r2, [r3, #0]


GPIOA->ODR &=~ 1<<5;
 800253e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8002542:	695b      	ldr	r3, [r3, #20]
 8002544:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8002548:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800254c:	6153      	str	r3, [r2, #20]

}
 800254e:	bf00      	nop
 8002550:	3710      	adds	r7, #16
 8002552:	46bd      	mov	sp, r7
 8002554:	bdb0      	pop	{r4, r5, r7, pc}
 8002556:	bf00      	nop
 8002558:	7ae147ae 	.word	0x7ae147ae
 800255c:	3ffbae14 	.word	0x3ffbae14
 8002560:	200000b0 	.word	0x200000b0
 8002564:	200000a0 	.word	0x200000a0
 8002568:	000f423f 	.word	0x000f423f
 800256c:	20000458 	.word	0x20000458
 8002570:	20000098 	.word	0x20000098
 8002574:	20000086 	.word	0x20000086
 8002578:	20000088 	.word	0x20000088
 800257c:	2000008a 	.word	0x2000008a
 8002580:	20000004 	.word	0x20000004
 8002584:	20000008 	.word	0x20000008
 8002588:	48000c00 	.word	0x48000c00
 800258c:	20000450 	.word	0x20000450
 8002590:	20000228 	.word	0x20000228
 8002594:	20000048 	.word	0x20000048
 8002598:	2000044c 	.word	0x2000044c
 800259c:	2000006a 	.word	0x2000006a
 80025a0:	20000068 	.word	0x20000068
 80025a4:	2000004a 	.word	0x2000004a
 80025a8:	20000066 	.word	0x20000066
 80025ac:	20000064 	.word	0x20000064
 80025b0:	2000005c 	.word	0x2000005c
 80025b4:	20000058 	.word	0x20000058
 80025b8:	20000468 	.word	0x20000468
 80025bc:	20000060 	.word	0x20000060
 80025c0:	20000054 	.word	0x20000054
 80025c4:	20000490 	.word	0x20000490
 80025c8:	20000070 	.word	0x20000070
 80025cc:	2000006c 	.word	0x2000006c
 80025d0:	20000074 	.word	0x20000074
 80025d4:	3fe00000 	.word	0x3fe00000
 80025d8:	20000078 	.word	0x20000078
 80025dc:	2000007c 	.word	0x2000007c
 80025e0:	20000090 	.word	0x20000090
 80025e4:	2000008e 	.word	0x2000008e
 80025e8:	2000008c 	.word	0x2000008c
 80025ec:	20000092 	.word	0x20000092
 80025f0:	20000094 	.word	0x20000094
 80025f4:	20000096 	.word	0x20000096

080025f8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80025f8:	b480      	push	{r7}
 80025fa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80025fc:	b672      	cpsid	i
}
 80025fe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002600:	e7fe      	b.n	8002600 <Error_Handler+0x8>
	...

08002604 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002604:	b580      	push	{r7, lr}
 8002606:	b082      	sub	sp, #8
 8002608:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800260a:	4b0f      	ldr	r3, [pc, #60]	; (8002648 <HAL_MspInit+0x44>)
 800260c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800260e:	4a0e      	ldr	r2, [pc, #56]	; (8002648 <HAL_MspInit+0x44>)
 8002610:	f043 0301 	orr.w	r3, r3, #1
 8002614:	6613      	str	r3, [r2, #96]	; 0x60
 8002616:	4b0c      	ldr	r3, [pc, #48]	; (8002648 <HAL_MspInit+0x44>)
 8002618:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800261a:	f003 0301 	and.w	r3, r3, #1
 800261e:	607b      	str	r3, [r7, #4]
 8002620:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002622:	4b09      	ldr	r3, [pc, #36]	; (8002648 <HAL_MspInit+0x44>)
 8002624:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002626:	4a08      	ldr	r2, [pc, #32]	; (8002648 <HAL_MspInit+0x44>)
 8002628:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800262c:	6593      	str	r3, [r2, #88]	; 0x58
 800262e:	4b06      	ldr	r3, [pc, #24]	; (8002648 <HAL_MspInit+0x44>)
 8002630:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002632:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002636:	603b      	str	r3, [r7, #0]
 8002638:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 800263a:	f004 f989 	bl	8006950 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800263e:	bf00      	nop
 8002640:	3708      	adds	r7, #8
 8002642:	46bd      	mov	sp, r7
 8002644:	bd80      	pop	{r7, pc}
 8002646:	bf00      	nop
 8002648:	40021000 	.word	0x40021000

0800264c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800264c:	b580      	push	{r7, lr}
 800264e:	b09e      	sub	sp, #120	; 0x78
 8002650:	af00      	add	r7, sp, #0
 8002652:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002654:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8002658:	2200      	movs	r2, #0
 800265a:	601a      	str	r2, [r3, #0]
 800265c:	605a      	str	r2, [r3, #4]
 800265e:	609a      	str	r2, [r3, #8]
 8002660:	60da      	str	r2, [r3, #12]
 8002662:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002664:	f107 0320 	add.w	r3, r7, #32
 8002668:	2244      	movs	r2, #68	; 0x44
 800266a:	2100      	movs	r1, #0
 800266c:	4618      	mov	r0, r3
 800266e:	f009 f819 	bl	800b6a4 <memset>
  if(hadc->Instance==ADC1)
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800267a:	d15e      	bne.n	800273a <HAL_ADC_MspInit+0xee>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 800267c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002680:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8002682:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8002686:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002688:	f107 0320 	add.w	r3, r7, #32
 800268c:	4618      	mov	r0, r3
 800268e:	f004 fea3 	bl	80073d8 <HAL_RCCEx_PeriphCLKConfig>
 8002692:	4603      	mov	r3, r0
 8002694:	2b00      	cmp	r3, #0
 8002696:	d001      	beq.n	800269c <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8002698:	f7ff ffae 	bl	80025f8 <Error_Handler>
    }

    /* Peripheral clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 800269c:	4b4e      	ldr	r3, [pc, #312]	; (80027d8 <HAL_ADC_MspInit+0x18c>)
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	3301      	adds	r3, #1
 80026a2:	4a4d      	ldr	r2, [pc, #308]	; (80027d8 <HAL_ADC_MspInit+0x18c>)
 80026a4:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 80026a6:	4b4c      	ldr	r3, [pc, #304]	; (80027d8 <HAL_ADC_MspInit+0x18c>)
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	2b01      	cmp	r3, #1
 80026ac:	d10b      	bne.n	80026c6 <HAL_ADC_MspInit+0x7a>
      __HAL_RCC_ADC12_CLK_ENABLE();
 80026ae:	4b4b      	ldr	r3, [pc, #300]	; (80027dc <HAL_ADC_MspInit+0x190>)
 80026b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80026b2:	4a4a      	ldr	r2, [pc, #296]	; (80027dc <HAL_ADC_MspInit+0x190>)
 80026b4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80026b8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80026ba:	4b48      	ldr	r3, [pc, #288]	; (80027dc <HAL_ADC_MspInit+0x190>)
 80026bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80026be:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80026c2:	61fb      	str	r3, [r7, #28]
 80026c4:	69fb      	ldr	r3, [r7, #28]
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80026c6:	4b45      	ldr	r3, [pc, #276]	; (80027dc <HAL_ADC_MspInit+0x190>)
 80026c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80026ca:	4a44      	ldr	r2, [pc, #272]	; (80027dc <HAL_ADC_MspInit+0x190>)
 80026cc:	f043 0304 	orr.w	r3, r3, #4
 80026d0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80026d2:	4b42      	ldr	r3, [pc, #264]	; (80027dc <HAL_ADC_MspInit+0x190>)
 80026d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80026d6:	f003 0304 	and.w	r3, r3, #4
 80026da:	61bb      	str	r3, [r7, #24]
 80026dc:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80026de:	4b3f      	ldr	r3, [pc, #252]	; (80027dc <HAL_ADC_MspInit+0x190>)
 80026e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80026e2:	4a3e      	ldr	r2, [pc, #248]	; (80027dc <HAL_ADC_MspInit+0x190>)
 80026e4:	f043 0301 	orr.w	r3, r3, #1
 80026e8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80026ea:	4b3c      	ldr	r3, [pc, #240]	; (80027dc <HAL_ADC_MspInit+0x190>)
 80026ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80026ee:	f003 0301 	and.w	r3, r3, #1
 80026f2:	617b      	str	r3, [r7, #20]
 80026f4:	697b      	ldr	r3, [r7, #20]
    PC0     ------> ADC1_IN6
    PC1     ------> ADC1_IN7
    PA0     ------> ADC1_IN1
    PA1     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80026f6:	2303      	movs	r3, #3
 80026f8:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80026fa:	2303      	movs	r3, #3
 80026fc:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026fe:	2300      	movs	r3, #0
 8002700:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002702:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8002706:	4619      	mov	r1, r3
 8002708:	4835      	ldr	r0, [pc, #212]	; (80027e0 <HAL_ADC_MspInit+0x194>)
 800270a:	f003 febf 	bl	800648c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800270e:	2303      	movs	r3, #3
 8002710:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002712:	2303      	movs	r3, #3
 8002714:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002716:	2300      	movs	r3, #0
 8002718:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800271a:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800271e:	4619      	mov	r1, r3
 8002720:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002724:	f003 feb2 	bl	800648c <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8002728:	2200      	movs	r2, #0
 800272a:	2100      	movs	r1, #0
 800272c:	2012      	movs	r0, #18
 800272e:	f003 f9d0 	bl	8005ad2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8002732:	2012      	movs	r0, #18
 8002734:	f003 f9e7 	bl	8005b06 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8002738:	e049      	b.n	80027ce <HAL_ADC_MspInit+0x182>
  else if(hadc->Instance==ADC2)
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	4a29      	ldr	r2, [pc, #164]	; (80027e4 <HAL_ADC_MspInit+0x198>)
 8002740:	4293      	cmp	r3, r2
 8002742:	d144      	bne.n	80027ce <HAL_ADC_MspInit+0x182>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8002744:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002748:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 800274a:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 800274e:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002750:	f107 0320 	add.w	r3, r7, #32
 8002754:	4618      	mov	r0, r3
 8002756:	f004 fe3f 	bl	80073d8 <HAL_RCCEx_PeriphCLKConfig>
 800275a:	4603      	mov	r3, r0
 800275c:	2b00      	cmp	r3, #0
 800275e:	d001      	beq.n	8002764 <HAL_ADC_MspInit+0x118>
      Error_Handler();
 8002760:	f7ff ff4a 	bl	80025f8 <Error_Handler>
    HAL_RCC_ADC12_CLK_ENABLED++;
 8002764:	4b1c      	ldr	r3, [pc, #112]	; (80027d8 <HAL_ADC_MspInit+0x18c>)
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	3301      	adds	r3, #1
 800276a:	4a1b      	ldr	r2, [pc, #108]	; (80027d8 <HAL_ADC_MspInit+0x18c>)
 800276c:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 800276e:	4b1a      	ldr	r3, [pc, #104]	; (80027d8 <HAL_ADC_MspInit+0x18c>)
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	2b01      	cmp	r3, #1
 8002774:	d10b      	bne.n	800278e <HAL_ADC_MspInit+0x142>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8002776:	4b19      	ldr	r3, [pc, #100]	; (80027dc <HAL_ADC_MspInit+0x190>)
 8002778:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800277a:	4a18      	ldr	r2, [pc, #96]	; (80027dc <HAL_ADC_MspInit+0x190>)
 800277c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002780:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002782:	4b16      	ldr	r3, [pc, #88]	; (80027dc <HAL_ADC_MspInit+0x190>)
 8002784:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002786:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800278a:	613b      	str	r3, [r7, #16]
 800278c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800278e:	4b13      	ldr	r3, [pc, #76]	; (80027dc <HAL_ADC_MspInit+0x190>)
 8002790:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002792:	4a12      	ldr	r2, [pc, #72]	; (80027dc <HAL_ADC_MspInit+0x190>)
 8002794:	f043 0304 	orr.w	r3, r3, #4
 8002798:	64d3      	str	r3, [r2, #76]	; 0x4c
 800279a:	4b10      	ldr	r3, [pc, #64]	; (80027dc <HAL_ADC_MspInit+0x190>)
 800279c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800279e:	f003 0304 	and.w	r3, r3, #4
 80027a2:	60fb      	str	r3, [r7, #12]
 80027a4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80027a6:	2304      	movs	r3, #4
 80027a8:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80027aa:	2303      	movs	r3, #3
 80027ac:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027ae:	2300      	movs	r3, #0
 80027b0:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80027b2:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80027b6:	4619      	mov	r1, r3
 80027b8:	4809      	ldr	r0, [pc, #36]	; (80027e0 <HAL_ADC_MspInit+0x194>)
 80027ba:	f003 fe67 	bl	800648c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 80027be:	2200      	movs	r2, #0
 80027c0:	2100      	movs	r1, #0
 80027c2:	2012      	movs	r0, #18
 80027c4:	f003 f985 	bl	8005ad2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 80027c8:	2012      	movs	r0, #18
 80027ca:	f003 f99c 	bl	8005b06 <HAL_NVIC_EnableIRQ>
}
 80027ce:	bf00      	nop
 80027d0:	3778      	adds	r7, #120	; 0x78
 80027d2:	46bd      	mov	sp, r7
 80027d4:	bd80      	pop	{r7, pc}
 80027d6:	bf00      	nop
 80027d8:	200004b8 	.word	0x200004b8
 80027dc:	40021000 	.word	0x40021000
 80027e0:	48000800 	.word	0x48000800
 80027e4:	50000100 	.word	0x50000100

080027e8 <HAL_CORDIC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcordic: CORDIC handle pointer
* @retval None
*/
void HAL_CORDIC_MspInit(CORDIC_HandleTypeDef* hcordic)
{
 80027e8:	b480      	push	{r7}
 80027ea:	b085      	sub	sp, #20
 80027ec:	af00      	add	r7, sp, #0
 80027ee:	6078      	str	r0, [r7, #4]
  if(hcordic->Instance==CORDIC)
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	4a0a      	ldr	r2, [pc, #40]	; (8002820 <HAL_CORDIC_MspInit+0x38>)
 80027f6:	4293      	cmp	r3, r2
 80027f8:	d10b      	bne.n	8002812 <HAL_CORDIC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CORDIC_MspInit 0 */

  /* USER CODE END CORDIC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CORDIC_CLK_ENABLE();
 80027fa:	4b0a      	ldr	r3, [pc, #40]	; (8002824 <HAL_CORDIC_MspInit+0x3c>)
 80027fc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80027fe:	4a09      	ldr	r2, [pc, #36]	; (8002824 <HAL_CORDIC_MspInit+0x3c>)
 8002800:	f043 0308 	orr.w	r3, r3, #8
 8002804:	6493      	str	r3, [r2, #72]	; 0x48
 8002806:	4b07      	ldr	r3, [pc, #28]	; (8002824 <HAL_CORDIC_MspInit+0x3c>)
 8002808:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800280a:	f003 0308 	and.w	r3, r3, #8
 800280e:	60fb      	str	r3, [r7, #12]
 8002810:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CORDIC_MspInit 1 */

  /* USER CODE END CORDIC_MspInit 1 */
  }

}
 8002812:	bf00      	nop
 8002814:	3714      	adds	r7, #20
 8002816:	46bd      	mov	sp, r7
 8002818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800281c:	4770      	bx	lr
 800281e:	bf00      	nop
 8002820:	40020c00 	.word	0x40020c00
 8002824:	40021000 	.word	0x40021000

08002828 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8002828:	b580      	push	{r7, lr}
 800282a:	b08a      	sub	sp, #40	; 0x28
 800282c:	af00      	add	r7, sp, #0
 800282e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002830:	f107 0314 	add.w	r3, r7, #20
 8002834:	2200      	movs	r2, #0
 8002836:	601a      	str	r2, [r3, #0]
 8002838:	605a      	str	r2, [r3, #4]
 800283a:	609a      	str	r2, [r3, #8]
 800283c:	60da      	str	r2, [r3, #12]
 800283e:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	4a19      	ldr	r2, [pc, #100]	; (80028ac <HAL_DAC_MspInit+0x84>)
 8002846:	4293      	cmp	r3, r2
 8002848:	d12c      	bne.n	80028a4 <HAL_DAC_MspInit+0x7c>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 800284a:	4b19      	ldr	r3, [pc, #100]	; (80028b0 <HAL_DAC_MspInit+0x88>)
 800284c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800284e:	4a18      	ldr	r2, [pc, #96]	; (80028b0 <HAL_DAC_MspInit+0x88>)
 8002850:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002854:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002856:	4b16      	ldr	r3, [pc, #88]	; (80028b0 <HAL_DAC_MspInit+0x88>)
 8002858:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800285a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800285e:	613b      	str	r3, [r7, #16]
 8002860:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002862:	4b13      	ldr	r3, [pc, #76]	; (80028b0 <HAL_DAC_MspInit+0x88>)
 8002864:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002866:	4a12      	ldr	r2, [pc, #72]	; (80028b0 <HAL_DAC_MspInit+0x88>)
 8002868:	f043 0301 	orr.w	r3, r3, #1
 800286c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800286e:	4b10      	ldr	r3, [pc, #64]	; (80028b0 <HAL_DAC_MspInit+0x88>)
 8002870:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002872:	f003 0301 	and.w	r3, r3, #1
 8002876:	60fb      	str	r3, [r7, #12]
 8002878:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800287a:	2310      	movs	r3, #16
 800287c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800287e:	2303      	movs	r3, #3
 8002880:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002882:	2300      	movs	r3, #0
 8002884:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002886:	f107 0314 	add.w	r3, r7, #20
 800288a:	4619      	mov	r1, r3
 800288c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002890:	f003 fdfc 	bl	800648c <HAL_GPIO_Init>

    /* DAC1 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8002894:	2200      	movs	r2, #0
 8002896:	2100      	movs	r1, #0
 8002898:	2036      	movs	r0, #54	; 0x36
 800289a:	f003 f91a 	bl	8005ad2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800289e:	2036      	movs	r0, #54	; 0x36
 80028a0:	f003 f931 	bl	8005b06 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 80028a4:	bf00      	nop
 80028a6:	3728      	adds	r7, #40	; 0x28
 80028a8:	46bd      	mov	sp, r7
 80028aa:	bd80      	pop	{r7, pc}
 80028ac:	50000800 	.word	0x50000800
 80028b0:	40021000 	.word	0x40021000

080028b4 <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 80028b4:	b580      	push	{r7, lr}
 80028b6:	b09a      	sub	sp, #104	; 0x68
 80028b8:	af00      	add	r7, sp, #0
 80028ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80028bc:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80028c0:	2200      	movs	r2, #0
 80028c2:	601a      	str	r2, [r3, #0]
 80028c4:	605a      	str	r2, [r3, #4]
 80028c6:	609a      	str	r2, [r3, #8]
 80028c8:	60da      	str	r2, [r3, #12]
 80028ca:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80028cc:	f107 0310 	add.w	r3, r7, #16
 80028d0:	2244      	movs	r2, #68	; 0x44
 80028d2:	2100      	movs	r1, #0
 80028d4:	4618      	mov	r0, r3
 80028d6:	f008 fee5 	bl	800b6a4 <memset>
  if(hfdcan->Instance==FDCAN1)
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	4a20      	ldr	r2, [pc, #128]	; (8002960 <HAL_FDCAN_MspInit+0xac>)
 80028e0:	4293      	cmp	r3, r2
 80028e2:	d139      	bne.n	8002958 <HAL_FDCAN_MspInit+0xa4>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 80028e4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80028e8:	613b      	str	r3, [r7, #16]
    PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PCLK1;
 80028ea:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80028ee:	643b      	str	r3, [r7, #64]	; 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80028f0:	f107 0310 	add.w	r3, r7, #16
 80028f4:	4618      	mov	r0, r3
 80028f6:	f004 fd6f 	bl	80073d8 <HAL_RCCEx_PeriphCLKConfig>
 80028fa:	4603      	mov	r3, r0
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d001      	beq.n	8002904 <HAL_FDCAN_MspInit+0x50>
    {
      Error_Handler();
 8002900:	f7ff fe7a 	bl	80025f8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 8002904:	4b17      	ldr	r3, [pc, #92]	; (8002964 <HAL_FDCAN_MspInit+0xb0>)
 8002906:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002908:	4a16      	ldr	r2, [pc, #88]	; (8002964 <HAL_FDCAN_MspInit+0xb0>)
 800290a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800290e:	6593      	str	r3, [r2, #88]	; 0x58
 8002910:	4b14      	ldr	r3, [pc, #80]	; (8002964 <HAL_FDCAN_MspInit+0xb0>)
 8002912:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002914:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002918:	60fb      	str	r3, [r7, #12]
 800291a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800291c:	4b11      	ldr	r3, [pc, #68]	; (8002964 <HAL_FDCAN_MspInit+0xb0>)
 800291e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002920:	4a10      	ldr	r2, [pc, #64]	; (8002964 <HAL_FDCAN_MspInit+0xb0>)
 8002922:	f043 0301 	orr.w	r3, r3, #1
 8002926:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002928:	4b0e      	ldr	r3, [pc, #56]	; (8002964 <HAL_FDCAN_MspInit+0xb0>)
 800292a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800292c:	f003 0301 	and.w	r3, r3, #1
 8002930:	60bb      	str	r3, [r7, #8]
 8002932:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN1 GPIO Configuration
    PA11     ------> FDCAN1_RX
    PA12     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8002934:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8002938:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800293a:	2302      	movs	r3, #2
 800293c:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800293e:	2300      	movs	r3, #0
 8002940:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002942:	2300      	movs	r3, #0
 8002944:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8002946:	2309      	movs	r3, #9
 8002948:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800294a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800294e:	4619      	mov	r1, r3
 8002950:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002954:	f003 fd9a 	bl	800648c <HAL_GPIO_Init>
  /* USER CODE BEGIN FDCAN1_MspInit 1 */

  /* USER CODE END FDCAN1_MspInit 1 */
  }

}
 8002958:	bf00      	nop
 800295a:	3768      	adds	r7, #104	; 0x68
 800295c:	46bd      	mov	sp, r7
 800295e:	bd80      	pop	{r7, pc}
 8002960:	40006400 	.word	0x40006400
 8002964:	40021000 	.word	0x40021000

08002968 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002968:	b580      	push	{r7, lr}
 800296a:	b08a      	sub	sp, #40	; 0x28
 800296c:	af00      	add	r7, sp, #0
 800296e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002970:	f107 0314 	add.w	r3, r7, #20
 8002974:	2200      	movs	r2, #0
 8002976:	601a      	str	r2, [r3, #0]
 8002978:	605a      	str	r2, [r3, #4]
 800297a:	609a      	str	r2, [r3, #8]
 800297c:	60da      	str	r2, [r3, #12]
 800297e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	4a17      	ldr	r2, [pc, #92]	; (80029e4 <HAL_SPI_MspInit+0x7c>)
 8002986:	4293      	cmp	r3, r2
 8002988:	d128      	bne.n	80029dc <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 800298a:	4b17      	ldr	r3, [pc, #92]	; (80029e8 <HAL_SPI_MspInit+0x80>)
 800298c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800298e:	4a16      	ldr	r2, [pc, #88]	; (80029e8 <HAL_SPI_MspInit+0x80>)
 8002990:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002994:	6593      	str	r3, [r2, #88]	; 0x58
 8002996:	4b14      	ldr	r3, [pc, #80]	; (80029e8 <HAL_SPI_MspInit+0x80>)
 8002998:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800299a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800299e:	613b      	str	r3, [r7, #16]
 80029a0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80029a2:	4b11      	ldr	r3, [pc, #68]	; (80029e8 <HAL_SPI_MspInit+0x80>)
 80029a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80029a6:	4a10      	ldr	r2, [pc, #64]	; (80029e8 <HAL_SPI_MspInit+0x80>)
 80029a8:	f043 0304 	orr.w	r3, r3, #4
 80029ac:	64d3      	str	r3, [r2, #76]	; 0x4c
 80029ae:	4b0e      	ldr	r3, [pc, #56]	; (80029e8 <HAL_SPI_MspInit+0x80>)
 80029b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80029b2:	f003 0304 	and.w	r3, r3, #4
 80029b6:	60fb      	str	r3, [r7, #12]
 80029b8:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 80029ba:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80029be:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029c0:	2302      	movs	r3, #2
 80029c2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029c4:	2300      	movs	r3, #0
 80029c6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029c8:	2300      	movs	r3, #0
 80029ca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80029cc:	2306      	movs	r3, #6
 80029ce:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80029d0:	f107 0314 	add.w	r3, r7, #20
 80029d4:	4619      	mov	r1, r3
 80029d6:	4805      	ldr	r0, [pc, #20]	; (80029ec <HAL_SPI_MspInit+0x84>)
 80029d8:	f003 fd58 	bl	800648c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 80029dc:	bf00      	nop
 80029de:	3728      	adds	r7, #40	; 0x28
 80029e0:	46bd      	mov	sp, r7
 80029e2:	bd80      	pop	{r7, pc}
 80029e4:	40003c00 	.word	0x40003c00
 80029e8:	40021000 	.word	0x40021000
 80029ec:	48000800 	.word	0x48000800

080029f0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80029f0:	b580      	push	{r7, lr}
 80029f2:	b086      	sub	sp, #24
 80029f4:	af00      	add	r7, sp, #0
 80029f6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	4a33      	ldr	r2, [pc, #204]	; (8002acc <HAL_TIM_Base_MspInit+0xdc>)
 80029fe:	4293      	cmp	r3, r2
 8002a00:	d12c      	bne.n	8002a5c <HAL_TIM_Base_MspInit+0x6c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002a02:	4b33      	ldr	r3, [pc, #204]	; (8002ad0 <HAL_TIM_Base_MspInit+0xe0>)
 8002a04:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002a06:	4a32      	ldr	r2, [pc, #200]	; (8002ad0 <HAL_TIM_Base_MspInit+0xe0>)
 8002a08:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002a0c:	6613      	str	r3, [r2, #96]	; 0x60
 8002a0e:	4b30      	ldr	r3, [pc, #192]	; (8002ad0 <HAL_TIM_Base_MspInit+0xe0>)
 8002a10:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002a12:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002a16:	617b      	str	r3, [r7, #20]
 8002a18:	697b      	ldr	r3, [r7, #20]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 0, 0);
 8002a1a:	2200      	movs	r2, #0
 8002a1c:	2100      	movs	r1, #0
 8002a1e:	2018      	movs	r0, #24
 8002a20:	f003 f857 	bl	8005ad2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 8002a24:	2018      	movs	r0, #24
 8002a26:	f003 f86e 	bl	8005b06 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8002a2a:	2200      	movs	r2, #0
 8002a2c:	2100      	movs	r1, #0
 8002a2e:	2019      	movs	r0, #25
 8002a30:	f003 f84f 	bl	8005ad2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8002a34:	2019      	movs	r0, #25
 8002a36:	f003 f866 	bl	8005b06 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, 0, 0);
 8002a3a:	2200      	movs	r2, #0
 8002a3c:	2100      	movs	r1, #0
 8002a3e:	201a      	movs	r0, #26
 8002a40:	f003 f847 	bl	8005ad2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 8002a44:	201a      	movs	r0, #26
 8002a46:	f003 f85e 	bl	8005b06 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 8002a4a:	2200      	movs	r2, #0
 8002a4c:	2100      	movs	r1, #0
 8002a4e:	201b      	movs	r0, #27
 8002a50:	f003 f83f 	bl	8005ad2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8002a54:	201b      	movs	r0, #27
 8002a56:	f003 f856 	bl	8005b06 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }

}
 8002a5a:	e032      	b.n	8002ac2 <HAL_TIM_Base_MspInit+0xd2>
  else if(htim_base->Instance==TIM6)
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	4a1c      	ldr	r2, [pc, #112]	; (8002ad4 <HAL_TIM_Base_MspInit+0xe4>)
 8002a62:	4293      	cmp	r3, r2
 8002a64:	d114      	bne.n	8002a90 <HAL_TIM_Base_MspInit+0xa0>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8002a66:	4b1a      	ldr	r3, [pc, #104]	; (8002ad0 <HAL_TIM_Base_MspInit+0xe0>)
 8002a68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a6a:	4a19      	ldr	r2, [pc, #100]	; (8002ad0 <HAL_TIM_Base_MspInit+0xe0>)
 8002a6c:	f043 0310 	orr.w	r3, r3, #16
 8002a70:	6593      	str	r3, [r2, #88]	; 0x58
 8002a72:	4b17      	ldr	r3, [pc, #92]	; (8002ad0 <HAL_TIM_Base_MspInit+0xe0>)
 8002a74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a76:	f003 0310 	and.w	r3, r3, #16
 8002a7a:	613b      	str	r3, [r7, #16]
 8002a7c:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8002a7e:	2200      	movs	r2, #0
 8002a80:	2100      	movs	r1, #0
 8002a82:	2036      	movs	r0, #54	; 0x36
 8002a84:	f003 f825 	bl	8005ad2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002a88:	2036      	movs	r0, #54	; 0x36
 8002a8a:	f003 f83c 	bl	8005b06 <HAL_NVIC_EnableIRQ>
}
 8002a8e:	e018      	b.n	8002ac2 <HAL_TIM_Base_MspInit+0xd2>
  else if(htim_base->Instance==TIM17)
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	4a10      	ldr	r2, [pc, #64]	; (8002ad8 <HAL_TIM_Base_MspInit+0xe8>)
 8002a96:	4293      	cmp	r3, r2
 8002a98:	d113      	bne.n	8002ac2 <HAL_TIM_Base_MspInit+0xd2>
    __HAL_RCC_TIM17_CLK_ENABLE();
 8002a9a:	4b0d      	ldr	r3, [pc, #52]	; (8002ad0 <HAL_TIM_Base_MspInit+0xe0>)
 8002a9c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002a9e:	4a0c      	ldr	r2, [pc, #48]	; (8002ad0 <HAL_TIM_Base_MspInit+0xe0>)
 8002aa0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002aa4:	6613      	str	r3, [r2, #96]	; 0x60
 8002aa6:	4b0a      	ldr	r3, [pc, #40]	; (8002ad0 <HAL_TIM_Base_MspInit+0xe0>)
 8002aa8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002aaa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002aae:	60fb      	str	r3, [r7, #12]
 8002ab0:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, 0, 0);
 8002ab2:	2200      	movs	r2, #0
 8002ab4:	2100      	movs	r1, #0
 8002ab6:	201a      	movs	r0, #26
 8002ab8:	f003 f80b 	bl	8005ad2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 8002abc:	201a      	movs	r0, #26
 8002abe:	f003 f822 	bl	8005b06 <HAL_NVIC_EnableIRQ>
}
 8002ac2:	bf00      	nop
 8002ac4:	3718      	adds	r7, #24
 8002ac6:	46bd      	mov	sp, r7
 8002ac8:	bd80      	pop	{r7, pc}
 8002aca:	bf00      	nop
 8002acc:	40012c00 	.word	0x40012c00
 8002ad0:	40021000 	.word	0x40021000
 8002ad4:	40001000 	.word	0x40001000
 8002ad8:	40014800 	.word	0x40014800

08002adc <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8002adc:	b580      	push	{r7, lr}
 8002ade:	b08a      	sub	sp, #40	; 0x28
 8002ae0:	af00      	add	r7, sp, #0
 8002ae2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ae4:	f107 0314 	add.w	r3, r7, #20
 8002ae8:	2200      	movs	r2, #0
 8002aea:	601a      	str	r2, [r3, #0]
 8002aec:	605a      	str	r2, [r3, #4]
 8002aee:	609a      	str	r2, [r3, #8]
 8002af0:	60da      	str	r2, [r3, #12]
 8002af2:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002afc:	d14d      	bne.n	8002b9a <HAL_TIM_Encoder_MspInit+0xbe>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002afe:	4b29      	ldr	r3, [pc, #164]	; (8002ba4 <HAL_TIM_Encoder_MspInit+0xc8>)
 8002b00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b02:	4a28      	ldr	r2, [pc, #160]	; (8002ba4 <HAL_TIM_Encoder_MspInit+0xc8>)
 8002b04:	f043 0301 	orr.w	r3, r3, #1
 8002b08:	6593      	str	r3, [r2, #88]	; 0x58
 8002b0a:	4b26      	ldr	r3, [pc, #152]	; (8002ba4 <HAL_TIM_Encoder_MspInit+0xc8>)
 8002b0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b0e:	f003 0301 	and.w	r3, r3, #1
 8002b12:	613b      	str	r3, [r7, #16]
 8002b14:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b16:	4b23      	ldr	r3, [pc, #140]	; (8002ba4 <HAL_TIM_Encoder_MspInit+0xc8>)
 8002b18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b1a:	4a22      	ldr	r2, [pc, #136]	; (8002ba4 <HAL_TIM_Encoder_MspInit+0xc8>)
 8002b1c:	f043 0301 	orr.w	r3, r3, #1
 8002b20:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002b22:	4b20      	ldr	r3, [pc, #128]	; (8002ba4 <HAL_TIM_Encoder_MspInit+0xc8>)
 8002b24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b26:	f003 0301 	and.w	r3, r3, #1
 8002b2a:	60fb      	str	r3, [r7, #12]
 8002b2c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002b2e:	4b1d      	ldr	r3, [pc, #116]	; (8002ba4 <HAL_TIM_Encoder_MspInit+0xc8>)
 8002b30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b32:	4a1c      	ldr	r2, [pc, #112]	; (8002ba4 <HAL_TIM_Encoder_MspInit+0xc8>)
 8002b34:	f043 0302 	orr.w	r3, r3, #2
 8002b38:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002b3a:	4b1a      	ldr	r3, [pc, #104]	; (8002ba4 <HAL_TIM_Encoder_MspInit+0xc8>)
 8002b3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b3e:	f003 0302 	and.w	r3, r3, #2
 8002b42:	60bb      	str	r3, [r7, #8]
 8002b44:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8002b46:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002b4a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b4c:	2302      	movs	r3, #2
 8002b4e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b50:	2300      	movs	r3, #0
 8002b52:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b54:	2300      	movs	r3, #0
 8002b56:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002b58:	2301      	movs	r3, #1
 8002b5a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b5c:	f107 0314 	add.w	r3, r7, #20
 8002b60:	4619      	mov	r1, r3
 8002b62:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002b66:	f003 fc91 	bl	800648c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002b6a:	2308      	movs	r3, #8
 8002b6c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b6e:	2302      	movs	r3, #2
 8002b70:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b72:	2300      	movs	r3, #0
 8002b74:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b76:	2300      	movs	r3, #0
 8002b78:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002b7a:	2301      	movs	r3, #1
 8002b7c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002b7e:	f107 0314 	add.w	r3, r7, #20
 8002b82:	4619      	mov	r1, r3
 8002b84:	4808      	ldr	r0, [pc, #32]	; (8002ba8 <HAL_TIM_Encoder_MspInit+0xcc>)
 8002b86:	f003 fc81 	bl	800648c <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8002b8a:	2200      	movs	r2, #0
 8002b8c:	2100      	movs	r1, #0
 8002b8e:	201c      	movs	r0, #28
 8002b90:	f002 ff9f 	bl	8005ad2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002b94:	201c      	movs	r0, #28
 8002b96:	f002 ffb6 	bl	8005b06 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8002b9a:	bf00      	nop
 8002b9c:	3728      	adds	r7, #40	; 0x28
 8002b9e:	46bd      	mov	sp, r7
 8002ba0:	bd80      	pop	{r7, pc}
 8002ba2:	bf00      	nop
 8002ba4:	40021000 	.word	0x40021000
 8002ba8:	48000400 	.word	0x48000400

08002bac <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002bac:	b580      	push	{r7, lr}
 8002bae:	b08a      	sub	sp, #40	; 0x28
 8002bb0:	af00      	add	r7, sp, #0
 8002bb2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002bb4:	f107 0314 	add.w	r3, r7, #20
 8002bb8:	2200      	movs	r2, #0
 8002bba:	601a      	str	r2, [r3, #0]
 8002bbc:	605a      	str	r2, [r3, #4]
 8002bbe:	609a      	str	r2, [r3, #8]
 8002bc0:	60da      	str	r2, [r3, #12]
 8002bc2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	4a20      	ldr	r2, [pc, #128]	; (8002c4c <HAL_TIM_MspPostInit+0xa0>)
 8002bca:	4293      	cmp	r3, r2
 8002bcc:	d139      	bne.n	8002c42 <HAL_TIM_MspPostInit+0x96>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002bce:	4b20      	ldr	r3, [pc, #128]	; (8002c50 <HAL_TIM_MspPostInit+0xa4>)
 8002bd0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002bd2:	4a1f      	ldr	r2, [pc, #124]	; (8002c50 <HAL_TIM_MspPostInit+0xa4>)
 8002bd4:	f043 0301 	orr.w	r3, r3, #1
 8002bd8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002bda:	4b1d      	ldr	r3, [pc, #116]	; (8002c50 <HAL_TIM_MspPostInit+0xa4>)
 8002bdc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002bde:	f003 0301 	and.w	r3, r3, #1
 8002be2:	613b      	str	r3, [r7, #16]
 8002be4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002be6:	4b1a      	ldr	r3, [pc, #104]	; (8002c50 <HAL_TIM_MspPostInit+0xa4>)
 8002be8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002bea:	4a19      	ldr	r2, [pc, #100]	; (8002c50 <HAL_TIM_MspPostInit+0xa4>)
 8002bec:	f043 0302 	orr.w	r3, r3, #2
 8002bf0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002bf2:	4b17      	ldr	r3, [pc, #92]	; (8002c50 <HAL_TIM_MspPostInit+0xa4>)
 8002bf4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002bf6:	f003 0302 	and.w	r3, r3, #2
 8002bfa:	60fb      	str	r3, [r7, #12]
 8002bfc:	68fb      	ldr	r3, [r7, #12]
    PB1     ------> TIM1_CH3N
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 8002bfe:	f44f 63f0 	mov.w	r3, #1920	; 0x780
 8002c02:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c04:	2302      	movs	r3, #2
 8002c06:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c08:	2300      	movs	r3, #0
 8002c0a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c0c:	2300      	movs	r3, #0
 8002c0e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8002c10:	2306      	movs	r3, #6
 8002c12:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c14:	f107 0314 	add.w	r3, r7, #20
 8002c18:	4619      	mov	r1, r3
 8002c1a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002c1e:	f003 fc35 	bl	800648c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002c22:	2303      	movs	r3, #3
 8002c24:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c26:	2302      	movs	r3, #2
 8002c28:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c2a:	2300      	movs	r3, #0
 8002c2c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c2e:	2300      	movs	r3, #0
 8002c30:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8002c32:	2306      	movs	r3, #6
 8002c34:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002c36:	f107 0314 	add.w	r3, r7, #20
 8002c3a:	4619      	mov	r1, r3
 8002c3c:	4805      	ldr	r0, [pc, #20]	; (8002c54 <HAL_TIM_MspPostInit+0xa8>)
 8002c3e:	f003 fc25 	bl	800648c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8002c42:	bf00      	nop
 8002c44:	3728      	adds	r7, #40	; 0x28
 8002c46:	46bd      	mov	sp, r7
 8002c48:	bd80      	pop	{r7, pc}
 8002c4a:	bf00      	nop
 8002c4c:	40012c00 	.word	0x40012c00
 8002c50:	40021000 	.word	0x40021000
 8002c54:	48000400 	.word	0x48000400

08002c58 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002c58:	b580      	push	{r7, lr}
 8002c5a:	b09a      	sub	sp, #104	; 0x68
 8002c5c:	af00      	add	r7, sp, #0
 8002c5e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c60:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002c64:	2200      	movs	r2, #0
 8002c66:	601a      	str	r2, [r3, #0]
 8002c68:	605a      	str	r2, [r3, #4]
 8002c6a:	609a      	str	r2, [r3, #8]
 8002c6c:	60da      	str	r2, [r3, #12]
 8002c6e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002c70:	f107 0310 	add.w	r3, r7, #16
 8002c74:	2244      	movs	r2, #68	; 0x44
 8002c76:	2100      	movs	r1, #0
 8002c78:	4618      	mov	r0, r3
 8002c7a:	f008 fd13 	bl	800b6a4 <memset>
  if(huart->Instance==USART1)
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	4a22      	ldr	r2, [pc, #136]	; (8002d0c <HAL_UART_MspInit+0xb4>)
 8002c84:	4293      	cmp	r3, r2
 8002c86:	d13d      	bne.n	8002d04 <HAL_UART_MspInit+0xac>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002c88:	2301      	movs	r3, #1
 8002c8a:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8002c8c:	2300      	movs	r3, #0
 8002c8e:	617b      	str	r3, [r7, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002c90:	f107 0310 	add.w	r3, r7, #16
 8002c94:	4618      	mov	r0, r3
 8002c96:	f004 fb9f 	bl	80073d8 <HAL_RCCEx_PeriphCLKConfig>
 8002c9a:	4603      	mov	r3, r0
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d001      	beq.n	8002ca4 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8002ca0:	f7ff fcaa 	bl	80025f8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002ca4:	4b1a      	ldr	r3, [pc, #104]	; (8002d10 <HAL_UART_MspInit+0xb8>)
 8002ca6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002ca8:	4a19      	ldr	r2, [pc, #100]	; (8002d10 <HAL_UART_MspInit+0xb8>)
 8002caa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002cae:	6613      	str	r3, [r2, #96]	; 0x60
 8002cb0:	4b17      	ldr	r3, [pc, #92]	; (8002d10 <HAL_UART_MspInit+0xb8>)
 8002cb2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002cb4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002cb8:	60fb      	str	r3, [r7, #12]
 8002cba:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002cbc:	4b14      	ldr	r3, [pc, #80]	; (8002d10 <HAL_UART_MspInit+0xb8>)
 8002cbe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002cc0:	4a13      	ldr	r2, [pc, #76]	; (8002d10 <HAL_UART_MspInit+0xb8>)
 8002cc2:	f043 0304 	orr.w	r3, r3, #4
 8002cc6:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002cc8:	4b11      	ldr	r3, [pc, #68]	; (8002d10 <HAL_UART_MspInit+0xb8>)
 8002cca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ccc:	f003 0304 	and.w	r3, r3, #4
 8002cd0:	60bb      	str	r3, [r7, #8]
 8002cd2:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PC4     ------> USART1_TX
    PC5     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8002cd4:	2330      	movs	r3, #48	; 0x30
 8002cd6:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002cd8:	2302      	movs	r3, #2
 8002cda:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cdc:	2300      	movs	r3, #0
 8002cde:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ce0:	2300      	movs	r3, #0
 8002ce2:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002ce4:	2307      	movs	r3, #7
 8002ce6:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002ce8:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002cec:	4619      	mov	r1, r3
 8002cee:	4809      	ldr	r0, [pc, #36]	; (8002d14 <HAL_UART_MspInit+0xbc>)
 8002cf0:	f003 fbcc 	bl	800648c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002cf4:	2200      	movs	r2, #0
 8002cf6:	2100      	movs	r1, #0
 8002cf8:	2025      	movs	r0, #37	; 0x25
 8002cfa:	f002 feea 	bl	8005ad2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002cfe:	2025      	movs	r0, #37	; 0x25
 8002d00:	f002 ff01 	bl	8005b06 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8002d04:	bf00      	nop
 8002d06:	3768      	adds	r7, #104	; 0x68
 8002d08:	46bd      	mov	sp, r7
 8002d0a:	bd80      	pop	{r7, pc}
 8002d0c:	40013800 	.word	0x40013800
 8002d10:	40021000 	.word	0x40021000
 8002d14:	48000800 	.word	0x48000800

08002d18 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002d18:	b480      	push	{r7}
 8002d1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002d1c:	e7fe      	b.n	8002d1c <NMI_Handler+0x4>

08002d1e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002d1e:	b480      	push	{r7}
 8002d20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002d22:	e7fe      	b.n	8002d22 <HardFault_Handler+0x4>

08002d24 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002d24:	b480      	push	{r7}
 8002d26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002d28:	e7fe      	b.n	8002d28 <MemManage_Handler+0x4>

08002d2a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002d2a:	b480      	push	{r7}
 8002d2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002d2e:	e7fe      	b.n	8002d2e <BusFault_Handler+0x4>

08002d30 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002d30:	b480      	push	{r7}
 8002d32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002d34:	e7fe      	b.n	8002d34 <UsageFault_Handler+0x4>

08002d36 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002d36:	b480      	push	{r7}
 8002d38:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002d3a:	bf00      	nop
 8002d3c:	46bd      	mov	sp, r7
 8002d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d42:	4770      	bx	lr

08002d44 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002d44:	b480      	push	{r7}
 8002d46:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002d48:	bf00      	nop
 8002d4a:	46bd      	mov	sp, r7
 8002d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d50:	4770      	bx	lr

08002d52 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002d52:	b480      	push	{r7}
 8002d54:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002d56:	bf00      	nop
 8002d58:	46bd      	mov	sp, r7
 8002d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d5e:	4770      	bx	lr

08002d60 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002d60:	b580      	push	{r7, lr}
 8002d62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	static int16_t start=2000, start_speed, count_10ms,
			poz_x, poz_pop, poz_pop_cal,licznik_10ms, licznik_100ms;
	uint8_t loop_time;

	start_speed++;
 8002d64:	4b69      	ldr	r3, [pc, #420]	; (8002f0c <SysTick_Handler+0x1ac>)
 8002d66:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002d6a:	b29b      	uxth	r3, r3
 8002d6c:	3301      	adds	r3, #1
 8002d6e:	b29b      	uxth	r3, r3
 8002d70:	b21a      	sxth	r2, r3
 8002d72:	4b66      	ldr	r3, [pc, #408]	; (8002f0c <SysTick_Handler+0x1ac>)
 8002d74:	801a      	strh	r2, [r3, #0]
	count++;
 8002d76:	4b66      	ldr	r3, [pc, #408]	; (8002f10 <SysTick_Handler+0x1b0>)
 8002d78:	881b      	ldrh	r3, [r3, #0]
 8002d7a:	b29b      	uxth	r3, r3
 8002d7c:	3301      	adds	r3, #1
 8002d7e:	b29a      	uxth	r2, r3
 8002d80:	4b63      	ldr	r3, [pc, #396]	; (8002f10 <SysTick_Handler+0x1b0>)
 8002d82:	801a      	strh	r2, [r3, #0]
	count_10ms++;
 8002d84:	4b63      	ldr	r3, [pc, #396]	; (8002f14 <SysTick_Handler+0x1b4>)
 8002d86:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002d8a:	b29b      	uxth	r3, r3
 8002d8c:	3301      	adds	r3, #1
 8002d8e:	b29b      	uxth	r3, r3
 8002d90:	b21a      	sxth	r2, r3
 8002d92:	4b60      	ldr	r3, [pc, #384]	; (8002f14 <SysTick_Handler+0x1b4>)
 8002d94:	801a      	strh	r2, [r3, #0]


		if(count == PI_SPEED_TIME)
 8002d96:	4b5e      	ldr	r3, [pc, #376]	; (8002f10 <SysTick_Handler+0x1b0>)
 8002d98:	881b      	ldrh	r3, [r3, #0]
 8002d9a:	b29b      	uxth	r3, r3
 8002d9c:	2b05      	cmp	r3, #5
 8002d9e:	f040 8154 	bne.w	800304a <SysTick_Handler+0x2ea>
		{
			if(tryb_speed_m==1)
 8002da2:	4b5d      	ldr	r3, [pc, #372]	; (8002f18 <SysTick_Handler+0x1b8>)
 8002da4:	781b      	ldrb	r3, [r3, #0]
 8002da6:	b2db      	uxtb	r3, r3
 8002da8:	2b01      	cmp	r3, #1
 8002daa:	f040 814b 	bne.w	8003044 <SysTick_Handler+0x2e4>
			{
				pozycja_x = pozycja_walu;
 8002dae:	4b5b      	ldr	r3, [pc, #364]	; (8002f1c <SysTick_Handler+0x1bc>)
 8002db0:	881b      	ldrh	r3, [r3, #0]
 8002db2:	b29b      	uxth	r3, r3
 8002db4:	b21a      	sxth	r2, r3
 8002db6:	4b5a      	ldr	r3, [pc, #360]	; (8002f20 <SysTick_Handler+0x1c0>)
 8002db8:	801a      	strh	r2, [r3, #0]

				if(kierunek2==0&&(pozycja_poprz-pozycja_x>10||pozycja_poprz-pozycja_x<-10))
 8002dba:	4b5a      	ldr	r3, [pc, #360]	; (8002f24 <SysTick_Handler+0x1c4>)
 8002dbc:	881b      	ldrh	r3, [r3, #0]
 8002dbe:	b29b      	uxth	r3, r3
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d165      	bne.n	8002e90 <SysTick_Handler+0x130>
 8002dc4:	4b58      	ldr	r3, [pc, #352]	; (8002f28 <SysTick_Handler+0x1c8>)
 8002dc6:	881b      	ldrh	r3, [r3, #0]
 8002dc8:	b21b      	sxth	r3, r3
 8002dca:	461a      	mov	r2, r3
 8002dcc:	4b54      	ldr	r3, [pc, #336]	; (8002f20 <SysTick_Handler+0x1c0>)
 8002dce:	881b      	ldrh	r3, [r3, #0]
 8002dd0:	b21b      	sxth	r3, r3
 8002dd2:	1ad3      	subs	r3, r2, r3
 8002dd4:	2b0a      	cmp	r3, #10
 8002dd6:	dc0a      	bgt.n	8002dee <SysTick_Handler+0x8e>
 8002dd8:	4b53      	ldr	r3, [pc, #332]	; (8002f28 <SysTick_Handler+0x1c8>)
 8002dda:	881b      	ldrh	r3, [r3, #0]
 8002ddc:	b21b      	sxth	r3, r3
 8002dde:	461a      	mov	r2, r3
 8002de0:	4b4f      	ldr	r3, [pc, #316]	; (8002f20 <SysTick_Handler+0x1c0>)
 8002de2:	881b      	ldrh	r3, [r3, #0]
 8002de4:	b21b      	sxth	r3, r3
 8002de6:	1ad3      	subs	r3, r2, r3
 8002de8:	f113 0f0a 	cmn.w	r3, #10
 8002dec:	da50      	bge.n	8002e90 <SysTick_Handler+0x130>
				{
					if(pozycja_x>pozycja_poprz)
 8002dee:	4b4c      	ldr	r3, [pc, #304]	; (8002f20 <SysTick_Handler+0x1c0>)
 8002df0:	881b      	ldrh	r3, [r3, #0]
 8002df2:	b21a      	sxth	r2, r3
 8002df4:	4b4c      	ldr	r3, [pc, #304]	; (8002f28 <SysTick_Handler+0x1c8>)
 8002df6:	881b      	ldrh	r3, [r3, #0]
 8002df8:	b21b      	sxth	r3, r3
 8002dfa:	429a      	cmp	r2, r3
 8002dfc:	dd17      	ble.n	8002e2e <SysTick_Handler+0xce>
					{
						rpm_speed = (pozycja_x-pozycja_poprz)*SPEED_SCALE; //0.72
 8002dfe:	4b48      	ldr	r3, [pc, #288]	; (8002f20 <SysTick_Handler+0x1c0>)
 8002e00:	881b      	ldrh	r3, [r3, #0]
 8002e02:	b21b      	sxth	r3, r3
 8002e04:	461a      	mov	r2, r3
 8002e06:	4b48      	ldr	r3, [pc, #288]	; (8002f28 <SysTick_Handler+0x1c8>)
 8002e08:	881b      	ldrh	r3, [r3, #0]
 8002e0a:	b21b      	sxth	r3, r3
 8002e0c:	1ad3      	subs	r3, r2, r3
 8002e0e:	ee07 3a90 	vmov	s15, r3
 8002e12:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002e16:	ed9f 7a45 	vldr	s14, [pc, #276]	; 8002f2c <SysTick_Handler+0x1cc>
 8002e1a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002e1e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002e22:	ee17 3a90 	vmov	r3, s15
 8002e26:	b21a      	sxth	r2, r3
 8002e28:	4b41      	ldr	r3, [pc, #260]	; (8002f30 <SysTick_Handler+0x1d0>)
 8002e2a:	801a      	strh	r2, [r3, #0]
 8002e2c:	e020      	b.n	8002e70 <SysTick_Handler+0x110>
					}
					else if(pozycja_x<pozycja_poprz)
 8002e2e:	4b3c      	ldr	r3, [pc, #240]	; (8002f20 <SysTick_Handler+0x1c0>)
 8002e30:	881b      	ldrh	r3, [r3, #0]
 8002e32:	b21a      	sxth	r2, r3
 8002e34:	4b3c      	ldr	r3, [pc, #240]	; (8002f28 <SysTick_Handler+0x1c8>)
 8002e36:	881b      	ldrh	r3, [r3, #0]
 8002e38:	b21b      	sxth	r3, r3
 8002e3a:	429a      	cmp	r2, r3
 8002e3c:	da18      	bge.n	8002e70 <SysTick_Handler+0x110>
					{
						rpm_speed = ((16383-pozycja_poprz)+pozycja_x)*SPEED_SCALE;
 8002e3e:	4b3a      	ldr	r3, [pc, #232]	; (8002f28 <SysTick_Handler+0x1c8>)
 8002e40:	881b      	ldrh	r3, [r3, #0]
 8002e42:	b21b      	sxth	r3, r3
 8002e44:	f5c3 537f 	rsb	r3, r3, #16320	; 0x3fc0
 8002e48:	333f      	adds	r3, #63	; 0x3f
 8002e4a:	4a35      	ldr	r2, [pc, #212]	; (8002f20 <SysTick_Handler+0x1c0>)
 8002e4c:	8812      	ldrh	r2, [r2, #0]
 8002e4e:	b212      	sxth	r2, r2
 8002e50:	4413      	add	r3, r2
 8002e52:	ee07 3a90 	vmov	s15, r3
 8002e56:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002e5a:	ed9f 7a34 	vldr	s14, [pc, #208]	; 8002f2c <SysTick_Handler+0x1cc>
 8002e5e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002e62:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002e66:	ee17 3a90 	vmov	r3, s15
 8002e6a:	b21a      	sxth	r2, r3
 8002e6c:	4b30      	ldr	r3, [pc, #192]	; (8002f30 <SysTick_Handler+0x1d0>)
 8002e6e:	801a      	strh	r2, [r3, #0]
					}
					 if(pozycja_x==pozycja_poprz){obroty_pom=0;rpm_speed=0;}
 8002e70:	4b2b      	ldr	r3, [pc, #172]	; (8002f20 <SysTick_Handler+0x1c0>)
 8002e72:	881b      	ldrh	r3, [r3, #0]
 8002e74:	b21a      	sxth	r2, r3
 8002e76:	4b2c      	ldr	r3, [pc, #176]	; (8002f28 <SysTick_Handler+0x1c8>)
 8002e78:	881b      	ldrh	r3, [r3, #0]
 8002e7a:	b21b      	sxth	r3, r3
 8002e7c:	429a      	cmp	r2, r3
 8002e7e:	f040 8088 	bne.w	8002f92 <SysTick_Handler+0x232>
 8002e82:	4b2c      	ldr	r3, [pc, #176]	; (8002f34 <SysTick_Handler+0x1d4>)
 8002e84:	2200      	movs	r2, #0
 8002e86:	801a      	strh	r2, [r3, #0]
 8002e88:	4b29      	ldr	r3, [pc, #164]	; (8002f30 <SysTick_Handler+0x1d0>)
 8002e8a:	2200      	movs	r2, #0
 8002e8c:	801a      	strh	r2, [r3, #0]
 8002e8e:	e080      	b.n	8002f92 <SysTick_Handler+0x232>
				}

				else if(kierunek2==16&&(pozycja_poprz-pozycja_x>10||pozycja_poprz-pozycja_x<-10))
 8002e90:	4b24      	ldr	r3, [pc, #144]	; (8002f24 <SysTick_Handler+0x1c4>)
 8002e92:	881b      	ldrh	r3, [r3, #0]
 8002e94:	b29b      	uxth	r3, r3
 8002e96:	2b10      	cmp	r3, #16
 8002e98:	d17b      	bne.n	8002f92 <SysTick_Handler+0x232>
 8002e9a:	4b23      	ldr	r3, [pc, #140]	; (8002f28 <SysTick_Handler+0x1c8>)
 8002e9c:	881b      	ldrh	r3, [r3, #0]
 8002e9e:	b21b      	sxth	r3, r3
 8002ea0:	461a      	mov	r2, r3
 8002ea2:	4b1f      	ldr	r3, [pc, #124]	; (8002f20 <SysTick_Handler+0x1c0>)
 8002ea4:	881b      	ldrh	r3, [r3, #0]
 8002ea6:	b21b      	sxth	r3, r3
 8002ea8:	1ad3      	subs	r3, r2, r3
 8002eaa:	2b0a      	cmp	r3, #10
 8002eac:	dc0a      	bgt.n	8002ec4 <SysTick_Handler+0x164>
 8002eae:	4b1e      	ldr	r3, [pc, #120]	; (8002f28 <SysTick_Handler+0x1c8>)
 8002eb0:	881b      	ldrh	r3, [r3, #0]
 8002eb2:	b21b      	sxth	r3, r3
 8002eb4:	461a      	mov	r2, r3
 8002eb6:	4b1a      	ldr	r3, [pc, #104]	; (8002f20 <SysTick_Handler+0x1c0>)
 8002eb8:	881b      	ldrh	r3, [r3, #0]
 8002eba:	b21b      	sxth	r3, r3
 8002ebc:	1ad3      	subs	r3, r2, r3
 8002ebe:	f113 0f0a 	cmn.w	r3, #10
 8002ec2:	da66      	bge.n	8002f92 <SysTick_Handler+0x232>
				{
					if(pozycja_x>pozycja_poprz)
 8002ec4:	4b16      	ldr	r3, [pc, #88]	; (8002f20 <SysTick_Handler+0x1c0>)
 8002ec6:	881b      	ldrh	r3, [r3, #0]
 8002ec8:	b21a      	sxth	r2, r3
 8002eca:	4b17      	ldr	r3, [pc, #92]	; (8002f28 <SysTick_Handler+0x1c8>)
 8002ecc:	881b      	ldrh	r3, [r3, #0]
 8002ece:	b21b      	sxth	r3, r3
 8002ed0:	429a      	cmp	r2, r3
 8002ed2:	dd31      	ble.n	8002f38 <SysTick_Handler+0x1d8>
					{
						rpm_speed = -((16383-pozycja_x)+pozycja_poprz)*SPEED_SCALE;
 8002ed4:	4b12      	ldr	r3, [pc, #72]	; (8002f20 <SysTick_Handler+0x1c0>)
 8002ed6:	881b      	ldrh	r3, [r3, #0]
 8002ed8:	b21b      	sxth	r3, r3
 8002eda:	f5c3 537f 	rsb	r3, r3, #16320	; 0x3fc0
 8002ede:	333f      	adds	r3, #63	; 0x3f
 8002ee0:	4a11      	ldr	r2, [pc, #68]	; (8002f28 <SysTick_Handler+0x1c8>)
 8002ee2:	8812      	ldrh	r2, [r2, #0]
 8002ee4:	b212      	sxth	r2, r2
 8002ee6:	4413      	add	r3, r2
 8002ee8:	425b      	negs	r3, r3
 8002eea:	ee07 3a90 	vmov	s15, r3
 8002eee:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002ef2:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 8002f2c <SysTick_Handler+0x1cc>
 8002ef6:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002efa:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002efe:	ee17 3a90 	vmov	r3, s15
 8002f02:	b21a      	sxth	r2, r3
 8002f04:	4b0a      	ldr	r3, [pc, #40]	; (8002f30 <SysTick_Handler+0x1d0>)
 8002f06:	801a      	strh	r2, [r3, #0]
 8002f08:	e035      	b.n	8002f76 <SysTick_Handler+0x216>
 8002f0a:	bf00      	nop
 8002f0c:	2000050c 	.word	0x2000050c
 8002f10:	20000046 	.word	0x20000046
 8002f14:	2000050e 	.word	0x2000050e
 8002f18:	20000010 	.word	0x20000010
 8002f1c:	20000048 	.word	0x20000048
 8002f20:	20000084 	.word	0x20000084
 8002f24:	2000045c 	.word	0x2000045c
 8002f28:	20000082 	.word	0x20000082
 8002f2c:	3f3851ec 	.word	0x3f3851ec
 8002f30:	20000080 	.word	0x20000080
 8002f34:	2000004c 	.word	0x2000004c

					}
					else if(pozycja_x<pozycja_poprz)
 8002f38:	4b62      	ldr	r3, [pc, #392]	; (80030c4 <SysTick_Handler+0x364>)
 8002f3a:	881b      	ldrh	r3, [r3, #0]
 8002f3c:	b21a      	sxth	r2, r3
 8002f3e:	4b62      	ldr	r3, [pc, #392]	; (80030c8 <SysTick_Handler+0x368>)
 8002f40:	881b      	ldrh	r3, [r3, #0]
 8002f42:	b21b      	sxth	r3, r3
 8002f44:	429a      	cmp	r2, r3
 8002f46:	da16      	bge.n	8002f76 <SysTick_Handler+0x216>
					{
						rpm_speed =-(pozycja_poprz-pozycja_x)*SPEED_SCALE;
 8002f48:	4b5e      	ldr	r3, [pc, #376]	; (80030c4 <SysTick_Handler+0x364>)
 8002f4a:	881b      	ldrh	r3, [r3, #0]
 8002f4c:	b21b      	sxth	r3, r3
 8002f4e:	461a      	mov	r2, r3
 8002f50:	4b5d      	ldr	r3, [pc, #372]	; (80030c8 <SysTick_Handler+0x368>)
 8002f52:	881b      	ldrh	r3, [r3, #0]
 8002f54:	b21b      	sxth	r3, r3
 8002f56:	1ad3      	subs	r3, r2, r3
 8002f58:	ee07 3a90 	vmov	s15, r3
 8002f5c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002f60:	ed9f 7a5a 	vldr	s14, [pc, #360]	; 80030cc <SysTick_Handler+0x36c>
 8002f64:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002f68:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002f6c:	ee17 3a90 	vmov	r3, s15
 8002f70:	b21a      	sxth	r2, r3
 8002f72:	4b57      	ldr	r3, [pc, #348]	; (80030d0 <SysTick_Handler+0x370>)
 8002f74:	801a      	strh	r2, [r3, #0]
					}
					 if(pozycja_x==pozycja_poprz){obroty_pom=0;rpm_speed=0;}
 8002f76:	4b53      	ldr	r3, [pc, #332]	; (80030c4 <SysTick_Handler+0x364>)
 8002f78:	881b      	ldrh	r3, [r3, #0]
 8002f7a:	b21a      	sxth	r2, r3
 8002f7c:	4b52      	ldr	r3, [pc, #328]	; (80030c8 <SysTick_Handler+0x368>)
 8002f7e:	881b      	ldrh	r3, [r3, #0]
 8002f80:	b21b      	sxth	r3, r3
 8002f82:	429a      	cmp	r2, r3
 8002f84:	d105      	bne.n	8002f92 <SysTick_Handler+0x232>
 8002f86:	4b53      	ldr	r3, [pc, #332]	; (80030d4 <SysTick_Handler+0x374>)
 8002f88:	2200      	movs	r2, #0
 8002f8a:	801a      	strh	r2, [r3, #0]
 8002f8c:	4b50      	ldr	r3, [pc, #320]	; (80030d0 <SysTick_Handler+0x370>)
 8002f8e:	2200      	movs	r2, #0
 8002f90:	801a      	strh	r2, [r3, #0]
					}

				//delta_poz=Pozycja(pozycja_walu,pozycja_poprz, &calka_pozycja, kierunek);
				pozycja_poprz=pozycja_x;
 8002f92:	4b4c      	ldr	r3, [pc, #304]	; (80030c4 <SysTick_Handler+0x364>)
 8002f94:	881b      	ldrh	r3, [r3, #0]
 8002f96:	b21a      	sxth	r2, r3
 8002f98:	4b4b      	ldr	r3, [pc, #300]	; (80030c8 <SysTick_Handler+0x368>)
 8002f9a:	801a      	strh	r2, [r3, #0]
				poz_x=pozycja_walu;
 8002f9c:	4b4e      	ldr	r3, [pc, #312]	; (80030d8 <SysTick_Handler+0x378>)
 8002f9e:	881b      	ldrh	r3, [r3, #0]
 8002fa0:	b29b      	uxth	r3, r3
 8002fa2:	b21a      	sxth	r2, r3
 8002fa4:	4b4d      	ldr	r3, [pc, #308]	; (80030dc <SysTick_Handler+0x37c>)
 8002fa6:	801a      	strh	r2, [r3, #0]
				delta_poz=Pozycja(poz_x,poz_pop, &calka_pozycja, kierunek);
 8002fa8:	4b4c      	ldr	r3, [pc, #304]	; (80030dc <SysTick_Handler+0x37c>)
 8002faa:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002fae:	b298      	uxth	r0, r3
 8002fb0:	4b4b      	ldr	r3, [pc, #300]	; (80030e0 <SysTick_Handler+0x380>)
 8002fb2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002fb6:	b299      	uxth	r1, r3
 8002fb8:	4b4a      	ldr	r3, [pc, #296]	; (80030e4 <SysTick_Handler+0x384>)
 8002fba:	881b      	ldrh	r3, [r3, #0]
 8002fbc:	b29b      	uxth	r3, r3
 8002fbe:	4a4a      	ldr	r2, [pc, #296]	; (80030e8 <SysTick_Handler+0x388>)
 8002fc0:	f7fd ffb8 	bl	8000f34 <Pozycja>
 8002fc4:	4603      	mov	r3, r0
 8002fc6:	461a      	mov	r2, r3
 8002fc8:	4b48      	ldr	r3, [pc, #288]	; (80030ec <SysTick_Handler+0x38c>)
 8002fca:	801a      	strh	r2, [r3, #0]
				if(Pos_reg == 1)
 8002fcc:	4b48      	ldr	r3, [pc, #288]	; (80030f0 <SysTick_Handler+0x390>)
 8002fce:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002fd2:	2b01      	cmp	r3, #1
 8002fd4:	d107      	bne.n	8002fe6 <SysTick_Handler+0x286>
				{
					PID_REG(&POSTION,calka_pozycja,pozycja_zad, &prad_q_zad);
 8002fd6:	4b44      	ldr	r3, [pc, #272]	; (80030e8 <SysTick_Handler+0x388>)
 8002fd8:	6819      	ldr	r1, [r3, #0]
 8002fda:	4b46      	ldr	r3, [pc, #280]	; (80030f4 <SysTick_Handler+0x394>)
 8002fdc:	681a      	ldr	r2, [r3, #0]
 8002fde:	4b46      	ldr	r3, [pc, #280]	; (80030f8 <SysTick_Handler+0x398>)
 8002fe0:	4846      	ldr	r0, [pc, #280]	; (80030fc <SysTick_Handler+0x39c>)
 8002fe2:	f7fe faf1 	bl	80015c8 <PID_REG>
				}

				poz_pop_cal=calka_pozycja;
 8002fe6:	4b40      	ldr	r3, [pc, #256]	; (80030e8 <SysTick_Handler+0x388>)
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	b21a      	sxth	r2, r3
 8002fec:	4b44      	ldr	r3, [pc, #272]	; (8003100 <SysTick_Handler+0x3a0>)
 8002fee:	801a      	strh	r2, [r3, #0]
				poz_pop=poz_x;
 8002ff0:	4b3a      	ldr	r3, [pc, #232]	; (80030dc <SysTick_Handler+0x37c>)
 8002ff2:	f9b3 2000 	ldrsh.w	r2, [r3]
 8002ff6:	4b3a      	ldr	r3, [pc, #232]	; (80030e0 <SysTick_Handler+0x380>)
 8002ff8:	801a      	strh	r2, [r3, #0]
				count_10ms=0;
 8002ffa:	4b42      	ldr	r3, [pc, #264]	; (8003104 <SysTick_Handler+0x3a4>)
 8002ffc:	2200      	movs	r2, #0
 8002ffe:	801a      	strh	r2, [r3, #0]

				if(rpm_speed>6000){rpm_speed=0;}
 8003000:	4b33      	ldr	r3, [pc, #204]	; (80030d0 <SysTick_Handler+0x370>)
 8003002:	881b      	ldrh	r3, [r3, #0]
 8003004:	b21b      	sxth	r3, r3
 8003006:	f241 7270 	movw	r2, #6000	; 0x1770
 800300a:	4293      	cmp	r3, r2
 800300c:	dd02      	ble.n	8003014 <SysTick_Handler+0x2b4>
 800300e:	4b30      	ldr	r3, [pc, #192]	; (80030d0 <SysTick_Handler+0x370>)
 8003010:	2200      	movs	r2, #0
 8003012:	801a      	strh	r2, [r3, #0]
				if(rpm_speed<-6000){rpm_speed=0;}
 8003014:	4b2e      	ldr	r3, [pc, #184]	; (80030d0 <SysTick_Handler+0x370>)
 8003016:	881b      	ldrh	r3, [r3, #0]
 8003018:	b21b      	sxth	r3, r3
 800301a:	4a3b      	ldr	r2, [pc, #236]	; (8003108 <SysTick_Handler+0x3a8>)
 800301c:	4293      	cmp	r3, r2
 800301e:	da02      	bge.n	8003026 <SysTick_Handler+0x2c6>
 8003020:	4b2b      	ldr	r3, [pc, #172]	; (80030d0 <SysTick_Handler+0x370>)
 8003022:	2200      	movs	r2, #0
 8003024:	801a      	strh	r2, [r3, #0]
				if(PI_regul_on == 1){
 8003026:	4b39      	ldr	r3, [pc, #228]	; (800310c <SysTick_Handler+0x3ac>)
 8003028:	781b      	ldrb	r3, [r3, #0]
 800302a:	b2db      	uxtb	r3, r3
 800302c:	2b01      	cmp	r3, #1
 800302e:	d109      	bne.n	8003044 <SysTick_Handler+0x2e4>

					PI_REG(&speed, rpm_speed, rpm_speed_zad, &prad_q_zad);
 8003030:	4b27      	ldr	r3, [pc, #156]	; (80030d0 <SysTick_Handler+0x370>)
 8003032:	881b      	ldrh	r3, [r3, #0]
 8003034:	b219      	sxth	r1, r3
 8003036:	4b36      	ldr	r3, [pc, #216]	; (8003110 <SysTick_Handler+0x3b0>)
 8003038:	881b      	ldrh	r3, [r3, #0]
 800303a:	b21a      	sxth	r2, r3
 800303c:	4b2e      	ldr	r3, [pc, #184]	; (80030f8 <SysTick_Handler+0x398>)
 800303e:	4835      	ldr	r0, [pc, #212]	; (8003114 <SysTick_Handler+0x3b4>)
 8003040:	f7fd fd96 	bl	8000b70 <PI_REG>
				}//PI_Regulator();} // DLA <20 RPM KP=500000; KI=200000

			}

			count=0;
 8003044:	4b34      	ldr	r3, [pc, #208]	; (8003118 <SysTick_Handler+0x3b8>)
 8003046:	2200      	movs	r2, #0
 8003048:	801a      	strh	r2, [r3, #0]
		}

licznik_10ms++;
 800304a:	4b34      	ldr	r3, [pc, #208]	; (800311c <SysTick_Handler+0x3bc>)
 800304c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003050:	b29b      	uxth	r3, r3
 8003052:	3301      	adds	r3, #1
 8003054:	b29b      	uxth	r3, r3
 8003056:	b21a      	sxth	r2, r3
 8003058:	4b30      	ldr	r3, [pc, #192]	; (800311c <SysTick_Handler+0x3bc>)
 800305a:	801a      	strh	r2, [r3, #0]
licznik_100ms++;
 800305c:	4b30      	ldr	r3, [pc, #192]	; (8003120 <SysTick_Handler+0x3c0>)
 800305e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003062:	b29b      	uxth	r3, r3
 8003064:	3301      	adds	r3, #1
 8003066:	b29b      	uxth	r3, r3
 8003068:	b21a      	sxth	r2, r3
 800306a:	4b2d      	ldr	r3, [pc, #180]	; (8003120 <SysTick_Handler+0x3c0>)
 800306c:	801a      	strh	r2, [r3, #0]
if(licznik_10ms==10){czas_10ms=1;licznik_10ms=0;lpf_init(&Lpf, 0, 1.2);
 800306e:	4b2b      	ldr	r3, [pc, #172]	; (800311c <SysTick_Handler+0x3bc>)
 8003070:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003074:	2b0a      	cmp	r3, #10
 8003076:	d116      	bne.n	80030a6 <SysTick_Handler+0x346>
 8003078:	4b2a      	ldr	r3, [pc, #168]	; (8003124 <SysTick_Handler+0x3c4>)
 800307a:	2201      	movs	r2, #1
 800307c:	801a      	strh	r2, [r3, #0]
 800307e:	4b27      	ldr	r3, [pc, #156]	; (800311c <SysTick_Handler+0x3bc>)
 8003080:	2200      	movs	r2, #0
 8003082:	801a      	strh	r2, [r3, #0]
 8003084:	ed9f 0a28 	vldr	s0, [pc, #160]	; 8003128 <SysTick_Handler+0x3c8>
 8003088:	2100      	movs	r1, #0
 800308a:	4828      	ldr	r0, [pc, #160]	; (800312c <SysTick_Handler+0x3cc>)
 800308c:	f7fe fb28 	bl	80016e0 <lpf_init>
estimate_rpm = lpf_update(&Lpf, prad_alpha);}
 8003090:	4b27      	ldr	r3, [pc, #156]	; (8003130 <SysTick_Handler+0x3d0>)
 8003092:	881b      	ldrh	r3, [r3, #0]
 8003094:	b21b      	sxth	r3, r3
 8003096:	4619      	mov	r1, r3
 8003098:	4824      	ldr	r0, [pc, #144]	; (800312c <SysTick_Handler+0x3cc>)
 800309a:	f7fe fb38 	bl	800170e <lpf_update>
 800309e:	4603      	mov	r3, r0
 80030a0:	461a      	mov	r2, r3
 80030a2:	4b24      	ldr	r3, [pc, #144]	; (8003134 <SysTick_Handler+0x3d4>)
 80030a4:	801a      	strh	r2, [r3, #0]
if(licznik_100ms==100){czas_100ms=1;licznik_100ms=0;}
 80030a6:	4b1e      	ldr	r3, [pc, #120]	; (8003120 <SysTick_Handler+0x3c0>)
 80030a8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80030ac:	2b64      	cmp	r3, #100	; 0x64
 80030ae:	d105      	bne.n	80030bc <SysTick_Handler+0x35c>
 80030b0:	4b21      	ldr	r3, [pc, #132]	; (8003138 <SysTick_Handler+0x3d8>)
 80030b2:	2201      	movs	r2, #1
 80030b4:	801a      	strh	r2, [r3, #0]
 80030b6:	4b1a      	ldr	r3, [pc, #104]	; (8003120 <SysTick_Handler+0x3c0>)
 80030b8:	2200      	movs	r2, #0
 80030ba:	801a      	strh	r2, [r3, #0]

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80030bc:	f000 f930 	bl	8003320 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80030c0:	bf00      	nop
 80030c2:	bd80      	pop	{r7, pc}
 80030c4:	20000084 	.word	0x20000084
 80030c8:	20000082 	.word	0x20000082
 80030cc:	3f3851ec 	.word	0x3f3851ec
 80030d0:	20000080 	.word	0x20000080
 80030d4:	2000004c 	.word	0x2000004c
 80030d8:	20000048 	.word	0x20000048
 80030dc:	20000510 	.word	0x20000510
 80030e0:	20000512 	.word	0x20000512
 80030e4:	2000045a 	.word	0x2000045a
 80030e8:	20000460 	.word	0x20000460
 80030ec:	200004bc 	.word	0x200004bc
 80030f0:	200004be 	.word	0x200004be
 80030f4:	20000050 	.word	0x20000050
 80030f8:	2000005c 	.word	0x2000005c
 80030fc:	200004c4 	.word	0x200004c4
 8003100:	20000514 	.word	0x20000514
 8003104:	2000050e 	.word	0x2000050e
 8003108:	ffffe890 	.word	0xffffe890
 800310c:	20000044 	.word	0x20000044
 8003110:	20000002 	.word	0x20000002
 8003114:	200004e0 	.word	0x200004e0
 8003118:	20000046 	.word	0x20000046
 800311c:	20000516 	.word	0x20000516
 8003120:	20000518 	.word	0x20000518
 8003124:	20000464 	.word	0x20000464
 8003128:	3f99999a 	.word	0x3f99999a
 800312c:	20000508 	.word	0x20000508
 8003130:	20000068 	.word	0x20000068
 8003134:	200004c0 	.word	0x200004c0
 8003138:	20000466 	.word	0x20000466

0800313c <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupt.
  */
void ADC1_2_IRQHandler(void)
{
 800313c:	b580      	push	{r7, lr}
 800313e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8003140:	4803      	ldr	r0, [pc, #12]	; (8003150 <ADC1_2_IRQHandler+0x14>)
 8003142:	f000 fce7 	bl	8003b14 <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc2);
 8003146:	4803      	ldr	r0, [pc, #12]	; (8003154 <ADC1_2_IRQHandler+0x18>)
 8003148:	f000 fce4 	bl	8003b14 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 800314c:	bf00      	nop
 800314e:	bd80      	pop	{r7, pc}
 8003150:	200000b0 	.word	0x200000b0
 8003154:	2000011c 	.word	0x2000011c

08003158 <TIM1_BRK_TIM15_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM15 global interrupt.
  */
void TIM1_BRK_TIM15_IRQHandler(void)
{
 8003158:	b580      	push	{r7, lr}
 800315a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800315c:	4802      	ldr	r0, [pc, #8]	; (8003168 <TIM1_BRK_TIM15_IRQHandler+0x10>)
 800315e:	f005 fd9b 	bl	8008c98 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 1 */
}
 8003162:	bf00      	nop
 8003164:	bd80      	pop	{r7, pc}
 8003166:	bf00      	nop
 8003168:	2000028c 	.word	0x2000028c

0800316c <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 800316c:	b580      	push	{r7, lr}
 800316e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8003170:	4802      	ldr	r0, [pc, #8]	; (800317c <TIM1_UP_TIM16_IRQHandler+0x10>)
 8003172:	f005 fd91 	bl	8008c98 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8003176:	bf00      	nop
 8003178:	bd80      	pop	{r7, pc}
 800317a:	bf00      	nop
 800317c:	2000028c 	.word	0x2000028c

08003180 <TIM1_TRG_COM_TIM17_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM17 global interrupt.
  */
void TIM1_TRG_COM_TIM17_IRQHandler(void)
{
 8003180:	b580      	push	{r7, lr}
 8003182:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8003184:	4803      	ldr	r0, [pc, #12]	; (8003194 <TIM1_TRG_COM_TIM17_IRQHandler+0x14>)
 8003186:	f005 fd87 	bl	8008c98 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim17);
 800318a:	4803      	ldr	r0, [pc, #12]	; (8003198 <TIM1_TRG_COM_TIM17_IRQHandler+0x18>)
 800318c:	f005 fd84 	bl	8008c98 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 1 */
}
 8003190:	bf00      	nop
 8003192:	bd80      	pop	{r7, pc}
 8003194:	2000028c 	.word	0x2000028c
 8003198:	20000370 	.word	0x20000370

0800319c <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 800319c:	b580      	push	{r7, lr}
 800319e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80031a0:	4802      	ldr	r0, [pc, #8]	; (80031ac <TIM1_CC_IRQHandler+0x10>)
 80031a2:	f005 fd79 	bl	8008c98 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 80031a6:	bf00      	nop
 80031a8:	bd80      	pop	{r7, pc}
 80031aa:	bf00      	nop
 80031ac:	2000028c 	.word	0x2000028c

080031b0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80031b0:	b580      	push	{r7, lr}
 80031b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80031b4:	4802      	ldr	r0, [pc, #8]	; (80031c0 <TIM2_IRQHandler+0x10>)
 80031b6:	f005 fd6f 	bl	8008c98 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80031ba:	bf00      	nop
 80031bc:	bd80      	pop	{r7, pc}
 80031be:	bf00      	nop
 80031c0:	200002d8 	.word	0x200002d8

080031c4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 80031c4:	b580      	push	{r7, lr}
 80031c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80031c8:	4802      	ldr	r0, [pc, #8]	; (80031d4 <USART1_IRQHandler+0x10>)
 80031ca:	f007 f8e9 	bl	800a3a0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80031ce:	bf00      	nop
 80031d0:	bd80      	pop	{r7, pc}
 80031d2:	bf00      	nop
 80031d4:	200003bc 	.word	0x200003bc

080031d8 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80031d8:	b580      	push	{r7, lr}
 80031da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 80031dc:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80031e0:	f003 faee 	bl	80067c0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80031e4:	bf00      	nop
 80031e6:	bd80      	pop	{r7, pc}

080031e8 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC3 channel underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80031e8:	b580      	push	{r7, lr}
 80031ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80031ec:	4803      	ldr	r0, [pc, #12]	; (80031fc <TIM6_DAC_IRQHandler+0x14>)
 80031ee:	f005 fd53 	bl	8008c98 <HAL_TIM_IRQHandler>
  HAL_DAC_IRQHandler(&hdac1);
 80031f2:	4803      	ldr	r0, [pc, #12]	; (8003200 <TIM6_DAC_IRQHandler+0x18>)
 80031f4:	f002 fcc3 	bl	8005b7e <HAL_DAC_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80031f8:	bf00      	nop
 80031fa:	bd80      	pop	{r7, pc}
 80031fc:	20000324 	.word	0x20000324
 8003200:	200001b0 	.word	0x200001b0

08003204 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8003204:	b480      	push	{r7}
 8003206:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8003208:	4b06      	ldr	r3, [pc, #24]	; (8003224 <SystemInit+0x20>)
 800320a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800320e:	4a05      	ldr	r2, [pc, #20]	; (8003224 <SystemInit+0x20>)
 8003210:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003214:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003218:	bf00      	nop
 800321a:	46bd      	mov	sp, r7
 800321c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003220:	4770      	bx	lr
 8003222:	bf00      	nop
 8003224:	e000ed00 	.word	0xe000ed00

08003228 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8003228:	480d      	ldr	r0, [pc, #52]	; (8003260 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800322a:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800322c:	480d      	ldr	r0, [pc, #52]	; (8003264 <LoopForever+0x6>)
  ldr r1, =_edata
 800322e:	490e      	ldr	r1, [pc, #56]	; (8003268 <LoopForever+0xa>)
  ldr r2, =_sidata
 8003230:	4a0e      	ldr	r2, [pc, #56]	; (800326c <LoopForever+0xe>)
  movs r3, #0
 8003232:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8003234:	e002      	b.n	800323c <LoopCopyDataInit>

08003236 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003236:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003238:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800323a:	3304      	adds	r3, #4

0800323c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800323c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800323e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003240:	d3f9      	bcc.n	8003236 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003242:	4a0b      	ldr	r2, [pc, #44]	; (8003270 <LoopForever+0x12>)
  ldr r4, =_ebss
 8003244:	4c0b      	ldr	r4, [pc, #44]	; (8003274 <LoopForever+0x16>)
  movs r3, #0
 8003246:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003248:	e001      	b.n	800324e <LoopFillZerobss>

0800324a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800324a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800324c:	3204      	adds	r2, #4

0800324e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800324e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003250:	d3fb      	bcc.n	800324a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8003252:	f7ff ffd7 	bl	8003204 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003256:	f008 fa2d 	bl	800b6b4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800325a:	f7fe fa7d 	bl	8001758 <main>

0800325e <LoopForever>:

LoopForever:
    b LoopForever
 800325e:	e7fe      	b.n	800325e <LoopForever>
  ldr   r0, =_estack
 8003260:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8003264:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003268:	20000028 	.word	0x20000028
  ldr r2, =_sidata
 800326c:	0800bda4 	.word	0x0800bda4
  ldr r2, =_sbss
 8003270:	20000028 	.word	0x20000028
  ldr r4, =_ebss
 8003274:	20000520 	.word	0x20000520

08003278 <COMP1_2_3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8003278:	e7fe      	b.n	8003278 <COMP1_2_3_IRQHandler>

0800327a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800327a:	b580      	push	{r7, lr}
 800327c:	b082      	sub	sp, #8
 800327e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8003280:	2300      	movs	r3, #0
 8003282:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003284:	2003      	movs	r0, #3
 8003286:	f002 fc19 	bl	8005abc <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800328a:	2000      	movs	r0, #0
 800328c:	f000 f80e 	bl	80032ac <HAL_InitTick>
 8003290:	4603      	mov	r3, r0
 8003292:	2b00      	cmp	r3, #0
 8003294:	d002      	beq.n	800329c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8003296:	2301      	movs	r3, #1
 8003298:	71fb      	strb	r3, [r7, #7]
 800329a:	e001      	b.n	80032a0 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800329c:	f7ff f9b2 	bl	8002604 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80032a0:	79fb      	ldrb	r3, [r7, #7]

}
 80032a2:	4618      	mov	r0, r3
 80032a4:	3708      	adds	r7, #8
 80032a6:	46bd      	mov	sp, r7
 80032a8:	bd80      	pop	{r7, pc}
	...

080032ac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80032ac:	b580      	push	{r7, lr}
 80032ae:	b084      	sub	sp, #16
 80032b0:	af00      	add	r7, sp, #0
 80032b2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80032b4:	2300      	movs	r3, #0
 80032b6:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 80032b8:	4b16      	ldr	r3, [pc, #88]	; (8003314 <HAL_InitTick+0x68>)
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d022      	beq.n	8003306 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80032c0:	4b15      	ldr	r3, [pc, #84]	; (8003318 <HAL_InitTick+0x6c>)
 80032c2:	681a      	ldr	r2, [r3, #0]
 80032c4:	4b13      	ldr	r3, [pc, #76]	; (8003314 <HAL_InitTick+0x68>)
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80032cc:	fbb1 f3f3 	udiv	r3, r1, r3
 80032d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80032d4:	4618      	mov	r0, r3
 80032d6:	f002 fc24 	bl	8005b22 <HAL_SYSTICK_Config>
 80032da:	4603      	mov	r3, r0
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d10f      	bne.n	8003300 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	2b0f      	cmp	r3, #15
 80032e4:	d809      	bhi.n	80032fa <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80032e6:	2200      	movs	r2, #0
 80032e8:	6879      	ldr	r1, [r7, #4]
 80032ea:	f04f 30ff 	mov.w	r0, #4294967295
 80032ee:	f002 fbf0 	bl	8005ad2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80032f2:	4a0a      	ldr	r2, [pc, #40]	; (800331c <HAL_InitTick+0x70>)
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	6013      	str	r3, [r2, #0]
 80032f8:	e007      	b.n	800330a <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80032fa:	2301      	movs	r3, #1
 80032fc:	73fb      	strb	r3, [r7, #15]
 80032fe:	e004      	b.n	800330a <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8003300:	2301      	movs	r3, #1
 8003302:	73fb      	strb	r3, [r7, #15]
 8003304:	e001      	b.n	800330a <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8003306:	2301      	movs	r3, #1
 8003308:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800330a:	7bfb      	ldrb	r3, [r7, #15]
}
 800330c:	4618      	mov	r0, r3
 800330e:	3710      	adds	r7, #16
 8003310:	46bd      	mov	sp, r7
 8003312:	bd80      	pop	{r7, pc}
 8003314:	20000024 	.word	0x20000024
 8003318:	2000001c 	.word	0x2000001c
 800331c:	20000020 	.word	0x20000020

08003320 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003320:	b480      	push	{r7}
 8003322:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003324:	4b05      	ldr	r3, [pc, #20]	; (800333c <HAL_IncTick+0x1c>)
 8003326:	681a      	ldr	r2, [r3, #0]
 8003328:	4b05      	ldr	r3, [pc, #20]	; (8003340 <HAL_IncTick+0x20>)
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	4413      	add	r3, r2
 800332e:	4a03      	ldr	r2, [pc, #12]	; (800333c <HAL_IncTick+0x1c>)
 8003330:	6013      	str	r3, [r2, #0]
}
 8003332:	bf00      	nop
 8003334:	46bd      	mov	sp, r7
 8003336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800333a:	4770      	bx	lr
 800333c:	2000051c 	.word	0x2000051c
 8003340:	20000024 	.word	0x20000024

08003344 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003344:	b480      	push	{r7}
 8003346:	af00      	add	r7, sp, #0
  return uwTick;
 8003348:	4b03      	ldr	r3, [pc, #12]	; (8003358 <HAL_GetTick+0x14>)
 800334a:	681b      	ldr	r3, [r3, #0]
}
 800334c:	4618      	mov	r0, r3
 800334e:	46bd      	mov	sp, r7
 8003350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003354:	4770      	bx	lr
 8003356:	bf00      	nop
 8003358:	2000051c 	.word	0x2000051c

0800335c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800335c:	b580      	push	{r7, lr}
 800335e:	b084      	sub	sp, #16
 8003360:	af00      	add	r7, sp, #0
 8003362:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003364:	f7ff ffee 	bl	8003344 <HAL_GetTick>
 8003368:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003374:	d004      	beq.n	8003380 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8003376:	4b09      	ldr	r3, [pc, #36]	; (800339c <HAL_Delay+0x40>)
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	68fa      	ldr	r2, [r7, #12]
 800337c:	4413      	add	r3, r2
 800337e:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003380:	bf00      	nop
 8003382:	f7ff ffdf 	bl	8003344 <HAL_GetTick>
 8003386:	4602      	mov	r2, r0
 8003388:	68bb      	ldr	r3, [r7, #8]
 800338a:	1ad3      	subs	r3, r2, r3
 800338c:	68fa      	ldr	r2, [r7, #12]
 800338e:	429a      	cmp	r2, r3
 8003390:	d8f7      	bhi.n	8003382 <HAL_Delay+0x26>
  {
  }
}
 8003392:	bf00      	nop
 8003394:	bf00      	nop
 8003396:	3710      	adds	r7, #16
 8003398:	46bd      	mov	sp, r7
 800339a:	bd80      	pop	{r7, pc}
 800339c:	20000024 	.word	0x20000024

080033a0 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80033a0:	b480      	push	{r7}
 80033a2:	b083      	sub	sp, #12
 80033a4:	af00      	add	r7, sp, #0
 80033a6:	6078      	str	r0, [r7, #4]
 80033a8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	689b      	ldr	r3, [r3, #8]
 80033ae:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80033b2:	683b      	ldr	r3, [r7, #0]
 80033b4:	431a      	orrs	r2, r3
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	609a      	str	r2, [r3, #8]
}
 80033ba:	bf00      	nop
 80033bc:	370c      	adds	r7, #12
 80033be:	46bd      	mov	sp, r7
 80033c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c4:	4770      	bx	lr

080033c6 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80033c6:	b480      	push	{r7}
 80033c8:	b083      	sub	sp, #12
 80033ca:	af00      	add	r7, sp, #0
 80033cc:	6078      	str	r0, [r7, #4]
 80033ce:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	689b      	ldr	r3, [r3, #8]
 80033d4:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80033d8:	683b      	ldr	r3, [r7, #0]
 80033da:	431a      	orrs	r2, r3
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	609a      	str	r2, [r3, #8]
}
 80033e0:	bf00      	nop
 80033e2:	370c      	adds	r7, #12
 80033e4:	46bd      	mov	sp, r7
 80033e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ea:	4770      	bx	lr

080033ec <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80033ec:	b480      	push	{r7}
 80033ee:	b083      	sub	sp, #12
 80033f0:	af00      	add	r7, sp, #0
 80033f2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	689b      	ldr	r3, [r3, #8]
 80033f8:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80033fc:	4618      	mov	r0, r3
 80033fe:	370c      	adds	r7, #12
 8003400:	46bd      	mov	sp, r7
 8003402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003406:	4770      	bx	lr

08003408 <LL_ADC_SetOffset>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8003408:	b480      	push	{r7}
 800340a:	b087      	sub	sp, #28
 800340c:	af00      	add	r7, sp, #0
 800340e:	60f8      	str	r0, [r7, #12]
 8003410:	60b9      	str	r1, [r7, #8]
 8003412:	607a      	str	r2, [r7, #4]
 8003414:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	3360      	adds	r3, #96	; 0x60
 800341a:	461a      	mov	r2, r3
 800341c:	68bb      	ldr	r3, [r7, #8]
 800341e:	009b      	lsls	r3, r3, #2
 8003420:	4413      	add	r3, r2
 8003422:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003424:	697b      	ldr	r3, [r7, #20]
 8003426:	681a      	ldr	r2, [r3, #0]
 8003428:	4b08      	ldr	r3, [pc, #32]	; (800344c <LL_ADC_SetOffset+0x44>)
 800342a:	4013      	ands	r3, r2
 800342c:	687a      	ldr	r2, [r7, #4]
 800342e:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8003432:	683a      	ldr	r2, [r7, #0]
 8003434:	430a      	orrs	r2, r1
 8003436:	4313      	orrs	r3, r2
 8003438:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800343c:	697b      	ldr	r3, [r7, #20]
 800343e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8003440:	bf00      	nop
 8003442:	371c      	adds	r7, #28
 8003444:	46bd      	mov	sp, r7
 8003446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800344a:	4770      	bx	lr
 800344c:	03fff000 	.word	0x03fff000

08003450 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8003450:	b480      	push	{r7}
 8003452:	b085      	sub	sp, #20
 8003454:	af00      	add	r7, sp, #0
 8003456:	6078      	str	r0, [r7, #4]
 8003458:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	3360      	adds	r3, #96	; 0x60
 800345e:	461a      	mov	r2, r3
 8003460:	683b      	ldr	r3, [r7, #0]
 8003462:	009b      	lsls	r3, r3, #2
 8003464:	4413      	add	r3, r2
 8003466:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8003470:	4618      	mov	r0, r3
 8003472:	3714      	adds	r7, #20
 8003474:	46bd      	mov	sp, r7
 8003476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800347a:	4770      	bx	lr

0800347c <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 800347c:	b480      	push	{r7}
 800347e:	b087      	sub	sp, #28
 8003480:	af00      	add	r7, sp, #0
 8003482:	60f8      	str	r0, [r7, #12]
 8003484:	60b9      	str	r1, [r7, #8]
 8003486:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	3360      	adds	r3, #96	; 0x60
 800348c:	461a      	mov	r2, r3
 800348e:	68bb      	ldr	r3, [r7, #8]
 8003490:	009b      	lsls	r3, r3, #2
 8003492:	4413      	add	r3, r2
 8003494:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003496:	697b      	ldr	r3, [r7, #20]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	431a      	orrs	r2, r3
 80034a2:	697b      	ldr	r3, [r7, #20]
 80034a4:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80034a6:	bf00      	nop
 80034a8:	371c      	adds	r7, #28
 80034aa:	46bd      	mov	sp, r7
 80034ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b0:	4770      	bx	lr

080034b2 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 80034b2:	b480      	push	{r7}
 80034b4:	b087      	sub	sp, #28
 80034b6:	af00      	add	r7, sp, #0
 80034b8:	60f8      	str	r0, [r7, #12]
 80034ba:	60b9      	str	r1, [r7, #8]
 80034bc:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	3360      	adds	r3, #96	; 0x60
 80034c2:	461a      	mov	r2, r3
 80034c4:	68bb      	ldr	r3, [r7, #8]
 80034c6:	009b      	lsls	r3, r3, #2
 80034c8:	4413      	add	r3, r2
 80034ca:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80034cc:	697b      	ldr	r3, [r7, #20]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	431a      	orrs	r2, r3
 80034d8:	697b      	ldr	r3, [r7, #20]
 80034da:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 80034dc:	bf00      	nop
 80034de:	371c      	adds	r7, #28
 80034e0:	46bd      	mov	sp, r7
 80034e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e6:	4770      	bx	lr

080034e8 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 80034e8:	b480      	push	{r7}
 80034ea:	b087      	sub	sp, #28
 80034ec:	af00      	add	r7, sp, #0
 80034ee:	60f8      	str	r0, [r7, #12]
 80034f0:	60b9      	str	r1, [r7, #8]
 80034f2:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	3360      	adds	r3, #96	; 0x60
 80034f8:	461a      	mov	r2, r3
 80034fa:	68bb      	ldr	r3, [r7, #8]
 80034fc:	009b      	lsls	r3, r3, #2
 80034fe:	4413      	add	r3, r2
 8003500:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003502:	697b      	ldr	r3, [r7, #20]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	431a      	orrs	r2, r3
 800350e:	697b      	ldr	r3, [r7, #20]
 8003510:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8003512:	bf00      	nop
 8003514:	371c      	adds	r7, #28
 8003516:	46bd      	mov	sp, r7
 8003518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800351c:	4770      	bx	lr

0800351e <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 800351e:	b480      	push	{r7}
 8003520:	b083      	sub	sp, #12
 8003522:	af00      	add	r7, sp, #0
 8003524:	6078      	str	r0, [r7, #4]
 8003526:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	695b      	ldr	r3, [r3, #20]
 800352c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003530:	683b      	ldr	r3, [r7, #0]
 8003532:	431a      	orrs	r2, r3
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	615a      	str	r2, [r3, #20]
}
 8003538:	bf00      	nop
 800353a:	370c      	adds	r7, #12
 800353c:	46bd      	mov	sp, r7
 800353e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003542:	4770      	bx	lr

08003544 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8003544:	b480      	push	{r7}
 8003546:	b083      	sub	sp, #12
 8003548:	af00      	add	r7, sp, #0
 800354a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	68db      	ldr	r3, [r3, #12]
 8003550:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003554:	2b00      	cmp	r3, #0
 8003556:	d101      	bne.n	800355c <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8003558:	2301      	movs	r3, #1
 800355a:	e000      	b.n	800355e <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 800355c:	2300      	movs	r3, #0
}
 800355e:	4618      	mov	r0, r3
 8003560:	370c      	adds	r7, #12
 8003562:	46bd      	mov	sp, r7
 8003564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003568:	4770      	bx	lr

0800356a <LL_ADC_REG_SetSequencerRanks>:
  *         (8) On STM32G4, fast channel allows: 2.5 (sampling) + 12.5 (conversion) = 15 ADC clock cycles (fADC) to convert in 12-bit resolution.
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800356a:	b480      	push	{r7}
 800356c:	b087      	sub	sp, #28
 800356e:	af00      	add	r7, sp, #0
 8003570:	60f8      	str	r0, [r7, #12]
 8003572:	60b9      	str	r1, [r7, #8]
 8003574:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	3330      	adds	r3, #48	; 0x30
 800357a:	461a      	mov	r2, r3
 800357c:	68bb      	ldr	r3, [r7, #8]
 800357e:	0a1b      	lsrs	r3, r3, #8
 8003580:	009b      	lsls	r3, r3, #2
 8003582:	f003 030c 	and.w	r3, r3, #12
 8003586:	4413      	add	r3, r2
 8003588:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800358a:	697b      	ldr	r3, [r7, #20]
 800358c:	681a      	ldr	r2, [r3, #0]
 800358e:	68bb      	ldr	r3, [r7, #8]
 8003590:	f003 031f 	and.w	r3, r3, #31
 8003594:	211f      	movs	r1, #31
 8003596:	fa01 f303 	lsl.w	r3, r1, r3
 800359a:	43db      	mvns	r3, r3
 800359c:	401a      	ands	r2, r3
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	0e9b      	lsrs	r3, r3, #26
 80035a2:	f003 011f 	and.w	r1, r3, #31
 80035a6:	68bb      	ldr	r3, [r7, #8]
 80035a8:	f003 031f 	and.w	r3, r3, #31
 80035ac:	fa01 f303 	lsl.w	r3, r1, r3
 80035b0:	431a      	orrs	r2, r3
 80035b2:	697b      	ldr	r3, [r7, #20]
 80035b4:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80035b6:	bf00      	nop
 80035b8:	371c      	adds	r7, #28
 80035ba:	46bd      	mov	sp, r7
 80035bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c0:	4770      	bx	lr

080035c2 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 80035c2:	b480      	push	{r7}
 80035c4:	b083      	sub	sp, #12
 80035c6:	af00      	add	r7, sp, #0
 80035c8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80035ce:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d101      	bne.n	80035da <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 80035d6:	2301      	movs	r3, #1
 80035d8:	e000      	b.n	80035dc <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 80035da:	2300      	movs	r3, #0
}
 80035dc:	4618      	mov	r0, r3
 80035de:	370c      	adds	r7, #12
 80035e0:	46bd      	mov	sp, r7
 80035e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e6:	4770      	bx	lr

080035e8 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80035e8:	b480      	push	{r7}
 80035ea:	b087      	sub	sp, #28
 80035ec:	af00      	add	r7, sp, #0
 80035ee:	60f8      	str	r0, [r7, #12]
 80035f0:	60b9      	str	r1, [r7, #8]
 80035f2:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	3314      	adds	r3, #20
 80035f8:	461a      	mov	r2, r3
 80035fa:	68bb      	ldr	r3, [r7, #8]
 80035fc:	0e5b      	lsrs	r3, r3, #25
 80035fe:	009b      	lsls	r3, r3, #2
 8003600:	f003 0304 	and.w	r3, r3, #4
 8003604:	4413      	add	r3, r2
 8003606:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003608:	697b      	ldr	r3, [r7, #20]
 800360a:	681a      	ldr	r2, [r3, #0]
 800360c:	68bb      	ldr	r3, [r7, #8]
 800360e:	0d1b      	lsrs	r3, r3, #20
 8003610:	f003 031f 	and.w	r3, r3, #31
 8003614:	2107      	movs	r1, #7
 8003616:	fa01 f303 	lsl.w	r3, r1, r3
 800361a:	43db      	mvns	r3, r3
 800361c:	401a      	ands	r2, r3
 800361e:	68bb      	ldr	r3, [r7, #8]
 8003620:	0d1b      	lsrs	r3, r3, #20
 8003622:	f003 031f 	and.w	r3, r3, #31
 8003626:	6879      	ldr	r1, [r7, #4]
 8003628:	fa01 f303 	lsl.w	r3, r1, r3
 800362c:	431a      	orrs	r2, r3
 800362e:	697b      	ldr	r3, [r7, #20]
 8003630:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8003632:	bf00      	nop
 8003634:	371c      	adds	r7, #28
 8003636:	46bd      	mov	sp, r7
 8003638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800363c:	4770      	bx	lr
	...

08003640 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8003640:	b480      	push	{r7}
 8003642:	b085      	sub	sp, #20
 8003644:	af00      	add	r7, sp, #0
 8003646:	60f8      	str	r0, [r7, #12]
 8003648:	60b9      	str	r1, [r7, #8]
 800364a:	607a      	str	r2, [r7, #4]
  /* Bits for single or differential mode selection for each channel are set  */
  /* to 1 only when the differential mode is selected, and to 0 when the      */
  /* single mode is selected.                                                 */
  
  if (SingleDiff == LL_ADC_DIFFERENTIAL_ENDED)
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	4a0f      	ldr	r2, [pc, #60]	; (800368c <LL_ADC_SetChannelSingleDiff+0x4c>)
 8003650:	4293      	cmp	r3, r2
 8003652:	d10a      	bne.n	800366a <LL_ADC_SetChannelSingleDiff+0x2a>
  {
    SET_BIT(ADCx->DIFSEL,
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 800365a:	68bb      	ldr	r3, [r7, #8]
 800365c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003660:	431a      	orrs	r2, r3
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  else
  {
    CLEAR_BIT(ADCx->DIFSEL,
            Channel & ADC_SINGLEDIFF_CHANNEL_MASK);
  }
}
 8003668:	e00a      	b.n	8003680 <LL_ADC_SetChannelSingleDiff+0x40>
    CLEAR_BIT(ADCx->DIFSEL,
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8003670:	68bb      	ldr	r3, [r7, #8]
 8003672:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003676:	43db      	mvns	r3, r3
 8003678:	401a      	ands	r2, r3
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
 8003680:	bf00      	nop
 8003682:	3714      	adds	r7, #20
 8003684:	46bd      	mov	sp, r7
 8003686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800368a:	4770      	bx	lr
 800368c:	407f0000 	.word	0x407f0000

08003690 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003690:	b480      	push	{r7}
 8003692:	b083      	sub	sp, #12
 8003694:	af00      	add	r7, sp, #0
 8003696:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	689b      	ldr	r3, [r3, #8]
 800369c:	f003 031f 	and.w	r3, r3, #31
}
 80036a0:	4618      	mov	r0, r3
 80036a2:	370c      	adds	r7, #12
 80036a4:	46bd      	mov	sp, r7
 80036a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036aa:	4770      	bx	lr

080036ac <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80036ac:	b480      	push	{r7}
 80036ae:	b083      	sub	sp, #12
 80036b0:	af00      	add	r7, sp, #0
 80036b2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	689b      	ldr	r3, [r3, #8]
 80036b8:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 80036bc:	4618      	mov	r0, r3
 80036be:	370c      	adds	r7, #12
 80036c0:	46bd      	mov	sp, r7
 80036c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c6:	4770      	bx	lr

080036c8 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80036c8:	b480      	push	{r7}
 80036ca:	b083      	sub	sp, #12
 80036cc:	af00      	add	r7, sp, #0
 80036ce:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	689b      	ldr	r3, [r3, #8]
 80036d4:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 80036d8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80036dc:	687a      	ldr	r2, [r7, #4]
 80036de:	6093      	str	r3, [r2, #8]
}
 80036e0:	bf00      	nop
 80036e2:	370c      	adds	r7, #12
 80036e4:	46bd      	mov	sp, r7
 80036e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ea:	4770      	bx	lr

080036ec <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 80036ec:	b480      	push	{r7}
 80036ee:	b083      	sub	sp, #12
 80036f0:	af00      	add	r7, sp, #0
 80036f2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	689b      	ldr	r3, [r3, #8]
 80036f8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80036fc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003700:	d101      	bne.n	8003706 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8003702:	2301      	movs	r3, #1
 8003704:	e000      	b.n	8003708 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8003706:	2300      	movs	r3, #0
}
 8003708:	4618      	mov	r0, r3
 800370a:	370c      	adds	r7, #12
 800370c:	46bd      	mov	sp, r7
 800370e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003712:	4770      	bx	lr

08003714 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8003714:	b480      	push	{r7}
 8003716:	b083      	sub	sp, #12
 8003718:	af00      	add	r7, sp, #0
 800371a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	689b      	ldr	r3, [r3, #8]
 8003720:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8003724:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003728:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8003730:	bf00      	nop
 8003732:	370c      	adds	r7, #12
 8003734:	46bd      	mov	sp, r7
 8003736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800373a:	4770      	bx	lr

0800373c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 800373c:	b480      	push	{r7}
 800373e:	b083      	sub	sp, #12
 8003740:	af00      	add	r7, sp, #0
 8003742:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	689b      	ldr	r3, [r3, #8]
 8003748:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800374c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003750:	d101      	bne.n	8003756 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8003752:	2301      	movs	r3, #1
 8003754:	e000      	b.n	8003758 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8003756:	2300      	movs	r3, #0
}
 8003758:	4618      	mov	r0, r3
 800375a:	370c      	adds	r7, #12
 800375c:	46bd      	mov	sp, r7
 800375e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003762:	4770      	bx	lr

08003764 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8003764:	b480      	push	{r7}
 8003766:	b083      	sub	sp, #12
 8003768:	af00      	add	r7, sp, #0
 800376a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	689b      	ldr	r3, [r3, #8]
 8003770:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003774:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003778:	f043 0201 	orr.w	r2, r3, #1
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8003780:	bf00      	nop
 8003782:	370c      	adds	r7, #12
 8003784:	46bd      	mov	sp, r7
 8003786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800378a:	4770      	bx	lr

0800378c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 800378c:	b480      	push	{r7}
 800378e:	b083      	sub	sp, #12
 8003790:	af00      	add	r7, sp, #0
 8003792:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	689b      	ldr	r3, [r3, #8]
 8003798:	f003 0301 	and.w	r3, r3, #1
 800379c:	2b01      	cmp	r3, #1
 800379e:	d101      	bne.n	80037a4 <LL_ADC_IsEnabled+0x18>
 80037a0:	2301      	movs	r3, #1
 80037a2:	e000      	b.n	80037a6 <LL_ADC_IsEnabled+0x1a>
 80037a4:	2300      	movs	r3, #0
}
 80037a6:	4618      	mov	r0, r3
 80037a8:	370c      	adds	r7, #12
 80037aa:	46bd      	mov	sp, r7
 80037ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b0:	4770      	bx	lr

080037b2 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80037b2:	b480      	push	{r7}
 80037b4:	b083      	sub	sp, #12
 80037b6:	af00      	add	r7, sp, #0
 80037b8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	689b      	ldr	r3, [r3, #8]
 80037be:	f003 0304 	and.w	r3, r3, #4
 80037c2:	2b04      	cmp	r3, #4
 80037c4:	d101      	bne.n	80037ca <LL_ADC_REG_IsConversionOngoing+0x18>
 80037c6:	2301      	movs	r3, #1
 80037c8:	e000      	b.n	80037cc <LL_ADC_REG_IsConversionOngoing+0x1a>
 80037ca:	2300      	movs	r3, #0
}
 80037cc:	4618      	mov	r0, r3
 80037ce:	370c      	adds	r7, #12
 80037d0:	46bd      	mov	sp, r7
 80037d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d6:	4770      	bx	lr

080037d8 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80037d8:	b480      	push	{r7}
 80037da:	b083      	sub	sp, #12
 80037dc:	af00      	add	r7, sp, #0
 80037de:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	689b      	ldr	r3, [r3, #8]
 80037e4:	f003 0308 	and.w	r3, r3, #8
 80037e8:	2b08      	cmp	r3, #8
 80037ea:	d101      	bne.n	80037f0 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80037ec:	2301      	movs	r3, #1
 80037ee:	e000      	b.n	80037f2 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80037f0:	2300      	movs	r3, #0
}
 80037f2:	4618      	mov	r0, r3
 80037f4:	370c      	adds	r7, #12
 80037f6:	46bd      	mov	sp, r7
 80037f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037fc:	4770      	bx	lr
	...

08003800 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003800:	b590      	push	{r4, r7, lr}
 8003802:	b089      	sub	sp, #36	; 0x24
 8003804:	af00      	add	r7, sp, #0
 8003806:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003808:	2300      	movs	r3, #0
 800380a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 800380c:	2300      	movs	r3, #0
 800380e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	2b00      	cmp	r3, #0
 8003814:	d101      	bne.n	800381a <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8003816:	2301      	movs	r3, #1
 8003818:	e177      	b.n	8003b0a <HAL_ADC_Init+0x30a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	695b      	ldr	r3, [r3, #20]
 800381e:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003824:	2b00      	cmp	r3, #0
 8003826:	d109      	bne.n	800383c <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003828:	6878      	ldr	r0, [r7, #4]
 800382a:	f7fe ff0f 	bl	800264c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	2200      	movs	r2, #0
 8003832:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	2200      	movs	r2, #0
 8003838:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	4618      	mov	r0, r3
 8003842:	f7ff ff53 	bl	80036ec <LL_ADC_IsDeepPowerDownEnabled>
 8003846:	4603      	mov	r3, r0
 8003848:	2b00      	cmp	r3, #0
 800384a:	d004      	beq.n	8003856 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	4618      	mov	r0, r3
 8003852:	f7ff ff39 	bl	80036c8 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	4618      	mov	r0, r3
 800385c:	f7ff ff6e 	bl	800373c <LL_ADC_IsInternalRegulatorEnabled>
 8003860:	4603      	mov	r3, r0
 8003862:	2b00      	cmp	r3, #0
 8003864:	d115      	bne.n	8003892 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	4618      	mov	r0, r3
 800386c:	f7ff ff52 	bl	8003714 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003870:	4b9c      	ldr	r3, [pc, #624]	; (8003ae4 <HAL_ADC_Init+0x2e4>)
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	099b      	lsrs	r3, r3, #6
 8003876:	4a9c      	ldr	r2, [pc, #624]	; (8003ae8 <HAL_ADC_Init+0x2e8>)
 8003878:	fba2 2303 	umull	r2, r3, r2, r3
 800387c:	099b      	lsrs	r3, r3, #6
 800387e:	3301      	adds	r3, #1
 8003880:	005b      	lsls	r3, r3, #1
 8003882:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8003884:	e002      	b.n	800388c <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8003886:	68bb      	ldr	r3, [r7, #8]
 8003888:	3b01      	subs	r3, #1
 800388a:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800388c:	68bb      	ldr	r3, [r7, #8]
 800388e:	2b00      	cmp	r3, #0
 8003890:	d1f9      	bne.n	8003886 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	4618      	mov	r0, r3
 8003898:	f7ff ff50 	bl	800373c <LL_ADC_IsInternalRegulatorEnabled>
 800389c:	4603      	mov	r3, r0
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d10d      	bne.n	80038be <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038a6:	f043 0210 	orr.w	r2, r3, #16
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80038b2:	f043 0201 	orr.w	r2, r3, #1
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 80038ba:	2301      	movs	r3, #1
 80038bc:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	4618      	mov	r0, r3
 80038c4:	f7ff ff75 	bl	80037b2 <LL_ADC_REG_IsConversionOngoing>
 80038c8:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038ce:	f003 0310 	and.w	r3, r3, #16
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	f040 8110 	bne.w	8003af8 <HAL_ADC_Init+0x2f8>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80038d8:	697b      	ldr	r3, [r7, #20]
 80038da:	2b00      	cmp	r3, #0
 80038dc:	f040 810c 	bne.w	8003af8 <HAL_ADC_Init+0x2f8>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038e4:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80038e8:	f043 0202 	orr.w	r2, r3, #2
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	4618      	mov	r0, r3
 80038f6:	f7ff ff49 	bl	800378c <LL_ADC_IsEnabled>
 80038fa:	4603      	mov	r3, r0
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d111      	bne.n	8003924 <HAL_ADC_Init+0x124>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003900:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8003904:	f7ff ff42 	bl	800378c <LL_ADC_IsEnabled>
 8003908:	4604      	mov	r4, r0
 800390a:	4878      	ldr	r0, [pc, #480]	; (8003aec <HAL_ADC_Init+0x2ec>)
 800390c:	f7ff ff3e 	bl	800378c <LL_ADC_IsEnabled>
 8003910:	4603      	mov	r3, r0
 8003912:	4323      	orrs	r3, r4
 8003914:	2b00      	cmp	r3, #0
 8003916:	d105      	bne.n	8003924 <HAL_ADC_Init+0x124>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	685b      	ldr	r3, [r3, #4]
 800391c:	4619      	mov	r1, r3
 800391e:	4874      	ldr	r0, [pc, #464]	; (8003af0 <HAL_ADC_Init+0x2f0>)
 8003920:	f7ff fd3e 	bl	80033a0 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	7f5b      	ldrb	r3, [r3, #29]
 8003928:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800392e:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8003934:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 800393a:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003942:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003944:	4313      	orrs	r3, r2
 8003946:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800394e:	2b01      	cmp	r3, #1
 8003950:	d106      	bne.n	8003960 <HAL_ADC_Init+0x160>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003956:	3b01      	subs	r3, #1
 8003958:	045b      	lsls	r3, r3, #17
 800395a:	69ba      	ldr	r2, [r7, #24]
 800395c:	4313      	orrs	r3, r2
 800395e:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003964:	2b00      	cmp	r3, #0
 8003966:	d009      	beq.n	800397c <HAL_ADC_Init+0x17c>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800396c:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003974:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003976:	69ba      	ldr	r2, [r7, #24]
 8003978:	4313      	orrs	r3, r2
 800397a:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	68da      	ldr	r2, [r3, #12]
 8003982:	4b5c      	ldr	r3, [pc, #368]	; (8003af4 <HAL_ADC_Init+0x2f4>)
 8003984:	4013      	ands	r3, r2
 8003986:	687a      	ldr	r2, [r7, #4]
 8003988:	6812      	ldr	r2, [r2, #0]
 800398a:	69b9      	ldr	r1, [r7, #24]
 800398c:	430b      	orrs	r3, r1
 800398e:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	691b      	ldr	r3, [r3, #16]
 8003996:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	430a      	orrs	r2, r1
 80039a4:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	4618      	mov	r0, r3
 80039ac:	f7ff ff01 	bl	80037b2 <LL_ADC_REG_IsConversionOngoing>
 80039b0:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	4618      	mov	r0, r3
 80039b8:	f7ff ff0e 	bl	80037d8 <LL_ADC_INJ_IsConversionOngoing>
 80039bc:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80039be:	693b      	ldr	r3, [r7, #16]
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d16d      	bne.n	8003aa0 <HAL_ADC_Init+0x2a0>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d16a      	bne.n	8003aa0 <HAL_ADC_Init+0x2a0>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	7f1b      	ldrb	r3, [r3, #28]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80039ce:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80039d6:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80039d8:	4313      	orrs	r3, r2
 80039da:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	68db      	ldr	r3, [r3, #12]
 80039e2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80039e6:	f023 0302 	bic.w	r3, r3, #2
 80039ea:	687a      	ldr	r2, [r7, #4]
 80039ec:	6812      	ldr	r2, [r2, #0]
 80039ee:	69b9      	ldr	r1, [r7, #24]
 80039f0:	430b      	orrs	r3, r1
 80039f2:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	691b      	ldr	r3, [r3, #16]
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d017      	beq.n	8003a2c <HAL_ADC_Init+0x22c>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	691a      	ldr	r2, [r3, #16]
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8003a0a:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8003a14:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8003a18:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003a1c:	687a      	ldr	r2, [r7, #4]
 8003a1e:	6911      	ldr	r1, [r2, #16]
 8003a20:	687a      	ldr	r2, [r7, #4]
 8003a22:	6812      	ldr	r2, [r2, #0]
 8003a24:	430b      	orrs	r3, r1
 8003a26:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 8003a2a:	e013      	b.n	8003a54 <HAL_ADC_Init+0x254>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	691a      	ldr	r2, [r3, #16]
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8003a3a:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8003a44:	687a      	ldr	r2, [r7, #4]
 8003a46:	6812      	ldr	r2, [r2, #0]
 8003a48:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8003a4c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003a50:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003a5a:	2b01      	cmp	r3, #1
 8003a5c:	d118      	bne.n	8003a90 <HAL_ADC_Init+0x290>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	691b      	ldr	r3, [r3, #16]
 8003a64:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8003a68:	f023 0304 	bic.w	r3, r3, #4
 8003a6c:	687a      	ldr	r2, [r7, #4]
 8003a6e:	6c51      	ldr	r1, [r2, #68]	; 0x44
 8003a70:	687a      	ldr	r2, [r7, #4]
 8003a72:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8003a74:	4311      	orrs	r1, r2
 8003a76:	687a      	ldr	r2, [r7, #4]
 8003a78:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8003a7a:	4311      	orrs	r1, r2
 8003a7c:	687a      	ldr	r2, [r7, #4]
 8003a7e:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003a80:	430a      	orrs	r2, r1
 8003a82:	431a      	orrs	r2, r3
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	f042 0201 	orr.w	r2, r2, #1
 8003a8c:	611a      	str	r2, [r3, #16]
 8003a8e:	e007      	b.n	8003aa0 <HAL_ADC_Init+0x2a0>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	691a      	ldr	r2, [r3, #16]
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	f022 0201 	bic.w	r2, r2, #1
 8003a9e:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	695b      	ldr	r3, [r3, #20]
 8003aa4:	2b01      	cmp	r3, #1
 8003aa6:	d10c      	bne.n	8003ac2 <HAL_ADC_Init+0x2c2>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003aae:	f023 010f 	bic.w	r1, r3, #15
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	6a1b      	ldr	r3, [r3, #32]
 8003ab6:	1e5a      	subs	r2, r3, #1
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	430a      	orrs	r2, r1
 8003abe:	631a      	str	r2, [r3, #48]	; 0x30
 8003ac0:	e007      	b.n	8003ad2 <HAL_ADC_Init+0x2d2>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	f022 020f 	bic.w	r2, r2, #15
 8003ad0:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ad6:	f023 0303 	bic.w	r3, r3, #3
 8003ada:	f043 0201 	orr.w	r2, r3, #1
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	65da      	str	r2, [r3, #92]	; 0x5c
 8003ae2:	e011      	b.n	8003b08 <HAL_ADC_Init+0x308>
 8003ae4:	2000001c 	.word	0x2000001c
 8003ae8:	053e2d63 	.word	0x053e2d63
 8003aec:	50000100 	.word	0x50000100
 8003af0:	50000300 	.word	0x50000300
 8003af4:	fff04007 	.word	0xfff04007
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003afc:	f043 0210 	orr.w	r2, r3, #16
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8003b04:	2301      	movs	r3, #1
 8003b06:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8003b08:	7ffb      	ldrb	r3, [r7, #31]
}
 8003b0a:	4618      	mov	r0, r3
 8003b0c:	3724      	adds	r7, #36	; 0x24
 8003b0e:	46bd      	mov	sp, r7
 8003b10:	bd90      	pop	{r4, r7, pc}
 8003b12:	bf00      	nop

08003b14 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8003b14:	b580      	push	{r7, lr}
 8003b16:	b08a      	sub	sp, #40	; 0x28
 8003b18:	af00      	add	r7, sp, #0
 8003b1a:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8003b1c:	2300      	movs	r3, #0
 8003b1e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	685b      	ldr	r3, [r3, #4]
 8003b2e:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003b30:	4883      	ldr	r0, [pc, #524]	; (8003d40 <HAL_ADC_IRQHandler+0x22c>)
 8003b32:	f7ff fdad 	bl	8003690 <LL_ADC_GetMultimode>
 8003b36:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8003b38:	69fb      	ldr	r3, [r7, #28]
 8003b3a:	f003 0302 	and.w	r3, r3, #2
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d017      	beq.n	8003b72 <HAL_ADC_IRQHandler+0x5e>
 8003b42:	69bb      	ldr	r3, [r7, #24]
 8003b44:	f003 0302 	and.w	r3, r3, #2
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d012      	beq.n	8003b72 <HAL_ADC_IRQHandler+0x5e>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b50:	f003 0310 	and.w	r3, r3, #16
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d105      	bne.n	8003b64 <HAL_ADC_IRQHandler+0x50>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b5c:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	65da      	str	r2, [r3, #92]	; 0x5c

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8003b64:	6878      	ldr	r0, [r7, #4]
 8003b66:	f001 f919 	bl	8004d9c <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	2202      	movs	r2, #2
 8003b70:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8003b72:	69fb      	ldr	r3, [r7, #28]
 8003b74:	f003 0304 	and.w	r3, r3, #4
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d004      	beq.n	8003b86 <HAL_ADC_IRQHandler+0x72>
 8003b7c:	69bb      	ldr	r3, [r7, #24]
 8003b7e:	f003 0304 	and.w	r3, r3, #4
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d10a      	bne.n	8003b9c <HAL_ADC_IRQHandler+0x88>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8003b86:	69fb      	ldr	r3, [r7, #28]
 8003b88:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	f000 8085 	beq.w	8003c9c <HAL_ADC_IRQHandler+0x188>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8003b92:	69bb      	ldr	r3, [r7, #24]
 8003b94:	f003 0308 	and.w	r3, r3, #8
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d07f      	beq.n	8003c9c <HAL_ADC_IRQHandler+0x188>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ba0:	f003 0310 	and.w	r3, r3, #16
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d105      	bne.n	8003bb4 <HAL_ADC_IRQHandler+0xa0>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003bac:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	4618      	mov	r0, r3
 8003bba:	f7ff fcc3 	bl	8003544 <LL_ADC_REG_IsTriggerSourceSWStart>
 8003bbe:	4603      	mov	r3, r0
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d064      	beq.n	8003c8e <HAL_ADC_IRQHandler+0x17a>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	4a5e      	ldr	r2, [pc, #376]	; (8003d44 <HAL_ADC_IRQHandler+0x230>)
 8003bca:	4293      	cmp	r3, r2
 8003bcc:	d002      	beq.n	8003bd4 <HAL_ADC_IRQHandler+0xc0>
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	e001      	b.n	8003bd8 <HAL_ADC_IRQHandler+0xc4>
 8003bd4:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8003bd8:	687a      	ldr	r2, [r7, #4]
 8003bda:	6812      	ldr	r2, [r2, #0]
 8003bdc:	4293      	cmp	r3, r2
 8003bde:	d008      	beq.n	8003bf2 <HAL_ADC_IRQHandler+0xde>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003be0:	697b      	ldr	r3, [r7, #20]
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d005      	beq.n	8003bf2 <HAL_ADC_IRQHandler+0xde>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8003be6:	697b      	ldr	r3, [r7, #20]
 8003be8:	2b05      	cmp	r3, #5
 8003bea:	d002      	beq.n	8003bf2 <HAL_ADC_IRQHandler+0xde>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8003bec:	697b      	ldr	r3, [r7, #20]
 8003bee:	2b09      	cmp	r3, #9
 8003bf0:	d104      	bne.n	8003bfc <HAL_ADC_IRQHandler+0xe8>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	68db      	ldr	r3, [r3, #12]
 8003bf8:	623b      	str	r3, [r7, #32]
 8003bfa:	e00d      	b.n	8003c18 <HAL_ADC_IRQHandler+0x104>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	4a50      	ldr	r2, [pc, #320]	; (8003d44 <HAL_ADC_IRQHandler+0x230>)
 8003c02:	4293      	cmp	r3, r2
 8003c04:	d002      	beq.n	8003c0c <HAL_ADC_IRQHandler+0xf8>
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	e001      	b.n	8003c10 <HAL_ADC_IRQHandler+0xfc>
 8003c0c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8003c10:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8003c12:	693b      	ldr	r3, [r7, #16]
 8003c14:	68db      	ldr	r3, [r3, #12]
 8003c16:	623b      	str	r3, [r7, #32]
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8003c18:	6a3b      	ldr	r3, [r7, #32]
 8003c1a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d135      	bne.n	8003c8e <HAL_ADC_IRQHandler+0x17a>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	f003 0308 	and.w	r3, r3, #8
 8003c2c:	2b08      	cmp	r3, #8
 8003c2e:	d12e      	bne.n	8003c8e <HAL_ADC_IRQHandler+0x17a>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	4618      	mov	r0, r3
 8003c36:	f7ff fdbc 	bl	80037b2 <LL_ADC_REG_IsConversionOngoing>
 8003c3a:	4603      	mov	r3, r0
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d11a      	bne.n	8003c76 <HAL_ADC_IRQHandler+0x162>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	685a      	ldr	r2, [r3, #4]
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	f022 020c 	bic.w	r2, r2, #12
 8003c4e:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c54:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	65da      	str	r2, [r3, #92]	; 0x5c

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c60:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d112      	bne.n	8003c8e <HAL_ADC_IRQHandler+0x17a>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c6c:	f043 0201 	orr.w	r2, r3, #1
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	65da      	str	r2, [r3, #92]	; 0x5c
 8003c74:	e00b      	b.n	8003c8e <HAL_ADC_IRQHandler+0x17a>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c7a:	f043 0210 	orr.w	r2, r3, #16
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	65da      	str	r2, [r3, #92]	; 0x5c

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003c86:	f043 0201 	orr.w	r2, r3, #1
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	661a      	str	r2, [r3, #96]	; 0x60
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003c8e:	6878      	ldr	r0, [r7, #4]
 8003c90:	f000 f95a 	bl	8003f48 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	220c      	movs	r2, #12
 8003c9a:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8003c9c:	69fb      	ldr	r3, [r7, #28]
 8003c9e:	f003 0320 	and.w	r3, r3, #32
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d004      	beq.n	8003cb0 <HAL_ADC_IRQHandler+0x19c>
 8003ca6:	69bb      	ldr	r3, [r7, #24]
 8003ca8:	f003 0320 	and.w	r3, r3, #32
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d10b      	bne.n	8003cc8 <HAL_ADC_IRQHandler+0x1b4>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8003cb0:	69fb      	ldr	r3, [r7, #28]
 8003cb2:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	f000 809e 	beq.w	8003df8 <HAL_ADC_IRQHandler+0x2e4>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8003cbc:	69bb      	ldr	r3, [r7, #24]
 8003cbe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	f000 8098 	beq.w	8003df8 <HAL_ADC_IRQHandler+0x2e4>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ccc:	f003 0310 	and.w	r3, r3, #16
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d105      	bne.n	8003ce0 <HAL_ADC_IRQHandler+0x1cc>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003cd8:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	4618      	mov	r0, r3
 8003ce6:	f7ff fc6c 	bl	80035c2 <LL_ADC_INJ_IsTriggerSourceSWStart>
 8003cea:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	4618      	mov	r0, r3
 8003cf2:	f7ff fc27 	bl	8003544 <LL_ADC_REG_IsTriggerSourceSWStart>
 8003cf6:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	4a11      	ldr	r2, [pc, #68]	; (8003d44 <HAL_ADC_IRQHandler+0x230>)
 8003cfe:	4293      	cmp	r3, r2
 8003d00:	d002      	beq.n	8003d08 <HAL_ADC_IRQHandler+0x1f4>
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	e001      	b.n	8003d0c <HAL_ADC_IRQHandler+0x1f8>
 8003d08:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8003d0c:	687a      	ldr	r2, [r7, #4]
 8003d0e:	6812      	ldr	r2, [r2, #0]
 8003d10:	4293      	cmp	r3, r2
 8003d12:	d008      	beq.n	8003d26 <HAL_ADC_IRQHandler+0x212>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003d14:	697b      	ldr	r3, [r7, #20]
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d005      	beq.n	8003d26 <HAL_ADC_IRQHandler+0x212>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 8003d1a:	697b      	ldr	r3, [r7, #20]
 8003d1c:	2b06      	cmp	r3, #6
 8003d1e:	d002      	beq.n	8003d26 <HAL_ADC_IRQHandler+0x212>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8003d20:	697b      	ldr	r3, [r7, #20]
 8003d22:	2b07      	cmp	r3, #7
 8003d24:	d104      	bne.n	8003d30 <HAL_ADC_IRQHandler+0x21c>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	68db      	ldr	r3, [r3, #12]
 8003d2c:	623b      	str	r3, [r7, #32]
 8003d2e:	e011      	b.n	8003d54 <HAL_ADC_IRQHandler+0x240>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	4a03      	ldr	r2, [pc, #12]	; (8003d44 <HAL_ADC_IRQHandler+0x230>)
 8003d36:	4293      	cmp	r3, r2
 8003d38:	d006      	beq.n	8003d48 <HAL_ADC_IRQHandler+0x234>
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	e005      	b.n	8003d4c <HAL_ADC_IRQHandler+0x238>
 8003d40:	50000300 	.word	0x50000300
 8003d44:	50000100 	.word	0x50000100
 8003d48:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8003d4c:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8003d4e:	693b      	ldr	r3, [r7, #16]
 8003d50:	68db      	ldr	r3, [r3, #12]
 8003d52:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d047      	beq.n	8003dea <HAL_ADC_IRQHandler+0x2d6>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8003d5a:	6a3b      	ldr	r3, [r7, #32]
 8003d5c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d007      	beq.n	8003d74 <HAL_ADC_IRQHandler+0x260>
 8003d64:	68bb      	ldr	r3, [r7, #8]
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d03f      	beq.n	8003dea <HAL_ADC_IRQHandler+0x2d6>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8003d6a:	6a3b      	ldr	r3, [r7, #32]
 8003d6c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d13a      	bne.n	8003dea <HAL_ADC_IRQHandler+0x2d6>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d7e:	2b40      	cmp	r3, #64	; 0x40
 8003d80:	d133      	bne.n	8003dea <HAL_ADC_IRQHandler+0x2d6>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8003d82:	6a3b      	ldr	r3, [r7, #32]
 8003d84:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d12e      	bne.n	8003dea <HAL_ADC_IRQHandler+0x2d6>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	4618      	mov	r0, r3
 8003d92:	f7ff fd21 	bl	80037d8 <LL_ADC_INJ_IsConversionOngoing>
 8003d96:	4603      	mov	r3, r0
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d11a      	bne.n	8003dd2 <HAL_ADC_IRQHandler+0x2be>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	685a      	ldr	r2, [r3, #4]
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003daa:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003db0:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	65da      	str	r2, [r3, #92]	; 0x5c

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003dbc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d112      	bne.n	8003dea <HAL_ADC_IRQHandler+0x2d6>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003dc8:	f043 0201 	orr.w	r2, r3, #1
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	65da      	str	r2, [r3, #92]	; 0x5c
 8003dd0:	e00b      	b.n	8003dea <HAL_ADC_IRQHandler+0x2d6>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003dd6:	f043 0210 	orr.w	r2, r3, #16
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	65da      	str	r2, [r3, #92]	; 0x5c

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003de2:	f043 0201 	orr.w	r2, r3, #1
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	661a      	str	r2, [r3, #96]	; 0x60
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8003dea:	6878      	ldr	r0, [r7, #4]
 8003dec:	f7fe fa4c 	bl	8002288 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	2260      	movs	r2, #96	; 0x60
 8003df6:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8003df8:	69fb      	ldr	r3, [r7, #28]
 8003dfa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d011      	beq.n	8003e26 <HAL_ADC_IRQHandler+0x312>
 8003e02:	69bb      	ldr	r3, [r7, #24]
 8003e04:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d00c      	beq.n	8003e26 <HAL_ADC_IRQHandler+0x312>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e10:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8003e18:	6878      	ldr	r0, [r7, #4]
 8003e1a:	f000 f89f 	bl	8003f5c <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	2280      	movs	r2, #128	; 0x80
 8003e24:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8003e26:	69fb      	ldr	r3, [r7, #28]
 8003e28:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d012      	beq.n	8003e56 <HAL_ADC_IRQHandler+0x342>
 8003e30:	69bb      	ldr	r3, [r7, #24]
 8003e32:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d00d      	beq.n	8003e56 <HAL_ADC_IRQHandler+0x342>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e3e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8003e46:	6878      	ldr	r0, [r7, #4]
 8003e48:	f000 ff94 	bl	8004d74 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003e54:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8003e56:	69fb      	ldr	r3, [r7, #28]
 8003e58:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d012      	beq.n	8003e86 <HAL_ADC_IRQHandler+0x372>
 8003e60:	69bb      	ldr	r3, [r7, #24]
 8003e62:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d00d      	beq.n	8003e86 <HAL_ADC_IRQHandler+0x372>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e6e:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8003e76:	6878      	ldr	r0, [r7, #4]
 8003e78:	f000 ff86 	bl	8004d88 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003e84:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8003e86:	69fb      	ldr	r3, [r7, #28]
 8003e88:	f003 0310 	and.w	r3, r3, #16
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d036      	beq.n	8003efe <HAL_ADC_IRQHandler+0x3ea>
 8003e90:	69bb      	ldr	r3, [r7, #24]
 8003e92:	f003 0310 	and.w	r3, r3, #16
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d031      	beq.n	8003efe <HAL_ADC_IRQHandler+0x3ea>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d102      	bne.n	8003ea8 <HAL_ADC_IRQHandler+0x394>
    {
      overrun_error = 1UL;
 8003ea2:	2301      	movs	r3, #1
 8003ea4:	627b      	str	r3, [r7, #36]	; 0x24
 8003ea6:	e014      	b.n	8003ed2 <HAL_ADC_IRQHandler+0x3be>
    }
    else
    {
      /* Check DMA configuration */
#if defined(ADC_MULTIMODE_SUPPORT)
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 8003ea8:	697b      	ldr	r3, [r7, #20]
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d008      	beq.n	8003ec0 <HAL_ADC_IRQHandler+0x3ac>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8003eae:	4825      	ldr	r0, [pc, #148]	; (8003f44 <HAL_ADC_IRQHandler+0x430>)
 8003eb0:	f7ff fbfc 	bl	80036ac <LL_ADC_GetMultiDMATransfer>
 8003eb4:	4603      	mov	r3, r0
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d00b      	beq.n	8003ed2 <HAL_ADC_IRQHandler+0x3be>
        {
          overrun_error = 1UL;
 8003eba:	2301      	movs	r3, #1
 8003ebc:	627b      	str	r3, [r7, #36]	; 0x24
 8003ebe:	e008      	b.n	8003ed2 <HAL_ADC_IRQHandler+0x3be>
      }
      else
#endif
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	68db      	ldr	r3, [r3, #12]
 8003ec6:	f003 0301 	and.w	r3, r3, #1
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d001      	beq.n	8003ed2 <HAL_ADC_IRQHandler+0x3be>
        {
          overrun_error = 1UL;
 8003ece:	2301      	movs	r3, #1
 8003ed0:	627b      	str	r3, [r7, #36]	; 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 8003ed2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ed4:	2b01      	cmp	r3, #1
 8003ed6:	d10e      	bne.n	8003ef6 <HAL_ADC_IRQHandler+0x3e2>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003edc:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003ee8:	f043 0202 	orr.w	r2, r3, #2
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	661a      	str	r2, [r3, #96]	; 0x60
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8003ef0:	6878      	ldr	r0, [r7, #4]
 8003ef2:	f000 f83d 	bl	8003f70 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	2210      	movs	r2, #16
 8003efc:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8003efe:	69fb      	ldr	r3, [r7, #28]
 8003f00:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d018      	beq.n	8003f3a <HAL_ADC_IRQHandler+0x426>
 8003f08:	69bb      	ldr	r3, [r7, #24]
 8003f0a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d013      	beq.n	8003f3a <HAL_ADC_IRQHandler+0x426>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f16:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003f22:	f043 0208 	orr.w	r2, r3, #8
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	661a      	str	r2, [r3, #96]	; 0x60

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003f32:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8003f34:	6878      	ldr	r0, [r7, #4]
 8003f36:	f000 ff13 	bl	8004d60 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 8003f3a:	bf00      	nop
 8003f3c:	3728      	adds	r7, #40	; 0x28
 8003f3e:	46bd      	mov	sp, r7
 8003f40:	bd80      	pop	{r7, pc}
 8003f42:	bf00      	nop
 8003f44:	50000300 	.word	0x50000300

08003f48 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003f48:	b480      	push	{r7}
 8003f4a:	b083      	sub	sp, #12
 8003f4c:	af00      	add	r7, sp, #0
 8003f4e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8003f50:	bf00      	nop
 8003f52:	370c      	adds	r7, #12
 8003f54:	46bd      	mov	sp, r7
 8003f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f5a:	4770      	bx	lr

08003f5c <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8003f5c:	b480      	push	{r7}
 8003f5e:	b083      	sub	sp, #12
 8003f60:	af00      	add	r7, sp, #0
 8003f62:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8003f64:	bf00      	nop
 8003f66:	370c      	adds	r7, #12
 8003f68:	46bd      	mov	sp, r7
 8003f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f6e:	4770      	bx	lr

08003f70 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003f70:	b480      	push	{r7}
 8003f72:	b083      	sub	sp, #12
 8003f74:	af00      	add	r7, sp, #0
 8003f76:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8003f78:	bf00      	nop
 8003f7a:	370c      	adds	r7, #12
 8003f7c:	46bd      	mov	sp, r7
 8003f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f82:	4770      	bx	lr

08003f84 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8003f84:	b580      	push	{r7, lr}
 8003f86:	b0b6      	sub	sp, #216	; 0xd8
 8003f88:	af00      	add	r7, sp, #0
 8003f8a:	6078      	str	r0, [r7, #4]
 8003f8c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003f8e:	2300      	movs	r3, #0
 8003f90:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8003f94:	2300      	movs	r3, #0
 8003f96:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8003f9e:	2b01      	cmp	r3, #1
 8003fa0:	d101      	bne.n	8003fa6 <HAL_ADC_ConfigChannel+0x22>
 8003fa2:	2302      	movs	r3, #2
 8003fa4:	e3c8      	b.n	8004738 <HAL_ADC_ConfigChannel+0x7b4>
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	2201      	movs	r2, #1
 8003faa:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	4618      	mov	r0, r3
 8003fb4:	f7ff fbfd 	bl	80037b2 <LL_ADC_REG_IsConversionOngoing>
 8003fb8:	4603      	mov	r3, r0
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	f040 83ad 	bne.w	800471a <HAL_ADC_ConfigChannel+0x796>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	6818      	ldr	r0, [r3, #0]
 8003fc4:	683b      	ldr	r3, [r7, #0]
 8003fc6:	6859      	ldr	r1, [r3, #4]
 8003fc8:	683b      	ldr	r3, [r7, #0]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	461a      	mov	r2, r3
 8003fce:	f7ff facc 	bl	800356a <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	4618      	mov	r0, r3
 8003fd8:	f7ff fbeb 	bl	80037b2 <LL_ADC_REG_IsConversionOngoing>
 8003fdc:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	4618      	mov	r0, r3
 8003fe6:	f7ff fbf7 	bl	80037d8 <LL_ADC_INJ_IsConversionOngoing>
 8003fea:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003fee:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	f040 81d9 	bne.w	80043aa <HAL_ADC_ConfigChannel+0x426>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003ff8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	f040 81d4 	bne.w	80043aa <HAL_ADC_ConfigChannel+0x426>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8004002:	683b      	ldr	r3, [r7, #0]
 8004004:	689b      	ldr	r3, [r3, #8]
 8004006:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800400a:	d10f      	bne.n	800402c <HAL_ADC_ConfigChannel+0xa8>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	6818      	ldr	r0, [r3, #0]
 8004010:	683b      	ldr	r3, [r7, #0]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	2200      	movs	r2, #0
 8004016:	4619      	mov	r1, r3
 8004018:	f7ff fae6 	bl	80035e8 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8004024:	4618      	mov	r0, r3
 8004026:	f7ff fa7a 	bl	800351e <LL_ADC_SetSamplingTimeCommonConfig>
 800402a:	e00e      	b.n	800404a <HAL_ADC_ConfigChannel+0xc6>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	6818      	ldr	r0, [r3, #0]
 8004030:	683b      	ldr	r3, [r7, #0]
 8004032:	6819      	ldr	r1, [r3, #0]
 8004034:	683b      	ldr	r3, [r7, #0]
 8004036:	689b      	ldr	r3, [r3, #8]
 8004038:	461a      	mov	r2, r3
 800403a:	f7ff fad5 	bl	80035e8 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	2100      	movs	r1, #0
 8004044:	4618      	mov	r0, r3
 8004046:	f7ff fa6a 	bl	800351e <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 800404a:	683b      	ldr	r3, [r7, #0]
 800404c:	695a      	ldr	r2, [r3, #20]
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	68db      	ldr	r3, [r3, #12]
 8004054:	08db      	lsrs	r3, r3, #3
 8004056:	f003 0303 	and.w	r3, r3, #3
 800405a:	005b      	lsls	r3, r3, #1
 800405c:	fa02 f303 	lsl.w	r3, r2, r3
 8004060:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8004064:	683b      	ldr	r3, [r7, #0]
 8004066:	691b      	ldr	r3, [r3, #16]
 8004068:	2b04      	cmp	r3, #4
 800406a:	d022      	beq.n	80040b2 <HAL_ADC_ConfigChannel+0x12e>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	6818      	ldr	r0, [r3, #0]
 8004070:	683b      	ldr	r3, [r7, #0]
 8004072:	6919      	ldr	r1, [r3, #16]
 8004074:	683b      	ldr	r3, [r7, #0]
 8004076:	681a      	ldr	r2, [r3, #0]
 8004078:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800407c:	f7ff f9c4 	bl	8003408 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(sConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	6818      	ldr	r0, [r3, #0]
 8004084:	683b      	ldr	r3, [r7, #0]
 8004086:	6919      	ldr	r1, [r3, #16]
 8004088:	683b      	ldr	r3, [r7, #0]
 800408a:	699b      	ldr	r3, [r3, #24]
 800408c:	461a      	mov	r2, r3
 800408e:	f7ff fa10 	bl	80034b2 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	6818      	ldr	r0, [r3, #0]
 8004096:	683b      	ldr	r3, [r7, #0]
 8004098:	6919      	ldr	r1, [r3, #16]
 800409a:	683b      	ldr	r3, [r7, #0]
 800409c:	7f1b      	ldrb	r3, [r3, #28]
 800409e:	2b01      	cmp	r3, #1
 80040a0:	d102      	bne.n	80040a8 <HAL_ADC_ConfigChannel+0x124>
 80040a2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80040a6:	e000      	b.n	80040aa <HAL_ADC_ConfigChannel+0x126>
 80040a8:	2300      	movs	r3, #0
 80040aa:	461a      	mov	r2, r3
 80040ac:	f7ff fa1c 	bl	80034e8 <LL_ADC_SetOffsetSaturation>
 80040b0:	e17b      	b.n	80043aa <HAL_ADC_ConfigChannel+0x426>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	2100      	movs	r1, #0
 80040b8:	4618      	mov	r0, r3
 80040ba:	f7ff f9c9 	bl	8003450 <LL_ADC_GetOffsetChannel>
 80040be:	4603      	mov	r3, r0
 80040c0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d10a      	bne.n	80040de <HAL_ADC_ConfigChannel+0x15a>
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	2100      	movs	r1, #0
 80040ce:	4618      	mov	r0, r3
 80040d0:	f7ff f9be 	bl	8003450 <LL_ADC_GetOffsetChannel>
 80040d4:	4603      	mov	r3, r0
 80040d6:	0e9b      	lsrs	r3, r3, #26
 80040d8:	f003 021f 	and.w	r2, r3, #31
 80040dc:	e01e      	b.n	800411c <HAL_ADC_ConfigChannel+0x198>
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	2100      	movs	r1, #0
 80040e4:	4618      	mov	r0, r3
 80040e6:	f7ff f9b3 	bl	8003450 <LL_ADC_GetOffsetChannel>
 80040ea:	4603      	mov	r3, r0
 80040ec:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040f0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80040f4:	fa93 f3a3 	rbit	r3, r3
 80040f8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80040fc:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8004100:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8004104:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004108:	2b00      	cmp	r3, #0
 800410a:	d101      	bne.n	8004110 <HAL_ADC_ConfigChannel+0x18c>
  {
    return 32U;
 800410c:	2320      	movs	r3, #32
 800410e:	e004      	b.n	800411a <HAL_ADC_ConfigChannel+0x196>
  }
  return __builtin_clz(value);
 8004110:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004114:	fab3 f383 	clz	r3, r3
 8004118:	b2db      	uxtb	r3, r3
 800411a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800411c:	683b      	ldr	r3, [r7, #0]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004124:	2b00      	cmp	r3, #0
 8004126:	d105      	bne.n	8004134 <HAL_ADC_ConfigChannel+0x1b0>
 8004128:	683b      	ldr	r3, [r7, #0]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	0e9b      	lsrs	r3, r3, #26
 800412e:	f003 031f 	and.w	r3, r3, #31
 8004132:	e018      	b.n	8004166 <HAL_ADC_ConfigChannel+0x1e2>
 8004134:	683b      	ldr	r3, [r7, #0]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800413c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8004140:	fa93 f3a3 	rbit	r3, r3
 8004144:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8004148:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800414c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8004150:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8004154:	2b00      	cmp	r3, #0
 8004156:	d101      	bne.n	800415c <HAL_ADC_ConfigChannel+0x1d8>
    return 32U;
 8004158:	2320      	movs	r3, #32
 800415a:	e004      	b.n	8004166 <HAL_ADC_ConfigChannel+0x1e2>
  return __builtin_clz(value);
 800415c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8004160:	fab3 f383 	clz	r3, r3
 8004164:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8004166:	429a      	cmp	r2, r3
 8004168:	d106      	bne.n	8004178 <HAL_ADC_ConfigChannel+0x1f4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	2200      	movs	r2, #0
 8004170:	2100      	movs	r1, #0
 8004172:	4618      	mov	r0, r3
 8004174:	f7ff f982 	bl	800347c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	2101      	movs	r1, #1
 800417e:	4618      	mov	r0, r3
 8004180:	f7ff f966 	bl	8003450 <LL_ADC_GetOffsetChannel>
 8004184:	4603      	mov	r3, r0
 8004186:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800418a:	2b00      	cmp	r3, #0
 800418c:	d10a      	bne.n	80041a4 <HAL_ADC_ConfigChannel+0x220>
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	2101      	movs	r1, #1
 8004194:	4618      	mov	r0, r3
 8004196:	f7ff f95b 	bl	8003450 <LL_ADC_GetOffsetChannel>
 800419a:	4603      	mov	r3, r0
 800419c:	0e9b      	lsrs	r3, r3, #26
 800419e:	f003 021f 	and.w	r2, r3, #31
 80041a2:	e01e      	b.n	80041e2 <HAL_ADC_ConfigChannel+0x25e>
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	2101      	movs	r1, #1
 80041aa:	4618      	mov	r0, r3
 80041ac:	f7ff f950 	bl	8003450 <LL_ADC_GetOffsetChannel>
 80041b0:	4603      	mov	r3, r0
 80041b2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041b6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80041ba:	fa93 f3a3 	rbit	r3, r3
 80041be:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 80041c2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80041c6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 80041ca:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d101      	bne.n	80041d6 <HAL_ADC_ConfigChannel+0x252>
    return 32U;
 80041d2:	2320      	movs	r3, #32
 80041d4:	e004      	b.n	80041e0 <HAL_ADC_ConfigChannel+0x25c>
  return __builtin_clz(value);
 80041d6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80041da:	fab3 f383 	clz	r3, r3
 80041de:	b2db      	uxtb	r3, r3
 80041e0:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80041e2:	683b      	ldr	r3, [r7, #0]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d105      	bne.n	80041fa <HAL_ADC_ConfigChannel+0x276>
 80041ee:	683b      	ldr	r3, [r7, #0]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	0e9b      	lsrs	r3, r3, #26
 80041f4:	f003 031f 	and.w	r3, r3, #31
 80041f8:	e018      	b.n	800422c <HAL_ADC_ConfigChannel+0x2a8>
 80041fa:	683b      	ldr	r3, [r7, #0]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004202:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004206:	fa93 f3a3 	rbit	r3, r3
 800420a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 800420e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8004212:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8004216:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800421a:	2b00      	cmp	r3, #0
 800421c:	d101      	bne.n	8004222 <HAL_ADC_ConfigChannel+0x29e>
    return 32U;
 800421e:	2320      	movs	r3, #32
 8004220:	e004      	b.n	800422c <HAL_ADC_ConfigChannel+0x2a8>
  return __builtin_clz(value);
 8004222:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004226:	fab3 f383 	clz	r3, r3
 800422a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800422c:	429a      	cmp	r2, r3
 800422e:	d106      	bne.n	800423e <HAL_ADC_ConfigChannel+0x2ba>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	2200      	movs	r2, #0
 8004236:	2101      	movs	r1, #1
 8004238:	4618      	mov	r0, r3
 800423a:	f7ff f91f 	bl	800347c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	2102      	movs	r1, #2
 8004244:	4618      	mov	r0, r3
 8004246:	f7ff f903 	bl	8003450 <LL_ADC_GetOffsetChannel>
 800424a:	4603      	mov	r3, r0
 800424c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004250:	2b00      	cmp	r3, #0
 8004252:	d10a      	bne.n	800426a <HAL_ADC_ConfigChannel+0x2e6>
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	2102      	movs	r1, #2
 800425a:	4618      	mov	r0, r3
 800425c:	f7ff f8f8 	bl	8003450 <LL_ADC_GetOffsetChannel>
 8004260:	4603      	mov	r3, r0
 8004262:	0e9b      	lsrs	r3, r3, #26
 8004264:	f003 021f 	and.w	r2, r3, #31
 8004268:	e01e      	b.n	80042a8 <HAL_ADC_ConfigChannel+0x324>
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	2102      	movs	r1, #2
 8004270:	4618      	mov	r0, r3
 8004272:	f7ff f8ed 	bl	8003450 <LL_ADC_GetOffsetChannel>
 8004276:	4603      	mov	r3, r0
 8004278:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800427c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004280:	fa93 f3a3 	rbit	r3, r3
 8004284:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8004288:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800428c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8004290:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004294:	2b00      	cmp	r3, #0
 8004296:	d101      	bne.n	800429c <HAL_ADC_ConfigChannel+0x318>
    return 32U;
 8004298:	2320      	movs	r3, #32
 800429a:	e004      	b.n	80042a6 <HAL_ADC_ConfigChannel+0x322>
  return __builtin_clz(value);
 800429c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80042a0:	fab3 f383 	clz	r3, r3
 80042a4:	b2db      	uxtb	r3, r3
 80042a6:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80042a8:	683b      	ldr	r3, [r7, #0]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d105      	bne.n	80042c0 <HAL_ADC_ConfigChannel+0x33c>
 80042b4:	683b      	ldr	r3, [r7, #0]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	0e9b      	lsrs	r3, r3, #26
 80042ba:	f003 031f 	and.w	r3, r3, #31
 80042be:	e016      	b.n	80042ee <HAL_ADC_ConfigChannel+0x36a>
 80042c0:	683b      	ldr	r3, [r7, #0]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042c8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80042cc:	fa93 f3a3 	rbit	r3, r3
 80042d0:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 80042d2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80042d4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 80042d8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d101      	bne.n	80042e4 <HAL_ADC_ConfigChannel+0x360>
    return 32U;
 80042e0:	2320      	movs	r3, #32
 80042e2:	e004      	b.n	80042ee <HAL_ADC_ConfigChannel+0x36a>
  return __builtin_clz(value);
 80042e4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80042e8:	fab3 f383 	clz	r3, r3
 80042ec:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80042ee:	429a      	cmp	r2, r3
 80042f0:	d106      	bne.n	8004300 <HAL_ADC_ConfigChannel+0x37c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	2200      	movs	r2, #0
 80042f8:	2102      	movs	r1, #2
 80042fa:	4618      	mov	r0, r3
 80042fc:	f7ff f8be 	bl	800347c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	2103      	movs	r1, #3
 8004306:	4618      	mov	r0, r3
 8004308:	f7ff f8a2 	bl	8003450 <LL_ADC_GetOffsetChannel>
 800430c:	4603      	mov	r3, r0
 800430e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004312:	2b00      	cmp	r3, #0
 8004314:	d10a      	bne.n	800432c <HAL_ADC_ConfigChannel+0x3a8>
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	2103      	movs	r1, #3
 800431c:	4618      	mov	r0, r3
 800431e:	f7ff f897 	bl	8003450 <LL_ADC_GetOffsetChannel>
 8004322:	4603      	mov	r3, r0
 8004324:	0e9b      	lsrs	r3, r3, #26
 8004326:	f003 021f 	and.w	r2, r3, #31
 800432a:	e017      	b.n	800435c <HAL_ADC_ConfigChannel+0x3d8>
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	2103      	movs	r1, #3
 8004332:	4618      	mov	r0, r3
 8004334:	f7ff f88c 	bl	8003450 <LL_ADC_GetOffsetChannel>
 8004338:	4603      	mov	r3, r0
 800433a:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800433c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800433e:	fa93 f3a3 	rbit	r3, r3
 8004342:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8004344:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004346:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8004348:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800434a:	2b00      	cmp	r3, #0
 800434c:	d101      	bne.n	8004352 <HAL_ADC_ConfigChannel+0x3ce>
    return 32U;
 800434e:	2320      	movs	r3, #32
 8004350:	e003      	b.n	800435a <HAL_ADC_ConfigChannel+0x3d6>
  return __builtin_clz(value);
 8004352:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004354:	fab3 f383 	clz	r3, r3
 8004358:	b2db      	uxtb	r3, r3
 800435a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800435c:	683b      	ldr	r3, [r7, #0]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004364:	2b00      	cmp	r3, #0
 8004366:	d105      	bne.n	8004374 <HAL_ADC_ConfigChannel+0x3f0>
 8004368:	683b      	ldr	r3, [r7, #0]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	0e9b      	lsrs	r3, r3, #26
 800436e:	f003 031f 	and.w	r3, r3, #31
 8004372:	e011      	b.n	8004398 <HAL_ADC_ConfigChannel+0x414>
 8004374:	683b      	ldr	r3, [r7, #0]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800437a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800437c:	fa93 f3a3 	rbit	r3, r3
 8004380:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8004382:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004384:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8004386:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004388:	2b00      	cmp	r3, #0
 800438a:	d101      	bne.n	8004390 <HAL_ADC_ConfigChannel+0x40c>
    return 32U;
 800438c:	2320      	movs	r3, #32
 800438e:	e003      	b.n	8004398 <HAL_ADC_ConfigChannel+0x414>
  return __builtin_clz(value);
 8004390:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004392:	fab3 f383 	clz	r3, r3
 8004396:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8004398:	429a      	cmp	r2, r3
 800439a:	d106      	bne.n	80043aa <HAL_ADC_ConfigChannel+0x426>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	2200      	movs	r2, #0
 80043a2:	2103      	movs	r1, #3
 80043a4:	4618      	mov	r0, r3
 80043a6:	f7ff f869 	bl	800347c <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	4618      	mov	r0, r3
 80043b0:	f7ff f9ec 	bl	800378c <LL_ADC_IsEnabled>
 80043b4:	4603      	mov	r3, r0
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	f040 8140 	bne.w	800463c <HAL_ADC_ConfigChannel+0x6b8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	6818      	ldr	r0, [r3, #0]
 80043c0:	683b      	ldr	r3, [r7, #0]
 80043c2:	6819      	ldr	r1, [r3, #0]
 80043c4:	683b      	ldr	r3, [r7, #0]
 80043c6:	68db      	ldr	r3, [r3, #12]
 80043c8:	461a      	mov	r2, r3
 80043ca:	f7ff f939 	bl	8003640 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80043ce:	683b      	ldr	r3, [r7, #0]
 80043d0:	68db      	ldr	r3, [r3, #12]
 80043d2:	4a8f      	ldr	r2, [pc, #572]	; (8004610 <HAL_ADC_ConfigChannel+0x68c>)
 80043d4:	4293      	cmp	r3, r2
 80043d6:	f040 8131 	bne.w	800463c <HAL_ADC_ConfigChannel+0x6b8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80043de:	683b      	ldr	r3, [r7, #0]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d10b      	bne.n	8004402 <HAL_ADC_ConfigChannel+0x47e>
 80043ea:	683b      	ldr	r3, [r7, #0]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	0e9b      	lsrs	r3, r3, #26
 80043f0:	3301      	adds	r3, #1
 80043f2:	f003 031f 	and.w	r3, r3, #31
 80043f6:	2b09      	cmp	r3, #9
 80043f8:	bf94      	ite	ls
 80043fa:	2301      	movls	r3, #1
 80043fc:	2300      	movhi	r3, #0
 80043fe:	b2db      	uxtb	r3, r3
 8004400:	e019      	b.n	8004436 <HAL_ADC_ConfigChannel+0x4b2>
 8004402:	683b      	ldr	r3, [r7, #0]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004408:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800440a:	fa93 f3a3 	rbit	r3, r3
 800440e:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8004410:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004412:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8004414:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004416:	2b00      	cmp	r3, #0
 8004418:	d101      	bne.n	800441e <HAL_ADC_ConfigChannel+0x49a>
    return 32U;
 800441a:	2320      	movs	r3, #32
 800441c:	e003      	b.n	8004426 <HAL_ADC_ConfigChannel+0x4a2>
  return __builtin_clz(value);
 800441e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004420:	fab3 f383 	clz	r3, r3
 8004424:	b2db      	uxtb	r3, r3
 8004426:	3301      	adds	r3, #1
 8004428:	f003 031f 	and.w	r3, r3, #31
 800442c:	2b09      	cmp	r3, #9
 800442e:	bf94      	ite	ls
 8004430:	2301      	movls	r3, #1
 8004432:	2300      	movhi	r3, #0
 8004434:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004436:	2b00      	cmp	r3, #0
 8004438:	d079      	beq.n	800452e <HAL_ADC_ConfigChannel+0x5aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800443a:	683b      	ldr	r3, [r7, #0]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004442:	2b00      	cmp	r3, #0
 8004444:	d107      	bne.n	8004456 <HAL_ADC_ConfigChannel+0x4d2>
 8004446:	683b      	ldr	r3, [r7, #0]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	0e9b      	lsrs	r3, r3, #26
 800444c:	3301      	adds	r3, #1
 800444e:	069b      	lsls	r3, r3, #26
 8004450:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004454:	e015      	b.n	8004482 <HAL_ADC_ConfigChannel+0x4fe>
 8004456:	683b      	ldr	r3, [r7, #0]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800445c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800445e:	fa93 f3a3 	rbit	r3, r3
 8004462:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8004464:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004466:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8004468:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800446a:	2b00      	cmp	r3, #0
 800446c:	d101      	bne.n	8004472 <HAL_ADC_ConfigChannel+0x4ee>
    return 32U;
 800446e:	2320      	movs	r3, #32
 8004470:	e003      	b.n	800447a <HAL_ADC_ConfigChannel+0x4f6>
  return __builtin_clz(value);
 8004472:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004474:	fab3 f383 	clz	r3, r3
 8004478:	b2db      	uxtb	r3, r3
 800447a:	3301      	adds	r3, #1
 800447c:	069b      	lsls	r3, r3, #26
 800447e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004482:	683b      	ldr	r3, [r7, #0]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800448a:	2b00      	cmp	r3, #0
 800448c:	d109      	bne.n	80044a2 <HAL_ADC_ConfigChannel+0x51e>
 800448e:	683b      	ldr	r3, [r7, #0]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	0e9b      	lsrs	r3, r3, #26
 8004494:	3301      	adds	r3, #1
 8004496:	f003 031f 	and.w	r3, r3, #31
 800449a:	2101      	movs	r1, #1
 800449c:	fa01 f303 	lsl.w	r3, r1, r3
 80044a0:	e017      	b.n	80044d2 <HAL_ADC_ConfigChannel+0x54e>
 80044a2:	683b      	ldr	r3, [r7, #0]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80044a8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80044aa:	fa93 f3a3 	rbit	r3, r3
 80044ae:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 80044b0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80044b2:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 80044b4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d101      	bne.n	80044be <HAL_ADC_ConfigChannel+0x53a>
    return 32U;
 80044ba:	2320      	movs	r3, #32
 80044bc:	e003      	b.n	80044c6 <HAL_ADC_ConfigChannel+0x542>
  return __builtin_clz(value);
 80044be:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80044c0:	fab3 f383 	clz	r3, r3
 80044c4:	b2db      	uxtb	r3, r3
 80044c6:	3301      	adds	r3, #1
 80044c8:	f003 031f 	and.w	r3, r3, #31
 80044cc:	2101      	movs	r1, #1
 80044ce:	fa01 f303 	lsl.w	r3, r1, r3
 80044d2:	ea42 0103 	orr.w	r1, r2, r3
 80044d6:	683b      	ldr	r3, [r7, #0]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d10a      	bne.n	80044f8 <HAL_ADC_ConfigChannel+0x574>
 80044e2:	683b      	ldr	r3, [r7, #0]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	0e9b      	lsrs	r3, r3, #26
 80044e8:	3301      	adds	r3, #1
 80044ea:	f003 021f 	and.w	r2, r3, #31
 80044ee:	4613      	mov	r3, r2
 80044f0:	005b      	lsls	r3, r3, #1
 80044f2:	4413      	add	r3, r2
 80044f4:	051b      	lsls	r3, r3, #20
 80044f6:	e018      	b.n	800452a <HAL_ADC_ConfigChannel+0x5a6>
 80044f8:	683b      	ldr	r3, [r7, #0]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80044fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004500:	fa93 f3a3 	rbit	r3, r3
 8004504:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8004506:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004508:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 800450a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800450c:	2b00      	cmp	r3, #0
 800450e:	d101      	bne.n	8004514 <HAL_ADC_ConfigChannel+0x590>
    return 32U;
 8004510:	2320      	movs	r3, #32
 8004512:	e003      	b.n	800451c <HAL_ADC_ConfigChannel+0x598>
  return __builtin_clz(value);
 8004514:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004516:	fab3 f383 	clz	r3, r3
 800451a:	b2db      	uxtb	r3, r3
 800451c:	3301      	adds	r3, #1
 800451e:	f003 021f 	and.w	r2, r3, #31
 8004522:	4613      	mov	r3, r2
 8004524:	005b      	lsls	r3, r3, #1
 8004526:	4413      	add	r3, r2
 8004528:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800452a:	430b      	orrs	r3, r1
 800452c:	e081      	b.n	8004632 <HAL_ADC_ConfigChannel+0x6ae>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800452e:	683b      	ldr	r3, [r7, #0]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004536:	2b00      	cmp	r3, #0
 8004538:	d107      	bne.n	800454a <HAL_ADC_ConfigChannel+0x5c6>
 800453a:	683b      	ldr	r3, [r7, #0]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	0e9b      	lsrs	r3, r3, #26
 8004540:	3301      	adds	r3, #1
 8004542:	069b      	lsls	r3, r3, #26
 8004544:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004548:	e015      	b.n	8004576 <HAL_ADC_ConfigChannel+0x5f2>
 800454a:	683b      	ldr	r3, [r7, #0]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004550:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004552:	fa93 f3a3 	rbit	r3, r3
 8004556:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8004558:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800455a:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 800455c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800455e:	2b00      	cmp	r3, #0
 8004560:	d101      	bne.n	8004566 <HAL_ADC_ConfigChannel+0x5e2>
    return 32U;
 8004562:	2320      	movs	r3, #32
 8004564:	e003      	b.n	800456e <HAL_ADC_ConfigChannel+0x5ea>
  return __builtin_clz(value);
 8004566:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004568:	fab3 f383 	clz	r3, r3
 800456c:	b2db      	uxtb	r3, r3
 800456e:	3301      	adds	r3, #1
 8004570:	069b      	lsls	r3, r3, #26
 8004572:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004576:	683b      	ldr	r3, [r7, #0]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800457e:	2b00      	cmp	r3, #0
 8004580:	d109      	bne.n	8004596 <HAL_ADC_ConfigChannel+0x612>
 8004582:	683b      	ldr	r3, [r7, #0]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	0e9b      	lsrs	r3, r3, #26
 8004588:	3301      	adds	r3, #1
 800458a:	f003 031f 	and.w	r3, r3, #31
 800458e:	2101      	movs	r1, #1
 8004590:	fa01 f303 	lsl.w	r3, r1, r3
 8004594:	e017      	b.n	80045c6 <HAL_ADC_ConfigChannel+0x642>
 8004596:	683b      	ldr	r3, [r7, #0]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800459c:	6a3b      	ldr	r3, [r7, #32]
 800459e:	fa93 f3a3 	rbit	r3, r3
 80045a2:	61fb      	str	r3, [r7, #28]
  return result;
 80045a4:	69fb      	ldr	r3, [r7, #28]
 80045a6:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80045a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d101      	bne.n	80045b2 <HAL_ADC_ConfigChannel+0x62e>
    return 32U;
 80045ae:	2320      	movs	r3, #32
 80045b0:	e003      	b.n	80045ba <HAL_ADC_ConfigChannel+0x636>
  return __builtin_clz(value);
 80045b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045b4:	fab3 f383 	clz	r3, r3
 80045b8:	b2db      	uxtb	r3, r3
 80045ba:	3301      	adds	r3, #1
 80045bc:	f003 031f 	and.w	r3, r3, #31
 80045c0:	2101      	movs	r1, #1
 80045c2:	fa01 f303 	lsl.w	r3, r1, r3
 80045c6:	ea42 0103 	orr.w	r1, r2, r3
 80045ca:	683b      	ldr	r3, [r7, #0]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d10d      	bne.n	80045f2 <HAL_ADC_ConfigChannel+0x66e>
 80045d6:	683b      	ldr	r3, [r7, #0]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	0e9b      	lsrs	r3, r3, #26
 80045dc:	3301      	adds	r3, #1
 80045de:	f003 021f 	and.w	r2, r3, #31
 80045e2:	4613      	mov	r3, r2
 80045e4:	005b      	lsls	r3, r3, #1
 80045e6:	4413      	add	r3, r2
 80045e8:	3b1e      	subs	r3, #30
 80045ea:	051b      	lsls	r3, r3, #20
 80045ec:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80045f0:	e01e      	b.n	8004630 <HAL_ADC_ConfigChannel+0x6ac>
 80045f2:	683b      	ldr	r3, [r7, #0]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80045f8:	697b      	ldr	r3, [r7, #20]
 80045fa:	fa93 f3a3 	rbit	r3, r3
 80045fe:	613b      	str	r3, [r7, #16]
  return result;
 8004600:	693b      	ldr	r3, [r7, #16]
 8004602:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8004604:	69bb      	ldr	r3, [r7, #24]
 8004606:	2b00      	cmp	r3, #0
 8004608:	d104      	bne.n	8004614 <HAL_ADC_ConfigChannel+0x690>
    return 32U;
 800460a:	2320      	movs	r3, #32
 800460c:	e006      	b.n	800461c <HAL_ADC_ConfigChannel+0x698>
 800460e:	bf00      	nop
 8004610:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8004614:	69bb      	ldr	r3, [r7, #24]
 8004616:	fab3 f383 	clz	r3, r3
 800461a:	b2db      	uxtb	r3, r3
 800461c:	3301      	adds	r3, #1
 800461e:	f003 021f 	and.w	r2, r3, #31
 8004622:	4613      	mov	r3, r2
 8004624:	005b      	lsls	r3, r3, #1
 8004626:	4413      	add	r3, r2
 8004628:	3b1e      	subs	r3, #30
 800462a:	051b      	lsls	r3, r3, #20
 800462c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004630:	430b      	orrs	r3, r1
 8004632:	683a      	ldr	r2, [r7, #0]
 8004634:	6892      	ldr	r2, [r2, #8]
 8004636:	4619      	mov	r1, r3
 8004638:	f7fe ffd6 	bl	80035e8 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800463c:	683b      	ldr	r3, [r7, #0]
 800463e:	681a      	ldr	r2, [r3, #0]
 8004640:	4b3f      	ldr	r3, [pc, #252]	; (8004740 <HAL_ADC_ConfigChannel+0x7bc>)
 8004642:	4013      	ands	r3, r2
 8004644:	2b00      	cmp	r3, #0
 8004646:	d071      	beq.n	800472c <HAL_ADC_ConfigChannel+0x7a8>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004648:	483e      	ldr	r0, [pc, #248]	; (8004744 <HAL_ADC_ConfigChannel+0x7c0>)
 800464a:	f7fe fecf 	bl	80033ec <LL_ADC_GetCommonPathInternalCh>
 800464e:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8004652:	683b      	ldr	r3, [r7, #0]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	4a3c      	ldr	r2, [pc, #240]	; (8004748 <HAL_ADC_ConfigChannel+0x7c4>)
 8004658:	4293      	cmp	r3, r2
 800465a:	d004      	beq.n	8004666 <HAL_ADC_ConfigChannel+0x6e2>
 800465c:	683b      	ldr	r3, [r7, #0]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	4a3a      	ldr	r2, [pc, #232]	; (800474c <HAL_ADC_ConfigChannel+0x7c8>)
 8004662:	4293      	cmp	r3, r2
 8004664:	d127      	bne.n	80046b6 <HAL_ADC_ConfigChannel+0x732>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8004666:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800466a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800466e:	2b00      	cmp	r3, #0
 8004670:	d121      	bne.n	80046b6 <HAL_ADC_ConfigChannel+0x732>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800467a:	d157      	bne.n	800472c <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800467c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004680:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004684:	4619      	mov	r1, r3
 8004686:	482f      	ldr	r0, [pc, #188]	; (8004744 <HAL_ADC_ConfigChannel+0x7c0>)
 8004688:	f7fe fe9d 	bl	80033c6 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800468c:	4b30      	ldr	r3, [pc, #192]	; (8004750 <HAL_ADC_ConfigChannel+0x7cc>)
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	099b      	lsrs	r3, r3, #6
 8004692:	4a30      	ldr	r2, [pc, #192]	; (8004754 <HAL_ADC_ConfigChannel+0x7d0>)
 8004694:	fba2 2303 	umull	r2, r3, r2, r3
 8004698:	099b      	lsrs	r3, r3, #6
 800469a:	1c5a      	adds	r2, r3, #1
 800469c:	4613      	mov	r3, r2
 800469e:	005b      	lsls	r3, r3, #1
 80046a0:	4413      	add	r3, r2
 80046a2:	009b      	lsls	r3, r3, #2
 80046a4:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80046a6:	e002      	b.n	80046ae <HAL_ADC_ConfigChannel+0x72a>
          {
            wait_loop_index--;
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	3b01      	subs	r3, #1
 80046ac:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d1f9      	bne.n	80046a8 <HAL_ADC_ConfigChannel+0x724>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80046b4:	e03a      	b.n	800472c <HAL_ADC_ConfigChannel+0x7a8>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80046b6:	683b      	ldr	r3, [r7, #0]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	4a27      	ldr	r2, [pc, #156]	; (8004758 <HAL_ADC_ConfigChannel+0x7d4>)
 80046bc:	4293      	cmp	r3, r2
 80046be:	d113      	bne.n	80046e8 <HAL_ADC_ConfigChannel+0x764>
 80046c0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80046c4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d10d      	bne.n	80046e8 <HAL_ADC_ConfigChannel+0x764>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	4a22      	ldr	r2, [pc, #136]	; (800475c <HAL_ADC_ConfigChannel+0x7d8>)
 80046d2:	4293      	cmp	r3, r2
 80046d4:	d02a      	beq.n	800472c <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80046d6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80046da:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80046de:	4619      	mov	r1, r3
 80046e0:	4818      	ldr	r0, [pc, #96]	; (8004744 <HAL_ADC_ConfigChannel+0x7c0>)
 80046e2:	f7fe fe70 	bl	80033c6 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80046e6:	e021      	b.n	800472c <HAL_ADC_ConfigChannel+0x7a8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 80046e8:	683b      	ldr	r3, [r7, #0]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	4a1c      	ldr	r2, [pc, #112]	; (8004760 <HAL_ADC_ConfigChannel+0x7dc>)
 80046ee:	4293      	cmp	r3, r2
 80046f0:	d11c      	bne.n	800472c <HAL_ADC_ConfigChannel+0x7a8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80046f2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80046f6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d116      	bne.n	800472c <HAL_ADC_ConfigChannel+0x7a8>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	4a16      	ldr	r2, [pc, #88]	; (800475c <HAL_ADC_ConfigChannel+0x7d8>)
 8004704:	4293      	cmp	r3, r2
 8004706:	d011      	beq.n	800472c <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004708:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800470c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004710:	4619      	mov	r1, r3
 8004712:	480c      	ldr	r0, [pc, #48]	; (8004744 <HAL_ADC_ConfigChannel+0x7c0>)
 8004714:	f7fe fe57 	bl	80033c6 <LL_ADC_SetCommonPathInternalCh>
 8004718:	e008      	b.n	800472c <HAL_ADC_ConfigChannel+0x7a8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800471e:	f043 0220 	orr.w	r2, r3, #32
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8004726:	2301      	movs	r3, #1
 8004728:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	2200      	movs	r2, #0
 8004730:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8004734:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8004738:	4618      	mov	r0, r3
 800473a:	37d8      	adds	r7, #216	; 0xd8
 800473c:	46bd      	mov	sp, r7
 800473e:	bd80      	pop	{r7, pc}
 8004740:	80080000 	.word	0x80080000
 8004744:	50000300 	.word	0x50000300
 8004748:	c3210000 	.word	0xc3210000
 800474c:	90c00010 	.word	0x90c00010
 8004750:	2000001c 	.word	0x2000001c
 8004754:	053e2d63 	.word	0x053e2d63
 8004758:	c7520000 	.word	0xc7520000
 800475c:	50000100 	.word	0x50000100
 8004760:	cb840000 	.word	0xcb840000

08004764 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8004764:	b580      	push	{r7, lr}
 8004766:	b084      	sub	sp, #16
 8004768:	af00      	add	r7, sp, #0
 800476a:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	4618      	mov	r0, r3
 8004772:	f7ff f80b 	bl	800378c <LL_ADC_IsEnabled>
 8004776:	4603      	mov	r3, r0
 8004778:	2b00      	cmp	r3, #0
 800477a:	d14d      	bne.n	8004818 <ADC_Enable+0xb4>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	689a      	ldr	r2, [r3, #8]
 8004782:	4b28      	ldr	r3, [pc, #160]	; (8004824 <ADC_Enable+0xc0>)
 8004784:	4013      	ands	r3, r2
 8004786:	2b00      	cmp	r3, #0
 8004788:	d00d      	beq.n	80047a6 <ADC_Enable+0x42>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800478e:	f043 0210 	orr.w	r2, r3, #16
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800479a:	f043 0201 	orr.w	r2, r3, #1
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 80047a2:	2301      	movs	r3, #1
 80047a4:	e039      	b.n	800481a <ADC_Enable+0xb6>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	4618      	mov	r0, r3
 80047ac:	f7fe ffda 	bl	8003764 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80047b0:	f7fe fdc8 	bl	8003344 <HAL_GetTick>
 80047b4:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80047b6:	e028      	b.n	800480a <ADC_Enable+0xa6>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	4618      	mov	r0, r3
 80047be:	f7fe ffe5 	bl	800378c <LL_ADC_IsEnabled>
 80047c2:	4603      	mov	r3, r0
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d104      	bne.n	80047d2 <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	4618      	mov	r0, r3
 80047ce:	f7fe ffc9 	bl	8003764 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80047d2:	f7fe fdb7 	bl	8003344 <HAL_GetTick>
 80047d6:	4602      	mov	r2, r0
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	1ad3      	subs	r3, r2, r3
 80047dc:	2b02      	cmp	r3, #2
 80047de:	d914      	bls.n	800480a <ADC_Enable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	f003 0301 	and.w	r3, r3, #1
 80047ea:	2b01      	cmp	r3, #1
 80047ec:	d00d      	beq.n	800480a <ADC_Enable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80047f2:	f043 0210 	orr.w	r2, r3, #16
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80047fe:	f043 0201 	orr.w	r2, r3, #1
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 8004806:	2301      	movs	r3, #1
 8004808:	e007      	b.n	800481a <ADC_Enable+0xb6>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	f003 0301 	and.w	r3, r3, #1
 8004814:	2b01      	cmp	r3, #1
 8004816:	d1cf      	bne.n	80047b8 <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8004818:	2300      	movs	r3, #0
}
 800481a:	4618      	mov	r0, r3
 800481c:	3710      	adds	r7, #16
 800481e:	46bd      	mov	sp, r7
 8004820:	bd80      	pop	{r7, pc}
 8004822:	bf00      	nop
 8004824:	8000003f 	.word	0x8000003f

08004828 <LL_ADC_SetCommonPathInternalCh>:
{
 8004828:	b480      	push	{r7}
 800482a:	b083      	sub	sp, #12
 800482c:	af00      	add	r7, sp, #0
 800482e:	6078      	str	r0, [r7, #4]
 8004830:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	689b      	ldr	r3, [r3, #8]
 8004836:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 800483a:	683b      	ldr	r3, [r7, #0]
 800483c:	431a      	orrs	r2, r3
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	609a      	str	r2, [r3, #8]
}
 8004842:	bf00      	nop
 8004844:	370c      	adds	r7, #12
 8004846:	46bd      	mov	sp, r7
 8004848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800484c:	4770      	bx	lr

0800484e <LL_ADC_GetCommonPathInternalCh>:
{
 800484e:	b480      	push	{r7}
 8004850:	b083      	sub	sp, #12
 8004852:	af00      	add	r7, sp, #0
 8004854:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	689b      	ldr	r3, [r3, #8]
 800485a:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 800485e:	4618      	mov	r0, r3
 8004860:	370c      	adds	r7, #12
 8004862:	46bd      	mov	sp, r7
 8004864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004868:	4770      	bx	lr
	...

0800486c <LL_ADC_SetOffset>:
{
 800486c:	b480      	push	{r7}
 800486e:	b087      	sub	sp, #28
 8004870:	af00      	add	r7, sp, #0
 8004872:	60f8      	str	r0, [r7, #12]
 8004874:	60b9      	str	r1, [r7, #8]
 8004876:	607a      	str	r2, [r7, #4]
 8004878:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	3360      	adds	r3, #96	; 0x60
 800487e:	461a      	mov	r2, r3
 8004880:	68bb      	ldr	r3, [r7, #8]
 8004882:	009b      	lsls	r3, r3, #2
 8004884:	4413      	add	r3, r2
 8004886:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg,
 8004888:	697b      	ldr	r3, [r7, #20]
 800488a:	681a      	ldr	r2, [r3, #0]
 800488c:	4b08      	ldr	r3, [pc, #32]	; (80048b0 <LL_ADC_SetOffset+0x44>)
 800488e:	4013      	ands	r3, r2
 8004890:	687a      	ldr	r2, [r7, #4]
 8004892:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8004896:	683a      	ldr	r2, [r7, #0]
 8004898:	430a      	orrs	r2, r1
 800489a:	4313      	orrs	r3, r2
 800489c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80048a0:	697b      	ldr	r3, [r7, #20]
 80048a2:	601a      	str	r2, [r3, #0]
}
 80048a4:	bf00      	nop
 80048a6:	371c      	adds	r7, #28
 80048a8:	46bd      	mov	sp, r7
 80048aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ae:	4770      	bx	lr
 80048b0:	03fff000 	.word	0x03fff000

080048b4 <LL_ADC_GetOffsetChannel>:
{
 80048b4:	b480      	push	{r7}
 80048b6:	b085      	sub	sp, #20
 80048b8:	af00      	add	r7, sp, #0
 80048ba:	6078      	str	r0, [r7, #4]
 80048bc:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	3360      	adds	r3, #96	; 0x60
 80048c2:	461a      	mov	r2, r3
 80048c4:	683b      	ldr	r3, [r7, #0]
 80048c6:	009b      	lsls	r3, r3, #2
 80048c8:	4413      	add	r3, r2
 80048ca:	60fb      	str	r3, [r7, #12]
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 80048d4:	4618      	mov	r0, r3
 80048d6:	3714      	adds	r7, #20
 80048d8:	46bd      	mov	sp, r7
 80048da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048de:	4770      	bx	lr

080048e0 <LL_ADC_SetOffsetState>:
{
 80048e0:	b480      	push	{r7}
 80048e2:	b087      	sub	sp, #28
 80048e4:	af00      	add	r7, sp, #0
 80048e6:	60f8      	str	r0, [r7, #12]
 80048e8:	60b9      	str	r1, [r7, #8]
 80048ea:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	3360      	adds	r3, #96	; 0x60
 80048f0:	461a      	mov	r2, r3
 80048f2:	68bb      	ldr	r3, [r7, #8]
 80048f4:	009b      	lsls	r3, r3, #2
 80048f6:	4413      	add	r3, r2
 80048f8:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg,
 80048fa:	697b      	ldr	r3, [r7, #20]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	431a      	orrs	r2, r3
 8004906:	697b      	ldr	r3, [r7, #20]
 8004908:	601a      	str	r2, [r3, #0]
}
 800490a:	bf00      	nop
 800490c:	371c      	adds	r7, #28
 800490e:	46bd      	mov	sp, r7
 8004910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004914:	4770      	bx	lr

08004916 <LL_ADC_SetOffsetSign>:
{
 8004916:	b480      	push	{r7}
 8004918:	b087      	sub	sp, #28
 800491a:	af00      	add	r7, sp, #0
 800491c:	60f8      	str	r0, [r7, #12]
 800491e:	60b9      	str	r1, [r7, #8]
 8004920:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	3360      	adds	r3, #96	; 0x60
 8004926:	461a      	mov	r2, r3
 8004928:	68bb      	ldr	r3, [r7, #8]
 800492a:	009b      	lsls	r3, r3, #2
 800492c:	4413      	add	r3, r2
 800492e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg,
 8004930:	697b      	ldr	r3, [r7, #20]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	431a      	orrs	r2, r3
 800493c:	697b      	ldr	r3, [r7, #20]
 800493e:	601a      	str	r2, [r3, #0]
}
 8004940:	bf00      	nop
 8004942:	371c      	adds	r7, #28
 8004944:	46bd      	mov	sp, r7
 8004946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800494a:	4770      	bx	lr

0800494c <LL_ADC_SetOffsetSaturation>:
{
 800494c:	b480      	push	{r7}
 800494e:	b087      	sub	sp, #28
 8004950:	af00      	add	r7, sp, #0
 8004952:	60f8      	str	r0, [r7, #12]
 8004954:	60b9      	str	r1, [r7, #8]
 8004956:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	3360      	adds	r3, #96	; 0x60
 800495c:	461a      	mov	r2, r3
 800495e:	68bb      	ldr	r3, [r7, #8]
 8004960:	009b      	lsls	r3, r3, #2
 8004962:	4413      	add	r3, r2
 8004964:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg,
 8004966:	697b      	ldr	r3, [r7, #20]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	431a      	orrs	r2, r3
 8004972:	697b      	ldr	r3, [r7, #20]
 8004974:	601a      	str	r2, [r3, #0]
}
 8004976:	bf00      	nop
 8004978:	371c      	adds	r7, #28
 800497a:	46bd      	mov	sp, r7
 800497c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004980:	4770      	bx	lr

08004982 <LL_ADC_SetSamplingTimeCommonConfig>:
{
 8004982:	b480      	push	{r7}
 8004984:	b083      	sub	sp, #12
 8004986:	af00      	add	r7, sp, #0
 8004988:	6078      	str	r0, [r7, #4]
 800498a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	695b      	ldr	r3, [r3, #20]
 8004990:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004994:	683b      	ldr	r3, [r7, #0]
 8004996:	431a      	orrs	r2, r3
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	615a      	str	r2, [r3, #20]
}
 800499c:	bf00      	nop
 800499e:	370c      	adds	r7, #12
 80049a0:	46bd      	mov	sp, r7
 80049a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049a6:	4770      	bx	lr

080049a8 <LL_ADC_INJ_GetTrigAuto>:
{
 80049a8:	b480      	push	{r7}
 80049aa:	b083      	sub	sp, #12
 80049ac:	af00      	add	r7, sp, #0
 80049ae:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCx->CFGR, ADC_CFGR_JAUTO));
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	68db      	ldr	r3, [r3, #12]
 80049b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
}
 80049b8:	4618      	mov	r0, r3
 80049ba:	370c      	adds	r7, #12
 80049bc:	46bd      	mov	sp, r7
 80049be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049c2:	4770      	bx	lr

080049c4 <LL_ADC_SetChannelSamplingTime>:
{
 80049c4:	b480      	push	{r7}
 80049c6:	b087      	sub	sp, #28
 80049c8:	af00      	add	r7, sp, #0
 80049ca:	60f8      	str	r0, [r7, #12]
 80049cc:	60b9      	str	r1, [r7, #8]
 80049ce:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	3314      	adds	r3, #20
 80049d4:	461a      	mov	r2, r3
 80049d6:	68bb      	ldr	r3, [r7, #8]
 80049d8:	0e5b      	lsrs	r3, r3, #25
 80049da:	009b      	lsls	r3, r3, #2
 80049dc:	f003 0304 	and.w	r3, r3, #4
 80049e0:	4413      	add	r3, r2
 80049e2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg,
 80049e4:	697b      	ldr	r3, [r7, #20]
 80049e6:	681a      	ldr	r2, [r3, #0]
 80049e8:	68bb      	ldr	r3, [r7, #8]
 80049ea:	0d1b      	lsrs	r3, r3, #20
 80049ec:	f003 031f 	and.w	r3, r3, #31
 80049f0:	2107      	movs	r1, #7
 80049f2:	fa01 f303 	lsl.w	r3, r1, r3
 80049f6:	43db      	mvns	r3, r3
 80049f8:	401a      	ands	r2, r3
 80049fa:	68bb      	ldr	r3, [r7, #8]
 80049fc:	0d1b      	lsrs	r3, r3, #20
 80049fe:	f003 031f 	and.w	r3, r3, #31
 8004a02:	6879      	ldr	r1, [r7, #4]
 8004a04:	fa01 f303 	lsl.w	r3, r1, r3
 8004a08:	431a      	orrs	r2, r3
 8004a0a:	697b      	ldr	r3, [r7, #20]
 8004a0c:	601a      	str	r2, [r3, #0]
}
 8004a0e:	bf00      	nop
 8004a10:	371c      	adds	r7, #28
 8004a12:	46bd      	mov	sp, r7
 8004a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a18:	4770      	bx	lr
	...

08004a1c <LL_ADC_SetChannelSingleDiff>:
{
 8004a1c:	b480      	push	{r7}
 8004a1e:	b085      	sub	sp, #20
 8004a20:	af00      	add	r7, sp, #0
 8004a22:	60f8      	str	r0, [r7, #12]
 8004a24:	60b9      	str	r1, [r7, #8]
 8004a26:	607a      	str	r2, [r7, #4]
  if (SingleDiff == LL_ADC_DIFFERENTIAL_ENDED)
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	4a0f      	ldr	r2, [pc, #60]	; (8004a68 <LL_ADC_SetChannelSingleDiff+0x4c>)
 8004a2c:	4293      	cmp	r3, r2
 8004a2e:	d10a      	bne.n	8004a46 <LL_ADC_SetChannelSingleDiff+0x2a>
    SET_BIT(ADCx->DIFSEL,
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8004a36:	68bb      	ldr	r3, [r7, #8]
 8004a38:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004a3c:	431a      	orrs	r2, r3
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
 8004a44:	e00a      	b.n	8004a5c <LL_ADC_SetChannelSingleDiff+0x40>
    CLEAR_BIT(ADCx->DIFSEL,
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8004a4c:	68bb      	ldr	r3, [r7, #8]
 8004a4e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004a52:	43db      	mvns	r3, r3
 8004a54:	401a      	ands	r2, r3
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
 8004a5c:	bf00      	nop
 8004a5e:	3714      	adds	r7, #20
 8004a60:	46bd      	mov	sp, r7
 8004a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a66:	4770      	bx	lr
 8004a68:	407f0000 	.word	0x407f0000

08004a6c <LL_ADC_GetMultimode>:
{
 8004a6c:	b480      	push	{r7}
 8004a6e:	b083      	sub	sp, #12
 8004a70:	af00      	add	r7, sp, #0
 8004a72:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	689b      	ldr	r3, [r3, #8]
 8004a78:	f003 031f 	and.w	r3, r3, #31
}
 8004a7c:	4618      	mov	r0, r3
 8004a7e:	370c      	adds	r7, #12
 8004a80:	46bd      	mov	sp, r7
 8004a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a86:	4770      	bx	lr

08004a88 <LL_ADC_IsEnabled>:
{
 8004a88:	b480      	push	{r7}
 8004a8a:	b083      	sub	sp, #12
 8004a8c:	af00      	add	r7, sp, #0
 8004a8e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	689b      	ldr	r3, [r3, #8]
 8004a94:	f003 0301 	and.w	r3, r3, #1
 8004a98:	2b01      	cmp	r3, #1
 8004a9a:	d101      	bne.n	8004aa0 <LL_ADC_IsEnabled+0x18>
 8004a9c:	2301      	movs	r3, #1
 8004a9e:	e000      	b.n	8004aa2 <LL_ADC_IsEnabled+0x1a>
 8004aa0:	2300      	movs	r3, #0
}
 8004aa2:	4618      	mov	r0, r3
 8004aa4:	370c      	adds	r7, #12
 8004aa6:	46bd      	mov	sp, r7
 8004aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aac:	4770      	bx	lr

08004aae <LL_ADC_REG_IsConversionOngoing>:
{
 8004aae:	b480      	push	{r7}
 8004ab0:	b083      	sub	sp, #12
 8004ab2:	af00      	add	r7, sp, #0
 8004ab4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	689b      	ldr	r3, [r3, #8]
 8004aba:	f003 0304 	and.w	r3, r3, #4
 8004abe:	2b04      	cmp	r3, #4
 8004ac0:	d101      	bne.n	8004ac6 <LL_ADC_REG_IsConversionOngoing+0x18>
 8004ac2:	2301      	movs	r3, #1
 8004ac4:	e000      	b.n	8004ac8 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8004ac6:	2300      	movs	r3, #0
}
 8004ac8:	4618      	mov	r0, r3
 8004aca:	370c      	adds	r7, #12
 8004acc:	46bd      	mov	sp, r7
 8004ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ad2:	4770      	bx	lr

08004ad4 <LL_ADC_INJ_StartConversion>:
{
 8004ad4:	b480      	push	{r7}
 8004ad6:	b083      	sub	sp, #12
 8004ad8:	af00      	add	r7, sp, #0
 8004ada:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	689b      	ldr	r3, [r3, #8]
 8004ae0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004ae4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8004ae8:	f043 0208 	orr.w	r2, r3, #8
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	609a      	str	r2, [r3, #8]
}
 8004af0:	bf00      	nop
 8004af2:	370c      	adds	r7, #12
 8004af4:	46bd      	mov	sp, r7
 8004af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004afa:	4770      	bx	lr

08004afc <LL_ADC_INJ_IsConversionOngoing>:
{
 8004afc:	b480      	push	{r7}
 8004afe:	b083      	sub	sp, #12
 8004b00:	af00      	add	r7, sp, #0
 8004b02:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	689b      	ldr	r3, [r3, #8]
 8004b08:	f003 0308 	and.w	r3, r3, #8
 8004b0c:	2b08      	cmp	r3, #8
 8004b0e:	d101      	bne.n	8004b14 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8004b10:	2301      	movs	r3, #1
 8004b12:	e000      	b.n	8004b16 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8004b14:	2300      	movs	r3, #0
}
 8004b16:	4618      	mov	r0, r3
 8004b18:	370c      	adds	r7, #12
 8004b1a:	46bd      	mov	sp, r7
 8004b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b20:	4770      	bx	lr
	...

08004b24 <HAL_ADCEx_InjectedStart_IT>:
  *         For ADC master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedStart_IT(ADC_HandleTypeDef *hadc)
{
 8004b24:	b580      	push	{r7, lr}
 8004b26:	b086      	sub	sp, #24
 8004b28:	af00      	add	r7, sp, #0
 8004b2a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  uint32_t tmp_config_injected_queue;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004b2c:	486e      	ldr	r0, [pc, #440]	; (8004ce8 <HAL_ADCEx_InjectedStart_IT+0x1c4>)
 8004b2e:	f7ff ff9d 	bl	8004a6c <LL_ADC_GetMultimode>
 8004b32:	6178      	str	r0, [r7, #20]
#endif

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	4618      	mov	r0, r3
 8004b3a:	f7ff ffdf 	bl	8004afc <LL_ADC_INJ_IsConversionOngoing>
 8004b3e:	4603      	mov	r3, r0
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d001      	beq.n	8004b48 <HAL_ADCEx_InjectedStart_IT+0x24>
  {
    return HAL_BUSY;
 8004b44:	2302      	movs	r3, #2
 8004b46:	e0ca      	b.n	8004cde <HAL_ADCEx_InjectedStart_IT+0x1ba>
       If JQDIS is not set at that point, returns an error
       - since software trigger detection is disabled. User needs to
       resort to HAL_ADCEx_DisableInjectedQueue() API to set JQDIS.
       - or (if JQDIS is intentionally reset) since JEXTEN = 0 which means
         the queue is empty */
    tmp_config_injected_queue = READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JQDIS);
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	68db      	ldr	r3, [r3, #12]
 8004b4e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004b52:	613b      	str	r3, [r7, #16]

    if ((READ_BIT(hadc->Instance->JSQR, ADC_JSQR_JEXTEN) == 0UL)
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004b5a:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d10a      	bne.n	8004b78 <HAL_ADCEx_InjectedStart_IT+0x54>
        && (tmp_config_injected_queue == 0UL)
 8004b62:	693b      	ldr	r3, [r7, #16]
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d107      	bne.n	8004b78 <HAL_ADCEx_InjectedStart_IT+0x54>
       )
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b6c:	f043 0220 	orr.w	r2, r3, #32
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	65da      	str	r2, [r3, #92]	; 0x5c
      return HAL_ERROR;
 8004b74:	2301      	movs	r3, #1
 8004b76:	e0b2      	b.n	8004cde <HAL_ADCEx_InjectedStart_IT+0x1ba>
    }

    /* Process locked */
    __HAL_LOCK(hadc);
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8004b7e:	2b01      	cmp	r3, #1
 8004b80:	d101      	bne.n	8004b86 <HAL_ADCEx_InjectedStart_IT+0x62>
 8004b82:	2302      	movs	r3, #2
 8004b84:	e0ab      	b.n	8004cde <HAL_ADCEx_InjectedStart_IT+0x1ba>
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	2201      	movs	r2, #1
 8004b8a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8004b8e:	6878      	ldr	r0, [r7, #4]
 8004b90:	f7ff fde8 	bl	8004764 <ADC_Enable>
 8004b94:	4603      	mov	r3, r0
 8004b96:	73fb      	strb	r3, [r7, #15]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8004b98:	7bfb      	ldrb	r3, [r7, #15]
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	f040 809a 	bne.w	8004cd4 <HAL_ADCEx_InjectedStart_IT+0x1b0>
    {
      /* Check if a regular conversion is ongoing */
      if ((hadc->State & HAL_ADC_STATE_REG_BUSY) != 0UL)
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004ba4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d006      	beq.n	8004bba <HAL_ADCEx_InjectedStart_IT+0x96>
      {
        /* Reset ADC error code field related to injected conversions only */
        CLEAR_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004bb0:	f023 0208 	bic.w	r2, r3, #8
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	661a      	str	r2, [r3, #96]	; 0x60
 8004bb8:	e002      	b.n	8004bc0 <HAL_ADCEx_InjectedStart_IT+0x9c>
      }
      else
      {
        /* Set ADC error code to none */
        ADC_CLEAR_ERRORCODE(hadc);
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	2200      	movs	r2, #0
 8004bbe:	661a      	str	r2, [r3, #96]	; 0x60
      }

      /* Set ADC state                                                        */
      /* - Clear state bitfield related to injected group conversion results  */
      /* - Set state bitfield related to injected operation                   */
      ADC_STATE_CLR_SET(hadc->State,
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004bc4:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8004bc8:	f023 0301 	bic.w	r3, r3, #1
 8004bcc:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	65da      	str	r2, [r3, #92]	; 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	4a44      	ldr	r2, [pc, #272]	; (8004cec <HAL_ADCEx_InjectedStart_IT+0x1c8>)
 8004bda:	4293      	cmp	r3, r2
 8004bdc:	d002      	beq.n	8004be4 <HAL_ADCEx_InjectedStart_IT+0xc0>
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	e001      	b.n	8004be8 <HAL_ADCEx_InjectedStart_IT+0xc4>
 8004be4:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8004be8:	687a      	ldr	r2, [r7, #4]
 8004bea:	6812      	ldr	r2, [r2, #0]
 8004bec:	4293      	cmp	r3, r2
 8004bee:	d002      	beq.n	8004bf6 <HAL_ADCEx_InjectedStart_IT+0xd2>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8004bf0:	697b      	ldr	r3, [r7, #20]
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d105      	bne.n	8004c02 <HAL_ADCEx_InjectedStart_IT+0xde>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004bfa:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	65da      	str	r2, [r3, #92]	; 0x5c
      }
#endif

      /* Clear ADC group injected group conversion flag */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JEOC | ADC_FLAG_JEOS));
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	2260      	movs	r2, #96	; 0x60
 8004c08:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	2200      	movs	r2, #0
 8004c0e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

      /* Enable ADC Injected context queue overflow interrupt if this feature   */
      /* is enabled.                                                            */
      if ((hadc->Instance->CFGR & ADC_CFGR_JQM) != 0UL)
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	68db      	ldr	r3, [r3, #12]
 8004c18:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d007      	beq.n	8004c30 <HAL_ADCEx_InjectedStart_IT+0x10c>
      {
        __HAL_ADC_ENABLE_IT(hadc, ADC_FLAG_JQOVF);
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	685a      	ldr	r2, [r3, #4]
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004c2e:	605a      	str	r2, [r3, #4]
      }

      /* Enable ADC end of conversion interrupt */
      switch (hadc->Init.EOCSelection)
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	699b      	ldr	r3, [r3, #24]
 8004c34:	2b08      	cmp	r3, #8
 8004c36:	d110      	bne.n	8004c5a <HAL_ADCEx_InjectedStart_IT+0x136>
      {
        case ADC_EOC_SEQ_CONV:
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	685a      	ldr	r2, [r3, #4]
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	f022 0220 	bic.w	r2, r2, #32
 8004c46:	605a      	str	r2, [r3, #4]
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOS);
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	685a      	ldr	r2, [r3, #4]
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004c56:	605a      	str	r2, [r3, #4]
          break;
 8004c58:	e010      	b.n	8004c7c <HAL_ADCEx_InjectedStart_IT+0x158>
        /* case ADC_EOC_SINGLE_CONV */
        default:
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOS);
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	685a      	ldr	r2, [r3, #4]
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004c68:	605a      	str	r2, [r3, #4]
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	685a      	ldr	r2, [r3, #4]
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	f042 0220 	orr.w	r2, r2, #32
 8004c78:	605a      	str	r2, [r3, #4]
          break;
 8004c7a:	bf00      	nop
      /*    - if multimode only concerns regular conversion, ADC is enabled     */
      /*     and conversion is started.                                         */
      /* If ADC is master or independent,                                       */
      /*    - ADC is enabled and conversion is started.                         */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	4a1a      	ldr	r2, [pc, #104]	; (8004cec <HAL_ADCEx_InjectedStart_IT+0x1c8>)
 8004c82:	4293      	cmp	r3, r2
 8004c84:	d002      	beq.n	8004c8c <HAL_ADCEx_InjectedStart_IT+0x168>
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	e001      	b.n	8004c90 <HAL_ADCEx_InjectedStart_IT+0x16c>
 8004c8c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8004c90:	687a      	ldr	r2, [r7, #4]
 8004c92:	6812      	ldr	r2, [r2, #0]
 8004c94:	4293      	cmp	r3, r2
 8004c96:	d008      	beq.n	8004caa <HAL_ADCEx_InjectedStart_IT+0x186>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8004c98:	697b      	ldr	r3, [r7, #20]
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d005      	beq.n	8004caa <HAL_ADCEx_InjectedStart_IT+0x186>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 8004c9e:	697b      	ldr	r3, [r7, #20]
 8004ca0:	2b06      	cmp	r3, #6
 8004ca2:	d002      	beq.n	8004caa <HAL_ADCEx_InjectedStart_IT+0x186>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8004ca4:	697b      	ldr	r3, [r7, #20]
 8004ca6:	2b07      	cmp	r3, #7
 8004ca8:	d10d      	bne.n	8004cc6 <HAL_ADCEx_InjectedStart_IT+0x1a2>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode injected conversions enabled */
        if (LL_ADC_INJ_GetTrigAuto(hadc->Instance) == LL_ADC_INJ_TRIG_INDEPENDENT)
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	4618      	mov	r0, r3
 8004cb0:	f7ff fe7a 	bl	80049a8 <LL_ADC_INJ_GetTrigAuto>
 8004cb4:	4603      	mov	r3, r0
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d110      	bne.n	8004cdc <HAL_ADCEx_InjectedStart_IT+0x1b8>
        {
          LL_ADC_INJ_StartConversion(hadc->Instance);
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	4618      	mov	r0, r3
 8004cc0:	f7ff ff08 	bl	8004ad4 <LL_ADC_INJ_StartConversion>
        if (LL_ADC_INJ_GetTrigAuto(hadc->Instance) == LL_ADC_INJ_TRIG_INDEPENDENT)
 8004cc4:	e00a      	b.n	8004cdc <HAL_ADCEx_InjectedStart_IT+0x1b8>
        }
      }
      else
      {
        /* ADC instance is not a multimode slave instance with multimode injected conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004cca:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	65da      	str	r2, [r3, #92]	; 0x5c
 8004cd2:	e003      	b.n	8004cdc <HAL_ADCEx_InjectedStart_IT+0x1b8>

    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	2200      	movs	r2, #0
 8004cd8:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
    }

    /* Return function status */
    return tmp_hal_status;
 8004cdc:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8004cde:	4618      	mov	r0, r3
 8004ce0:	3718      	adds	r7, #24
 8004ce2:	46bd      	mov	sp, r7
 8004ce4:	bd80      	pop	{r7, pc}
 8004ce6:	bf00      	nop
 8004ce8:	50000300 	.word	0x50000300
 8004cec:	50000100 	.word	0x50000100

08004cf0 <HAL_ADCEx_InjectedGetValue>:
  *            @arg @ref ADC_INJECTED_RANK_3 ADC group injected rank 3
  *            @arg @ref ADC_INJECTED_RANK_4 ADC group injected rank 4
  * @retval ADC group injected conversion data
  */
uint32_t HAL_ADCEx_InjectedGetValue(ADC_HandleTypeDef *hadc, uint32_t InjectedRank)
{
 8004cf0:	b480      	push	{r7}
 8004cf2:	b085      	sub	sp, #20
 8004cf4:	af00      	add	r7, sp, #0
 8004cf6:	6078      	str	r0, [r7, #4]
 8004cf8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_INJECTED_RANK(InjectedRank));

  /* Get ADC converted value */
  switch (InjectedRank)
 8004cfa:	683b      	ldr	r3, [r7, #0]
 8004cfc:	f240 321b 	movw	r2, #795	; 0x31b
 8004d00:	4293      	cmp	r3, r2
 8004d02:	d00e      	beq.n	8004d22 <HAL_ADCEx_InjectedGetValue+0x32>
 8004d04:	683b      	ldr	r3, [r7, #0]
 8004d06:	f5b3 7f47 	cmp.w	r3, #796	; 0x31c
 8004d0a:	d21c      	bcs.n	8004d46 <HAL_ADCEx_InjectedGetValue+0x56>
 8004d0c:	683b      	ldr	r3, [r7, #0]
 8004d0e:	f240 120f 	movw	r2, #271	; 0x10f
 8004d12:	4293      	cmp	r3, r2
 8004d14:	d011      	beq.n	8004d3a <HAL_ADCEx_InjectedGetValue+0x4a>
 8004d16:	683b      	ldr	r3, [r7, #0]
 8004d18:	f240 2215 	movw	r2, #533	; 0x215
 8004d1c:	4293      	cmp	r3, r2
 8004d1e:	d006      	beq.n	8004d2e <HAL_ADCEx_InjectedGetValue+0x3e>
 8004d20:	e011      	b.n	8004d46 <HAL_ADCEx_InjectedGetValue+0x56>
  {
    case ADC_INJECTED_RANK_4:
      tmp_jdr = hadc->Instance->JDR4;
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004d2a:	60fb      	str	r3, [r7, #12]
      break;
 8004d2c:	e011      	b.n	8004d52 <HAL_ADCEx_InjectedGetValue+0x62>
    case ADC_INJECTED_RANK_3:
      tmp_jdr = hadc->Instance->JDR3;
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d36:	60fb      	str	r3, [r7, #12]
      break;
 8004d38:	e00b      	b.n	8004d52 <HAL_ADCEx_InjectedGetValue+0x62>
    case ADC_INJECTED_RANK_2:
      tmp_jdr = hadc->Instance->JDR2;
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004d42:	60fb      	str	r3, [r7, #12]
      break;
 8004d44:	e005      	b.n	8004d52 <HAL_ADCEx_InjectedGetValue+0x62>
    case ADC_INJECTED_RANK_1:
    default:
      tmp_jdr = hadc->Instance->JDR1;
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004d4e:	60fb      	str	r3, [r7, #12]
      break;
 8004d50:	bf00      	nop
  }

  /* Return ADC converted value */
  return tmp_jdr;
 8004d52:	68fb      	ldr	r3, [r7, #12]
}
 8004d54:	4618      	mov	r0, r3
 8004d56:	3714      	adds	r7, #20
 8004d58:	46bd      	mov	sp, r7
 8004d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d5e:	4770      	bx	lr

08004d60 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8004d60:	b480      	push	{r7}
 8004d62:	b083      	sub	sp, #12
 8004d64:	af00      	add	r7, sp, #0
 8004d66:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8004d68:	bf00      	nop
 8004d6a:	370c      	adds	r7, #12
 8004d6c:	46bd      	mov	sp, r7
 8004d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d72:	4770      	bx	lr

08004d74 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8004d74:	b480      	push	{r7}
 8004d76:	b083      	sub	sp, #12
 8004d78:	af00      	add	r7, sp, #0
 8004d7a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8004d7c:	bf00      	nop
 8004d7e:	370c      	adds	r7, #12
 8004d80:	46bd      	mov	sp, r7
 8004d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d86:	4770      	bx	lr

08004d88 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8004d88:	b480      	push	{r7}
 8004d8a:	b083      	sub	sp, #12
 8004d8c:	af00      	add	r7, sp, #0
 8004d8e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8004d90:	bf00      	nop
 8004d92:	370c      	adds	r7, #12
 8004d94:	46bd      	mov	sp, r7
 8004d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d9a:	4770      	bx	lr

08004d9c <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8004d9c:	b480      	push	{r7}
 8004d9e:	b083      	sub	sp, #12
 8004da0:	af00      	add	r7, sp, #0
 8004da2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8004da4:	bf00      	nop
 8004da6:	370c      	adds	r7, #12
 8004da8:	46bd      	mov	sp, r7
 8004daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dae:	4770      	bx	lr

08004db0 <HAL_ADCEx_InjectedConfigChannel>:
  * @param sConfigInjected Structure of ADC injected group and ADC channel for
  *         injected group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedConfigChannel(ADC_HandleTypeDef *hadc, ADC_InjectionConfTypeDef *sConfigInjected)
{
 8004db0:	b580      	push	{r7, lr}
 8004db2:	b0b6      	sub	sp, #216	; 0xd8
 8004db4:	af00      	add	r7, sp, #0
 8004db6:	6078      	str	r0, [r7, #4]
 8004db8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004dba:	2300      	movs	r3, #0
 8004dbc:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0;
 8004dc0:	2300      	movs	r3, #0
 8004dc2:	60bb      	str	r3, [r7, #8]

  uint32_t tmp_JSQR_ContextQueueBeingBuilt = 0U;
 8004dc4:	2300      	movs	r3, #0
 8004dc6:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfigInjected->InjectedChannel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8004dd0:	2b01      	cmp	r3, #1
 8004dd2:	d102      	bne.n	8004dda <HAL_ADCEx_InjectedConfigChannel+0x2a>
 8004dd4:	2302      	movs	r3, #2
 8004dd6:	f000 bcb5 	b.w	8005744 <HAL_ADCEx_InjectedConfigChannel+0x994>
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	2201      	movs	r2, #1
 8004dde:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /*      injected channel rank. It is entered into queue only when all       */
  /*      injected ranks have been set.                                       */
  /*   Note: Scan mode is not present by hardware on this device, but used    */
  /*   by software for alignment over all STM32 devices.                      */

  if ((hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)  ||
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	695b      	ldr	r3, [r3, #20]
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d003      	beq.n	8004df2 <HAL_ADCEx_InjectedConfigChannel+0x42>
      (sConfigInjected->InjectedNbrOfConversion == 1U))
 8004dea:	683b      	ldr	r3, [r7, #0]
 8004dec:	6a1b      	ldr	r3, [r3, #32]
  if ((hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)  ||
 8004dee:	2b01      	cmp	r3, #1
 8004df0:	d130      	bne.n	8004e54 <HAL_ADCEx_InjectedConfigChannel+0xa4>
    /*    (scan mode disabled, only rank 1 used)                              */
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - channel set to rank 1 (scan mode disabled, only rank 1 can be used) */

    if (sConfigInjected->InjectedRank == ADC_INJECTED_RANK_1)
 8004df2:	683b      	ldr	r3, [r7, #0]
 8004df4:	685b      	ldr	r3, [r3, #4]
 8004df6:	2b09      	cmp	r3, #9
 8004df8:	d179      	bne.n	8004eee <HAL_ADCEx_InjectedConfigChannel+0x13e>
      /* Enable external trigger if trigger selection is different of         */
      /* software start.                                                      */
      /* Note: This configuration keeps the hardware feature of parameter     */
      /*       ExternalTrigInjecConvEdge "trigger edge none" equivalent to    */
      /*       software start.                                                */
      if (sConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 8004dfa:	683b      	ldr	r3, [r7, #0]
 8004dfc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d010      	beq.n	8004e24 <HAL_ADCEx_InjectedConfigChannel+0x74>
      {
        tmp_JSQR_ContextQueueBeingBuilt = (ADC_JSQR_RK(sConfigInjected->InjectedChannel, ADC_INJECTED_RANK_1)
 8004e02:	683b      	ldr	r3, [r7, #0]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	0e9b      	lsrs	r3, r3, #26
 8004e08:	025b      	lsls	r3, r3, #9
 8004e0a:	f403 5278 	and.w	r2, r3, #15872	; 0x3e00
                                           | (sConfigInjected->ExternalTrigInjecConv & ADC_JSQR_JEXTSEL)
 8004e0e:	683b      	ldr	r3, [r7, #0]
 8004e10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e12:	f003 037c 	and.w	r3, r3, #124	; 0x7c
 8004e16:	431a      	orrs	r2, r3
                                           | sConfigInjected->ExternalTrigInjecConvEdge
 8004e18:	683b      	ldr	r3, [r7, #0]
 8004e1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        tmp_JSQR_ContextQueueBeingBuilt = (ADC_JSQR_RK(sConfigInjected->InjectedChannel, ADC_INJECTED_RANK_1)
 8004e1c:	4313      	orrs	r3, r2
 8004e1e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004e22:	e007      	b.n	8004e34 <HAL_ADCEx_InjectedConfigChannel+0x84>
                                          );
      }
      else
      {
        tmp_JSQR_ContextQueueBeingBuilt = (ADC_JSQR_RK(sConfigInjected->InjectedChannel, ADC_INJECTED_RANK_1));
 8004e24:	683b      	ldr	r3, [r7, #0]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	0e9b      	lsrs	r3, r3, #26
 8004e2a:	025b      	lsls	r3, r3, #9
 8004e2c:	f403 5378 	and.w	r3, r3, #15872	; 0x3e00
 8004e30:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
      }

      MODIFY_REG(hadc->Instance->JSQR, ADC_JSQR_FIELDS, tmp_JSQR_ContextQueueBeingBuilt);
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004e3a:	4b84      	ldr	r3, [pc, #528]	; (800504c <HAL_ADCEx_InjectedConfigChannel+0x29c>)
 8004e3c:	4013      	ands	r3, r2
 8004e3e:	687a      	ldr	r2, [r7, #4]
 8004e40:	6812      	ldr	r2, [r2, #0]
 8004e42:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 8004e46:	430b      	orrs	r3, r1
 8004e48:	64d3      	str	r3, [r2, #76]	; 0x4c
      /* For debug and informative reasons, hadc handle saves JSQR setting */
      hadc->InjectionConfig.ContextQueue = tmp_JSQR_ContextQueueBeingBuilt;
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8004e50:	665a      	str	r2, [r3, #100]	; 0x64
    if (sConfigInjected->InjectedRank == ADC_INJECTED_RANK_1)
 8004e52:	e04c      	b.n	8004eee <HAL_ADCEx_InjectedConfigChannel+0x13e>
    /* 1. Start new context and set parameters related to all injected        */
    /*    channels: injected sequence length and trigger.                     */

    /* if hadc->InjectionConfig.ChannelCount is equal to 0, this is the first */
    /*   call of the context under setting                                    */
    if (hadc->InjectionConfig.ChannelCount == 0U)
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d11d      	bne.n	8004e98 <HAL_ADCEx_InjectedConfigChannel+0xe8>
    {
      /* Initialize number of channels that will be configured on the context */
      /*  being built                                                         */
      hadc->InjectionConfig.ChannelCount = sConfigInjected->InjectedNbrOfConversion;
 8004e5c:	683b      	ldr	r3, [r7, #0]
 8004e5e:	6a1a      	ldr	r2, [r3, #32]
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	669a      	str	r2, [r3, #104]	; 0x68
      /* Handle hadc saves the context under build up over each HAL_ADCEx_InjectedConfigChannel()
         call, this context will be written in JSQR register at the last call.
         At this point, the context is merely reset  */
      hadc->InjectionConfig.ContextQueue = 0x00000000U;
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	2200      	movs	r2, #0
 8004e68:	665a      	str	r2, [r3, #100]	; 0x64
      /* Enable external trigger if trigger selection is different of         */
      /* software start.                                                      */
      /* Note: This configuration keeps the hardware feature of parameter     */
      /*       ExternalTrigInjecConvEdge "trigger edge none" equivalent to    */
      /*       software start.                                                */
      if (sConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 8004e6a:	683b      	ldr	r3, [r7, #0]
 8004e6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d00d      	beq.n	8004e8e <HAL_ADCEx_InjectedConfigChannel+0xde>
      {
        tmp_JSQR_ContextQueueBeingBuilt = ((sConfigInjected->InjectedNbrOfConversion - 1U)
 8004e72:	683b      	ldr	r3, [r7, #0]
 8004e74:	6a1b      	ldr	r3, [r3, #32]
 8004e76:	1e5a      	subs	r2, r3, #1
                                           | (sConfigInjected->ExternalTrigInjecConv & ADC_JSQR_JEXTSEL)
 8004e78:	683b      	ldr	r3, [r7, #0]
 8004e7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e7c:	f003 037c 	and.w	r3, r3, #124	; 0x7c
 8004e80:	431a      	orrs	r2, r3
                                           | sConfigInjected->ExternalTrigInjecConvEdge
 8004e82:	683b      	ldr	r3, [r7, #0]
 8004e84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        tmp_JSQR_ContextQueueBeingBuilt = ((sConfigInjected->InjectedNbrOfConversion - 1U)
 8004e86:	4313      	orrs	r3, r2
 8004e88:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004e8c:	e004      	b.n	8004e98 <HAL_ADCEx_InjectedConfigChannel+0xe8>
                                          );
      }
      else
      {
        tmp_JSQR_ContextQueueBeingBuilt = ((sConfigInjected->InjectedNbrOfConversion - 1U));
 8004e8e:	683b      	ldr	r3, [r7, #0]
 8004e90:	6a1b      	ldr	r3, [r3, #32]
 8004e92:	3b01      	subs	r3, #1
 8004e94:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    /*    related to each channel: channel rank sequence                    */
    /* Clear the old JSQx bits for the selected rank */
    tmp_JSQR_ContextQueueBeingBuilt &= ~ADC_JSQR_RK(ADC_SQR3_SQ10, sConfigInjected->InjectedRank);

    /* Set the JSQx bits for the selected rank */
    tmp_JSQR_ContextQueueBeingBuilt |= ADC_JSQR_RK(sConfigInjected->InjectedChannel, sConfigInjected->InjectedRank);
 8004e98:	683b      	ldr	r3, [r7, #0]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	0e9b      	lsrs	r3, r3, #26
 8004e9e:	f003 021f 	and.w	r2, r3, #31
 8004ea2:	683b      	ldr	r3, [r7, #0]
 8004ea4:	685b      	ldr	r3, [r3, #4]
 8004ea6:	f003 031f 	and.w	r3, r3, #31
 8004eaa:	fa02 f303 	lsl.w	r3, r2, r3
 8004eae:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8004eb2:	4313      	orrs	r3, r2
 8004eb4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0

    /* Decrease channel count  */
    hadc->InjectionConfig.ChannelCount--;
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004ebc:	1e5a      	subs	r2, r3, #1
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	669a      	str	r2, [r3, #104]	; 0x68

    /* 3. tmp_JSQR_ContextQueueBeingBuilt is fully built for this HAL_ADCEx_InjectedConfigChannel()
          call, aggregate the setting to those already built during the previous
          HAL_ADCEx_InjectedConfigChannel() calls (for the same context of course)  */
    hadc->InjectionConfig.ContextQueue |= tmp_JSQR_ContextQueueBeingBuilt;
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8004ec6:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8004eca:	431a      	orrs	r2, r3
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	665a      	str	r2, [r3, #100]	; 0x64

    /* 4. End of context setting: if this is the last channel set, then write context
        into register JSQR and make it enter into queue                   */
    if (hadc->InjectionConfig.ChannelCount == 0U)
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d10a      	bne.n	8004eee <HAL_ADCEx_InjectedConfigChannel+0x13e>
    {
      MODIFY_REG(hadc->Instance->JSQR, ADC_JSQR_FIELDS, hadc->InjectionConfig.ContextQueue);
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004ede:	4b5b      	ldr	r3, [pc, #364]	; (800504c <HAL_ADCEx_InjectedConfigChannel+0x29c>)
 8004ee0:	4013      	ands	r3, r2
 8004ee2:	687a      	ldr	r2, [r7, #4]
 8004ee4:	6e51      	ldr	r1, [r2, #100]	; 0x64
 8004ee6:	687a      	ldr	r2, [r7, #4]
 8004ee8:	6812      	ldr	r2, [r2, #0]
 8004eea:	430b      	orrs	r3, r1
 8004eec:	64d3      	str	r3, [r2, #76]	; 0x4c
  /* conversion on going on injected group:                                   */
  /*  - Injected context queue: Queue disable (active context is kept) or     */
  /*    enable (context decremented, up to 2 contexts queued)                 */
  /*  - Injected discontinuous mode: can be enabled only if auto-injected     */
  /*    mode is disabled.                                                     */
  if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	4618      	mov	r0, r3
 8004ef4:	f7ff fe02 	bl	8004afc <LL_ADC_INJ_IsConversionOngoing>
 8004ef8:	4603      	mov	r3, r0
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d124      	bne.n	8004f48 <HAL_ADCEx_InjectedConfigChannel+0x198>
  {
    /* If auto-injected mode is disabled: no constraint                       */
    if (sConfigInjected->AutoInjectedConv == DISABLE)
 8004efe:	683b      	ldr	r3, [r7, #0]
 8004f00:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d112      	bne.n	8004f2e <HAL_ADCEx_InjectedConfigChannel+0x17e>
    {
      MODIFY_REG(hadc->Instance->CFGR,
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	68db      	ldr	r3, [r3, #12]
 8004f0e:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8004f12:	683b      	ldr	r3, [r7, #0]
 8004f14:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8004f18:	055a      	lsls	r2, r3, #21
 8004f1a:	683b      	ldr	r3, [r7, #0]
 8004f1c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004f20:	051b      	lsls	r3, r3, #20
 8004f22:	431a      	orrs	r2, r3
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	430a      	orrs	r2, r1
 8004f2a:	60da      	str	r2, [r3, #12]
 8004f2c:	e00c      	b.n	8004f48 <HAL_ADCEx_InjectedConfigChannel+0x198>
    }
    /* If auto-injected mode is enabled: Injected discontinuous setting is    */
    /* discarded.                                                             */
    else
    {
      MODIFY_REG(hadc->Instance->CFGR,
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	68db      	ldr	r3, [r3, #12]
 8004f34:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8004f38:	683b      	ldr	r3, [r7, #0]
 8004f3a:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8004f3e:	055a      	lsls	r2, r3, #21
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	430a      	orrs	r2, r1
 8004f46:	60da      	str	r2, [r3, #12]
  /* conversion on going on regular and injected groups:                      */
  /*  - Automatic injected conversion: can be enabled if injected group       */
  /*    external triggers are disabled.                                       */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	4618      	mov	r0, r3
 8004f4e:	f7ff fdae 	bl	8004aae <LL_ADC_REG_IsConversionOngoing>
 8004f52:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	4618      	mov	r0, r3
 8004f5c:	f7ff fdce 	bl	8004afc <LL_ADC_INJ_IsConversionOngoing>
 8004f60:	f8c7 00c8 	str.w	r0, [r7, #200]	; 0xc8

  if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8004f64:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	f040 822e 	bne.w	80053ca <HAL_ADCEx_InjectedConfigChannel+0x61a>
      && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8004f6e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	f040 8229 	bne.w	80053ca <HAL_ADCEx_InjectedConfigChannel+0x61a>
     )
  {
    /* If injected group external triggers are disabled (set to injected      */
    /* software start): no constraint                                         */
    if ((sConfigInjected->ExternalTrigInjecConv == ADC_INJECTED_SOFTWARE_START)
 8004f78:	683b      	ldr	r3, [r7, #0]
 8004f7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d003      	beq.n	8004f88 <HAL_ADCEx_InjectedConfigChannel+0x1d8>
        || (sConfigInjected->ExternalTrigInjecConvEdge == ADC_EXTERNALTRIGINJECCONV_EDGE_NONE))
 8004f80:	683b      	ldr	r3, [r7, #0]
 8004f82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	d116      	bne.n	8004fb6 <HAL_ADCEx_InjectedConfigChannel+0x206>
    {
      if (sConfigInjected->AutoInjectedConv == ENABLE)
 8004f88:	683b      	ldr	r3, [r7, #0]
 8004f8a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8004f8e:	2b01      	cmp	r3, #1
 8004f90:	d108      	bne.n	8004fa4 <HAL_ADCEx_InjectedConfigChannel+0x1f4>
      {
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO);
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	68da      	ldr	r2, [r3, #12]
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 8004fa0:	60da      	str	r2, [r3, #12]
      if (sConfigInjected->AutoInjectedConv == ENABLE)
 8004fa2:	e01f      	b.n	8004fe4 <HAL_ADCEx_InjectedConfigChannel+0x234>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO);
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	68da      	ldr	r2, [r3, #12]
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	f022 7200 	bic.w	r2, r2, #33554432	; 0x2000000
 8004fb2:	60da      	str	r2, [r3, #12]
      if (sConfigInjected->AutoInjectedConv == ENABLE)
 8004fb4:	e016      	b.n	8004fe4 <HAL_ADCEx_InjectedConfigChannel+0x234>
    }
    /* If Automatic injected conversion was intended to be set and could not  */
    /* due to injected group external triggers enabled, error is reported.    */
    else
    {
      if (sConfigInjected->AutoInjectedConv == ENABLE)
 8004fb6:	683b      	ldr	r3, [r7, #0]
 8004fb8:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8004fbc:	2b01      	cmp	r3, #1
 8004fbe:	d109      	bne.n	8004fd4 <HAL_ADCEx_InjectedConfigChannel+0x224>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004fc4:	f043 0220 	orr.w	r2, r3, #32
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	65da      	str	r2, [r3, #92]	; 0x5c

        tmp_hal_status = HAL_ERROR;
 8004fcc:	2301      	movs	r3, #1
 8004fce:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 8004fd2:	e007      	b.n	8004fe4 <HAL_ADCEx_InjectedConfigChannel+0x234>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO);
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	68da      	ldr	r2, [r3, #12]
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	f022 7200 	bic.w	r2, r2, #33554432	; 0x2000000
 8004fe2:	60da      	str	r2, [r3, #12]
      }
    }

    if (sConfigInjected->InjecOversamplingMode == ENABLE)
 8004fe4:	683b      	ldr	r3, [r7, #0]
 8004fe6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004fea:	2b01      	cmp	r3, #1
 8004fec:	d110      	bne.n	8005010 <HAL_ADCEx_InjectedConfigChannel+0x260>
      /* Configuration of Injected Oversampler:                                 */
      /*  - Oversampling Ratio                                                  */
      /*  - Right bit shift                                                     */

      /* Enable OverSampling mode */
      MODIFY_REG(hadc->Instance->CFGR2,
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	691b      	ldr	r3, [r3, #16]
 8004ff4:	f423 72ff 	bic.w	r2, r3, #510	; 0x1fe
 8004ff8:	683b      	ldr	r3, [r7, #0]
 8004ffa:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8004ffc:	683b      	ldr	r3, [r7, #0]
 8004ffe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005000:	430b      	orrs	r3, r1
 8005002:	431a      	orrs	r2, r3
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	f042 0202 	orr.w	r2, r2, #2
 800500c:	611a      	str	r2, [r3, #16]
 800500e:	e007      	b.n	8005020 <HAL_ADCEx_InjectedConfigChannel+0x270>
                );
    }
    else
    {
      /* Disable Regular OverSampling */
      CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_JOVSE);
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	691a      	ldr	r2, [r3, #16]
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	f022 0202 	bic.w	r2, r2, #2
 800501e:	611a      	str	r2, [r3, #16]
    }

    /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
    if (sConfigInjected->InjectedSamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8005020:	683b      	ldr	r3, [r7, #0]
 8005022:	689b      	ldr	r3, [r3, #8]
 8005024:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005028:	d112      	bne.n	8005050 <HAL_ADCEx_InjectedConfigChannel+0x2a0>
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfigInjected->InjectedChannel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	6818      	ldr	r0, [r3, #0]
 800502e:	683b      	ldr	r3, [r7, #0]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	2200      	movs	r2, #0
 8005034:	4619      	mov	r1, r3
 8005036:	f7ff fcc5 	bl	80049c4 <LL_ADC_SetChannelSamplingTime>

      /* Set ADC sampling time common configuration */
      LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8005042:	4618      	mov	r0, r3
 8005044:	f7ff fc9d 	bl	8004982 <LL_ADC_SetSamplingTimeCommonConfig>
 8005048:	e011      	b.n	800506e <HAL_ADCEx_InjectedConfigChannel+0x2be>
 800504a:	bf00      	nop
 800504c:	04104000 	.word	0x04104000
    }
    else
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfigInjected->InjectedChannel, sConfigInjected->InjectedSamplingTime);
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	6818      	ldr	r0, [r3, #0]
 8005054:	683b      	ldr	r3, [r7, #0]
 8005056:	6819      	ldr	r1, [r3, #0]
 8005058:	683b      	ldr	r3, [r7, #0]
 800505a:	689b      	ldr	r3, [r3, #8]
 800505c:	461a      	mov	r2, r3
 800505e:	f7ff fcb1 	bl	80049c4 <LL_ADC_SetChannelSamplingTime>

      /* Set ADC sampling time common configuration */
      LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	2100      	movs	r1, #0
 8005068:	4618      	mov	r0, r3
 800506a:	f7ff fc8a 	bl	8004982 <LL_ADC_SetSamplingTimeCommonConfig>

    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset with respect to the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfigInjected->InjectedOffset);
 800506e:	683b      	ldr	r3, [r7, #0]
 8005070:	695a      	ldr	r2, [r3, #20]
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	68db      	ldr	r3, [r3, #12]
 8005078:	08db      	lsrs	r3, r3, #3
 800507a:	f003 0303 	and.w	r3, r3, #3
 800507e:	005b      	lsls	r3, r3, #1
 8005080:	fa02 f303 	lsl.w	r3, r2, r3
 8005084:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4

    if (sConfigInjected->InjectedOffsetNumber != ADC_OFFSET_NONE)
 8005088:	683b      	ldr	r3, [r7, #0]
 800508a:	691b      	ldr	r3, [r3, #16]
 800508c:	2b04      	cmp	r3, #4
 800508e:	d022      	beq.n	80050d6 <HAL_ADCEx_InjectedConfigChannel+0x326>
    {
      /* Set ADC selected offset number */
      LL_ADC_SetOffset(hadc->Instance, sConfigInjected->InjectedOffsetNumber, sConfigInjected->InjectedChannel,
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	6818      	ldr	r0, [r3, #0]
 8005094:	683b      	ldr	r3, [r7, #0]
 8005096:	6919      	ldr	r1, [r3, #16]
 8005098:	683b      	ldr	r3, [r7, #0]
 800509a:	681a      	ldr	r2, [r3, #0]
 800509c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80050a0:	f7ff fbe4 	bl	800486c <LL_ADC_SetOffset>
                       tmpOffsetShifted);

      /* Set ADC selected offset sign & saturation */
      LL_ADC_SetOffsetSign(hadc->Instance, sConfigInjected->InjectedOffsetNumber, sConfigInjected->InjectedOffsetSign);
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	6818      	ldr	r0, [r3, #0]
 80050a8:	683b      	ldr	r3, [r7, #0]
 80050aa:	6919      	ldr	r1, [r3, #16]
 80050ac:	683b      	ldr	r3, [r7, #0]
 80050ae:	699b      	ldr	r3, [r3, #24]
 80050b0:	461a      	mov	r2, r3
 80050b2:	f7ff fc30 	bl	8004916 <LL_ADC_SetOffsetSign>
      LL_ADC_SetOffsetSaturation(hadc->Instance, sConfigInjected->InjectedOffsetNumber,
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	6818      	ldr	r0, [r3, #0]
 80050ba:	683b      	ldr	r3, [r7, #0]
 80050bc:	6919      	ldr	r1, [r3, #16]
                                 (sConfigInjected->InjectedOffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 80050be:	683b      	ldr	r3, [r7, #0]
 80050c0:	7f1b      	ldrb	r3, [r3, #28]
      LL_ADC_SetOffsetSaturation(hadc->Instance, sConfigInjected->InjectedOffsetNumber,
 80050c2:	2b01      	cmp	r3, #1
 80050c4:	d102      	bne.n	80050cc <HAL_ADCEx_InjectedConfigChannel+0x31c>
 80050c6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80050ca:	e000      	b.n	80050ce <HAL_ADCEx_InjectedConfigChannel+0x31e>
 80050cc:	2300      	movs	r3, #0
 80050ce:	461a      	mov	r2, r3
 80050d0:	f7ff fc3c 	bl	800494c <LL_ADC_SetOffsetSaturation>
 80050d4:	e179      	b.n	80053ca <HAL_ADCEx_InjectedConfigChannel+0x61a>
    }
    else
    {
      /* Scan each offset register to check if the selected channel is targeted. */
      /* If this is the case, the corresponding offset number is disabled.       */
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	2100      	movs	r1, #0
 80050dc:	4618      	mov	r0, r3
 80050de:	f7ff fbe9 	bl	80048b4 <LL_ADC_GetOffsetChannel>
 80050e2:	4603      	mov	r3, r0
 80050e4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d10a      	bne.n	8005102 <HAL_ADCEx_InjectedConfigChannel+0x352>
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	2100      	movs	r1, #0
 80050f2:	4618      	mov	r0, r3
 80050f4:	f7ff fbde 	bl	80048b4 <LL_ADC_GetOffsetChannel>
 80050f8:	4603      	mov	r3, r0
 80050fa:	0e9b      	lsrs	r3, r3, #26
 80050fc:	f003 021f 	and.w	r2, r3, #31
 8005100:	e01e      	b.n	8005140 <HAL_ADCEx_InjectedConfigChannel+0x390>
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	2100      	movs	r1, #0
 8005108:	4618      	mov	r0, r3
 800510a:	f7ff fbd3 	bl	80048b4 <LL_ADC_GetOffsetChannel>
 800510e:	4603      	mov	r3, r0
 8005110:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005114:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005118:	fa93 f3a3 	rbit	r3, r3
 800511c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  return result;
 8005120:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8005124:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  if (value == 0U)
 8005128:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800512c:	2b00      	cmp	r3, #0
 800512e:	d101      	bne.n	8005134 <HAL_ADCEx_InjectedConfigChannel+0x384>
    return 32U;
 8005130:	2320      	movs	r3, #32
 8005132:	e004      	b.n	800513e <HAL_ADCEx_InjectedConfigChannel+0x38e>
  return __builtin_clz(value);
 8005134:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8005138:	fab3 f383 	clz	r3, r3
 800513c:	b2db      	uxtb	r3, r3
 800513e:	461a      	mov	r2, r3
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfigInjected->InjectedChannel))
 8005140:	683b      	ldr	r3, [r7, #0]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005148:	2b00      	cmp	r3, #0
 800514a:	d105      	bne.n	8005158 <HAL_ADCEx_InjectedConfigChannel+0x3a8>
 800514c:	683b      	ldr	r3, [r7, #0]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	0e9b      	lsrs	r3, r3, #26
 8005152:	f003 031f 	and.w	r3, r3, #31
 8005156:	e018      	b.n	800518a <HAL_ADCEx_InjectedConfigChannel+0x3da>
 8005158:	683b      	ldr	r3, [r7, #0]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005160:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005164:	fa93 f3a3 	rbit	r3, r3
 8005168:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  return result;
 800516c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8005170:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  if (value == 0U)
 8005174:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8005178:	2b00      	cmp	r3, #0
 800517a:	d101      	bne.n	8005180 <HAL_ADCEx_InjectedConfigChannel+0x3d0>
    return 32U;
 800517c:	2320      	movs	r3, #32
 800517e:	e004      	b.n	800518a <HAL_ADCEx_InjectedConfigChannel+0x3da>
  return __builtin_clz(value);
 8005180:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8005184:	fab3 f383 	clz	r3, r3
 8005188:	b2db      	uxtb	r3, r3
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800518a:	429a      	cmp	r2, r3
 800518c:	d106      	bne.n	800519c <HAL_ADCEx_InjectedConfigChannel+0x3ec>
      {
        LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	2200      	movs	r2, #0
 8005194:	2100      	movs	r1, #0
 8005196:	4618      	mov	r0, r3
 8005198:	f7ff fba2 	bl	80048e0 <LL_ADC_SetOffsetState>
      }
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	2101      	movs	r1, #1
 80051a2:	4618      	mov	r0, r3
 80051a4:	f7ff fb86 	bl	80048b4 <LL_ADC_GetOffsetChannel>
 80051a8:	4603      	mov	r3, r0
 80051aa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d10a      	bne.n	80051c8 <HAL_ADCEx_InjectedConfigChannel+0x418>
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	2101      	movs	r1, #1
 80051b8:	4618      	mov	r0, r3
 80051ba:	f7ff fb7b 	bl	80048b4 <LL_ADC_GetOffsetChannel>
 80051be:	4603      	mov	r3, r0
 80051c0:	0e9b      	lsrs	r3, r3, #26
 80051c2:	f003 021f 	and.w	r2, r3, #31
 80051c6:	e01e      	b.n	8005206 <HAL_ADCEx_InjectedConfigChannel+0x456>
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	2101      	movs	r1, #1
 80051ce:	4618      	mov	r0, r3
 80051d0:	f7ff fb70 	bl	80048b4 <LL_ADC_GetOffsetChannel>
 80051d4:	4603      	mov	r3, r0
 80051d6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80051da:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80051de:	fa93 f3a3 	rbit	r3, r3
 80051e2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  return result;
 80051e6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80051ea:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (value == 0U)
 80051ee:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d101      	bne.n	80051fa <HAL_ADCEx_InjectedConfigChannel+0x44a>
    return 32U;
 80051f6:	2320      	movs	r3, #32
 80051f8:	e004      	b.n	8005204 <HAL_ADCEx_InjectedConfigChannel+0x454>
  return __builtin_clz(value);
 80051fa:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80051fe:	fab3 f383 	clz	r3, r3
 8005202:	b2db      	uxtb	r3, r3
 8005204:	461a      	mov	r2, r3
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfigInjected->InjectedChannel))
 8005206:	683b      	ldr	r3, [r7, #0]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800520e:	2b00      	cmp	r3, #0
 8005210:	d105      	bne.n	800521e <HAL_ADCEx_InjectedConfigChannel+0x46e>
 8005212:	683b      	ldr	r3, [r7, #0]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	0e9b      	lsrs	r3, r3, #26
 8005218:	f003 031f 	and.w	r3, r3, #31
 800521c:	e018      	b.n	8005250 <HAL_ADCEx_InjectedConfigChannel+0x4a0>
 800521e:	683b      	ldr	r3, [r7, #0]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005226:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800522a:	fa93 f3a3 	rbit	r3, r3
 800522e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  return result;
 8005232:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005236:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  if (value == 0U)
 800523a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800523e:	2b00      	cmp	r3, #0
 8005240:	d101      	bne.n	8005246 <HAL_ADCEx_InjectedConfigChannel+0x496>
    return 32U;
 8005242:	2320      	movs	r3, #32
 8005244:	e004      	b.n	8005250 <HAL_ADCEx_InjectedConfigChannel+0x4a0>
  return __builtin_clz(value);
 8005246:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800524a:	fab3 f383 	clz	r3, r3
 800524e:	b2db      	uxtb	r3, r3
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8005250:	429a      	cmp	r2, r3
 8005252:	d106      	bne.n	8005262 <HAL_ADCEx_InjectedConfigChannel+0x4b2>
      {
        LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	2200      	movs	r2, #0
 800525a:	2101      	movs	r1, #1
 800525c:	4618      	mov	r0, r3
 800525e:	f7ff fb3f 	bl	80048e0 <LL_ADC_SetOffsetState>
      }
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	2102      	movs	r1, #2
 8005268:	4618      	mov	r0, r3
 800526a:	f7ff fb23 	bl	80048b4 <LL_ADC_GetOffsetChannel>
 800526e:	4603      	mov	r3, r0
 8005270:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005274:	2b00      	cmp	r3, #0
 8005276:	d10a      	bne.n	800528e <HAL_ADCEx_InjectedConfigChannel+0x4de>
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	2102      	movs	r1, #2
 800527e:	4618      	mov	r0, r3
 8005280:	f7ff fb18 	bl	80048b4 <LL_ADC_GetOffsetChannel>
 8005284:	4603      	mov	r3, r0
 8005286:	0e9b      	lsrs	r3, r3, #26
 8005288:	f003 021f 	and.w	r2, r3, #31
 800528c:	e01e      	b.n	80052cc <HAL_ADCEx_InjectedConfigChannel+0x51c>
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	2102      	movs	r1, #2
 8005294:	4618      	mov	r0, r3
 8005296:	f7ff fb0d 	bl	80048b4 <LL_ADC_GetOffsetChannel>
 800529a:	4603      	mov	r3, r0
 800529c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80052a0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80052a4:	fa93 f3a3 	rbit	r3, r3
 80052a8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  return result;
 80052ac:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80052b0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (value == 0U)
 80052b4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d101      	bne.n	80052c0 <HAL_ADCEx_InjectedConfigChannel+0x510>
    return 32U;
 80052bc:	2320      	movs	r3, #32
 80052be:	e004      	b.n	80052ca <HAL_ADCEx_InjectedConfigChannel+0x51a>
  return __builtin_clz(value);
 80052c0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80052c4:	fab3 f383 	clz	r3, r3
 80052c8:	b2db      	uxtb	r3, r3
 80052ca:	461a      	mov	r2, r3
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfigInjected->InjectedChannel))
 80052cc:	683b      	ldr	r3, [r7, #0]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d105      	bne.n	80052e4 <HAL_ADCEx_InjectedConfigChannel+0x534>
 80052d8:	683b      	ldr	r3, [r7, #0]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	0e9b      	lsrs	r3, r3, #26
 80052de:	f003 031f 	and.w	r3, r3, #31
 80052e2:	e014      	b.n	800530e <HAL_ADCEx_InjectedConfigChannel+0x55e>
 80052e4:	683b      	ldr	r3, [r7, #0]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80052ea:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80052ec:	fa93 f3a3 	rbit	r3, r3
 80052f0:	67bb      	str	r3, [r7, #120]	; 0x78
  return result;
 80052f2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80052f4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  if (value == 0U)
 80052f8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	d101      	bne.n	8005304 <HAL_ADCEx_InjectedConfigChannel+0x554>
    return 32U;
 8005300:	2320      	movs	r3, #32
 8005302:	e004      	b.n	800530e <HAL_ADCEx_InjectedConfigChannel+0x55e>
  return __builtin_clz(value);
 8005304:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005308:	fab3 f383 	clz	r3, r3
 800530c:	b2db      	uxtb	r3, r3
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800530e:	429a      	cmp	r2, r3
 8005310:	d106      	bne.n	8005320 <HAL_ADCEx_InjectedConfigChannel+0x570>
      {
        LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	2200      	movs	r2, #0
 8005318:	2102      	movs	r1, #2
 800531a:	4618      	mov	r0, r3
 800531c:	f7ff fae0 	bl	80048e0 <LL_ADC_SetOffsetState>
      }
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	2103      	movs	r1, #3
 8005326:	4618      	mov	r0, r3
 8005328:	f7ff fac4 	bl	80048b4 <LL_ADC_GetOffsetChannel>
 800532c:	4603      	mov	r3, r0
 800532e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005332:	2b00      	cmp	r3, #0
 8005334:	d10a      	bne.n	800534c <HAL_ADCEx_InjectedConfigChannel+0x59c>
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	2103      	movs	r1, #3
 800533c:	4618      	mov	r0, r3
 800533e:	f7ff fab9 	bl	80048b4 <LL_ADC_GetOffsetChannel>
 8005342:	4603      	mov	r3, r0
 8005344:	0e9b      	lsrs	r3, r3, #26
 8005346:	f003 021f 	and.w	r2, r3, #31
 800534a:	e017      	b.n	800537c <HAL_ADCEx_InjectedConfigChannel+0x5cc>
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	2103      	movs	r1, #3
 8005352:	4618      	mov	r0, r3
 8005354:	f7ff faae 	bl	80048b4 <LL_ADC_GetOffsetChannel>
 8005358:	4603      	mov	r3, r0
 800535a:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800535c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800535e:	fa93 f3a3 	rbit	r3, r3
 8005362:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8005364:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005366:	677b      	str	r3, [r7, #116]	; 0x74
  if (value == 0U)
 8005368:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800536a:	2b00      	cmp	r3, #0
 800536c:	d101      	bne.n	8005372 <HAL_ADCEx_InjectedConfigChannel+0x5c2>
    return 32U;
 800536e:	2320      	movs	r3, #32
 8005370:	e003      	b.n	800537a <HAL_ADCEx_InjectedConfigChannel+0x5ca>
  return __builtin_clz(value);
 8005372:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005374:	fab3 f383 	clz	r3, r3
 8005378:	b2db      	uxtb	r3, r3
 800537a:	461a      	mov	r2, r3
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfigInjected->InjectedChannel))
 800537c:	683b      	ldr	r3, [r7, #0]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005384:	2b00      	cmp	r3, #0
 8005386:	d105      	bne.n	8005394 <HAL_ADCEx_InjectedConfigChannel+0x5e4>
 8005388:	683b      	ldr	r3, [r7, #0]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	0e9b      	lsrs	r3, r3, #26
 800538e:	f003 031f 	and.w	r3, r3, #31
 8005392:	e011      	b.n	80053b8 <HAL_ADCEx_InjectedConfigChannel+0x608>
 8005394:	683b      	ldr	r3, [r7, #0]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800539a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800539c:	fa93 f3a3 	rbit	r3, r3
 80053a0:	663b      	str	r3, [r7, #96]	; 0x60
  return result;
 80053a2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80053a4:	66bb      	str	r3, [r7, #104]	; 0x68
  if (value == 0U)
 80053a6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d101      	bne.n	80053b0 <HAL_ADCEx_InjectedConfigChannel+0x600>
    return 32U;
 80053ac:	2320      	movs	r3, #32
 80053ae:	e003      	b.n	80053b8 <HAL_ADCEx_InjectedConfigChannel+0x608>
  return __builtin_clz(value);
 80053b0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80053b2:	fab3 f383 	clz	r3, r3
 80053b6:	b2db      	uxtb	r3, r3
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80053b8:	429a      	cmp	r2, r3
 80053ba:	d106      	bne.n	80053ca <HAL_ADCEx_InjectedConfigChannel+0x61a>
      {
        LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	2200      	movs	r2, #0
 80053c2:	2103      	movs	r1, #3
 80053c4:	4618      	mov	r0, r3
 80053c6:	f7ff fa8b 	bl	80048e0 <LL_ADC_SetOffsetState>
  }

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	4618      	mov	r0, r3
 80053d0:	f7ff fb5a 	bl	8004a88 <LL_ADC_IsEnabled>
 80053d4:	4603      	mov	r3, r0
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	f040 8140 	bne.w	800565c <HAL_ADCEx_InjectedConfigChannel+0x8ac>
  {
    /* Set mode single-ended or differential input of the selected ADC channel */
    LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfigInjected->InjectedChannel, sConfigInjected->InjectedSingleDiff);
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	6818      	ldr	r0, [r3, #0]
 80053e0:	683b      	ldr	r3, [r7, #0]
 80053e2:	6819      	ldr	r1, [r3, #0]
 80053e4:	683b      	ldr	r3, [r7, #0]
 80053e6:	68db      	ldr	r3, [r3, #12]
 80053e8:	461a      	mov	r2, r3
 80053ea:	f7ff fb17 	bl	8004a1c <LL_ADC_SetChannelSingleDiff>

    /* Configuration of differential mode */
    /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
    if (sConfigInjected->InjectedSingleDiff == ADC_DIFFERENTIAL_ENDED)
 80053ee:	683b      	ldr	r3, [r7, #0]
 80053f0:	68db      	ldr	r3, [r3, #12]
 80053f2:	4a8f      	ldr	r2, [pc, #572]	; (8005630 <HAL_ADCEx_InjectedConfigChannel+0x880>)
 80053f4:	4293      	cmp	r3, r2
 80053f6:	f040 8131 	bne.w	800565c <HAL_ADCEx_InjectedConfigChannel+0x8ac>
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	6818      	ldr	r0, [r3, #0]
                                    (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfigInjected->InjectedChannel)
 80053fe:	683b      	ldr	r3, [r7, #0]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005406:	2b00      	cmp	r3, #0
 8005408:	d10b      	bne.n	8005422 <HAL_ADCEx_InjectedConfigChannel+0x672>
 800540a:	683b      	ldr	r3, [r7, #0]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	0e9b      	lsrs	r3, r3, #26
 8005410:	3301      	adds	r3, #1
 8005412:	f003 031f 	and.w	r3, r3, #31
 8005416:	2b09      	cmp	r3, #9
 8005418:	bf94      	ite	ls
 800541a:	2301      	movls	r3, #1
 800541c:	2300      	movhi	r3, #0
 800541e:	b2db      	uxtb	r3, r3
 8005420:	e019      	b.n	8005456 <HAL_ADCEx_InjectedConfigChannel+0x6a6>
 8005422:	683b      	ldr	r3, [r7, #0]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005428:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800542a:	fa93 f3a3 	rbit	r3, r3
 800542e:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8005430:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005432:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 8005434:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005436:	2b00      	cmp	r3, #0
 8005438:	d101      	bne.n	800543e <HAL_ADCEx_InjectedConfigChannel+0x68e>
    return 32U;
 800543a:	2320      	movs	r3, #32
 800543c:	e003      	b.n	8005446 <HAL_ADCEx_InjectedConfigChannel+0x696>
  return __builtin_clz(value);
 800543e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005440:	fab3 f383 	clz	r3, r3
 8005444:	b2db      	uxtb	r3, r3
 8005446:	3301      	adds	r3, #1
 8005448:	f003 031f 	and.w	r3, r3, #31
 800544c:	2b09      	cmp	r3, #9
 800544e:	bf94      	ite	ls
 8005450:	2301      	movls	r3, #1
 8005452:	2300      	movhi	r3, #0
 8005454:	b2db      	uxtb	r3, r3
      LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005456:	2b00      	cmp	r3, #0
 8005458:	d079      	beq.n	800554e <HAL_ADCEx_InjectedConfigChannel+0x79e>
                                    (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfigInjected->InjectedChannel)
 800545a:	683b      	ldr	r3, [r7, #0]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005462:	2b00      	cmp	r3, #0
 8005464:	d107      	bne.n	8005476 <HAL_ADCEx_InjectedConfigChannel+0x6c6>
 8005466:	683b      	ldr	r3, [r7, #0]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	0e9b      	lsrs	r3, r3, #26
 800546c:	3301      	adds	r3, #1
 800546e:	069b      	lsls	r3, r3, #26
 8005470:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8005474:	e015      	b.n	80054a2 <HAL_ADCEx_InjectedConfigChannel+0x6f2>
 8005476:	683b      	ldr	r3, [r7, #0]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800547c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800547e:	fa93 f3a3 	rbit	r3, r3
 8005482:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 8005484:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005486:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 8005488:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800548a:	2b00      	cmp	r3, #0
 800548c:	d101      	bne.n	8005492 <HAL_ADCEx_InjectedConfigChannel+0x6e2>
    return 32U;
 800548e:	2320      	movs	r3, #32
 8005490:	e003      	b.n	800549a <HAL_ADCEx_InjectedConfigChannel+0x6ea>
  return __builtin_clz(value);
 8005492:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005494:	fab3 f383 	clz	r3, r3
 8005498:	b2db      	uxtb	r3, r3
 800549a:	3301      	adds	r3, #1
 800549c:	069b      	lsls	r3, r3, #26
 800549e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80054a2:	683b      	ldr	r3, [r7, #0]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d109      	bne.n	80054c2 <HAL_ADCEx_InjectedConfigChannel+0x712>
 80054ae:	683b      	ldr	r3, [r7, #0]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	0e9b      	lsrs	r3, r3, #26
 80054b4:	3301      	adds	r3, #1
 80054b6:	f003 031f 	and.w	r3, r3, #31
 80054ba:	2101      	movs	r1, #1
 80054bc:	fa01 f303 	lsl.w	r3, r1, r3
 80054c0:	e017      	b.n	80054f2 <HAL_ADCEx_InjectedConfigChannel+0x742>
 80054c2:	683b      	ldr	r3, [r7, #0]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80054c8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80054ca:	fa93 f3a3 	rbit	r3, r3
 80054ce:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 80054d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80054d2:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 80054d4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d101      	bne.n	80054de <HAL_ADCEx_InjectedConfigChannel+0x72e>
    return 32U;
 80054da:	2320      	movs	r3, #32
 80054dc:	e003      	b.n	80054e6 <HAL_ADCEx_InjectedConfigChannel+0x736>
  return __builtin_clz(value);
 80054de:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80054e0:	fab3 f383 	clz	r3, r3
 80054e4:	b2db      	uxtb	r3, r3
 80054e6:	3301      	adds	r3, #1
 80054e8:	f003 031f 	and.w	r3, r3, #31
 80054ec:	2101      	movs	r1, #1
 80054ee:	fa01 f303 	lsl.w	r3, r1, r3
 80054f2:	ea42 0103 	orr.w	r1, r2, r3
 80054f6:	683b      	ldr	r3, [r7, #0]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d10a      	bne.n	8005518 <HAL_ADCEx_InjectedConfigChannel+0x768>
 8005502:	683b      	ldr	r3, [r7, #0]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	0e9b      	lsrs	r3, r3, #26
 8005508:	3301      	adds	r3, #1
 800550a:	f003 021f 	and.w	r2, r3, #31
 800550e:	4613      	mov	r3, r2
 8005510:	005b      	lsls	r3, r3, #1
 8005512:	4413      	add	r3, r2
 8005514:	051b      	lsls	r3, r3, #20
 8005516:	e018      	b.n	800554a <HAL_ADCEx_InjectedConfigChannel+0x79a>
 8005518:	683b      	ldr	r3, [r7, #0]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800551e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005520:	fa93 f3a3 	rbit	r3, r3
 8005524:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 8005526:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005528:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 800552a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800552c:	2b00      	cmp	r3, #0
 800552e:	d101      	bne.n	8005534 <HAL_ADCEx_InjectedConfigChannel+0x784>
    return 32U;
 8005530:	2320      	movs	r3, #32
 8005532:	e003      	b.n	800553c <HAL_ADCEx_InjectedConfigChannel+0x78c>
  return __builtin_clz(value);
 8005534:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005536:	fab3 f383 	clz	r3, r3
 800553a:	b2db      	uxtb	r3, r3
 800553c:	3301      	adds	r3, #1
 800553e:	f003 021f 	and.w	r2, r3, #31
 8005542:	4613      	mov	r3, r2
 8005544:	005b      	lsls	r3, r3, #1
 8005546:	4413      	add	r3, r2
 8005548:	051b      	lsls	r3, r3, #20
      LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800554a:	430b      	orrs	r3, r1
 800554c:	e081      	b.n	8005652 <HAL_ADCEx_InjectedConfigChannel+0x8a2>
                                    (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfigInjected->InjectedChannel)
 800554e:	683b      	ldr	r3, [r7, #0]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005556:	2b00      	cmp	r3, #0
 8005558:	d107      	bne.n	800556a <HAL_ADCEx_InjectedConfigChannel+0x7ba>
 800555a:	683b      	ldr	r3, [r7, #0]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	0e9b      	lsrs	r3, r3, #26
 8005560:	3301      	adds	r3, #1
 8005562:	069b      	lsls	r3, r3, #26
 8005564:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8005568:	e015      	b.n	8005596 <HAL_ADCEx_InjectedConfigChannel+0x7e6>
 800556a:	683b      	ldr	r3, [r7, #0]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005570:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005572:	fa93 f3a3 	rbit	r3, r3
 8005576:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8005578:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800557a:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 800557c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800557e:	2b00      	cmp	r3, #0
 8005580:	d101      	bne.n	8005586 <HAL_ADCEx_InjectedConfigChannel+0x7d6>
    return 32U;
 8005582:	2320      	movs	r3, #32
 8005584:	e003      	b.n	800558e <HAL_ADCEx_InjectedConfigChannel+0x7de>
  return __builtin_clz(value);
 8005586:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005588:	fab3 f383 	clz	r3, r3
 800558c:	b2db      	uxtb	r3, r3
 800558e:	3301      	adds	r3, #1
 8005590:	069b      	lsls	r3, r3, #26
 8005592:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8005596:	683b      	ldr	r3, [r7, #0]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d109      	bne.n	80055b6 <HAL_ADCEx_InjectedConfigChannel+0x806>
 80055a2:	683b      	ldr	r3, [r7, #0]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	0e9b      	lsrs	r3, r3, #26
 80055a8:	3301      	adds	r3, #1
 80055aa:	f003 031f 	and.w	r3, r3, #31
 80055ae:	2101      	movs	r1, #1
 80055b0:	fa01 f303 	lsl.w	r3, r1, r3
 80055b4:	e017      	b.n	80055e6 <HAL_ADCEx_InjectedConfigChannel+0x836>
 80055b6:	683b      	ldr	r3, [r7, #0]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80055bc:	69fb      	ldr	r3, [r7, #28]
 80055be:	fa93 f3a3 	rbit	r3, r3
 80055c2:	61bb      	str	r3, [r7, #24]
  return result;
 80055c4:	69bb      	ldr	r3, [r7, #24]
 80055c6:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 80055c8:	6a3b      	ldr	r3, [r7, #32]
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d101      	bne.n	80055d2 <HAL_ADCEx_InjectedConfigChannel+0x822>
    return 32U;
 80055ce:	2320      	movs	r3, #32
 80055d0:	e003      	b.n	80055da <HAL_ADCEx_InjectedConfigChannel+0x82a>
  return __builtin_clz(value);
 80055d2:	6a3b      	ldr	r3, [r7, #32]
 80055d4:	fab3 f383 	clz	r3, r3
 80055d8:	b2db      	uxtb	r3, r3
 80055da:	3301      	adds	r3, #1
 80055dc:	f003 031f 	and.w	r3, r3, #31
 80055e0:	2101      	movs	r1, #1
 80055e2:	fa01 f303 	lsl.w	r3, r1, r3
 80055e6:	ea42 0103 	orr.w	r1, r2, r3
 80055ea:	683b      	ldr	r3, [r7, #0]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d10d      	bne.n	8005612 <HAL_ADCEx_InjectedConfigChannel+0x862>
 80055f6:	683b      	ldr	r3, [r7, #0]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	0e9b      	lsrs	r3, r3, #26
 80055fc:	3301      	adds	r3, #1
 80055fe:	f003 021f 	and.w	r2, r3, #31
 8005602:	4613      	mov	r3, r2
 8005604:	005b      	lsls	r3, r3, #1
 8005606:	4413      	add	r3, r2
 8005608:	3b1e      	subs	r3, #30
 800560a:	051b      	lsls	r3, r3, #20
 800560c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8005610:	e01e      	b.n	8005650 <HAL_ADCEx_InjectedConfigChannel+0x8a0>
 8005612:	683b      	ldr	r3, [r7, #0]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005618:	693b      	ldr	r3, [r7, #16]
 800561a:	fa93 f3a3 	rbit	r3, r3
 800561e:	60fb      	str	r3, [r7, #12]
  return result;
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8005624:	697b      	ldr	r3, [r7, #20]
 8005626:	2b00      	cmp	r3, #0
 8005628:	d104      	bne.n	8005634 <HAL_ADCEx_InjectedConfigChannel+0x884>
    return 32U;
 800562a:	2320      	movs	r3, #32
 800562c:	e006      	b.n	800563c <HAL_ADCEx_InjectedConfigChannel+0x88c>
 800562e:	bf00      	nop
 8005630:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8005634:	697b      	ldr	r3, [r7, #20]
 8005636:	fab3 f383 	clz	r3, r3
 800563a:	b2db      	uxtb	r3, r3
 800563c:	3301      	adds	r3, #1
 800563e:	f003 021f 	and.w	r2, r3, #31
 8005642:	4613      	mov	r3, r2
 8005644:	005b      	lsls	r3, r3, #1
 8005646:	4413      	add	r3, r2
 8005648:	3b1e      	subs	r3, #30
 800564a:	051b      	lsls	r3, r3, #20
 800564c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
      LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005650:	430b      	orrs	r3, r1
 8005652:	683a      	ldr	r2, [r7, #0]
 8005654:	6892      	ldr	r2, [r2, #8]
 8005656:	4619      	mov	r1, r3
 8005658:	f7ff f9b4 	bl	80049c4 <LL_ADC_SetChannelSamplingTime>
  /* internal measurement paths enable: If internal channel selected,       */
  /* enable dedicated internal buffers and path.                            */
  /* Note: these internal measurement paths can be disabled using           */
  /* HAL_ADC_DeInit().                                                      */

  if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfigInjected->InjectedChannel))
 800565c:	683b      	ldr	r3, [r7, #0]
 800565e:	681a      	ldr	r2, [r3, #0]
 8005660:	4b3a      	ldr	r3, [pc, #232]	; (800574c <HAL_ADCEx_InjectedConfigChannel+0x99c>)
 8005662:	4013      	ands	r3, r2
 8005664:	2b00      	cmp	r3, #0
 8005666:	d067      	beq.n	8005738 <HAL_ADCEx_InjectedConfigChannel+0x988>
  {
    tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8005668:	4839      	ldr	r0, [pc, #228]	; (8005750 <HAL_ADCEx_InjectedConfigChannel+0x9a0>)
 800566a:	f7ff f8f0 	bl	800484e <LL_ADC_GetCommonPathInternalCh>
 800566e:	f8c7 00c0 	str.w	r0, [r7, #192]	; 0xc0

    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR_ADC1)
 8005672:	683b      	ldr	r3, [r7, #0]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	4a37      	ldr	r2, [pc, #220]	; (8005754 <HAL_ADCEx_InjectedConfigChannel+0x9a4>)
 8005678:	4293      	cmp	r3, r2
 800567a:	d004      	beq.n	8005686 <HAL_ADCEx_InjectedConfigChannel+0x8d6>
         || (sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 800567c:	683b      	ldr	r3, [r7, #0]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	4a35      	ldr	r2, [pc, #212]	; (8005758 <HAL_ADCEx_InjectedConfigChannel+0x9a8>)
 8005682:	4293      	cmp	r3, r2
 8005684:	d127      	bne.n	80056d6 <HAL_ADCEx_InjectedConfigChannel+0x926>
        && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8005686:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800568a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800568e:	2b00      	cmp	r3, #0
 8005690:	d121      	bne.n	80056d6 <HAL_ADCEx_InjectedConfigChannel+0x926>
    {
      if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800569a:	d14d      	bne.n	8005738 <HAL_ADCEx_InjectedConfigChannel+0x988>
      {
        LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800569c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80056a0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80056a4:	4619      	mov	r1, r3
 80056a6:	482a      	ldr	r0, [pc, #168]	; (8005750 <HAL_ADCEx_InjectedConfigChannel+0x9a0>)
 80056a8:	f7ff f8be 	bl	8004828 <LL_ADC_SetCommonPathInternalCh>
        /* Delay for temperature sensor stabilization time */
        /* Wait loop initialization and execution */
        /* Note: Variable divided by 2 to compensate partially              */
        /*       CPU processing cycles, scaling in us split to not          */
        /*       exceed 32 bits register capacity and handle low frequency. */
        wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (((SystemCoreClock / (100000UL * 2UL)) + 1UL) + 1UL));
 80056ac:	4b2b      	ldr	r3, [pc, #172]	; (800575c <HAL_ADCEx_InjectedConfigChannel+0x9ac>)
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	099b      	lsrs	r3, r3, #6
 80056b2:	4a2b      	ldr	r2, [pc, #172]	; (8005760 <HAL_ADCEx_InjectedConfigChannel+0x9b0>)
 80056b4:	fba2 2303 	umull	r2, r3, r2, r3
 80056b8:	099a      	lsrs	r2, r3, #6
 80056ba:	4613      	mov	r3, r2
 80056bc:	005b      	lsls	r3, r3, #1
 80056be:	4413      	add	r3, r2
 80056c0:	009b      	lsls	r3, r3, #2
 80056c2:	3318      	adds	r3, #24
 80056c4:	60bb      	str	r3, [r7, #8]
        while (wait_loop_index != 0UL)
 80056c6:	e002      	b.n	80056ce <HAL_ADCEx_InjectedConfigChannel+0x91e>
        {
          wait_loop_index--;
 80056c8:	68bb      	ldr	r3, [r7, #8]
 80056ca:	3b01      	subs	r3, #1
 80056cc:	60bb      	str	r3, [r7, #8]
        while (wait_loop_index != 0UL)
 80056ce:	68bb      	ldr	r3, [r7, #8]
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	d1f9      	bne.n	80056c8 <HAL_ADCEx_InjectedConfigChannel+0x918>
      if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80056d4:	e030      	b.n	8005738 <HAL_ADCEx_InjectedConfigChannel+0x988>
        }
      }
    }
    else if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_VBAT)
 80056d6:	683b      	ldr	r3, [r7, #0]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	4a22      	ldr	r2, [pc, #136]	; (8005764 <HAL_ADCEx_InjectedConfigChannel+0x9b4>)
 80056dc:	4293      	cmp	r3, r2
 80056de:	d113      	bne.n	8005708 <HAL_ADCEx_InjectedConfigChannel+0x958>
             && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80056e0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80056e4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	d10d      	bne.n	8005708 <HAL_ADCEx_InjectedConfigChannel+0x958>
    {
      if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	4a1d      	ldr	r2, [pc, #116]	; (8005768 <HAL_ADCEx_InjectedConfigChannel+0x9b8>)
 80056f2:	4293      	cmp	r3, r2
 80056f4:	d020      	beq.n	8005738 <HAL_ADCEx_InjectedConfigChannel+0x988>
      {
        LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80056f6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80056fa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80056fe:	4619      	mov	r1, r3
 8005700:	4813      	ldr	r0, [pc, #76]	; (8005750 <HAL_ADCEx_InjectedConfigChannel+0x9a0>)
 8005702:	f7ff f891 	bl	8004828 <LL_ADC_SetCommonPathInternalCh>
      if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8005706:	e017      	b.n	8005738 <HAL_ADCEx_InjectedConfigChannel+0x988>
                                       LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
      }
    }
    else if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_VREFINT)
 8005708:	683b      	ldr	r3, [r7, #0]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	4a17      	ldr	r2, [pc, #92]	; (800576c <HAL_ADCEx_InjectedConfigChannel+0x9bc>)
 800570e:	4293      	cmp	r3, r2
 8005710:	d112      	bne.n	8005738 <HAL_ADCEx_InjectedConfigChannel+0x988>
             && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8005712:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8005716:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800571a:	2b00      	cmp	r3, #0
 800571c:	d10c      	bne.n	8005738 <HAL_ADCEx_InjectedConfigChannel+0x988>
    {
      if (ADC_VREFINT_INSTANCE(hadc))
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	4a11      	ldr	r2, [pc, #68]	; (8005768 <HAL_ADCEx_InjectedConfigChannel+0x9b8>)
 8005724:	4293      	cmp	r3, r2
 8005726:	d007      	beq.n	8005738 <HAL_ADCEx_InjectedConfigChannel+0x988>
      {
        LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8005728:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800572c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8005730:	4619      	mov	r1, r3
 8005732:	4807      	ldr	r0, [pc, #28]	; (8005750 <HAL_ADCEx_InjectedConfigChannel+0x9a0>)
 8005734:	f7ff f878 	bl	8004828 <LL_ADC_SetCommonPathInternalCh>
      /* nothing to do */
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	2200      	movs	r2, #0
 800573c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8005740:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8005744:	4618      	mov	r0, r3
 8005746:	37d8      	adds	r7, #216	; 0xd8
 8005748:	46bd      	mov	sp, r7
 800574a:	bd80      	pop	{r7, pc}
 800574c:	80080000 	.word	0x80080000
 8005750:	50000300 	.word	0x50000300
 8005754:	c3210000 	.word	0xc3210000
 8005758:	90c00010 	.word	0x90c00010
 800575c:	2000001c 	.word	0x2000001c
 8005760:	053e2d63 	.word	0x053e2d63
 8005764:	c7520000 	.word	0xc7520000
 8005768:	50000100 	.word	0x50000100
 800576c:	cb840000 	.word	0xcb840000

08005770 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8005770:	b590      	push	{r4, r7, lr}
 8005772:	b0a1      	sub	sp, #132	; 0x84
 8005774:	af00      	add	r7, sp, #0
 8005776:	6078      	str	r0, [r7, #4]
 8005778:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800577a:	2300      	movs	r3, #0
 800577c:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8005786:	2b01      	cmp	r3, #1
 8005788:	d101      	bne.n	800578e <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 800578a:	2302      	movs	r3, #2
 800578c:	e08b      	b.n	80058a6 <HAL_ADCEx_MultiModeConfigChannel+0x136>
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	2201      	movs	r2, #1
 8005792:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 8005796:	2300      	movs	r3, #0
 8005798:	667b      	str	r3, [r7, #100]	; 0x64
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 800579a:	2300      	movs	r3, #0
 800579c:	66bb      	str	r3, [r7, #104]	; 0x68

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80057a6:	d102      	bne.n	80057ae <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 80057a8:	4b41      	ldr	r3, [pc, #260]	; (80058b0 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 80057aa:	60bb      	str	r3, [r7, #8]
 80057ac:	e001      	b.n	80057b2 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 80057ae:	2300      	movs	r3, #0
 80057b0:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 80057b2:	68bb      	ldr	r3, [r7, #8]
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	d10b      	bne.n	80057d0 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80057bc:	f043 0220 	orr.w	r2, r3, #32
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	2200      	movs	r2, #0
 80057c8:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 80057cc:	2301      	movs	r3, #1
 80057ce:	e06a      	b.n	80058a6 <HAL_ADCEx_MultiModeConfigChannel+0x136>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 80057d0:	68bb      	ldr	r3, [r7, #8]
 80057d2:	4618      	mov	r0, r3
 80057d4:	f7ff f96b 	bl	8004aae <LL_ADC_REG_IsConversionOngoing>
 80057d8:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	4618      	mov	r0, r3
 80057e0:	f7ff f965 	bl	8004aae <LL_ADC_REG_IsConversionOngoing>
 80057e4:	4603      	mov	r3, r0
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d14c      	bne.n	8005884 <HAL_ADCEx_MultiModeConfigChannel+0x114>
      && (tmphadcSlave_conversion_on_going == 0UL))
 80057ea:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	d149      	bne.n	8005884 <HAL_ADCEx_MultiModeConfigChannel+0x114>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80057f0:	4b30      	ldr	r3, [pc, #192]	; (80058b4 <HAL_ADCEx_MultiModeConfigChannel+0x144>)
 80057f2:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80057f4:	683b      	ldr	r3, [r7, #0]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	d028      	beq.n	800584e <HAL_ADCEx_MultiModeConfigChannel+0xde>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 80057fc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80057fe:	689b      	ldr	r3, [r3, #8]
 8005800:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005804:	683b      	ldr	r3, [r7, #0]
 8005806:	6859      	ldr	r1, [r3, #4]
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800580e:	035b      	lsls	r3, r3, #13
 8005810:	430b      	orrs	r3, r1
 8005812:	431a      	orrs	r2, r3
 8005814:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005816:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8005818:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 800581c:	f7ff f934 	bl	8004a88 <LL_ADC_IsEnabled>
 8005820:	4604      	mov	r4, r0
 8005822:	4823      	ldr	r0, [pc, #140]	; (80058b0 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8005824:	f7ff f930 	bl	8004a88 <LL_ADC_IsEnabled>
 8005828:	4603      	mov	r3, r0
 800582a:	4323      	orrs	r3, r4
 800582c:	2b00      	cmp	r3, #0
 800582e:	d133      	bne.n	8005898 <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8005830:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005832:	689b      	ldr	r3, [r3, #8]
 8005834:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8005838:	f023 030f 	bic.w	r3, r3, #15
 800583c:	683a      	ldr	r2, [r7, #0]
 800583e:	6811      	ldr	r1, [r2, #0]
 8005840:	683a      	ldr	r2, [r7, #0]
 8005842:	6892      	ldr	r2, [r2, #8]
 8005844:	430a      	orrs	r2, r1
 8005846:	431a      	orrs	r2, r3
 8005848:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800584a:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800584c:	e024      	b.n	8005898 <HAL_ADCEx_MultiModeConfigChannel+0x128>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 800584e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005850:	689b      	ldr	r3, [r3, #8]
 8005852:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005856:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005858:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800585a:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 800585e:	f7ff f913 	bl	8004a88 <LL_ADC_IsEnabled>
 8005862:	4604      	mov	r4, r0
 8005864:	4812      	ldr	r0, [pc, #72]	; (80058b0 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8005866:	f7ff f90f 	bl	8004a88 <LL_ADC_IsEnabled>
 800586a:	4603      	mov	r3, r0
 800586c:	4323      	orrs	r3, r4
 800586e:	2b00      	cmp	r3, #0
 8005870:	d112      	bne.n	8005898 <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8005872:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005874:	689b      	ldr	r3, [r3, #8]
 8005876:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 800587a:	f023 030f 	bic.w	r3, r3, #15
 800587e:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8005880:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8005882:	e009      	b.n	8005898 <HAL_ADCEx_MultiModeConfigChannel+0x128>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005888:	f043 0220 	orr.w	r2, r3, #32
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8005890:	2301      	movs	r3, #1
 8005892:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8005896:	e000      	b.n	800589a <HAL_ADCEx_MultiModeConfigChannel+0x12a>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8005898:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	2200      	movs	r2, #0
 800589e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 80058a2:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 80058a6:	4618      	mov	r0, r3
 80058a8:	3784      	adds	r7, #132	; 0x84
 80058aa:	46bd      	mov	sp, r7
 80058ac:	bd90      	pop	{r4, r7, pc}
 80058ae:	bf00      	nop
 80058b0:	50000100 	.word	0x50000100
 80058b4:	50000300 	.word	0x50000300

080058b8 <HAL_CORDIC_Init>:
  * @brief  Initialize the CORDIC peripheral and the associated handle.
  * @param  hcordic pointer to a CORDIC_HandleTypeDef structure.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CORDIC_Init(CORDIC_HandleTypeDef *hcordic)
{
 80058b8:	b580      	push	{r7, lr}
 80058ba:	b082      	sub	sp, #8
 80058bc:	af00      	add	r7, sp, #0
 80058be:	6078      	str	r0, [r7, #4]
  /* Check the CORDIC handle allocation */
  if (hcordic == NULL)
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d101      	bne.n	80058ca <HAL_CORDIC_Init+0x12>
  {
    /* Return error status */
    return HAL_ERROR;
 80058c6:	2301      	movs	r3, #1
 80058c8:	e023      	b.n	8005912 <HAL_CORDIC_Init+0x5a>

    /* Initialize the low level hardware */
    hcordic->MspInitCallback(hcordic);
  }
#else
  if (hcordic->State == HAL_CORDIC_STATE_RESET)
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80058d0:	b2db      	uxtb	r3, r3
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d106      	bne.n	80058e4 <HAL_CORDIC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hcordic->Lock = HAL_UNLOCKED;
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	2200      	movs	r2, #0
 80058da:	f883 2020 	strb.w	r2, [r3, #32]

    /* Initialize the low level hardware */
    HAL_CORDIC_MspInit(hcordic);
 80058de:	6878      	ldr	r0, [r7, #4]
 80058e0:	f7fc ff82 	bl	80027e8 <HAL_CORDIC_MspInit>
  }
#endif /* (USE_HAL_CORDIC_REGISTER_CALLBACKS) */

  /* Set CORDIC error code to none */
  hcordic->ErrorCode = HAL_CORDIC_ERROR_NONE;
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	2200      	movs	r2, #0
 80058e8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Reset pInBuff and pOutBuff */
  hcordic->pInBuff = NULL;
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	2200      	movs	r2, #0
 80058ee:	605a      	str	r2, [r3, #4]
  hcordic->pOutBuff = NULL;
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	2200      	movs	r2, #0
 80058f4:	609a      	str	r2, [r3, #8]

  /* Reset NbCalcToOrder and NbCalcToGet */
  hcordic->NbCalcToOrder = 0U;
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	2200      	movs	r2, #0
 80058fa:	60da      	str	r2, [r3, #12]
  hcordic->NbCalcToGet = 0U;
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	2200      	movs	r2, #0
 8005900:	611a      	str	r2, [r3, #16]

  /* Reset DMADirection */
  hcordic->DMADirection = CORDIC_DMA_DIR_NONE;
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	2200      	movs	r2, #0
 8005906:	615a      	str	r2, [r3, #20]

  /* Change CORDIC peripheral state */
  hcordic->State = HAL_CORDIC_STATE_READY;
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	2201      	movs	r2, #1
 800590c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Return function status */
  return HAL_OK;
 8005910:	2300      	movs	r3, #0
}
 8005912:	4618      	mov	r0, r3
 8005914:	3708      	adds	r7, #8
 8005916:	46bd      	mov	sp, r7
 8005918:	bd80      	pop	{r7, pc}
	...

0800591c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800591c:	b480      	push	{r7}
 800591e:	b085      	sub	sp, #20
 8005920:	af00      	add	r7, sp, #0
 8005922:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	f003 0307 	and.w	r3, r3, #7
 800592a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800592c:	4b0c      	ldr	r3, [pc, #48]	; (8005960 <__NVIC_SetPriorityGrouping+0x44>)
 800592e:	68db      	ldr	r3, [r3, #12]
 8005930:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005932:	68ba      	ldr	r2, [r7, #8]
 8005934:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005938:	4013      	ands	r3, r2
 800593a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005940:	68bb      	ldr	r3, [r7, #8]
 8005942:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005944:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8005948:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800594c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800594e:	4a04      	ldr	r2, [pc, #16]	; (8005960 <__NVIC_SetPriorityGrouping+0x44>)
 8005950:	68bb      	ldr	r3, [r7, #8]
 8005952:	60d3      	str	r3, [r2, #12]
}
 8005954:	bf00      	nop
 8005956:	3714      	adds	r7, #20
 8005958:	46bd      	mov	sp, r7
 800595a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800595e:	4770      	bx	lr
 8005960:	e000ed00 	.word	0xe000ed00

08005964 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005964:	b480      	push	{r7}
 8005966:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005968:	4b04      	ldr	r3, [pc, #16]	; (800597c <__NVIC_GetPriorityGrouping+0x18>)
 800596a:	68db      	ldr	r3, [r3, #12]
 800596c:	0a1b      	lsrs	r3, r3, #8
 800596e:	f003 0307 	and.w	r3, r3, #7
}
 8005972:	4618      	mov	r0, r3
 8005974:	46bd      	mov	sp, r7
 8005976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800597a:	4770      	bx	lr
 800597c:	e000ed00 	.word	0xe000ed00

08005980 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005980:	b480      	push	{r7}
 8005982:	b083      	sub	sp, #12
 8005984:	af00      	add	r7, sp, #0
 8005986:	4603      	mov	r3, r0
 8005988:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800598a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800598e:	2b00      	cmp	r3, #0
 8005990:	db0b      	blt.n	80059aa <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005992:	79fb      	ldrb	r3, [r7, #7]
 8005994:	f003 021f 	and.w	r2, r3, #31
 8005998:	4907      	ldr	r1, [pc, #28]	; (80059b8 <__NVIC_EnableIRQ+0x38>)
 800599a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800599e:	095b      	lsrs	r3, r3, #5
 80059a0:	2001      	movs	r0, #1
 80059a2:	fa00 f202 	lsl.w	r2, r0, r2
 80059a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80059aa:	bf00      	nop
 80059ac:	370c      	adds	r7, #12
 80059ae:	46bd      	mov	sp, r7
 80059b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059b4:	4770      	bx	lr
 80059b6:	bf00      	nop
 80059b8:	e000e100 	.word	0xe000e100

080059bc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80059bc:	b480      	push	{r7}
 80059be:	b083      	sub	sp, #12
 80059c0:	af00      	add	r7, sp, #0
 80059c2:	4603      	mov	r3, r0
 80059c4:	6039      	str	r1, [r7, #0]
 80059c6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80059c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	db0a      	blt.n	80059e6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80059d0:	683b      	ldr	r3, [r7, #0]
 80059d2:	b2da      	uxtb	r2, r3
 80059d4:	490c      	ldr	r1, [pc, #48]	; (8005a08 <__NVIC_SetPriority+0x4c>)
 80059d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80059da:	0112      	lsls	r2, r2, #4
 80059dc:	b2d2      	uxtb	r2, r2
 80059de:	440b      	add	r3, r1
 80059e0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80059e4:	e00a      	b.n	80059fc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80059e6:	683b      	ldr	r3, [r7, #0]
 80059e8:	b2da      	uxtb	r2, r3
 80059ea:	4908      	ldr	r1, [pc, #32]	; (8005a0c <__NVIC_SetPriority+0x50>)
 80059ec:	79fb      	ldrb	r3, [r7, #7]
 80059ee:	f003 030f 	and.w	r3, r3, #15
 80059f2:	3b04      	subs	r3, #4
 80059f4:	0112      	lsls	r2, r2, #4
 80059f6:	b2d2      	uxtb	r2, r2
 80059f8:	440b      	add	r3, r1
 80059fa:	761a      	strb	r2, [r3, #24]
}
 80059fc:	bf00      	nop
 80059fe:	370c      	adds	r7, #12
 8005a00:	46bd      	mov	sp, r7
 8005a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a06:	4770      	bx	lr
 8005a08:	e000e100 	.word	0xe000e100
 8005a0c:	e000ed00 	.word	0xe000ed00

08005a10 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005a10:	b480      	push	{r7}
 8005a12:	b089      	sub	sp, #36	; 0x24
 8005a14:	af00      	add	r7, sp, #0
 8005a16:	60f8      	str	r0, [r7, #12]
 8005a18:	60b9      	str	r1, [r7, #8]
 8005a1a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	f003 0307 	and.w	r3, r3, #7
 8005a22:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005a24:	69fb      	ldr	r3, [r7, #28]
 8005a26:	f1c3 0307 	rsb	r3, r3, #7
 8005a2a:	2b04      	cmp	r3, #4
 8005a2c:	bf28      	it	cs
 8005a2e:	2304      	movcs	r3, #4
 8005a30:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005a32:	69fb      	ldr	r3, [r7, #28]
 8005a34:	3304      	adds	r3, #4
 8005a36:	2b06      	cmp	r3, #6
 8005a38:	d902      	bls.n	8005a40 <NVIC_EncodePriority+0x30>
 8005a3a:	69fb      	ldr	r3, [r7, #28]
 8005a3c:	3b03      	subs	r3, #3
 8005a3e:	e000      	b.n	8005a42 <NVIC_EncodePriority+0x32>
 8005a40:	2300      	movs	r3, #0
 8005a42:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005a44:	f04f 32ff 	mov.w	r2, #4294967295
 8005a48:	69bb      	ldr	r3, [r7, #24]
 8005a4a:	fa02 f303 	lsl.w	r3, r2, r3
 8005a4e:	43da      	mvns	r2, r3
 8005a50:	68bb      	ldr	r3, [r7, #8]
 8005a52:	401a      	ands	r2, r3
 8005a54:	697b      	ldr	r3, [r7, #20]
 8005a56:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005a58:	f04f 31ff 	mov.w	r1, #4294967295
 8005a5c:	697b      	ldr	r3, [r7, #20]
 8005a5e:	fa01 f303 	lsl.w	r3, r1, r3
 8005a62:	43d9      	mvns	r1, r3
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005a68:	4313      	orrs	r3, r2
         );
}
 8005a6a:	4618      	mov	r0, r3
 8005a6c:	3724      	adds	r7, #36	; 0x24
 8005a6e:	46bd      	mov	sp, r7
 8005a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a74:	4770      	bx	lr
	...

08005a78 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005a78:	b580      	push	{r7, lr}
 8005a7a:	b082      	sub	sp, #8
 8005a7c:	af00      	add	r7, sp, #0
 8005a7e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	3b01      	subs	r3, #1
 8005a84:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005a88:	d301      	bcc.n	8005a8e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005a8a:	2301      	movs	r3, #1
 8005a8c:	e00f      	b.n	8005aae <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005a8e:	4a0a      	ldr	r2, [pc, #40]	; (8005ab8 <SysTick_Config+0x40>)
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	3b01      	subs	r3, #1
 8005a94:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005a96:	210f      	movs	r1, #15
 8005a98:	f04f 30ff 	mov.w	r0, #4294967295
 8005a9c:	f7ff ff8e 	bl	80059bc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005aa0:	4b05      	ldr	r3, [pc, #20]	; (8005ab8 <SysTick_Config+0x40>)
 8005aa2:	2200      	movs	r2, #0
 8005aa4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005aa6:	4b04      	ldr	r3, [pc, #16]	; (8005ab8 <SysTick_Config+0x40>)
 8005aa8:	2207      	movs	r2, #7
 8005aaa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005aac:	2300      	movs	r3, #0
}
 8005aae:	4618      	mov	r0, r3
 8005ab0:	3708      	adds	r7, #8
 8005ab2:	46bd      	mov	sp, r7
 8005ab4:	bd80      	pop	{r7, pc}
 8005ab6:	bf00      	nop
 8005ab8:	e000e010 	.word	0xe000e010

08005abc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005abc:	b580      	push	{r7, lr}
 8005abe:	b082      	sub	sp, #8
 8005ac0:	af00      	add	r7, sp, #0
 8005ac2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005ac4:	6878      	ldr	r0, [r7, #4]
 8005ac6:	f7ff ff29 	bl	800591c <__NVIC_SetPriorityGrouping>
}
 8005aca:	bf00      	nop
 8005acc:	3708      	adds	r7, #8
 8005ace:	46bd      	mov	sp, r7
 8005ad0:	bd80      	pop	{r7, pc}

08005ad2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005ad2:	b580      	push	{r7, lr}
 8005ad4:	b086      	sub	sp, #24
 8005ad6:	af00      	add	r7, sp, #0
 8005ad8:	4603      	mov	r3, r0
 8005ada:	60b9      	str	r1, [r7, #8]
 8005adc:	607a      	str	r2, [r7, #4]
 8005ade:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8005ae0:	f7ff ff40 	bl	8005964 <__NVIC_GetPriorityGrouping>
 8005ae4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005ae6:	687a      	ldr	r2, [r7, #4]
 8005ae8:	68b9      	ldr	r1, [r7, #8]
 8005aea:	6978      	ldr	r0, [r7, #20]
 8005aec:	f7ff ff90 	bl	8005a10 <NVIC_EncodePriority>
 8005af0:	4602      	mov	r2, r0
 8005af2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005af6:	4611      	mov	r1, r2
 8005af8:	4618      	mov	r0, r3
 8005afa:	f7ff ff5f 	bl	80059bc <__NVIC_SetPriority>
}
 8005afe:	bf00      	nop
 8005b00:	3718      	adds	r7, #24
 8005b02:	46bd      	mov	sp, r7
 8005b04:	bd80      	pop	{r7, pc}

08005b06 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005b06:	b580      	push	{r7, lr}
 8005b08:	b082      	sub	sp, #8
 8005b0a:	af00      	add	r7, sp, #0
 8005b0c:	4603      	mov	r3, r0
 8005b0e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005b10:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005b14:	4618      	mov	r0, r3
 8005b16:	f7ff ff33 	bl	8005980 <__NVIC_EnableIRQ>
}
 8005b1a:	bf00      	nop
 8005b1c:	3708      	adds	r7, #8
 8005b1e:	46bd      	mov	sp, r7
 8005b20:	bd80      	pop	{r7, pc}

08005b22 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005b22:	b580      	push	{r7, lr}
 8005b24:	b082      	sub	sp, #8
 8005b26:	af00      	add	r7, sp, #0
 8005b28:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005b2a:	6878      	ldr	r0, [r7, #4]
 8005b2c:	f7ff ffa4 	bl	8005a78 <SysTick_Config>
 8005b30:	4603      	mov	r3, r0
}
 8005b32:	4618      	mov	r0, r3
 8005b34:	3708      	adds	r7, #8
 8005b36:	46bd      	mov	sp, r7
 8005b38:	bd80      	pop	{r7, pc}

08005b3a <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8005b3a:	b580      	push	{r7, lr}
 8005b3c:	b082      	sub	sp, #8
 8005b3e:	af00      	add	r7, sp, #0
 8005b40:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	d101      	bne.n	8005b4c <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8005b48:	2301      	movs	r3, #1
 8005b4a:	e014      	b.n	8005b76 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	791b      	ldrb	r3, [r3, #4]
 8005b50:	b2db      	uxtb	r3, r3
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d105      	bne.n	8005b62 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	2200      	movs	r2, #0
 8005b5a:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8005b5c:	6878      	ldr	r0, [r7, #4]
 8005b5e:	f7fc fe63 	bl	8002828 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	2202      	movs	r2, #2
 8005b66:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	2200      	movs	r2, #0
 8005b6c:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	2201      	movs	r2, #1
 8005b72:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8005b74:	2300      	movs	r3, #0
}
 8005b76:	4618      	mov	r0, r3
 8005b78:	3708      	adds	r7, #8
 8005b7a:	46bd      	mov	sp, r7
 8005b7c:	bd80      	pop	{r7, pc}

08005b7e <HAL_DAC_IRQHandler>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(DAC_HandleTypeDef *hdac)
{
 8005b7e:	b580      	push	{r7, lr}
 8005b80:	b082      	sub	sp, #8
 8005b82:	af00      	add	r7, sp, #0
 8005b84:	6078      	str	r0, [r7, #4]
  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR1))
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005b90:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005b94:	d120      	bne.n	8005bd8 <HAL_DAC_IRQHandler+0x5a>
  {
    /* Check underrun flag of DAC channel 1 */
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR1))
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b9c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005ba0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005ba4:	d118      	bne.n	8005bd8 <HAL_DAC_IRQHandler+0x5a>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	2204      	movs	r2, #4
 8005baa:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel1 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH1);
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	691b      	ldr	r3, [r3, #16]
 8005bb0:	f043 0201 	orr.w	r2, r3, #1
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR1);
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8005bc0:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel1 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	681a      	ldr	r2, [r3, #0]
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005bd0:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh1(hdac);
#else
      HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 8005bd2:	6878      	ldr	r0, [r7, #4]
 8005bd4:	f000 f82d 	bl	8005c32 <HAL_DAC_DMAUnderrunCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }


  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR2))
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005be2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005be6:	d120      	bne.n	8005c2a <HAL_DAC_IRQHandler+0xac>
  {
    /* Check underrun flag of DAC channel 2 */
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR2))
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005bee:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005bf2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005bf6:	d118      	bne.n	8005c2a <HAL_DAC_IRQHandler+0xac>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	2204      	movs	r2, #4
 8005bfc:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel2 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH2);
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	691b      	ldr	r3, [r3, #16]
 8005c02:	f043 0202 	orr.w	r2, r3, #2
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR2);
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8005c12:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel2 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	681a      	ldr	r2, [r3, #0]
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8005c22:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh2(hdac);
#else
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 8005c24:	6878      	ldr	r0, [r7, #4]
 8005c26:	f000 f9b7 	bl	8005f98 <HAL_DACEx_DMAUnderrunCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }

}
 8005c2a:	bf00      	nop
 8005c2c:	3708      	adds	r7, #8
 8005c2e:	46bd      	mov	sp, r7
 8005c30:	bd80      	pop	{r7, pc}

08005c32 <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8005c32:	b480      	push	{r7}
 8005c34:	b083      	sub	sp, #12
 8005c36:	af00      	add	r7, sp, #0
 8005c38:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 8005c3a:	bf00      	nop
 8005c3c:	370c      	adds	r7, #12
 8005c3e:	46bd      	mov	sp, r7
 8005c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c44:	4770      	bx	lr
	...

08005c48 <HAL_DAC_ConfigChannel>:
  *         (1) On this STM32 series, parameter not available on all instances.
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8005c48:	b580      	push	{r7, lr}
 8005c4a:	b08a      	sub	sp, #40	; 0x28
 8005c4c:	af00      	add	r7, sp, #0
 8005c4e:	60f8      	str	r0, [r7, #12]
 8005c50:	60b9      	str	r1, [r7, #8]
 8005c52:	607a      	str	r2, [r7, #4]
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_DMADoubleDataMode));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_SignedFormat));

  /* Process locked */
  __HAL_LOCK(hdac);
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	795b      	ldrb	r3, [r3, #5]
 8005c58:	2b01      	cmp	r3, #1
 8005c5a:	d101      	bne.n	8005c60 <HAL_DAC_ConfigChannel+0x18>
 8005c5c:	2302      	movs	r3, #2
 8005c5e:	e192      	b.n	8005f86 <HAL_DAC_ConfigChannel+0x33e>
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	2201      	movs	r2, #1
 8005c64:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	2202      	movs	r2, #2
 8005c6a:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8005c6c:	68bb      	ldr	r3, [r7, #8]
 8005c6e:	689b      	ldr	r3, [r3, #8]
 8005c70:	2b04      	cmp	r3, #4
 8005c72:	d174      	bne.n	8005d5e <HAL_DAC_ConfigChannel+0x116>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8005c74:	f7fd fb66 	bl	8003344 <HAL_GetTick>
 8005c78:	61f8      	str	r0, [r7, #28]

    if (Channel == DAC_CHANNEL_1)
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d134      	bne.n	8005cea <HAL_DAC_ConfigChannel+0xa2>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8005c80:	e011      	b.n	8005ca6 <HAL_DAC_ConfigChannel+0x5e>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8005c82:	f7fd fb5f 	bl	8003344 <HAL_GetTick>
 8005c86:	4602      	mov	r2, r0
 8005c88:	69fb      	ldr	r3, [r7, #28]
 8005c8a:	1ad3      	subs	r3, r2, r3
 8005c8c:	2b01      	cmp	r3, #1
 8005c8e:	d90a      	bls.n	8005ca6 <HAL_DAC_ConfigChannel+0x5e>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	691b      	ldr	r3, [r3, #16]
 8005c94:	f043 0208 	orr.w	r2, r3, #8
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	2203      	movs	r2, #3
 8005ca0:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 8005ca2:	2303      	movs	r3, #3
 8005ca4:	e16f      	b.n	8005f86 <HAL_DAC_ConfigChannel+0x33e>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005cac:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	d1e6      	bne.n	8005c82 <HAL_DAC_ConfigChannel+0x3a>
        }
      }
      HAL_Delay(1);
 8005cb4:	2001      	movs	r0, #1
 8005cb6:	f7fd fb51 	bl	800335c <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	68ba      	ldr	r2, [r7, #8]
 8005cc0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005cc2:	641a      	str	r2, [r3, #64]	; 0x40
 8005cc4:	e01e      	b.n	8005d04 <HAL_DAC_ConfigChannel+0xbc>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8005cc6:	f7fd fb3d 	bl	8003344 <HAL_GetTick>
 8005cca:	4602      	mov	r2, r0
 8005ccc:	69fb      	ldr	r3, [r7, #28]
 8005cce:	1ad3      	subs	r3, r2, r3
 8005cd0:	2b01      	cmp	r3, #1
 8005cd2:	d90a      	bls.n	8005cea <HAL_DAC_ConfigChannel+0xa2>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	691b      	ldr	r3, [r3, #16]
 8005cd8:	f043 0208 	orr.w	r2, r3, #8
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	2203      	movs	r2, #3
 8005ce4:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 8005ce6:	2303      	movs	r3, #3
 8005ce8:	e14d      	b.n	8005f86 <HAL_DAC_ConfigChannel+0x33e>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	dbe8      	blt.n	8005cc6 <HAL_DAC_ConfigChannel+0x7e>
        }
      }
      HAL_Delay(1U);
 8005cf4:	2001      	movs	r0, #1
 8005cf6:	f7fd fb31 	bl	800335c <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	68ba      	ldr	r2, [r7, #8]
 8005d00:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005d02:	645a      	str	r2, [r3, #68]	; 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	f003 0310 	and.w	r3, r3, #16
 8005d10:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8005d14:	fa01 f303 	lsl.w	r3, r1, r3
 8005d18:	43db      	mvns	r3, r3
 8005d1a:	ea02 0103 	and.w	r1, r2, r3
 8005d1e:	68bb      	ldr	r3, [r7, #8]
 8005d20:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	f003 0310 	and.w	r3, r3, #16
 8005d28:	409a      	lsls	r2, r3
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	430a      	orrs	r2, r1
 8005d30:	649a      	str	r2, [r3, #72]	; 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	f003 0310 	and.w	r3, r3, #16
 8005d3e:	21ff      	movs	r1, #255	; 0xff
 8005d40:	fa01 f303 	lsl.w	r3, r1, r3
 8005d44:	43db      	mvns	r3, r3
 8005d46:	ea02 0103 	and.w	r1, r2, r3
 8005d4a:	68bb      	ldr	r3, [r7, #8]
 8005d4c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	f003 0310 	and.w	r3, r3, #16
 8005d54:	409a      	lsls	r2, r3
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	430a      	orrs	r2, r1
 8005d5c:	64da      	str	r2, [r3, #76]	; 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8005d5e:	68bb      	ldr	r3, [r7, #8]
 8005d60:	69db      	ldr	r3, [r3, #28]
 8005d62:	2b01      	cmp	r3, #1
 8005d64:	d11d      	bne.n	8005da2 <HAL_DAC_ConfigChannel+0x15a>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d6c:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	f003 0310 	and.w	r3, r3, #16
 8005d74:	221f      	movs	r2, #31
 8005d76:	fa02 f303 	lsl.w	r3, r2, r3
 8005d7a:	43db      	mvns	r3, r3
 8005d7c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005d7e:	4013      	ands	r3, r2
 8005d80:	627b      	str	r3, [r7, #36]	; 0x24
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8005d82:	68bb      	ldr	r3, [r7, #8]
 8005d84:	6a1b      	ldr	r3, [r3, #32]
 8005d86:	61bb      	str	r3, [r7, #24]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	f003 0310 	and.w	r3, r3, #16
 8005d8e:	69ba      	ldr	r2, [r7, #24]
 8005d90:	fa02 f303 	lsl.w	r3, r2, r3
 8005d94:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005d96:	4313      	orrs	r3, r2
 8005d98:	627b      	str	r3, [r7, #36]	; 0x24
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005da0:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005da8:	627b      	str	r3, [r7, #36]	; 0x24
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	f003 0310 	and.w	r3, r3, #16
 8005db0:	2207      	movs	r2, #7
 8005db2:	fa02 f303 	lsl.w	r3, r2, r3
 8005db6:	43db      	mvns	r3, r3
 8005db8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005dba:	4013      	ands	r3, r2
 8005dbc:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 8005dbe:	68bb      	ldr	r3, [r7, #8]
 8005dc0:	699b      	ldr	r3, [r3, #24]
 8005dc2:	2b01      	cmp	r3, #1
 8005dc4:	d102      	bne.n	8005dcc <HAL_DAC_ConfigChannel+0x184>
  {
    connectOnChip = 0x00000000UL;
 8005dc6:	2300      	movs	r3, #0
 8005dc8:	623b      	str	r3, [r7, #32]
 8005dca:	e00f      	b.n	8005dec <HAL_DAC_ConfigChannel+0x1a4>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 8005dcc:	68bb      	ldr	r3, [r7, #8]
 8005dce:	699b      	ldr	r3, [r3, #24]
 8005dd0:	2b02      	cmp	r3, #2
 8005dd2:	d102      	bne.n	8005dda <HAL_DAC_ConfigChannel+0x192>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 8005dd4:	2301      	movs	r3, #1
 8005dd6:	623b      	str	r3, [r7, #32]
 8005dd8:	e008      	b.n	8005dec <HAL_DAC_ConfigChannel+0x1a4>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 8005dda:	68bb      	ldr	r3, [r7, #8]
 8005ddc:	695b      	ldr	r3, [r3, #20]
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	d102      	bne.n	8005de8 <HAL_DAC_ConfigChannel+0x1a0>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 8005de2:	2301      	movs	r3, #1
 8005de4:	623b      	str	r3, [r7, #32]
 8005de6:	e001      	b.n	8005dec <HAL_DAC_ConfigChannel+0x1a4>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 8005de8:	2300      	movs	r3, #0
 8005dea:	623b      	str	r3, [r7, #32]
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 8005dec:	68bb      	ldr	r3, [r7, #8]
 8005dee:	689a      	ldr	r2, [r3, #8]
 8005df0:	68bb      	ldr	r3, [r7, #8]
 8005df2:	695b      	ldr	r3, [r3, #20]
 8005df4:	4313      	orrs	r3, r2
 8005df6:	6a3a      	ldr	r2, [r7, #32]
 8005df8:	4313      	orrs	r3, r2
 8005dfa:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_DMADOUBLEx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_DMADOUBLE1)) << (Channel & 0x10UL));
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	f003 0310 	and.w	r3, r3, #16
 8005e02:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005e06:	fa02 f303 	lsl.w	r3, r2, r3
 8005e0a:	43db      	mvns	r3, r3
 8005e0c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005e0e:	4013      	ands	r3, r2
 8005e10:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: DMA double data mode */
  tmpreg2 |= (sConfig->DAC_DMADoubleDataMode == ENABLE) ? DAC_MCR_DMADOUBLE1 : 0UL;
 8005e12:	68bb      	ldr	r3, [r7, #8]
 8005e14:	791b      	ldrb	r3, [r3, #4]
 8005e16:	2b01      	cmp	r3, #1
 8005e18:	d102      	bne.n	8005e20 <HAL_DAC_ConfigChannel+0x1d8>
 8005e1a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005e1e:	e000      	b.n	8005e22 <HAL_DAC_ConfigChannel+0x1da>
 8005e20:	2300      	movs	r3, #0
 8005e22:	69ba      	ldr	r2, [r7, #24]
 8005e24:	4313      	orrs	r3, r2
 8005e26:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_SINFORMATx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_SINFORMAT1)) << (Channel & 0x10UL));
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	f003 0310 	and.w	r3, r3, #16
 8005e2e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005e32:	fa02 f303 	lsl.w	r3, r2, r3
 8005e36:	43db      	mvns	r3, r3
 8005e38:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005e3a:	4013      	ands	r3, r2
 8005e3c:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: Signed format */
  tmpreg2 |= (sConfig->DAC_SignedFormat == ENABLE) ? DAC_MCR_SINFORMAT1 : 0UL;
 8005e3e:	68bb      	ldr	r3, [r7, #8]
 8005e40:	795b      	ldrb	r3, [r3, #5]
 8005e42:	2b01      	cmp	r3, #1
 8005e44:	d102      	bne.n	8005e4c <HAL_DAC_ConfigChannel+0x204>
 8005e46:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005e4a:	e000      	b.n	8005e4e <HAL_DAC_ConfigChannel+0x206>
 8005e4c:	2300      	movs	r3, #0
 8005e4e:	69ba      	ldr	r2, [r7, #24]
 8005e50:	4313      	orrs	r3, r2
 8005e52:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_HFSEL bits */
  tmpreg1 &= ~(DAC_MCR_HFSEL);
 8005e54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e56:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8005e5a:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for both DAC channels: high frequency mode */
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC == sConfig->DAC_HighFrequency)
 8005e5c:	68bb      	ldr	r3, [r7, #8]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	2b02      	cmp	r3, #2
 8005e62:	d114      	bne.n	8005e8e <HAL_DAC_ConfigChannel+0x246>
  {
    hclkfreq = HAL_RCC_GetHCLKFreq();
 8005e64:	f001 fa3a 	bl	80072dc <HAL_RCC_GetHCLKFreq>
 8005e68:	6178      	str	r0, [r7, #20]
    if (hclkfreq > HFSEL_ENABLE_THRESHOLD_160MHZ)
 8005e6a:	697b      	ldr	r3, [r7, #20]
 8005e6c:	4a48      	ldr	r2, [pc, #288]	; (8005f90 <HAL_DAC_ConfigChannel+0x348>)
 8005e6e:	4293      	cmp	r3, r2
 8005e70:	d904      	bls.n	8005e7c <HAL_DAC_ConfigChannel+0x234>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_160MHZ;
 8005e72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e74:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005e78:	627b      	str	r3, [r7, #36]	; 0x24
 8005e7a:	e00f      	b.n	8005e9c <HAL_DAC_ConfigChannel+0x254>
    }
    else if (hclkfreq > HFSEL_ENABLE_THRESHOLD_80MHZ)
 8005e7c:	697b      	ldr	r3, [r7, #20]
 8005e7e:	4a45      	ldr	r2, [pc, #276]	; (8005f94 <HAL_DAC_ConfigChannel+0x34c>)
 8005e80:	4293      	cmp	r3, r2
 8005e82:	d90a      	bls.n	8005e9a <HAL_DAC_ConfigChannel+0x252>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 8005e84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e86:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005e8a:	627b      	str	r3, [r7, #36]	; 0x24
 8005e8c:	e006      	b.n	8005e9c <HAL_DAC_ConfigChannel+0x254>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
    }
  }
  else
  {
    tmpreg1 |= sConfig->DAC_HighFrequency;
 8005e8e:	68bb      	ldr	r3, [r7, #8]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005e94:	4313      	orrs	r3, r2
 8005e96:	627b      	str	r3, [r7, #36]	; 0x24
 8005e98:	e000      	b.n	8005e9c <HAL_DAC_ConfigChannel+0x254>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
 8005e9a:	bf00      	nop
  }
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	f003 0310 	and.w	r3, r3, #16
 8005ea2:	69ba      	ldr	r2, [r7, #24]
 8005ea4:	fa02 f303 	lsl.w	r3, r2, r3
 8005ea8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005eaa:	4313      	orrs	r3, r2
 8005eac:	627b      	str	r3, [r7, #36]	; 0x24
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005eb4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	6819      	ldr	r1, [r3, #0]
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	f003 0310 	and.w	r3, r3, #16
 8005ec2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8005ec6:	fa02 f303 	lsl.w	r3, r2, r3
 8005eca:	43da      	mvns	r2, r3
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	400a      	ands	r2, r1
 8005ed2:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	627b      	str	r3, [r7, #36]	; 0x24
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	f003 0310 	and.w	r3, r3, #16
 8005ee2:	f640 72fe 	movw	r2, #4094	; 0xffe
 8005ee6:	fa02 f303 	lsl.w	r3, r2, r3
 8005eea:	43db      	mvns	r3, r3
 8005eec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005eee:	4013      	ands	r3, r2
 8005ef0:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8005ef2:	68bb      	ldr	r3, [r7, #8]
 8005ef4:	68db      	ldr	r3, [r3, #12]
 8005ef6:	61bb      	str	r3, [r7, #24]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	f003 0310 	and.w	r3, r3, #16
 8005efe:	69ba      	ldr	r2, [r7, #24]
 8005f00:	fa02 f303 	lsl.w	r3, r2, r3
 8005f04:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005f06:	4313      	orrs	r3, r2
 8005f08:	627b      	str	r3, [r7, #36]	; 0x24
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005f10:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	6819      	ldr	r1, [r3, #0]
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	f003 0310 	and.w	r3, r3, #16
 8005f1e:	22c0      	movs	r2, #192	; 0xc0
 8005f20:	fa02 f303 	lsl.w	r3, r2, r3
 8005f24:	43da      	mvns	r2, r3
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	400a      	ands	r2, r1
 8005f2c:	601a      	str	r2, [r3, #0]

  /* Set STRSTTRIGSELx and STINCTRIGSELx bits according to DAC_Trigger & DAC_Trigger2 values */
  tmpreg2 = ((sConfig->DAC_Trigger & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STRSTTRIGSEL1_Pos;
 8005f2e:	68bb      	ldr	r3, [r7, #8]
 8005f30:	68db      	ldr	r3, [r3, #12]
 8005f32:	089b      	lsrs	r3, r3, #2
 8005f34:	f003 030f 	and.w	r3, r3, #15
 8005f38:	61bb      	str	r3, [r7, #24]
  tmpreg2 |= ((sConfig->DAC_Trigger2 & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STINCTRIGSEL1_Pos;
 8005f3a:	68bb      	ldr	r3, [r7, #8]
 8005f3c:	691b      	ldr	r3, [r3, #16]
 8005f3e:	089b      	lsrs	r3, r3, #2
 8005f40:	021b      	lsls	r3, r3, #8
 8005f42:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8005f46:	69ba      	ldr	r2, [r7, #24]
 8005f48:	4313      	orrs	r3, r2
 8005f4a:	61bb      	str	r3, [r7, #24]
  /* Modify STMODR register value depending on DAC_Channel */
  MODIFY_REG(hdac->Instance->STMODR, (DAC_STMODR_STINCTRIGSEL1 | DAC_STMODR_STRSTTRIGSEL1) << (Channel & 0x10UL), tmpreg2 << (Channel & 0x10UL));
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	f003 0310 	and.w	r3, r3, #16
 8005f58:	f640 710f 	movw	r1, #3855	; 0xf0f
 8005f5c:	fa01 f303 	lsl.w	r3, r1, r3
 8005f60:	43db      	mvns	r3, r3
 8005f62:	ea02 0103 	and.w	r1, r2, r3
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	f003 0310 	and.w	r3, r3, #16
 8005f6c:	69ba      	ldr	r2, [r7, #24]
 8005f6e:	409a      	lsls	r2, r3
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	430a      	orrs	r2, r1
 8005f76:	661a      	str	r2, [r3, #96]	; 0x60
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	2201      	movs	r2, #1
 8005f7c:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	2200      	movs	r2, #0
 8005f82:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8005f84:	2300      	movs	r3, #0
}
 8005f86:	4618      	mov	r0, r3
 8005f88:	3728      	adds	r7, #40	; 0x28
 8005f8a:	46bd      	mov	sp, r7
 8005f8c:	bd80      	pop	{r7, pc}
 8005f8e:	bf00      	nop
 8005f90:	09896800 	.word	0x09896800
 8005f94:	04c4b400 	.word	0x04c4b400

08005f98 <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8005f98:	b480      	push	{r7}
 8005f9a:	b083      	sub	sp, #12
 8005f9c:	af00      	add	r7, sp, #0
 8005f9e:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_DMAUnderrunCallbackCh2 could be implemented in the user file
   */
}
 8005fa0:	bf00      	nop
 8005fa2:	370c      	adds	r7, #12
 8005fa4:	46bd      	mov	sp, r7
 8005fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005faa:	4770      	bx	lr

08005fac <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8005fac:	b480      	push	{r7}
 8005fae:	b085      	sub	sp, #20
 8005fb0:	af00      	add	r7, sp, #0
 8005fb2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005fb4:	2300      	movs	r3, #0
 8005fb6:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8005fbe:	b2db      	uxtb	r3, r3
 8005fc0:	2b02      	cmp	r3, #2
 8005fc2:	d005      	beq.n	8005fd0 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	2204      	movs	r2, #4
 8005fc8:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8005fca:	2301      	movs	r3, #1
 8005fcc:	73fb      	strb	r3, [r7, #15]
 8005fce:	e037      	b.n	8006040 <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	681a      	ldr	r2, [r3, #0]
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	f022 020e 	bic.w	r2, r2, #14
 8005fde:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005fe4:	681a      	ldr	r2, [r3, #0]
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005fea:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005fee:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	681a      	ldr	r2, [r3, #0]
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	f022 0201 	bic.w	r2, r2, #1
 8005ffe:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006004:	f003 021f 	and.w	r2, r3, #31
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800600c:	2101      	movs	r1, #1
 800600e:	fa01 f202 	lsl.w	r2, r1, r2
 8006012:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006018:	687a      	ldr	r2, [r7, #4]
 800601a:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800601c:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006022:	2b00      	cmp	r3, #0
 8006024:	d00c      	beq.n	8006040 <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800602a:	681a      	ldr	r2, [r3, #0]
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006030:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006034:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800603a:	687a      	ldr	r2, [r7, #4]
 800603c:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800603e:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	2201      	movs	r2, #1
 8006044:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	2200      	movs	r2, #0
 800604c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
 8006050:	7bfb      	ldrb	r3, [r7, #15]
}
 8006052:	4618      	mov	r0, r3
 8006054:	3714      	adds	r7, #20
 8006056:	46bd      	mov	sp, r7
 8006058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800605c:	4770      	bx	lr

0800605e <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800605e:	b580      	push	{r7, lr}
 8006060:	b084      	sub	sp, #16
 8006062:	af00      	add	r7, sp, #0
 8006064:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006066:	2300      	movs	r3, #0
 8006068:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8006070:	b2db      	uxtb	r3, r3
 8006072:	2b02      	cmp	r3, #2
 8006074:	d00d      	beq.n	8006092 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	2204      	movs	r2, #4
 800607a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	2201      	movs	r2, #1
 8006080:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	2200      	movs	r2, #0
 8006088:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    status = HAL_ERROR;
 800608c:	2301      	movs	r3, #1
 800608e:	73fb      	strb	r3, [r7, #15]
 8006090:	e047      	b.n	8006122 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	681a      	ldr	r2, [r3, #0]
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	f022 020e 	bic.w	r2, r2, #14
 80060a0:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	681a      	ldr	r2, [r3, #0]
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	f022 0201 	bic.w	r2, r2, #1
 80060b0:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80060b6:	681a      	ldr	r2, [r3, #0]
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80060bc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80060c0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80060c6:	f003 021f 	and.w	r2, r3, #31
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060ce:	2101      	movs	r1, #1
 80060d0:	fa01 f202 	lsl.w	r2, r1, r2
 80060d4:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80060da:	687a      	ldr	r2, [r7, #4]
 80060dc:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80060de:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	d00c      	beq.n	8006102 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80060ec:	681a      	ldr	r2, [r3, #0]
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80060f2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80060f6:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80060fc:	687a      	ldr	r2, [r7, #4]
 80060fe:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8006100:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	2201      	movs	r2, #1
 8006106:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	2200      	movs	r2, #0
 800610e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006116:	2b00      	cmp	r3, #0
 8006118:	d003      	beq.n	8006122 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800611e:	6878      	ldr	r0, [r7, #4]
 8006120:	4798      	blx	r3
    }
  }
  return status;
 8006122:	7bfb      	ldrb	r3, [r7, #15]
}
 8006124:	4618      	mov	r0, r3
 8006126:	3710      	adds	r7, #16
 8006128:	46bd      	mov	sp, r7
 800612a:	bd80      	pop	{r7, pc}

0800612c <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 800612c:	b580      	push	{r7, lr}
 800612e:	b084      	sub	sp, #16
 8006130:	af00      	add	r7, sp, #0
 8006132:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	2b00      	cmp	r3, #0
 8006138:	d101      	bne.n	800613e <HAL_FDCAN_Init+0x12>
  {
    return HAL_ERROR;
 800613a:	2301      	movs	r3, #1
 800613c:	e147      	b.n	80063ce <HAL_FDCAN_Init+0x2a2>

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8006144:	b2db      	uxtb	r3, r3
 8006146:	2b00      	cmp	r3, #0
 8006148:	d106      	bne.n	8006158 <HAL_FDCAN_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	2200      	movs	r2, #0
 800614e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 8006152:	6878      	ldr	r0, [r7, #4]
 8006154:	f7fc fbae 	bl	80028b4 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	699a      	ldr	r2, [r3, #24]
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	f022 0210 	bic.w	r2, r2, #16
 8006166:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006168:	f7fd f8ec 	bl	8003344 <HAL_GetTick>
 800616c:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 800616e:	e012      	b.n	8006196 <HAL_FDCAN_Init+0x6a>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8006170:	f7fd f8e8 	bl	8003344 <HAL_GetTick>
 8006174:	4602      	mov	r2, r0
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	1ad3      	subs	r3, r2, r3
 800617a:	2b0a      	cmp	r3, #10
 800617c:	d90b      	bls.n	8006196 <HAL_FDCAN_Init+0x6a>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006182:	f043 0201 	orr.w	r2, r3, #1
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	661a      	str	r2, [r3, #96]	; 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	2203      	movs	r2, #3
 800618e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 8006192:	2301      	movs	r3, #1
 8006194:	e11b      	b.n	80063ce <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	699b      	ldr	r3, [r3, #24]
 800619c:	f003 0308 	and.w	r3, r3, #8
 80061a0:	2b08      	cmp	r3, #8
 80061a2:	d0e5      	beq.n	8006170 <HAL_FDCAN_Init+0x44>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	699a      	ldr	r2, [r3, #24]
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	f042 0201 	orr.w	r2, r2, #1
 80061b2:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 80061b4:	f7fd f8c6 	bl	8003344 <HAL_GetTick>
 80061b8:	60f8      	str	r0, [r7, #12]

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 80061ba:	e012      	b.n	80061e2 <HAL_FDCAN_Init+0xb6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 80061bc:	f7fd f8c2 	bl	8003344 <HAL_GetTick>
 80061c0:	4602      	mov	r2, r0
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	1ad3      	subs	r3, r2, r3
 80061c6:	2b0a      	cmp	r3, #10
 80061c8:	d90b      	bls.n	80061e2 <HAL_FDCAN_Init+0xb6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80061ce:	f043 0201 	orr.w	r2, r3, #1
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	661a      	str	r2, [r3, #96]	; 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	2203      	movs	r2, #3
 80061da:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 80061de:	2301      	movs	r3, #1
 80061e0:	e0f5      	b.n	80063ce <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	699b      	ldr	r3, [r3, #24]
 80061e8:	f003 0301 	and.w	r3, r3, #1
 80061ec:	2b00      	cmp	r3, #0
 80061ee:	d0e5      	beq.n	80061bc <HAL_FDCAN_Init+0x90>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	699a      	ldr	r2, [r3, #24]
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	f042 0202 	orr.w	r2, r2, #2
 80061fe:	619a      	str	r2, [r3, #24]

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	4a74      	ldr	r2, [pc, #464]	; (80063d8 <HAL_FDCAN_Init+0x2ac>)
 8006206:	4293      	cmp	r3, r2
 8006208:	d103      	bne.n	8006212 <HAL_FDCAN_Init+0xe6>
  {
    /* Configure Clock divider */
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 800620a:	4a74      	ldr	r2, [pc, #464]	; (80063dc <HAL_FDCAN_Init+0x2b0>)
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	685b      	ldr	r3, [r3, #4]
 8006210:	6013      	str	r3, [r2, #0]
  }

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	7c1b      	ldrb	r3, [r3, #16]
 8006216:	2b01      	cmp	r3, #1
 8006218:	d108      	bne.n	800622c <HAL_FDCAN_Init+0x100>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	699a      	ldr	r2, [r3, #24]
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006228:	619a      	str	r2, [r3, #24]
 800622a:	e007      	b.n	800623c <HAL_FDCAN_Init+0x110>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	699a      	ldr	r2, [r3, #24]
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800623a:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	7c5b      	ldrb	r3, [r3, #17]
 8006240:	2b01      	cmp	r3, #1
 8006242:	d108      	bne.n	8006256 <HAL_FDCAN_Init+0x12a>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	699a      	ldr	r2, [r3, #24]
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006252:	619a      	str	r2, [r3, #24]
 8006254:	e007      	b.n	8006266 <HAL_FDCAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	699a      	ldr	r2, [r3, #24]
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8006264:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	7c9b      	ldrb	r3, [r3, #18]
 800626a:	2b01      	cmp	r3, #1
 800626c:	d108      	bne.n	8006280 <HAL_FDCAN_Init+0x154>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	699a      	ldr	r2, [r3, #24]
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800627c:	619a      	str	r2, [r3, #24]
 800627e:	e007      	b.n	8006290 <HAL_FDCAN_Init+0x164>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	699a      	ldr	r2, [r3, #24]
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800628e:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	699b      	ldr	r3, [r3, #24]
 8006296:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	689a      	ldr	r2, [r3, #8]
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	430a      	orrs	r2, r1
 80062a4:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	699a      	ldr	r2, [r3, #24]
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 80062b4:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	691a      	ldr	r2, [r3, #16]
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	f022 0210 	bic.w	r2, r2, #16
 80062c4:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	68db      	ldr	r3, [r3, #12]
 80062ca:	2b01      	cmp	r3, #1
 80062cc:	d108      	bne.n	80062e0 <HAL_FDCAN_Init+0x1b4>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	699a      	ldr	r2, [r3, #24]
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	f042 0204 	orr.w	r2, r2, #4
 80062dc:	619a      	str	r2, [r3, #24]
 80062de:	e02c      	b.n	800633a <HAL_FDCAN_Init+0x20e>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	68db      	ldr	r3, [r3, #12]
 80062e4:	2b00      	cmp	r3, #0
 80062e6:	d028      	beq.n	800633a <HAL_FDCAN_Init+0x20e>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	68db      	ldr	r3, [r3, #12]
 80062ec:	2b02      	cmp	r3, #2
 80062ee:	d01c      	beq.n	800632a <HAL_FDCAN_Init+0x1fe>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	699a      	ldr	r2, [r3, #24]
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80062fe:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	691a      	ldr	r2, [r3, #16]
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	f042 0210 	orr.w	r2, r2, #16
 800630e:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	68db      	ldr	r3, [r3, #12]
 8006314:	2b03      	cmp	r3, #3
 8006316:	d110      	bne.n	800633a <HAL_FDCAN_Init+0x20e>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	699a      	ldr	r2, [r3, #24]
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	f042 0220 	orr.w	r2, r2, #32
 8006326:	619a      	str	r2, [r3, #24]
 8006328:	e007      	b.n	800633a <HAL_FDCAN_Init+0x20e>
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	699a      	ldr	r2, [r3, #24]
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	f042 0220 	orr.w	r2, r2, #32
 8006338:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	699b      	ldr	r3, [r3, #24]
 800633e:	3b01      	subs	r3, #1
 8006340:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	69db      	ldr	r3, [r3, #28]
 8006346:	3b01      	subs	r3, #1
 8006348:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800634a:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	6a1b      	ldr	r3, [r3, #32]
 8006350:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8006352:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	695b      	ldr	r3, [r3, #20]
 800635a:	3b01      	subs	r3, #1
 800635c:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8006362:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8006364:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	689b      	ldr	r3, [r3, #8]
 800636a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800636e:	d115      	bne.n	800639c <HAL_FDCAN_Init+0x270>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006374:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800637a:	3b01      	subs	r3, #1
 800637c:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 800637e:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006384:	3b01      	subs	r3, #1
 8006386:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8006388:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006390:	3b01      	subs	r3, #1
 8006392:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8006398:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 800639a:	60da      	str	r2, [r3, #12]
  }

  /* Select between Tx FIFO and Tx Queue operation modes */
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	430a      	orrs	r2, r1
 80063ae:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Calculate each RAM block address */
  FDCAN_CalcultateRamBlockAddresses(hfdcan);
 80063b2:	6878      	ldr	r0, [r7, #4]
 80063b4:	f000 f814 	bl	80063e0 <FDCAN_CalcultateRamBlockAddresses>

  /* Initialize the Latest Tx request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	2200      	movs	r2, #0
 80063bc:	659a      	str	r2, [r3, #88]	; 0x58

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	2200      	movs	r2, #0
 80063c2:	661a      	str	r2, [r3, #96]	; 0x60

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	2201      	movs	r2, #1
 80063c8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Return function status */
  return HAL_OK;
 80063cc:	2300      	movs	r3, #0
}
 80063ce:	4618      	mov	r0, r3
 80063d0:	3710      	adds	r7, #16
 80063d2:	46bd      	mov	sp, r7
 80063d4:	bd80      	pop	{r7, pc}
 80063d6:	bf00      	nop
 80063d8:	40006400 	.word	0x40006400
 80063dc:	40006500 	.word	0x40006500

080063e0 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval none
 */
static void FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 80063e0:	b480      	push	{r7}
 80063e2:	b085      	sub	sp, #20
 80063e4:	af00      	add	r7, sp, #0
 80063e6:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
 80063e8:	4b27      	ldr	r3, [pc, #156]	; (8006488 <FDCAN_CalcultateRamBlockAddresses+0xa8>)
 80063ea:	60bb      	str	r3, [r7, #8]
    SramCanInstanceBase += SRAMCAN_SIZE * 2U;
  }
#endif /* FDCAN3 */

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	68ba      	ldr	r2, [r7, #8]
 80063f0:	641a      	str	r2, [r3, #64]	; 0x40

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80063fa:	f423 11f8 	bic.w	r1, r3, #2031616	; 0x1f0000
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006402:	041a      	lsls	r2, r3, #16
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	430a      	orrs	r2, r1
 800640a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 800640e:	68bb      	ldr	r3, [r7, #8]
 8006410:	f103 0270 	add.w	r2, r3, #112	; 0x70
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	645a      	str	r2, [r3, #68]	; 0x44

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006420:	f023 6170 	bic.w	r1, r3, #251658240	; 0xf000000
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006428:	061a      	lsls	r2, r3, #24
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	430a      	orrs	r2, r1
 8006430:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 8006434:	68bb      	ldr	r3, [r7, #8]
 8006436:	f103 02b0 	add.w	r2, r3, #176	; 0xb0
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	649a      	str	r2, [r3, #72]	; 0x48

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 800643e:	68bb      	ldr	r3, [r7, #8]
 8006440:	f503 72c4 	add.w	r2, r3, #392	; 0x188
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 8006448:	68bb      	ldr	r3, [r7, #8]
 800644a:	f503 7218 	add.w	r2, r3, #608	; 0x260
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	651a      	str	r2, [r3, #80]	; 0x50

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 8006452:	68bb      	ldr	r3, [r7, #8]
 8006454:	f503 721e 	add.w	r2, r3, #632	; 0x278
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 800645c:	68bb      	ldr	r3, [r7, #8]
 800645e:	60fb      	str	r3, [r7, #12]
 8006460:	e005      	b.n	800646e <FDCAN_CalcultateRamBlockAddresses+0x8e>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	2200      	movs	r2, #0
 8006466:	601a      	str	r2, [r3, #0]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	3304      	adds	r3, #4
 800646c:	60fb      	str	r3, [r7, #12]
 800646e:	68bb      	ldr	r3, [r7, #8]
 8006470:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8006474:	68fa      	ldr	r2, [r7, #12]
 8006476:	429a      	cmp	r2, r3
 8006478:	d3f3      	bcc.n	8006462 <FDCAN_CalcultateRamBlockAddresses+0x82>
  }
}
 800647a:	bf00      	nop
 800647c:	bf00      	nop
 800647e:	3714      	adds	r7, #20
 8006480:	46bd      	mov	sp, r7
 8006482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006486:	4770      	bx	lr
 8006488:	4000a400 	.word	0x4000a400

0800648c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800648c:	b480      	push	{r7}
 800648e:	b087      	sub	sp, #28
 8006490:	af00      	add	r7, sp, #0
 8006492:	6078      	str	r0, [r7, #4]
 8006494:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8006496:	2300      	movs	r3, #0
 8006498:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 800649a:	e15a      	b.n	8006752 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800649c:	683b      	ldr	r3, [r7, #0]
 800649e:	681a      	ldr	r2, [r3, #0]
 80064a0:	2101      	movs	r1, #1
 80064a2:	697b      	ldr	r3, [r7, #20]
 80064a4:	fa01 f303 	lsl.w	r3, r1, r3
 80064a8:	4013      	ands	r3, r2
 80064aa:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	f000 814c 	beq.w	800674c <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80064b4:	683b      	ldr	r3, [r7, #0]
 80064b6:	685b      	ldr	r3, [r3, #4]
 80064b8:	f003 0303 	and.w	r3, r3, #3
 80064bc:	2b01      	cmp	r3, #1
 80064be:	d005      	beq.n	80064cc <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80064c0:	683b      	ldr	r3, [r7, #0]
 80064c2:	685b      	ldr	r3, [r3, #4]
 80064c4:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80064c8:	2b02      	cmp	r3, #2
 80064ca:	d130      	bne.n	800652e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	689b      	ldr	r3, [r3, #8]
 80064d0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80064d2:	697b      	ldr	r3, [r7, #20]
 80064d4:	005b      	lsls	r3, r3, #1
 80064d6:	2203      	movs	r2, #3
 80064d8:	fa02 f303 	lsl.w	r3, r2, r3
 80064dc:	43db      	mvns	r3, r3
 80064de:	693a      	ldr	r2, [r7, #16]
 80064e0:	4013      	ands	r3, r2
 80064e2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80064e4:	683b      	ldr	r3, [r7, #0]
 80064e6:	68da      	ldr	r2, [r3, #12]
 80064e8:	697b      	ldr	r3, [r7, #20]
 80064ea:	005b      	lsls	r3, r3, #1
 80064ec:	fa02 f303 	lsl.w	r3, r2, r3
 80064f0:	693a      	ldr	r2, [r7, #16]
 80064f2:	4313      	orrs	r3, r2
 80064f4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	693a      	ldr	r2, [r7, #16]
 80064fa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	685b      	ldr	r3, [r3, #4]
 8006500:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8006502:	2201      	movs	r2, #1
 8006504:	697b      	ldr	r3, [r7, #20]
 8006506:	fa02 f303 	lsl.w	r3, r2, r3
 800650a:	43db      	mvns	r3, r3
 800650c:	693a      	ldr	r2, [r7, #16]
 800650e:	4013      	ands	r3, r2
 8006510:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8006512:	683b      	ldr	r3, [r7, #0]
 8006514:	685b      	ldr	r3, [r3, #4]
 8006516:	091b      	lsrs	r3, r3, #4
 8006518:	f003 0201 	and.w	r2, r3, #1
 800651c:	697b      	ldr	r3, [r7, #20]
 800651e:	fa02 f303 	lsl.w	r3, r2, r3
 8006522:	693a      	ldr	r2, [r7, #16]
 8006524:	4313      	orrs	r3, r2
 8006526:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	693a      	ldr	r2, [r7, #16]
 800652c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800652e:	683b      	ldr	r3, [r7, #0]
 8006530:	685b      	ldr	r3, [r3, #4]
 8006532:	f003 0303 	and.w	r3, r3, #3
 8006536:	2b03      	cmp	r3, #3
 8006538:	d017      	beq.n	800656a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	68db      	ldr	r3, [r3, #12]
 800653e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8006540:	697b      	ldr	r3, [r7, #20]
 8006542:	005b      	lsls	r3, r3, #1
 8006544:	2203      	movs	r2, #3
 8006546:	fa02 f303 	lsl.w	r3, r2, r3
 800654a:	43db      	mvns	r3, r3
 800654c:	693a      	ldr	r2, [r7, #16]
 800654e:	4013      	ands	r3, r2
 8006550:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006552:	683b      	ldr	r3, [r7, #0]
 8006554:	689a      	ldr	r2, [r3, #8]
 8006556:	697b      	ldr	r3, [r7, #20]
 8006558:	005b      	lsls	r3, r3, #1
 800655a:	fa02 f303 	lsl.w	r3, r2, r3
 800655e:	693a      	ldr	r2, [r7, #16]
 8006560:	4313      	orrs	r3, r2
 8006562:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	693a      	ldr	r2, [r7, #16]
 8006568:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800656a:	683b      	ldr	r3, [r7, #0]
 800656c:	685b      	ldr	r3, [r3, #4]
 800656e:	f003 0303 	and.w	r3, r3, #3
 8006572:	2b02      	cmp	r3, #2
 8006574:	d123      	bne.n	80065be <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8006576:	697b      	ldr	r3, [r7, #20]
 8006578:	08da      	lsrs	r2, r3, #3
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	3208      	adds	r2, #8
 800657e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006582:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8006584:	697b      	ldr	r3, [r7, #20]
 8006586:	f003 0307 	and.w	r3, r3, #7
 800658a:	009b      	lsls	r3, r3, #2
 800658c:	220f      	movs	r2, #15
 800658e:	fa02 f303 	lsl.w	r3, r2, r3
 8006592:	43db      	mvns	r3, r3
 8006594:	693a      	ldr	r2, [r7, #16]
 8006596:	4013      	ands	r3, r2
 8006598:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800659a:	683b      	ldr	r3, [r7, #0]
 800659c:	691a      	ldr	r2, [r3, #16]
 800659e:	697b      	ldr	r3, [r7, #20]
 80065a0:	f003 0307 	and.w	r3, r3, #7
 80065a4:	009b      	lsls	r3, r3, #2
 80065a6:	fa02 f303 	lsl.w	r3, r2, r3
 80065aa:	693a      	ldr	r2, [r7, #16]
 80065ac:	4313      	orrs	r3, r2
 80065ae:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80065b0:	697b      	ldr	r3, [r7, #20]
 80065b2:	08da      	lsrs	r2, r3, #3
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	3208      	adds	r2, #8
 80065b8:	6939      	ldr	r1, [r7, #16]
 80065ba:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80065c4:	697b      	ldr	r3, [r7, #20]
 80065c6:	005b      	lsls	r3, r3, #1
 80065c8:	2203      	movs	r2, #3
 80065ca:	fa02 f303 	lsl.w	r3, r2, r3
 80065ce:	43db      	mvns	r3, r3
 80065d0:	693a      	ldr	r2, [r7, #16]
 80065d2:	4013      	ands	r3, r2
 80065d4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80065d6:	683b      	ldr	r3, [r7, #0]
 80065d8:	685b      	ldr	r3, [r3, #4]
 80065da:	f003 0203 	and.w	r2, r3, #3
 80065de:	697b      	ldr	r3, [r7, #20]
 80065e0:	005b      	lsls	r3, r3, #1
 80065e2:	fa02 f303 	lsl.w	r3, r2, r3
 80065e6:	693a      	ldr	r2, [r7, #16]
 80065e8:	4313      	orrs	r3, r2
 80065ea:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	693a      	ldr	r2, [r7, #16]
 80065f0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80065f2:	683b      	ldr	r3, [r7, #0]
 80065f4:	685b      	ldr	r3, [r3, #4]
 80065f6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	f000 80a6 	beq.w	800674c <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006600:	4b5b      	ldr	r3, [pc, #364]	; (8006770 <HAL_GPIO_Init+0x2e4>)
 8006602:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006604:	4a5a      	ldr	r2, [pc, #360]	; (8006770 <HAL_GPIO_Init+0x2e4>)
 8006606:	f043 0301 	orr.w	r3, r3, #1
 800660a:	6613      	str	r3, [r2, #96]	; 0x60
 800660c:	4b58      	ldr	r3, [pc, #352]	; (8006770 <HAL_GPIO_Init+0x2e4>)
 800660e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006610:	f003 0301 	and.w	r3, r3, #1
 8006614:	60bb      	str	r3, [r7, #8]
 8006616:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8006618:	4a56      	ldr	r2, [pc, #344]	; (8006774 <HAL_GPIO_Init+0x2e8>)
 800661a:	697b      	ldr	r3, [r7, #20]
 800661c:	089b      	lsrs	r3, r3, #2
 800661e:	3302      	adds	r3, #2
 8006620:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006624:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8006626:	697b      	ldr	r3, [r7, #20]
 8006628:	f003 0303 	and.w	r3, r3, #3
 800662c:	009b      	lsls	r3, r3, #2
 800662e:	220f      	movs	r2, #15
 8006630:	fa02 f303 	lsl.w	r3, r2, r3
 8006634:	43db      	mvns	r3, r3
 8006636:	693a      	ldr	r2, [r7, #16]
 8006638:	4013      	ands	r3, r2
 800663a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8006642:	d01f      	beq.n	8006684 <HAL_GPIO_Init+0x1f8>
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	4a4c      	ldr	r2, [pc, #304]	; (8006778 <HAL_GPIO_Init+0x2ec>)
 8006648:	4293      	cmp	r3, r2
 800664a:	d019      	beq.n	8006680 <HAL_GPIO_Init+0x1f4>
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	4a4b      	ldr	r2, [pc, #300]	; (800677c <HAL_GPIO_Init+0x2f0>)
 8006650:	4293      	cmp	r3, r2
 8006652:	d013      	beq.n	800667c <HAL_GPIO_Init+0x1f0>
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	4a4a      	ldr	r2, [pc, #296]	; (8006780 <HAL_GPIO_Init+0x2f4>)
 8006658:	4293      	cmp	r3, r2
 800665a:	d00d      	beq.n	8006678 <HAL_GPIO_Init+0x1ec>
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	4a49      	ldr	r2, [pc, #292]	; (8006784 <HAL_GPIO_Init+0x2f8>)
 8006660:	4293      	cmp	r3, r2
 8006662:	d007      	beq.n	8006674 <HAL_GPIO_Init+0x1e8>
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	4a48      	ldr	r2, [pc, #288]	; (8006788 <HAL_GPIO_Init+0x2fc>)
 8006668:	4293      	cmp	r3, r2
 800666a:	d101      	bne.n	8006670 <HAL_GPIO_Init+0x1e4>
 800666c:	2305      	movs	r3, #5
 800666e:	e00a      	b.n	8006686 <HAL_GPIO_Init+0x1fa>
 8006670:	2306      	movs	r3, #6
 8006672:	e008      	b.n	8006686 <HAL_GPIO_Init+0x1fa>
 8006674:	2304      	movs	r3, #4
 8006676:	e006      	b.n	8006686 <HAL_GPIO_Init+0x1fa>
 8006678:	2303      	movs	r3, #3
 800667a:	e004      	b.n	8006686 <HAL_GPIO_Init+0x1fa>
 800667c:	2302      	movs	r3, #2
 800667e:	e002      	b.n	8006686 <HAL_GPIO_Init+0x1fa>
 8006680:	2301      	movs	r3, #1
 8006682:	e000      	b.n	8006686 <HAL_GPIO_Init+0x1fa>
 8006684:	2300      	movs	r3, #0
 8006686:	697a      	ldr	r2, [r7, #20]
 8006688:	f002 0203 	and.w	r2, r2, #3
 800668c:	0092      	lsls	r2, r2, #2
 800668e:	4093      	lsls	r3, r2
 8006690:	693a      	ldr	r2, [r7, #16]
 8006692:	4313      	orrs	r3, r2
 8006694:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8006696:	4937      	ldr	r1, [pc, #220]	; (8006774 <HAL_GPIO_Init+0x2e8>)
 8006698:	697b      	ldr	r3, [r7, #20]
 800669a:	089b      	lsrs	r3, r3, #2
 800669c:	3302      	adds	r3, #2
 800669e:	693a      	ldr	r2, [r7, #16]
 80066a0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80066a4:	4b39      	ldr	r3, [pc, #228]	; (800678c <HAL_GPIO_Init+0x300>)
 80066a6:	689b      	ldr	r3, [r3, #8]
 80066a8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80066aa:	68fb      	ldr	r3, [r7, #12]
 80066ac:	43db      	mvns	r3, r3
 80066ae:	693a      	ldr	r2, [r7, #16]
 80066b0:	4013      	ands	r3, r2
 80066b2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80066b4:	683b      	ldr	r3, [r7, #0]
 80066b6:	685b      	ldr	r3, [r3, #4]
 80066b8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80066bc:	2b00      	cmp	r3, #0
 80066be:	d003      	beq.n	80066c8 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 80066c0:	693a      	ldr	r2, [r7, #16]
 80066c2:	68fb      	ldr	r3, [r7, #12]
 80066c4:	4313      	orrs	r3, r2
 80066c6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80066c8:	4a30      	ldr	r2, [pc, #192]	; (800678c <HAL_GPIO_Init+0x300>)
 80066ca:	693b      	ldr	r3, [r7, #16]
 80066cc:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80066ce:	4b2f      	ldr	r3, [pc, #188]	; (800678c <HAL_GPIO_Init+0x300>)
 80066d0:	68db      	ldr	r3, [r3, #12]
 80066d2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	43db      	mvns	r3, r3
 80066d8:	693a      	ldr	r2, [r7, #16]
 80066da:	4013      	ands	r3, r2
 80066dc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80066de:	683b      	ldr	r3, [r7, #0]
 80066e0:	685b      	ldr	r3, [r3, #4]
 80066e2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	d003      	beq.n	80066f2 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80066ea:	693a      	ldr	r2, [r7, #16]
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	4313      	orrs	r3, r2
 80066f0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80066f2:	4a26      	ldr	r2, [pc, #152]	; (800678c <HAL_GPIO_Init+0x300>)
 80066f4:	693b      	ldr	r3, [r7, #16]
 80066f6:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 80066f8:	4b24      	ldr	r3, [pc, #144]	; (800678c <HAL_GPIO_Init+0x300>)
 80066fa:	685b      	ldr	r3, [r3, #4]
 80066fc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80066fe:	68fb      	ldr	r3, [r7, #12]
 8006700:	43db      	mvns	r3, r3
 8006702:	693a      	ldr	r2, [r7, #16]
 8006704:	4013      	ands	r3, r2
 8006706:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8006708:	683b      	ldr	r3, [r7, #0]
 800670a:	685b      	ldr	r3, [r3, #4]
 800670c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006710:	2b00      	cmp	r3, #0
 8006712:	d003      	beq.n	800671c <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8006714:	693a      	ldr	r2, [r7, #16]
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	4313      	orrs	r3, r2
 800671a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800671c:	4a1b      	ldr	r2, [pc, #108]	; (800678c <HAL_GPIO_Init+0x300>)
 800671e:	693b      	ldr	r3, [r7, #16]
 8006720:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8006722:	4b1a      	ldr	r3, [pc, #104]	; (800678c <HAL_GPIO_Init+0x300>)
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	43db      	mvns	r3, r3
 800672c:	693a      	ldr	r2, [r7, #16]
 800672e:	4013      	ands	r3, r2
 8006730:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8006732:	683b      	ldr	r3, [r7, #0]
 8006734:	685b      	ldr	r3, [r3, #4]
 8006736:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800673a:	2b00      	cmp	r3, #0
 800673c:	d003      	beq.n	8006746 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800673e:	693a      	ldr	r2, [r7, #16]
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	4313      	orrs	r3, r2
 8006744:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8006746:	4a11      	ldr	r2, [pc, #68]	; (800678c <HAL_GPIO_Init+0x300>)
 8006748:	693b      	ldr	r3, [r7, #16]
 800674a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800674c:	697b      	ldr	r3, [r7, #20]
 800674e:	3301      	adds	r3, #1
 8006750:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8006752:	683b      	ldr	r3, [r7, #0]
 8006754:	681a      	ldr	r2, [r3, #0]
 8006756:	697b      	ldr	r3, [r7, #20]
 8006758:	fa22 f303 	lsr.w	r3, r2, r3
 800675c:	2b00      	cmp	r3, #0
 800675e:	f47f ae9d 	bne.w	800649c <HAL_GPIO_Init+0x10>
  }
}
 8006762:	bf00      	nop
 8006764:	bf00      	nop
 8006766:	371c      	adds	r7, #28
 8006768:	46bd      	mov	sp, r7
 800676a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800676e:	4770      	bx	lr
 8006770:	40021000 	.word	0x40021000
 8006774:	40010000 	.word	0x40010000
 8006778:	48000400 	.word	0x48000400
 800677c:	48000800 	.word	0x48000800
 8006780:	48000c00 	.word	0x48000c00
 8006784:	48001000 	.word	0x48001000
 8006788:	48001400 	.word	0x48001400
 800678c:	40010400 	.word	0x40010400

08006790 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006790:	b480      	push	{r7}
 8006792:	b083      	sub	sp, #12
 8006794:	af00      	add	r7, sp, #0
 8006796:	6078      	str	r0, [r7, #4]
 8006798:	460b      	mov	r3, r1
 800679a:	807b      	strh	r3, [r7, #2]
 800679c:	4613      	mov	r3, r2
 800679e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80067a0:	787b      	ldrb	r3, [r7, #1]
 80067a2:	2b00      	cmp	r3, #0
 80067a4:	d003      	beq.n	80067ae <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80067a6:	887a      	ldrh	r2, [r7, #2]
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80067ac:	e002      	b.n	80067b4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80067ae:	887a      	ldrh	r2, [r7, #2]
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	629a      	str	r2, [r3, #40]	; 0x28
}
 80067b4:	bf00      	nop
 80067b6:	370c      	adds	r7, #12
 80067b8:	46bd      	mov	sp, r7
 80067ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067be:	4770      	bx	lr

080067c0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80067c0:	b580      	push	{r7, lr}
 80067c2:	b082      	sub	sp, #8
 80067c4:	af00      	add	r7, sp, #0
 80067c6:	4603      	mov	r3, r0
 80067c8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80067ca:	4b08      	ldr	r3, [pc, #32]	; (80067ec <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80067cc:	695a      	ldr	r2, [r3, #20]
 80067ce:	88fb      	ldrh	r3, [r7, #6]
 80067d0:	4013      	ands	r3, r2
 80067d2:	2b00      	cmp	r3, #0
 80067d4:	d006      	beq.n	80067e4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80067d6:	4a05      	ldr	r2, [pc, #20]	; (80067ec <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80067d8:	88fb      	ldrh	r3, [r7, #6]
 80067da:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80067dc:	88fb      	ldrh	r3, [r7, #6]
 80067de:	4618      	mov	r0, r3
 80067e0:	f000 f806 	bl	80067f0 <HAL_GPIO_EXTI_Callback>
  }
}
 80067e4:	bf00      	nop
 80067e6:	3708      	adds	r7, #8
 80067e8:	46bd      	mov	sp, r7
 80067ea:	bd80      	pop	{r7, pc}
 80067ec:	40010400 	.word	0x40010400

080067f0 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80067f0:	b480      	push	{r7}
 80067f2:	b083      	sub	sp, #12
 80067f4:	af00      	add	r7, sp, #0
 80067f6:	4603      	mov	r3, r0
 80067f8:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80067fa:	bf00      	nop
 80067fc:	370c      	adds	r7, #12
 80067fe:	46bd      	mov	sp, r7
 8006800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006804:	4770      	bx	lr
	...

08006808 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8006808:	b480      	push	{r7}
 800680a:	b085      	sub	sp, #20
 800680c:	af00      	add	r7, sp, #0
 800680e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	2b00      	cmp	r3, #0
 8006814:	d141      	bne.n	800689a <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8006816:	4b4b      	ldr	r3, [pc, #300]	; (8006944 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800681e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006822:	d131      	bne.n	8006888 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8006824:	4b47      	ldr	r3, [pc, #284]	; (8006944 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006826:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800682a:	4a46      	ldr	r2, [pc, #280]	; (8006944 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800682c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006830:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8006834:	4b43      	ldr	r3, [pc, #268]	; (8006944 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800683c:	4a41      	ldr	r2, [pc, #260]	; (8006944 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800683e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006842:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8006844:	4b40      	ldr	r3, [pc, #256]	; (8006948 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	2232      	movs	r2, #50	; 0x32
 800684a:	fb02 f303 	mul.w	r3, r2, r3
 800684e:	4a3f      	ldr	r2, [pc, #252]	; (800694c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8006850:	fba2 2303 	umull	r2, r3, r2, r3
 8006854:	0c9b      	lsrs	r3, r3, #18
 8006856:	3301      	adds	r3, #1
 8006858:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800685a:	e002      	b.n	8006862 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	3b01      	subs	r3, #1
 8006860:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006862:	4b38      	ldr	r3, [pc, #224]	; (8006944 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006864:	695b      	ldr	r3, [r3, #20]
 8006866:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800686a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800686e:	d102      	bne.n	8006876 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	2b00      	cmp	r3, #0
 8006874:	d1f2      	bne.n	800685c <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8006876:	4b33      	ldr	r3, [pc, #204]	; (8006944 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006878:	695b      	ldr	r3, [r3, #20]
 800687a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800687e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006882:	d158      	bne.n	8006936 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8006884:	2303      	movs	r3, #3
 8006886:	e057      	b.n	8006938 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8006888:	4b2e      	ldr	r3, [pc, #184]	; (8006944 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800688a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800688e:	4a2d      	ldr	r2, [pc, #180]	; (8006944 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006890:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006894:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8006898:	e04d      	b.n	8006936 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80068a0:	d141      	bne.n	8006926 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80068a2:	4b28      	ldr	r3, [pc, #160]	; (8006944 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80068aa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80068ae:	d131      	bne.n	8006914 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80068b0:	4b24      	ldr	r3, [pc, #144]	; (8006944 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80068b2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80068b6:	4a23      	ldr	r2, [pc, #140]	; (8006944 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80068b8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80068bc:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80068c0:	4b20      	ldr	r3, [pc, #128]	; (8006944 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80068c8:	4a1e      	ldr	r2, [pc, #120]	; (8006944 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80068ca:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80068ce:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80068d0:	4b1d      	ldr	r3, [pc, #116]	; (8006948 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	2232      	movs	r2, #50	; 0x32
 80068d6:	fb02 f303 	mul.w	r3, r2, r3
 80068da:	4a1c      	ldr	r2, [pc, #112]	; (800694c <HAL_PWREx_ControlVoltageScaling+0x144>)
 80068dc:	fba2 2303 	umull	r2, r3, r2, r3
 80068e0:	0c9b      	lsrs	r3, r3, #18
 80068e2:	3301      	adds	r3, #1
 80068e4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80068e6:	e002      	b.n	80068ee <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	3b01      	subs	r3, #1
 80068ec:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80068ee:	4b15      	ldr	r3, [pc, #84]	; (8006944 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80068f0:	695b      	ldr	r3, [r3, #20]
 80068f2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80068f6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80068fa:	d102      	bne.n	8006902 <HAL_PWREx_ControlVoltageScaling+0xfa>
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	2b00      	cmp	r3, #0
 8006900:	d1f2      	bne.n	80068e8 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8006902:	4b10      	ldr	r3, [pc, #64]	; (8006944 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006904:	695b      	ldr	r3, [r3, #20]
 8006906:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800690a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800690e:	d112      	bne.n	8006936 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8006910:	2303      	movs	r3, #3
 8006912:	e011      	b.n	8006938 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8006914:	4b0b      	ldr	r3, [pc, #44]	; (8006944 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006916:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800691a:	4a0a      	ldr	r2, [pc, #40]	; (8006944 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800691c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006920:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8006924:	e007      	b.n	8006936 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8006926:	4b07      	ldr	r3, [pc, #28]	; (8006944 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800692e:	4a05      	ldr	r2, [pc, #20]	; (8006944 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006930:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8006934:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8006936:	2300      	movs	r3, #0
}
 8006938:	4618      	mov	r0, r3
 800693a:	3714      	adds	r7, #20
 800693c:	46bd      	mov	sp, r7
 800693e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006942:	4770      	bx	lr
 8006944:	40007000 	.word	0x40007000
 8006948:	2000001c 	.word	0x2000001c
 800694c:	431bde83 	.word	0x431bde83

08006950 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8006950:	b480      	push	{r7}
 8006952:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8006954:	4b05      	ldr	r3, [pc, #20]	; (800696c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8006956:	689b      	ldr	r3, [r3, #8]
 8006958:	4a04      	ldr	r2, [pc, #16]	; (800696c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800695a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800695e:	6093      	str	r3, [r2, #8]
}
 8006960:	bf00      	nop
 8006962:	46bd      	mov	sp, r7
 8006964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006968:	4770      	bx	lr
 800696a:	bf00      	nop
 800696c:	40007000 	.word	0x40007000

08006970 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006970:	b580      	push	{r7, lr}
 8006972:	b088      	sub	sp, #32
 8006974:	af00      	add	r7, sp, #0
 8006976:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	2b00      	cmp	r3, #0
 800697c:	d101      	bne.n	8006982 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800697e:	2301      	movs	r3, #1
 8006980:	e306      	b.n	8006f90 <HAL_RCC_OscConfig+0x620>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	f003 0301 	and.w	r3, r3, #1
 800698a:	2b00      	cmp	r3, #0
 800698c:	d075      	beq.n	8006a7a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800698e:	4b97      	ldr	r3, [pc, #604]	; (8006bec <HAL_RCC_OscConfig+0x27c>)
 8006990:	689b      	ldr	r3, [r3, #8]
 8006992:	f003 030c 	and.w	r3, r3, #12
 8006996:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006998:	4b94      	ldr	r3, [pc, #592]	; (8006bec <HAL_RCC_OscConfig+0x27c>)
 800699a:	68db      	ldr	r3, [r3, #12]
 800699c:	f003 0303 	and.w	r3, r3, #3
 80069a0:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80069a2:	69bb      	ldr	r3, [r7, #24]
 80069a4:	2b0c      	cmp	r3, #12
 80069a6:	d102      	bne.n	80069ae <HAL_RCC_OscConfig+0x3e>
 80069a8:	697b      	ldr	r3, [r7, #20]
 80069aa:	2b03      	cmp	r3, #3
 80069ac:	d002      	beq.n	80069b4 <HAL_RCC_OscConfig+0x44>
 80069ae:	69bb      	ldr	r3, [r7, #24]
 80069b0:	2b08      	cmp	r3, #8
 80069b2:	d10b      	bne.n	80069cc <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80069b4:	4b8d      	ldr	r3, [pc, #564]	; (8006bec <HAL_RCC_OscConfig+0x27c>)
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80069bc:	2b00      	cmp	r3, #0
 80069be:	d05b      	beq.n	8006a78 <HAL_RCC_OscConfig+0x108>
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	685b      	ldr	r3, [r3, #4]
 80069c4:	2b00      	cmp	r3, #0
 80069c6:	d157      	bne.n	8006a78 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80069c8:	2301      	movs	r3, #1
 80069ca:	e2e1      	b.n	8006f90 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	685b      	ldr	r3, [r3, #4]
 80069d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80069d4:	d106      	bne.n	80069e4 <HAL_RCC_OscConfig+0x74>
 80069d6:	4b85      	ldr	r3, [pc, #532]	; (8006bec <HAL_RCC_OscConfig+0x27c>)
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	4a84      	ldr	r2, [pc, #528]	; (8006bec <HAL_RCC_OscConfig+0x27c>)
 80069dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80069e0:	6013      	str	r3, [r2, #0]
 80069e2:	e01d      	b.n	8006a20 <HAL_RCC_OscConfig+0xb0>
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	685b      	ldr	r3, [r3, #4]
 80069e8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80069ec:	d10c      	bne.n	8006a08 <HAL_RCC_OscConfig+0x98>
 80069ee:	4b7f      	ldr	r3, [pc, #508]	; (8006bec <HAL_RCC_OscConfig+0x27c>)
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	4a7e      	ldr	r2, [pc, #504]	; (8006bec <HAL_RCC_OscConfig+0x27c>)
 80069f4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80069f8:	6013      	str	r3, [r2, #0]
 80069fa:	4b7c      	ldr	r3, [pc, #496]	; (8006bec <HAL_RCC_OscConfig+0x27c>)
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	4a7b      	ldr	r2, [pc, #492]	; (8006bec <HAL_RCC_OscConfig+0x27c>)
 8006a00:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006a04:	6013      	str	r3, [r2, #0]
 8006a06:	e00b      	b.n	8006a20 <HAL_RCC_OscConfig+0xb0>
 8006a08:	4b78      	ldr	r3, [pc, #480]	; (8006bec <HAL_RCC_OscConfig+0x27c>)
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	4a77      	ldr	r2, [pc, #476]	; (8006bec <HAL_RCC_OscConfig+0x27c>)
 8006a0e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006a12:	6013      	str	r3, [r2, #0]
 8006a14:	4b75      	ldr	r3, [pc, #468]	; (8006bec <HAL_RCC_OscConfig+0x27c>)
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	4a74      	ldr	r2, [pc, #464]	; (8006bec <HAL_RCC_OscConfig+0x27c>)
 8006a1a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006a1e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	685b      	ldr	r3, [r3, #4]
 8006a24:	2b00      	cmp	r3, #0
 8006a26:	d013      	beq.n	8006a50 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006a28:	f7fc fc8c 	bl	8003344 <HAL_GetTick>
 8006a2c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006a2e:	e008      	b.n	8006a42 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006a30:	f7fc fc88 	bl	8003344 <HAL_GetTick>
 8006a34:	4602      	mov	r2, r0
 8006a36:	693b      	ldr	r3, [r7, #16]
 8006a38:	1ad3      	subs	r3, r2, r3
 8006a3a:	2b64      	cmp	r3, #100	; 0x64
 8006a3c:	d901      	bls.n	8006a42 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8006a3e:	2303      	movs	r3, #3
 8006a40:	e2a6      	b.n	8006f90 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006a42:	4b6a      	ldr	r3, [pc, #424]	; (8006bec <HAL_RCC_OscConfig+0x27c>)
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006a4a:	2b00      	cmp	r3, #0
 8006a4c:	d0f0      	beq.n	8006a30 <HAL_RCC_OscConfig+0xc0>
 8006a4e:	e014      	b.n	8006a7a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006a50:	f7fc fc78 	bl	8003344 <HAL_GetTick>
 8006a54:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8006a56:	e008      	b.n	8006a6a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006a58:	f7fc fc74 	bl	8003344 <HAL_GetTick>
 8006a5c:	4602      	mov	r2, r0
 8006a5e:	693b      	ldr	r3, [r7, #16]
 8006a60:	1ad3      	subs	r3, r2, r3
 8006a62:	2b64      	cmp	r3, #100	; 0x64
 8006a64:	d901      	bls.n	8006a6a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006a66:	2303      	movs	r3, #3
 8006a68:	e292      	b.n	8006f90 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8006a6a:	4b60      	ldr	r3, [pc, #384]	; (8006bec <HAL_RCC_OscConfig+0x27c>)
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006a72:	2b00      	cmp	r3, #0
 8006a74:	d1f0      	bne.n	8006a58 <HAL_RCC_OscConfig+0xe8>
 8006a76:	e000      	b.n	8006a7a <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006a78:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	f003 0302 	and.w	r3, r3, #2
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	d075      	beq.n	8006b72 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006a86:	4b59      	ldr	r3, [pc, #356]	; (8006bec <HAL_RCC_OscConfig+0x27c>)
 8006a88:	689b      	ldr	r3, [r3, #8]
 8006a8a:	f003 030c 	and.w	r3, r3, #12
 8006a8e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006a90:	4b56      	ldr	r3, [pc, #344]	; (8006bec <HAL_RCC_OscConfig+0x27c>)
 8006a92:	68db      	ldr	r3, [r3, #12]
 8006a94:	f003 0303 	and.w	r3, r3, #3
 8006a98:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8006a9a:	69bb      	ldr	r3, [r7, #24]
 8006a9c:	2b0c      	cmp	r3, #12
 8006a9e:	d102      	bne.n	8006aa6 <HAL_RCC_OscConfig+0x136>
 8006aa0:	697b      	ldr	r3, [r7, #20]
 8006aa2:	2b02      	cmp	r3, #2
 8006aa4:	d002      	beq.n	8006aac <HAL_RCC_OscConfig+0x13c>
 8006aa6:	69bb      	ldr	r3, [r7, #24]
 8006aa8:	2b04      	cmp	r3, #4
 8006aaa:	d11f      	bne.n	8006aec <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006aac:	4b4f      	ldr	r3, [pc, #316]	; (8006bec <HAL_RCC_OscConfig+0x27c>)
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006ab4:	2b00      	cmp	r3, #0
 8006ab6:	d005      	beq.n	8006ac4 <HAL_RCC_OscConfig+0x154>
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	68db      	ldr	r3, [r3, #12]
 8006abc:	2b00      	cmp	r3, #0
 8006abe:	d101      	bne.n	8006ac4 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8006ac0:	2301      	movs	r3, #1
 8006ac2:	e265      	b.n	8006f90 <HAL_RCC_OscConfig+0x620>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006ac4:	4b49      	ldr	r3, [pc, #292]	; (8006bec <HAL_RCC_OscConfig+0x27c>)
 8006ac6:	685b      	ldr	r3, [r3, #4]
 8006ac8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	691b      	ldr	r3, [r3, #16]
 8006ad0:	061b      	lsls	r3, r3, #24
 8006ad2:	4946      	ldr	r1, [pc, #280]	; (8006bec <HAL_RCC_OscConfig+0x27c>)
 8006ad4:	4313      	orrs	r3, r2
 8006ad6:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8006ad8:	4b45      	ldr	r3, [pc, #276]	; (8006bf0 <HAL_RCC_OscConfig+0x280>)
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	4618      	mov	r0, r3
 8006ade:	f7fc fbe5 	bl	80032ac <HAL_InitTick>
 8006ae2:	4603      	mov	r3, r0
 8006ae4:	2b00      	cmp	r3, #0
 8006ae6:	d043      	beq.n	8006b70 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8006ae8:	2301      	movs	r3, #1
 8006aea:	e251      	b.n	8006f90 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	68db      	ldr	r3, [r3, #12]
 8006af0:	2b00      	cmp	r3, #0
 8006af2:	d023      	beq.n	8006b3c <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006af4:	4b3d      	ldr	r3, [pc, #244]	; (8006bec <HAL_RCC_OscConfig+0x27c>)
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	4a3c      	ldr	r2, [pc, #240]	; (8006bec <HAL_RCC_OscConfig+0x27c>)
 8006afa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006afe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006b00:	f7fc fc20 	bl	8003344 <HAL_GetTick>
 8006b04:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006b06:	e008      	b.n	8006b1a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006b08:	f7fc fc1c 	bl	8003344 <HAL_GetTick>
 8006b0c:	4602      	mov	r2, r0
 8006b0e:	693b      	ldr	r3, [r7, #16]
 8006b10:	1ad3      	subs	r3, r2, r3
 8006b12:	2b02      	cmp	r3, #2
 8006b14:	d901      	bls.n	8006b1a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8006b16:	2303      	movs	r3, #3
 8006b18:	e23a      	b.n	8006f90 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006b1a:	4b34      	ldr	r3, [pc, #208]	; (8006bec <HAL_RCC_OscConfig+0x27c>)
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006b22:	2b00      	cmp	r3, #0
 8006b24:	d0f0      	beq.n	8006b08 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006b26:	4b31      	ldr	r3, [pc, #196]	; (8006bec <HAL_RCC_OscConfig+0x27c>)
 8006b28:	685b      	ldr	r3, [r3, #4]
 8006b2a:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	691b      	ldr	r3, [r3, #16]
 8006b32:	061b      	lsls	r3, r3, #24
 8006b34:	492d      	ldr	r1, [pc, #180]	; (8006bec <HAL_RCC_OscConfig+0x27c>)
 8006b36:	4313      	orrs	r3, r2
 8006b38:	604b      	str	r3, [r1, #4]
 8006b3a:	e01a      	b.n	8006b72 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006b3c:	4b2b      	ldr	r3, [pc, #172]	; (8006bec <HAL_RCC_OscConfig+0x27c>)
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	4a2a      	ldr	r2, [pc, #168]	; (8006bec <HAL_RCC_OscConfig+0x27c>)
 8006b42:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006b46:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006b48:	f7fc fbfc 	bl	8003344 <HAL_GetTick>
 8006b4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8006b4e:	e008      	b.n	8006b62 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006b50:	f7fc fbf8 	bl	8003344 <HAL_GetTick>
 8006b54:	4602      	mov	r2, r0
 8006b56:	693b      	ldr	r3, [r7, #16]
 8006b58:	1ad3      	subs	r3, r2, r3
 8006b5a:	2b02      	cmp	r3, #2
 8006b5c:	d901      	bls.n	8006b62 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8006b5e:	2303      	movs	r3, #3
 8006b60:	e216      	b.n	8006f90 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8006b62:	4b22      	ldr	r3, [pc, #136]	; (8006bec <HAL_RCC_OscConfig+0x27c>)
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	d1f0      	bne.n	8006b50 <HAL_RCC_OscConfig+0x1e0>
 8006b6e:	e000      	b.n	8006b72 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006b70:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	f003 0308 	and.w	r3, r3, #8
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	d041      	beq.n	8006c02 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	695b      	ldr	r3, [r3, #20]
 8006b82:	2b00      	cmp	r3, #0
 8006b84:	d01c      	beq.n	8006bc0 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006b86:	4b19      	ldr	r3, [pc, #100]	; (8006bec <HAL_RCC_OscConfig+0x27c>)
 8006b88:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006b8c:	4a17      	ldr	r2, [pc, #92]	; (8006bec <HAL_RCC_OscConfig+0x27c>)
 8006b8e:	f043 0301 	orr.w	r3, r3, #1
 8006b92:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006b96:	f7fc fbd5 	bl	8003344 <HAL_GetTick>
 8006b9a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8006b9c:	e008      	b.n	8006bb0 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006b9e:	f7fc fbd1 	bl	8003344 <HAL_GetTick>
 8006ba2:	4602      	mov	r2, r0
 8006ba4:	693b      	ldr	r3, [r7, #16]
 8006ba6:	1ad3      	subs	r3, r2, r3
 8006ba8:	2b02      	cmp	r3, #2
 8006baa:	d901      	bls.n	8006bb0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8006bac:	2303      	movs	r3, #3
 8006bae:	e1ef      	b.n	8006f90 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8006bb0:	4b0e      	ldr	r3, [pc, #56]	; (8006bec <HAL_RCC_OscConfig+0x27c>)
 8006bb2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006bb6:	f003 0302 	and.w	r3, r3, #2
 8006bba:	2b00      	cmp	r3, #0
 8006bbc:	d0ef      	beq.n	8006b9e <HAL_RCC_OscConfig+0x22e>
 8006bbe:	e020      	b.n	8006c02 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006bc0:	4b0a      	ldr	r3, [pc, #40]	; (8006bec <HAL_RCC_OscConfig+0x27c>)
 8006bc2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006bc6:	4a09      	ldr	r2, [pc, #36]	; (8006bec <HAL_RCC_OscConfig+0x27c>)
 8006bc8:	f023 0301 	bic.w	r3, r3, #1
 8006bcc:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006bd0:	f7fc fbb8 	bl	8003344 <HAL_GetTick>
 8006bd4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8006bd6:	e00d      	b.n	8006bf4 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006bd8:	f7fc fbb4 	bl	8003344 <HAL_GetTick>
 8006bdc:	4602      	mov	r2, r0
 8006bde:	693b      	ldr	r3, [r7, #16]
 8006be0:	1ad3      	subs	r3, r2, r3
 8006be2:	2b02      	cmp	r3, #2
 8006be4:	d906      	bls.n	8006bf4 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8006be6:	2303      	movs	r3, #3
 8006be8:	e1d2      	b.n	8006f90 <HAL_RCC_OscConfig+0x620>
 8006bea:	bf00      	nop
 8006bec:	40021000 	.word	0x40021000
 8006bf0:	20000020 	.word	0x20000020
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8006bf4:	4b8c      	ldr	r3, [pc, #560]	; (8006e28 <HAL_RCC_OscConfig+0x4b8>)
 8006bf6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006bfa:	f003 0302 	and.w	r3, r3, #2
 8006bfe:	2b00      	cmp	r3, #0
 8006c00:	d1ea      	bne.n	8006bd8 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	f003 0304 	and.w	r3, r3, #4
 8006c0a:	2b00      	cmp	r3, #0
 8006c0c:	f000 80a6 	beq.w	8006d5c <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006c10:	2300      	movs	r3, #0
 8006c12:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8006c14:	4b84      	ldr	r3, [pc, #528]	; (8006e28 <HAL_RCC_OscConfig+0x4b8>)
 8006c16:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006c18:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006c1c:	2b00      	cmp	r3, #0
 8006c1e:	d101      	bne.n	8006c24 <HAL_RCC_OscConfig+0x2b4>
 8006c20:	2301      	movs	r3, #1
 8006c22:	e000      	b.n	8006c26 <HAL_RCC_OscConfig+0x2b6>
 8006c24:	2300      	movs	r3, #0
 8006c26:	2b00      	cmp	r3, #0
 8006c28:	d00d      	beq.n	8006c46 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006c2a:	4b7f      	ldr	r3, [pc, #508]	; (8006e28 <HAL_RCC_OscConfig+0x4b8>)
 8006c2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006c2e:	4a7e      	ldr	r2, [pc, #504]	; (8006e28 <HAL_RCC_OscConfig+0x4b8>)
 8006c30:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006c34:	6593      	str	r3, [r2, #88]	; 0x58
 8006c36:	4b7c      	ldr	r3, [pc, #496]	; (8006e28 <HAL_RCC_OscConfig+0x4b8>)
 8006c38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006c3a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006c3e:	60fb      	str	r3, [r7, #12]
 8006c40:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8006c42:	2301      	movs	r3, #1
 8006c44:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006c46:	4b79      	ldr	r3, [pc, #484]	; (8006e2c <HAL_RCC_OscConfig+0x4bc>)
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006c4e:	2b00      	cmp	r3, #0
 8006c50:	d118      	bne.n	8006c84 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006c52:	4b76      	ldr	r3, [pc, #472]	; (8006e2c <HAL_RCC_OscConfig+0x4bc>)
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	4a75      	ldr	r2, [pc, #468]	; (8006e2c <HAL_RCC_OscConfig+0x4bc>)
 8006c58:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006c5c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006c5e:	f7fc fb71 	bl	8003344 <HAL_GetTick>
 8006c62:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006c64:	e008      	b.n	8006c78 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006c66:	f7fc fb6d 	bl	8003344 <HAL_GetTick>
 8006c6a:	4602      	mov	r2, r0
 8006c6c:	693b      	ldr	r3, [r7, #16]
 8006c6e:	1ad3      	subs	r3, r2, r3
 8006c70:	2b02      	cmp	r3, #2
 8006c72:	d901      	bls.n	8006c78 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8006c74:	2303      	movs	r3, #3
 8006c76:	e18b      	b.n	8006f90 <HAL_RCC_OscConfig+0x620>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006c78:	4b6c      	ldr	r3, [pc, #432]	; (8006e2c <HAL_RCC_OscConfig+0x4bc>)
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006c80:	2b00      	cmp	r3, #0
 8006c82:	d0f0      	beq.n	8006c66 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	689b      	ldr	r3, [r3, #8]
 8006c88:	2b01      	cmp	r3, #1
 8006c8a:	d108      	bne.n	8006c9e <HAL_RCC_OscConfig+0x32e>
 8006c8c:	4b66      	ldr	r3, [pc, #408]	; (8006e28 <HAL_RCC_OscConfig+0x4b8>)
 8006c8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006c92:	4a65      	ldr	r2, [pc, #404]	; (8006e28 <HAL_RCC_OscConfig+0x4b8>)
 8006c94:	f043 0301 	orr.w	r3, r3, #1
 8006c98:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8006c9c:	e024      	b.n	8006ce8 <HAL_RCC_OscConfig+0x378>
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	689b      	ldr	r3, [r3, #8]
 8006ca2:	2b05      	cmp	r3, #5
 8006ca4:	d110      	bne.n	8006cc8 <HAL_RCC_OscConfig+0x358>
 8006ca6:	4b60      	ldr	r3, [pc, #384]	; (8006e28 <HAL_RCC_OscConfig+0x4b8>)
 8006ca8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006cac:	4a5e      	ldr	r2, [pc, #376]	; (8006e28 <HAL_RCC_OscConfig+0x4b8>)
 8006cae:	f043 0304 	orr.w	r3, r3, #4
 8006cb2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8006cb6:	4b5c      	ldr	r3, [pc, #368]	; (8006e28 <HAL_RCC_OscConfig+0x4b8>)
 8006cb8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006cbc:	4a5a      	ldr	r2, [pc, #360]	; (8006e28 <HAL_RCC_OscConfig+0x4b8>)
 8006cbe:	f043 0301 	orr.w	r3, r3, #1
 8006cc2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8006cc6:	e00f      	b.n	8006ce8 <HAL_RCC_OscConfig+0x378>
 8006cc8:	4b57      	ldr	r3, [pc, #348]	; (8006e28 <HAL_RCC_OscConfig+0x4b8>)
 8006cca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006cce:	4a56      	ldr	r2, [pc, #344]	; (8006e28 <HAL_RCC_OscConfig+0x4b8>)
 8006cd0:	f023 0301 	bic.w	r3, r3, #1
 8006cd4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8006cd8:	4b53      	ldr	r3, [pc, #332]	; (8006e28 <HAL_RCC_OscConfig+0x4b8>)
 8006cda:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006cde:	4a52      	ldr	r2, [pc, #328]	; (8006e28 <HAL_RCC_OscConfig+0x4b8>)
 8006ce0:	f023 0304 	bic.w	r3, r3, #4
 8006ce4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	689b      	ldr	r3, [r3, #8]
 8006cec:	2b00      	cmp	r3, #0
 8006cee:	d016      	beq.n	8006d1e <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006cf0:	f7fc fb28 	bl	8003344 <HAL_GetTick>
 8006cf4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006cf6:	e00a      	b.n	8006d0e <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006cf8:	f7fc fb24 	bl	8003344 <HAL_GetTick>
 8006cfc:	4602      	mov	r2, r0
 8006cfe:	693b      	ldr	r3, [r7, #16]
 8006d00:	1ad3      	subs	r3, r2, r3
 8006d02:	f241 3288 	movw	r2, #5000	; 0x1388
 8006d06:	4293      	cmp	r3, r2
 8006d08:	d901      	bls.n	8006d0e <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8006d0a:	2303      	movs	r3, #3
 8006d0c:	e140      	b.n	8006f90 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006d0e:	4b46      	ldr	r3, [pc, #280]	; (8006e28 <HAL_RCC_OscConfig+0x4b8>)
 8006d10:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006d14:	f003 0302 	and.w	r3, r3, #2
 8006d18:	2b00      	cmp	r3, #0
 8006d1a:	d0ed      	beq.n	8006cf8 <HAL_RCC_OscConfig+0x388>
 8006d1c:	e015      	b.n	8006d4a <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006d1e:	f7fc fb11 	bl	8003344 <HAL_GetTick>
 8006d22:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006d24:	e00a      	b.n	8006d3c <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006d26:	f7fc fb0d 	bl	8003344 <HAL_GetTick>
 8006d2a:	4602      	mov	r2, r0
 8006d2c:	693b      	ldr	r3, [r7, #16]
 8006d2e:	1ad3      	subs	r3, r2, r3
 8006d30:	f241 3288 	movw	r2, #5000	; 0x1388
 8006d34:	4293      	cmp	r3, r2
 8006d36:	d901      	bls.n	8006d3c <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8006d38:	2303      	movs	r3, #3
 8006d3a:	e129      	b.n	8006f90 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006d3c:	4b3a      	ldr	r3, [pc, #232]	; (8006e28 <HAL_RCC_OscConfig+0x4b8>)
 8006d3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006d42:	f003 0302 	and.w	r3, r3, #2
 8006d46:	2b00      	cmp	r3, #0
 8006d48:	d1ed      	bne.n	8006d26 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8006d4a:	7ffb      	ldrb	r3, [r7, #31]
 8006d4c:	2b01      	cmp	r3, #1
 8006d4e:	d105      	bne.n	8006d5c <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006d50:	4b35      	ldr	r3, [pc, #212]	; (8006e28 <HAL_RCC_OscConfig+0x4b8>)
 8006d52:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006d54:	4a34      	ldr	r2, [pc, #208]	; (8006e28 <HAL_RCC_OscConfig+0x4b8>)
 8006d56:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006d5a:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	f003 0320 	and.w	r3, r3, #32
 8006d64:	2b00      	cmp	r3, #0
 8006d66:	d03c      	beq.n	8006de2 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	699b      	ldr	r3, [r3, #24]
 8006d6c:	2b00      	cmp	r3, #0
 8006d6e:	d01c      	beq.n	8006daa <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8006d70:	4b2d      	ldr	r3, [pc, #180]	; (8006e28 <HAL_RCC_OscConfig+0x4b8>)
 8006d72:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006d76:	4a2c      	ldr	r2, [pc, #176]	; (8006e28 <HAL_RCC_OscConfig+0x4b8>)
 8006d78:	f043 0301 	orr.w	r3, r3, #1
 8006d7c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006d80:	f7fc fae0 	bl	8003344 <HAL_GetTick>
 8006d84:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8006d86:	e008      	b.n	8006d9a <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006d88:	f7fc fadc 	bl	8003344 <HAL_GetTick>
 8006d8c:	4602      	mov	r2, r0
 8006d8e:	693b      	ldr	r3, [r7, #16]
 8006d90:	1ad3      	subs	r3, r2, r3
 8006d92:	2b02      	cmp	r3, #2
 8006d94:	d901      	bls.n	8006d9a <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8006d96:	2303      	movs	r3, #3
 8006d98:	e0fa      	b.n	8006f90 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8006d9a:	4b23      	ldr	r3, [pc, #140]	; (8006e28 <HAL_RCC_OscConfig+0x4b8>)
 8006d9c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006da0:	f003 0302 	and.w	r3, r3, #2
 8006da4:	2b00      	cmp	r3, #0
 8006da6:	d0ef      	beq.n	8006d88 <HAL_RCC_OscConfig+0x418>
 8006da8:	e01b      	b.n	8006de2 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8006daa:	4b1f      	ldr	r3, [pc, #124]	; (8006e28 <HAL_RCC_OscConfig+0x4b8>)
 8006dac:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006db0:	4a1d      	ldr	r2, [pc, #116]	; (8006e28 <HAL_RCC_OscConfig+0x4b8>)
 8006db2:	f023 0301 	bic.w	r3, r3, #1
 8006db6:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006dba:	f7fc fac3 	bl	8003344 <HAL_GetTick>
 8006dbe:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8006dc0:	e008      	b.n	8006dd4 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006dc2:	f7fc fabf 	bl	8003344 <HAL_GetTick>
 8006dc6:	4602      	mov	r2, r0
 8006dc8:	693b      	ldr	r3, [r7, #16]
 8006dca:	1ad3      	subs	r3, r2, r3
 8006dcc:	2b02      	cmp	r3, #2
 8006dce:	d901      	bls.n	8006dd4 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8006dd0:	2303      	movs	r3, #3
 8006dd2:	e0dd      	b.n	8006f90 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8006dd4:	4b14      	ldr	r3, [pc, #80]	; (8006e28 <HAL_RCC_OscConfig+0x4b8>)
 8006dd6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006dda:	f003 0302 	and.w	r3, r3, #2
 8006dde:	2b00      	cmp	r3, #0
 8006de0:	d1ef      	bne.n	8006dc2 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	69db      	ldr	r3, [r3, #28]
 8006de6:	2b00      	cmp	r3, #0
 8006de8:	f000 80d1 	beq.w	8006f8e <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006dec:	4b0e      	ldr	r3, [pc, #56]	; (8006e28 <HAL_RCC_OscConfig+0x4b8>)
 8006dee:	689b      	ldr	r3, [r3, #8]
 8006df0:	f003 030c 	and.w	r3, r3, #12
 8006df4:	2b0c      	cmp	r3, #12
 8006df6:	f000 808b 	beq.w	8006f10 <HAL_RCC_OscConfig+0x5a0>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	69db      	ldr	r3, [r3, #28]
 8006dfe:	2b02      	cmp	r3, #2
 8006e00:	d15e      	bne.n	8006ec0 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006e02:	4b09      	ldr	r3, [pc, #36]	; (8006e28 <HAL_RCC_OscConfig+0x4b8>)
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	4a08      	ldr	r2, [pc, #32]	; (8006e28 <HAL_RCC_OscConfig+0x4b8>)
 8006e08:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006e0c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006e0e:	f7fc fa99 	bl	8003344 <HAL_GetTick>
 8006e12:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006e14:	e00c      	b.n	8006e30 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006e16:	f7fc fa95 	bl	8003344 <HAL_GetTick>
 8006e1a:	4602      	mov	r2, r0
 8006e1c:	693b      	ldr	r3, [r7, #16]
 8006e1e:	1ad3      	subs	r3, r2, r3
 8006e20:	2b02      	cmp	r3, #2
 8006e22:	d905      	bls.n	8006e30 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8006e24:	2303      	movs	r3, #3
 8006e26:	e0b3      	b.n	8006f90 <HAL_RCC_OscConfig+0x620>
 8006e28:	40021000 	.word	0x40021000
 8006e2c:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006e30:	4b59      	ldr	r3, [pc, #356]	; (8006f98 <HAL_RCC_OscConfig+0x628>)
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006e38:	2b00      	cmp	r3, #0
 8006e3a:	d1ec      	bne.n	8006e16 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006e3c:	4b56      	ldr	r3, [pc, #344]	; (8006f98 <HAL_RCC_OscConfig+0x628>)
 8006e3e:	68da      	ldr	r2, [r3, #12]
 8006e40:	4b56      	ldr	r3, [pc, #344]	; (8006f9c <HAL_RCC_OscConfig+0x62c>)
 8006e42:	4013      	ands	r3, r2
 8006e44:	687a      	ldr	r2, [r7, #4]
 8006e46:	6a11      	ldr	r1, [r2, #32]
 8006e48:	687a      	ldr	r2, [r7, #4]
 8006e4a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8006e4c:	3a01      	subs	r2, #1
 8006e4e:	0112      	lsls	r2, r2, #4
 8006e50:	4311      	orrs	r1, r2
 8006e52:	687a      	ldr	r2, [r7, #4]
 8006e54:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8006e56:	0212      	lsls	r2, r2, #8
 8006e58:	4311      	orrs	r1, r2
 8006e5a:	687a      	ldr	r2, [r7, #4]
 8006e5c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8006e5e:	0852      	lsrs	r2, r2, #1
 8006e60:	3a01      	subs	r2, #1
 8006e62:	0552      	lsls	r2, r2, #21
 8006e64:	4311      	orrs	r1, r2
 8006e66:	687a      	ldr	r2, [r7, #4]
 8006e68:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8006e6a:	0852      	lsrs	r2, r2, #1
 8006e6c:	3a01      	subs	r2, #1
 8006e6e:	0652      	lsls	r2, r2, #25
 8006e70:	4311      	orrs	r1, r2
 8006e72:	687a      	ldr	r2, [r7, #4]
 8006e74:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8006e76:	06d2      	lsls	r2, r2, #27
 8006e78:	430a      	orrs	r2, r1
 8006e7a:	4947      	ldr	r1, [pc, #284]	; (8006f98 <HAL_RCC_OscConfig+0x628>)
 8006e7c:	4313      	orrs	r3, r2
 8006e7e:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006e80:	4b45      	ldr	r3, [pc, #276]	; (8006f98 <HAL_RCC_OscConfig+0x628>)
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	4a44      	ldr	r2, [pc, #272]	; (8006f98 <HAL_RCC_OscConfig+0x628>)
 8006e86:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006e8a:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8006e8c:	4b42      	ldr	r3, [pc, #264]	; (8006f98 <HAL_RCC_OscConfig+0x628>)
 8006e8e:	68db      	ldr	r3, [r3, #12]
 8006e90:	4a41      	ldr	r2, [pc, #260]	; (8006f98 <HAL_RCC_OscConfig+0x628>)
 8006e92:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006e96:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006e98:	f7fc fa54 	bl	8003344 <HAL_GetTick>
 8006e9c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006e9e:	e008      	b.n	8006eb2 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006ea0:	f7fc fa50 	bl	8003344 <HAL_GetTick>
 8006ea4:	4602      	mov	r2, r0
 8006ea6:	693b      	ldr	r3, [r7, #16]
 8006ea8:	1ad3      	subs	r3, r2, r3
 8006eaa:	2b02      	cmp	r3, #2
 8006eac:	d901      	bls.n	8006eb2 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8006eae:	2303      	movs	r3, #3
 8006eb0:	e06e      	b.n	8006f90 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006eb2:	4b39      	ldr	r3, [pc, #228]	; (8006f98 <HAL_RCC_OscConfig+0x628>)
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006eba:	2b00      	cmp	r3, #0
 8006ebc:	d0f0      	beq.n	8006ea0 <HAL_RCC_OscConfig+0x530>
 8006ebe:	e066      	b.n	8006f8e <HAL_RCC_OscConfig+0x61e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006ec0:	4b35      	ldr	r3, [pc, #212]	; (8006f98 <HAL_RCC_OscConfig+0x628>)
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	4a34      	ldr	r2, [pc, #208]	; (8006f98 <HAL_RCC_OscConfig+0x628>)
 8006ec6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006eca:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8006ecc:	4b32      	ldr	r3, [pc, #200]	; (8006f98 <HAL_RCC_OscConfig+0x628>)
 8006ece:	68db      	ldr	r3, [r3, #12]
 8006ed0:	4a31      	ldr	r2, [pc, #196]	; (8006f98 <HAL_RCC_OscConfig+0x628>)
 8006ed2:	f023 0303 	bic.w	r3, r3, #3
 8006ed6:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8006ed8:	4b2f      	ldr	r3, [pc, #188]	; (8006f98 <HAL_RCC_OscConfig+0x628>)
 8006eda:	68db      	ldr	r3, [r3, #12]
 8006edc:	4a2e      	ldr	r2, [pc, #184]	; (8006f98 <HAL_RCC_OscConfig+0x628>)
 8006ede:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8006ee2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006ee6:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006ee8:	f7fc fa2c 	bl	8003344 <HAL_GetTick>
 8006eec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006eee:	e008      	b.n	8006f02 <HAL_RCC_OscConfig+0x592>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006ef0:	f7fc fa28 	bl	8003344 <HAL_GetTick>
 8006ef4:	4602      	mov	r2, r0
 8006ef6:	693b      	ldr	r3, [r7, #16]
 8006ef8:	1ad3      	subs	r3, r2, r3
 8006efa:	2b02      	cmp	r3, #2
 8006efc:	d901      	bls.n	8006f02 <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 8006efe:	2303      	movs	r3, #3
 8006f00:	e046      	b.n	8006f90 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006f02:	4b25      	ldr	r3, [pc, #148]	; (8006f98 <HAL_RCC_OscConfig+0x628>)
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006f0a:	2b00      	cmp	r3, #0
 8006f0c:	d1f0      	bne.n	8006ef0 <HAL_RCC_OscConfig+0x580>
 8006f0e:	e03e      	b.n	8006f8e <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	69db      	ldr	r3, [r3, #28]
 8006f14:	2b01      	cmp	r3, #1
 8006f16:	d101      	bne.n	8006f1c <HAL_RCC_OscConfig+0x5ac>
      {
        return HAL_ERROR;
 8006f18:	2301      	movs	r3, #1
 8006f1a:	e039      	b.n	8006f90 <HAL_RCC_OscConfig+0x620>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8006f1c:	4b1e      	ldr	r3, [pc, #120]	; (8006f98 <HAL_RCC_OscConfig+0x628>)
 8006f1e:	68db      	ldr	r3, [r3, #12]
 8006f20:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006f22:	697b      	ldr	r3, [r7, #20]
 8006f24:	f003 0203 	and.w	r2, r3, #3
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	6a1b      	ldr	r3, [r3, #32]
 8006f2c:	429a      	cmp	r2, r3
 8006f2e:	d12c      	bne.n	8006f8a <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8006f30:	697b      	ldr	r3, [r7, #20]
 8006f32:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f3a:	3b01      	subs	r3, #1
 8006f3c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006f3e:	429a      	cmp	r2, r3
 8006f40:	d123      	bne.n	8006f8a <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8006f42:	697b      	ldr	r3, [r7, #20]
 8006f44:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f4c:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8006f4e:	429a      	cmp	r2, r3
 8006f50:	d11b      	bne.n	8006f8a <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8006f52:	697b      	ldr	r3, [r7, #20]
 8006f54:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f5c:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8006f5e:	429a      	cmp	r2, r3
 8006f60:	d113      	bne.n	8006f8a <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006f62:	697b      	ldr	r3, [r7, #20]
 8006f64:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f6c:	085b      	lsrs	r3, r3, #1
 8006f6e:	3b01      	subs	r3, #1
 8006f70:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8006f72:	429a      	cmp	r2, r3
 8006f74:	d109      	bne.n	8006f8a <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8006f76:	697b      	ldr	r3, [r7, #20]
 8006f78:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006f80:	085b      	lsrs	r3, r3, #1
 8006f82:	3b01      	subs	r3, #1
 8006f84:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006f86:	429a      	cmp	r2, r3
 8006f88:	d001      	beq.n	8006f8e <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 8006f8a:	2301      	movs	r3, #1
 8006f8c:	e000      	b.n	8006f90 <HAL_RCC_OscConfig+0x620>
      }
    }
  }
  }

  return HAL_OK;
 8006f8e:	2300      	movs	r3, #0
}
 8006f90:	4618      	mov	r0, r3
 8006f92:	3720      	adds	r7, #32
 8006f94:	46bd      	mov	sp, r7
 8006f96:	bd80      	pop	{r7, pc}
 8006f98:	40021000 	.word	0x40021000
 8006f9c:	019f800c 	.word	0x019f800c

08006fa0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006fa0:	b580      	push	{r7, lr}
 8006fa2:	b086      	sub	sp, #24
 8006fa4:	af00      	add	r7, sp, #0
 8006fa6:	6078      	str	r0, [r7, #4]
 8006fa8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8006faa:	2300      	movs	r3, #0
 8006fac:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	2b00      	cmp	r3, #0
 8006fb2:	d101      	bne.n	8006fb8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8006fb4:	2301      	movs	r3, #1
 8006fb6:	e11e      	b.n	80071f6 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006fb8:	4b91      	ldr	r3, [pc, #580]	; (8007200 <HAL_RCC_ClockConfig+0x260>)
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	f003 030f 	and.w	r3, r3, #15
 8006fc0:	683a      	ldr	r2, [r7, #0]
 8006fc2:	429a      	cmp	r2, r3
 8006fc4:	d910      	bls.n	8006fe8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006fc6:	4b8e      	ldr	r3, [pc, #568]	; (8007200 <HAL_RCC_ClockConfig+0x260>)
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	f023 020f 	bic.w	r2, r3, #15
 8006fce:	498c      	ldr	r1, [pc, #560]	; (8007200 <HAL_RCC_ClockConfig+0x260>)
 8006fd0:	683b      	ldr	r3, [r7, #0]
 8006fd2:	4313      	orrs	r3, r2
 8006fd4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006fd6:	4b8a      	ldr	r3, [pc, #552]	; (8007200 <HAL_RCC_ClockConfig+0x260>)
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	f003 030f 	and.w	r3, r3, #15
 8006fde:	683a      	ldr	r2, [r7, #0]
 8006fe0:	429a      	cmp	r2, r3
 8006fe2:	d001      	beq.n	8006fe8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8006fe4:	2301      	movs	r3, #1
 8006fe6:	e106      	b.n	80071f6 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	f003 0301 	and.w	r3, r3, #1
 8006ff0:	2b00      	cmp	r3, #0
 8006ff2:	d073      	beq.n	80070dc <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	685b      	ldr	r3, [r3, #4]
 8006ff8:	2b03      	cmp	r3, #3
 8006ffa:	d129      	bne.n	8007050 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006ffc:	4b81      	ldr	r3, [pc, #516]	; (8007204 <HAL_RCC_ClockConfig+0x264>)
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007004:	2b00      	cmp	r3, #0
 8007006:	d101      	bne.n	800700c <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8007008:	2301      	movs	r3, #1
 800700a:	e0f4      	b.n	80071f6 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 800700c:	f000 f99e 	bl	800734c <RCC_GetSysClockFreqFromPLLSource>
 8007010:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8007012:	693b      	ldr	r3, [r7, #16]
 8007014:	4a7c      	ldr	r2, [pc, #496]	; (8007208 <HAL_RCC_ClockConfig+0x268>)
 8007016:	4293      	cmp	r3, r2
 8007018:	d93f      	bls.n	800709a <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800701a:	4b7a      	ldr	r3, [pc, #488]	; (8007204 <HAL_RCC_ClockConfig+0x264>)
 800701c:	689b      	ldr	r3, [r3, #8]
 800701e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007022:	2b00      	cmp	r3, #0
 8007024:	d009      	beq.n	800703a <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800702e:	2b00      	cmp	r3, #0
 8007030:	d033      	beq.n	800709a <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8007036:	2b00      	cmp	r3, #0
 8007038:	d12f      	bne.n	800709a <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800703a:	4b72      	ldr	r3, [pc, #456]	; (8007204 <HAL_RCC_ClockConfig+0x264>)
 800703c:	689b      	ldr	r3, [r3, #8]
 800703e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007042:	4a70      	ldr	r2, [pc, #448]	; (8007204 <HAL_RCC_ClockConfig+0x264>)
 8007044:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007048:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800704a:	2380      	movs	r3, #128	; 0x80
 800704c:	617b      	str	r3, [r7, #20]
 800704e:	e024      	b.n	800709a <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	685b      	ldr	r3, [r3, #4]
 8007054:	2b02      	cmp	r3, #2
 8007056:	d107      	bne.n	8007068 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8007058:	4b6a      	ldr	r3, [pc, #424]	; (8007204 <HAL_RCC_ClockConfig+0x264>)
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007060:	2b00      	cmp	r3, #0
 8007062:	d109      	bne.n	8007078 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8007064:	2301      	movs	r3, #1
 8007066:	e0c6      	b.n	80071f6 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8007068:	4b66      	ldr	r3, [pc, #408]	; (8007204 <HAL_RCC_ClockConfig+0x264>)
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007070:	2b00      	cmp	r3, #0
 8007072:	d101      	bne.n	8007078 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8007074:	2301      	movs	r3, #1
 8007076:	e0be      	b.n	80071f6 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8007078:	f000 f8ce 	bl	8007218 <HAL_RCC_GetSysClockFreq>
 800707c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800707e:	693b      	ldr	r3, [r7, #16]
 8007080:	4a61      	ldr	r2, [pc, #388]	; (8007208 <HAL_RCC_ClockConfig+0x268>)
 8007082:	4293      	cmp	r3, r2
 8007084:	d909      	bls.n	800709a <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8007086:	4b5f      	ldr	r3, [pc, #380]	; (8007204 <HAL_RCC_ClockConfig+0x264>)
 8007088:	689b      	ldr	r3, [r3, #8]
 800708a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800708e:	4a5d      	ldr	r2, [pc, #372]	; (8007204 <HAL_RCC_ClockConfig+0x264>)
 8007090:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007094:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8007096:	2380      	movs	r3, #128	; 0x80
 8007098:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800709a:	4b5a      	ldr	r3, [pc, #360]	; (8007204 <HAL_RCC_ClockConfig+0x264>)
 800709c:	689b      	ldr	r3, [r3, #8]
 800709e:	f023 0203 	bic.w	r2, r3, #3
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	685b      	ldr	r3, [r3, #4]
 80070a6:	4957      	ldr	r1, [pc, #348]	; (8007204 <HAL_RCC_ClockConfig+0x264>)
 80070a8:	4313      	orrs	r3, r2
 80070aa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80070ac:	f7fc f94a 	bl	8003344 <HAL_GetTick>
 80070b0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80070b2:	e00a      	b.n	80070ca <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80070b4:	f7fc f946 	bl	8003344 <HAL_GetTick>
 80070b8:	4602      	mov	r2, r0
 80070ba:	68fb      	ldr	r3, [r7, #12]
 80070bc:	1ad3      	subs	r3, r2, r3
 80070be:	f241 3288 	movw	r2, #5000	; 0x1388
 80070c2:	4293      	cmp	r3, r2
 80070c4:	d901      	bls.n	80070ca <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80070c6:	2303      	movs	r3, #3
 80070c8:	e095      	b.n	80071f6 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80070ca:	4b4e      	ldr	r3, [pc, #312]	; (8007204 <HAL_RCC_ClockConfig+0x264>)
 80070cc:	689b      	ldr	r3, [r3, #8]
 80070ce:	f003 020c 	and.w	r2, r3, #12
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	685b      	ldr	r3, [r3, #4]
 80070d6:	009b      	lsls	r3, r3, #2
 80070d8:	429a      	cmp	r2, r3
 80070da:	d1eb      	bne.n	80070b4 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	f003 0302 	and.w	r3, r3, #2
 80070e4:	2b00      	cmp	r3, #0
 80070e6:	d023      	beq.n	8007130 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	f003 0304 	and.w	r3, r3, #4
 80070f0:	2b00      	cmp	r3, #0
 80070f2:	d005      	beq.n	8007100 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80070f4:	4b43      	ldr	r3, [pc, #268]	; (8007204 <HAL_RCC_ClockConfig+0x264>)
 80070f6:	689b      	ldr	r3, [r3, #8]
 80070f8:	4a42      	ldr	r2, [pc, #264]	; (8007204 <HAL_RCC_ClockConfig+0x264>)
 80070fa:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80070fe:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	f003 0308 	and.w	r3, r3, #8
 8007108:	2b00      	cmp	r3, #0
 800710a:	d007      	beq.n	800711c <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 800710c:	4b3d      	ldr	r3, [pc, #244]	; (8007204 <HAL_RCC_ClockConfig+0x264>)
 800710e:	689b      	ldr	r3, [r3, #8]
 8007110:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8007114:	4a3b      	ldr	r2, [pc, #236]	; (8007204 <HAL_RCC_ClockConfig+0x264>)
 8007116:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800711a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800711c:	4b39      	ldr	r3, [pc, #228]	; (8007204 <HAL_RCC_ClockConfig+0x264>)
 800711e:	689b      	ldr	r3, [r3, #8]
 8007120:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	689b      	ldr	r3, [r3, #8]
 8007128:	4936      	ldr	r1, [pc, #216]	; (8007204 <HAL_RCC_ClockConfig+0x264>)
 800712a:	4313      	orrs	r3, r2
 800712c:	608b      	str	r3, [r1, #8]
 800712e:	e008      	b.n	8007142 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8007130:	697b      	ldr	r3, [r7, #20]
 8007132:	2b80      	cmp	r3, #128	; 0x80
 8007134:	d105      	bne.n	8007142 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8007136:	4b33      	ldr	r3, [pc, #204]	; (8007204 <HAL_RCC_ClockConfig+0x264>)
 8007138:	689b      	ldr	r3, [r3, #8]
 800713a:	4a32      	ldr	r2, [pc, #200]	; (8007204 <HAL_RCC_ClockConfig+0x264>)
 800713c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007140:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8007142:	4b2f      	ldr	r3, [pc, #188]	; (8007200 <HAL_RCC_ClockConfig+0x260>)
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	f003 030f 	and.w	r3, r3, #15
 800714a:	683a      	ldr	r2, [r7, #0]
 800714c:	429a      	cmp	r2, r3
 800714e:	d21d      	bcs.n	800718c <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007150:	4b2b      	ldr	r3, [pc, #172]	; (8007200 <HAL_RCC_ClockConfig+0x260>)
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	f023 020f 	bic.w	r2, r3, #15
 8007158:	4929      	ldr	r1, [pc, #164]	; (8007200 <HAL_RCC_ClockConfig+0x260>)
 800715a:	683b      	ldr	r3, [r7, #0]
 800715c:	4313      	orrs	r3, r2
 800715e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8007160:	f7fc f8f0 	bl	8003344 <HAL_GetTick>
 8007164:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007166:	e00a      	b.n	800717e <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007168:	f7fc f8ec 	bl	8003344 <HAL_GetTick>
 800716c:	4602      	mov	r2, r0
 800716e:	68fb      	ldr	r3, [r7, #12]
 8007170:	1ad3      	subs	r3, r2, r3
 8007172:	f241 3288 	movw	r2, #5000	; 0x1388
 8007176:	4293      	cmp	r3, r2
 8007178:	d901      	bls.n	800717e <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800717a:	2303      	movs	r3, #3
 800717c:	e03b      	b.n	80071f6 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800717e:	4b20      	ldr	r3, [pc, #128]	; (8007200 <HAL_RCC_ClockConfig+0x260>)
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	f003 030f 	and.w	r3, r3, #15
 8007186:	683a      	ldr	r2, [r7, #0]
 8007188:	429a      	cmp	r2, r3
 800718a:	d1ed      	bne.n	8007168 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	f003 0304 	and.w	r3, r3, #4
 8007194:	2b00      	cmp	r3, #0
 8007196:	d008      	beq.n	80071aa <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007198:	4b1a      	ldr	r3, [pc, #104]	; (8007204 <HAL_RCC_ClockConfig+0x264>)
 800719a:	689b      	ldr	r3, [r3, #8]
 800719c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	68db      	ldr	r3, [r3, #12]
 80071a4:	4917      	ldr	r1, [pc, #92]	; (8007204 <HAL_RCC_ClockConfig+0x264>)
 80071a6:	4313      	orrs	r3, r2
 80071a8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	f003 0308 	and.w	r3, r3, #8
 80071b2:	2b00      	cmp	r3, #0
 80071b4:	d009      	beq.n	80071ca <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80071b6:	4b13      	ldr	r3, [pc, #76]	; (8007204 <HAL_RCC_ClockConfig+0x264>)
 80071b8:	689b      	ldr	r3, [r3, #8]
 80071ba:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	691b      	ldr	r3, [r3, #16]
 80071c2:	00db      	lsls	r3, r3, #3
 80071c4:	490f      	ldr	r1, [pc, #60]	; (8007204 <HAL_RCC_ClockConfig+0x264>)
 80071c6:	4313      	orrs	r3, r2
 80071c8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80071ca:	f000 f825 	bl	8007218 <HAL_RCC_GetSysClockFreq>
 80071ce:	4602      	mov	r2, r0
 80071d0:	4b0c      	ldr	r3, [pc, #48]	; (8007204 <HAL_RCC_ClockConfig+0x264>)
 80071d2:	689b      	ldr	r3, [r3, #8]
 80071d4:	091b      	lsrs	r3, r3, #4
 80071d6:	f003 030f 	and.w	r3, r3, #15
 80071da:	490c      	ldr	r1, [pc, #48]	; (800720c <HAL_RCC_ClockConfig+0x26c>)
 80071dc:	5ccb      	ldrb	r3, [r1, r3]
 80071de:	f003 031f 	and.w	r3, r3, #31
 80071e2:	fa22 f303 	lsr.w	r3, r2, r3
 80071e6:	4a0a      	ldr	r2, [pc, #40]	; (8007210 <HAL_RCC_ClockConfig+0x270>)
 80071e8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80071ea:	4b0a      	ldr	r3, [pc, #40]	; (8007214 <HAL_RCC_ClockConfig+0x274>)
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	4618      	mov	r0, r3
 80071f0:	f7fc f85c 	bl	80032ac <HAL_InitTick>
 80071f4:	4603      	mov	r3, r0
}
 80071f6:	4618      	mov	r0, r3
 80071f8:	3718      	adds	r7, #24
 80071fa:	46bd      	mov	sp, r7
 80071fc:	bd80      	pop	{r7, pc}
 80071fe:	bf00      	nop
 8007200:	40022000 	.word	0x40022000
 8007204:	40021000 	.word	0x40021000
 8007208:	04c4b400 	.word	0x04c4b400
 800720c:	0800bd54 	.word	0x0800bd54
 8007210:	2000001c 	.word	0x2000001c
 8007214:	20000020 	.word	0x20000020

08007218 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007218:	b480      	push	{r7}
 800721a:	b087      	sub	sp, #28
 800721c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800721e:	4b2c      	ldr	r3, [pc, #176]	; (80072d0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8007220:	689b      	ldr	r3, [r3, #8]
 8007222:	f003 030c 	and.w	r3, r3, #12
 8007226:	2b04      	cmp	r3, #4
 8007228:	d102      	bne.n	8007230 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800722a:	4b2a      	ldr	r3, [pc, #168]	; (80072d4 <HAL_RCC_GetSysClockFreq+0xbc>)
 800722c:	613b      	str	r3, [r7, #16]
 800722e:	e047      	b.n	80072c0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8007230:	4b27      	ldr	r3, [pc, #156]	; (80072d0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8007232:	689b      	ldr	r3, [r3, #8]
 8007234:	f003 030c 	and.w	r3, r3, #12
 8007238:	2b08      	cmp	r3, #8
 800723a:	d102      	bne.n	8007242 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800723c:	4b26      	ldr	r3, [pc, #152]	; (80072d8 <HAL_RCC_GetSysClockFreq+0xc0>)
 800723e:	613b      	str	r3, [r7, #16]
 8007240:	e03e      	b.n	80072c0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8007242:	4b23      	ldr	r3, [pc, #140]	; (80072d0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8007244:	689b      	ldr	r3, [r3, #8]
 8007246:	f003 030c 	and.w	r3, r3, #12
 800724a:	2b0c      	cmp	r3, #12
 800724c:	d136      	bne.n	80072bc <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800724e:	4b20      	ldr	r3, [pc, #128]	; (80072d0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8007250:	68db      	ldr	r3, [r3, #12]
 8007252:	f003 0303 	and.w	r3, r3, #3
 8007256:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8007258:	4b1d      	ldr	r3, [pc, #116]	; (80072d0 <HAL_RCC_GetSysClockFreq+0xb8>)
 800725a:	68db      	ldr	r3, [r3, #12]
 800725c:	091b      	lsrs	r3, r3, #4
 800725e:	f003 030f 	and.w	r3, r3, #15
 8007262:	3301      	adds	r3, #1
 8007264:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8007266:	68fb      	ldr	r3, [r7, #12]
 8007268:	2b03      	cmp	r3, #3
 800726a:	d10c      	bne.n	8007286 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800726c:	4a1a      	ldr	r2, [pc, #104]	; (80072d8 <HAL_RCC_GetSysClockFreq+0xc0>)
 800726e:	68bb      	ldr	r3, [r7, #8]
 8007270:	fbb2 f3f3 	udiv	r3, r2, r3
 8007274:	4a16      	ldr	r2, [pc, #88]	; (80072d0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8007276:	68d2      	ldr	r2, [r2, #12]
 8007278:	0a12      	lsrs	r2, r2, #8
 800727a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800727e:	fb02 f303 	mul.w	r3, r2, r3
 8007282:	617b      	str	r3, [r7, #20]
      break;
 8007284:	e00c      	b.n	80072a0 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8007286:	4a13      	ldr	r2, [pc, #76]	; (80072d4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8007288:	68bb      	ldr	r3, [r7, #8]
 800728a:	fbb2 f3f3 	udiv	r3, r2, r3
 800728e:	4a10      	ldr	r2, [pc, #64]	; (80072d0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8007290:	68d2      	ldr	r2, [r2, #12]
 8007292:	0a12      	lsrs	r2, r2, #8
 8007294:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8007298:	fb02 f303 	mul.w	r3, r2, r3
 800729c:	617b      	str	r3, [r7, #20]
      break;
 800729e:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80072a0:	4b0b      	ldr	r3, [pc, #44]	; (80072d0 <HAL_RCC_GetSysClockFreq+0xb8>)
 80072a2:	68db      	ldr	r3, [r3, #12]
 80072a4:	0e5b      	lsrs	r3, r3, #25
 80072a6:	f003 0303 	and.w	r3, r3, #3
 80072aa:	3301      	adds	r3, #1
 80072ac:	005b      	lsls	r3, r3, #1
 80072ae:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 80072b0:	697a      	ldr	r2, [r7, #20]
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80072b8:	613b      	str	r3, [r7, #16]
 80072ba:	e001      	b.n	80072c0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 80072bc:	2300      	movs	r3, #0
 80072be:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80072c0:	693b      	ldr	r3, [r7, #16]
}
 80072c2:	4618      	mov	r0, r3
 80072c4:	371c      	adds	r7, #28
 80072c6:	46bd      	mov	sp, r7
 80072c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072cc:	4770      	bx	lr
 80072ce:	bf00      	nop
 80072d0:	40021000 	.word	0x40021000
 80072d4:	00f42400 	.word	0x00f42400
 80072d8:	016e3600 	.word	0x016e3600

080072dc <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80072dc:	b480      	push	{r7}
 80072de:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80072e0:	4b03      	ldr	r3, [pc, #12]	; (80072f0 <HAL_RCC_GetHCLKFreq+0x14>)
 80072e2:	681b      	ldr	r3, [r3, #0]
}
 80072e4:	4618      	mov	r0, r3
 80072e6:	46bd      	mov	sp, r7
 80072e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ec:	4770      	bx	lr
 80072ee:	bf00      	nop
 80072f0:	2000001c 	.word	0x2000001c

080072f4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80072f4:	b580      	push	{r7, lr}
 80072f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80072f8:	f7ff fff0 	bl	80072dc <HAL_RCC_GetHCLKFreq>
 80072fc:	4602      	mov	r2, r0
 80072fe:	4b06      	ldr	r3, [pc, #24]	; (8007318 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007300:	689b      	ldr	r3, [r3, #8]
 8007302:	0a1b      	lsrs	r3, r3, #8
 8007304:	f003 0307 	and.w	r3, r3, #7
 8007308:	4904      	ldr	r1, [pc, #16]	; (800731c <HAL_RCC_GetPCLK1Freq+0x28>)
 800730a:	5ccb      	ldrb	r3, [r1, r3]
 800730c:	f003 031f 	and.w	r3, r3, #31
 8007310:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007314:	4618      	mov	r0, r3
 8007316:	bd80      	pop	{r7, pc}
 8007318:	40021000 	.word	0x40021000
 800731c:	0800bd64 	.word	0x0800bd64

08007320 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007320:	b580      	push	{r7, lr}
 8007322:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8007324:	f7ff ffda 	bl	80072dc <HAL_RCC_GetHCLKFreq>
 8007328:	4602      	mov	r2, r0
 800732a:	4b06      	ldr	r3, [pc, #24]	; (8007344 <HAL_RCC_GetPCLK2Freq+0x24>)
 800732c:	689b      	ldr	r3, [r3, #8]
 800732e:	0adb      	lsrs	r3, r3, #11
 8007330:	f003 0307 	and.w	r3, r3, #7
 8007334:	4904      	ldr	r1, [pc, #16]	; (8007348 <HAL_RCC_GetPCLK2Freq+0x28>)
 8007336:	5ccb      	ldrb	r3, [r1, r3]
 8007338:	f003 031f 	and.w	r3, r3, #31
 800733c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007340:	4618      	mov	r0, r3
 8007342:	bd80      	pop	{r7, pc}
 8007344:	40021000 	.word	0x40021000
 8007348:	0800bd64 	.word	0x0800bd64

0800734c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 800734c:	b480      	push	{r7}
 800734e:	b087      	sub	sp, #28
 8007350:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8007352:	4b1e      	ldr	r3, [pc, #120]	; (80073cc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8007354:	68db      	ldr	r3, [r3, #12]
 8007356:	f003 0303 	and.w	r3, r3, #3
 800735a:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800735c:	4b1b      	ldr	r3, [pc, #108]	; (80073cc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800735e:	68db      	ldr	r3, [r3, #12]
 8007360:	091b      	lsrs	r3, r3, #4
 8007362:	f003 030f 	and.w	r3, r3, #15
 8007366:	3301      	adds	r3, #1
 8007368:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800736a:	693b      	ldr	r3, [r7, #16]
 800736c:	2b03      	cmp	r3, #3
 800736e:	d10c      	bne.n	800738a <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8007370:	4a17      	ldr	r2, [pc, #92]	; (80073d0 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8007372:	68fb      	ldr	r3, [r7, #12]
 8007374:	fbb2 f3f3 	udiv	r3, r2, r3
 8007378:	4a14      	ldr	r2, [pc, #80]	; (80073cc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800737a:	68d2      	ldr	r2, [r2, #12]
 800737c:	0a12      	lsrs	r2, r2, #8
 800737e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8007382:	fb02 f303 	mul.w	r3, r2, r3
 8007386:	617b      	str	r3, [r7, #20]
    break;
 8007388:	e00c      	b.n	80073a4 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800738a:	4a12      	ldr	r2, [pc, #72]	; (80073d4 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 800738c:	68fb      	ldr	r3, [r7, #12]
 800738e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007392:	4a0e      	ldr	r2, [pc, #56]	; (80073cc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8007394:	68d2      	ldr	r2, [r2, #12]
 8007396:	0a12      	lsrs	r2, r2, #8
 8007398:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800739c:	fb02 f303 	mul.w	r3, r2, r3
 80073a0:	617b      	str	r3, [r7, #20]
    break;
 80073a2:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80073a4:	4b09      	ldr	r3, [pc, #36]	; (80073cc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80073a6:	68db      	ldr	r3, [r3, #12]
 80073a8:	0e5b      	lsrs	r3, r3, #25
 80073aa:	f003 0303 	and.w	r3, r3, #3
 80073ae:	3301      	adds	r3, #1
 80073b0:	005b      	lsls	r3, r3, #1
 80073b2:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 80073b4:	697a      	ldr	r2, [r7, #20]
 80073b6:	68bb      	ldr	r3, [r7, #8]
 80073b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80073bc:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 80073be:	687b      	ldr	r3, [r7, #4]
}
 80073c0:	4618      	mov	r0, r3
 80073c2:	371c      	adds	r7, #28
 80073c4:	46bd      	mov	sp, r7
 80073c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073ca:	4770      	bx	lr
 80073cc:	40021000 	.word	0x40021000
 80073d0:	016e3600 	.word	0x016e3600
 80073d4:	00f42400 	.word	0x00f42400

080073d8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80073d8:	b580      	push	{r7, lr}
 80073da:	b086      	sub	sp, #24
 80073dc:	af00      	add	r7, sp, #0
 80073de:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80073e0:	2300      	movs	r3, #0
 80073e2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80073e4:	2300      	movs	r3, #0
 80073e6:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80073f0:	2b00      	cmp	r3, #0
 80073f2:	f000 8098 	beq.w	8007526 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80073f6:	2300      	movs	r3, #0
 80073f8:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80073fa:	4b43      	ldr	r3, [pc, #268]	; (8007508 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80073fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80073fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007402:	2b00      	cmp	r3, #0
 8007404:	d10d      	bne.n	8007422 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007406:	4b40      	ldr	r3, [pc, #256]	; (8007508 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007408:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800740a:	4a3f      	ldr	r2, [pc, #252]	; (8007508 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800740c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007410:	6593      	str	r3, [r2, #88]	; 0x58
 8007412:	4b3d      	ldr	r3, [pc, #244]	; (8007508 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007414:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007416:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800741a:	60bb      	str	r3, [r7, #8]
 800741c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800741e:	2301      	movs	r3, #1
 8007420:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007422:	4b3a      	ldr	r3, [pc, #232]	; (800750c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8007424:	681b      	ldr	r3, [r3, #0]
 8007426:	4a39      	ldr	r2, [pc, #228]	; (800750c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8007428:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800742c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800742e:	f7fb ff89 	bl	8003344 <HAL_GetTick>
 8007432:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007434:	e009      	b.n	800744a <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007436:	f7fb ff85 	bl	8003344 <HAL_GetTick>
 800743a:	4602      	mov	r2, r0
 800743c:	68fb      	ldr	r3, [r7, #12]
 800743e:	1ad3      	subs	r3, r2, r3
 8007440:	2b02      	cmp	r3, #2
 8007442:	d902      	bls.n	800744a <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8007444:	2303      	movs	r3, #3
 8007446:	74fb      	strb	r3, [r7, #19]
        break;
 8007448:	e005      	b.n	8007456 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800744a:	4b30      	ldr	r3, [pc, #192]	; (800750c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007452:	2b00      	cmp	r3, #0
 8007454:	d0ef      	beq.n	8007436 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8007456:	7cfb      	ldrb	r3, [r7, #19]
 8007458:	2b00      	cmp	r3, #0
 800745a:	d159      	bne.n	8007510 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800745c:	4b2a      	ldr	r3, [pc, #168]	; (8007508 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800745e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007462:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007466:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8007468:	697b      	ldr	r3, [r7, #20]
 800746a:	2b00      	cmp	r3, #0
 800746c:	d01e      	beq.n	80074ac <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007472:	697a      	ldr	r2, [r7, #20]
 8007474:	429a      	cmp	r2, r3
 8007476:	d019      	beq.n	80074ac <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8007478:	4b23      	ldr	r3, [pc, #140]	; (8007508 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800747a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800747e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007482:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8007484:	4b20      	ldr	r3, [pc, #128]	; (8007508 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007486:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800748a:	4a1f      	ldr	r2, [pc, #124]	; (8007508 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800748c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007490:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8007494:	4b1c      	ldr	r3, [pc, #112]	; (8007508 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007496:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800749a:	4a1b      	ldr	r2, [pc, #108]	; (8007508 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800749c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80074a0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80074a4:	4a18      	ldr	r2, [pc, #96]	; (8007508 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80074a6:	697b      	ldr	r3, [r7, #20]
 80074a8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80074ac:	697b      	ldr	r3, [r7, #20]
 80074ae:	f003 0301 	and.w	r3, r3, #1
 80074b2:	2b00      	cmp	r3, #0
 80074b4:	d016      	beq.n	80074e4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80074b6:	f7fb ff45 	bl	8003344 <HAL_GetTick>
 80074ba:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80074bc:	e00b      	b.n	80074d6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80074be:	f7fb ff41 	bl	8003344 <HAL_GetTick>
 80074c2:	4602      	mov	r2, r0
 80074c4:	68fb      	ldr	r3, [r7, #12]
 80074c6:	1ad3      	subs	r3, r2, r3
 80074c8:	f241 3288 	movw	r2, #5000	; 0x1388
 80074cc:	4293      	cmp	r3, r2
 80074ce:	d902      	bls.n	80074d6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 80074d0:	2303      	movs	r3, #3
 80074d2:	74fb      	strb	r3, [r7, #19]
            break;
 80074d4:	e006      	b.n	80074e4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80074d6:	4b0c      	ldr	r3, [pc, #48]	; (8007508 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80074d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80074dc:	f003 0302 	and.w	r3, r3, #2
 80074e0:	2b00      	cmp	r3, #0
 80074e2:	d0ec      	beq.n	80074be <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 80074e4:	7cfb      	ldrb	r3, [r7, #19]
 80074e6:	2b00      	cmp	r3, #0
 80074e8:	d10b      	bne.n	8007502 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80074ea:	4b07      	ldr	r3, [pc, #28]	; (8007508 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80074ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80074f0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074f8:	4903      	ldr	r1, [pc, #12]	; (8007508 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80074fa:	4313      	orrs	r3, r2
 80074fc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8007500:	e008      	b.n	8007514 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8007502:	7cfb      	ldrb	r3, [r7, #19]
 8007504:	74bb      	strb	r3, [r7, #18]
 8007506:	e005      	b.n	8007514 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8007508:	40021000 	.word	0x40021000
 800750c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007510:	7cfb      	ldrb	r3, [r7, #19]
 8007512:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8007514:	7c7b      	ldrb	r3, [r7, #17]
 8007516:	2b01      	cmp	r3, #1
 8007518:	d105      	bne.n	8007526 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800751a:	4ba6      	ldr	r3, [pc, #664]	; (80077b4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800751c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800751e:	4aa5      	ldr	r2, [pc, #660]	; (80077b4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007520:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007524:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	f003 0301 	and.w	r3, r3, #1
 800752e:	2b00      	cmp	r3, #0
 8007530:	d00a      	beq.n	8007548 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8007532:	4ba0      	ldr	r3, [pc, #640]	; (80077b4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007534:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007538:	f023 0203 	bic.w	r2, r3, #3
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	685b      	ldr	r3, [r3, #4]
 8007540:	499c      	ldr	r1, [pc, #624]	; (80077b4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007542:	4313      	orrs	r3, r2
 8007544:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	f003 0302 	and.w	r3, r3, #2
 8007550:	2b00      	cmp	r3, #0
 8007552:	d00a      	beq.n	800756a <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8007554:	4b97      	ldr	r3, [pc, #604]	; (80077b4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007556:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800755a:	f023 020c 	bic.w	r2, r3, #12
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	689b      	ldr	r3, [r3, #8]
 8007562:	4994      	ldr	r1, [pc, #592]	; (80077b4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007564:	4313      	orrs	r3, r2
 8007566:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	f003 0304 	and.w	r3, r3, #4
 8007572:	2b00      	cmp	r3, #0
 8007574:	d00a      	beq.n	800758c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8007576:	4b8f      	ldr	r3, [pc, #572]	; (80077b4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007578:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800757c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	68db      	ldr	r3, [r3, #12]
 8007584:	498b      	ldr	r1, [pc, #556]	; (80077b4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007586:	4313      	orrs	r3, r2
 8007588:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	f003 0308 	and.w	r3, r3, #8
 8007594:	2b00      	cmp	r3, #0
 8007596:	d00a      	beq.n	80075ae <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8007598:	4b86      	ldr	r3, [pc, #536]	; (80077b4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800759a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800759e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	691b      	ldr	r3, [r3, #16]
 80075a6:	4983      	ldr	r1, [pc, #524]	; (80077b4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80075a8:	4313      	orrs	r3, r2
 80075aa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	f003 0320 	and.w	r3, r3, #32
 80075b6:	2b00      	cmp	r3, #0
 80075b8:	d00a      	beq.n	80075d0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80075ba:	4b7e      	ldr	r3, [pc, #504]	; (80077b4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80075bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80075c0:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	695b      	ldr	r3, [r3, #20]
 80075c8:	497a      	ldr	r1, [pc, #488]	; (80077b4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80075ca:	4313      	orrs	r3, r2
 80075cc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80075d8:	2b00      	cmp	r3, #0
 80075da:	d00a      	beq.n	80075f2 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80075dc:	4b75      	ldr	r3, [pc, #468]	; (80077b4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80075de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80075e2:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	699b      	ldr	r3, [r3, #24]
 80075ea:	4972      	ldr	r1, [pc, #456]	; (80077b4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80075ec:	4313      	orrs	r3, r2
 80075ee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80075fa:	2b00      	cmp	r3, #0
 80075fc:	d00a      	beq.n	8007614 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80075fe:	4b6d      	ldr	r3, [pc, #436]	; (80077b4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007600:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007604:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	69db      	ldr	r3, [r3, #28]
 800760c:	4969      	ldr	r1, [pc, #420]	; (80077b4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800760e:	4313      	orrs	r3, r2
 8007610:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800761c:	2b00      	cmp	r3, #0
 800761e:	d00a      	beq.n	8007636 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8007620:	4b64      	ldr	r3, [pc, #400]	; (80077b4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007622:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007626:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	6a1b      	ldr	r3, [r3, #32]
 800762e:	4961      	ldr	r1, [pc, #388]	; (80077b4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007630:	4313      	orrs	r3, r2
 8007632:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	681b      	ldr	r3, [r3, #0]
 800763a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800763e:	2b00      	cmp	r3, #0
 8007640:	d00a      	beq.n	8007658 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007642:	4b5c      	ldr	r3, [pc, #368]	; (80077b4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007644:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007648:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007650:	4958      	ldr	r1, [pc, #352]	; (80077b4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007652:	4313      	orrs	r3, r2
 8007654:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007660:	2b00      	cmp	r3, #0
 8007662:	d015      	beq.n	8007690 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8007664:	4b53      	ldr	r3, [pc, #332]	; (80077b4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007666:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800766a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007672:	4950      	ldr	r1, [pc, #320]	; (80077b4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007674:	4313      	orrs	r3, r2
 8007676:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800767e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007682:	d105      	bne.n	8007690 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007684:	4b4b      	ldr	r3, [pc, #300]	; (80077b4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007686:	68db      	ldr	r3, [r3, #12]
 8007688:	4a4a      	ldr	r2, [pc, #296]	; (80077b4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800768a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800768e:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007698:	2b00      	cmp	r3, #0
 800769a:	d015      	beq.n	80076c8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800769c:	4b45      	ldr	r3, [pc, #276]	; (80077b4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800769e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80076a2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076aa:	4942      	ldr	r1, [pc, #264]	; (80077b4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80076ac:	4313      	orrs	r3, r2
 80076ae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076b6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80076ba:	d105      	bne.n	80076c8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80076bc:	4b3d      	ldr	r3, [pc, #244]	; (80077b4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80076be:	68db      	ldr	r3, [r3, #12]
 80076c0:	4a3c      	ldr	r2, [pc, #240]	; (80077b4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80076c2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80076c6:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80076d0:	2b00      	cmp	r3, #0
 80076d2:	d015      	beq.n	8007700 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80076d4:	4b37      	ldr	r3, [pc, #220]	; (80077b4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80076d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80076da:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80076e2:	4934      	ldr	r1, [pc, #208]	; (80077b4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80076e4:	4313      	orrs	r3, r2
 80076e6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80076ee:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80076f2:	d105      	bne.n	8007700 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80076f4:	4b2f      	ldr	r3, [pc, #188]	; (80077b4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80076f6:	68db      	ldr	r3, [r3, #12]
 80076f8:	4a2e      	ldr	r2, [pc, #184]	; (80077b4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80076fa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80076fe:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007708:	2b00      	cmp	r3, #0
 800770a:	d015      	beq.n	8007738 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800770c:	4b29      	ldr	r3, [pc, #164]	; (80077b4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800770e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007712:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800771a:	4926      	ldr	r1, [pc, #152]	; (80077b4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800771c:	4313      	orrs	r3, r2
 800771e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007726:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800772a:	d105      	bne.n	8007738 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800772c:	4b21      	ldr	r3, [pc, #132]	; (80077b4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800772e:	68db      	ldr	r3, [r3, #12]
 8007730:	4a20      	ldr	r2, [pc, #128]	; (80077b4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007732:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007736:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007740:	2b00      	cmp	r3, #0
 8007742:	d015      	beq.n	8007770 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8007744:	4b1b      	ldr	r3, [pc, #108]	; (80077b4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007746:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800774a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007752:	4918      	ldr	r1, [pc, #96]	; (80077b4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007754:	4313      	orrs	r3, r2
 8007756:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800775e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007762:	d105      	bne.n	8007770 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007764:	4b13      	ldr	r3, [pc, #76]	; (80077b4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007766:	68db      	ldr	r3, [r3, #12]
 8007768:	4a12      	ldr	r2, [pc, #72]	; (80077b4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800776a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800776e:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	681b      	ldr	r3, [r3, #0]
 8007774:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007778:	2b00      	cmp	r3, #0
 800777a:	d015      	beq.n	80077a8 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800777c:	4b0d      	ldr	r3, [pc, #52]	; (80077b4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800777e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007782:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800778a:	490a      	ldr	r1, [pc, #40]	; (80077b4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800778c:	4313      	orrs	r3, r2
 800778e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007796:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800779a:	d105      	bne.n	80077a8 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800779c:	4b05      	ldr	r3, [pc, #20]	; (80077b4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800779e:	68db      	ldr	r3, [r3, #12]
 80077a0:	4a04      	ldr	r2, [pc, #16]	; (80077b4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80077a2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80077a6:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 80077a8:	7cbb      	ldrb	r3, [r7, #18]
}
 80077aa:	4618      	mov	r0, r3
 80077ac:	3718      	adds	r7, #24
 80077ae:	46bd      	mov	sp, r7
 80077b0:	bd80      	pop	{r7, pc}
 80077b2:	bf00      	nop
 80077b4:	40021000 	.word	0x40021000

080077b8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80077b8:	b580      	push	{r7, lr}
 80077ba:	b084      	sub	sp, #16
 80077bc:	af00      	add	r7, sp, #0
 80077be:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	2b00      	cmp	r3, #0
 80077c4:	d101      	bne.n	80077ca <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80077c6:	2301      	movs	r3, #1
 80077c8:	e09d      	b.n	8007906 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077ce:	2b00      	cmp	r3, #0
 80077d0:	d108      	bne.n	80077e4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	685b      	ldr	r3, [r3, #4]
 80077d6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80077da:	d009      	beq.n	80077f0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	2200      	movs	r2, #0
 80077e0:	61da      	str	r2, [r3, #28]
 80077e2:	e005      	b.n	80077f0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	2200      	movs	r2, #0
 80077e8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	2200      	movs	r2, #0
 80077ee:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	2200      	movs	r2, #0
 80077f4:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80077fc:	b2db      	uxtb	r3, r3
 80077fe:	2b00      	cmp	r3, #0
 8007800:	d106      	bne.n	8007810 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	2200      	movs	r2, #0
 8007806:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800780a:	6878      	ldr	r0, [r7, #4]
 800780c:	f7fb f8ac 	bl	8002968 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	2202      	movs	r2, #2
 8007814:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	681a      	ldr	r2, [r3, #0]
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007826:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	68db      	ldr	r3, [r3, #12]
 800782c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8007830:	d902      	bls.n	8007838 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8007832:	2300      	movs	r3, #0
 8007834:	60fb      	str	r3, [r7, #12]
 8007836:	e002      	b.n	800783e <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8007838:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800783c:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	68db      	ldr	r3, [r3, #12]
 8007842:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8007846:	d007      	beq.n	8007858 <HAL_SPI_Init+0xa0>
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	68db      	ldr	r3, [r3, #12]
 800784c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8007850:	d002      	beq.n	8007858 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	2200      	movs	r2, #0
 8007856:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	685b      	ldr	r3, [r3, #4]
 800785c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	689b      	ldr	r3, [r3, #8]
 8007864:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8007868:	431a      	orrs	r2, r3
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	691b      	ldr	r3, [r3, #16]
 800786e:	f003 0302 	and.w	r3, r3, #2
 8007872:	431a      	orrs	r2, r3
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	695b      	ldr	r3, [r3, #20]
 8007878:	f003 0301 	and.w	r3, r3, #1
 800787c:	431a      	orrs	r2, r3
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	699b      	ldr	r3, [r3, #24]
 8007882:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007886:	431a      	orrs	r2, r3
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	69db      	ldr	r3, [r3, #28]
 800788c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007890:	431a      	orrs	r2, r3
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	6a1b      	ldr	r3, [r3, #32]
 8007896:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800789a:	ea42 0103 	orr.w	r1, r2, r3
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80078a2:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	681b      	ldr	r3, [r3, #0]
 80078aa:	430a      	orrs	r2, r1
 80078ac:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	699b      	ldr	r3, [r3, #24]
 80078b2:	0c1b      	lsrs	r3, r3, #16
 80078b4:	f003 0204 	and.w	r2, r3, #4
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078bc:	f003 0310 	and.w	r3, r3, #16
 80078c0:	431a      	orrs	r2, r3
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80078c6:	f003 0308 	and.w	r3, r3, #8
 80078ca:	431a      	orrs	r2, r3
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	68db      	ldr	r3, [r3, #12]
 80078d0:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80078d4:	ea42 0103 	orr.w	r1, r2, r3
 80078d8:	68fb      	ldr	r3, [r7, #12]
 80078da:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	681b      	ldr	r3, [r3, #0]
 80078e2:	430a      	orrs	r2, r1
 80078e4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	69da      	ldr	r2, [r3, #28]
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	681b      	ldr	r3, [r3, #0]
 80078f0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80078f4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	2200      	movs	r2, #0
 80078fa:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	2201      	movs	r2, #1
 8007900:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8007904:	2300      	movs	r3, #0
}
 8007906:	4618      	mov	r0, r3
 8007908:	3710      	adds	r7, #16
 800790a:	46bd      	mov	sp, r7
 800790c:	bd80      	pop	{r7, pc}

0800790e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800790e:	b580      	push	{r7, lr}
 8007910:	b088      	sub	sp, #32
 8007912:	af00      	add	r7, sp, #0
 8007914:	60f8      	str	r0, [r7, #12]
 8007916:	60b9      	str	r1, [r7, #8]
 8007918:	603b      	str	r3, [r7, #0]
 800791a:	4613      	mov	r3, r2
 800791c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800791e:	2300      	movs	r3, #0
 8007920:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007922:	68fb      	ldr	r3, [r7, #12]
 8007924:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8007928:	2b01      	cmp	r3, #1
 800792a:	d101      	bne.n	8007930 <HAL_SPI_Transmit+0x22>
 800792c:	2302      	movs	r3, #2
 800792e:	e158      	b.n	8007be2 <HAL_SPI_Transmit+0x2d4>
 8007930:	68fb      	ldr	r3, [r7, #12]
 8007932:	2201      	movs	r2, #1
 8007934:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007938:	f7fb fd04 	bl	8003344 <HAL_GetTick>
 800793c:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800793e:	88fb      	ldrh	r3, [r7, #6]
 8007940:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8007942:	68fb      	ldr	r3, [r7, #12]
 8007944:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8007948:	b2db      	uxtb	r3, r3
 800794a:	2b01      	cmp	r3, #1
 800794c:	d002      	beq.n	8007954 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800794e:	2302      	movs	r3, #2
 8007950:	77fb      	strb	r3, [r7, #31]
    goto error;
 8007952:	e13d      	b.n	8007bd0 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 8007954:	68bb      	ldr	r3, [r7, #8]
 8007956:	2b00      	cmp	r3, #0
 8007958:	d002      	beq.n	8007960 <HAL_SPI_Transmit+0x52>
 800795a:	88fb      	ldrh	r3, [r7, #6]
 800795c:	2b00      	cmp	r3, #0
 800795e:	d102      	bne.n	8007966 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8007960:	2301      	movs	r3, #1
 8007962:	77fb      	strb	r3, [r7, #31]
    goto error;
 8007964:	e134      	b.n	8007bd0 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8007966:	68fb      	ldr	r3, [r7, #12]
 8007968:	2203      	movs	r2, #3
 800796a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800796e:	68fb      	ldr	r3, [r7, #12]
 8007970:	2200      	movs	r2, #0
 8007972:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8007974:	68fb      	ldr	r3, [r7, #12]
 8007976:	68ba      	ldr	r2, [r7, #8]
 8007978:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 800797a:	68fb      	ldr	r3, [r7, #12]
 800797c:	88fa      	ldrh	r2, [r7, #6]
 800797e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8007980:	68fb      	ldr	r3, [r7, #12]
 8007982:	88fa      	ldrh	r2, [r7, #6]
 8007984:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8007986:	68fb      	ldr	r3, [r7, #12]
 8007988:	2200      	movs	r2, #0
 800798a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 800798c:	68fb      	ldr	r3, [r7, #12]
 800798e:	2200      	movs	r2, #0
 8007990:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8007994:	68fb      	ldr	r3, [r7, #12]
 8007996:	2200      	movs	r2, #0
 8007998:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 800799c:	68fb      	ldr	r3, [r7, #12]
 800799e:	2200      	movs	r2, #0
 80079a0:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 80079a2:	68fb      	ldr	r3, [r7, #12]
 80079a4:	2200      	movs	r2, #0
 80079a6:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80079a8:	68fb      	ldr	r3, [r7, #12]
 80079aa:	689b      	ldr	r3, [r3, #8]
 80079ac:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80079b0:	d10f      	bne.n	80079d2 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80079b2:	68fb      	ldr	r3, [r7, #12]
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	681a      	ldr	r2, [r3, #0]
 80079b8:	68fb      	ldr	r3, [r7, #12]
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80079c0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80079c2:	68fb      	ldr	r3, [r7, #12]
 80079c4:	681b      	ldr	r3, [r3, #0]
 80079c6:	681a      	ldr	r2, [r3, #0]
 80079c8:	68fb      	ldr	r3, [r7, #12]
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80079d0:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80079d2:	68fb      	ldr	r3, [r7, #12]
 80079d4:	681b      	ldr	r3, [r3, #0]
 80079d6:	681b      	ldr	r3, [r3, #0]
 80079d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80079dc:	2b40      	cmp	r3, #64	; 0x40
 80079de:	d007      	beq.n	80079f0 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80079e0:	68fb      	ldr	r3, [r7, #12]
 80079e2:	681b      	ldr	r3, [r3, #0]
 80079e4:	681a      	ldr	r2, [r3, #0]
 80079e6:	68fb      	ldr	r3, [r7, #12]
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80079ee:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80079f0:	68fb      	ldr	r3, [r7, #12]
 80079f2:	68db      	ldr	r3, [r3, #12]
 80079f4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80079f8:	d94b      	bls.n	8007a92 <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80079fa:	68fb      	ldr	r3, [r7, #12]
 80079fc:	685b      	ldr	r3, [r3, #4]
 80079fe:	2b00      	cmp	r3, #0
 8007a00:	d002      	beq.n	8007a08 <HAL_SPI_Transmit+0xfa>
 8007a02:	8afb      	ldrh	r3, [r7, #22]
 8007a04:	2b01      	cmp	r3, #1
 8007a06:	d13e      	bne.n	8007a86 <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007a08:	68fb      	ldr	r3, [r7, #12]
 8007a0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a0c:	881a      	ldrh	r2, [r3, #0]
 8007a0e:	68fb      	ldr	r3, [r7, #12]
 8007a10:	681b      	ldr	r3, [r3, #0]
 8007a12:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007a14:	68fb      	ldr	r3, [r7, #12]
 8007a16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a18:	1c9a      	adds	r2, r3, #2
 8007a1a:	68fb      	ldr	r3, [r7, #12]
 8007a1c:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8007a1e:	68fb      	ldr	r3, [r7, #12]
 8007a20:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007a22:	b29b      	uxth	r3, r3
 8007a24:	3b01      	subs	r3, #1
 8007a26:	b29a      	uxth	r2, r3
 8007a28:	68fb      	ldr	r3, [r7, #12]
 8007a2a:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8007a2c:	e02b      	b.n	8007a86 <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007a2e:	68fb      	ldr	r3, [r7, #12]
 8007a30:	681b      	ldr	r3, [r3, #0]
 8007a32:	689b      	ldr	r3, [r3, #8]
 8007a34:	f003 0302 	and.w	r3, r3, #2
 8007a38:	2b02      	cmp	r3, #2
 8007a3a:	d112      	bne.n	8007a62 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007a3c:	68fb      	ldr	r3, [r7, #12]
 8007a3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a40:	881a      	ldrh	r2, [r3, #0]
 8007a42:	68fb      	ldr	r3, [r7, #12]
 8007a44:	681b      	ldr	r3, [r3, #0]
 8007a46:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007a48:	68fb      	ldr	r3, [r7, #12]
 8007a4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a4c:	1c9a      	adds	r2, r3, #2
 8007a4e:	68fb      	ldr	r3, [r7, #12]
 8007a50:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8007a52:	68fb      	ldr	r3, [r7, #12]
 8007a54:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007a56:	b29b      	uxth	r3, r3
 8007a58:	3b01      	subs	r3, #1
 8007a5a:	b29a      	uxth	r2, r3
 8007a5c:	68fb      	ldr	r3, [r7, #12]
 8007a5e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8007a60:	e011      	b.n	8007a86 <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007a62:	f7fb fc6f 	bl	8003344 <HAL_GetTick>
 8007a66:	4602      	mov	r2, r0
 8007a68:	69bb      	ldr	r3, [r7, #24]
 8007a6a:	1ad3      	subs	r3, r2, r3
 8007a6c:	683a      	ldr	r2, [r7, #0]
 8007a6e:	429a      	cmp	r2, r3
 8007a70:	d803      	bhi.n	8007a7a <HAL_SPI_Transmit+0x16c>
 8007a72:	683b      	ldr	r3, [r7, #0]
 8007a74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a78:	d102      	bne.n	8007a80 <HAL_SPI_Transmit+0x172>
 8007a7a:	683b      	ldr	r3, [r7, #0]
 8007a7c:	2b00      	cmp	r3, #0
 8007a7e:	d102      	bne.n	8007a86 <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 8007a80:	2303      	movs	r3, #3
 8007a82:	77fb      	strb	r3, [r7, #31]
          goto error;
 8007a84:	e0a4      	b.n	8007bd0 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8007a86:	68fb      	ldr	r3, [r7, #12]
 8007a88:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007a8a:	b29b      	uxth	r3, r3
 8007a8c:	2b00      	cmp	r3, #0
 8007a8e:	d1ce      	bne.n	8007a2e <HAL_SPI_Transmit+0x120>
 8007a90:	e07c      	b.n	8007b8c <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007a92:	68fb      	ldr	r3, [r7, #12]
 8007a94:	685b      	ldr	r3, [r3, #4]
 8007a96:	2b00      	cmp	r3, #0
 8007a98:	d002      	beq.n	8007aa0 <HAL_SPI_Transmit+0x192>
 8007a9a:	8afb      	ldrh	r3, [r7, #22]
 8007a9c:	2b01      	cmp	r3, #1
 8007a9e:	d170      	bne.n	8007b82 <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 8007aa0:	68fb      	ldr	r3, [r7, #12]
 8007aa2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007aa4:	b29b      	uxth	r3, r3
 8007aa6:	2b01      	cmp	r3, #1
 8007aa8:	d912      	bls.n	8007ad0 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007aaa:	68fb      	ldr	r3, [r7, #12]
 8007aac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007aae:	881a      	ldrh	r2, [r3, #0]
 8007ab0:	68fb      	ldr	r3, [r7, #12]
 8007ab2:	681b      	ldr	r3, [r3, #0]
 8007ab4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007ab6:	68fb      	ldr	r3, [r7, #12]
 8007ab8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007aba:	1c9a      	adds	r2, r3, #2
 8007abc:	68fb      	ldr	r3, [r7, #12]
 8007abe:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8007ac0:	68fb      	ldr	r3, [r7, #12]
 8007ac2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007ac4:	b29b      	uxth	r3, r3
 8007ac6:	3b02      	subs	r3, #2
 8007ac8:	b29a      	uxth	r2, r3
 8007aca:	68fb      	ldr	r3, [r7, #12]
 8007acc:	87da      	strh	r2, [r3, #62]	; 0x3e
 8007ace:	e058      	b.n	8007b82 <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007ad0:	68fb      	ldr	r3, [r7, #12]
 8007ad2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007ad4:	68fb      	ldr	r3, [r7, #12]
 8007ad6:	681b      	ldr	r3, [r3, #0]
 8007ad8:	330c      	adds	r3, #12
 8007ada:	7812      	ldrb	r2, [r2, #0]
 8007adc:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8007ade:	68fb      	ldr	r3, [r7, #12]
 8007ae0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ae2:	1c5a      	adds	r2, r3, #1
 8007ae4:	68fb      	ldr	r3, [r7, #12]
 8007ae6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8007ae8:	68fb      	ldr	r3, [r7, #12]
 8007aea:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007aec:	b29b      	uxth	r3, r3
 8007aee:	3b01      	subs	r3, #1
 8007af0:	b29a      	uxth	r2, r3
 8007af2:	68fb      	ldr	r3, [r7, #12]
 8007af4:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8007af6:	e044      	b.n	8007b82 <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007af8:	68fb      	ldr	r3, [r7, #12]
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	689b      	ldr	r3, [r3, #8]
 8007afe:	f003 0302 	and.w	r3, r3, #2
 8007b02:	2b02      	cmp	r3, #2
 8007b04:	d12b      	bne.n	8007b5e <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 8007b06:	68fb      	ldr	r3, [r7, #12]
 8007b08:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007b0a:	b29b      	uxth	r3, r3
 8007b0c:	2b01      	cmp	r3, #1
 8007b0e:	d912      	bls.n	8007b36 <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007b10:	68fb      	ldr	r3, [r7, #12]
 8007b12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b14:	881a      	ldrh	r2, [r3, #0]
 8007b16:	68fb      	ldr	r3, [r7, #12]
 8007b18:	681b      	ldr	r3, [r3, #0]
 8007b1a:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8007b1c:	68fb      	ldr	r3, [r7, #12]
 8007b1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b20:	1c9a      	adds	r2, r3, #2
 8007b22:	68fb      	ldr	r3, [r7, #12]
 8007b24:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8007b26:	68fb      	ldr	r3, [r7, #12]
 8007b28:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007b2a:	b29b      	uxth	r3, r3
 8007b2c:	3b02      	subs	r3, #2
 8007b2e:	b29a      	uxth	r2, r3
 8007b30:	68fb      	ldr	r3, [r7, #12]
 8007b32:	87da      	strh	r2, [r3, #62]	; 0x3e
 8007b34:	e025      	b.n	8007b82 <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007b36:	68fb      	ldr	r3, [r7, #12]
 8007b38:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007b3a:	68fb      	ldr	r3, [r7, #12]
 8007b3c:	681b      	ldr	r3, [r3, #0]
 8007b3e:	330c      	adds	r3, #12
 8007b40:	7812      	ldrb	r2, [r2, #0]
 8007b42:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8007b44:	68fb      	ldr	r3, [r7, #12]
 8007b46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b48:	1c5a      	adds	r2, r3, #1
 8007b4a:	68fb      	ldr	r3, [r7, #12]
 8007b4c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8007b4e:	68fb      	ldr	r3, [r7, #12]
 8007b50:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007b52:	b29b      	uxth	r3, r3
 8007b54:	3b01      	subs	r3, #1
 8007b56:	b29a      	uxth	r2, r3
 8007b58:	68fb      	ldr	r3, [r7, #12]
 8007b5a:	87da      	strh	r2, [r3, #62]	; 0x3e
 8007b5c:	e011      	b.n	8007b82 <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007b5e:	f7fb fbf1 	bl	8003344 <HAL_GetTick>
 8007b62:	4602      	mov	r2, r0
 8007b64:	69bb      	ldr	r3, [r7, #24]
 8007b66:	1ad3      	subs	r3, r2, r3
 8007b68:	683a      	ldr	r2, [r7, #0]
 8007b6a:	429a      	cmp	r2, r3
 8007b6c:	d803      	bhi.n	8007b76 <HAL_SPI_Transmit+0x268>
 8007b6e:	683b      	ldr	r3, [r7, #0]
 8007b70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007b74:	d102      	bne.n	8007b7c <HAL_SPI_Transmit+0x26e>
 8007b76:	683b      	ldr	r3, [r7, #0]
 8007b78:	2b00      	cmp	r3, #0
 8007b7a:	d102      	bne.n	8007b82 <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 8007b7c:	2303      	movs	r3, #3
 8007b7e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8007b80:	e026      	b.n	8007bd0 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8007b82:	68fb      	ldr	r3, [r7, #12]
 8007b84:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007b86:	b29b      	uxth	r3, r3
 8007b88:	2b00      	cmp	r3, #0
 8007b8a:	d1b5      	bne.n	8007af8 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007b8c:	69ba      	ldr	r2, [r7, #24]
 8007b8e:	6839      	ldr	r1, [r7, #0]
 8007b90:	68f8      	ldr	r0, [r7, #12]
 8007b92:	f000 fce3 	bl	800855c <SPI_EndRxTxTransaction>
 8007b96:	4603      	mov	r3, r0
 8007b98:	2b00      	cmp	r3, #0
 8007b9a:	d002      	beq.n	8007ba2 <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007b9c:	68fb      	ldr	r3, [r7, #12]
 8007b9e:	2220      	movs	r2, #32
 8007ba0:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007ba2:	68fb      	ldr	r3, [r7, #12]
 8007ba4:	689b      	ldr	r3, [r3, #8]
 8007ba6:	2b00      	cmp	r3, #0
 8007ba8:	d10a      	bne.n	8007bc0 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007baa:	2300      	movs	r3, #0
 8007bac:	613b      	str	r3, [r7, #16]
 8007bae:	68fb      	ldr	r3, [r7, #12]
 8007bb0:	681b      	ldr	r3, [r3, #0]
 8007bb2:	68db      	ldr	r3, [r3, #12]
 8007bb4:	613b      	str	r3, [r7, #16]
 8007bb6:	68fb      	ldr	r3, [r7, #12]
 8007bb8:	681b      	ldr	r3, [r3, #0]
 8007bba:	689b      	ldr	r3, [r3, #8]
 8007bbc:	613b      	str	r3, [r7, #16]
 8007bbe:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007bc0:	68fb      	ldr	r3, [r7, #12]
 8007bc2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007bc4:	2b00      	cmp	r3, #0
 8007bc6:	d002      	beq.n	8007bce <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 8007bc8:	2301      	movs	r3, #1
 8007bca:	77fb      	strb	r3, [r7, #31]
 8007bcc:	e000      	b.n	8007bd0 <HAL_SPI_Transmit+0x2c2>
  }

error:
 8007bce:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8007bd0:	68fb      	ldr	r3, [r7, #12]
 8007bd2:	2201      	movs	r2, #1
 8007bd4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8007bd8:	68fb      	ldr	r3, [r7, #12]
 8007bda:	2200      	movs	r2, #0
 8007bdc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8007be0:	7ffb      	ldrb	r3, [r7, #31]
}
 8007be2:	4618      	mov	r0, r3
 8007be4:	3720      	adds	r7, #32
 8007be6:	46bd      	mov	sp, r7
 8007be8:	bd80      	pop	{r7, pc}

08007bea <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007bea:	b580      	push	{r7, lr}
 8007bec:	b088      	sub	sp, #32
 8007bee:	af02      	add	r7, sp, #8
 8007bf0:	60f8      	str	r0, [r7, #12]
 8007bf2:	60b9      	str	r1, [r7, #8]
 8007bf4:	603b      	str	r3, [r7, #0]
 8007bf6:	4613      	mov	r3, r2
 8007bf8:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8007bfa:	2300      	movs	r3, #0
 8007bfc:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8007bfe:	68fb      	ldr	r3, [r7, #12]
 8007c00:	685b      	ldr	r3, [r3, #4]
 8007c02:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007c06:	d112      	bne.n	8007c2e <HAL_SPI_Receive+0x44>
 8007c08:	68fb      	ldr	r3, [r7, #12]
 8007c0a:	689b      	ldr	r3, [r3, #8]
 8007c0c:	2b00      	cmp	r3, #0
 8007c0e:	d10e      	bne.n	8007c2e <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8007c10:	68fb      	ldr	r3, [r7, #12]
 8007c12:	2204      	movs	r2, #4
 8007c14:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8007c18:	88fa      	ldrh	r2, [r7, #6]
 8007c1a:	683b      	ldr	r3, [r7, #0]
 8007c1c:	9300      	str	r3, [sp, #0]
 8007c1e:	4613      	mov	r3, r2
 8007c20:	68ba      	ldr	r2, [r7, #8]
 8007c22:	68b9      	ldr	r1, [r7, #8]
 8007c24:	68f8      	ldr	r0, [r7, #12]
 8007c26:	f000 f910 	bl	8007e4a <HAL_SPI_TransmitReceive>
 8007c2a:	4603      	mov	r3, r0
 8007c2c:	e109      	b.n	8007e42 <HAL_SPI_Receive+0x258>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007c2e:	68fb      	ldr	r3, [r7, #12]
 8007c30:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8007c34:	2b01      	cmp	r3, #1
 8007c36:	d101      	bne.n	8007c3c <HAL_SPI_Receive+0x52>
 8007c38:	2302      	movs	r3, #2
 8007c3a:	e102      	b.n	8007e42 <HAL_SPI_Receive+0x258>
 8007c3c:	68fb      	ldr	r3, [r7, #12]
 8007c3e:	2201      	movs	r2, #1
 8007c40:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007c44:	f7fb fb7e 	bl	8003344 <HAL_GetTick>
 8007c48:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8007c4a:	68fb      	ldr	r3, [r7, #12]
 8007c4c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8007c50:	b2db      	uxtb	r3, r3
 8007c52:	2b01      	cmp	r3, #1
 8007c54:	d002      	beq.n	8007c5c <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8007c56:	2302      	movs	r3, #2
 8007c58:	75fb      	strb	r3, [r7, #23]
    goto error;
 8007c5a:	e0e9      	b.n	8007e30 <HAL_SPI_Receive+0x246>
  }

  if ((pData == NULL) || (Size == 0U))
 8007c5c:	68bb      	ldr	r3, [r7, #8]
 8007c5e:	2b00      	cmp	r3, #0
 8007c60:	d002      	beq.n	8007c68 <HAL_SPI_Receive+0x7e>
 8007c62:	88fb      	ldrh	r3, [r7, #6]
 8007c64:	2b00      	cmp	r3, #0
 8007c66:	d102      	bne.n	8007c6e <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8007c68:	2301      	movs	r3, #1
 8007c6a:	75fb      	strb	r3, [r7, #23]
    goto error;
 8007c6c:	e0e0      	b.n	8007e30 <HAL_SPI_Receive+0x246>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8007c6e:	68fb      	ldr	r3, [r7, #12]
 8007c70:	2204      	movs	r2, #4
 8007c72:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007c76:	68fb      	ldr	r3, [r7, #12]
 8007c78:	2200      	movs	r2, #0
 8007c7a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8007c7c:	68fb      	ldr	r3, [r7, #12]
 8007c7e:	68ba      	ldr	r2, [r7, #8]
 8007c80:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8007c82:	68fb      	ldr	r3, [r7, #12]
 8007c84:	88fa      	ldrh	r2, [r7, #6]
 8007c86:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8007c8a:	68fb      	ldr	r3, [r7, #12]
 8007c8c:	88fa      	ldrh	r2, [r7, #6]
 8007c8e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8007c92:	68fb      	ldr	r3, [r7, #12]
 8007c94:	2200      	movs	r2, #0
 8007c96:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8007c98:	68fb      	ldr	r3, [r7, #12]
 8007c9a:	2200      	movs	r2, #0
 8007c9c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8007c9e:	68fb      	ldr	r3, [r7, #12]
 8007ca0:	2200      	movs	r2, #0
 8007ca2:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8007ca4:	68fb      	ldr	r3, [r7, #12]
 8007ca6:	2200      	movs	r2, #0
 8007ca8:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8007caa:	68fb      	ldr	r3, [r7, #12]
 8007cac:	2200      	movs	r2, #0
 8007cae:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007cb0:	68fb      	ldr	r3, [r7, #12]
 8007cb2:	68db      	ldr	r3, [r3, #12]
 8007cb4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8007cb8:	d908      	bls.n	8007ccc <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007cba:	68fb      	ldr	r3, [r7, #12]
 8007cbc:	681b      	ldr	r3, [r3, #0]
 8007cbe:	685a      	ldr	r2, [r3, #4]
 8007cc0:	68fb      	ldr	r3, [r7, #12]
 8007cc2:	681b      	ldr	r3, [r3, #0]
 8007cc4:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8007cc8:	605a      	str	r2, [r3, #4]
 8007cca:	e007      	b.n	8007cdc <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007ccc:	68fb      	ldr	r3, [r7, #12]
 8007cce:	681b      	ldr	r3, [r3, #0]
 8007cd0:	685a      	ldr	r2, [r3, #4]
 8007cd2:	68fb      	ldr	r3, [r7, #12]
 8007cd4:	681b      	ldr	r3, [r3, #0]
 8007cd6:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007cda:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007cdc:	68fb      	ldr	r3, [r7, #12]
 8007cde:	689b      	ldr	r3, [r3, #8]
 8007ce0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007ce4:	d10f      	bne.n	8007d06 <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8007ce6:	68fb      	ldr	r3, [r7, #12]
 8007ce8:	681b      	ldr	r3, [r3, #0]
 8007cea:	681a      	ldr	r2, [r3, #0]
 8007cec:	68fb      	ldr	r3, [r7, #12]
 8007cee:	681b      	ldr	r3, [r3, #0]
 8007cf0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007cf4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8007cf6:	68fb      	ldr	r3, [r7, #12]
 8007cf8:	681b      	ldr	r3, [r3, #0]
 8007cfa:	681a      	ldr	r2, [r3, #0]
 8007cfc:	68fb      	ldr	r3, [r7, #12]
 8007cfe:	681b      	ldr	r3, [r3, #0]
 8007d00:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8007d04:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007d06:	68fb      	ldr	r3, [r7, #12]
 8007d08:	681b      	ldr	r3, [r3, #0]
 8007d0a:	681b      	ldr	r3, [r3, #0]
 8007d0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007d10:	2b40      	cmp	r3, #64	; 0x40
 8007d12:	d007      	beq.n	8007d24 <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007d14:	68fb      	ldr	r3, [r7, #12]
 8007d16:	681b      	ldr	r3, [r3, #0]
 8007d18:	681a      	ldr	r2, [r3, #0]
 8007d1a:	68fb      	ldr	r3, [r7, #12]
 8007d1c:	681b      	ldr	r3, [r3, #0]
 8007d1e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007d22:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8007d24:	68fb      	ldr	r3, [r7, #12]
 8007d26:	68db      	ldr	r3, [r3, #12]
 8007d28:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8007d2c:	d867      	bhi.n	8007dfe <HAL_SPI_Receive+0x214>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8007d2e:	e030      	b.n	8007d92 <HAL_SPI_Receive+0x1a8>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8007d30:	68fb      	ldr	r3, [r7, #12]
 8007d32:	681b      	ldr	r3, [r3, #0]
 8007d34:	689b      	ldr	r3, [r3, #8]
 8007d36:	f003 0301 	and.w	r3, r3, #1
 8007d3a:	2b01      	cmp	r3, #1
 8007d3c:	d117      	bne.n	8007d6e <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8007d3e:	68fb      	ldr	r3, [r7, #12]
 8007d40:	681b      	ldr	r3, [r3, #0]
 8007d42:	f103 020c 	add.w	r2, r3, #12
 8007d46:	68fb      	ldr	r3, [r7, #12]
 8007d48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d4a:	7812      	ldrb	r2, [r2, #0]
 8007d4c:	b2d2      	uxtb	r2, r2
 8007d4e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8007d50:	68fb      	ldr	r3, [r7, #12]
 8007d52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d54:	1c5a      	adds	r2, r3, #1
 8007d56:	68fb      	ldr	r3, [r7, #12]
 8007d58:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8007d5a:	68fb      	ldr	r3, [r7, #12]
 8007d5c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007d60:	b29b      	uxth	r3, r3
 8007d62:	3b01      	subs	r3, #1
 8007d64:	b29a      	uxth	r2, r3
 8007d66:	68fb      	ldr	r3, [r7, #12]
 8007d68:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8007d6c:	e011      	b.n	8007d92 <HAL_SPI_Receive+0x1a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007d6e:	f7fb fae9 	bl	8003344 <HAL_GetTick>
 8007d72:	4602      	mov	r2, r0
 8007d74:	693b      	ldr	r3, [r7, #16]
 8007d76:	1ad3      	subs	r3, r2, r3
 8007d78:	683a      	ldr	r2, [r7, #0]
 8007d7a:	429a      	cmp	r2, r3
 8007d7c:	d803      	bhi.n	8007d86 <HAL_SPI_Receive+0x19c>
 8007d7e:	683b      	ldr	r3, [r7, #0]
 8007d80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d84:	d102      	bne.n	8007d8c <HAL_SPI_Receive+0x1a2>
 8007d86:	683b      	ldr	r3, [r7, #0]
 8007d88:	2b00      	cmp	r3, #0
 8007d8a:	d102      	bne.n	8007d92 <HAL_SPI_Receive+0x1a8>
        {
          errorcode = HAL_TIMEOUT;
 8007d8c:	2303      	movs	r3, #3
 8007d8e:	75fb      	strb	r3, [r7, #23]
          goto error;
 8007d90:	e04e      	b.n	8007e30 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 8007d92:	68fb      	ldr	r3, [r7, #12]
 8007d94:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007d98:	b29b      	uxth	r3, r3
 8007d9a:	2b00      	cmp	r3, #0
 8007d9c:	d1c8      	bne.n	8007d30 <HAL_SPI_Receive+0x146>
 8007d9e:	e034      	b.n	8007e0a <HAL_SPI_Receive+0x220>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8007da0:	68fb      	ldr	r3, [r7, #12]
 8007da2:	681b      	ldr	r3, [r3, #0]
 8007da4:	689b      	ldr	r3, [r3, #8]
 8007da6:	f003 0301 	and.w	r3, r3, #1
 8007daa:	2b01      	cmp	r3, #1
 8007dac:	d115      	bne.n	8007dda <HAL_SPI_Receive+0x1f0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007dae:	68fb      	ldr	r3, [r7, #12]
 8007db0:	681b      	ldr	r3, [r3, #0]
 8007db2:	68da      	ldr	r2, [r3, #12]
 8007db4:	68fb      	ldr	r3, [r7, #12]
 8007db6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007db8:	b292      	uxth	r2, r2
 8007dba:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007dbc:	68fb      	ldr	r3, [r7, #12]
 8007dbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007dc0:	1c9a      	adds	r2, r3, #2
 8007dc2:	68fb      	ldr	r3, [r7, #12]
 8007dc4:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8007dc6:	68fb      	ldr	r3, [r7, #12]
 8007dc8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007dcc:	b29b      	uxth	r3, r3
 8007dce:	3b01      	subs	r3, #1
 8007dd0:	b29a      	uxth	r2, r3
 8007dd2:	68fb      	ldr	r3, [r7, #12]
 8007dd4:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8007dd8:	e011      	b.n	8007dfe <HAL_SPI_Receive+0x214>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007dda:	f7fb fab3 	bl	8003344 <HAL_GetTick>
 8007dde:	4602      	mov	r2, r0
 8007de0:	693b      	ldr	r3, [r7, #16]
 8007de2:	1ad3      	subs	r3, r2, r3
 8007de4:	683a      	ldr	r2, [r7, #0]
 8007de6:	429a      	cmp	r2, r3
 8007de8:	d803      	bhi.n	8007df2 <HAL_SPI_Receive+0x208>
 8007dea:	683b      	ldr	r3, [r7, #0]
 8007dec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007df0:	d102      	bne.n	8007df8 <HAL_SPI_Receive+0x20e>
 8007df2:	683b      	ldr	r3, [r7, #0]
 8007df4:	2b00      	cmp	r3, #0
 8007df6:	d102      	bne.n	8007dfe <HAL_SPI_Receive+0x214>
        {
          errorcode = HAL_TIMEOUT;
 8007df8:	2303      	movs	r3, #3
 8007dfa:	75fb      	strb	r3, [r7, #23]
          goto error;
 8007dfc:	e018      	b.n	8007e30 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 8007dfe:	68fb      	ldr	r3, [r7, #12]
 8007e00:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007e04:	b29b      	uxth	r3, r3
 8007e06:	2b00      	cmp	r3, #0
 8007e08:	d1ca      	bne.n	8007da0 <HAL_SPI_Receive+0x1b6>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007e0a:	693a      	ldr	r2, [r7, #16]
 8007e0c:	6839      	ldr	r1, [r7, #0]
 8007e0e:	68f8      	ldr	r0, [r7, #12]
 8007e10:	f000 fb4c 	bl	80084ac <SPI_EndRxTransaction>
 8007e14:	4603      	mov	r3, r0
 8007e16:	2b00      	cmp	r3, #0
 8007e18:	d002      	beq.n	8007e20 <HAL_SPI_Receive+0x236>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007e1a:	68fb      	ldr	r3, [r7, #12]
 8007e1c:	2220      	movs	r2, #32
 8007e1e:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007e20:	68fb      	ldr	r3, [r7, #12]
 8007e22:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007e24:	2b00      	cmp	r3, #0
 8007e26:	d002      	beq.n	8007e2e <HAL_SPI_Receive+0x244>
  {
    errorcode = HAL_ERROR;
 8007e28:	2301      	movs	r3, #1
 8007e2a:	75fb      	strb	r3, [r7, #23]
 8007e2c:	e000      	b.n	8007e30 <HAL_SPI_Receive+0x246>
  }

error :
 8007e2e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8007e30:	68fb      	ldr	r3, [r7, #12]
 8007e32:	2201      	movs	r2, #1
 8007e34:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8007e38:	68fb      	ldr	r3, [r7, #12]
 8007e3a:	2200      	movs	r2, #0
 8007e3c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8007e40:	7dfb      	ldrb	r3, [r7, #23]
}
 8007e42:	4618      	mov	r0, r3
 8007e44:	3718      	adds	r7, #24
 8007e46:	46bd      	mov	sp, r7
 8007e48:	bd80      	pop	{r7, pc}

08007e4a <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8007e4a:	b580      	push	{r7, lr}
 8007e4c:	b08a      	sub	sp, #40	; 0x28
 8007e4e:	af00      	add	r7, sp, #0
 8007e50:	60f8      	str	r0, [r7, #12]
 8007e52:	60b9      	str	r1, [r7, #8]
 8007e54:	607a      	str	r2, [r7, #4]
 8007e56:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8007e58:	2301      	movs	r3, #1
 8007e5a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8007e5c:	2300      	movs	r3, #0
 8007e5e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007e62:	68fb      	ldr	r3, [r7, #12]
 8007e64:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8007e68:	2b01      	cmp	r3, #1
 8007e6a:	d101      	bne.n	8007e70 <HAL_SPI_TransmitReceive+0x26>
 8007e6c:	2302      	movs	r3, #2
 8007e6e:	e1fb      	b.n	8008268 <HAL_SPI_TransmitReceive+0x41e>
 8007e70:	68fb      	ldr	r3, [r7, #12]
 8007e72:	2201      	movs	r2, #1
 8007e74:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007e78:	f7fb fa64 	bl	8003344 <HAL_GetTick>
 8007e7c:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8007e7e:	68fb      	ldr	r3, [r7, #12]
 8007e80:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8007e84:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8007e86:	68fb      	ldr	r3, [r7, #12]
 8007e88:	685b      	ldr	r3, [r3, #4]
 8007e8a:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8007e8c:	887b      	ldrh	r3, [r7, #2]
 8007e8e:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8007e90:	887b      	ldrh	r3, [r7, #2]
 8007e92:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8007e94:	7efb      	ldrb	r3, [r7, #27]
 8007e96:	2b01      	cmp	r3, #1
 8007e98:	d00e      	beq.n	8007eb8 <HAL_SPI_TransmitReceive+0x6e>
 8007e9a:	697b      	ldr	r3, [r7, #20]
 8007e9c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007ea0:	d106      	bne.n	8007eb0 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8007ea2:	68fb      	ldr	r3, [r7, #12]
 8007ea4:	689b      	ldr	r3, [r3, #8]
 8007ea6:	2b00      	cmp	r3, #0
 8007ea8:	d102      	bne.n	8007eb0 <HAL_SPI_TransmitReceive+0x66>
 8007eaa:	7efb      	ldrb	r3, [r7, #27]
 8007eac:	2b04      	cmp	r3, #4
 8007eae:	d003      	beq.n	8007eb8 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8007eb0:	2302      	movs	r3, #2
 8007eb2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8007eb6:	e1cd      	b.n	8008254 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8007eb8:	68bb      	ldr	r3, [r7, #8]
 8007eba:	2b00      	cmp	r3, #0
 8007ebc:	d005      	beq.n	8007eca <HAL_SPI_TransmitReceive+0x80>
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	2b00      	cmp	r3, #0
 8007ec2:	d002      	beq.n	8007eca <HAL_SPI_TransmitReceive+0x80>
 8007ec4:	887b      	ldrh	r3, [r7, #2]
 8007ec6:	2b00      	cmp	r3, #0
 8007ec8:	d103      	bne.n	8007ed2 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8007eca:	2301      	movs	r3, #1
 8007ecc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8007ed0:	e1c0      	b.n	8008254 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8007ed2:	68fb      	ldr	r3, [r7, #12]
 8007ed4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8007ed8:	b2db      	uxtb	r3, r3
 8007eda:	2b04      	cmp	r3, #4
 8007edc:	d003      	beq.n	8007ee6 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8007ede:	68fb      	ldr	r3, [r7, #12]
 8007ee0:	2205      	movs	r2, #5
 8007ee2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007ee6:	68fb      	ldr	r3, [r7, #12]
 8007ee8:	2200      	movs	r2, #0
 8007eea:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8007eec:	68fb      	ldr	r3, [r7, #12]
 8007eee:	687a      	ldr	r2, [r7, #4]
 8007ef0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8007ef2:	68fb      	ldr	r3, [r7, #12]
 8007ef4:	887a      	ldrh	r2, [r7, #2]
 8007ef6:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8007efa:	68fb      	ldr	r3, [r7, #12]
 8007efc:	887a      	ldrh	r2, [r7, #2]
 8007efe:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8007f02:	68fb      	ldr	r3, [r7, #12]
 8007f04:	68ba      	ldr	r2, [r7, #8]
 8007f06:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8007f08:	68fb      	ldr	r3, [r7, #12]
 8007f0a:	887a      	ldrh	r2, [r7, #2]
 8007f0c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8007f0e:	68fb      	ldr	r3, [r7, #12]
 8007f10:	887a      	ldrh	r2, [r7, #2]
 8007f12:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8007f14:	68fb      	ldr	r3, [r7, #12]
 8007f16:	2200      	movs	r2, #0
 8007f18:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8007f1a:	68fb      	ldr	r3, [r7, #12]
 8007f1c:	2200      	movs	r2, #0
 8007f1e:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8007f20:	68fb      	ldr	r3, [r7, #12]
 8007f22:	68db      	ldr	r3, [r3, #12]
 8007f24:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8007f28:	d802      	bhi.n	8007f30 <HAL_SPI_TransmitReceive+0xe6>
 8007f2a:	8a3b      	ldrh	r3, [r7, #16]
 8007f2c:	2b01      	cmp	r3, #1
 8007f2e:	d908      	bls.n	8007f42 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007f30:	68fb      	ldr	r3, [r7, #12]
 8007f32:	681b      	ldr	r3, [r3, #0]
 8007f34:	685a      	ldr	r2, [r3, #4]
 8007f36:	68fb      	ldr	r3, [r7, #12]
 8007f38:	681b      	ldr	r3, [r3, #0]
 8007f3a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8007f3e:	605a      	str	r2, [r3, #4]
 8007f40:	e007      	b.n	8007f52 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007f42:	68fb      	ldr	r3, [r7, #12]
 8007f44:	681b      	ldr	r3, [r3, #0]
 8007f46:	685a      	ldr	r2, [r3, #4]
 8007f48:	68fb      	ldr	r3, [r7, #12]
 8007f4a:	681b      	ldr	r3, [r3, #0]
 8007f4c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007f50:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007f52:	68fb      	ldr	r3, [r7, #12]
 8007f54:	681b      	ldr	r3, [r3, #0]
 8007f56:	681b      	ldr	r3, [r3, #0]
 8007f58:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007f5c:	2b40      	cmp	r3, #64	; 0x40
 8007f5e:	d007      	beq.n	8007f70 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007f60:	68fb      	ldr	r3, [r7, #12]
 8007f62:	681b      	ldr	r3, [r3, #0]
 8007f64:	681a      	ldr	r2, [r3, #0]
 8007f66:	68fb      	ldr	r3, [r7, #12]
 8007f68:	681b      	ldr	r3, [r3, #0]
 8007f6a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007f6e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007f70:	68fb      	ldr	r3, [r7, #12]
 8007f72:	68db      	ldr	r3, [r3, #12]
 8007f74:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8007f78:	d97c      	bls.n	8008074 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007f7a:	68fb      	ldr	r3, [r7, #12]
 8007f7c:	685b      	ldr	r3, [r3, #4]
 8007f7e:	2b00      	cmp	r3, #0
 8007f80:	d002      	beq.n	8007f88 <HAL_SPI_TransmitReceive+0x13e>
 8007f82:	8a7b      	ldrh	r3, [r7, #18]
 8007f84:	2b01      	cmp	r3, #1
 8007f86:	d169      	bne.n	800805c <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007f88:	68fb      	ldr	r3, [r7, #12]
 8007f8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f8c:	881a      	ldrh	r2, [r3, #0]
 8007f8e:	68fb      	ldr	r3, [r7, #12]
 8007f90:	681b      	ldr	r3, [r3, #0]
 8007f92:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007f94:	68fb      	ldr	r3, [r7, #12]
 8007f96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f98:	1c9a      	adds	r2, r3, #2
 8007f9a:	68fb      	ldr	r3, [r7, #12]
 8007f9c:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8007f9e:	68fb      	ldr	r3, [r7, #12]
 8007fa0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007fa2:	b29b      	uxth	r3, r3
 8007fa4:	3b01      	subs	r3, #1
 8007fa6:	b29a      	uxth	r2, r3
 8007fa8:	68fb      	ldr	r3, [r7, #12]
 8007faa:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007fac:	e056      	b.n	800805c <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007fae:	68fb      	ldr	r3, [r7, #12]
 8007fb0:	681b      	ldr	r3, [r3, #0]
 8007fb2:	689b      	ldr	r3, [r3, #8]
 8007fb4:	f003 0302 	and.w	r3, r3, #2
 8007fb8:	2b02      	cmp	r3, #2
 8007fba:	d11b      	bne.n	8007ff4 <HAL_SPI_TransmitReceive+0x1aa>
 8007fbc:	68fb      	ldr	r3, [r7, #12]
 8007fbe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007fc0:	b29b      	uxth	r3, r3
 8007fc2:	2b00      	cmp	r3, #0
 8007fc4:	d016      	beq.n	8007ff4 <HAL_SPI_TransmitReceive+0x1aa>
 8007fc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fc8:	2b01      	cmp	r3, #1
 8007fca:	d113      	bne.n	8007ff4 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007fcc:	68fb      	ldr	r3, [r7, #12]
 8007fce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007fd0:	881a      	ldrh	r2, [r3, #0]
 8007fd2:	68fb      	ldr	r3, [r7, #12]
 8007fd4:	681b      	ldr	r3, [r3, #0]
 8007fd6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007fd8:	68fb      	ldr	r3, [r7, #12]
 8007fda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007fdc:	1c9a      	adds	r2, r3, #2
 8007fde:	68fb      	ldr	r3, [r7, #12]
 8007fe0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8007fe2:	68fb      	ldr	r3, [r7, #12]
 8007fe4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007fe6:	b29b      	uxth	r3, r3
 8007fe8:	3b01      	subs	r3, #1
 8007fea:	b29a      	uxth	r2, r3
 8007fec:	68fb      	ldr	r3, [r7, #12]
 8007fee:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007ff0:	2300      	movs	r3, #0
 8007ff2:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007ff4:	68fb      	ldr	r3, [r7, #12]
 8007ff6:	681b      	ldr	r3, [r3, #0]
 8007ff8:	689b      	ldr	r3, [r3, #8]
 8007ffa:	f003 0301 	and.w	r3, r3, #1
 8007ffe:	2b01      	cmp	r3, #1
 8008000:	d11c      	bne.n	800803c <HAL_SPI_TransmitReceive+0x1f2>
 8008002:	68fb      	ldr	r3, [r7, #12]
 8008004:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008008:	b29b      	uxth	r3, r3
 800800a:	2b00      	cmp	r3, #0
 800800c:	d016      	beq.n	800803c <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800800e:	68fb      	ldr	r3, [r7, #12]
 8008010:	681b      	ldr	r3, [r3, #0]
 8008012:	68da      	ldr	r2, [r3, #12]
 8008014:	68fb      	ldr	r3, [r7, #12]
 8008016:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008018:	b292      	uxth	r2, r2
 800801a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800801c:	68fb      	ldr	r3, [r7, #12]
 800801e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008020:	1c9a      	adds	r2, r3, #2
 8008022:	68fb      	ldr	r3, [r7, #12]
 8008024:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8008026:	68fb      	ldr	r3, [r7, #12]
 8008028:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800802c:	b29b      	uxth	r3, r3
 800802e:	3b01      	subs	r3, #1
 8008030:	b29a      	uxth	r2, r3
 8008032:	68fb      	ldr	r3, [r7, #12]
 8008034:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8008038:	2301      	movs	r3, #1
 800803a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800803c:	f7fb f982 	bl	8003344 <HAL_GetTick>
 8008040:	4602      	mov	r2, r0
 8008042:	69fb      	ldr	r3, [r7, #28]
 8008044:	1ad3      	subs	r3, r2, r3
 8008046:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008048:	429a      	cmp	r2, r3
 800804a:	d807      	bhi.n	800805c <HAL_SPI_TransmitReceive+0x212>
 800804c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800804e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008052:	d003      	beq.n	800805c <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 8008054:	2303      	movs	r3, #3
 8008056:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 800805a:	e0fb      	b.n	8008254 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800805c:	68fb      	ldr	r3, [r7, #12]
 800805e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008060:	b29b      	uxth	r3, r3
 8008062:	2b00      	cmp	r3, #0
 8008064:	d1a3      	bne.n	8007fae <HAL_SPI_TransmitReceive+0x164>
 8008066:	68fb      	ldr	r3, [r7, #12]
 8008068:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800806c:	b29b      	uxth	r3, r3
 800806e:	2b00      	cmp	r3, #0
 8008070:	d19d      	bne.n	8007fae <HAL_SPI_TransmitReceive+0x164>
 8008072:	e0df      	b.n	8008234 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008074:	68fb      	ldr	r3, [r7, #12]
 8008076:	685b      	ldr	r3, [r3, #4]
 8008078:	2b00      	cmp	r3, #0
 800807a:	d003      	beq.n	8008084 <HAL_SPI_TransmitReceive+0x23a>
 800807c:	8a7b      	ldrh	r3, [r7, #18]
 800807e:	2b01      	cmp	r3, #1
 8008080:	f040 80cb 	bne.w	800821a <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 8008084:	68fb      	ldr	r3, [r7, #12]
 8008086:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008088:	b29b      	uxth	r3, r3
 800808a:	2b01      	cmp	r3, #1
 800808c:	d912      	bls.n	80080b4 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800808e:	68fb      	ldr	r3, [r7, #12]
 8008090:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008092:	881a      	ldrh	r2, [r3, #0]
 8008094:	68fb      	ldr	r3, [r7, #12]
 8008096:	681b      	ldr	r3, [r3, #0]
 8008098:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800809a:	68fb      	ldr	r3, [r7, #12]
 800809c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800809e:	1c9a      	adds	r2, r3, #2
 80080a0:	68fb      	ldr	r3, [r7, #12]
 80080a2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 80080a4:	68fb      	ldr	r3, [r7, #12]
 80080a6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80080a8:	b29b      	uxth	r3, r3
 80080aa:	3b02      	subs	r3, #2
 80080ac:	b29a      	uxth	r2, r3
 80080ae:	68fb      	ldr	r3, [r7, #12]
 80080b0:	87da      	strh	r2, [r3, #62]	; 0x3e
 80080b2:	e0b2      	b.n	800821a <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80080b4:	68fb      	ldr	r3, [r7, #12]
 80080b6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80080b8:	68fb      	ldr	r3, [r7, #12]
 80080ba:	681b      	ldr	r3, [r3, #0]
 80080bc:	330c      	adds	r3, #12
 80080be:	7812      	ldrb	r2, [r2, #0]
 80080c0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80080c2:	68fb      	ldr	r3, [r7, #12]
 80080c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80080c6:	1c5a      	adds	r2, r3, #1
 80080c8:	68fb      	ldr	r3, [r7, #12]
 80080ca:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80080cc:	68fb      	ldr	r3, [r7, #12]
 80080ce:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80080d0:	b29b      	uxth	r3, r3
 80080d2:	3b01      	subs	r3, #1
 80080d4:	b29a      	uxth	r2, r3
 80080d6:	68fb      	ldr	r3, [r7, #12]
 80080d8:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80080da:	e09e      	b.n	800821a <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80080dc:	68fb      	ldr	r3, [r7, #12]
 80080de:	681b      	ldr	r3, [r3, #0]
 80080e0:	689b      	ldr	r3, [r3, #8]
 80080e2:	f003 0302 	and.w	r3, r3, #2
 80080e6:	2b02      	cmp	r3, #2
 80080e8:	d134      	bne.n	8008154 <HAL_SPI_TransmitReceive+0x30a>
 80080ea:	68fb      	ldr	r3, [r7, #12]
 80080ec:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80080ee:	b29b      	uxth	r3, r3
 80080f0:	2b00      	cmp	r3, #0
 80080f2:	d02f      	beq.n	8008154 <HAL_SPI_TransmitReceive+0x30a>
 80080f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080f6:	2b01      	cmp	r3, #1
 80080f8:	d12c      	bne.n	8008154 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 80080fa:	68fb      	ldr	r3, [r7, #12]
 80080fc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80080fe:	b29b      	uxth	r3, r3
 8008100:	2b01      	cmp	r3, #1
 8008102:	d912      	bls.n	800812a <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008104:	68fb      	ldr	r3, [r7, #12]
 8008106:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008108:	881a      	ldrh	r2, [r3, #0]
 800810a:	68fb      	ldr	r3, [r7, #12]
 800810c:	681b      	ldr	r3, [r3, #0]
 800810e:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8008110:	68fb      	ldr	r3, [r7, #12]
 8008112:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008114:	1c9a      	adds	r2, r3, #2
 8008116:	68fb      	ldr	r3, [r7, #12]
 8008118:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800811a:	68fb      	ldr	r3, [r7, #12]
 800811c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800811e:	b29b      	uxth	r3, r3
 8008120:	3b02      	subs	r3, #2
 8008122:	b29a      	uxth	r2, r3
 8008124:	68fb      	ldr	r3, [r7, #12]
 8008126:	87da      	strh	r2, [r3, #62]	; 0x3e
 8008128:	e012      	b.n	8008150 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800812a:	68fb      	ldr	r3, [r7, #12]
 800812c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800812e:	68fb      	ldr	r3, [r7, #12]
 8008130:	681b      	ldr	r3, [r3, #0]
 8008132:	330c      	adds	r3, #12
 8008134:	7812      	ldrb	r2, [r2, #0]
 8008136:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8008138:	68fb      	ldr	r3, [r7, #12]
 800813a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800813c:	1c5a      	adds	r2, r3, #1
 800813e:	68fb      	ldr	r3, [r7, #12]
 8008140:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8008142:	68fb      	ldr	r3, [r7, #12]
 8008144:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008146:	b29b      	uxth	r3, r3
 8008148:	3b01      	subs	r3, #1
 800814a:	b29a      	uxth	r2, r3
 800814c:	68fb      	ldr	r3, [r7, #12]
 800814e:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8008150:	2300      	movs	r3, #0
 8008152:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8008154:	68fb      	ldr	r3, [r7, #12]
 8008156:	681b      	ldr	r3, [r3, #0]
 8008158:	689b      	ldr	r3, [r3, #8]
 800815a:	f003 0301 	and.w	r3, r3, #1
 800815e:	2b01      	cmp	r3, #1
 8008160:	d148      	bne.n	80081f4 <HAL_SPI_TransmitReceive+0x3aa>
 8008162:	68fb      	ldr	r3, [r7, #12]
 8008164:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008168:	b29b      	uxth	r3, r3
 800816a:	2b00      	cmp	r3, #0
 800816c:	d042      	beq.n	80081f4 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 800816e:	68fb      	ldr	r3, [r7, #12]
 8008170:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008174:	b29b      	uxth	r3, r3
 8008176:	2b01      	cmp	r3, #1
 8008178:	d923      	bls.n	80081c2 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800817a:	68fb      	ldr	r3, [r7, #12]
 800817c:	681b      	ldr	r3, [r3, #0]
 800817e:	68da      	ldr	r2, [r3, #12]
 8008180:	68fb      	ldr	r3, [r7, #12]
 8008182:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008184:	b292      	uxth	r2, r2
 8008186:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8008188:	68fb      	ldr	r3, [r7, #12]
 800818a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800818c:	1c9a      	adds	r2, r3, #2
 800818e:	68fb      	ldr	r3, [r7, #12]
 8008190:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8008192:	68fb      	ldr	r3, [r7, #12]
 8008194:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008198:	b29b      	uxth	r3, r3
 800819a:	3b02      	subs	r3, #2
 800819c:	b29a      	uxth	r2, r3
 800819e:	68fb      	ldr	r3, [r7, #12]
 80081a0:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 80081a4:	68fb      	ldr	r3, [r7, #12]
 80081a6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80081aa:	b29b      	uxth	r3, r3
 80081ac:	2b01      	cmp	r3, #1
 80081ae:	d81f      	bhi.n	80081f0 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80081b0:	68fb      	ldr	r3, [r7, #12]
 80081b2:	681b      	ldr	r3, [r3, #0]
 80081b4:	685a      	ldr	r2, [r3, #4]
 80081b6:	68fb      	ldr	r3, [r7, #12]
 80081b8:	681b      	ldr	r3, [r3, #0]
 80081ba:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80081be:	605a      	str	r2, [r3, #4]
 80081c0:	e016      	b.n	80081f0 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80081c2:	68fb      	ldr	r3, [r7, #12]
 80081c4:	681b      	ldr	r3, [r3, #0]
 80081c6:	f103 020c 	add.w	r2, r3, #12
 80081ca:	68fb      	ldr	r3, [r7, #12]
 80081cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80081ce:	7812      	ldrb	r2, [r2, #0]
 80081d0:	b2d2      	uxtb	r2, r2
 80081d2:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 80081d4:	68fb      	ldr	r3, [r7, #12]
 80081d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80081d8:	1c5a      	adds	r2, r3, #1
 80081da:	68fb      	ldr	r3, [r7, #12]
 80081dc:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 80081de:	68fb      	ldr	r3, [r7, #12]
 80081e0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80081e4:	b29b      	uxth	r3, r3
 80081e6:	3b01      	subs	r3, #1
 80081e8:	b29a      	uxth	r2, r3
 80081ea:	68fb      	ldr	r3, [r7, #12]
 80081ec:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80081f0:	2301      	movs	r3, #1
 80081f2:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80081f4:	f7fb f8a6 	bl	8003344 <HAL_GetTick>
 80081f8:	4602      	mov	r2, r0
 80081fa:	69fb      	ldr	r3, [r7, #28]
 80081fc:	1ad3      	subs	r3, r2, r3
 80081fe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008200:	429a      	cmp	r2, r3
 8008202:	d803      	bhi.n	800820c <HAL_SPI_TransmitReceive+0x3c2>
 8008204:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008206:	f1b3 3fff 	cmp.w	r3, #4294967295
 800820a:	d102      	bne.n	8008212 <HAL_SPI_TransmitReceive+0x3c8>
 800820c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800820e:	2b00      	cmp	r3, #0
 8008210:	d103      	bne.n	800821a <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 8008212:	2303      	movs	r3, #3
 8008214:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8008218:	e01c      	b.n	8008254 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800821a:	68fb      	ldr	r3, [r7, #12]
 800821c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800821e:	b29b      	uxth	r3, r3
 8008220:	2b00      	cmp	r3, #0
 8008222:	f47f af5b 	bne.w	80080dc <HAL_SPI_TransmitReceive+0x292>
 8008226:	68fb      	ldr	r3, [r7, #12]
 8008228:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800822c:	b29b      	uxth	r3, r3
 800822e:	2b00      	cmp	r3, #0
 8008230:	f47f af54 	bne.w	80080dc <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8008234:	69fa      	ldr	r2, [r7, #28]
 8008236:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008238:	68f8      	ldr	r0, [r7, #12]
 800823a:	f000 f98f 	bl	800855c <SPI_EndRxTxTransaction>
 800823e:	4603      	mov	r3, r0
 8008240:	2b00      	cmp	r3, #0
 8008242:	d006      	beq.n	8008252 <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 8008244:	2301      	movs	r3, #1
 8008246:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800824a:	68fb      	ldr	r3, [r7, #12]
 800824c:	2220      	movs	r2, #32
 800824e:	661a      	str	r2, [r3, #96]	; 0x60
 8008250:	e000      	b.n	8008254 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 8008252:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8008254:	68fb      	ldr	r3, [r7, #12]
 8008256:	2201      	movs	r2, #1
 8008258:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 800825c:	68fb      	ldr	r3, [r7, #12]
 800825e:	2200      	movs	r2, #0
 8008260:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8008264:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8008268:	4618      	mov	r0, r3
 800826a:	3728      	adds	r7, #40	; 0x28
 800826c:	46bd      	mov	sp, r7
 800826e:	bd80      	pop	{r7, pc}

08008270 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8008270:	b580      	push	{r7, lr}
 8008272:	b088      	sub	sp, #32
 8008274:	af00      	add	r7, sp, #0
 8008276:	60f8      	str	r0, [r7, #12]
 8008278:	60b9      	str	r1, [r7, #8]
 800827a:	603b      	str	r3, [r7, #0]
 800827c:	4613      	mov	r3, r2
 800827e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8008280:	f7fb f860 	bl	8003344 <HAL_GetTick>
 8008284:	4602      	mov	r2, r0
 8008286:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008288:	1a9b      	subs	r3, r3, r2
 800828a:	683a      	ldr	r2, [r7, #0]
 800828c:	4413      	add	r3, r2
 800828e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8008290:	f7fb f858 	bl	8003344 <HAL_GetTick>
 8008294:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8008296:	4b39      	ldr	r3, [pc, #228]	; (800837c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8008298:	681b      	ldr	r3, [r3, #0]
 800829a:	015b      	lsls	r3, r3, #5
 800829c:	0d1b      	lsrs	r3, r3, #20
 800829e:	69fa      	ldr	r2, [r7, #28]
 80082a0:	fb02 f303 	mul.w	r3, r2, r3
 80082a4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80082a6:	e054      	b.n	8008352 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80082a8:	683b      	ldr	r3, [r7, #0]
 80082aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80082ae:	d050      	beq.n	8008352 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80082b0:	f7fb f848 	bl	8003344 <HAL_GetTick>
 80082b4:	4602      	mov	r2, r0
 80082b6:	69bb      	ldr	r3, [r7, #24]
 80082b8:	1ad3      	subs	r3, r2, r3
 80082ba:	69fa      	ldr	r2, [r7, #28]
 80082bc:	429a      	cmp	r2, r3
 80082be:	d902      	bls.n	80082c6 <SPI_WaitFlagStateUntilTimeout+0x56>
 80082c0:	69fb      	ldr	r3, [r7, #28]
 80082c2:	2b00      	cmp	r3, #0
 80082c4:	d13d      	bne.n	8008342 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80082c6:	68fb      	ldr	r3, [r7, #12]
 80082c8:	681b      	ldr	r3, [r3, #0]
 80082ca:	685a      	ldr	r2, [r3, #4]
 80082cc:	68fb      	ldr	r3, [r7, #12]
 80082ce:	681b      	ldr	r3, [r3, #0]
 80082d0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80082d4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80082d6:	68fb      	ldr	r3, [r7, #12]
 80082d8:	685b      	ldr	r3, [r3, #4]
 80082da:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80082de:	d111      	bne.n	8008304 <SPI_WaitFlagStateUntilTimeout+0x94>
 80082e0:	68fb      	ldr	r3, [r7, #12]
 80082e2:	689b      	ldr	r3, [r3, #8]
 80082e4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80082e8:	d004      	beq.n	80082f4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80082ea:	68fb      	ldr	r3, [r7, #12]
 80082ec:	689b      	ldr	r3, [r3, #8]
 80082ee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80082f2:	d107      	bne.n	8008304 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80082f4:	68fb      	ldr	r3, [r7, #12]
 80082f6:	681b      	ldr	r3, [r3, #0]
 80082f8:	681a      	ldr	r2, [r3, #0]
 80082fa:	68fb      	ldr	r3, [r7, #12]
 80082fc:	681b      	ldr	r3, [r3, #0]
 80082fe:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008302:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8008304:	68fb      	ldr	r3, [r7, #12]
 8008306:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008308:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800830c:	d10f      	bne.n	800832e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800830e:	68fb      	ldr	r3, [r7, #12]
 8008310:	681b      	ldr	r3, [r3, #0]
 8008312:	681a      	ldr	r2, [r3, #0]
 8008314:	68fb      	ldr	r3, [r7, #12]
 8008316:	681b      	ldr	r3, [r3, #0]
 8008318:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800831c:	601a      	str	r2, [r3, #0]
 800831e:	68fb      	ldr	r3, [r7, #12]
 8008320:	681b      	ldr	r3, [r3, #0]
 8008322:	681a      	ldr	r2, [r3, #0]
 8008324:	68fb      	ldr	r3, [r7, #12]
 8008326:	681b      	ldr	r3, [r3, #0]
 8008328:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800832c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800832e:	68fb      	ldr	r3, [r7, #12]
 8008330:	2201      	movs	r2, #1
 8008332:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8008336:	68fb      	ldr	r3, [r7, #12]
 8008338:	2200      	movs	r2, #0
 800833a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800833e:	2303      	movs	r3, #3
 8008340:	e017      	b.n	8008372 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8008342:	697b      	ldr	r3, [r7, #20]
 8008344:	2b00      	cmp	r3, #0
 8008346:	d101      	bne.n	800834c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8008348:	2300      	movs	r3, #0
 800834a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800834c:	697b      	ldr	r3, [r7, #20]
 800834e:	3b01      	subs	r3, #1
 8008350:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8008352:	68fb      	ldr	r3, [r7, #12]
 8008354:	681b      	ldr	r3, [r3, #0]
 8008356:	689a      	ldr	r2, [r3, #8]
 8008358:	68bb      	ldr	r3, [r7, #8]
 800835a:	4013      	ands	r3, r2
 800835c:	68ba      	ldr	r2, [r7, #8]
 800835e:	429a      	cmp	r2, r3
 8008360:	bf0c      	ite	eq
 8008362:	2301      	moveq	r3, #1
 8008364:	2300      	movne	r3, #0
 8008366:	b2db      	uxtb	r3, r3
 8008368:	461a      	mov	r2, r3
 800836a:	79fb      	ldrb	r3, [r7, #7]
 800836c:	429a      	cmp	r2, r3
 800836e:	d19b      	bne.n	80082a8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8008370:	2300      	movs	r3, #0
}
 8008372:	4618      	mov	r0, r3
 8008374:	3720      	adds	r7, #32
 8008376:	46bd      	mov	sp, r7
 8008378:	bd80      	pop	{r7, pc}
 800837a:	bf00      	nop
 800837c:	2000001c 	.word	0x2000001c

08008380 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8008380:	b580      	push	{r7, lr}
 8008382:	b08a      	sub	sp, #40	; 0x28
 8008384:	af00      	add	r7, sp, #0
 8008386:	60f8      	str	r0, [r7, #12]
 8008388:	60b9      	str	r1, [r7, #8]
 800838a:	607a      	str	r2, [r7, #4]
 800838c:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800838e:	2300      	movs	r3, #0
 8008390:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8008392:	f7fa ffd7 	bl	8003344 <HAL_GetTick>
 8008396:	4602      	mov	r2, r0
 8008398:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800839a:	1a9b      	subs	r3, r3, r2
 800839c:	683a      	ldr	r2, [r7, #0]
 800839e:	4413      	add	r3, r2
 80083a0:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 80083a2:	f7fa ffcf 	bl	8003344 <HAL_GetTick>
 80083a6:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80083a8:	68fb      	ldr	r3, [r7, #12]
 80083aa:	681b      	ldr	r3, [r3, #0]
 80083ac:	330c      	adds	r3, #12
 80083ae:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80083b0:	4b3d      	ldr	r3, [pc, #244]	; (80084a8 <SPI_WaitFifoStateUntilTimeout+0x128>)
 80083b2:	681a      	ldr	r2, [r3, #0]
 80083b4:	4613      	mov	r3, r2
 80083b6:	009b      	lsls	r3, r3, #2
 80083b8:	4413      	add	r3, r2
 80083ba:	00da      	lsls	r2, r3, #3
 80083bc:	1ad3      	subs	r3, r2, r3
 80083be:	0d1b      	lsrs	r3, r3, #20
 80083c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80083c2:	fb02 f303 	mul.w	r3, r2, r3
 80083c6:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 80083c8:	e060      	b.n	800848c <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80083ca:	68bb      	ldr	r3, [r7, #8]
 80083cc:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80083d0:	d107      	bne.n	80083e2 <SPI_WaitFifoStateUntilTimeout+0x62>
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	2b00      	cmp	r3, #0
 80083d6:	d104      	bne.n	80083e2 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 80083d8:	69fb      	ldr	r3, [r7, #28]
 80083da:	781b      	ldrb	r3, [r3, #0]
 80083dc:	b2db      	uxtb	r3, r3
 80083de:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80083e0:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 80083e2:	683b      	ldr	r3, [r7, #0]
 80083e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80083e8:	d050      	beq.n	800848c <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80083ea:	f7fa ffab 	bl	8003344 <HAL_GetTick>
 80083ee:	4602      	mov	r2, r0
 80083f0:	6a3b      	ldr	r3, [r7, #32]
 80083f2:	1ad3      	subs	r3, r2, r3
 80083f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80083f6:	429a      	cmp	r2, r3
 80083f8:	d902      	bls.n	8008400 <SPI_WaitFifoStateUntilTimeout+0x80>
 80083fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083fc:	2b00      	cmp	r3, #0
 80083fe:	d13d      	bne.n	800847c <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8008400:	68fb      	ldr	r3, [r7, #12]
 8008402:	681b      	ldr	r3, [r3, #0]
 8008404:	685a      	ldr	r2, [r3, #4]
 8008406:	68fb      	ldr	r3, [r7, #12]
 8008408:	681b      	ldr	r3, [r3, #0]
 800840a:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800840e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008410:	68fb      	ldr	r3, [r7, #12]
 8008412:	685b      	ldr	r3, [r3, #4]
 8008414:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008418:	d111      	bne.n	800843e <SPI_WaitFifoStateUntilTimeout+0xbe>
 800841a:	68fb      	ldr	r3, [r7, #12]
 800841c:	689b      	ldr	r3, [r3, #8]
 800841e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008422:	d004      	beq.n	800842e <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008424:	68fb      	ldr	r3, [r7, #12]
 8008426:	689b      	ldr	r3, [r3, #8]
 8008428:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800842c:	d107      	bne.n	800843e <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800842e:	68fb      	ldr	r3, [r7, #12]
 8008430:	681b      	ldr	r3, [r3, #0]
 8008432:	681a      	ldr	r2, [r3, #0]
 8008434:	68fb      	ldr	r3, [r7, #12]
 8008436:	681b      	ldr	r3, [r3, #0]
 8008438:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800843c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800843e:	68fb      	ldr	r3, [r7, #12]
 8008440:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008442:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008446:	d10f      	bne.n	8008468 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8008448:	68fb      	ldr	r3, [r7, #12]
 800844a:	681b      	ldr	r3, [r3, #0]
 800844c:	681a      	ldr	r2, [r3, #0]
 800844e:	68fb      	ldr	r3, [r7, #12]
 8008450:	681b      	ldr	r3, [r3, #0]
 8008452:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008456:	601a      	str	r2, [r3, #0]
 8008458:	68fb      	ldr	r3, [r7, #12]
 800845a:	681b      	ldr	r3, [r3, #0]
 800845c:	681a      	ldr	r2, [r3, #0]
 800845e:	68fb      	ldr	r3, [r7, #12]
 8008460:	681b      	ldr	r3, [r3, #0]
 8008462:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008466:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8008468:	68fb      	ldr	r3, [r7, #12]
 800846a:	2201      	movs	r2, #1
 800846c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8008470:	68fb      	ldr	r3, [r7, #12]
 8008472:	2200      	movs	r2, #0
 8008474:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8008478:	2303      	movs	r3, #3
 800847a:	e010      	b.n	800849e <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800847c:	69bb      	ldr	r3, [r7, #24]
 800847e:	2b00      	cmp	r3, #0
 8008480:	d101      	bne.n	8008486 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8008482:	2300      	movs	r3, #0
 8008484:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8008486:	69bb      	ldr	r3, [r7, #24]
 8008488:	3b01      	subs	r3, #1
 800848a:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 800848c:	68fb      	ldr	r3, [r7, #12]
 800848e:	681b      	ldr	r3, [r3, #0]
 8008490:	689a      	ldr	r2, [r3, #8]
 8008492:	68bb      	ldr	r3, [r7, #8]
 8008494:	4013      	ands	r3, r2
 8008496:	687a      	ldr	r2, [r7, #4]
 8008498:	429a      	cmp	r2, r3
 800849a:	d196      	bne.n	80083ca <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 800849c:	2300      	movs	r3, #0
}
 800849e:	4618      	mov	r0, r3
 80084a0:	3728      	adds	r7, #40	; 0x28
 80084a2:	46bd      	mov	sp, r7
 80084a4:	bd80      	pop	{r7, pc}
 80084a6:	bf00      	nop
 80084a8:	2000001c 	.word	0x2000001c

080084ac <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80084ac:	b580      	push	{r7, lr}
 80084ae:	b086      	sub	sp, #24
 80084b0:	af02      	add	r7, sp, #8
 80084b2:	60f8      	str	r0, [r7, #12]
 80084b4:	60b9      	str	r1, [r7, #8]
 80084b6:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80084b8:	68fb      	ldr	r3, [r7, #12]
 80084ba:	685b      	ldr	r3, [r3, #4]
 80084bc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80084c0:	d111      	bne.n	80084e6 <SPI_EndRxTransaction+0x3a>
 80084c2:	68fb      	ldr	r3, [r7, #12]
 80084c4:	689b      	ldr	r3, [r3, #8]
 80084c6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80084ca:	d004      	beq.n	80084d6 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80084cc:	68fb      	ldr	r3, [r7, #12]
 80084ce:	689b      	ldr	r3, [r3, #8]
 80084d0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80084d4:	d107      	bne.n	80084e6 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80084d6:	68fb      	ldr	r3, [r7, #12]
 80084d8:	681b      	ldr	r3, [r3, #0]
 80084da:	681a      	ldr	r2, [r3, #0]
 80084dc:	68fb      	ldr	r3, [r7, #12]
 80084de:	681b      	ldr	r3, [r3, #0]
 80084e0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80084e4:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	9300      	str	r3, [sp, #0]
 80084ea:	68bb      	ldr	r3, [r7, #8]
 80084ec:	2200      	movs	r2, #0
 80084ee:	2180      	movs	r1, #128	; 0x80
 80084f0:	68f8      	ldr	r0, [r7, #12]
 80084f2:	f7ff febd 	bl	8008270 <SPI_WaitFlagStateUntilTimeout>
 80084f6:	4603      	mov	r3, r0
 80084f8:	2b00      	cmp	r3, #0
 80084fa:	d007      	beq.n	800850c <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80084fc:	68fb      	ldr	r3, [r7, #12]
 80084fe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008500:	f043 0220 	orr.w	r2, r3, #32
 8008504:	68fb      	ldr	r3, [r7, #12]
 8008506:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8008508:	2303      	movs	r3, #3
 800850a:	e023      	b.n	8008554 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800850c:	68fb      	ldr	r3, [r7, #12]
 800850e:	685b      	ldr	r3, [r3, #4]
 8008510:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008514:	d11d      	bne.n	8008552 <SPI_EndRxTransaction+0xa6>
 8008516:	68fb      	ldr	r3, [r7, #12]
 8008518:	689b      	ldr	r3, [r3, #8]
 800851a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800851e:	d004      	beq.n	800852a <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008520:	68fb      	ldr	r3, [r7, #12]
 8008522:	689b      	ldr	r3, [r3, #8]
 8008524:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008528:	d113      	bne.n	8008552 <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	9300      	str	r3, [sp, #0]
 800852e:	68bb      	ldr	r3, [r7, #8]
 8008530:	2200      	movs	r2, #0
 8008532:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8008536:	68f8      	ldr	r0, [r7, #12]
 8008538:	f7ff ff22 	bl	8008380 <SPI_WaitFifoStateUntilTimeout>
 800853c:	4603      	mov	r3, r0
 800853e:	2b00      	cmp	r3, #0
 8008540:	d007      	beq.n	8008552 <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008542:	68fb      	ldr	r3, [r7, #12]
 8008544:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008546:	f043 0220 	orr.w	r2, r3, #32
 800854a:	68fb      	ldr	r3, [r7, #12]
 800854c:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 800854e:	2303      	movs	r3, #3
 8008550:	e000      	b.n	8008554 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 8008552:	2300      	movs	r3, #0
}
 8008554:	4618      	mov	r0, r3
 8008556:	3710      	adds	r7, #16
 8008558:	46bd      	mov	sp, r7
 800855a:	bd80      	pop	{r7, pc}

0800855c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800855c:	b580      	push	{r7, lr}
 800855e:	b086      	sub	sp, #24
 8008560:	af02      	add	r7, sp, #8
 8008562:	60f8      	str	r0, [r7, #12]
 8008564:	60b9      	str	r1, [r7, #8]
 8008566:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	9300      	str	r3, [sp, #0]
 800856c:	68bb      	ldr	r3, [r7, #8]
 800856e:	2200      	movs	r2, #0
 8008570:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8008574:	68f8      	ldr	r0, [r7, #12]
 8008576:	f7ff ff03 	bl	8008380 <SPI_WaitFifoStateUntilTimeout>
 800857a:	4603      	mov	r3, r0
 800857c:	2b00      	cmp	r3, #0
 800857e:	d007      	beq.n	8008590 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008580:	68fb      	ldr	r3, [r7, #12]
 8008582:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008584:	f043 0220 	orr.w	r2, r3, #32
 8008588:	68fb      	ldr	r3, [r7, #12]
 800858a:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800858c:	2303      	movs	r3, #3
 800858e:	e027      	b.n	80085e0 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	9300      	str	r3, [sp, #0]
 8008594:	68bb      	ldr	r3, [r7, #8]
 8008596:	2200      	movs	r2, #0
 8008598:	2180      	movs	r1, #128	; 0x80
 800859a:	68f8      	ldr	r0, [r7, #12]
 800859c:	f7ff fe68 	bl	8008270 <SPI_WaitFlagStateUntilTimeout>
 80085a0:	4603      	mov	r3, r0
 80085a2:	2b00      	cmp	r3, #0
 80085a4:	d007      	beq.n	80085b6 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80085a6:	68fb      	ldr	r3, [r7, #12]
 80085a8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80085aa:	f043 0220 	orr.w	r2, r3, #32
 80085ae:	68fb      	ldr	r3, [r7, #12]
 80085b0:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80085b2:	2303      	movs	r3, #3
 80085b4:	e014      	b.n	80085e0 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	9300      	str	r3, [sp, #0]
 80085ba:	68bb      	ldr	r3, [r7, #8]
 80085bc:	2200      	movs	r2, #0
 80085be:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80085c2:	68f8      	ldr	r0, [r7, #12]
 80085c4:	f7ff fedc 	bl	8008380 <SPI_WaitFifoStateUntilTimeout>
 80085c8:	4603      	mov	r3, r0
 80085ca:	2b00      	cmp	r3, #0
 80085cc:	d007      	beq.n	80085de <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80085ce:	68fb      	ldr	r3, [r7, #12]
 80085d0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80085d2:	f043 0220 	orr.w	r2, r3, #32
 80085d6:	68fb      	ldr	r3, [r7, #12]
 80085d8:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80085da:	2303      	movs	r3, #3
 80085dc:	e000      	b.n	80085e0 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80085de:	2300      	movs	r3, #0
}
 80085e0:	4618      	mov	r0, r3
 80085e2:	3710      	adds	r7, #16
 80085e4:	46bd      	mov	sp, r7
 80085e6:	bd80      	pop	{r7, pc}

080085e8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80085e8:	b580      	push	{r7, lr}
 80085ea:	b082      	sub	sp, #8
 80085ec:	af00      	add	r7, sp, #0
 80085ee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	2b00      	cmp	r3, #0
 80085f4:	d101      	bne.n	80085fa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80085f6:	2301      	movs	r3, #1
 80085f8:	e049      	b.n	800868e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008600:	b2db      	uxtb	r3, r3
 8008602:	2b00      	cmp	r3, #0
 8008604:	d106      	bne.n	8008614 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	2200      	movs	r2, #0
 800860a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800860e:	6878      	ldr	r0, [r7, #4]
 8008610:	f7fa f9ee 	bl	80029f0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	2202      	movs	r2, #2
 8008618:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	681a      	ldr	r2, [r3, #0]
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	3304      	adds	r3, #4
 8008624:	4619      	mov	r1, r3
 8008626:	4610      	mov	r0, r2
 8008628:	f000 fef6 	bl	8009418 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	2201      	movs	r2, #1
 8008630:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	2201      	movs	r2, #1
 8008638:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	2201      	movs	r2, #1
 8008640:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	2201      	movs	r2, #1
 8008648:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	2201      	movs	r2, #1
 8008650:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	2201      	movs	r2, #1
 8008658:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	2201      	movs	r2, #1
 8008660:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	2201      	movs	r2, #1
 8008668:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	2201      	movs	r2, #1
 8008670:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	2201      	movs	r2, #1
 8008678:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	2201      	movs	r2, #1
 8008680:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	2201      	movs	r2, #1
 8008688:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800868c:	2300      	movs	r3, #0
}
 800868e:	4618      	mov	r0, r3
 8008690:	3708      	adds	r7, #8
 8008692:	46bd      	mov	sp, r7
 8008694:	bd80      	pop	{r7, pc}

08008696 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8008696:	b580      	push	{r7, lr}
 8008698:	b082      	sub	sp, #8
 800869a:	af00      	add	r7, sp, #0
 800869c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	2b00      	cmp	r3, #0
 80086a2:	d101      	bne.n	80086a8 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80086a4:	2301      	movs	r3, #1
 80086a6:	e049      	b.n	800873c <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80086ae:	b2db      	uxtb	r3, r3
 80086b0:	2b00      	cmp	r3, #0
 80086b2:	d106      	bne.n	80086c2 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	2200      	movs	r2, #0
 80086b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80086bc:	6878      	ldr	r0, [r7, #4]
 80086be:	f000 f841 	bl	8008744 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	2202      	movs	r2, #2
 80086c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	681a      	ldr	r2, [r3, #0]
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	3304      	adds	r3, #4
 80086d2:	4619      	mov	r1, r3
 80086d4:	4610      	mov	r0, r2
 80086d6:	f000 fe9f 	bl	8009418 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	2201      	movs	r2, #1
 80086de:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	2201      	movs	r2, #1
 80086e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	2201      	movs	r2, #1
 80086ee:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	2201      	movs	r2, #1
 80086f6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	2201      	movs	r2, #1
 80086fe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	2201      	movs	r2, #1
 8008706:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	2201      	movs	r2, #1
 800870e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	2201      	movs	r2, #1
 8008716:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	2201      	movs	r2, #1
 800871e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	2201      	movs	r2, #1
 8008726:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	2201      	movs	r2, #1
 800872e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	2201      	movs	r2, #1
 8008736:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800873a:	2300      	movs	r3, #0
}
 800873c:	4618      	mov	r0, r3
 800873e:	3708      	adds	r7, #8
 8008740:	46bd      	mov	sp, r7
 8008742:	bd80      	pop	{r7, pc}

08008744 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8008744:	b480      	push	{r7}
 8008746:	b083      	sub	sp, #12
 8008748:	af00      	add	r7, sp, #0
 800874a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800874c:	bf00      	nop
 800874e:	370c      	adds	r7, #12
 8008750:	46bd      	mov	sp, r7
 8008752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008756:	4770      	bx	lr

08008758 <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008758:	b580      	push	{r7, lr}
 800875a:	b084      	sub	sp, #16
 800875c:	af00      	add	r7, sp, #0
 800875e:	6078      	str	r0, [r7, #4]
 8008760:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008762:	2300      	movs	r3, #0
 8008764:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8008766:	683b      	ldr	r3, [r7, #0]
 8008768:	2b00      	cmp	r3, #0
 800876a:	d109      	bne.n	8008780 <HAL_TIM_PWM_Start_IT+0x28>
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008772:	b2db      	uxtb	r3, r3
 8008774:	2b01      	cmp	r3, #1
 8008776:	bf14      	ite	ne
 8008778:	2301      	movne	r3, #1
 800877a:	2300      	moveq	r3, #0
 800877c:	b2db      	uxtb	r3, r3
 800877e:	e03c      	b.n	80087fa <HAL_TIM_PWM_Start_IT+0xa2>
 8008780:	683b      	ldr	r3, [r7, #0]
 8008782:	2b04      	cmp	r3, #4
 8008784:	d109      	bne.n	800879a <HAL_TIM_PWM_Start_IT+0x42>
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800878c:	b2db      	uxtb	r3, r3
 800878e:	2b01      	cmp	r3, #1
 8008790:	bf14      	ite	ne
 8008792:	2301      	movne	r3, #1
 8008794:	2300      	moveq	r3, #0
 8008796:	b2db      	uxtb	r3, r3
 8008798:	e02f      	b.n	80087fa <HAL_TIM_PWM_Start_IT+0xa2>
 800879a:	683b      	ldr	r3, [r7, #0]
 800879c:	2b08      	cmp	r3, #8
 800879e:	d109      	bne.n	80087b4 <HAL_TIM_PWM_Start_IT+0x5c>
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80087a6:	b2db      	uxtb	r3, r3
 80087a8:	2b01      	cmp	r3, #1
 80087aa:	bf14      	ite	ne
 80087ac:	2301      	movne	r3, #1
 80087ae:	2300      	moveq	r3, #0
 80087b0:	b2db      	uxtb	r3, r3
 80087b2:	e022      	b.n	80087fa <HAL_TIM_PWM_Start_IT+0xa2>
 80087b4:	683b      	ldr	r3, [r7, #0]
 80087b6:	2b0c      	cmp	r3, #12
 80087b8:	d109      	bne.n	80087ce <HAL_TIM_PWM_Start_IT+0x76>
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80087c0:	b2db      	uxtb	r3, r3
 80087c2:	2b01      	cmp	r3, #1
 80087c4:	bf14      	ite	ne
 80087c6:	2301      	movne	r3, #1
 80087c8:	2300      	moveq	r3, #0
 80087ca:	b2db      	uxtb	r3, r3
 80087cc:	e015      	b.n	80087fa <HAL_TIM_PWM_Start_IT+0xa2>
 80087ce:	683b      	ldr	r3, [r7, #0]
 80087d0:	2b10      	cmp	r3, #16
 80087d2:	d109      	bne.n	80087e8 <HAL_TIM_PWM_Start_IT+0x90>
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80087da:	b2db      	uxtb	r3, r3
 80087dc:	2b01      	cmp	r3, #1
 80087de:	bf14      	ite	ne
 80087e0:	2301      	movne	r3, #1
 80087e2:	2300      	moveq	r3, #0
 80087e4:	b2db      	uxtb	r3, r3
 80087e6:	e008      	b.n	80087fa <HAL_TIM_PWM_Start_IT+0xa2>
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80087ee:	b2db      	uxtb	r3, r3
 80087f0:	2b01      	cmp	r3, #1
 80087f2:	bf14      	ite	ne
 80087f4:	2301      	movne	r3, #1
 80087f6:	2300      	moveq	r3, #0
 80087f8:	b2db      	uxtb	r3, r3
 80087fa:	2b00      	cmp	r3, #0
 80087fc:	d001      	beq.n	8008802 <HAL_TIM_PWM_Start_IT+0xaa>
  {
    return HAL_ERROR;
 80087fe:	2301      	movs	r3, #1
 8008800:	e0e2      	b.n	80089c8 <HAL_TIM_PWM_Start_IT+0x270>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8008802:	683b      	ldr	r3, [r7, #0]
 8008804:	2b00      	cmp	r3, #0
 8008806:	d104      	bne.n	8008812 <HAL_TIM_PWM_Start_IT+0xba>
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	2202      	movs	r2, #2
 800880c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008810:	e023      	b.n	800885a <HAL_TIM_PWM_Start_IT+0x102>
 8008812:	683b      	ldr	r3, [r7, #0]
 8008814:	2b04      	cmp	r3, #4
 8008816:	d104      	bne.n	8008822 <HAL_TIM_PWM_Start_IT+0xca>
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	2202      	movs	r2, #2
 800881c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008820:	e01b      	b.n	800885a <HAL_TIM_PWM_Start_IT+0x102>
 8008822:	683b      	ldr	r3, [r7, #0]
 8008824:	2b08      	cmp	r3, #8
 8008826:	d104      	bne.n	8008832 <HAL_TIM_PWM_Start_IT+0xda>
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	2202      	movs	r2, #2
 800882c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008830:	e013      	b.n	800885a <HAL_TIM_PWM_Start_IT+0x102>
 8008832:	683b      	ldr	r3, [r7, #0]
 8008834:	2b0c      	cmp	r3, #12
 8008836:	d104      	bne.n	8008842 <HAL_TIM_PWM_Start_IT+0xea>
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	2202      	movs	r2, #2
 800883c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008840:	e00b      	b.n	800885a <HAL_TIM_PWM_Start_IT+0x102>
 8008842:	683b      	ldr	r3, [r7, #0]
 8008844:	2b10      	cmp	r3, #16
 8008846:	d104      	bne.n	8008852 <HAL_TIM_PWM_Start_IT+0xfa>
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	2202      	movs	r2, #2
 800884c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008850:	e003      	b.n	800885a <HAL_TIM_PWM_Start_IT+0x102>
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	2202      	movs	r2, #2
 8008856:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  switch (Channel)
 800885a:	683b      	ldr	r3, [r7, #0]
 800885c:	2b0c      	cmp	r3, #12
 800885e:	d841      	bhi.n	80088e4 <HAL_TIM_PWM_Start_IT+0x18c>
 8008860:	a201      	add	r2, pc, #4	; (adr r2, 8008868 <HAL_TIM_PWM_Start_IT+0x110>)
 8008862:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008866:	bf00      	nop
 8008868:	0800889d 	.word	0x0800889d
 800886c:	080088e5 	.word	0x080088e5
 8008870:	080088e5 	.word	0x080088e5
 8008874:	080088e5 	.word	0x080088e5
 8008878:	080088af 	.word	0x080088af
 800887c:	080088e5 	.word	0x080088e5
 8008880:	080088e5 	.word	0x080088e5
 8008884:	080088e5 	.word	0x080088e5
 8008888:	080088c1 	.word	0x080088c1
 800888c:	080088e5 	.word	0x080088e5
 8008890:	080088e5 	.word	0x080088e5
 8008894:	080088e5 	.word	0x080088e5
 8008898:	080088d3 	.word	0x080088d3
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	681b      	ldr	r3, [r3, #0]
 80088a0:	68da      	ldr	r2, [r3, #12]
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	681b      	ldr	r3, [r3, #0]
 80088a6:	f042 0202 	orr.w	r2, r2, #2
 80088aa:	60da      	str	r2, [r3, #12]
      break;
 80088ac:	e01d      	b.n	80088ea <HAL_TIM_PWM_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	681b      	ldr	r3, [r3, #0]
 80088b2:	68da      	ldr	r2, [r3, #12]
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	681b      	ldr	r3, [r3, #0]
 80088b8:	f042 0204 	orr.w	r2, r2, #4
 80088bc:	60da      	str	r2, [r3, #12]
      break;
 80088be:	e014      	b.n	80088ea <HAL_TIM_PWM_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	681b      	ldr	r3, [r3, #0]
 80088c4:	68da      	ldr	r2, [r3, #12]
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	681b      	ldr	r3, [r3, #0]
 80088ca:	f042 0208 	orr.w	r2, r2, #8
 80088ce:	60da      	str	r2, [r3, #12]
      break;
 80088d0:	e00b      	b.n	80088ea <HAL_TIM_PWM_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	681b      	ldr	r3, [r3, #0]
 80088d6:	68da      	ldr	r2, [r3, #12]
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	681b      	ldr	r3, [r3, #0]
 80088dc:	f042 0210 	orr.w	r2, r2, #16
 80088e0:	60da      	str	r2, [r3, #12]
      break;
 80088e2:	e002      	b.n	80088ea <HAL_TIM_PWM_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 80088e4:	2301      	movs	r3, #1
 80088e6:	73fb      	strb	r3, [r7, #15]
      break;
 80088e8:	bf00      	nop
  }

  if (status == HAL_OK)
 80088ea:	7bfb      	ldrb	r3, [r7, #15]
 80088ec:	2b00      	cmp	r3, #0
 80088ee:	d16a      	bne.n	80089c6 <HAL_TIM_PWM_Start_IT+0x26e>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	681b      	ldr	r3, [r3, #0]
 80088f4:	2201      	movs	r2, #1
 80088f6:	6839      	ldr	r1, [r7, #0]
 80088f8:	4618      	mov	r0, r3
 80088fa:	f001 f9af 	bl	8009c5c <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	681b      	ldr	r3, [r3, #0]
 8008902:	4a33      	ldr	r2, [pc, #204]	; (80089d0 <HAL_TIM_PWM_Start_IT+0x278>)
 8008904:	4293      	cmp	r3, r2
 8008906:	d013      	beq.n	8008930 <HAL_TIM_PWM_Start_IT+0x1d8>
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	681b      	ldr	r3, [r3, #0]
 800890c:	4a31      	ldr	r2, [pc, #196]	; (80089d4 <HAL_TIM_PWM_Start_IT+0x27c>)
 800890e:	4293      	cmp	r3, r2
 8008910:	d00e      	beq.n	8008930 <HAL_TIM_PWM_Start_IT+0x1d8>
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	681b      	ldr	r3, [r3, #0]
 8008916:	4a30      	ldr	r2, [pc, #192]	; (80089d8 <HAL_TIM_PWM_Start_IT+0x280>)
 8008918:	4293      	cmp	r3, r2
 800891a:	d009      	beq.n	8008930 <HAL_TIM_PWM_Start_IT+0x1d8>
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	681b      	ldr	r3, [r3, #0]
 8008920:	4a2e      	ldr	r2, [pc, #184]	; (80089dc <HAL_TIM_PWM_Start_IT+0x284>)
 8008922:	4293      	cmp	r3, r2
 8008924:	d004      	beq.n	8008930 <HAL_TIM_PWM_Start_IT+0x1d8>
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	681b      	ldr	r3, [r3, #0]
 800892a:	4a2d      	ldr	r2, [pc, #180]	; (80089e0 <HAL_TIM_PWM_Start_IT+0x288>)
 800892c:	4293      	cmp	r3, r2
 800892e:	d101      	bne.n	8008934 <HAL_TIM_PWM_Start_IT+0x1dc>
 8008930:	2301      	movs	r3, #1
 8008932:	e000      	b.n	8008936 <HAL_TIM_PWM_Start_IT+0x1de>
 8008934:	2300      	movs	r3, #0
 8008936:	2b00      	cmp	r3, #0
 8008938:	d007      	beq.n	800894a <HAL_TIM_PWM_Start_IT+0x1f2>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	681b      	ldr	r3, [r3, #0]
 800893e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	681b      	ldr	r3, [r3, #0]
 8008944:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008948:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	681b      	ldr	r3, [r3, #0]
 800894e:	4a20      	ldr	r2, [pc, #128]	; (80089d0 <HAL_TIM_PWM_Start_IT+0x278>)
 8008950:	4293      	cmp	r3, r2
 8008952:	d018      	beq.n	8008986 <HAL_TIM_PWM_Start_IT+0x22e>
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	681b      	ldr	r3, [r3, #0]
 8008958:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800895c:	d013      	beq.n	8008986 <HAL_TIM_PWM_Start_IT+0x22e>
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	681b      	ldr	r3, [r3, #0]
 8008962:	4a20      	ldr	r2, [pc, #128]	; (80089e4 <HAL_TIM_PWM_Start_IT+0x28c>)
 8008964:	4293      	cmp	r3, r2
 8008966:	d00e      	beq.n	8008986 <HAL_TIM_PWM_Start_IT+0x22e>
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	681b      	ldr	r3, [r3, #0]
 800896c:	4a1e      	ldr	r2, [pc, #120]	; (80089e8 <HAL_TIM_PWM_Start_IT+0x290>)
 800896e:	4293      	cmp	r3, r2
 8008970:	d009      	beq.n	8008986 <HAL_TIM_PWM_Start_IT+0x22e>
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	681b      	ldr	r3, [r3, #0]
 8008976:	4a17      	ldr	r2, [pc, #92]	; (80089d4 <HAL_TIM_PWM_Start_IT+0x27c>)
 8008978:	4293      	cmp	r3, r2
 800897a:	d004      	beq.n	8008986 <HAL_TIM_PWM_Start_IT+0x22e>
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	681b      	ldr	r3, [r3, #0]
 8008980:	4a15      	ldr	r2, [pc, #84]	; (80089d8 <HAL_TIM_PWM_Start_IT+0x280>)
 8008982:	4293      	cmp	r3, r2
 8008984:	d115      	bne.n	80089b2 <HAL_TIM_PWM_Start_IT+0x25a>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	681b      	ldr	r3, [r3, #0]
 800898a:	689a      	ldr	r2, [r3, #8]
 800898c:	4b17      	ldr	r3, [pc, #92]	; (80089ec <HAL_TIM_PWM_Start_IT+0x294>)
 800898e:	4013      	ands	r3, r2
 8008990:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008992:	68bb      	ldr	r3, [r7, #8]
 8008994:	2b06      	cmp	r3, #6
 8008996:	d015      	beq.n	80089c4 <HAL_TIM_PWM_Start_IT+0x26c>
 8008998:	68bb      	ldr	r3, [r7, #8]
 800899a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800899e:	d011      	beq.n	80089c4 <HAL_TIM_PWM_Start_IT+0x26c>
      {
        __HAL_TIM_ENABLE(htim);
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	681b      	ldr	r3, [r3, #0]
 80089a4:	681a      	ldr	r2, [r3, #0]
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	681b      	ldr	r3, [r3, #0]
 80089aa:	f042 0201 	orr.w	r2, r2, #1
 80089ae:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80089b0:	e008      	b.n	80089c4 <HAL_TIM_PWM_Start_IT+0x26c>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	681b      	ldr	r3, [r3, #0]
 80089b6:	681a      	ldr	r2, [r3, #0]
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	681b      	ldr	r3, [r3, #0]
 80089bc:	f042 0201 	orr.w	r2, r2, #1
 80089c0:	601a      	str	r2, [r3, #0]
 80089c2:	e000      	b.n	80089c6 <HAL_TIM_PWM_Start_IT+0x26e>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80089c4:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 80089c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80089c8:	4618      	mov	r0, r3
 80089ca:	3710      	adds	r7, #16
 80089cc:	46bd      	mov	sp, r7
 80089ce:	bd80      	pop	{r7, pc}
 80089d0:	40012c00 	.word	0x40012c00
 80089d4:	40013400 	.word	0x40013400
 80089d8:	40014000 	.word	0x40014000
 80089dc:	40014400 	.word	0x40014400
 80089e0:	40014800 	.word	0x40014800
 80089e4:	40000400 	.word	0x40000400
 80089e8:	40000800 	.word	0x40000800
 80089ec:	00010007 	.word	0x00010007

080089f0 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 80089f0:	b580      	push	{r7, lr}
 80089f2:	b086      	sub	sp, #24
 80089f4:	af00      	add	r7, sp, #0
 80089f6:	6078      	str	r0, [r7, #4]
 80089f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	2b00      	cmp	r3, #0
 80089fe:	d101      	bne.n	8008a04 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8008a00:	2301      	movs	r3, #1
 8008a02:	e097      	b.n	8008b34 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008a0a:	b2db      	uxtb	r3, r3
 8008a0c:	2b00      	cmp	r3, #0
 8008a0e:	d106      	bne.n	8008a1e <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	2200      	movs	r2, #0
 8008a14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8008a18:	6878      	ldr	r0, [r7, #4]
 8008a1a:	f7fa f85f 	bl	8002adc <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	2202      	movs	r2, #2
 8008a22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	681b      	ldr	r3, [r3, #0]
 8008a2a:	689b      	ldr	r3, [r3, #8]
 8008a2c:	687a      	ldr	r2, [r7, #4]
 8008a2e:	6812      	ldr	r2, [r2, #0]
 8008a30:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 8008a34:	f023 0307 	bic.w	r3, r3, #7
 8008a38:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	681a      	ldr	r2, [r3, #0]
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	3304      	adds	r3, #4
 8008a42:	4619      	mov	r1, r3
 8008a44:	4610      	mov	r0, r2
 8008a46:	f000 fce7 	bl	8009418 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	681b      	ldr	r3, [r3, #0]
 8008a4e:	689b      	ldr	r3, [r3, #8]
 8008a50:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	681b      	ldr	r3, [r3, #0]
 8008a56:	699b      	ldr	r3, [r3, #24]
 8008a58:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	681b      	ldr	r3, [r3, #0]
 8008a5e:	6a1b      	ldr	r3, [r3, #32]
 8008a60:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8008a62:	683b      	ldr	r3, [r7, #0]
 8008a64:	681b      	ldr	r3, [r3, #0]
 8008a66:	697a      	ldr	r2, [r7, #20]
 8008a68:	4313      	orrs	r3, r2
 8008a6a:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8008a6c:	693b      	ldr	r3, [r7, #16]
 8008a6e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008a72:	f023 0303 	bic.w	r3, r3, #3
 8008a76:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8008a78:	683b      	ldr	r3, [r7, #0]
 8008a7a:	689a      	ldr	r2, [r3, #8]
 8008a7c:	683b      	ldr	r3, [r7, #0]
 8008a7e:	699b      	ldr	r3, [r3, #24]
 8008a80:	021b      	lsls	r3, r3, #8
 8008a82:	4313      	orrs	r3, r2
 8008a84:	693a      	ldr	r2, [r7, #16]
 8008a86:	4313      	orrs	r3, r2
 8008a88:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8008a8a:	693b      	ldr	r3, [r7, #16]
 8008a8c:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8008a90:	f023 030c 	bic.w	r3, r3, #12
 8008a94:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8008a96:	693b      	ldr	r3, [r7, #16]
 8008a98:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008a9c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008aa0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8008aa2:	683b      	ldr	r3, [r7, #0]
 8008aa4:	68da      	ldr	r2, [r3, #12]
 8008aa6:	683b      	ldr	r3, [r7, #0]
 8008aa8:	69db      	ldr	r3, [r3, #28]
 8008aaa:	021b      	lsls	r3, r3, #8
 8008aac:	4313      	orrs	r3, r2
 8008aae:	693a      	ldr	r2, [r7, #16]
 8008ab0:	4313      	orrs	r3, r2
 8008ab2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8008ab4:	683b      	ldr	r3, [r7, #0]
 8008ab6:	691b      	ldr	r3, [r3, #16]
 8008ab8:	011a      	lsls	r2, r3, #4
 8008aba:	683b      	ldr	r3, [r7, #0]
 8008abc:	6a1b      	ldr	r3, [r3, #32]
 8008abe:	031b      	lsls	r3, r3, #12
 8008ac0:	4313      	orrs	r3, r2
 8008ac2:	693a      	ldr	r2, [r7, #16]
 8008ac4:	4313      	orrs	r3, r2
 8008ac6:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8008ac8:	68fb      	ldr	r3, [r7, #12]
 8008aca:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8008ace:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8008ad0:	68fb      	ldr	r3, [r7, #12]
 8008ad2:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8008ad6:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8008ad8:	683b      	ldr	r3, [r7, #0]
 8008ada:	685a      	ldr	r2, [r3, #4]
 8008adc:	683b      	ldr	r3, [r7, #0]
 8008ade:	695b      	ldr	r3, [r3, #20]
 8008ae0:	011b      	lsls	r3, r3, #4
 8008ae2:	4313      	orrs	r3, r2
 8008ae4:	68fa      	ldr	r2, [r7, #12]
 8008ae6:	4313      	orrs	r3, r2
 8008ae8:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	681b      	ldr	r3, [r3, #0]
 8008aee:	697a      	ldr	r2, [r7, #20]
 8008af0:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	681b      	ldr	r3, [r3, #0]
 8008af6:	693a      	ldr	r2, [r7, #16]
 8008af8:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	681b      	ldr	r3, [r3, #0]
 8008afe:	68fa      	ldr	r2, [r7, #12]
 8008b00:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	2201      	movs	r2, #1
 8008b06:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	2201      	movs	r2, #1
 8008b0e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	2201      	movs	r2, #1
 8008b16:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	2201      	movs	r2, #1
 8008b1e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	2201      	movs	r2, #1
 8008b26:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	2201      	movs	r2, #1
 8008b2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008b32:	2300      	movs	r3, #0
}
 8008b34:	4618      	mov	r0, r3
 8008b36:	3718      	adds	r7, #24
 8008b38:	46bd      	mov	sp, r7
 8008b3a:	bd80      	pop	{r7, pc}

08008b3c <HAL_TIM_Encoder_Start_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008b3c:	b580      	push	{r7, lr}
 8008b3e:	b084      	sub	sp, #16
 8008b40:	af00      	add	r7, sp, #0
 8008b42:	6078      	str	r0, [r7, #4]
 8008b44:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008b4c:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8008b54:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008b5c:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008b64:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8008b66:	683b      	ldr	r3, [r7, #0]
 8008b68:	2b00      	cmp	r3, #0
 8008b6a:	d110      	bne.n	8008b8e <HAL_TIM_Encoder_Start_IT+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8008b6c:	7bfb      	ldrb	r3, [r7, #15]
 8008b6e:	2b01      	cmp	r3, #1
 8008b70:	d102      	bne.n	8008b78 <HAL_TIM_Encoder_Start_IT+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8008b72:	7b7b      	ldrb	r3, [r7, #13]
 8008b74:	2b01      	cmp	r3, #1
 8008b76:	d001      	beq.n	8008b7c <HAL_TIM_Encoder_Start_IT+0x40>
    {
      return HAL_ERROR;
 8008b78:	2301      	movs	r3, #1
 8008b7a:	e089      	b.n	8008c90 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	2202      	movs	r2, #2
 8008b80:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	2202      	movs	r2, #2
 8008b88:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008b8c:	e031      	b.n	8008bf2 <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8008b8e:	683b      	ldr	r3, [r7, #0]
 8008b90:	2b04      	cmp	r3, #4
 8008b92:	d110      	bne.n	8008bb6 <HAL_TIM_Encoder_Start_IT+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8008b94:	7bbb      	ldrb	r3, [r7, #14]
 8008b96:	2b01      	cmp	r3, #1
 8008b98:	d102      	bne.n	8008ba0 <HAL_TIM_Encoder_Start_IT+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8008b9a:	7b3b      	ldrb	r3, [r7, #12]
 8008b9c:	2b01      	cmp	r3, #1
 8008b9e:	d001      	beq.n	8008ba4 <HAL_TIM_Encoder_Start_IT+0x68>
    {
      return HAL_ERROR;
 8008ba0:	2301      	movs	r3, #1
 8008ba2:	e075      	b.n	8008c90 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	2202      	movs	r2, #2
 8008ba8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	2202      	movs	r2, #2
 8008bb0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008bb4:	e01d      	b.n	8008bf2 <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8008bb6:	7bfb      	ldrb	r3, [r7, #15]
 8008bb8:	2b01      	cmp	r3, #1
 8008bba:	d108      	bne.n	8008bce <HAL_TIM_Encoder_Start_IT+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8008bbc:	7bbb      	ldrb	r3, [r7, #14]
 8008bbe:	2b01      	cmp	r3, #1
 8008bc0:	d105      	bne.n	8008bce <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8008bc2:	7b7b      	ldrb	r3, [r7, #13]
 8008bc4:	2b01      	cmp	r3, #1
 8008bc6:	d102      	bne.n	8008bce <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8008bc8:	7b3b      	ldrb	r3, [r7, #12]
 8008bca:	2b01      	cmp	r3, #1
 8008bcc:	d001      	beq.n	8008bd2 <HAL_TIM_Encoder_Start_IT+0x96>
    {
      return HAL_ERROR;
 8008bce:	2301      	movs	r3, #1
 8008bd0:	e05e      	b.n	8008c90 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	2202      	movs	r2, #2
 8008bd6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	2202      	movs	r2, #2
 8008bde:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	2202      	movs	r2, #2
 8008be6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	2202      	movs	r2, #2
 8008bee:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
  }

  /* Enable the encoder interface channels */
  /* Enable the capture compare Interrupts 1 and/or 2 */
  switch (Channel)
 8008bf2:	683b      	ldr	r3, [r7, #0]
 8008bf4:	2b00      	cmp	r3, #0
 8008bf6:	d003      	beq.n	8008c00 <HAL_TIM_Encoder_Start_IT+0xc4>
 8008bf8:	683b      	ldr	r3, [r7, #0]
 8008bfa:	2b04      	cmp	r3, #4
 8008bfc:	d010      	beq.n	8008c20 <HAL_TIM_Encoder_Start_IT+0xe4>
 8008bfe:	e01f      	b.n	8008c40 <HAL_TIM_Encoder_Start_IT+0x104>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	681b      	ldr	r3, [r3, #0]
 8008c04:	2201      	movs	r2, #1
 8008c06:	2100      	movs	r1, #0
 8008c08:	4618      	mov	r0, r3
 8008c0a:	f001 f827 	bl	8009c5c <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	681b      	ldr	r3, [r3, #0]
 8008c12:	68da      	ldr	r2, [r3, #12]
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	681b      	ldr	r3, [r3, #0]
 8008c18:	f042 0202 	orr.w	r2, r2, #2
 8008c1c:	60da      	str	r2, [r3, #12]
      break;
 8008c1e:	e02e      	b.n	8008c7e <HAL_TIM_Encoder_Start_IT+0x142>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	681b      	ldr	r3, [r3, #0]
 8008c24:	2201      	movs	r2, #1
 8008c26:	2104      	movs	r1, #4
 8008c28:	4618      	mov	r0, r3
 8008c2a:	f001 f817 	bl	8009c5c <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	681b      	ldr	r3, [r3, #0]
 8008c32:	68da      	ldr	r2, [r3, #12]
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	681b      	ldr	r3, [r3, #0]
 8008c38:	f042 0204 	orr.w	r2, r2, #4
 8008c3c:	60da      	str	r2, [r3, #12]
      break;
 8008c3e:	e01e      	b.n	8008c7e <HAL_TIM_Encoder_Start_IT+0x142>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	681b      	ldr	r3, [r3, #0]
 8008c44:	2201      	movs	r2, #1
 8008c46:	2100      	movs	r1, #0
 8008c48:	4618      	mov	r0, r3
 8008c4a:	f001 f807 	bl	8009c5c <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	681b      	ldr	r3, [r3, #0]
 8008c52:	2201      	movs	r2, #1
 8008c54:	2104      	movs	r1, #4
 8008c56:	4618      	mov	r0, r3
 8008c58:	f001 f800 	bl	8009c5c <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	681b      	ldr	r3, [r3, #0]
 8008c60:	68da      	ldr	r2, [r3, #12]
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	681b      	ldr	r3, [r3, #0]
 8008c66:	f042 0202 	orr.w	r2, r2, #2
 8008c6a:	60da      	str	r2, [r3, #12]
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	681b      	ldr	r3, [r3, #0]
 8008c70:	68da      	ldr	r2, [r3, #12]
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	681b      	ldr	r3, [r3, #0]
 8008c76:	f042 0204 	orr.w	r2, r2, #4
 8008c7a:	60da      	str	r2, [r3, #12]
      break;
 8008c7c:	bf00      	nop
    }
  }

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	681b      	ldr	r3, [r3, #0]
 8008c82:	681a      	ldr	r2, [r3, #0]
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	681b      	ldr	r3, [r3, #0]
 8008c88:	f042 0201 	orr.w	r2, r2, #1
 8008c8c:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8008c8e:	2300      	movs	r3, #0
}
 8008c90:	4618      	mov	r0, r3
 8008c92:	3710      	adds	r7, #16
 8008c94:	46bd      	mov	sp, r7
 8008c96:	bd80      	pop	{r7, pc}

08008c98 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008c98:	b580      	push	{r7, lr}
 8008c9a:	b082      	sub	sp, #8
 8008c9c:	af00      	add	r7, sp, #0
 8008c9e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	681b      	ldr	r3, [r3, #0]
 8008ca4:	691b      	ldr	r3, [r3, #16]
 8008ca6:	f003 0302 	and.w	r3, r3, #2
 8008caa:	2b02      	cmp	r3, #2
 8008cac:	d122      	bne.n	8008cf4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	681b      	ldr	r3, [r3, #0]
 8008cb2:	68db      	ldr	r3, [r3, #12]
 8008cb4:	f003 0302 	and.w	r3, r3, #2
 8008cb8:	2b02      	cmp	r3, #2
 8008cba:	d11b      	bne.n	8008cf4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	681b      	ldr	r3, [r3, #0]
 8008cc0:	f06f 0202 	mvn.w	r2, #2
 8008cc4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	2201      	movs	r2, #1
 8008cca:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	681b      	ldr	r3, [r3, #0]
 8008cd0:	699b      	ldr	r3, [r3, #24]
 8008cd2:	f003 0303 	and.w	r3, r3, #3
 8008cd6:	2b00      	cmp	r3, #0
 8008cd8:	d003      	beq.n	8008ce2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008cda:	6878      	ldr	r0, [r7, #4]
 8008cdc:	f000 fb7e 	bl	80093dc <HAL_TIM_IC_CaptureCallback>
 8008ce0:	e005      	b.n	8008cee <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008ce2:	6878      	ldr	r0, [r7, #4]
 8008ce4:	f000 fb70 	bl	80093c8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008ce8:	6878      	ldr	r0, [r7, #4]
 8008cea:	f000 fb81 	bl	80093f0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	2200      	movs	r2, #0
 8008cf2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	681b      	ldr	r3, [r3, #0]
 8008cf8:	691b      	ldr	r3, [r3, #16]
 8008cfa:	f003 0304 	and.w	r3, r3, #4
 8008cfe:	2b04      	cmp	r3, #4
 8008d00:	d122      	bne.n	8008d48 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	681b      	ldr	r3, [r3, #0]
 8008d06:	68db      	ldr	r3, [r3, #12]
 8008d08:	f003 0304 	and.w	r3, r3, #4
 8008d0c:	2b04      	cmp	r3, #4
 8008d0e:	d11b      	bne.n	8008d48 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	681b      	ldr	r3, [r3, #0]
 8008d14:	f06f 0204 	mvn.w	r2, #4
 8008d18:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	2202      	movs	r2, #2
 8008d1e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	681b      	ldr	r3, [r3, #0]
 8008d24:	699b      	ldr	r3, [r3, #24]
 8008d26:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008d2a:	2b00      	cmp	r3, #0
 8008d2c:	d003      	beq.n	8008d36 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008d2e:	6878      	ldr	r0, [r7, #4]
 8008d30:	f000 fb54 	bl	80093dc <HAL_TIM_IC_CaptureCallback>
 8008d34:	e005      	b.n	8008d42 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008d36:	6878      	ldr	r0, [r7, #4]
 8008d38:	f000 fb46 	bl	80093c8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008d3c:	6878      	ldr	r0, [r7, #4]
 8008d3e:	f000 fb57 	bl	80093f0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	2200      	movs	r2, #0
 8008d46:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	681b      	ldr	r3, [r3, #0]
 8008d4c:	691b      	ldr	r3, [r3, #16]
 8008d4e:	f003 0308 	and.w	r3, r3, #8
 8008d52:	2b08      	cmp	r3, #8
 8008d54:	d122      	bne.n	8008d9c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	681b      	ldr	r3, [r3, #0]
 8008d5a:	68db      	ldr	r3, [r3, #12]
 8008d5c:	f003 0308 	and.w	r3, r3, #8
 8008d60:	2b08      	cmp	r3, #8
 8008d62:	d11b      	bne.n	8008d9c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	681b      	ldr	r3, [r3, #0]
 8008d68:	f06f 0208 	mvn.w	r2, #8
 8008d6c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	2204      	movs	r2, #4
 8008d72:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	681b      	ldr	r3, [r3, #0]
 8008d78:	69db      	ldr	r3, [r3, #28]
 8008d7a:	f003 0303 	and.w	r3, r3, #3
 8008d7e:	2b00      	cmp	r3, #0
 8008d80:	d003      	beq.n	8008d8a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008d82:	6878      	ldr	r0, [r7, #4]
 8008d84:	f000 fb2a 	bl	80093dc <HAL_TIM_IC_CaptureCallback>
 8008d88:	e005      	b.n	8008d96 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008d8a:	6878      	ldr	r0, [r7, #4]
 8008d8c:	f000 fb1c 	bl	80093c8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008d90:	6878      	ldr	r0, [r7, #4]
 8008d92:	f000 fb2d 	bl	80093f0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	2200      	movs	r2, #0
 8008d9a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	681b      	ldr	r3, [r3, #0]
 8008da0:	691b      	ldr	r3, [r3, #16]
 8008da2:	f003 0310 	and.w	r3, r3, #16
 8008da6:	2b10      	cmp	r3, #16
 8008da8:	d122      	bne.n	8008df0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	681b      	ldr	r3, [r3, #0]
 8008dae:	68db      	ldr	r3, [r3, #12]
 8008db0:	f003 0310 	and.w	r3, r3, #16
 8008db4:	2b10      	cmp	r3, #16
 8008db6:	d11b      	bne.n	8008df0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	681b      	ldr	r3, [r3, #0]
 8008dbc:	f06f 0210 	mvn.w	r2, #16
 8008dc0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	2208      	movs	r2, #8
 8008dc6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	681b      	ldr	r3, [r3, #0]
 8008dcc:	69db      	ldr	r3, [r3, #28]
 8008dce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008dd2:	2b00      	cmp	r3, #0
 8008dd4:	d003      	beq.n	8008dde <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008dd6:	6878      	ldr	r0, [r7, #4]
 8008dd8:	f000 fb00 	bl	80093dc <HAL_TIM_IC_CaptureCallback>
 8008ddc:	e005      	b.n	8008dea <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008dde:	6878      	ldr	r0, [r7, #4]
 8008de0:	f000 faf2 	bl	80093c8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008de4:	6878      	ldr	r0, [r7, #4]
 8008de6:	f000 fb03 	bl	80093f0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	2200      	movs	r2, #0
 8008dee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	681b      	ldr	r3, [r3, #0]
 8008df4:	691b      	ldr	r3, [r3, #16]
 8008df6:	f003 0301 	and.w	r3, r3, #1
 8008dfa:	2b01      	cmp	r3, #1
 8008dfc:	d10e      	bne.n	8008e1c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	681b      	ldr	r3, [r3, #0]
 8008e02:	68db      	ldr	r3, [r3, #12]
 8008e04:	f003 0301 	and.w	r3, r3, #1
 8008e08:	2b01      	cmp	r3, #1
 8008e0a:	d107      	bne.n	8008e1c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	681b      	ldr	r3, [r3, #0]
 8008e10:	f06f 0201 	mvn.w	r2, #1
 8008e14:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008e16:	6878      	ldr	r0, [r7, #4]
 8008e18:	f000 facc 	bl	80093b4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	681b      	ldr	r3, [r3, #0]
 8008e20:	691b      	ldr	r3, [r3, #16]
 8008e22:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008e26:	2b80      	cmp	r3, #128	; 0x80
 8008e28:	d10e      	bne.n	8008e48 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	681b      	ldr	r3, [r3, #0]
 8008e2e:	68db      	ldr	r3, [r3, #12]
 8008e30:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008e34:	2b80      	cmp	r3, #128	; 0x80
 8008e36:	d107      	bne.n	8008e48 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	681b      	ldr	r3, [r3, #0]
 8008e3c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8008e40:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008e42:	6878      	ldr	r0, [r7, #4]
 8008e44:	f001 f964 	bl	800a110 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	681b      	ldr	r3, [r3, #0]
 8008e4c:	691b      	ldr	r3, [r3, #16]
 8008e4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008e52:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008e56:	d10e      	bne.n	8008e76 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	681b      	ldr	r3, [r3, #0]
 8008e5c:	68db      	ldr	r3, [r3, #12]
 8008e5e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008e62:	2b80      	cmp	r3, #128	; 0x80
 8008e64:	d107      	bne.n	8008e76 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	681b      	ldr	r3, [r3, #0]
 8008e6a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8008e6e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8008e70:	6878      	ldr	r0, [r7, #4]
 8008e72:	f001 f957 	bl	800a124 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	681b      	ldr	r3, [r3, #0]
 8008e7a:	691b      	ldr	r3, [r3, #16]
 8008e7c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008e80:	2b40      	cmp	r3, #64	; 0x40
 8008e82:	d10e      	bne.n	8008ea2 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	681b      	ldr	r3, [r3, #0]
 8008e88:	68db      	ldr	r3, [r3, #12]
 8008e8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008e8e:	2b40      	cmp	r3, #64	; 0x40
 8008e90:	d107      	bne.n	8008ea2 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	681b      	ldr	r3, [r3, #0]
 8008e96:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8008e9a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008e9c:	6878      	ldr	r0, [r7, #4]
 8008e9e:	f000 fab1 	bl	8009404 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	681b      	ldr	r3, [r3, #0]
 8008ea6:	691b      	ldr	r3, [r3, #16]
 8008ea8:	f003 0320 	and.w	r3, r3, #32
 8008eac:	2b20      	cmp	r3, #32
 8008eae:	d10e      	bne.n	8008ece <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	681b      	ldr	r3, [r3, #0]
 8008eb4:	68db      	ldr	r3, [r3, #12]
 8008eb6:	f003 0320 	and.w	r3, r3, #32
 8008eba:	2b20      	cmp	r3, #32
 8008ebc:	d107      	bne.n	8008ece <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	681b      	ldr	r3, [r3, #0]
 8008ec2:	f06f 0220 	mvn.w	r2, #32
 8008ec6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008ec8:	6878      	ldr	r0, [r7, #4]
 8008eca:	f001 f917 	bl	800a0fc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	681b      	ldr	r3, [r3, #0]
 8008ed2:	691b      	ldr	r3, [r3, #16]
 8008ed4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008ed8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008edc:	d10f      	bne.n	8008efe <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	681b      	ldr	r3, [r3, #0]
 8008ee2:	68db      	ldr	r3, [r3, #12]
 8008ee4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008ee8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008eec:	d107      	bne.n	8008efe <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	681b      	ldr	r3, [r3, #0]
 8008ef2:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 8008ef6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8008ef8:	6878      	ldr	r0, [r7, #4]
 8008efa:	f001 f91d 	bl	800a138 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	681b      	ldr	r3, [r3, #0]
 8008f02:	691b      	ldr	r3, [r3, #16]
 8008f04:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008f08:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008f0c:	d10f      	bne.n	8008f2e <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	681b      	ldr	r3, [r3, #0]
 8008f12:	68db      	ldr	r3, [r3, #12]
 8008f14:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008f18:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008f1c:	d107      	bne.n	8008f2e <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	681b      	ldr	r3, [r3, #0]
 8008f22:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 8008f26:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8008f28:	6878      	ldr	r0, [r7, #4]
 8008f2a:	f001 f90f 	bl	800a14c <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	681b      	ldr	r3, [r3, #0]
 8008f32:	691b      	ldr	r3, [r3, #16]
 8008f34:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008f38:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008f3c:	d10f      	bne.n	8008f5e <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	681b      	ldr	r3, [r3, #0]
 8008f42:	68db      	ldr	r3, [r3, #12]
 8008f44:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008f48:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008f4c:	d107      	bne.n	8008f5e <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	681b      	ldr	r3, [r3, #0]
 8008f52:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 8008f56:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8008f58:	6878      	ldr	r0, [r7, #4]
 8008f5a:	f001 f901 	bl	800a160 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	681b      	ldr	r3, [r3, #0]
 8008f62:	691b      	ldr	r3, [r3, #16]
 8008f64:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008f68:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8008f6c:	d10f      	bne.n	8008f8e <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	681b      	ldr	r3, [r3, #0]
 8008f72:	68db      	ldr	r3, [r3, #12]
 8008f74:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008f78:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8008f7c:	d107      	bne.n	8008f8e <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	681b      	ldr	r3, [r3, #0]
 8008f82:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 8008f86:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8008f88:	6878      	ldr	r0, [r7, #4]
 8008f8a:	f001 f8f3 	bl	800a174 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008f8e:	bf00      	nop
 8008f90:	3708      	adds	r7, #8
 8008f92:	46bd      	mov	sp, r7
 8008f94:	bd80      	pop	{r7, pc}
	...

08008f98 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8008f98:	b580      	push	{r7, lr}
 8008f9a:	b086      	sub	sp, #24
 8008f9c:	af00      	add	r7, sp, #0
 8008f9e:	60f8      	str	r0, [r7, #12]
 8008fa0:	60b9      	str	r1, [r7, #8]
 8008fa2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008fa4:	2300      	movs	r3, #0
 8008fa6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008fa8:	68fb      	ldr	r3, [r7, #12]
 8008faa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008fae:	2b01      	cmp	r3, #1
 8008fb0:	d101      	bne.n	8008fb6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8008fb2:	2302      	movs	r3, #2
 8008fb4:	e0ff      	b.n	80091b6 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8008fb6:	68fb      	ldr	r3, [r7, #12]
 8008fb8:	2201      	movs	r2, #1
 8008fba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	2b14      	cmp	r3, #20
 8008fc2:	f200 80f0 	bhi.w	80091a6 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8008fc6:	a201      	add	r2, pc, #4	; (adr r2, 8008fcc <HAL_TIM_PWM_ConfigChannel+0x34>)
 8008fc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008fcc:	08009021 	.word	0x08009021
 8008fd0:	080091a7 	.word	0x080091a7
 8008fd4:	080091a7 	.word	0x080091a7
 8008fd8:	080091a7 	.word	0x080091a7
 8008fdc:	08009061 	.word	0x08009061
 8008fe0:	080091a7 	.word	0x080091a7
 8008fe4:	080091a7 	.word	0x080091a7
 8008fe8:	080091a7 	.word	0x080091a7
 8008fec:	080090a3 	.word	0x080090a3
 8008ff0:	080091a7 	.word	0x080091a7
 8008ff4:	080091a7 	.word	0x080091a7
 8008ff8:	080091a7 	.word	0x080091a7
 8008ffc:	080090e3 	.word	0x080090e3
 8009000:	080091a7 	.word	0x080091a7
 8009004:	080091a7 	.word	0x080091a7
 8009008:	080091a7 	.word	0x080091a7
 800900c:	08009125 	.word	0x08009125
 8009010:	080091a7 	.word	0x080091a7
 8009014:	080091a7 	.word	0x080091a7
 8009018:	080091a7 	.word	0x080091a7
 800901c:	08009165 	.word	0x08009165
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8009020:	68fb      	ldr	r3, [r7, #12]
 8009022:	681b      	ldr	r3, [r3, #0]
 8009024:	68b9      	ldr	r1, [r7, #8]
 8009026:	4618      	mov	r0, r3
 8009028:	f000 fa86 	bl	8009538 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800902c:	68fb      	ldr	r3, [r7, #12]
 800902e:	681b      	ldr	r3, [r3, #0]
 8009030:	699a      	ldr	r2, [r3, #24]
 8009032:	68fb      	ldr	r3, [r7, #12]
 8009034:	681b      	ldr	r3, [r3, #0]
 8009036:	f042 0208 	orr.w	r2, r2, #8
 800903a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800903c:	68fb      	ldr	r3, [r7, #12]
 800903e:	681b      	ldr	r3, [r3, #0]
 8009040:	699a      	ldr	r2, [r3, #24]
 8009042:	68fb      	ldr	r3, [r7, #12]
 8009044:	681b      	ldr	r3, [r3, #0]
 8009046:	f022 0204 	bic.w	r2, r2, #4
 800904a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800904c:	68fb      	ldr	r3, [r7, #12]
 800904e:	681b      	ldr	r3, [r3, #0]
 8009050:	6999      	ldr	r1, [r3, #24]
 8009052:	68bb      	ldr	r3, [r7, #8]
 8009054:	691a      	ldr	r2, [r3, #16]
 8009056:	68fb      	ldr	r3, [r7, #12]
 8009058:	681b      	ldr	r3, [r3, #0]
 800905a:	430a      	orrs	r2, r1
 800905c:	619a      	str	r2, [r3, #24]
      break;
 800905e:	e0a5      	b.n	80091ac <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8009060:	68fb      	ldr	r3, [r7, #12]
 8009062:	681b      	ldr	r3, [r3, #0]
 8009064:	68b9      	ldr	r1, [r7, #8]
 8009066:	4618      	mov	r0, r3
 8009068:	f000 faf6 	bl	8009658 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800906c:	68fb      	ldr	r3, [r7, #12]
 800906e:	681b      	ldr	r3, [r3, #0]
 8009070:	699a      	ldr	r2, [r3, #24]
 8009072:	68fb      	ldr	r3, [r7, #12]
 8009074:	681b      	ldr	r3, [r3, #0]
 8009076:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800907a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800907c:	68fb      	ldr	r3, [r7, #12]
 800907e:	681b      	ldr	r3, [r3, #0]
 8009080:	699a      	ldr	r2, [r3, #24]
 8009082:	68fb      	ldr	r3, [r7, #12]
 8009084:	681b      	ldr	r3, [r3, #0]
 8009086:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800908a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800908c:	68fb      	ldr	r3, [r7, #12]
 800908e:	681b      	ldr	r3, [r3, #0]
 8009090:	6999      	ldr	r1, [r3, #24]
 8009092:	68bb      	ldr	r3, [r7, #8]
 8009094:	691b      	ldr	r3, [r3, #16]
 8009096:	021a      	lsls	r2, r3, #8
 8009098:	68fb      	ldr	r3, [r7, #12]
 800909a:	681b      	ldr	r3, [r3, #0]
 800909c:	430a      	orrs	r2, r1
 800909e:	619a      	str	r2, [r3, #24]
      break;
 80090a0:	e084      	b.n	80091ac <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80090a2:	68fb      	ldr	r3, [r7, #12]
 80090a4:	681b      	ldr	r3, [r3, #0]
 80090a6:	68b9      	ldr	r1, [r7, #8]
 80090a8:	4618      	mov	r0, r3
 80090aa:	f000 fb5f 	bl	800976c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80090ae:	68fb      	ldr	r3, [r7, #12]
 80090b0:	681b      	ldr	r3, [r3, #0]
 80090b2:	69da      	ldr	r2, [r3, #28]
 80090b4:	68fb      	ldr	r3, [r7, #12]
 80090b6:	681b      	ldr	r3, [r3, #0]
 80090b8:	f042 0208 	orr.w	r2, r2, #8
 80090bc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80090be:	68fb      	ldr	r3, [r7, #12]
 80090c0:	681b      	ldr	r3, [r3, #0]
 80090c2:	69da      	ldr	r2, [r3, #28]
 80090c4:	68fb      	ldr	r3, [r7, #12]
 80090c6:	681b      	ldr	r3, [r3, #0]
 80090c8:	f022 0204 	bic.w	r2, r2, #4
 80090cc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80090ce:	68fb      	ldr	r3, [r7, #12]
 80090d0:	681b      	ldr	r3, [r3, #0]
 80090d2:	69d9      	ldr	r1, [r3, #28]
 80090d4:	68bb      	ldr	r3, [r7, #8]
 80090d6:	691a      	ldr	r2, [r3, #16]
 80090d8:	68fb      	ldr	r3, [r7, #12]
 80090da:	681b      	ldr	r3, [r3, #0]
 80090dc:	430a      	orrs	r2, r1
 80090de:	61da      	str	r2, [r3, #28]
      break;
 80090e0:	e064      	b.n	80091ac <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80090e2:	68fb      	ldr	r3, [r7, #12]
 80090e4:	681b      	ldr	r3, [r3, #0]
 80090e6:	68b9      	ldr	r1, [r7, #8]
 80090e8:	4618      	mov	r0, r3
 80090ea:	f000 fbc7 	bl	800987c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80090ee:	68fb      	ldr	r3, [r7, #12]
 80090f0:	681b      	ldr	r3, [r3, #0]
 80090f2:	69da      	ldr	r2, [r3, #28]
 80090f4:	68fb      	ldr	r3, [r7, #12]
 80090f6:	681b      	ldr	r3, [r3, #0]
 80090f8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80090fc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80090fe:	68fb      	ldr	r3, [r7, #12]
 8009100:	681b      	ldr	r3, [r3, #0]
 8009102:	69da      	ldr	r2, [r3, #28]
 8009104:	68fb      	ldr	r3, [r7, #12]
 8009106:	681b      	ldr	r3, [r3, #0]
 8009108:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800910c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800910e:	68fb      	ldr	r3, [r7, #12]
 8009110:	681b      	ldr	r3, [r3, #0]
 8009112:	69d9      	ldr	r1, [r3, #28]
 8009114:	68bb      	ldr	r3, [r7, #8]
 8009116:	691b      	ldr	r3, [r3, #16]
 8009118:	021a      	lsls	r2, r3, #8
 800911a:	68fb      	ldr	r3, [r7, #12]
 800911c:	681b      	ldr	r3, [r3, #0]
 800911e:	430a      	orrs	r2, r1
 8009120:	61da      	str	r2, [r3, #28]
      break;
 8009122:	e043      	b.n	80091ac <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8009124:	68fb      	ldr	r3, [r7, #12]
 8009126:	681b      	ldr	r3, [r3, #0]
 8009128:	68b9      	ldr	r1, [r7, #8]
 800912a:	4618      	mov	r0, r3
 800912c:	f000 fc30 	bl	8009990 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8009130:	68fb      	ldr	r3, [r7, #12]
 8009132:	681b      	ldr	r3, [r3, #0]
 8009134:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8009136:	68fb      	ldr	r3, [r7, #12]
 8009138:	681b      	ldr	r3, [r3, #0]
 800913a:	f042 0208 	orr.w	r2, r2, #8
 800913e:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8009140:	68fb      	ldr	r3, [r7, #12]
 8009142:	681b      	ldr	r3, [r3, #0]
 8009144:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8009146:	68fb      	ldr	r3, [r7, #12]
 8009148:	681b      	ldr	r3, [r3, #0]
 800914a:	f022 0204 	bic.w	r2, r2, #4
 800914e:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8009150:	68fb      	ldr	r3, [r7, #12]
 8009152:	681b      	ldr	r3, [r3, #0]
 8009154:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8009156:	68bb      	ldr	r3, [r7, #8]
 8009158:	691a      	ldr	r2, [r3, #16]
 800915a:	68fb      	ldr	r3, [r7, #12]
 800915c:	681b      	ldr	r3, [r3, #0]
 800915e:	430a      	orrs	r2, r1
 8009160:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8009162:	e023      	b.n	80091ac <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8009164:	68fb      	ldr	r3, [r7, #12]
 8009166:	681b      	ldr	r3, [r3, #0]
 8009168:	68b9      	ldr	r1, [r7, #8]
 800916a:	4618      	mov	r0, r3
 800916c:	f000 fc74 	bl	8009a58 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8009170:	68fb      	ldr	r3, [r7, #12]
 8009172:	681b      	ldr	r3, [r3, #0]
 8009174:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8009176:	68fb      	ldr	r3, [r7, #12]
 8009178:	681b      	ldr	r3, [r3, #0]
 800917a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800917e:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8009180:	68fb      	ldr	r3, [r7, #12]
 8009182:	681b      	ldr	r3, [r3, #0]
 8009184:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8009186:	68fb      	ldr	r3, [r7, #12]
 8009188:	681b      	ldr	r3, [r3, #0]
 800918a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800918e:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8009190:	68fb      	ldr	r3, [r7, #12]
 8009192:	681b      	ldr	r3, [r3, #0]
 8009194:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8009196:	68bb      	ldr	r3, [r7, #8]
 8009198:	691b      	ldr	r3, [r3, #16]
 800919a:	021a      	lsls	r2, r3, #8
 800919c:	68fb      	ldr	r3, [r7, #12]
 800919e:	681b      	ldr	r3, [r3, #0]
 80091a0:	430a      	orrs	r2, r1
 80091a2:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 80091a4:	e002      	b.n	80091ac <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80091a6:	2301      	movs	r3, #1
 80091a8:	75fb      	strb	r3, [r7, #23]
      break;
 80091aa:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80091ac:	68fb      	ldr	r3, [r7, #12]
 80091ae:	2200      	movs	r2, #0
 80091b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80091b4:	7dfb      	ldrb	r3, [r7, #23]
}
 80091b6:	4618      	mov	r0, r3
 80091b8:	3718      	adds	r7, #24
 80091ba:	46bd      	mov	sp, r7
 80091bc:	bd80      	pop	{r7, pc}
 80091be:	bf00      	nop

080091c0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80091c0:	b580      	push	{r7, lr}
 80091c2:	b084      	sub	sp, #16
 80091c4:	af00      	add	r7, sp, #0
 80091c6:	6078      	str	r0, [r7, #4]
 80091c8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80091ca:	2300      	movs	r3, #0
 80091cc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80091d4:	2b01      	cmp	r3, #1
 80091d6:	d101      	bne.n	80091dc <HAL_TIM_ConfigClockSource+0x1c>
 80091d8:	2302      	movs	r3, #2
 80091da:	e0de      	b.n	800939a <HAL_TIM_ConfigClockSource+0x1da>
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	2201      	movs	r2, #1
 80091e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	2202      	movs	r2, #2
 80091e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	681b      	ldr	r3, [r3, #0]
 80091f0:	689b      	ldr	r3, [r3, #8]
 80091f2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80091f4:	68bb      	ldr	r3, [r7, #8]
 80091f6:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 80091fa:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80091fe:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009200:	68bb      	ldr	r3, [r7, #8]
 8009202:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009206:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	681b      	ldr	r3, [r3, #0]
 800920c:	68ba      	ldr	r2, [r7, #8]
 800920e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8009210:	683b      	ldr	r3, [r7, #0]
 8009212:	681b      	ldr	r3, [r3, #0]
 8009214:	4a63      	ldr	r2, [pc, #396]	; (80093a4 <HAL_TIM_ConfigClockSource+0x1e4>)
 8009216:	4293      	cmp	r3, r2
 8009218:	f000 80a9 	beq.w	800936e <HAL_TIM_ConfigClockSource+0x1ae>
 800921c:	4a61      	ldr	r2, [pc, #388]	; (80093a4 <HAL_TIM_ConfigClockSource+0x1e4>)
 800921e:	4293      	cmp	r3, r2
 8009220:	f200 80ae 	bhi.w	8009380 <HAL_TIM_ConfigClockSource+0x1c0>
 8009224:	4a60      	ldr	r2, [pc, #384]	; (80093a8 <HAL_TIM_ConfigClockSource+0x1e8>)
 8009226:	4293      	cmp	r3, r2
 8009228:	f000 80a1 	beq.w	800936e <HAL_TIM_ConfigClockSource+0x1ae>
 800922c:	4a5e      	ldr	r2, [pc, #376]	; (80093a8 <HAL_TIM_ConfigClockSource+0x1e8>)
 800922e:	4293      	cmp	r3, r2
 8009230:	f200 80a6 	bhi.w	8009380 <HAL_TIM_ConfigClockSource+0x1c0>
 8009234:	4a5d      	ldr	r2, [pc, #372]	; (80093ac <HAL_TIM_ConfigClockSource+0x1ec>)
 8009236:	4293      	cmp	r3, r2
 8009238:	f000 8099 	beq.w	800936e <HAL_TIM_ConfigClockSource+0x1ae>
 800923c:	4a5b      	ldr	r2, [pc, #364]	; (80093ac <HAL_TIM_ConfigClockSource+0x1ec>)
 800923e:	4293      	cmp	r3, r2
 8009240:	f200 809e 	bhi.w	8009380 <HAL_TIM_ConfigClockSource+0x1c0>
 8009244:	4a5a      	ldr	r2, [pc, #360]	; (80093b0 <HAL_TIM_ConfigClockSource+0x1f0>)
 8009246:	4293      	cmp	r3, r2
 8009248:	f000 8091 	beq.w	800936e <HAL_TIM_ConfigClockSource+0x1ae>
 800924c:	4a58      	ldr	r2, [pc, #352]	; (80093b0 <HAL_TIM_ConfigClockSource+0x1f0>)
 800924e:	4293      	cmp	r3, r2
 8009250:	f200 8096 	bhi.w	8009380 <HAL_TIM_ConfigClockSource+0x1c0>
 8009254:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8009258:	f000 8089 	beq.w	800936e <HAL_TIM_ConfigClockSource+0x1ae>
 800925c:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8009260:	f200 808e 	bhi.w	8009380 <HAL_TIM_ConfigClockSource+0x1c0>
 8009264:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009268:	d03e      	beq.n	80092e8 <HAL_TIM_ConfigClockSource+0x128>
 800926a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800926e:	f200 8087 	bhi.w	8009380 <HAL_TIM_ConfigClockSource+0x1c0>
 8009272:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009276:	f000 8086 	beq.w	8009386 <HAL_TIM_ConfigClockSource+0x1c6>
 800927a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800927e:	d87f      	bhi.n	8009380 <HAL_TIM_ConfigClockSource+0x1c0>
 8009280:	2b70      	cmp	r3, #112	; 0x70
 8009282:	d01a      	beq.n	80092ba <HAL_TIM_ConfigClockSource+0xfa>
 8009284:	2b70      	cmp	r3, #112	; 0x70
 8009286:	d87b      	bhi.n	8009380 <HAL_TIM_ConfigClockSource+0x1c0>
 8009288:	2b60      	cmp	r3, #96	; 0x60
 800928a:	d050      	beq.n	800932e <HAL_TIM_ConfigClockSource+0x16e>
 800928c:	2b60      	cmp	r3, #96	; 0x60
 800928e:	d877      	bhi.n	8009380 <HAL_TIM_ConfigClockSource+0x1c0>
 8009290:	2b50      	cmp	r3, #80	; 0x50
 8009292:	d03c      	beq.n	800930e <HAL_TIM_ConfigClockSource+0x14e>
 8009294:	2b50      	cmp	r3, #80	; 0x50
 8009296:	d873      	bhi.n	8009380 <HAL_TIM_ConfigClockSource+0x1c0>
 8009298:	2b40      	cmp	r3, #64	; 0x40
 800929a:	d058      	beq.n	800934e <HAL_TIM_ConfigClockSource+0x18e>
 800929c:	2b40      	cmp	r3, #64	; 0x40
 800929e:	d86f      	bhi.n	8009380 <HAL_TIM_ConfigClockSource+0x1c0>
 80092a0:	2b30      	cmp	r3, #48	; 0x30
 80092a2:	d064      	beq.n	800936e <HAL_TIM_ConfigClockSource+0x1ae>
 80092a4:	2b30      	cmp	r3, #48	; 0x30
 80092a6:	d86b      	bhi.n	8009380 <HAL_TIM_ConfigClockSource+0x1c0>
 80092a8:	2b20      	cmp	r3, #32
 80092aa:	d060      	beq.n	800936e <HAL_TIM_ConfigClockSource+0x1ae>
 80092ac:	2b20      	cmp	r3, #32
 80092ae:	d867      	bhi.n	8009380 <HAL_TIM_ConfigClockSource+0x1c0>
 80092b0:	2b00      	cmp	r3, #0
 80092b2:	d05c      	beq.n	800936e <HAL_TIM_ConfigClockSource+0x1ae>
 80092b4:	2b10      	cmp	r3, #16
 80092b6:	d05a      	beq.n	800936e <HAL_TIM_ConfigClockSource+0x1ae>
 80092b8:	e062      	b.n	8009380 <HAL_TIM_ConfigClockSource+0x1c0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	6818      	ldr	r0, [r3, #0]
 80092be:	683b      	ldr	r3, [r7, #0]
 80092c0:	6899      	ldr	r1, [r3, #8]
 80092c2:	683b      	ldr	r3, [r7, #0]
 80092c4:	685a      	ldr	r2, [r3, #4]
 80092c6:	683b      	ldr	r3, [r7, #0]
 80092c8:	68db      	ldr	r3, [r3, #12]
 80092ca:	f000 fca7 	bl	8009c1c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	681b      	ldr	r3, [r3, #0]
 80092d2:	689b      	ldr	r3, [r3, #8]
 80092d4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80092d6:	68bb      	ldr	r3, [r7, #8]
 80092d8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80092dc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	681b      	ldr	r3, [r3, #0]
 80092e2:	68ba      	ldr	r2, [r7, #8]
 80092e4:	609a      	str	r2, [r3, #8]
      break;
 80092e6:	e04f      	b.n	8009388 <HAL_TIM_ConfigClockSource+0x1c8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	6818      	ldr	r0, [r3, #0]
 80092ec:	683b      	ldr	r3, [r7, #0]
 80092ee:	6899      	ldr	r1, [r3, #8]
 80092f0:	683b      	ldr	r3, [r7, #0]
 80092f2:	685a      	ldr	r2, [r3, #4]
 80092f4:	683b      	ldr	r3, [r7, #0]
 80092f6:	68db      	ldr	r3, [r3, #12]
 80092f8:	f000 fc90 	bl	8009c1c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	681b      	ldr	r3, [r3, #0]
 8009300:	689a      	ldr	r2, [r3, #8]
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	681b      	ldr	r3, [r3, #0]
 8009306:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800930a:	609a      	str	r2, [r3, #8]
      break;
 800930c:	e03c      	b.n	8009388 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	6818      	ldr	r0, [r3, #0]
 8009312:	683b      	ldr	r3, [r7, #0]
 8009314:	6859      	ldr	r1, [r3, #4]
 8009316:	683b      	ldr	r3, [r7, #0]
 8009318:	68db      	ldr	r3, [r3, #12]
 800931a:	461a      	mov	r2, r3
 800931c:	f000 fc02 	bl	8009b24 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	681b      	ldr	r3, [r3, #0]
 8009324:	2150      	movs	r1, #80	; 0x50
 8009326:	4618      	mov	r0, r3
 8009328:	f000 fc5b 	bl	8009be2 <TIM_ITRx_SetConfig>
      break;
 800932c:	e02c      	b.n	8009388 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	6818      	ldr	r0, [r3, #0]
 8009332:	683b      	ldr	r3, [r7, #0]
 8009334:	6859      	ldr	r1, [r3, #4]
 8009336:	683b      	ldr	r3, [r7, #0]
 8009338:	68db      	ldr	r3, [r3, #12]
 800933a:	461a      	mov	r2, r3
 800933c:	f000 fc21 	bl	8009b82 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	681b      	ldr	r3, [r3, #0]
 8009344:	2160      	movs	r1, #96	; 0x60
 8009346:	4618      	mov	r0, r3
 8009348:	f000 fc4b 	bl	8009be2 <TIM_ITRx_SetConfig>
      break;
 800934c:	e01c      	b.n	8009388 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	6818      	ldr	r0, [r3, #0]
 8009352:	683b      	ldr	r3, [r7, #0]
 8009354:	6859      	ldr	r1, [r3, #4]
 8009356:	683b      	ldr	r3, [r7, #0]
 8009358:	68db      	ldr	r3, [r3, #12]
 800935a:	461a      	mov	r2, r3
 800935c:	f000 fbe2 	bl	8009b24 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	681b      	ldr	r3, [r3, #0]
 8009364:	2140      	movs	r1, #64	; 0x40
 8009366:	4618      	mov	r0, r3
 8009368:	f000 fc3b 	bl	8009be2 <TIM_ITRx_SetConfig>
      break;
 800936c:	e00c      	b.n	8009388 <HAL_TIM_ConfigClockSource+0x1c8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	681a      	ldr	r2, [r3, #0]
 8009372:	683b      	ldr	r3, [r7, #0]
 8009374:	681b      	ldr	r3, [r3, #0]
 8009376:	4619      	mov	r1, r3
 8009378:	4610      	mov	r0, r2
 800937a:	f000 fc32 	bl	8009be2 <TIM_ITRx_SetConfig>
      break;
 800937e:	e003      	b.n	8009388 <HAL_TIM_ConfigClockSource+0x1c8>
    }

    default:
      status = HAL_ERROR;
 8009380:	2301      	movs	r3, #1
 8009382:	73fb      	strb	r3, [r7, #15]
      break;
 8009384:	e000      	b.n	8009388 <HAL_TIM_ConfigClockSource+0x1c8>
      break;
 8009386:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	2201      	movs	r2, #1
 800938c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	2200      	movs	r2, #0
 8009394:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8009398:	7bfb      	ldrb	r3, [r7, #15]
}
 800939a:	4618      	mov	r0, r3
 800939c:	3710      	adds	r7, #16
 800939e:	46bd      	mov	sp, r7
 80093a0:	bd80      	pop	{r7, pc}
 80093a2:	bf00      	nop
 80093a4:	00100070 	.word	0x00100070
 80093a8:	00100040 	.word	0x00100040
 80093ac:	00100030 	.word	0x00100030
 80093b0:	00100020 	.word	0x00100020

080093b4 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80093b4:	b480      	push	{r7}
 80093b6:	b083      	sub	sp, #12
 80093b8:	af00      	add	r7, sp, #0
 80093ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80093bc:	bf00      	nop
 80093be:	370c      	adds	r7, #12
 80093c0:	46bd      	mov	sp, r7
 80093c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093c6:	4770      	bx	lr

080093c8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80093c8:	b480      	push	{r7}
 80093ca:	b083      	sub	sp, #12
 80093cc:	af00      	add	r7, sp, #0
 80093ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80093d0:	bf00      	nop
 80093d2:	370c      	adds	r7, #12
 80093d4:	46bd      	mov	sp, r7
 80093d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093da:	4770      	bx	lr

080093dc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80093dc:	b480      	push	{r7}
 80093de:	b083      	sub	sp, #12
 80093e0:	af00      	add	r7, sp, #0
 80093e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80093e4:	bf00      	nop
 80093e6:	370c      	adds	r7, #12
 80093e8:	46bd      	mov	sp, r7
 80093ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093ee:	4770      	bx	lr

080093f0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80093f0:	b480      	push	{r7}
 80093f2:	b083      	sub	sp, #12
 80093f4:	af00      	add	r7, sp, #0
 80093f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80093f8:	bf00      	nop
 80093fa:	370c      	adds	r7, #12
 80093fc:	46bd      	mov	sp, r7
 80093fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009402:	4770      	bx	lr

08009404 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8009404:	b480      	push	{r7}
 8009406:	b083      	sub	sp, #12
 8009408:	af00      	add	r7, sp, #0
 800940a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800940c:	bf00      	nop
 800940e:	370c      	adds	r7, #12
 8009410:	46bd      	mov	sp, r7
 8009412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009416:	4770      	bx	lr

08009418 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8009418:	b480      	push	{r7}
 800941a:	b085      	sub	sp, #20
 800941c:	af00      	add	r7, sp, #0
 800941e:	6078      	str	r0, [r7, #4]
 8009420:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	681b      	ldr	r3, [r3, #0]
 8009426:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	4a3c      	ldr	r2, [pc, #240]	; (800951c <TIM_Base_SetConfig+0x104>)
 800942c:	4293      	cmp	r3, r2
 800942e:	d00f      	beq.n	8009450 <TIM_Base_SetConfig+0x38>
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009436:	d00b      	beq.n	8009450 <TIM_Base_SetConfig+0x38>
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	4a39      	ldr	r2, [pc, #228]	; (8009520 <TIM_Base_SetConfig+0x108>)
 800943c:	4293      	cmp	r3, r2
 800943e:	d007      	beq.n	8009450 <TIM_Base_SetConfig+0x38>
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	4a38      	ldr	r2, [pc, #224]	; (8009524 <TIM_Base_SetConfig+0x10c>)
 8009444:	4293      	cmp	r3, r2
 8009446:	d003      	beq.n	8009450 <TIM_Base_SetConfig+0x38>
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	4a37      	ldr	r2, [pc, #220]	; (8009528 <TIM_Base_SetConfig+0x110>)
 800944c:	4293      	cmp	r3, r2
 800944e:	d108      	bne.n	8009462 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009450:	68fb      	ldr	r3, [r7, #12]
 8009452:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009456:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009458:	683b      	ldr	r3, [r7, #0]
 800945a:	685b      	ldr	r3, [r3, #4]
 800945c:	68fa      	ldr	r2, [r7, #12]
 800945e:	4313      	orrs	r3, r2
 8009460:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009462:	687b      	ldr	r3, [r7, #4]
 8009464:	4a2d      	ldr	r2, [pc, #180]	; (800951c <TIM_Base_SetConfig+0x104>)
 8009466:	4293      	cmp	r3, r2
 8009468:	d01b      	beq.n	80094a2 <TIM_Base_SetConfig+0x8a>
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009470:	d017      	beq.n	80094a2 <TIM_Base_SetConfig+0x8a>
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	4a2a      	ldr	r2, [pc, #168]	; (8009520 <TIM_Base_SetConfig+0x108>)
 8009476:	4293      	cmp	r3, r2
 8009478:	d013      	beq.n	80094a2 <TIM_Base_SetConfig+0x8a>
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	4a29      	ldr	r2, [pc, #164]	; (8009524 <TIM_Base_SetConfig+0x10c>)
 800947e:	4293      	cmp	r3, r2
 8009480:	d00f      	beq.n	80094a2 <TIM_Base_SetConfig+0x8a>
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	4a28      	ldr	r2, [pc, #160]	; (8009528 <TIM_Base_SetConfig+0x110>)
 8009486:	4293      	cmp	r3, r2
 8009488:	d00b      	beq.n	80094a2 <TIM_Base_SetConfig+0x8a>
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	4a27      	ldr	r2, [pc, #156]	; (800952c <TIM_Base_SetConfig+0x114>)
 800948e:	4293      	cmp	r3, r2
 8009490:	d007      	beq.n	80094a2 <TIM_Base_SetConfig+0x8a>
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	4a26      	ldr	r2, [pc, #152]	; (8009530 <TIM_Base_SetConfig+0x118>)
 8009496:	4293      	cmp	r3, r2
 8009498:	d003      	beq.n	80094a2 <TIM_Base_SetConfig+0x8a>
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	4a25      	ldr	r2, [pc, #148]	; (8009534 <TIM_Base_SetConfig+0x11c>)
 800949e:	4293      	cmp	r3, r2
 80094a0:	d108      	bne.n	80094b4 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80094a2:	68fb      	ldr	r3, [r7, #12]
 80094a4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80094a8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80094aa:	683b      	ldr	r3, [r7, #0]
 80094ac:	68db      	ldr	r3, [r3, #12]
 80094ae:	68fa      	ldr	r2, [r7, #12]
 80094b0:	4313      	orrs	r3, r2
 80094b2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80094b4:	68fb      	ldr	r3, [r7, #12]
 80094b6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80094ba:	683b      	ldr	r3, [r7, #0]
 80094bc:	695b      	ldr	r3, [r3, #20]
 80094be:	4313      	orrs	r3, r2
 80094c0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	68fa      	ldr	r2, [r7, #12]
 80094c6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80094c8:	683b      	ldr	r3, [r7, #0]
 80094ca:	689a      	ldr	r2, [r3, #8]
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80094d0:	683b      	ldr	r3, [r7, #0]
 80094d2:	681a      	ldr	r2, [r3, #0]
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	4a10      	ldr	r2, [pc, #64]	; (800951c <TIM_Base_SetConfig+0x104>)
 80094dc:	4293      	cmp	r3, r2
 80094de:	d00f      	beq.n	8009500 <TIM_Base_SetConfig+0xe8>
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	4a11      	ldr	r2, [pc, #68]	; (8009528 <TIM_Base_SetConfig+0x110>)
 80094e4:	4293      	cmp	r3, r2
 80094e6:	d00b      	beq.n	8009500 <TIM_Base_SetConfig+0xe8>
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	4a10      	ldr	r2, [pc, #64]	; (800952c <TIM_Base_SetConfig+0x114>)
 80094ec:	4293      	cmp	r3, r2
 80094ee:	d007      	beq.n	8009500 <TIM_Base_SetConfig+0xe8>
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	4a0f      	ldr	r2, [pc, #60]	; (8009530 <TIM_Base_SetConfig+0x118>)
 80094f4:	4293      	cmp	r3, r2
 80094f6:	d003      	beq.n	8009500 <TIM_Base_SetConfig+0xe8>
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	4a0e      	ldr	r2, [pc, #56]	; (8009534 <TIM_Base_SetConfig+0x11c>)
 80094fc:	4293      	cmp	r3, r2
 80094fe:	d103      	bne.n	8009508 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009500:	683b      	ldr	r3, [r7, #0]
 8009502:	691a      	ldr	r2, [r3, #16]
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	2201      	movs	r2, #1
 800950c:	615a      	str	r2, [r3, #20]
}
 800950e:	bf00      	nop
 8009510:	3714      	adds	r7, #20
 8009512:	46bd      	mov	sp, r7
 8009514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009518:	4770      	bx	lr
 800951a:	bf00      	nop
 800951c:	40012c00 	.word	0x40012c00
 8009520:	40000400 	.word	0x40000400
 8009524:	40000800 	.word	0x40000800
 8009528:	40013400 	.word	0x40013400
 800952c:	40014000 	.word	0x40014000
 8009530:	40014400 	.word	0x40014400
 8009534:	40014800 	.word	0x40014800

08009538 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009538:	b480      	push	{r7}
 800953a:	b087      	sub	sp, #28
 800953c:	af00      	add	r7, sp, #0
 800953e:	6078      	str	r0, [r7, #4]
 8009540:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	6a1b      	ldr	r3, [r3, #32]
 8009546:	f023 0201 	bic.w	r2, r3, #1
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	6a1b      	ldr	r3, [r3, #32]
 8009552:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	685b      	ldr	r3, [r3, #4]
 8009558:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	699b      	ldr	r3, [r3, #24]
 800955e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8009560:	68fb      	ldr	r3, [r7, #12]
 8009562:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009566:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800956a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800956c:	68fb      	ldr	r3, [r7, #12]
 800956e:	f023 0303 	bic.w	r3, r3, #3
 8009572:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009574:	683b      	ldr	r3, [r7, #0]
 8009576:	681b      	ldr	r3, [r3, #0]
 8009578:	68fa      	ldr	r2, [r7, #12]
 800957a:	4313      	orrs	r3, r2
 800957c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800957e:	697b      	ldr	r3, [r7, #20]
 8009580:	f023 0302 	bic.w	r3, r3, #2
 8009584:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8009586:	683b      	ldr	r3, [r7, #0]
 8009588:	689b      	ldr	r3, [r3, #8]
 800958a:	697a      	ldr	r2, [r7, #20]
 800958c:	4313      	orrs	r3, r2
 800958e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	4a2c      	ldr	r2, [pc, #176]	; (8009644 <TIM_OC1_SetConfig+0x10c>)
 8009594:	4293      	cmp	r3, r2
 8009596:	d00f      	beq.n	80095b8 <TIM_OC1_SetConfig+0x80>
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	4a2b      	ldr	r2, [pc, #172]	; (8009648 <TIM_OC1_SetConfig+0x110>)
 800959c:	4293      	cmp	r3, r2
 800959e:	d00b      	beq.n	80095b8 <TIM_OC1_SetConfig+0x80>
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	4a2a      	ldr	r2, [pc, #168]	; (800964c <TIM_OC1_SetConfig+0x114>)
 80095a4:	4293      	cmp	r3, r2
 80095a6:	d007      	beq.n	80095b8 <TIM_OC1_SetConfig+0x80>
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	4a29      	ldr	r2, [pc, #164]	; (8009650 <TIM_OC1_SetConfig+0x118>)
 80095ac:	4293      	cmp	r3, r2
 80095ae:	d003      	beq.n	80095b8 <TIM_OC1_SetConfig+0x80>
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	4a28      	ldr	r2, [pc, #160]	; (8009654 <TIM_OC1_SetConfig+0x11c>)
 80095b4:	4293      	cmp	r3, r2
 80095b6:	d10c      	bne.n	80095d2 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80095b8:	697b      	ldr	r3, [r7, #20]
 80095ba:	f023 0308 	bic.w	r3, r3, #8
 80095be:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80095c0:	683b      	ldr	r3, [r7, #0]
 80095c2:	68db      	ldr	r3, [r3, #12]
 80095c4:	697a      	ldr	r2, [r7, #20]
 80095c6:	4313      	orrs	r3, r2
 80095c8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80095ca:	697b      	ldr	r3, [r7, #20]
 80095cc:	f023 0304 	bic.w	r3, r3, #4
 80095d0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80095d2:	687b      	ldr	r3, [r7, #4]
 80095d4:	4a1b      	ldr	r2, [pc, #108]	; (8009644 <TIM_OC1_SetConfig+0x10c>)
 80095d6:	4293      	cmp	r3, r2
 80095d8:	d00f      	beq.n	80095fa <TIM_OC1_SetConfig+0xc2>
 80095da:	687b      	ldr	r3, [r7, #4]
 80095dc:	4a1a      	ldr	r2, [pc, #104]	; (8009648 <TIM_OC1_SetConfig+0x110>)
 80095de:	4293      	cmp	r3, r2
 80095e0:	d00b      	beq.n	80095fa <TIM_OC1_SetConfig+0xc2>
 80095e2:	687b      	ldr	r3, [r7, #4]
 80095e4:	4a19      	ldr	r2, [pc, #100]	; (800964c <TIM_OC1_SetConfig+0x114>)
 80095e6:	4293      	cmp	r3, r2
 80095e8:	d007      	beq.n	80095fa <TIM_OC1_SetConfig+0xc2>
 80095ea:	687b      	ldr	r3, [r7, #4]
 80095ec:	4a18      	ldr	r2, [pc, #96]	; (8009650 <TIM_OC1_SetConfig+0x118>)
 80095ee:	4293      	cmp	r3, r2
 80095f0:	d003      	beq.n	80095fa <TIM_OC1_SetConfig+0xc2>
 80095f2:	687b      	ldr	r3, [r7, #4]
 80095f4:	4a17      	ldr	r2, [pc, #92]	; (8009654 <TIM_OC1_SetConfig+0x11c>)
 80095f6:	4293      	cmp	r3, r2
 80095f8:	d111      	bne.n	800961e <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80095fa:	693b      	ldr	r3, [r7, #16]
 80095fc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009600:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8009602:	693b      	ldr	r3, [r7, #16]
 8009604:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009608:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800960a:	683b      	ldr	r3, [r7, #0]
 800960c:	695b      	ldr	r3, [r3, #20]
 800960e:	693a      	ldr	r2, [r7, #16]
 8009610:	4313      	orrs	r3, r2
 8009612:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8009614:	683b      	ldr	r3, [r7, #0]
 8009616:	699b      	ldr	r3, [r3, #24]
 8009618:	693a      	ldr	r2, [r7, #16]
 800961a:	4313      	orrs	r3, r2
 800961c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	693a      	ldr	r2, [r7, #16]
 8009622:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	68fa      	ldr	r2, [r7, #12]
 8009628:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800962a:	683b      	ldr	r3, [r7, #0]
 800962c:	685a      	ldr	r2, [r3, #4]
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009632:	687b      	ldr	r3, [r7, #4]
 8009634:	697a      	ldr	r2, [r7, #20]
 8009636:	621a      	str	r2, [r3, #32]
}
 8009638:	bf00      	nop
 800963a:	371c      	adds	r7, #28
 800963c:	46bd      	mov	sp, r7
 800963e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009642:	4770      	bx	lr
 8009644:	40012c00 	.word	0x40012c00
 8009648:	40013400 	.word	0x40013400
 800964c:	40014000 	.word	0x40014000
 8009650:	40014400 	.word	0x40014400
 8009654:	40014800 	.word	0x40014800

08009658 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009658:	b480      	push	{r7}
 800965a:	b087      	sub	sp, #28
 800965c:	af00      	add	r7, sp, #0
 800965e:	6078      	str	r0, [r7, #4]
 8009660:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	6a1b      	ldr	r3, [r3, #32]
 8009666:	f023 0210 	bic.w	r2, r3, #16
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	6a1b      	ldr	r3, [r3, #32]
 8009672:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	685b      	ldr	r3, [r3, #4]
 8009678:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800967a:	687b      	ldr	r3, [r7, #4]
 800967c:	699b      	ldr	r3, [r3, #24]
 800967e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8009680:	68fb      	ldr	r3, [r7, #12]
 8009682:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8009686:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800968a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800968c:	68fb      	ldr	r3, [r7, #12]
 800968e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009692:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009694:	683b      	ldr	r3, [r7, #0]
 8009696:	681b      	ldr	r3, [r3, #0]
 8009698:	021b      	lsls	r3, r3, #8
 800969a:	68fa      	ldr	r2, [r7, #12]
 800969c:	4313      	orrs	r3, r2
 800969e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80096a0:	697b      	ldr	r3, [r7, #20]
 80096a2:	f023 0320 	bic.w	r3, r3, #32
 80096a6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80096a8:	683b      	ldr	r3, [r7, #0]
 80096aa:	689b      	ldr	r3, [r3, #8]
 80096ac:	011b      	lsls	r3, r3, #4
 80096ae:	697a      	ldr	r2, [r7, #20]
 80096b0:	4313      	orrs	r3, r2
 80096b2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	4a28      	ldr	r2, [pc, #160]	; (8009758 <TIM_OC2_SetConfig+0x100>)
 80096b8:	4293      	cmp	r3, r2
 80096ba:	d003      	beq.n	80096c4 <TIM_OC2_SetConfig+0x6c>
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	4a27      	ldr	r2, [pc, #156]	; (800975c <TIM_OC2_SetConfig+0x104>)
 80096c0:	4293      	cmp	r3, r2
 80096c2:	d10d      	bne.n	80096e0 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80096c4:	697b      	ldr	r3, [r7, #20]
 80096c6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80096ca:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80096cc:	683b      	ldr	r3, [r7, #0]
 80096ce:	68db      	ldr	r3, [r3, #12]
 80096d0:	011b      	lsls	r3, r3, #4
 80096d2:	697a      	ldr	r2, [r7, #20]
 80096d4:	4313      	orrs	r3, r2
 80096d6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80096d8:	697b      	ldr	r3, [r7, #20]
 80096da:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80096de:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	4a1d      	ldr	r2, [pc, #116]	; (8009758 <TIM_OC2_SetConfig+0x100>)
 80096e4:	4293      	cmp	r3, r2
 80096e6:	d00f      	beq.n	8009708 <TIM_OC2_SetConfig+0xb0>
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	4a1c      	ldr	r2, [pc, #112]	; (800975c <TIM_OC2_SetConfig+0x104>)
 80096ec:	4293      	cmp	r3, r2
 80096ee:	d00b      	beq.n	8009708 <TIM_OC2_SetConfig+0xb0>
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	4a1b      	ldr	r2, [pc, #108]	; (8009760 <TIM_OC2_SetConfig+0x108>)
 80096f4:	4293      	cmp	r3, r2
 80096f6:	d007      	beq.n	8009708 <TIM_OC2_SetConfig+0xb0>
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	4a1a      	ldr	r2, [pc, #104]	; (8009764 <TIM_OC2_SetConfig+0x10c>)
 80096fc:	4293      	cmp	r3, r2
 80096fe:	d003      	beq.n	8009708 <TIM_OC2_SetConfig+0xb0>
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	4a19      	ldr	r2, [pc, #100]	; (8009768 <TIM_OC2_SetConfig+0x110>)
 8009704:	4293      	cmp	r3, r2
 8009706:	d113      	bne.n	8009730 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8009708:	693b      	ldr	r3, [r7, #16]
 800970a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800970e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8009710:	693b      	ldr	r3, [r7, #16]
 8009712:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009716:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8009718:	683b      	ldr	r3, [r7, #0]
 800971a:	695b      	ldr	r3, [r3, #20]
 800971c:	009b      	lsls	r3, r3, #2
 800971e:	693a      	ldr	r2, [r7, #16]
 8009720:	4313      	orrs	r3, r2
 8009722:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8009724:	683b      	ldr	r3, [r7, #0]
 8009726:	699b      	ldr	r3, [r3, #24]
 8009728:	009b      	lsls	r3, r3, #2
 800972a:	693a      	ldr	r2, [r7, #16]
 800972c:	4313      	orrs	r3, r2
 800972e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009730:	687b      	ldr	r3, [r7, #4]
 8009732:	693a      	ldr	r2, [r7, #16]
 8009734:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009736:	687b      	ldr	r3, [r7, #4]
 8009738:	68fa      	ldr	r2, [r7, #12]
 800973a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800973c:	683b      	ldr	r3, [r7, #0]
 800973e:	685a      	ldr	r2, [r3, #4]
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	697a      	ldr	r2, [r7, #20]
 8009748:	621a      	str	r2, [r3, #32]
}
 800974a:	bf00      	nop
 800974c:	371c      	adds	r7, #28
 800974e:	46bd      	mov	sp, r7
 8009750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009754:	4770      	bx	lr
 8009756:	bf00      	nop
 8009758:	40012c00 	.word	0x40012c00
 800975c:	40013400 	.word	0x40013400
 8009760:	40014000 	.word	0x40014000
 8009764:	40014400 	.word	0x40014400
 8009768:	40014800 	.word	0x40014800

0800976c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800976c:	b480      	push	{r7}
 800976e:	b087      	sub	sp, #28
 8009770:	af00      	add	r7, sp, #0
 8009772:	6078      	str	r0, [r7, #4]
 8009774:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8009776:	687b      	ldr	r3, [r7, #4]
 8009778:	6a1b      	ldr	r3, [r3, #32]
 800977a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800977e:	687b      	ldr	r3, [r7, #4]
 8009780:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009782:	687b      	ldr	r3, [r7, #4]
 8009784:	6a1b      	ldr	r3, [r3, #32]
 8009786:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	685b      	ldr	r3, [r3, #4]
 800978c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800978e:	687b      	ldr	r3, [r7, #4]
 8009790:	69db      	ldr	r3, [r3, #28]
 8009792:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8009794:	68fb      	ldr	r3, [r7, #12]
 8009796:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800979a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800979e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80097a0:	68fb      	ldr	r3, [r7, #12]
 80097a2:	f023 0303 	bic.w	r3, r3, #3
 80097a6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80097a8:	683b      	ldr	r3, [r7, #0]
 80097aa:	681b      	ldr	r3, [r3, #0]
 80097ac:	68fa      	ldr	r2, [r7, #12]
 80097ae:	4313      	orrs	r3, r2
 80097b0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80097b2:	697b      	ldr	r3, [r7, #20]
 80097b4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80097b8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80097ba:	683b      	ldr	r3, [r7, #0]
 80097bc:	689b      	ldr	r3, [r3, #8]
 80097be:	021b      	lsls	r3, r3, #8
 80097c0:	697a      	ldr	r2, [r7, #20]
 80097c2:	4313      	orrs	r3, r2
 80097c4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80097c6:	687b      	ldr	r3, [r7, #4]
 80097c8:	4a27      	ldr	r2, [pc, #156]	; (8009868 <TIM_OC3_SetConfig+0xfc>)
 80097ca:	4293      	cmp	r3, r2
 80097cc:	d003      	beq.n	80097d6 <TIM_OC3_SetConfig+0x6a>
 80097ce:	687b      	ldr	r3, [r7, #4]
 80097d0:	4a26      	ldr	r2, [pc, #152]	; (800986c <TIM_OC3_SetConfig+0x100>)
 80097d2:	4293      	cmp	r3, r2
 80097d4:	d10d      	bne.n	80097f2 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80097d6:	697b      	ldr	r3, [r7, #20]
 80097d8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80097dc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80097de:	683b      	ldr	r3, [r7, #0]
 80097e0:	68db      	ldr	r3, [r3, #12]
 80097e2:	021b      	lsls	r3, r3, #8
 80097e4:	697a      	ldr	r2, [r7, #20]
 80097e6:	4313      	orrs	r3, r2
 80097e8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80097ea:	697b      	ldr	r3, [r7, #20]
 80097ec:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80097f0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80097f2:	687b      	ldr	r3, [r7, #4]
 80097f4:	4a1c      	ldr	r2, [pc, #112]	; (8009868 <TIM_OC3_SetConfig+0xfc>)
 80097f6:	4293      	cmp	r3, r2
 80097f8:	d00f      	beq.n	800981a <TIM_OC3_SetConfig+0xae>
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	4a1b      	ldr	r2, [pc, #108]	; (800986c <TIM_OC3_SetConfig+0x100>)
 80097fe:	4293      	cmp	r3, r2
 8009800:	d00b      	beq.n	800981a <TIM_OC3_SetConfig+0xae>
 8009802:	687b      	ldr	r3, [r7, #4]
 8009804:	4a1a      	ldr	r2, [pc, #104]	; (8009870 <TIM_OC3_SetConfig+0x104>)
 8009806:	4293      	cmp	r3, r2
 8009808:	d007      	beq.n	800981a <TIM_OC3_SetConfig+0xae>
 800980a:	687b      	ldr	r3, [r7, #4]
 800980c:	4a19      	ldr	r2, [pc, #100]	; (8009874 <TIM_OC3_SetConfig+0x108>)
 800980e:	4293      	cmp	r3, r2
 8009810:	d003      	beq.n	800981a <TIM_OC3_SetConfig+0xae>
 8009812:	687b      	ldr	r3, [r7, #4]
 8009814:	4a18      	ldr	r2, [pc, #96]	; (8009878 <TIM_OC3_SetConfig+0x10c>)
 8009816:	4293      	cmp	r3, r2
 8009818:	d113      	bne.n	8009842 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800981a:	693b      	ldr	r3, [r7, #16]
 800981c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009820:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8009822:	693b      	ldr	r3, [r7, #16]
 8009824:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009828:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800982a:	683b      	ldr	r3, [r7, #0]
 800982c:	695b      	ldr	r3, [r3, #20]
 800982e:	011b      	lsls	r3, r3, #4
 8009830:	693a      	ldr	r2, [r7, #16]
 8009832:	4313      	orrs	r3, r2
 8009834:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8009836:	683b      	ldr	r3, [r7, #0]
 8009838:	699b      	ldr	r3, [r3, #24]
 800983a:	011b      	lsls	r3, r3, #4
 800983c:	693a      	ldr	r2, [r7, #16]
 800983e:	4313      	orrs	r3, r2
 8009840:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	693a      	ldr	r2, [r7, #16]
 8009846:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	68fa      	ldr	r2, [r7, #12]
 800984c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800984e:	683b      	ldr	r3, [r7, #0]
 8009850:	685a      	ldr	r2, [r3, #4]
 8009852:	687b      	ldr	r3, [r7, #4]
 8009854:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009856:	687b      	ldr	r3, [r7, #4]
 8009858:	697a      	ldr	r2, [r7, #20]
 800985a:	621a      	str	r2, [r3, #32]
}
 800985c:	bf00      	nop
 800985e:	371c      	adds	r7, #28
 8009860:	46bd      	mov	sp, r7
 8009862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009866:	4770      	bx	lr
 8009868:	40012c00 	.word	0x40012c00
 800986c:	40013400 	.word	0x40013400
 8009870:	40014000 	.word	0x40014000
 8009874:	40014400 	.word	0x40014400
 8009878:	40014800 	.word	0x40014800

0800987c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800987c:	b480      	push	{r7}
 800987e:	b087      	sub	sp, #28
 8009880:	af00      	add	r7, sp, #0
 8009882:	6078      	str	r0, [r7, #4]
 8009884:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8009886:	687b      	ldr	r3, [r7, #4]
 8009888:	6a1b      	ldr	r3, [r3, #32]
 800988a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800988e:	687b      	ldr	r3, [r7, #4]
 8009890:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009892:	687b      	ldr	r3, [r7, #4]
 8009894:	6a1b      	ldr	r3, [r3, #32]
 8009896:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	685b      	ldr	r3, [r3, #4]
 800989c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800989e:	687b      	ldr	r3, [r7, #4]
 80098a0:	69db      	ldr	r3, [r3, #28]
 80098a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80098a4:	68fb      	ldr	r3, [r7, #12]
 80098a6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80098aa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80098ae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80098b0:	68fb      	ldr	r3, [r7, #12]
 80098b2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80098b6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80098b8:	683b      	ldr	r3, [r7, #0]
 80098ba:	681b      	ldr	r3, [r3, #0]
 80098bc:	021b      	lsls	r3, r3, #8
 80098be:	68fa      	ldr	r2, [r7, #12]
 80098c0:	4313      	orrs	r3, r2
 80098c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80098c4:	697b      	ldr	r3, [r7, #20]
 80098c6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80098ca:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80098cc:	683b      	ldr	r3, [r7, #0]
 80098ce:	689b      	ldr	r3, [r3, #8]
 80098d0:	031b      	lsls	r3, r3, #12
 80098d2:	697a      	ldr	r2, [r7, #20]
 80098d4:	4313      	orrs	r3, r2
 80098d6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	4a28      	ldr	r2, [pc, #160]	; (800997c <TIM_OC4_SetConfig+0x100>)
 80098dc:	4293      	cmp	r3, r2
 80098de:	d003      	beq.n	80098e8 <TIM_OC4_SetConfig+0x6c>
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	4a27      	ldr	r2, [pc, #156]	; (8009980 <TIM_OC4_SetConfig+0x104>)
 80098e4:	4293      	cmp	r3, r2
 80098e6:	d10d      	bne.n	8009904 <TIM_OC4_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 80098e8:	697b      	ldr	r3, [r7, #20]
 80098ea:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80098ee:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 80098f0:	683b      	ldr	r3, [r7, #0]
 80098f2:	68db      	ldr	r3, [r3, #12]
 80098f4:	031b      	lsls	r3, r3, #12
 80098f6:	697a      	ldr	r2, [r7, #20]
 80098f8:	4313      	orrs	r3, r2
 80098fa:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 80098fc:	697b      	ldr	r3, [r7, #20]
 80098fe:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009902:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	4a1d      	ldr	r2, [pc, #116]	; (800997c <TIM_OC4_SetConfig+0x100>)
 8009908:	4293      	cmp	r3, r2
 800990a:	d00f      	beq.n	800992c <TIM_OC4_SetConfig+0xb0>
 800990c:	687b      	ldr	r3, [r7, #4]
 800990e:	4a1c      	ldr	r2, [pc, #112]	; (8009980 <TIM_OC4_SetConfig+0x104>)
 8009910:	4293      	cmp	r3, r2
 8009912:	d00b      	beq.n	800992c <TIM_OC4_SetConfig+0xb0>
 8009914:	687b      	ldr	r3, [r7, #4]
 8009916:	4a1b      	ldr	r2, [pc, #108]	; (8009984 <TIM_OC4_SetConfig+0x108>)
 8009918:	4293      	cmp	r3, r2
 800991a:	d007      	beq.n	800992c <TIM_OC4_SetConfig+0xb0>
 800991c:	687b      	ldr	r3, [r7, #4]
 800991e:	4a1a      	ldr	r2, [pc, #104]	; (8009988 <TIM_OC4_SetConfig+0x10c>)
 8009920:	4293      	cmp	r3, r2
 8009922:	d003      	beq.n	800992c <TIM_OC4_SetConfig+0xb0>
 8009924:	687b      	ldr	r3, [r7, #4]
 8009926:	4a19      	ldr	r2, [pc, #100]	; (800998c <TIM_OC4_SetConfig+0x110>)
 8009928:	4293      	cmp	r3, r2
 800992a:	d113      	bne.n	8009954 <TIM_OC4_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800992c:	693b      	ldr	r3, [r7, #16]
 800992e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009932:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8009934:	693b      	ldr	r3, [r7, #16]
 8009936:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800993a:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800993c:	683b      	ldr	r3, [r7, #0]
 800993e:	695b      	ldr	r3, [r3, #20]
 8009940:	019b      	lsls	r3, r3, #6
 8009942:	693a      	ldr	r2, [r7, #16]
 8009944:	4313      	orrs	r3, r2
 8009946:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8009948:	683b      	ldr	r3, [r7, #0]
 800994a:	699b      	ldr	r3, [r3, #24]
 800994c:	019b      	lsls	r3, r3, #6
 800994e:	693a      	ldr	r2, [r7, #16]
 8009950:	4313      	orrs	r3, r2
 8009952:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009954:	687b      	ldr	r3, [r7, #4]
 8009956:	693a      	ldr	r2, [r7, #16]
 8009958:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800995a:	687b      	ldr	r3, [r7, #4]
 800995c:	68fa      	ldr	r2, [r7, #12]
 800995e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8009960:	683b      	ldr	r3, [r7, #0]
 8009962:	685a      	ldr	r2, [r3, #4]
 8009964:	687b      	ldr	r3, [r7, #4]
 8009966:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	697a      	ldr	r2, [r7, #20]
 800996c:	621a      	str	r2, [r3, #32]
}
 800996e:	bf00      	nop
 8009970:	371c      	adds	r7, #28
 8009972:	46bd      	mov	sp, r7
 8009974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009978:	4770      	bx	lr
 800997a:	bf00      	nop
 800997c:	40012c00 	.word	0x40012c00
 8009980:	40013400 	.word	0x40013400
 8009984:	40014000 	.word	0x40014000
 8009988:	40014400 	.word	0x40014400
 800998c:	40014800 	.word	0x40014800

08009990 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8009990:	b480      	push	{r7}
 8009992:	b087      	sub	sp, #28
 8009994:	af00      	add	r7, sp, #0
 8009996:	6078      	str	r0, [r7, #4]
 8009998:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800999a:	687b      	ldr	r3, [r7, #4]
 800999c:	6a1b      	ldr	r3, [r3, #32]
 800999e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80099a2:	687b      	ldr	r3, [r7, #4]
 80099a4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80099a6:	687b      	ldr	r3, [r7, #4]
 80099a8:	6a1b      	ldr	r3, [r3, #32]
 80099aa:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	685b      	ldr	r3, [r3, #4]
 80099b0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80099b2:	687b      	ldr	r3, [r7, #4]
 80099b4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80099b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80099b8:	68fb      	ldr	r3, [r7, #12]
 80099ba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80099be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80099c2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80099c4:	683b      	ldr	r3, [r7, #0]
 80099c6:	681b      	ldr	r3, [r3, #0]
 80099c8:	68fa      	ldr	r2, [r7, #12]
 80099ca:	4313      	orrs	r3, r2
 80099cc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80099ce:	693b      	ldr	r3, [r7, #16]
 80099d0:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80099d4:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80099d6:	683b      	ldr	r3, [r7, #0]
 80099d8:	689b      	ldr	r3, [r3, #8]
 80099da:	041b      	lsls	r3, r3, #16
 80099dc:	693a      	ldr	r2, [r7, #16]
 80099de:	4313      	orrs	r3, r2
 80099e0:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80099e2:	687b      	ldr	r3, [r7, #4]
 80099e4:	4a17      	ldr	r2, [pc, #92]	; (8009a44 <TIM_OC5_SetConfig+0xb4>)
 80099e6:	4293      	cmp	r3, r2
 80099e8:	d00f      	beq.n	8009a0a <TIM_OC5_SetConfig+0x7a>
 80099ea:	687b      	ldr	r3, [r7, #4]
 80099ec:	4a16      	ldr	r2, [pc, #88]	; (8009a48 <TIM_OC5_SetConfig+0xb8>)
 80099ee:	4293      	cmp	r3, r2
 80099f0:	d00b      	beq.n	8009a0a <TIM_OC5_SetConfig+0x7a>
 80099f2:	687b      	ldr	r3, [r7, #4]
 80099f4:	4a15      	ldr	r2, [pc, #84]	; (8009a4c <TIM_OC5_SetConfig+0xbc>)
 80099f6:	4293      	cmp	r3, r2
 80099f8:	d007      	beq.n	8009a0a <TIM_OC5_SetConfig+0x7a>
 80099fa:	687b      	ldr	r3, [r7, #4]
 80099fc:	4a14      	ldr	r2, [pc, #80]	; (8009a50 <TIM_OC5_SetConfig+0xc0>)
 80099fe:	4293      	cmp	r3, r2
 8009a00:	d003      	beq.n	8009a0a <TIM_OC5_SetConfig+0x7a>
 8009a02:	687b      	ldr	r3, [r7, #4]
 8009a04:	4a13      	ldr	r2, [pc, #76]	; (8009a54 <TIM_OC5_SetConfig+0xc4>)
 8009a06:	4293      	cmp	r3, r2
 8009a08:	d109      	bne.n	8009a1e <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8009a0a:	697b      	ldr	r3, [r7, #20]
 8009a0c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009a10:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8009a12:	683b      	ldr	r3, [r7, #0]
 8009a14:	695b      	ldr	r3, [r3, #20]
 8009a16:	021b      	lsls	r3, r3, #8
 8009a18:	697a      	ldr	r2, [r7, #20]
 8009a1a:	4313      	orrs	r3, r2
 8009a1c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009a1e:	687b      	ldr	r3, [r7, #4]
 8009a20:	697a      	ldr	r2, [r7, #20]
 8009a22:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8009a24:	687b      	ldr	r3, [r7, #4]
 8009a26:	68fa      	ldr	r2, [r7, #12]
 8009a28:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8009a2a:	683b      	ldr	r3, [r7, #0]
 8009a2c:	685a      	ldr	r2, [r3, #4]
 8009a2e:	687b      	ldr	r3, [r7, #4]
 8009a30:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009a32:	687b      	ldr	r3, [r7, #4]
 8009a34:	693a      	ldr	r2, [r7, #16]
 8009a36:	621a      	str	r2, [r3, #32]
}
 8009a38:	bf00      	nop
 8009a3a:	371c      	adds	r7, #28
 8009a3c:	46bd      	mov	sp, r7
 8009a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a42:	4770      	bx	lr
 8009a44:	40012c00 	.word	0x40012c00
 8009a48:	40013400 	.word	0x40013400
 8009a4c:	40014000 	.word	0x40014000
 8009a50:	40014400 	.word	0x40014400
 8009a54:	40014800 	.word	0x40014800

08009a58 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8009a58:	b480      	push	{r7}
 8009a5a:	b087      	sub	sp, #28
 8009a5c:	af00      	add	r7, sp, #0
 8009a5e:	6078      	str	r0, [r7, #4]
 8009a60:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8009a62:	687b      	ldr	r3, [r7, #4]
 8009a64:	6a1b      	ldr	r3, [r3, #32]
 8009a66:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8009a6a:	687b      	ldr	r3, [r7, #4]
 8009a6c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009a6e:	687b      	ldr	r3, [r7, #4]
 8009a70:	6a1b      	ldr	r3, [r3, #32]
 8009a72:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	685b      	ldr	r3, [r3, #4]
 8009a78:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8009a7a:	687b      	ldr	r3, [r7, #4]
 8009a7c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009a7e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8009a80:	68fb      	ldr	r3, [r7, #12]
 8009a82:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8009a86:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009a8a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009a8c:	683b      	ldr	r3, [r7, #0]
 8009a8e:	681b      	ldr	r3, [r3, #0]
 8009a90:	021b      	lsls	r3, r3, #8
 8009a92:	68fa      	ldr	r2, [r7, #12]
 8009a94:	4313      	orrs	r3, r2
 8009a96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8009a98:	693b      	ldr	r3, [r7, #16]
 8009a9a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8009a9e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8009aa0:	683b      	ldr	r3, [r7, #0]
 8009aa2:	689b      	ldr	r3, [r3, #8]
 8009aa4:	051b      	lsls	r3, r3, #20
 8009aa6:	693a      	ldr	r2, [r7, #16]
 8009aa8:	4313      	orrs	r3, r2
 8009aaa:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009aac:	687b      	ldr	r3, [r7, #4]
 8009aae:	4a18      	ldr	r2, [pc, #96]	; (8009b10 <TIM_OC6_SetConfig+0xb8>)
 8009ab0:	4293      	cmp	r3, r2
 8009ab2:	d00f      	beq.n	8009ad4 <TIM_OC6_SetConfig+0x7c>
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	4a17      	ldr	r2, [pc, #92]	; (8009b14 <TIM_OC6_SetConfig+0xbc>)
 8009ab8:	4293      	cmp	r3, r2
 8009aba:	d00b      	beq.n	8009ad4 <TIM_OC6_SetConfig+0x7c>
 8009abc:	687b      	ldr	r3, [r7, #4]
 8009abe:	4a16      	ldr	r2, [pc, #88]	; (8009b18 <TIM_OC6_SetConfig+0xc0>)
 8009ac0:	4293      	cmp	r3, r2
 8009ac2:	d007      	beq.n	8009ad4 <TIM_OC6_SetConfig+0x7c>
 8009ac4:	687b      	ldr	r3, [r7, #4]
 8009ac6:	4a15      	ldr	r2, [pc, #84]	; (8009b1c <TIM_OC6_SetConfig+0xc4>)
 8009ac8:	4293      	cmp	r3, r2
 8009aca:	d003      	beq.n	8009ad4 <TIM_OC6_SetConfig+0x7c>
 8009acc:	687b      	ldr	r3, [r7, #4]
 8009ace:	4a14      	ldr	r2, [pc, #80]	; (8009b20 <TIM_OC6_SetConfig+0xc8>)
 8009ad0:	4293      	cmp	r3, r2
 8009ad2:	d109      	bne.n	8009ae8 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8009ad4:	697b      	ldr	r3, [r7, #20]
 8009ad6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8009ada:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8009adc:	683b      	ldr	r3, [r7, #0]
 8009ade:	695b      	ldr	r3, [r3, #20]
 8009ae0:	029b      	lsls	r3, r3, #10
 8009ae2:	697a      	ldr	r2, [r7, #20]
 8009ae4:	4313      	orrs	r3, r2
 8009ae6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009ae8:	687b      	ldr	r3, [r7, #4]
 8009aea:	697a      	ldr	r2, [r7, #20]
 8009aec:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8009aee:	687b      	ldr	r3, [r7, #4]
 8009af0:	68fa      	ldr	r2, [r7, #12]
 8009af2:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8009af4:	683b      	ldr	r3, [r7, #0]
 8009af6:	685a      	ldr	r2, [r3, #4]
 8009af8:	687b      	ldr	r3, [r7, #4]
 8009afa:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	693a      	ldr	r2, [r7, #16]
 8009b00:	621a      	str	r2, [r3, #32]
}
 8009b02:	bf00      	nop
 8009b04:	371c      	adds	r7, #28
 8009b06:	46bd      	mov	sp, r7
 8009b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b0c:	4770      	bx	lr
 8009b0e:	bf00      	nop
 8009b10:	40012c00 	.word	0x40012c00
 8009b14:	40013400 	.word	0x40013400
 8009b18:	40014000 	.word	0x40014000
 8009b1c:	40014400 	.word	0x40014400
 8009b20:	40014800 	.word	0x40014800

08009b24 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009b24:	b480      	push	{r7}
 8009b26:	b087      	sub	sp, #28
 8009b28:	af00      	add	r7, sp, #0
 8009b2a:	60f8      	str	r0, [r7, #12]
 8009b2c:	60b9      	str	r1, [r7, #8]
 8009b2e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8009b30:	68fb      	ldr	r3, [r7, #12]
 8009b32:	6a1b      	ldr	r3, [r3, #32]
 8009b34:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009b36:	68fb      	ldr	r3, [r7, #12]
 8009b38:	6a1b      	ldr	r3, [r3, #32]
 8009b3a:	f023 0201 	bic.w	r2, r3, #1
 8009b3e:	68fb      	ldr	r3, [r7, #12]
 8009b40:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009b42:	68fb      	ldr	r3, [r7, #12]
 8009b44:	699b      	ldr	r3, [r3, #24]
 8009b46:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009b48:	693b      	ldr	r3, [r7, #16]
 8009b4a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009b4e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8009b50:	687b      	ldr	r3, [r7, #4]
 8009b52:	011b      	lsls	r3, r3, #4
 8009b54:	693a      	ldr	r2, [r7, #16]
 8009b56:	4313      	orrs	r3, r2
 8009b58:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8009b5a:	697b      	ldr	r3, [r7, #20]
 8009b5c:	f023 030a 	bic.w	r3, r3, #10
 8009b60:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8009b62:	697a      	ldr	r2, [r7, #20]
 8009b64:	68bb      	ldr	r3, [r7, #8]
 8009b66:	4313      	orrs	r3, r2
 8009b68:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8009b6a:	68fb      	ldr	r3, [r7, #12]
 8009b6c:	693a      	ldr	r2, [r7, #16]
 8009b6e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009b70:	68fb      	ldr	r3, [r7, #12]
 8009b72:	697a      	ldr	r2, [r7, #20]
 8009b74:	621a      	str	r2, [r3, #32]
}
 8009b76:	bf00      	nop
 8009b78:	371c      	adds	r7, #28
 8009b7a:	46bd      	mov	sp, r7
 8009b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b80:	4770      	bx	lr

08009b82 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009b82:	b480      	push	{r7}
 8009b84:	b087      	sub	sp, #28
 8009b86:	af00      	add	r7, sp, #0
 8009b88:	60f8      	str	r0, [r7, #12]
 8009b8a:	60b9      	str	r1, [r7, #8]
 8009b8c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009b8e:	68fb      	ldr	r3, [r7, #12]
 8009b90:	6a1b      	ldr	r3, [r3, #32]
 8009b92:	f023 0210 	bic.w	r2, r3, #16
 8009b96:	68fb      	ldr	r3, [r7, #12]
 8009b98:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009b9a:	68fb      	ldr	r3, [r7, #12]
 8009b9c:	699b      	ldr	r3, [r3, #24]
 8009b9e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8009ba0:	68fb      	ldr	r3, [r7, #12]
 8009ba2:	6a1b      	ldr	r3, [r3, #32]
 8009ba4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8009ba6:	697b      	ldr	r3, [r7, #20]
 8009ba8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8009bac:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8009bae:	687b      	ldr	r3, [r7, #4]
 8009bb0:	031b      	lsls	r3, r3, #12
 8009bb2:	697a      	ldr	r2, [r7, #20]
 8009bb4:	4313      	orrs	r3, r2
 8009bb6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009bb8:	693b      	ldr	r3, [r7, #16]
 8009bba:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8009bbe:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8009bc0:	68bb      	ldr	r3, [r7, #8]
 8009bc2:	011b      	lsls	r3, r3, #4
 8009bc4:	693a      	ldr	r2, [r7, #16]
 8009bc6:	4313      	orrs	r3, r2
 8009bc8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8009bca:	68fb      	ldr	r3, [r7, #12]
 8009bcc:	697a      	ldr	r2, [r7, #20]
 8009bce:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009bd0:	68fb      	ldr	r3, [r7, #12]
 8009bd2:	693a      	ldr	r2, [r7, #16]
 8009bd4:	621a      	str	r2, [r3, #32]
}
 8009bd6:	bf00      	nop
 8009bd8:	371c      	adds	r7, #28
 8009bda:	46bd      	mov	sp, r7
 8009bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009be0:	4770      	bx	lr

08009be2 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8009be2:	b480      	push	{r7}
 8009be4:	b085      	sub	sp, #20
 8009be6:	af00      	add	r7, sp, #0
 8009be8:	6078      	str	r0, [r7, #4]
 8009bea:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8009bec:	687b      	ldr	r3, [r7, #4]
 8009bee:	689b      	ldr	r3, [r3, #8]
 8009bf0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8009bf2:	68fb      	ldr	r3, [r7, #12]
 8009bf4:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8009bf8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009bfc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8009bfe:	683a      	ldr	r2, [r7, #0]
 8009c00:	68fb      	ldr	r3, [r7, #12]
 8009c02:	4313      	orrs	r3, r2
 8009c04:	f043 0307 	orr.w	r3, r3, #7
 8009c08:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009c0a:	687b      	ldr	r3, [r7, #4]
 8009c0c:	68fa      	ldr	r2, [r7, #12]
 8009c0e:	609a      	str	r2, [r3, #8]
}
 8009c10:	bf00      	nop
 8009c12:	3714      	adds	r7, #20
 8009c14:	46bd      	mov	sp, r7
 8009c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c1a:	4770      	bx	lr

08009c1c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8009c1c:	b480      	push	{r7}
 8009c1e:	b087      	sub	sp, #28
 8009c20:	af00      	add	r7, sp, #0
 8009c22:	60f8      	str	r0, [r7, #12]
 8009c24:	60b9      	str	r1, [r7, #8]
 8009c26:	607a      	str	r2, [r7, #4]
 8009c28:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8009c2a:	68fb      	ldr	r3, [r7, #12]
 8009c2c:	689b      	ldr	r3, [r3, #8]
 8009c2e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009c30:	697b      	ldr	r3, [r7, #20]
 8009c32:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009c36:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8009c38:	683b      	ldr	r3, [r7, #0]
 8009c3a:	021a      	lsls	r2, r3, #8
 8009c3c:	687b      	ldr	r3, [r7, #4]
 8009c3e:	431a      	orrs	r2, r3
 8009c40:	68bb      	ldr	r3, [r7, #8]
 8009c42:	4313      	orrs	r3, r2
 8009c44:	697a      	ldr	r2, [r7, #20]
 8009c46:	4313      	orrs	r3, r2
 8009c48:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009c4a:	68fb      	ldr	r3, [r7, #12]
 8009c4c:	697a      	ldr	r2, [r7, #20]
 8009c4e:	609a      	str	r2, [r3, #8]
}
 8009c50:	bf00      	nop
 8009c52:	371c      	adds	r7, #28
 8009c54:	46bd      	mov	sp, r7
 8009c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c5a:	4770      	bx	lr

08009c5c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8009c5c:	b480      	push	{r7}
 8009c5e:	b087      	sub	sp, #28
 8009c60:	af00      	add	r7, sp, #0
 8009c62:	60f8      	str	r0, [r7, #12]
 8009c64:	60b9      	str	r1, [r7, #8]
 8009c66:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8009c68:	68bb      	ldr	r3, [r7, #8]
 8009c6a:	f003 031f 	and.w	r3, r3, #31
 8009c6e:	2201      	movs	r2, #1
 8009c70:	fa02 f303 	lsl.w	r3, r2, r3
 8009c74:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8009c76:	68fb      	ldr	r3, [r7, #12]
 8009c78:	6a1a      	ldr	r2, [r3, #32]
 8009c7a:	697b      	ldr	r3, [r7, #20]
 8009c7c:	43db      	mvns	r3, r3
 8009c7e:	401a      	ands	r2, r3
 8009c80:	68fb      	ldr	r3, [r7, #12]
 8009c82:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8009c84:	68fb      	ldr	r3, [r7, #12]
 8009c86:	6a1a      	ldr	r2, [r3, #32]
 8009c88:	68bb      	ldr	r3, [r7, #8]
 8009c8a:	f003 031f 	and.w	r3, r3, #31
 8009c8e:	6879      	ldr	r1, [r7, #4]
 8009c90:	fa01 f303 	lsl.w	r3, r1, r3
 8009c94:	431a      	orrs	r2, r3
 8009c96:	68fb      	ldr	r3, [r7, #12]
 8009c98:	621a      	str	r2, [r3, #32]
}
 8009c9a:	bf00      	nop
 8009c9c:	371c      	adds	r7, #28
 8009c9e:	46bd      	mov	sp, r7
 8009ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ca4:	4770      	bx	lr
	...

08009ca8 <HAL_TIMEx_PWMN_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8009ca8:	b580      	push	{r7, lr}
 8009caa:	b084      	sub	sp, #16
 8009cac:	af00      	add	r7, sp, #0
 8009cae:	6078      	str	r0, [r7, #4]
 8009cb0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8009cb2:	2300      	movs	r3, #0
 8009cb4:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8009cb6:	683b      	ldr	r3, [r7, #0]
 8009cb8:	2b00      	cmp	r3, #0
 8009cba:	d109      	bne.n	8009cd0 <HAL_TIMEx_PWMN_Start_IT+0x28>
 8009cbc:	687b      	ldr	r3, [r7, #4]
 8009cbe:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009cc2:	b2db      	uxtb	r3, r3
 8009cc4:	2b01      	cmp	r3, #1
 8009cc6:	bf14      	ite	ne
 8009cc8:	2301      	movne	r3, #1
 8009cca:	2300      	moveq	r3, #0
 8009ccc:	b2db      	uxtb	r3, r3
 8009cce:	e022      	b.n	8009d16 <HAL_TIMEx_PWMN_Start_IT+0x6e>
 8009cd0:	683b      	ldr	r3, [r7, #0]
 8009cd2:	2b04      	cmp	r3, #4
 8009cd4:	d109      	bne.n	8009cea <HAL_TIMEx_PWMN_Start_IT+0x42>
 8009cd6:	687b      	ldr	r3, [r7, #4]
 8009cd8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009cdc:	b2db      	uxtb	r3, r3
 8009cde:	2b01      	cmp	r3, #1
 8009ce0:	bf14      	ite	ne
 8009ce2:	2301      	movne	r3, #1
 8009ce4:	2300      	moveq	r3, #0
 8009ce6:	b2db      	uxtb	r3, r3
 8009ce8:	e015      	b.n	8009d16 <HAL_TIMEx_PWMN_Start_IT+0x6e>
 8009cea:	683b      	ldr	r3, [r7, #0]
 8009cec:	2b08      	cmp	r3, #8
 8009cee:	d109      	bne.n	8009d04 <HAL_TIMEx_PWMN_Start_IT+0x5c>
 8009cf0:	687b      	ldr	r3, [r7, #4]
 8009cf2:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8009cf6:	b2db      	uxtb	r3, r3
 8009cf8:	2b01      	cmp	r3, #1
 8009cfa:	bf14      	ite	ne
 8009cfc:	2301      	movne	r3, #1
 8009cfe:	2300      	moveq	r3, #0
 8009d00:	b2db      	uxtb	r3, r3
 8009d02:	e008      	b.n	8009d16 <HAL_TIMEx_PWMN_Start_IT+0x6e>
 8009d04:	687b      	ldr	r3, [r7, #4]
 8009d06:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 8009d0a:	b2db      	uxtb	r3, r3
 8009d0c:	2b01      	cmp	r3, #1
 8009d0e:	bf14      	ite	ne
 8009d10:	2301      	movne	r3, #1
 8009d12:	2300      	moveq	r3, #0
 8009d14:	b2db      	uxtb	r3, r3
 8009d16:	2b00      	cmp	r3, #0
 8009d18:	d001      	beq.n	8009d1e <HAL_TIMEx_PWMN_Start_IT+0x76>
  {
    return HAL_ERROR;
 8009d1a:	2301      	movs	r3, #1
 8009d1c:	e0bc      	b.n	8009e98 <HAL_TIMEx_PWMN_Start_IT+0x1f0>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8009d1e:	683b      	ldr	r3, [r7, #0]
 8009d20:	2b00      	cmp	r3, #0
 8009d22:	d104      	bne.n	8009d2e <HAL_TIMEx_PWMN_Start_IT+0x86>
 8009d24:	687b      	ldr	r3, [r7, #4]
 8009d26:	2202      	movs	r2, #2
 8009d28:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009d2c:	e013      	b.n	8009d56 <HAL_TIMEx_PWMN_Start_IT+0xae>
 8009d2e:	683b      	ldr	r3, [r7, #0]
 8009d30:	2b04      	cmp	r3, #4
 8009d32:	d104      	bne.n	8009d3e <HAL_TIMEx_PWMN_Start_IT+0x96>
 8009d34:	687b      	ldr	r3, [r7, #4]
 8009d36:	2202      	movs	r2, #2
 8009d38:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009d3c:	e00b      	b.n	8009d56 <HAL_TIMEx_PWMN_Start_IT+0xae>
 8009d3e:	683b      	ldr	r3, [r7, #0]
 8009d40:	2b08      	cmp	r3, #8
 8009d42:	d104      	bne.n	8009d4e <HAL_TIMEx_PWMN_Start_IT+0xa6>
 8009d44:	687b      	ldr	r3, [r7, #4]
 8009d46:	2202      	movs	r2, #2
 8009d48:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8009d4c:	e003      	b.n	8009d56 <HAL_TIMEx_PWMN_Start_IT+0xae>
 8009d4e:	687b      	ldr	r3, [r7, #4]
 8009d50:	2202      	movs	r2, #2
 8009d52:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  switch (Channel)
 8009d56:	683b      	ldr	r3, [r7, #0]
 8009d58:	2b0c      	cmp	r3, #12
 8009d5a:	d841      	bhi.n	8009de0 <HAL_TIMEx_PWMN_Start_IT+0x138>
 8009d5c:	a201      	add	r2, pc, #4	; (adr r2, 8009d64 <HAL_TIMEx_PWMN_Start_IT+0xbc>)
 8009d5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009d62:	bf00      	nop
 8009d64:	08009d99 	.word	0x08009d99
 8009d68:	08009de1 	.word	0x08009de1
 8009d6c:	08009de1 	.word	0x08009de1
 8009d70:	08009de1 	.word	0x08009de1
 8009d74:	08009dab 	.word	0x08009dab
 8009d78:	08009de1 	.word	0x08009de1
 8009d7c:	08009de1 	.word	0x08009de1
 8009d80:	08009de1 	.word	0x08009de1
 8009d84:	08009dbd 	.word	0x08009dbd
 8009d88:	08009de1 	.word	0x08009de1
 8009d8c:	08009de1 	.word	0x08009de1
 8009d90:	08009de1 	.word	0x08009de1
 8009d94:	08009dcf 	.word	0x08009dcf
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8009d98:	687b      	ldr	r3, [r7, #4]
 8009d9a:	681b      	ldr	r3, [r3, #0]
 8009d9c:	68da      	ldr	r2, [r3, #12]
 8009d9e:	687b      	ldr	r3, [r7, #4]
 8009da0:	681b      	ldr	r3, [r3, #0]
 8009da2:	f042 0202 	orr.w	r2, r2, #2
 8009da6:	60da      	str	r2, [r3, #12]
      break;
 8009da8:	e01d      	b.n	8009de6 <HAL_TIMEx_PWMN_Start_IT+0x13e>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8009daa:	687b      	ldr	r3, [r7, #4]
 8009dac:	681b      	ldr	r3, [r3, #0]
 8009dae:	68da      	ldr	r2, [r3, #12]
 8009db0:	687b      	ldr	r3, [r7, #4]
 8009db2:	681b      	ldr	r3, [r3, #0]
 8009db4:	f042 0204 	orr.w	r2, r2, #4
 8009db8:	60da      	str	r2, [r3, #12]
      break;
 8009dba:	e014      	b.n	8009de6 <HAL_TIMEx_PWMN_Start_IT+0x13e>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8009dbc:	687b      	ldr	r3, [r7, #4]
 8009dbe:	681b      	ldr	r3, [r3, #0]
 8009dc0:	68da      	ldr	r2, [r3, #12]
 8009dc2:	687b      	ldr	r3, [r7, #4]
 8009dc4:	681b      	ldr	r3, [r3, #0]
 8009dc6:	f042 0208 	orr.w	r2, r2, #8
 8009dca:	60da      	str	r2, [r3, #12]
      break;
 8009dcc:	e00b      	b.n	8009de6 <HAL_TIMEx_PWMN_Start_IT+0x13e>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	681b      	ldr	r3, [r3, #0]
 8009dd2:	68da      	ldr	r2, [r3, #12]
 8009dd4:	687b      	ldr	r3, [r7, #4]
 8009dd6:	681b      	ldr	r3, [r3, #0]
 8009dd8:	f042 0210 	orr.w	r2, r2, #16
 8009ddc:	60da      	str	r2, [r3, #12]
      break;
 8009dde:	e002      	b.n	8009de6 <HAL_TIMEx_PWMN_Start_IT+0x13e>
    }

    default:
      status = HAL_ERROR;
 8009de0:	2301      	movs	r3, #1
 8009de2:	73fb      	strb	r3, [r7, #15]
      break;
 8009de4:	bf00      	nop
  }

  if (status == HAL_OK)
 8009de6:	7bfb      	ldrb	r3, [r7, #15]
 8009de8:	2b00      	cmp	r3, #0
 8009dea:	d154      	bne.n	8009e96 <HAL_TIMEx_PWMN_Start_IT+0x1ee>
  {
    /* Enable the TIM Break interrupt */
    __HAL_TIM_ENABLE_IT(htim, TIM_IT_BREAK);
 8009dec:	687b      	ldr	r3, [r7, #4]
 8009dee:	681b      	ldr	r3, [r3, #0]
 8009df0:	68da      	ldr	r2, [r3, #12]
 8009df2:	687b      	ldr	r3, [r7, #4]
 8009df4:	681b      	ldr	r3, [r3, #0]
 8009df6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8009dfa:	60da      	str	r2, [r3, #12]

    /* Enable the complementary PWM output  */
    TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 8009dfc:	687b      	ldr	r3, [r7, #4]
 8009dfe:	681b      	ldr	r3, [r3, #0]
 8009e00:	2204      	movs	r2, #4
 8009e02:	6839      	ldr	r1, [r7, #0]
 8009e04:	4618      	mov	r0, r3
 8009e06:	f000 f9bf 	bl	800a188 <TIM_CCxNChannelCmd>

    /* Enable the Main Output */
    __HAL_TIM_MOE_ENABLE(htim);
 8009e0a:	687b      	ldr	r3, [r7, #4]
 8009e0c:	681b      	ldr	r3, [r3, #0]
 8009e0e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009e10:	687b      	ldr	r3, [r7, #4]
 8009e12:	681b      	ldr	r3, [r3, #0]
 8009e14:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8009e18:	645a      	str	r2, [r3, #68]	; 0x44

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009e1a:	687b      	ldr	r3, [r7, #4]
 8009e1c:	681b      	ldr	r3, [r3, #0]
 8009e1e:	4a20      	ldr	r2, [pc, #128]	; (8009ea0 <HAL_TIMEx_PWMN_Start_IT+0x1f8>)
 8009e20:	4293      	cmp	r3, r2
 8009e22:	d018      	beq.n	8009e56 <HAL_TIMEx_PWMN_Start_IT+0x1ae>
 8009e24:	687b      	ldr	r3, [r7, #4]
 8009e26:	681b      	ldr	r3, [r3, #0]
 8009e28:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009e2c:	d013      	beq.n	8009e56 <HAL_TIMEx_PWMN_Start_IT+0x1ae>
 8009e2e:	687b      	ldr	r3, [r7, #4]
 8009e30:	681b      	ldr	r3, [r3, #0]
 8009e32:	4a1c      	ldr	r2, [pc, #112]	; (8009ea4 <HAL_TIMEx_PWMN_Start_IT+0x1fc>)
 8009e34:	4293      	cmp	r3, r2
 8009e36:	d00e      	beq.n	8009e56 <HAL_TIMEx_PWMN_Start_IT+0x1ae>
 8009e38:	687b      	ldr	r3, [r7, #4]
 8009e3a:	681b      	ldr	r3, [r3, #0]
 8009e3c:	4a1a      	ldr	r2, [pc, #104]	; (8009ea8 <HAL_TIMEx_PWMN_Start_IT+0x200>)
 8009e3e:	4293      	cmp	r3, r2
 8009e40:	d009      	beq.n	8009e56 <HAL_TIMEx_PWMN_Start_IT+0x1ae>
 8009e42:	687b      	ldr	r3, [r7, #4]
 8009e44:	681b      	ldr	r3, [r3, #0]
 8009e46:	4a19      	ldr	r2, [pc, #100]	; (8009eac <HAL_TIMEx_PWMN_Start_IT+0x204>)
 8009e48:	4293      	cmp	r3, r2
 8009e4a:	d004      	beq.n	8009e56 <HAL_TIMEx_PWMN_Start_IT+0x1ae>
 8009e4c:	687b      	ldr	r3, [r7, #4]
 8009e4e:	681b      	ldr	r3, [r3, #0]
 8009e50:	4a17      	ldr	r2, [pc, #92]	; (8009eb0 <HAL_TIMEx_PWMN_Start_IT+0x208>)
 8009e52:	4293      	cmp	r3, r2
 8009e54:	d115      	bne.n	8009e82 <HAL_TIMEx_PWMN_Start_IT+0x1da>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009e56:	687b      	ldr	r3, [r7, #4]
 8009e58:	681b      	ldr	r3, [r3, #0]
 8009e5a:	689a      	ldr	r2, [r3, #8]
 8009e5c:	4b15      	ldr	r3, [pc, #84]	; (8009eb4 <HAL_TIMEx_PWMN_Start_IT+0x20c>)
 8009e5e:	4013      	ands	r3, r2
 8009e60:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009e62:	68bb      	ldr	r3, [r7, #8]
 8009e64:	2b06      	cmp	r3, #6
 8009e66:	d015      	beq.n	8009e94 <HAL_TIMEx_PWMN_Start_IT+0x1ec>
 8009e68:	68bb      	ldr	r3, [r7, #8]
 8009e6a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009e6e:	d011      	beq.n	8009e94 <HAL_TIMEx_PWMN_Start_IT+0x1ec>
      {
        __HAL_TIM_ENABLE(htim);
 8009e70:	687b      	ldr	r3, [r7, #4]
 8009e72:	681b      	ldr	r3, [r3, #0]
 8009e74:	681a      	ldr	r2, [r3, #0]
 8009e76:	687b      	ldr	r3, [r7, #4]
 8009e78:	681b      	ldr	r3, [r3, #0]
 8009e7a:	f042 0201 	orr.w	r2, r2, #1
 8009e7e:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009e80:	e008      	b.n	8009e94 <HAL_TIMEx_PWMN_Start_IT+0x1ec>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8009e82:	687b      	ldr	r3, [r7, #4]
 8009e84:	681b      	ldr	r3, [r3, #0]
 8009e86:	681a      	ldr	r2, [r3, #0]
 8009e88:	687b      	ldr	r3, [r7, #4]
 8009e8a:	681b      	ldr	r3, [r3, #0]
 8009e8c:	f042 0201 	orr.w	r2, r2, #1
 8009e90:	601a      	str	r2, [r3, #0]
 8009e92:	e000      	b.n	8009e96 <HAL_TIMEx_PWMN_Start_IT+0x1ee>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009e94:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 8009e96:	7bfb      	ldrb	r3, [r7, #15]
}
 8009e98:	4618      	mov	r0, r3
 8009e9a:	3710      	adds	r7, #16
 8009e9c:	46bd      	mov	sp, r7
 8009e9e:	bd80      	pop	{r7, pc}
 8009ea0:	40012c00 	.word	0x40012c00
 8009ea4:	40000400 	.word	0x40000400
 8009ea8:	40000800 	.word	0x40000800
 8009eac:	40013400 	.word	0x40013400
 8009eb0:	40014000 	.word	0x40014000
 8009eb4:	00010007 	.word	0x00010007

08009eb8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009eb8:	b480      	push	{r7}
 8009eba:	b085      	sub	sp, #20
 8009ebc:	af00      	add	r7, sp, #0
 8009ebe:	6078      	str	r0, [r7, #4]
 8009ec0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009ec2:	687b      	ldr	r3, [r7, #4]
 8009ec4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009ec8:	2b01      	cmp	r3, #1
 8009eca:	d101      	bne.n	8009ed0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009ecc:	2302      	movs	r3, #2
 8009ece:	e065      	b.n	8009f9c <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 8009ed0:	687b      	ldr	r3, [r7, #4]
 8009ed2:	2201      	movs	r2, #1
 8009ed4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009ed8:	687b      	ldr	r3, [r7, #4]
 8009eda:	2202      	movs	r2, #2
 8009edc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009ee0:	687b      	ldr	r3, [r7, #4]
 8009ee2:	681b      	ldr	r3, [r3, #0]
 8009ee4:	685b      	ldr	r3, [r3, #4]
 8009ee6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009ee8:	687b      	ldr	r3, [r7, #4]
 8009eea:	681b      	ldr	r3, [r3, #0]
 8009eec:	689b      	ldr	r3, [r3, #8]
 8009eee:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8009ef0:	687b      	ldr	r3, [r7, #4]
 8009ef2:	681b      	ldr	r3, [r3, #0]
 8009ef4:	4a2c      	ldr	r2, [pc, #176]	; (8009fa8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8009ef6:	4293      	cmp	r3, r2
 8009ef8:	d004      	beq.n	8009f04 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8009efa:	687b      	ldr	r3, [r7, #4]
 8009efc:	681b      	ldr	r3, [r3, #0]
 8009efe:	4a2b      	ldr	r2, [pc, #172]	; (8009fac <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8009f00:	4293      	cmp	r3, r2
 8009f02:	d108      	bne.n	8009f16 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8009f04:	68fb      	ldr	r3, [r7, #12]
 8009f06:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8009f0a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8009f0c:	683b      	ldr	r3, [r7, #0]
 8009f0e:	685b      	ldr	r3, [r3, #4]
 8009f10:	68fa      	ldr	r2, [r7, #12]
 8009f12:	4313      	orrs	r3, r2
 8009f14:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009f16:	68fb      	ldr	r3, [r7, #12]
 8009f18:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8009f1c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009f20:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009f22:	683b      	ldr	r3, [r7, #0]
 8009f24:	681b      	ldr	r3, [r3, #0]
 8009f26:	68fa      	ldr	r2, [r7, #12]
 8009f28:	4313      	orrs	r3, r2
 8009f2a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009f2c:	687b      	ldr	r3, [r7, #4]
 8009f2e:	681b      	ldr	r3, [r3, #0]
 8009f30:	68fa      	ldr	r2, [r7, #12]
 8009f32:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009f34:	687b      	ldr	r3, [r7, #4]
 8009f36:	681b      	ldr	r3, [r3, #0]
 8009f38:	4a1b      	ldr	r2, [pc, #108]	; (8009fa8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8009f3a:	4293      	cmp	r3, r2
 8009f3c:	d018      	beq.n	8009f70 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8009f3e:	687b      	ldr	r3, [r7, #4]
 8009f40:	681b      	ldr	r3, [r3, #0]
 8009f42:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009f46:	d013      	beq.n	8009f70 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8009f48:	687b      	ldr	r3, [r7, #4]
 8009f4a:	681b      	ldr	r3, [r3, #0]
 8009f4c:	4a18      	ldr	r2, [pc, #96]	; (8009fb0 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8009f4e:	4293      	cmp	r3, r2
 8009f50:	d00e      	beq.n	8009f70 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8009f52:	687b      	ldr	r3, [r7, #4]
 8009f54:	681b      	ldr	r3, [r3, #0]
 8009f56:	4a17      	ldr	r2, [pc, #92]	; (8009fb4 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8009f58:	4293      	cmp	r3, r2
 8009f5a:	d009      	beq.n	8009f70 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8009f5c:	687b      	ldr	r3, [r7, #4]
 8009f5e:	681b      	ldr	r3, [r3, #0]
 8009f60:	4a12      	ldr	r2, [pc, #72]	; (8009fac <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8009f62:	4293      	cmp	r3, r2
 8009f64:	d004      	beq.n	8009f70 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8009f66:	687b      	ldr	r3, [r7, #4]
 8009f68:	681b      	ldr	r3, [r3, #0]
 8009f6a:	4a13      	ldr	r2, [pc, #76]	; (8009fb8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8009f6c:	4293      	cmp	r3, r2
 8009f6e:	d10c      	bne.n	8009f8a <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009f70:	68bb      	ldr	r3, [r7, #8]
 8009f72:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009f76:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009f78:	683b      	ldr	r3, [r7, #0]
 8009f7a:	689b      	ldr	r3, [r3, #8]
 8009f7c:	68ba      	ldr	r2, [r7, #8]
 8009f7e:	4313      	orrs	r3, r2
 8009f80:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009f82:	687b      	ldr	r3, [r7, #4]
 8009f84:	681b      	ldr	r3, [r3, #0]
 8009f86:	68ba      	ldr	r2, [r7, #8]
 8009f88:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009f8a:	687b      	ldr	r3, [r7, #4]
 8009f8c:	2201      	movs	r2, #1
 8009f8e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009f92:	687b      	ldr	r3, [r7, #4]
 8009f94:	2200      	movs	r2, #0
 8009f96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009f9a:	2300      	movs	r3, #0
}
 8009f9c:	4618      	mov	r0, r3
 8009f9e:	3714      	adds	r7, #20
 8009fa0:	46bd      	mov	sp, r7
 8009fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fa6:	4770      	bx	lr
 8009fa8:	40012c00 	.word	0x40012c00
 8009fac:	40013400 	.word	0x40013400
 8009fb0:	40000400 	.word	0x40000400
 8009fb4:	40000800 	.word	0x40000800
 8009fb8:	40014000 	.word	0x40014000

08009fbc <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8009fbc:	b480      	push	{r7}
 8009fbe:	b085      	sub	sp, #20
 8009fc0:	af00      	add	r7, sp, #0
 8009fc2:	6078      	str	r0, [r7, #4]
 8009fc4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8009fc6:	2300      	movs	r3, #0
 8009fc8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8009fca:	687b      	ldr	r3, [r7, #4]
 8009fcc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009fd0:	2b01      	cmp	r3, #1
 8009fd2:	d101      	bne.n	8009fd8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8009fd4:	2302      	movs	r3, #2
 8009fd6:	e087      	b.n	800a0e8 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>
 8009fd8:	687b      	ldr	r3, [r7, #4]
 8009fda:	2201      	movs	r2, #1
 8009fdc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8009fe0:	68fb      	ldr	r3, [r7, #12]
 8009fe2:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8009fe6:	683b      	ldr	r3, [r7, #0]
 8009fe8:	68db      	ldr	r3, [r3, #12]
 8009fea:	4313      	orrs	r3, r2
 8009fec:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8009fee:	68fb      	ldr	r3, [r7, #12]
 8009ff0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8009ff4:	683b      	ldr	r3, [r7, #0]
 8009ff6:	689b      	ldr	r3, [r3, #8]
 8009ff8:	4313      	orrs	r3, r2
 8009ffa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8009ffc:	68fb      	ldr	r3, [r7, #12]
 8009ffe:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800a002:	683b      	ldr	r3, [r7, #0]
 800a004:	685b      	ldr	r3, [r3, #4]
 800a006:	4313      	orrs	r3, r2
 800a008:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800a00a:	68fb      	ldr	r3, [r7, #12]
 800a00c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800a010:	683b      	ldr	r3, [r7, #0]
 800a012:	681b      	ldr	r3, [r3, #0]
 800a014:	4313      	orrs	r3, r2
 800a016:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800a018:	68fb      	ldr	r3, [r7, #12]
 800a01a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800a01e:	683b      	ldr	r3, [r7, #0]
 800a020:	691b      	ldr	r3, [r3, #16]
 800a022:	4313      	orrs	r3, r2
 800a024:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800a026:	68fb      	ldr	r3, [r7, #12]
 800a028:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800a02c:	683b      	ldr	r3, [r7, #0]
 800a02e:	695b      	ldr	r3, [r3, #20]
 800a030:	4313      	orrs	r3, r2
 800a032:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800a034:	68fb      	ldr	r3, [r7, #12]
 800a036:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800a03a:	683b      	ldr	r3, [r7, #0]
 800a03c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a03e:	4313      	orrs	r3, r2
 800a040:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800a042:	68fb      	ldr	r3, [r7, #12]
 800a044:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800a048:	683b      	ldr	r3, [r7, #0]
 800a04a:	699b      	ldr	r3, [r3, #24]
 800a04c:	041b      	lsls	r3, r3, #16
 800a04e:	4313      	orrs	r3, r2
 800a050:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800a052:	687b      	ldr	r3, [r7, #4]
 800a054:	681b      	ldr	r3, [r3, #0]
 800a056:	4a27      	ldr	r2, [pc, #156]	; (800a0f4 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 800a058:	4293      	cmp	r3, r2
 800a05a:	d004      	beq.n	800a066 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800a05c:	687b      	ldr	r3, [r7, #4]
 800a05e:	681b      	ldr	r3, [r3, #0]
 800a060:	4a25      	ldr	r2, [pc, #148]	; (800a0f8 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 800a062:	4293      	cmp	r3, r2
 800a064:	d106      	bne.n	800a074 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800a066:	68fb      	ldr	r3, [r7, #12]
 800a068:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800a06c:	683b      	ldr	r3, [r7, #0]
 800a06e:	69db      	ldr	r3, [r3, #28]
 800a070:	4313      	orrs	r3, r2
 800a072:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800a074:	687b      	ldr	r3, [r7, #4]
 800a076:	681b      	ldr	r3, [r3, #0]
 800a078:	4a1e      	ldr	r2, [pc, #120]	; (800a0f4 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 800a07a:	4293      	cmp	r3, r2
 800a07c:	d004      	beq.n	800a088 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
 800a07e:	687b      	ldr	r3, [r7, #4]
 800a080:	681b      	ldr	r3, [r3, #0]
 800a082:	4a1d      	ldr	r2, [pc, #116]	; (800a0f8 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 800a084:	4293      	cmp	r3, r2
 800a086:	d126      	bne.n	800a0d6 <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800a088:	68fb      	ldr	r3, [r7, #12]
 800a08a:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800a08e:	683b      	ldr	r3, [r7, #0]
 800a090:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a092:	051b      	lsls	r3, r3, #20
 800a094:	4313      	orrs	r3, r2
 800a096:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800a098:	68fb      	ldr	r3, [r7, #12]
 800a09a:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800a09e:	683b      	ldr	r3, [r7, #0]
 800a0a0:	6a1b      	ldr	r3, [r3, #32]
 800a0a2:	4313      	orrs	r3, r2
 800a0a4:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800a0a6:	68fb      	ldr	r3, [r7, #12]
 800a0a8:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800a0ac:	683b      	ldr	r3, [r7, #0]
 800a0ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a0b0:	4313      	orrs	r3, r2
 800a0b2:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800a0b4:	687b      	ldr	r3, [r7, #4]
 800a0b6:	681b      	ldr	r3, [r3, #0]
 800a0b8:	4a0e      	ldr	r2, [pc, #56]	; (800a0f4 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 800a0ba:	4293      	cmp	r3, r2
 800a0bc:	d004      	beq.n	800a0c8 <HAL_TIMEx_ConfigBreakDeadTime+0x10c>
 800a0be:	687b      	ldr	r3, [r7, #4]
 800a0c0:	681b      	ldr	r3, [r3, #0]
 800a0c2:	4a0d      	ldr	r2, [pc, #52]	; (800a0f8 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 800a0c4:	4293      	cmp	r3, r2
 800a0c6:	d106      	bne.n	800a0d6 <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800a0c8:	68fb      	ldr	r3, [r7, #12]
 800a0ca:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800a0ce:	683b      	ldr	r3, [r7, #0]
 800a0d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a0d2:	4313      	orrs	r3, r2
 800a0d4:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800a0d6:	687b      	ldr	r3, [r7, #4]
 800a0d8:	681b      	ldr	r3, [r3, #0]
 800a0da:	68fa      	ldr	r2, [r7, #12]
 800a0dc:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800a0de:	687b      	ldr	r3, [r7, #4]
 800a0e0:	2200      	movs	r2, #0
 800a0e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a0e6:	2300      	movs	r3, #0
}
 800a0e8:	4618      	mov	r0, r3
 800a0ea:	3714      	adds	r7, #20
 800a0ec:	46bd      	mov	sp, r7
 800a0ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0f2:	4770      	bx	lr
 800a0f4:	40012c00 	.word	0x40012c00
 800a0f8:	40013400 	.word	0x40013400

0800a0fc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800a0fc:	b480      	push	{r7}
 800a0fe:	b083      	sub	sp, #12
 800a100:	af00      	add	r7, sp, #0
 800a102:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800a104:	bf00      	nop
 800a106:	370c      	adds	r7, #12
 800a108:	46bd      	mov	sp, r7
 800a10a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a10e:	4770      	bx	lr

0800a110 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800a110:	b480      	push	{r7}
 800a112:	b083      	sub	sp, #12
 800a114:	af00      	add	r7, sp, #0
 800a116:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800a118:	bf00      	nop
 800a11a:	370c      	adds	r7, #12
 800a11c:	46bd      	mov	sp, r7
 800a11e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a122:	4770      	bx	lr

0800a124 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800a124:	b480      	push	{r7}
 800a126:	b083      	sub	sp, #12
 800a128:	af00      	add	r7, sp, #0
 800a12a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800a12c:	bf00      	nop
 800a12e:	370c      	adds	r7, #12
 800a130:	46bd      	mov	sp, r7
 800a132:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a136:	4770      	bx	lr

0800a138 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 800a138:	b480      	push	{r7}
 800a13a:	b083      	sub	sp, #12
 800a13c:	af00      	add	r7, sp, #0
 800a13e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 800a140:	bf00      	nop
 800a142:	370c      	adds	r7, #12
 800a144:	46bd      	mov	sp, r7
 800a146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a14a:	4770      	bx	lr

0800a14c <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 800a14c:	b480      	push	{r7}
 800a14e:	b083      	sub	sp, #12
 800a150:	af00      	add	r7, sp, #0
 800a152:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 800a154:	bf00      	nop
 800a156:	370c      	adds	r7, #12
 800a158:	46bd      	mov	sp, r7
 800a15a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a15e:	4770      	bx	lr

0800a160 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 800a160:	b480      	push	{r7}
 800a162:	b083      	sub	sp, #12
 800a164:	af00      	add	r7, sp, #0
 800a166:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 800a168:	bf00      	nop
 800a16a:	370c      	adds	r7, #12
 800a16c:	46bd      	mov	sp, r7
 800a16e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a172:	4770      	bx	lr

0800a174 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 800a174:	b480      	push	{r7}
 800a176:	b083      	sub	sp, #12
 800a178:	af00      	add	r7, sp, #0
 800a17a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 800a17c:	bf00      	nop
 800a17e:	370c      	adds	r7, #12
 800a180:	46bd      	mov	sp, r7
 800a182:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a186:	4770      	bx	lr

0800a188 <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 800a188:	b480      	push	{r7}
 800a18a:	b087      	sub	sp, #28
 800a18c:	af00      	add	r7, sp, #0
 800a18e:	60f8      	str	r0, [r7, #12]
 800a190:	60b9      	str	r1, [r7, #8]
 800a192:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800a194:	68bb      	ldr	r3, [r7, #8]
 800a196:	f003 031f 	and.w	r3, r3, #31
 800a19a:	2204      	movs	r2, #4
 800a19c:	fa02 f303 	lsl.w	r3, r2, r3
 800a1a0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 800a1a2:	68fb      	ldr	r3, [r7, #12]
 800a1a4:	6a1a      	ldr	r2, [r3, #32]
 800a1a6:	697b      	ldr	r3, [r7, #20]
 800a1a8:	43db      	mvns	r3, r3
 800a1aa:	401a      	ands	r2, r3
 800a1ac:	68fb      	ldr	r3, [r7, #12]
 800a1ae:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800a1b0:	68fb      	ldr	r3, [r7, #12]
 800a1b2:	6a1a      	ldr	r2, [r3, #32]
 800a1b4:	68bb      	ldr	r3, [r7, #8]
 800a1b6:	f003 031f 	and.w	r3, r3, #31
 800a1ba:	6879      	ldr	r1, [r7, #4]
 800a1bc:	fa01 f303 	lsl.w	r3, r1, r3
 800a1c0:	431a      	orrs	r2, r3
 800a1c2:	68fb      	ldr	r3, [r7, #12]
 800a1c4:	621a      	str	r2, [r3, #32]
}
 800a1c6:	bf00      	nop
 800a1c8:	371c      	adds	r7, #28
 800a1ca:	46bd      	mov	sp, r7
 800a1cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1d0:	4770      	bx	lr

0800a1d2 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a1d2:	b580      	push	{r7, lr}
 800a1d4:	b082      	sub	sp, #8
 800a1d6:	af00      	add	r7, sp, #0
 800a1d8:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a1da:	687b      	ldr	r3, [r7, #4]
 800a1dc:	2b00      	cmp	r3, #0
 800a1de:	d101      	bne.n	800a1e4 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a1e0:	2301      	movs	r3, #1
 800a1e2:	e042      	b.n	800a26a <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800a1e4:	687b      	ldr	r3, [r7, #4]
 800a1e6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a1ea:	2b00      	cmp	r3, #0
 800a1ec:	d106      	bne.n	800a1fc <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a1ee:	687b      	ldr	r3, [r7, #4]
 800a1f0:	2200      	movs	r2, #0
 800a1f2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800a1f6:	6878      	ldr	r0, [r7, #4]
 800a1f8:	f7f8 fd2e 	bl	8002c58 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a1fc:	687b      	ldr	r3, [r7, #4]
 800a1fe:	2224      	movs	r2, #36	; 0x24
 800a200:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800a204:	687b      	ldr	r3, [r7, #4]
 800a206:	681b      	ldr	r3, [r3, #0]
 800a208:	681a      	ldr	r2, [r3, #0]
 800a20a:	687b      	ldr	r3, [r7, #4]
 800a20c:	681b      	ldr	r3, [r3, #0]
 800a20e:	f022 0201 	bic.w	r2, r2, #1
 800a212:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800a214:	6878      	ldr	r0, [r7, #4]
 800a216:	f000 fbfb 	bl	800aa10 <UART_SetConfig>
 800a21a:	4603      	mov	r3, r0
 800a21c:	2b01      	cmp	r3, #1
 800a21e:	d101      	bne.n	800a224 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800a220:	2301      	movs	r3, #1
 800a222:	e022      	b.n	800a26a <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800a224:	687b      	ldr	r3, [r7, #4]
 800a226:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a228:	2b00      	cmp	r3, #0
 800a22a:	d002      	beq.n	800a232 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800a22c:	6878      	ldr	r0, [r7, #4]
 800a22e:	f000 febb 	bl	800afa8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a232:	687b      	ldr	r3, [r7, #4]
 800a234:	681b      	ldr	r3, [r3, #0]
 800a236:	685a      	ldr	r2, [r3, #4]
 800a238:	687b      	ldr	r3, [r7, #4]
 800a23a:	681b      	ldr	r3, [r3, #0]
 800a23c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800a240:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a242:	687b      	ldr	r3, [r7, #4]
 800a244:	681b      	ldr	r3, [r3, #0]
 800a246:	689a      	ldr	r2, [r3, #8]
 800a248:	687b      	ldr	r3, [r7, #4]
 800a24a:	681b      	ldr	r3, [r3, #0]
 800a24c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800a250:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800a252:	687b      	ldr	r3, [r7, #4]
 800a254:	681b      	ldr	r3, [r3, #0]
 800a256:	681a      	ldr	r2, [r3, #0]
 800a258:	687b      	ldr	r3, [r7, #4]
 800a25a:	681b      	ldr	r3, [r3, #0]
 800a25c:	f042 0201 	orr.w	r2, r2, #1
 800a260:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800a262:	6878      	ldr	r0, [r7, #4]
 800a264:	f000 ff42 	bl	800b0ec <UART_CheckIdleState>
 800a268:	4603      	mov	r3, r0
}
 800a26a:	4618      	mov	r0, r3
 800a26c:	3708      	adds	r7, #8
 800a26e:	46bd      	mov	sp, r7
 800a270:	bd80      	pop	{r7, pc}

0800a272 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a272:	b580      	push	{r7, lr}
 800a274:	b08a      	sub	sp, #40	; 0x28
 800a276:	af02      	add	r7, sp, #8
 800a278:	60f8      	str	r0, [r7, #12]
 800a27a:	60b9      	str	r1, [r7, #8]
 800a27c:	603b      	str	r3, [r7, #0]
 800a27e:	4613      	mov	r3, r2
 800a280:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800a282:	68fb      	ldr	r3, [r7, #12]
 800a284:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a288:	2b20      	cmp	r3, #32
 800a28a:	f040 8083 	bne.w	800a394 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 800a28e:	68bb      	ldr	r3, [r7, #8]
 800a290:	2b00      	cmp	r3, #0
 800a292:	d002      	beq.n	800a29a <HAL_UART_Transmit+0x28>
 800a294:	88fb      	ldrh	r3, [r7, #6]
 800a296:	2b00      	cmp	r3, #0
 800a298:	d101      	bne.n	800a29e <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 800a29a:	2301      	movs	r3, #1
 800a29c:	e07b      	b.n	800a396 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 800a29e:	68fb      	ldr	r3, [r7, #12]
 800a2a0:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800a2a4:	2b01      	cmp	r3, #1
 800a2a6:	d101      	bne.n	800a2ac <HAL_UART_Transmit+0x3a>
 800a2a8:	2302      	movs	r3, #2
 800a2aa:	e074      	b.n	800a396 <HAL_UART_Transmit+0x124>
 800a2ac:	68fb      	ldr	r3, [r7, #12]
 800a2ae:	2201      	movs	r2, #1
 800a2b0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a2b4:	68fb      	ldr	r3, [r7, #12]
 800a2b6:	2200      	movs	r2, #0
 800a2b8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800a2bc:	68fb      	ldr	r3, [r7, #12]
 800a2be:	2221      	movs	r2, #33	; 0x21
 800a2c0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800a2c4:	f7f9 f83e 	bl	8003344 <HAL_GetTick>
 800a2c8:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800a2ca:	68fb      	ldr	r3, [r7, #12]
 800a2cc:	88fa      	ldrh	r2, [r7, #6]
 800a2ce:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800a2d2:	68fb      	ldr	r3, [r7, #12]
 800a2d4:	88fa      	ldrh	r2, [r7, #6]
 800a2d6:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a2da:	68fb      	ldr	r3, [r7, #12]
 800a2dc:	689b      	ldr	r3, [r3, #8]
 800a2de:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a2e2:	d108      	bne.n	800a2f6 <HAL_UART_Transmit+0x84>
 800a2e4:	68fb      	ldr	r3, [r7, #12]
 800a2e6:	691b      	ldr	r3, [r3, #16]
 800a2e8:	2b00      	cmp	r3, #0
 800a2ea:	d104      	bne.n	800a2f6 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 800a2ec:	2300      	movs	r3, #0
 800a2ee:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800a2f0:	68bb      	ldr	r3, [r7, #8]
 800a2f2:	61bb      	str	r3, [r7, #24]
 800a2f4:	e003      	b.n	800a2fe <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 800a2f6:	68bb      	ldr	r3, [r7, #8]
 800a2f8:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800a2fa:	2300      	movs	r3, #0
 800a2fc:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800a2fe:	68fb      	ldr	r3, [r7, #12]
 800a300:	2200      	movs	r2, #0
 800a302:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 800a306:	e02c      	b.n	800a362 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800a308:	683b      	ldr	r3, [r7, #0]
 800a30a:	9300      	str	r3, [sp, #0]
 800a30c:	697b      	ldr	r3, [r7, #20]
 800a30e:	2200      	movs	r2, #0
 800a310:	2180      	movs	r1, #128	; 0x80
 800a312:	68f8      	ldr	r0, [r7, #12]
 800a314:	f000 ff35 	bl	800b182 <UART_WaitOnFlagUntilTimeout>
 800a318:	4603      	mov	r3, r0
 800a31a:	2b00      	cmp	r3, #0
 800a31c:	d001      	beq.n	800a322 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 800a31e:	2303      	movs	r3, #3
 800a320:	e039      	b.n	800a396 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 800a322:	69fb      	ldr	r3, [r7, #28]
 800a324:	2b00      	cmp	r3, #0
 800a326:	d10b      	bne.n	800a340 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800a328:	69bb      	ldr	r3, [r7, #24]
 800a32a:	881b      	ldrh	r3, [r3, #0]
 800a32c:	461a      	mov	r2, r3
 800a32e:	68fb      	ldr	r3, [r7, #12]
 800a330:	681b      	ldr	r3, [r3, #0]
 800a332:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800a336:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800a338:	69bb      	ldr	r3, [r7, #24]
 800a33a:	3302      	adds	r3, #2
 800a33c:	61bb      	str	r3, [r7, #24]
 800a33e:	e007      	b.n	800a350 <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800a340:	69fb      	ldr	r3, [r7, #28]
 800a342:	781a      	ldrb	r2, [r3, #0]
 800a344:	68fb      	ldr	r3, [r7, #12]
 800a346:	681b      	ldr	r3, [r3, #0]
 800a348:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800a34a:	69fb      	ldr	r3, [r7, #28]
 800a34c:	3301      	adds	r3, #1
 800a34e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800a350:	68fb      	ldr	r3, [r7, #12]
 800a352:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800a356:	b29b      	uxth	r3, r3
 800a358:	3b01      	subs	r3, #1
 800a35a:	b29a      	uxth	r2, r3
 800a35c:	68fb      	ldr	r3, [r7, #12]
 800a35e:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800a362:	68fb      	ldr	r3, [r7, #12]
 800a364:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800a368:	b29b      	uxth	r3, r3
 800a36a:	2b00      	cmp	r3, #0
 800a36c:	d1cc      	bne.n	800a308 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800a36e:	683b      	ldr	r3, [r7, #0]
 800a370:	9300      	str	r3, [sp, #0]
 800a372:	697b      	ldr	r3, [r7, #20]
 800a374:	2200      	movs	r2, #0
 800a376:	2140      	movs	r1, #64	; 0x40
 800a378:	68f8      	ldr	r0, [r7, #12]
 800a37a:	f000 ff02 	bl	800b182 <UART_WaitOnFlagUntilTimeout>
 800a37e:	4603      	mov	r3, r0
 800a380:	2b00      	cmp	r3, #0
 800a382:	d001      	beq.n	800a388 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 800a384:	2303      	movs	r3, #3
 800a386:	e006      	b.n	800a396 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800a388:	68fb      	ldr	r3, [r7, #12]
 800a38a:	2220      	movs	r2, #32
 800a38c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 800a390:	2300      	movs	r3, #0
 800a392:	e000      	b.n	800a396 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 800a394:	2302      	movs	r3, #2
  }
}
 800a396:	4618      	mov	r0, r3
 800a398:	3720      	adds	r7, #32
 800a39a:	46bd      	mov	sp, r7
 800a39c:	bd80      	pop	{r7, pc}
	...

0800a3a0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800a3a0:	b580      	push	{r7, lr}
 800a3a2:	b0ba      	sub	sp, #232	; 0xe8
 800a3a4:	af00      	add	r7, sp, #0
 800a3a6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800a3a8:	687b      	ldr	r3, [r7, #4]
 800a3aa:	681b      	ldr	r3, [r3, #0]
 800a3ac:	69db      	ldr	r3, [r3, #28]
 800a3ae:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800a3b2:	687b      	ldr	r3, [r7, #4]
 800a3b4:	681b      	ldr	r3, [r3, #0]
 800a3b6:	681b      	ldr	r3, [r3, #0]
 800a3b8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800a3bc:	687b      	ldr	r3, [r7, #4]
 800a3be:	681b      	ldr	r3, [r3, #0]
 800a3c0:	689b      	ldr	r3, [r3, #8]
 800a3c2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800a3c6:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800a3ca:	f640 030f 	movw	r3, #2063	; 0x80f
 800a3ce:	4013      	ands	r3, r2
 800a3d0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800a3d4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800a3d8:	2b00      	cmp	r3, #0
 800a3da:	d11b      	bne.n	800a414 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800a3dc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a3e0:	f003 0320 	and.w	r3, r3, #32
 800a3e4:	2b00      	cmp	r3, #0
 800a3e6:	d015      	beq.n	800a414 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800a3e8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a3ec:	f003 0320 	and.w	r3, r3, #32
 800a3f0:	2b00      	cmp	r3, #0
 800a3f2:	d105      	bne.n	800a400 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800a3f4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a3f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a3fc:	2b00      	cmp	r3, #0
 800a3fe:	d009      	beq.n	800a414 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800a400:	687b      	ldr	r3, [r7, #4]
 800a402:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a404:	2b00      	cmp	r3, #0
 800a406:	f000 82d6 	beq.w	800a9b6 <HAL_UART_IRQHandler+0x616>
      {
        huart->RxISR(huart);
 800a40a:	687b      	ldr	r3, [r7, #4]
 800a40c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a40e:	6878      	ldr	r0, [r7, #4]
 800a410:	4798      	blx	r3
      }
      return;
 800a412:	e2d0      	b.n	800a9b6 <HAL_UART_IRQHandler+0x616>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800a414:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800a418:	2b00      	cmp	r3, #0
 800a41a:	f000 811f 	beq.w	800a65c <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800a41e:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800a422:	4b8b      	ldr	r3, [pc, #556]	; (800a650 <HAL_UART_IRQHandler+0x2b0>)
 800a424:	4013      	ands	r3, r2
 800a426:	2b00      	cmp	r3, #0
 800a428:	d106      	bne.n	800a438 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800a42a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800a42e:	4b89      	ldr	r3, [pc, #548]	; (800a654 <HAL_UART_IRQHandler+0x2b4>)
 800a430:	4013      	ands	r3, r2
 800a432:	2b00      	cmp	r3, #0
 800a434:	f000 8112 	beq.w	800a65c <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800a438:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a43c:	f003 0301 	and.w	r3, r3, #1
 800a440:	2b00      	cmp	r3, #0
 800a442:	d011      	beq.n	800a468 <HAL_UART_IRQHandler+0xc8>
 800a444:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a448:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a44c:	2b00      	cmp	r3, #0
 800a44e:	d00b      	beq.n	800a468 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800a450:	687b      	ldr	r3, [r7, #4]
 800a452:	681b      	ldr	r3, [r3, #0]
 800a454:	2201      	movs	r2, #1
 800a456:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800a458:	687b      	ldr	r3, [r7, #4]
 800a45a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a45e:	f043 0201 	orr.w	r2, r3, #1
 800a462:	687b      	ldr	r3, [r7, #4]
 800a464:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a468:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a46c:	f003 0302 	and.w	r3, r3, #2
 800a470:	2b00      	cmp	r3, #0
 800a472:	d011      	beq.n	800a498 <HAL_UART_IRQHandler+0xf8>
 800a474:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a478:	f003 0301 	and.w	r3, r3, #1
 800a47c:	2b00      	cmp	r3, #0
 800a47e:	d00b      	beq.n	800a498 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800a480:	687b      	ldr	r3, [r7, #4]
 800a482:	681b      	ldr	r3, [r3, #0]
 800a484:	2202      	movs	r2, #2
 800a486:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800a488:	687b      	ldr	r3, [r7, #4]
 800a48a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a48e:	f043 0204 	orr.w	r2, r3, #4
 800a492:	687b      	ldr	r3, [r7, #4]
 800a494:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a498:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a49c:	f003 0304 	and.w	r3, r3, #4
 800a4a0:	2b00      	cmp	r3, #0
 800a4a2:	d011      	beq.n	800a4c8 <HAL_UART_IRQHandler+0x128>
 800a4a4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a4a8:	f003 0301 	and.w	r3, r3, #1
 800a4ac:	2b00      	cmp	r3, #0
 800a4ae:	d00b      	beq.n	800a4c8 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800a4b0:	687b      	ldr	r3, [r7, #4]
 800a4b2:	681b      	ldr	r3, [r3, #0]
 800a4b4:	2204      	movs	r2, #4
 800a4b6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800a4b8:	687b      	ldr	r3, [r7, #4]
 800a4ba:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a4be:	f043 0202 	orr.w	r2, r3, #2
 800a4c2:	687b      	ldr	r3, [r7, #4]
 800a4c4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800a4c8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a4cc:	f003 0308 	and.w	r3, r3, #8
 800a4d0:	2b00      	cmp	r3, #0
 800a4d2:	d017      	beq.n	800a504 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800a4d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a4d8:	f003 0320 	and.w	r3, r3, #32
 800a4dc:	2b00      	cmp	r3, #0
 800a4de:	d105      	bne.n	800a4ec <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800a4e0:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800a4e4:	4b5a      	ldr	r3, [pc, #360]	; (800a650 <HAL_UART_IRQHandler+0x2b0>)
 800a4e6:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800a4e8:	2b00      	cmp	r3, #0
 800a4ea:	d00b      	beq.n	800a504 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800a4ec:	687b      	ldr	r3, [r7, #4]
 800a4ee:	681b      	ldr	r3, [r3, #0]
 800a4f0:	2208      	movs	r2, #8
 800a4f2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800a4f4:	687b      	ldr	r3, [r7, #4]
 800a4f6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a4fa:	f043 0208 	orr.w	r2, r3, #8
 800a4fe:	687b      	ldr	r3, [r7, #4]
 800a500:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800a504:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a508:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a50c:	2b00      	cmp	r3, #0
 800a50e:	d012      	beq.n	800a536 <HAL_UART_IRQHandler+0x196>
 800a510:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a514:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800a518:	2b00      	cmp	r3, #0
 800a51a:	d00c      	beq.n	800a536 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a51c:	687b      	ldr	r3, [r7, #4]
 800a51e:	681b      	ldr	r3, [r3, #0]
 800a520:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800a524:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800a526:	687b      	ldr	r3, [r7, #4]
 800a528:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a52c:	f043 0220 	orr.w	r2, r3, #32
 800a530:	687b      	ldr	r3, [r7, #4]
 800a532:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800a536:	687b      	ldr	r3, [r7, #4]
 800a538:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a53c:	2b00      	cmp	r3, #0
 800a53e:	f000 823c 	beq.w	800a9ba <HAL_UART_IRQHandler+0x61a>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800a542:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a546:	f003 0320 	and.w	r3, r3, #32
 800a54a:	2b00      	cmp	r3, #0
 800a54c:	d013      	beq.n	800a576 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800a54e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a552:	f003 0320 	and.w	r3, r3, #32
 800a556:	2b00      	cmp	r3, #0
 800a558:	d105      	bne.n	800a566 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800a55a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a55e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a562:	2b00      	cmp	r3, #0
 800a564:	d007      	beq.n	800a576 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800a566:	687b      	ldr	r3, [r7, #4]
 800a568:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a56a:	2b00      	cmp	r3, #0
 800a56c:	d003      	beq.n	800a576 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800a56e:	687b      	ldr	r3, [r7, #4]
 800a570:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a572:	6878      	ldr	r0, [r7, #4]
 800a574:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800a576:	687b      	ldr	r3, [r7, #4]
 800a578:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a57c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800a580:	687b      	ldr	r3, [r7, #4]
 800a582:	681b      	ldr	r3, [r3, #0]
 800a584:	689b      	ldr	r3, [r3, #8]
 800a586:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a58a:	2b40      	cmp	r3, #64	; 0x40
 800a58c:	d005      	beq.n	800a59a <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800a58e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800a592:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800a596:	2b00      	cmp	r3, #0
 800a598:	d04f      	beq.n	800a63a <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800a59a:	6878      	ldr	r0, [r7, #4]
 800a59c:	f000 feb9 	bl	800b312 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a5a0:	687b      	ldr	r3, [r7, #4]
 800a5a2:	681b      	ldr	r3, [r3, #0]
 800a5a4:	689b      	ldr	r3, [r3, #8]
 800a5a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a5aa:	2b40      	cmp	r3, #64	; 0x40
 800a5ac:	d141      	bne.n	800a632 <HAL_UART_IRQHandler+0x292>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a5ae:	687b      	ldr	r3, [r7, #4]
 800a5b0:	681b      	ldr	r3, [r3, #0]
 800a5b2:	3308      	adds	r3, #8
 800a5b4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a5b8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800a5bc:	e853 3f00 	ldrex	r3, [r3]
 800a5c0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800a5c4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800a5c8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a5cc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800a5d0:	687b      	ldr	r3, [r7, #4]
 800a5d2:	681b      	ldr	r3, [r3, #0]
 800a5d4:	3308      	adds	r3, #8
 800a5d6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800a5da:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800a5de:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a5e2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800a5e6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800a5ea:	e841 2300 	strex	r3, r2, [r1]
 800a5ee:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800a5f2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800a5f6:	2b00      	cmp	r3, #0
 800a5f8:	d1d9      	bne.n	800a5ae <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800a5fa:	687b      	ldr	r3, [r7, #4]
 800a5fc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a5fe:	2b00      	cmp	r3, #0
 800a600:	d013      	beq.n	800a62a <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800a602:	687b      	ldr	r3, [r7, #4]
 800a604:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a606:	4a14      	ldr	r2, [pc, #80]	; (800a658 <HAL_UART_IRQHandler+0x2b8>)
 800a608:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800a60a:	687b      	ldr	r3, [r7, #4]
 800a60c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a60e:	4618      	mov	r0, r3
 800a610:	f7fb fd25 	bl	800605e <HAL_DMA_Abort_IT>
 800a614:	4603      	mov	r3, r0
 800a616:	2b00      	cmp	r3, #0
 800a618:	d017      	beq.n	800a64a <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800a61a:	687b      	ldr	r3, [r7, #4]
 800a61c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a61e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a620:	687a      	ldr	r2, [r7, #4]
 800a622:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 800a624:	4610      	mov	r0, r2
 800a626:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a628:	e00f      	b.n	800a64a <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800a62a:	6878      	ldr	r0, [r7, #4]
 800a62c:	f000 f9da 	bl	800a9e4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a630:	e00b      	b.n	800a64a <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800a632:	6878      	ldr	r0, [r7, #4]
 800a634:	f000 f9d6 	bl	800a9e4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a638:	e007      	b.n	800a64a <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800a63a:	6878      	ldr	r0, [r7, #4]
 800a63c:	f000 f9d2 	bl	800a9e4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a640:	687b      	ldr	r3, [r7, #4]
 800a642:	2200      	movs	r2, #0
 800a644:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 800a648:	e1b7      	b.n	800a9ba <HAL_UART_IRQHandler+0x61a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a64a:	bf00      	nop
    return;
 800a64c:	e1b5      	b.n	800a9ba <HAL_UART_IRQHandler+0x61a>
 800a64e:	bf00      	nop
 800a650:	10000001 	.word	0x10000001
 800a654:	04000120 	.word	0x04000120
 800a658:	0800b3df 	.word	0x0800b3df

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a65c:	687b      	ldr	r3, [r7, #4]
 800a65e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a660:	2b01      	cmp	r3, #1
 800a662:	f040 814a 	bne.w	800a8fa <HAL_UART_IRQHandler+0x55a>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800a666:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a66a:	f003 0310 	and.w	r3, r3, #16
 800a66e:	2b00      	cmp	r3, #0
 800a670:	f000 8143 	beq.w	800a8fa <HAL_UART_IRQHandler+0x55a>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800a674:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a678:	f003 0310 	and.w	r3, r3, #16
 800a67c:	2b00      	cmp	r3, #0
 800a67e:	f000 813c 	beq.w	800a8fa <HAL_UART_IRQHandler+0x55a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800a682:	687b      	ldr	r3, [r7, #4]
 800a684:	681b      	ldr	r3, [r3, #0]
 800a686:	2210      	movs	r2, #16
 800a688:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a68a:	687b      	ldr	r3, [r7, #4]
 800a68c:	681b      	ldr	r3, [r3, #0]
 800a68e:	689b      	ldr	r3, [r3, #8]
 800a690:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a694:	2b40      	cmp	r3, #64	; 0x40
 800a696:	f040 80b5 	bne.w	800a804 <HAL_UART_IRQHandler+0x464>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800a69a:	687b      	ldr	r3, [r7, #4]
 800a69c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a69e:	681b      	ldr	r3, [r3, #0]
 800a6a0:	685b      	ldr	r3, [r3, #4]
 800a6a2:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800a6a6:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800a6aa:	2b00      	cmp	r3, #0
 800a6ac:	f000 8187 	beq.w	800a9be <HAL_UART_IRQHandler+0x61e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800a6b0:	687b      	ldr	r3, [r7, #4]
 800a6b2:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800a6b6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800a6ba:	429a      	cmp	r2, r3
 800a6bc:	f080 817f 	bcs.w	800a9be <HAL_UART_IRQHandler+0x61e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800a6c0:	687b      	ldr	r3, [r7, #4]
 800a6c2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800a6c6:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800a6ca:	687b      	ldr	r3, [r7, #4]
 800a6cc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a6ce:	681b      	ldr	r3, [r3, #0]
 800a6d0:	681b      	ldr	r3, [r3, #0]
 800a6d2:	f003 0320 	and.w	r3, r3, #32
 800a6d6:	2b00      	cmp	r3, #0
 800a6d8:	f040 8086 	bne.w	800a7e8 <HAL_UART_IRQHandler+0x448>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a6dc:	687b      	ldr	r3, [r7, #4]
 800a6de:	681b      	ldr	r3, [r3, #0]
 800a6e0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a6e4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800a6e8:	e853 3f00 	ldrex	r3, [r3]
 800a6ec:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800a6f0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800a6f4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a6f8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800a6fc:	687b      	ldr	r3, [r7, #4]
 800a6fe:	681b      	ldr	r3, [r3, #0]
 800a700:	461a      	mov	r2, r3
 800a702:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800a706:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800a70a:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a70e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800a712:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800a716:	e841 2300 	strex	r3, r2, [r1]
 800a71a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800a71e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a722:	2b00      	cmp	r3, #0
 800a724:	d1da      	bne.n	800a6dc <HAL_UART_IRQHandler+0x33c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a726:	687b      	ldr	r3, [r7, #4]
 800a728:	681b      	ldr	r3, [r3, #0]
 800a72a:	3308      	adds	r3, #8
 800a72c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a72e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a730:	e853 3f00 	ldrex	r3, [r3]
 800a734:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800a736:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800a738:	f023 0301 	bic.w	r3, r3, #1
 800a73c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800a740:	687b      	ldr	r3, [r7, #4]
 800a742:	681b      	ldr	r3, [r3, #0]
 800a744:	3308      	adds	r3, #8
 800a746:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800a74a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800a74e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a750:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800a752:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800a756:	e841 2300 	strex	r3, r2, [r1]
 800a75a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800a75c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a75e:	2b00      	cmp	r3, #0
 800a760:	d1e1      	bne.n	800a726 <HAL_UART_IRQHandler+0x386>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a762:	687b      	ldr	r3, [r7, #4]
 800a764:	681b      	ldr	r3, [r3, #0]
 800a766:	3308      	adds	r3, #8
 800a768:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a76a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a76c:	e853 3f00 	ldrex	r3, [r3]
 800a770:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800a772:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a774:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a778:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800a77c:	687b      	ldr	r3, [r7, #4]
 800a77e:	681b      	ldr	r3, [r3, #0]
 800a780:	3308      	adds	r3, #8
 800a782:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800a786:	66fa      	str	r2, [r7, #108]	; 0x6c
 800a788:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a78a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800a78c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800a78e:	e841 2300 	strex	r3, r2, [r1]
 800a792:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800a794:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a796:	2b00      	cmp	r3, #0
 800a798:	d1e3      	bne.n	800a762 <HAL_UART_IRQHandler+0x3c2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800a79a:	687b      	ldr	r3, [r7, #4]
 800a79c:	2220      	movs	r2, #32
 800a79e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a7a2:	687b      	ldr	r3, [r7, #4]
 800a7a4:	2200      	movs	r2, #0
 800a7a6:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a7a8:	687b      	ldr	r3, [r7, #4]
 800a7aa:	681b      	ldr	r3, [r3, #0]
 800a7ac:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a7ae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a7b0:	e853 3f00 	ldrex	r3, [r3]
 800a7b4:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800a7b6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a7b8:	f023 0310 	bic.w	r3, r3, #16
 800a7bc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800a7c0:	687b      	ldr	r3, [r7, #4]
 800a7c2:	681b      	ldr	r3, [r3, #0]
 800a7c4:	461a      	mov	r2, r3
 800a7c6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800a7ca:	65bb      	str	r3, [r7, #88]	; 0x58
 800a7cc:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a7ce:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800a7d0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800a7d2:	e841 2300 	strex	r3, r2, [r1]
 800a7d6:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800a7d8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a7da:	2b00      	cmp	r3, #0
 800a7dc:	d1e4      	bne.n	800a7a8 <HAL_UART_IRQHandler+0x408>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800a7de:	687b      	ldr	r3, [r7, #4]
 800a7e0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a7e2:	4618      	mov	r0, r3
 800a7e4:	f7fb fbe2 	bl	8005fac <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800a7e8:	687b      	ldr	r3, [r7, #4]
 800a7ea:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800a7ee:	687b      	ldr	r3, [r7, #4]
 800a7f0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800a7f4:	b29b      	uxth	r3, r3
 800a7f6:	1ad3      	subs	r3, r2, r3
 800a7f8:	b29b      	uxth	r3, r3
 800a7fa:	4619      	mov	r1, r3
 800a7fc:	6878      	ldr	r0, [r7, #4]
 800a7fe:	f000 f8fb 	bl	800a9f8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800a802:	e0dc      	b.n	800a9be <HAL_UART_IRQHandler+0x61e>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800a804:	687b      	ldr	r3, [r7, #4]
 800a806:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800a80a:	687b      	ldr	r3, [r7, #4]
 800a80c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800a810:	b29b      	uxth	r3, r3
 800a812:	1ad3      	subs	r3, r2, r3
 800a814:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800a818:	687b      	ldr	r3, [r7, #4]
 800a81a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800a81e:	b29b      	uxth	r3, r3
 800a820:	2b00      	cmp	r3, #0
 800a822:	f000 80ce 	beq.w	800a9c2 <HAL_UART_IRQHandler+0x622>
          && (nb_rx_data > 0U))
 800a826:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800a82a:	2b00      	cmp	r3, #0
 800a82c:	f000 80c9 	beq.w	800a9c2 <HAL_UART_IRQHandler+0x622>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a830:	687b      	ldr	r3, [r7, #4]
 800a832:	681b      	ldr	r3, [r3, #0]
 800a834:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a836:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a838:	e853 3f00 	ldrex	r3, [r3]
 800a83c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800a83e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a840:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800a844:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800a848:	687b      	ldr	r3, [r7, #4]
 800a84a:	681b      	ldr	r3, [r3, #0]
 800a84c:	461a      	mov	r2, r3
 800a84e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800a852:	647b      	str	r3, [r7, #68]	; 0x44
 800a854:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a856:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800a858:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a85a:	e841 2300 	strex	r3, r2, [r1]
 800a85e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800a860:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a862:	2b00      	cmp	r3, #0
 800a864:	d1e4      	bne.n	800a830 <HAL_UART_IRQHandler+0x490>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800a866:	687b      	ldr	r3, [r7, #4]
 800a868:	681b      	ldr	r3, [r3, #0]
 800a86a:	3308      	adds	r3, #8
 800a86c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a86e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a870:	e853 3f00 	ldrex	r3, [r3]
 800a874:	623b      	str	r3, [r7, #32]
   return(result);
 800a876:	6a3b      	ldr	r3, [r7, #32]
 800a878:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a87c:	f023 0301 	bic.w	r3, r3, #1
 800a880:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800a884:	687b      	ldr	r3, [r7, #4]
 800a886:	681b      	ldr	r3, [r3, #0]
 800a888:	3308      	adds	r3, #8
 800a88a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800a88e:	633a      	str	r2, [r7, #48]	; 0x30
 800a890:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a892:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a894:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a896:	e841 2300 	strex	r3, r2, [r1]
 800a89a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800a89c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a89e:	2b00      	cmp	r3, #0
 800a8a0:	d1e1      	bne.n	800a866 <HAL_UART_IRQHandler+0x4c6>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800a8a2:	687b      	ldr	r3, [r7, #4]
 800a8a4:	2220      	movs	r2, #32
 800a8a6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a8aa:	687b      	ldr	r3, [r7, #4]
 800a8ac:	2200      	movs	r2, #0
 800a8ae:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800a8b0:	687b      	ldr	r3, [r7, #4]
 800a8b2:	2200      	movs	r2, #0
 800a8b4:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a8b6:	687b      	ldr	r3, [r7, #4]
 800a8b8:	681b      	ldr	r3, [r3, #0]
 800a8ba:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a8bc:	693b      	ldr	r3, [r7, #16]
 800a8be:	e853 3f00 	ldrex	r3, [r3]
 800a8c2:	60fb      	str	r3, [r7, #12]
   return(result);
 800a8c4:	68fb      	ldr	r3, [r7, #12]
 800a8c6:	f023 0310 	bic.w	r3, r3, #16
 800a8ca:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800a8ce:	687b      	ldr	r3, [r7, #4]
 800a8d0:	681b      	ldr	r3, [r3, #0]
 800a8d2:	461a      	mov	r2, r3
 800a8d4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800a8d8:	61fb      	str	r3, [r7, #28]
 800a8da:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a8dc:	69b9      	ldr	r1, [r7, #24]
 800a8de:	69fa      	ldr	r2, [r7, #28]
 800a8e0:	e841 2300 	strex	r3, r2, [r1]
 800a8e4:	617b      	str	r3, [r7, #20]
   return(result);
 800a8e6:	697b      	ldr	r3, [r7, #20]
 800a8e8:	2b00      	cmp	r3, #0
 800a8ea:	d1e4      	bne.n	800a8b6 <HAL_UART_IRQHandler+0x516>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800a8ec:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800a8f0:	4619      	mov	r1, r3
 800a8f2:	6878      	ldr	r0, [r7, #4]
 800a8f4:	f000 f880 	bl	800a9f8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800a8f8:	e063      	b.n	800a9c2 <HAL_UART_IRQHandler+0x622>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800a8fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a8fe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800a902:	2b00      	cmp	r3, #0
 800a904:	d00e      	beq.n	800a924 <HAL_UART_IRQHandler+0x584>
 800a906:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a90a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a90e:	2b00      	cmp	r3, #0
 800a910:	d008      	beq.n	800a924 <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800a912:	687b      	ldr	r3, [r7, #4]
 800a914:	681b      	ldr	r3, [r3, #0]
 800a916:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800a91a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800a91c:	6878      	ldr	r0, [r7, #4]
 800a91e:	f000 fd9f 	bl	800b460 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800a922:	e051      	b.n	800a9c8 <HAL_UART_IRQHandler+0x628>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800a924:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a928:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a92c:	2b00      	cmp	r3, #0
 800a92e:	d014      	beq.n	800a95a <HAL_UART_IRQHandler+0x5ba>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800a930:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a934:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a938:	2b00      	cmp	r3, #0
 800a93a:	d105      	bne.n	800a948 <HAL_UART_IRQHandler+0x5a8>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800a93c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a940:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a944:	2b00      	cmp	r3, #0
 800a946:	d008      	beq.n	800a95a <HAL_UART_IRQHandler+0x5ba>
  {
    if (huart->TxISR != NULL)
 800a948:	687b      	ldr	r3, [r7, #4]
 800a94a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a94c:	2b00      	cmp	r3, #0
 800a94e:	d03a      	beq.n	800a9c6 <HAL_UART_IRQHandler+0x626>
    {
      huart->TxISR(huart);
 800a950:	687b      	ldr	r3, [r7, #4]
 800a952:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a954:	6878      	ldr	r0, [r7, #4]
 800a956:	4798      	blx	r3
    }
    return;
 800a958:	e035      	b.n	800a9c6 <HAL_UART_IRQHandler+0x626>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800a95a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a95e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a962:	2b00      	cmp	r3, #0
 800a964:	d009      	beq.n	800a97a <HAL_UART_IRQHandler+0x5da>
 800a966:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a96a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a96e:	2b00      	cmp	r3, #0
 800a970:	d003      	beq.n	800a97a <HAL_UART_IRQHandler+0x5da>
  {
    UART_EndTransmit_IT(huart);
 800a972:	6878      	ldr	r0, [r7, #4]
 800a974:	f000 fd49 	bl	800b40a <UART_EndTransmit_IT>
    return;
 800a978:	e026      	b.n	800a9c8 <HAL_UART_IRQHandler+0x628>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800a97a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a97e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a982:	2b00      	cmp	r3, #0
 800a984:	d009      	beq.n	800a99a <HAL_UART_IRQHandler+0x5fa>
 800a986:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a98a:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800a98e:	2b00      	cmp	r3, #0
 800a990:	d003      	beq.n	800a99a <HAL_UART_IRQHandler+0x5fa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800a992:	6878      	ldr	r0, [r7, #4]
 800a994:	f000 fd78 	bl	800b488 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800a998:	e016      	b.n	800a9c8 <HAL_UART_IRQHandler+0x628>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800a99a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a99e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800a9a2:	2b00      	cmp	r3, #0
 800a9a4:	d010      	beq.n	800a9c8 <HAL_UART_IRQHandler+0x628>
 800a9a6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a9aa:	2b00      	cmp	r3, #0
 800a9ac:	da0c      	bge.n	800a9c8 <HAL_UART_IRQHandler+0x628>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800a9ae:	6878      	ldr	r0, [r7, #4]
 800a9b0:	f000 fd60 	bl	800b474 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800a9b4:	e008      	b.n	800a9c8 <HAL_UART_IRQHandler+0x628>
      return;
 800a9b6:	bf00      	nop
 800a9b8:	e006      	b.n	800a9c8 <HAL_UART_IRQHandler+0x628>
    return;
 800a9ba:	bf00      	nop
 800a9bc:	e004      	b.n	800a9c8 <HAL_UART_IRQHandler+0x628>
      return;
 800a9be:	bf00      	nop
 800a9c0:	e002      	b.n	800a9c8 <HAL_UART_IRQHandler+0x628>
      return;
 800a9c2:	bf00      	nop
 800a9c4:	e000      	b.n	800a9c8 <HAL_UART_IRQHandler+0x628>
    return;
 800a9c6:	bf00      	nop
  }
}
 800a9c8:	37e8      	adds	r7, #232	; 0xe8
 800a9ca:	46bd      	mov	sp, r7
 800a9cc:	bd80      	pop	{r7, pc}
 800a9ce:	bf00      	nop

0800a9d0 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800a9d0:	b480      	push	{r7}
 800a9d2:	b083      	sub	sp, #12
 800a9d4:	af00      	add	r7, sp, #0
 800a9d6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800a9d8:	bf00      	nop
 800a9da:	370c      	adds	r7, #12
 800a9dc:	46bd      	mov	sp, r7
 800a9de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9e2:	4770      	bx	lr

0800a9e4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800a9e4:	b480      	push	{r7}
 800a9e6:	b083      	sub	sp, #12
 800a9e8:	af00      	add	r7, sp, #0
 800a9ea:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800a9ec:	bf00      	nop
 800a9ee:	370c      	adds	r7, #12
 800a9f0:	46bd      	mov	sp, r7
 800a9f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9f6:	4770      	bx	lr

0800a9f8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800a9f8:	b480      	push	{r7}
 800a9fa:	b083      	sub	sp, #12
 800a9fc:	af00      	add	r7, sp, #0
 800a9fe:	6078      	str	r0, [r7, #4]
 800aa00:	460b      	mov	r3, r1
 800aa02:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800aa04:	bf00      	nop
 800aa06:	370c      	adds	r7, #12
 800aa08:	46bd      	mov	sp, r7
 800aa0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa0e:	4770      	bx	lr

0800aa10 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800aa10:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800aa14:	b08c      	sub	sp, #48	; 0x30
 800aa16:	af00      	add	r7, sp, #0
 800aa18:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800aa1a:	2300      	movs	r3, #0
 800aa1c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800aa20:	697b      	ldr	r3, [r7, #20]
 800aa22:	689a      	ldr	r2, [r3, #8]
 800aa24:	697b      	ldr	r3, [r7, #20]
 800aa26:	691b      	ldr	r3, [r3, #16]
 800aa28:	431a      	orrs	r2, r3
 800aa2a:	697b      	ldr	r3, [r7, #20]
 800aa2c:	695b      	ldr	r3, [r3, #20]
 800aa2e:	431a      	orrs	r2, r3
 800aa30:	697b      	ldr	r3, [r7, #20]
 800aa32:	69db      	ldr	r3, [r3, #28]
 800aa34:	4313      	orrs	r3, r2
 800aa36:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800aa38:	697b      	ldr	r3, [r7, #20]
 800aa3a:	681b      	ldr	r3, [r3, #0]
 800aa3c:	681a      	ldr	r2, [r3, #0]
 800aa3e:	4bab      	ldr	r3, [pc, #684]	; (800acec <UART_SetConfig+0x2dc>)
 800aa40:	4013      	ands	r3, r2
 800aa42:	697a      	ldr	r2, [r7, #20]
 800aa44:	6812      	ldr	r2, [r2, #0]
 800aa46:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800aa48:	430b      	orrs	r3, r1
 800aa4a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800aa4c:	697b      	ldr	r3, [r7, #20]
 800aa4e:	681b      	ldr	r3, [r3, #0]
 800aa50:	685b      	ldr	r3, [r3, #4]
 800aa52:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800aa56:	697b      	ldr	r3, [r7, #20]
 800aa58:	68da      	ldr	r2, [r3, #12]
 800aa5a:	697b      	ldr	r3, [r7, #20]
 800aa5c:	681b      	ldr	r3, [r3, #0]
 800aa5e:	430a      	orrs	r2, r1
 800aa60:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800aa62:	697b      	ldr	r3, [r7, #20]
 800aa64:	699b      	ldr	r3, [r3, #24]
 800aa66:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800aa68:	697b      	ldr	r3, [r7, #20]
 800aa6a:	681b      	ldr	r3, [r3, #0]
 800aa6c:	4aa0      	ldr	r2, [pc, #640]	; (800acf0 <UART_SetConfig+0x2e0>)
 800aa6e:	4293      	cmp	r3, r2
 800aa70:	d004      	beq.n	800aa7c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800aa72:	697b      	ldr	r3, [r7, #20]
 800aa74:	6a1b      	ldr	r3, [r3, #32]
 800aa76:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800aa78:	4313      	orrs	r3, r2
 800aa7a:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800aa7c:	697b      	ldr	r3, [r7, #20]
 800aa7e:	681b      	ldr	r3, [r3, #0]
 800aa80:	689b      	ldr	r3, [r3, #8]
 800aa82:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 800aa86:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 800aa8a:	697a      	ldr	r2, [r7, #20]
 800aa8c:	6812      	ldr	r2, [r2, #0]
 800aa8e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800aa90:	430b      	orrs	r3, r1
 800aa92:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800aa94:	697b      	ldr	r3, [r7, #20]
 800aa96:	681b      	ldr	r3, [r3, #0]
 800aa98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aa9a:	f023 010f 	bic.w	r1, r3, #15
 800aa9e:	697b      	ldr	r3, [r7, #20]
 800aaa0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800aaa2:	697b      	ldr	r3, [r7, #20]
 800aaa4:	681b      	ldr	r3, [r3, #0]
 800aaa6:	430a      	orrs	r2, r1
 800aaa8:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800aaaa:	697b      	ldr	r3, [r7, #20]
 800aaac:	681b      	ldr	r3, [r3, #0]
 800aaae:	4a91      	ldr	r2, [pc, #580]	; (800acf4 <UART_SetConfig+0x2e4>)
 800aab0:	4293      	cmp	r3, r2
 800aab2:	d125      	bne.n	800ab00 <UART_SetConfig+0xf0>
 800aab4:	4b90      	ldr	r3, [pc, #576]	; (800acf8 <UART_SetConfig+0x2e8>)
 800aab6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800aaba:	f003 0303 	and.w	r3, r3, #3
 800aabe:	2b03      	cmp	r3, #3
 800aac0:	d81a      	bhi.n	800aaf8 <UART_SetConfig+0xe8>
 800aac2:	a201      	add	r2, pc, #4	; (adr r2, 800aac8 <UART_SetConfig+0xb8>)
 800aac4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aac8:	0800aad9 	.word	0x0800aad9
 800aacc:	0800aae9 	.word	0x0800aae9
 800aad0:	0800aae1 	.word	0x0800aae1
 800aad4:	0800aaf1 	.word	0x0800aaf1
 800aad8:	2301      	movs	r3, #1
 800aada:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800aade:	e0d6      	b.n	800ac8e <UART_SetConfig+0x27e>
 800aae0:	2302      	movs	r3, #2
 800aae2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800aae6:	e0d2      	b.n	800ac8e <UART_SetConfig+0x27e>
 800aae8:	2304      	movs	r3, #4
 800aaea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800aaee:	e0ce      	b.n	800ac8e <UART_SetConfig+0x27e>
 800aaf0:	2308      	movs	r3, #8
 800aaf2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800aaf6:	e0ca      	b.n	800ac8e <UART_SetConfig+0x27e>
 800aaf8:	2310      	movs	r3, #16
 800aafa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800aafe:	e0c6      	b.n	800ac8e <UART_SetConfig+0x27e>
 800ab00:	697b      	ldr	r3, [r7, #20]
 800ab02:	681b      	ldr	r3, [r3, #0]
 800ab04:	4a7d      	ldr	r2, [pc, #500]	; (800acfc <UART_SetConfig+0x2ec>)
 800ab06:	4293      	cmp	r3, r2
 800ab08:	d138      	bne.n	800ab7c <UART_SetConfig+0x16c>
 800ab0a:	4b7b      	ldr	r3, [pc, #492]	; (800acf8 <UART_SetConfig+0x2e8>)
 800ab0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ab10:	f003 030c 	and.w	r3, r3, #12
 800ab14:	2b0c      	cmp	r3, #12
 800ab16:	d82d      	bhi.n	800ab74 <UART_SetConfig+0x164>
 800ab18:	a201      	add	r2, pc, #4	; (adr r2, 800ab20 <UART_SetConfig+0x110>)
 800ab1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ab1e:	bf00      	nop
 800ab20:	0800ab55 	.word	0x0800ab55
 800ab24:	0800ab75 	.word	0x0800ab75
 800ab28:	0800ab75 	.word	0x0800ab75
 800ab2c:	0800ab75 	.word	0x0800ab75
 800ab30:	0800ab65 	.word	0x0800ab65
 800ab34:	0800ab75 	.word	0x0800ab75
 800ab38:	0800ab75 	.word	0x0800ab75
 800ab3c:	0800ab75 	.word	0x0800ab75
 800ab40:	0800ab5d 	.word	0x0800ab5d
 800ab44:	0800ab75 	.word	0x0800ab75
 800ab48:	0800ab75 	.word	0x0800ab75
 800ab4c:	0800ab75 	.word	0x0800ab75
 800ab50:	0800ab6d 	.word	0x0800ab6d
 800ab54:	2300      	movs	r3, #0
 800ab56:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ab5a:	e098      	b.n	800ac8e <UART_SetConfig+0x27e>
 800ab5c:	2302      	movs	r3, #2
 800ab5e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ab62:	e094      	b.n	800ac8e <UART_SetConfig+0x27e>
 800ab64:	2304      	movs	r3, #4
 800ab66:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ab6a:	e090      	b.n	800ac8e <UART_SetConfig+0x27e>
 800ab6c:	2308      	movs	r3, #8
 800ab6e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ab72:	e08c      	b.n	800ac8e <UART_SetConfig+0x27e>
 800ab74:	2310      	movs	r3, #16
 800ab76:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ab7a:	e088      	b.n	800ac8e <UART_SetConfig+0x27e>
 800ab7c:	697b      	ldr	r3, [r7, #20]
 800ab7e:	681b      	ldr	r3, [r3, #0]
 800ab80:	4a5f      	ldr	r2, [pc, #380]	; (800ad00 <UART_SetConfig+0x2f0>)
 800ab82:	4293      	cmp	r3, r2
 800ab84:	d125      	bne.n	800abd2 <UART_SetConfig+0x1c2>
 800ab86:	4b5c      	ldr	r3, [pc, #368]	; (800acf8 <UART_SetConfig+0x2e8>)
 800ab88:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ab8c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800ab90:	2b30      	cmp	r3, #48	; 0x30
 800ab92:	d016      	beq.n	800abc2 <UART_SetConfig+0x1b2>
 800ab94:	2b30      	cmp	r3, #48	; 0x30
 800ab96:	d818      	bhi.n	800abca <UART_SetConfig+0x1ba>
 800ab98:	2b20      	cmp	r3, #32
 800ab9a:	d00a      	beq.n	800abb2 <UART_SetConfig+0x1a2>
 800ab9c:	2b20      	cmp	r3, #32
 800ab9e:	d814      	bhi.n	800abca <UART_SetConfig+0x1ba>
 800aba0:	2b00      	cmp	r3, #0
 800aba2:	d002      	beq.n	800abaa <UART_SetConfig+0x19a>
 800aba4:	2b10      	cmp	r3, #16
 800aba6:	d008      	beq.n	800abba <UART_SetConfig+0x1aa>
 800aba8:	e00f      	b.n	800abca <UART_SetConfig+0x1ba>
 800abaa:	2300      	movs	r3, #0
 800abac:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800abb0:	e06d      	b.n	800ac8e <UART_SetConfig+0x27e>
 800abb2:	2302      	movs	r3, #2
 800abb4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800abb8:	e069      	b.n	800ac8e <UART_SetConfig+0x27e>
 800abba:	2304      	movs	r3, #4
 800abbc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800abc0:	e065      	b.n	800ac8e <UART_SetConfig+0x27e>
 800abc2:	2308      	movs	r3, #8
 800abc4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800abc8:	e061      	b.n	800ac8e <UART_SetConfig+0x27e>
 800abca:	2310      	movs	r3, #16
 800abcc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800abd0:	e05d      	b.n	800ac8e <UART_SetConfig+0x27e>
 800abd2:	697b      	ldr	r3, [r7, #20]
 800abd4:	681b      	ldr	r3, [r3, #0]
 800abd6:	4a4b      	ldr	r2, [pc, #300]	; (800ad04 <UART_SetConfig+0x2f4>)
 800abd8:	4293      	cmp	r3, r2
 800abda:	d125      	bne.n	800ac28 <UART_SetConfig+0x218>
 800abdc:	4b46      	ldr	r3, [pc, #280]	; (800acf8 <UART_SetConfig+0x2e8>)
 800abde:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800abe2:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800abe6:	2bc0      	cmp	r3, #192	; 0xc0
 800abe8:	d016      	beq.n	800ac18 <UART_SetConfig+0x208>
 800abea:	2bc0      	cmp	r3, #192	; 0xc0
 800abec:	d818      	bhi.n	800ac20 <UART_SetConfig+0x210>
 800abee:	2b80      	cmp	r3, #128	; 0x80
 800abf0:	d00a      	beq.n	800ac08 <UART_SetConfig+0x1f8>
 800abf2:	2b80      	cmp	r3, #128	; 0x80
 800abf4:	d814      	bhi.n	800ac20 <UART_SetConfig+0x210>
 800abf6:	2b00      	cmp	r3, #0
 800abf8:	d002      	beq.n	800ac00 <UART_SetConfig+0x1f0>
 800abfa:	2b40      	cmp	r3, #64	; 0x40
 800abfc:	d008      	beq.n	800ac10 <UART_SetConfig+0x200>
 800abfe:	e00f      	b.n	800ac20 <UART_SetConfig+0x210>
 800ac00:	2300      	movs	r3, #0
 800ac02:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ac06:	e042      	b.n	800ac8e <UART_SetConfig+0x27e>
 800ac08:	2302      	movs	r3, #2
 800ac0a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ac0e:	e03e      	b.n	800ac8e <UART_SetConfig+0x27e>
 800ac10:	2304      	movs	r3, #4
 800ac12:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ac16:	e03a      	b.n	800ac8e <UART_SetConfig+0x27e>
 800ac18:	2308      	movs	r3, #8
 800ac1a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ac1e:	e036      	b.n	800ac8e <UART_SetConfig+0x27e>
 800ac20:	2310      	movs	r3, #16
 800ac22:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ac26:	e032      	b.n	800ac8e <UART_SetConfig+0x27e>
 800ac28:	697b      	ldr	r3, [r7, #20]
 800ac2a:	681b      	ldr	r3, [r3, #0]
 800ac2c:	4a30      	ldr	r2, [pc, #192]	; (800acf0 <UART_SetConfig+0x2e0>)
 800ac2e:	4293      	cmp	r3, r2
 800ac30:	d12a      	bne.n	800ac88 <UART_SetConfig+0x278>
 800ac32:	4b31      	ldr	r3, [pc, #196]	; (800acf8 <UART_SetConfig+0x2e8>)
 800ac34:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ac38:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800ac3c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800ac40:	d01a      	beq.n	800ac78 <UART_SetConfig+0x268>
 800ac42:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800ac46:	d81b      	bhi.n	800ac80 <UART_SetConfig+0x270>
 800ac48:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800ac4c:	d00c      	beq.n	800ac68 <UART_SetConfig+0x258>
 800ac4e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800ac52:	d815      	bhi.n	800ac80 <UART_SetConfig+0x270>
 800ac54:	2b00      	cmp	r3, #0
 800ac56:	d003      	beq.n	800ac60 <UART_SetConfig+0x250>
 800ac58:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ac5c:	d008      	beq.n	800ac70 <UART_SetConfig+0x260>
 800ac5e:	e00f      	b.n	800ac80 <UART_SetConfig+0x270>
 800ac60:	2300      	movs	r3, #0
 800ac62:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ac66:	e012      	b.n	800ac8e <UART_SetConfig+0x27e>
 800ac68:	2302      	movs	r3, #2
 800ac6a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ac6e:	e00e      	b.n	800ac8e <UART_SetConfig+0x27e>
 800ac70:	2304      	movs	r3, #4
 800ac72:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ac76:	e00a      	b.n	800ac8e <UART_SetConfig+0x27e>
 800ac78:	2308      	movs	r3, #8
 800ac7a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ac7e:	e006      	b.n	800ac8e <UART_SetConfig+0x27e>
 800ac80:	2310      	movs	r3, #16
 800ac82:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ac86:	e002      	b.n	800ac8e <UART_SetConfig+0x27e>
 800ac88:	2310      	movs	r3, #16
 800ac8a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800ac8e:	697b      	ldr	r3, [r7, #20]
 800ac90:	681b      	ldr	r3, [r3, #0]
 800ac92:	4a17      	ldr	r2, [pc, #92]	; (800acf0 <UART_SetConfig+0x2e0>)
 800ac94:	4293      	cmp	r3, r2
 800ac96:	f040 80a8 	bne.w	800adea <UART_SetConfig+0x3da>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800ac9a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800ac9e:	2b08      	cmp	r3, #8
 800aca0:	d834      	bhi.n	800ad0c <UART_SetConfig+0x2fc>
 800aca2:	a201      	add	r2, pc, #4	; (adr r2, 800aca8 <UART_SetConfig+0x298>)
 800aca4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aca8:	0800accd 	.word	0x0800accd
 800acac:	0800ad0d 	.word	0x0800ad0d
 800acb0:	0800acd5 	.word	0x0800acd5
 800acb4:	0800ad0d 	.word	0x0800ad0d
 800acb8:	0800acdb 	.word	0x0800acdb
 800acbc:	0800ad0d 	.word	0x0800ad0d
 800acc0:	0800ad0d 	.word	0x0800ad0d
 800acc4:	0800ad0d 	.word	0x0800ad0d
 800acc8:	0800ace3 	.word	0x0800ace3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800accc:	f7fc fb12 	bl	80072f4 <HAL_RCC_GetPCLK1Freq>
 800acd0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800acd2:	e021      	b.n	800ad18 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800acd4:	4b0c      	ldr	r3, [pc, #48]	; (800ad08 <UART_SetConfig+0x2f8>)
 800acd6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800acd8:	e01e      	b.n	800ad18 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800acda:	f7fc fa9d 	bl	8007218 <HAL_RCC_GetSysClockFreq>
 800acde:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800ace0:	e01a      	b.n	800ad18 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800ace2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ace6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800ace8:	e016      	b.n	800ad18 <UART_SetConfig+0x308>
 800acea:	bf00      	nop
 800acec:	cfff69f3 	.word	0xcfff69f3
 800acf0:	40008000 	.word	0x40008000
 800acf4:	40013800 	.word	0x40013800
 800acf8:	40021000 	.word	0x40021000
 800acfc:	40004400 	.word	0x40004400
 800ad00:	40004800 	.word	0x40004800
 800ad04:	40004c00 	.word	0x40004c00
 800ad08:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 800ad0c:	2300      	movs	r3, #0
 800ad0e:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800ad10:	2301      	movs	r3, #1
 800ad12:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800ad16:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800ad18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad1a:	2b00      	cmp	r3, #0
 800ad1c:	f000 812a 	beq.w	800af74 <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800ad20:	697b      	ldr	r3, [r7, #20]
 800ad22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad24:	4a9e      	ldr	r2, [pc, #632]	; (800afa0 <UART_SetConfig+0x590>)
 800ad26:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ad2a:	461a      	mov	r2, r3
 800ad2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad2e:	fbb3 f3f2 	udiv	r3, r3, r2
 800ad32:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800ad34:	697b      	ldr	r3, [r7, #20]
 800ad36:	685a      	ldr	r2, [r3, #4]
 800ad38:	4613      	mov	r3, r2
 800ad3a:	005b      	lsls	r3, r3, #1
 800ad3c:	4413      	add	r3, r2
 800ad3e:	69ba      	ldr	r2, [r7, #24]
 800ad40:	429a      	cmp	r2, r3
 800ad42:	d305      	bcc.n	800ad50 <UART_SetConfig+0x340>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800ad44:	697b      	ldr	r3, [r7, #20]
 800ad46:	685b      	ldr	r3, [r3, #4]
 800ad48:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800ad4a:	69ba      	ldr	r2, [r7, #24]
 800ad4c:	429a      	cmp	r2, r3
 800ad4e:	d903      	bls.n	800ad58 <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 800ad50:	2301      	movs	r3, #1
 800ad52:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800ad56:	e10d      	b.n	800af74 <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ad58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad5a:	2200      	movs	r2, #0
 800ad5c:	60bb      	str	r3, [r7, #8]
 800ad5e:	60fa      	str	r2, [r7, #12]
 800ad60:	697b      	ldr	r3, [r7, #20]
 800ad62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad64:	4a8e      	ldr	r2, [pc, #568]	; (800afa0 <UART_SetConfig+0x590>)
 800ad66:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ad6a:	b29b      	uxth	r3, r3
 800ad6c:	2200      	movs	r2, #0
 800ad6e:	603b      	str	r3, [r7, #0]
 800ad70:	607a      	str	r2, [r7, #4]
 800ad72:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ad76:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800ad7a:	f7f5 fd7b 	bl	8000874 <__aeabi_uldivmod>
 800ad7e:	4602      	mov	r2, r0
 800ad80:	460b      	mov	r3, r1
 800ad82:	4610      	mov	r0, r2
 800ad84:	4619      	mov	r1, r3
 800ad86:	f04f 0200 	mov.w	r2, #0
 800ad8a:	f04f 0300 	mov.w	r3, #0
 800ad8e:	020b      	lsls	r3, r1, #8
 800ad90:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800ad94:	0202      	lsls	r2, r0, #8
 800ad96:	6979      	ldr	r1, [r7, #20]
 800ad98:	6849      	ldr	r1, [r1, #4]
 800ad9a:	0849      	lsrs	r1, r1, #1
 800ad9c:	2000      	movs	r0, #0
 800ad9e:	460c      	mov	r4, r1
 800ada0:	4605      	mov	r5, r0
 800ada2:	eb12 0804 	adds.w	r8, r2, r4
 800ada6:	eb43 0905 	adc.w	r9, r3, r5
 800adaa:	697b      	ldr	r3, [r7, #20]
 800adac:	685b      	ldr	r3, [r3, #4]
 800adae:	2200      	movs	r2, #0
 800adb0:	469a      	mov	sl, r3
 800adb2:	4693      	mov	fp, r2
 800adb4:	4652      	mov	r2, sl
 800adb6:	465b      	mov	r3, fp
 800adb8:	4640      	mov	r0, r8
 800adba:	4649      	mov	r1, r9
 800adbc:	f7f5 fd5a 	bl	8000874 <__aeabi_uldivmod>
 800adc0:	4602      	mov	r2, r0
 800adc2:	460b      	mov	r3, r1
 800adc4:	4613      	mov	r3, r2
 800adc6:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800adc8:	6a3b      	ldr	r3, [r7, #32]
 800adca:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800adce:	d308      	bcc.n	800ade2 <UART_SetConfig+0x3d2>
 800add0:	6a3b      	ldr	r3, [r7, #32]
 800add2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800add6:	d204      	bcs.n	800ade2 <UART_SetConfig+0x3d2>
        {
          huart->Instance->BRR = usartdiv;
 800add8:	697b      	ldr	r3, [r7, #20]
 800adda:	681b      	ldr	r3, [r3, #0]
 800addc:	6a3a      	ldr	r2, [r7, #32]
 800adde:	60da      	str	r2, [r3, #12]
 800ade0:	e0c8      	b.n	800af74 <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 800ade2:	2301      	movs	r3, #1
 800ade4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800ade8:	e0c4      	b.n	800af74 <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800adea:	697b      	ldr	r3, [r7, #20]
 800adec:	69db      	ldr	r3, [r3, #28]
 800adee:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800adf2:	d167      	bne.n	800aec4 <UART_SetConfig+0x4b4>
  {
    switch (clocksource)
 800adf4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800adf8:	2b08      	cmp	r3, #8
 800adfa:	d828      	bhi.n	800ae4e <UART_SetConfig+0x43e>
 800adfc:	a201      	add	r2, pc, #4	; (adr r2, 800ae04 <UART_SetConfig+0x3f4>)
 800adfe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ae02:	bf00      	nop
 800ae04:	0800ae29 	.word	0x0800ae29
 800ae08:	0800ae31 	.word	0x0800ae31
 800ae0c:	0800ae39 	.word	0x0800ae39
 800ae10:	0800ae4f 	.word	0x0800ae4f
 800ae14:	0800ae3f 	.word	0x0800ae3f
 800ae18:	0800ae4f 	.word	0x0800ae4f
 800ae1c:	0800ae4f 	.word	0x0800ae4f
 800ae20:	0800ae4f 	.word	0x0800ae4f
 800ae24:	0800ae47 	.word	0x0800ae47
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800ae28:	f7fc fa64 	bl	80072f4 <HAL_RCC_GetPCLK1Freq>
 800ae2c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800ae2e:	e014      	b.n	800ae5a <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800ae30:	f7fc fa76 	bl	8007320 <HAL_RCC_GetPCLK2Freq>
 800ae34:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800ae36:	e010      	b.n	800ae5a <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800ae38:	4b5a      	ldr	r3, [pc, #360]	; (800afa4 <UART_SetConfig+0x594>)
 800ae3a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800ae3c:	e00d      	b.n	800ae5a <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800ae3e:	f7fc f9eb 	bl	8007218 <HAL_RCC_GetSysClockFreq>
 800ae42:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800ae44:	e009      	b.n	800ae5a <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800ae46:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ae4a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800ae4c:	e005      	b.n	800ae5a <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 800ae4e:	2300      	movs	r3, #0
 800ae50:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800ae52:	2301      	movs	r3, #1
 800ae54:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800ae58:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800ae5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae5c:	2b00      	cmp	r3, #0
 800ae5e:	f000 8089 	beq.w	800af74 <UART_SetConfig+0x564>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ae62:	697b      	ldr	r3, [r7, #20]
 800ae64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae66:	4a4e      	ldr	r2, [pc, #312]	; (800afa0 <UART_SetConfig+0x590>)
 800ae68:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ae6c:	461a      	mov	r2, r3
 800ae6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae70:	fbb3 f3f2 	udiv	r3, r3, r2
 800ae74:	005a      	lsls	r2, r3, #1
 800ae76:	697b      	ldr	r3, [r7, #20]
 800ae78:	685b      	ldr	r3, [r3, #4]
 800ae7a:	085b      	lsrs	r3, r3, #1
 800ae7c:	441a      	add	r2, r3
 800ae7e:	697b      	ldr	r3, [r7, #20]
 800ae80:	685b      	ldr	r3, [r3, #4]
 800ae82:	fbb2 f3f3 	udiv	r3, r2, r3
 800ae86:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800ae88:	6a3b      	ldr	r3, [r7, #32]
 800ae8a:	2b0f      	cmp	r3, #15
 800ae8c:	d916      	bls.n	800aebc <UART_SetConfig+0x4ac>
 800ae8e:	6a3b      	ldr	r3, [r7, #32]
 800ae90:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ae94:	d212      	bcs.n	800aebc <UART_SetConfig+0x4ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800ae96:	6a3b      	ldr	r3, [r7, #32]
 800ae98:	b29b      	uxth	r3, r3
 800ae9a:	f023 030f 	bic.w	r3, r3, #15
 800ae9e:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800aea0:	6a3b      	ldr	r3, [r7, #32]
 800aea2:	085b      	lsrs	r3, r3, #1
 800aea4:	b29b      	uxth	r3, r3
 800aea6:	f003 0307 	and.w	r3, r3, #7
 800aeaa:	b29a      	uxth	r2, r3
 800aeac:	8bfb      	ldrh	r3, [r7, #30]
 800aeae:	4313      	orrs	r3, r2
 800aeb0:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800aeb2:	697b      	ldr	r3, [r7, #20]
 800aeb4:	681b      	ldr	r3, [r3, #0]
 800aeb6:	8bfa      	ldrh	r2, [r7, #30]
 800aeb8:	60da      	str	r2, [r3, #12]
 800aeba:	e05b      	b.n	800af74 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 800aebc:	2301      	movs	r3, #1
 800aebe:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800aec2:	e057      	b.n	800af74 <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 800aec4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800aec8:	2b08      	cmp	r3, #8
 800aeca:	d828      	bhi.n	800af1e <UART_SetConfig+0x50e>
 800aecc:	a201      	add	r2, pc, #4	; (adr r2, 800aed4 <UART_SetConfig+0x4c4>)
 800aece:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aed2:	bf00      	nop
 800aed4:	0800aef9 	.word	0x0800aef9
 800aed8:	0800af01 	.word	0x0800af01
 800aedc:	0800af09 	.word	0x0800af09
 800aee0:	0800af1f 	.word	0x0800af1f
 800aee4:	0800af0f 	.word	0x0800af0f
 800aee8:	0800af1f 	.word	0x0800af1f
 800aeec:	0800af1f 	.word	0x0800af1f
 800aef0:	0800af1f 	.word	0x0800af1f
 800aef4:	0800af17 	.word	0x0800af17
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800aef8:	f7fc f9fc 	bl	80072f4 <HAL_RCC_GetPCLK1Freq>
 800aefc:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800aefe:	e014      	b.n	800af2a <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800af00:	f7fc fa0e 	bl	8007320 <HAL_RCC_GetPCLK2Freq>
 800af04:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800af06:	e010      	b.n	800af2a <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800af08:	4b26      	ldr	r3, [pc, #152]	; (800afa4 <UART_SetConfig+0x594>)
 800af0a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800af0c:	e00d      	b.n	800af2a <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800af0e:	f7fc f983 	bl	8007218 <HAL_RCC_GetSysClockFreq>
 800af12:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800af14:	e009      	b.n	800af2a <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800af16:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800af1a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800af1c:	e005      	b.n	800af2a <UART_SetConfig+0x51a>
      default:
        pclk = 0U;
 800af1e:	2300      	movs	r3, #0
 800af20:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800af22:	2301      	movs	r3, #1
 800af24:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800af28:	bf00      	nop
    }

    if (pclk != 0U)
 800af2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af2c:	2b00      	cmp	r3, #0
 800af2e:	d021      	beq.n	800af74 <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800af30:	697b      	ldr	r3, [r7, #20]
 800af32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af34:	4a1a      	ldr	r2, [pc, #104]	; (800afa0 <UART_SetConfig+0x590>)
 800af36:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800af3a:	461a      	mov	r2, r3
 800af3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af3e:	fbb3 f2f2 	udiv	r2, r3, r2
 800af42:	697b      	ldr	r3, [r7, #20]
 800af44:	685b      	ldr	r3, [r3, #4]
 800af46:	085b      	lsrs	r3, r3, #1
 800af48:	441a      	add	r2, r3
 800af4a:	697b      	ldr	r3, [r7, #20]
 800af4c:	685b      	ldr	r3, [r3, #4]
 800af4e:	fbb2 f3f3 	udiv	r3, r2, r3
 800af52:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800af54:	6a3b      	ldr	r3, [r7, #32]
 800af56:	2b0f      	cmp	r3, #15
 800af58:	d909      	bls.n	800af6e <UART_SetConfig+0x55e>
 800af5a:	6a3b      	ldr	r3, [r7, #32]
 800af5c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800af60:	d205      	bcs.n	800af6e <UART_SetConfig+0x55e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800af62:	6a3b      	ldr	r3, [r7, #32]
 800af64:	b29a      	uxth	r2, r3
 800af66:	697b      	ldr	r3, [r7, #20]
 800af68:	681b      	ldr	r3, [r3, #0]
 800af6a:	60da      	str	r2, [r3, #12]
 800af6c:	e002      	b.n	800af74 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 800af6e:	2301      	movs	r3, #1
 800af70:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800af74:	697b      	ldr	r3, [r7, #20]
 800af76:	2201      	movs	r2, #1
 800af78:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800af7c:	697b      	ldr	r3, [r7, #20]
 800af7e:	2201      	movs	r2, #1
 800af80:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800af84:	697b      	ldr	r3, [r7, #20]
 800af86:	2200      	movs	r2, #0
 800af88:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800af8a:	697b      	ldr	r3, [r7, #20]
 800af8c:	2200      	movs	r2, #0
 800af8e:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800af90:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 800af94:	4618      	mov	r0, r3
 800af96:	3730      	adds	r7, #48	; 0x30
 800af98:	46bd      	mov	sp, r7
 800af9a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800af9e:	bf00      	nop
 800afa0:	0800bd6c 	.word	0x0800bd6c
 800afa4:	00f42400 	.word	0x00f42400

0800afa8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800afa8:	b480      	push	{r7}
 800afaa:	b083      	sub	sp, #12
 800afac:	af00      	add	r7, sp, #0
 800afae:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800afb0:	687b      	ldr	r3, [r7, #4]
 800afb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800afb4:	f003 0301 	and.w	r3, r3, #1
 800afb8:	2b00      	cmp	r3, #0
 800afba:	d00a      	beq.n	800afd2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800afbc:	687b      	ldr	r3, [r7, #4]
 800afbe:	681b      	ldr	r3, [r3, #0]
 800afc0:	685b      	ldr	r3, [r3, #4]
 800afc2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800afc6:	687b      	ldr	r3, [r7, #4]
 800afc8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800afca:	687b      	ldr	r3, [r7, #4]
 800afcc:	681b      	ldr	r3, [r3, #0]
 800afce:	430a      	orrs	r2, r1
 800afd0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800afd2:	687b      	ldr	r3, [r7, #4]
 800afd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800afd6:	f003 0302 	and.w	r3, r3, #2
 800afda:	2b00      	cmp	r3, #0
 800afdc:	d00a      	beq.n	800aff4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800afde:	687b      	ldr	r3, [r7, #4]
 800afe0:	681b      	ldr	r3, [r3, #0]
 800afe2:	685b      	ldr	r3, [r3, #4]
 800afe4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800afe8:	687b      	ldr	r3, [r7, #4]
 800afea:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800afec:	687b      	ldr	r3, [r7, #4]
 800afee:	681b      	ldr	r3, [r3, #0]
 800aff0:	430a      	orrs	r2, r1
 800aff2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800aff4:	687b      	ldr	r3, [r7, #4]
 800aff6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aff8:	f003 0304 	and.w	r3, r3, #4
 800affc:	2b00      	cmp	r3, #0
 800affe:	d00a      	beq.n	800b016 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800b000:	687b      	ldr	r3, [r7, #4]
 800b002:	681b      	ldr	r3, [r3, #0]
 800b004:	685b      	ldr	r3, [r3, #4]
 800b006:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800b00a:	687b      	ldr	r3, [r7, #4]
 800b00c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b00e:	687b      	ldr	r3, [r7, #4]
 800b010:	681b      	ldr	r3, [r3, #0]
 800b012:	430a      	orrs	r2, r1
 800b014:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800b016:	687b      	ldr	r3, [r7, #4]
 800b018:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b01a:	f003 0308 	and.w	r3, r3, #8
 800b01e:	2b00      	cmp	r3, #0
 800b020:	d00a      	beq.n	800b038 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800b022:	687b      	ldr	r3, [r7, #4]
 800b024:	681b      	ldr	r3, [r3, #0]
 800b026:	685b      	ldr	r3, [r3, #4]
 800b028:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800b02c:	687b      	ldr	r3, [r7, #4]
 800b02e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b030:	687b      	ldr	r3, [r7, #4]
 800b032:	681b      	ldr	r3, [r3, #0]
 800b034:	430a      	orrs	r2, r1
 800b036:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800b038:	687b      	ldr	r3, [r7, #4]
 800b03a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b03c:	f003 0310 	and.w	r3, r3, #16
 800b040:	2b00      	cmp	r3, #0
 800b042:	d00a      	beq.n	800b05a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800b044:	687b      	ldr	r3, [r7, #4]
 800b046:	681b      	ldr	r3, [r3, #0]
 800b048:	689b      	ldr	r3, [r3, #8]
 800b04a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800b04e:	687b      	ldr	r3, [r7, #4]
 800b050:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800b052:	687b      	ldr	r3, [r7, #4]
 800b054:	681b      	ldr	r3, [r3, #0]
 800b056:	430a      	orrs	r2, r1
 800b058:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800b05a:	687b      	ldr	r3, [r7, #4]
 800b05c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b05e:	f003 0320 	and.w	r3, r3, #32
 800b062:	2b00      	cmp	r3, #0
 800b064:	d00a      	beq.n	800b07c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800b066:	687b      	ldr	r3, [r7, #4]
 800b068:	681b      	ldr	r3, [r3, #0]
 800b06a:	689b      	ldr	r3, [r3, #8]
 800b06c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800b070:	687b      	ldr	r3, [r7, #4]
 800b072:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800b074:	687b      	ldr	r3, [r7, #4]
 800b076:	681b      	ldr	r3, [r3, #0]
 800b078:	430a      	orrs	r2, r1
 800b07a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800b07c:	687b      	ldr	r3, [r7, #4]
 800b07e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b080:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b084:	2b00      	cmp	r3, #0
 800b086:	d01a      	beq.n	800b0be <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800b088:	687b      	ldr	r3, [r7, #4]
 800b08a:	681b      	ldr	r3, [r3, #0]
 800b08c:	685b      	ldr	r3, [r3, #4]
 800b08e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800b092:	687b      	ldr	r3, [r7, #4]
 800b094:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b096:	687b      	ldr	r3, [r7, #4]
 800b098:	681b      	ldr	r3, [r3, #0]
 800b09a:	430a      	orrs	r2, r1
 800b09c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800b09e:	687b      	ldr	r3, [r7, #4]
 800b0a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b0a2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b0a6:	d10a      	bne.n	800b0be <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800b0a8:	687b      	ldr	r3, [r7, #4]
 800b0aa:	681b      	ldr	r3, [r3, #0]
 800b0ac:	685b      	ldr	r3, [r3, #4]
 800b0ae:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800b0b2:	687b      	ldr	r3, [r7, #4]
 800b0b4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800b0b6:	687b      	ldr	r3, [r7, #4]
 800b0b8:	681b      	ldr	r3, [r3, #0]
 800b0ba:	430a      	orrs	r2, r1
 800b0bc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800b0be:	687b      	ldr	r3, [r7, #4]
 800b0c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b0c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b0c6:	2b00      	cmp	r3, #0
 800b0c8:	d00a      	beq.n	800b0e0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800b0ca:	687b      	ldr	r3, [r7, #4]
 800b0cc:	681b      	ldr	r3, [r3, #0]
 800b0ce:	685b      	ldr	r3, [r3, #4]
 800b0d0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800b0d4:	687b      	ldr	r3, [r7, #4]
 800b0d6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800b0d8:	687b      	ldr	r3, [r7, #4]
 800b0da:	681b      	ldr	r3, [r3, #0]
 800b0dc:	430a      	orrs	r2, r1
 800b0de:	605a      	str	r2, [r3, #4]
  }
}
 800b0e0:	bf00      	nop
 800b0e2:	370c      	adds	r7, #12
 800b0e4:	46bd      	mov	sp, r7
 800b0e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0ea:	4770      	bx	lr

0800b0ec <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800b0ec:	b580      	push	{r7, lr}
 800b0ee:	b086      	sub	sp, #24
 800b0f0:	af02      	add	r7, sp, #8
 800b0f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b0f4:	687b      	ldr	r3, [r7, #4]
 800b0f6:	2200      	movs	r2, #0
 800b0f8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800b0fc:	f7f8 f922 	bl	8003344 <HAL_GetTick>
 800b100:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800b102:	687b      	ldr	r3, [r7, #4]
 800b104:	681b      	ldr	r3, [r3, #0]
 800b106:	681b      	ldr	r3, [r3, #0]
 800b108:	f003 0308 	and.w	r3, r3, #8
 800b10c:	2b08      	cmp	r3, #8
 800b10e:	d10e      	bne.n	800b12e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b110:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800b114:	9300      	str	r3, [sp, #0]
 800b116:	68fb      	ldr	r3, [r7, #12]
 800b118:	2200      	movs	r2, #0
 800b11a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800b11e:	6878      	ldr	r0, [r7, #4]
 800b120:	f000 f82f 	bl	800b182 <UART_WaitOnFlagUntilTimeout>
 800b124:	4603      	mov	r3, r0
 800b126:	2b00      	cmp	r3, #0
 800b128:	d001      	beq.n	800b12e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b12a:	2303      	movs	r3, #3
 800b12c:	e025      	b.n	800b17a <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800b12e:	687b      	ldr	r3, [r7, #4]
 800b130:	681b      	ldr	r3, [r3, #0]
 800b132:	681b      	ldr	r3, [r3, #0]
 800b134:	f003 0304 	and.w	r3, r3, #4
 800b138:	2b04      	cmp	r3, #4
 800b13a:	d10e      	bne.n	800b15a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b13c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800b140:	9300      	str	r3, [sp, #0]
 800b142:	68fb      	ldr	r3, [r7, #12]
 800b144:	2200      	movs	r2, #0
 800b146:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800b14a:	6878      	ldr	r0, [r7, #4]
 800b14c:	f000 f819 	bl	800b182 <UART_WaitOnFlagUntilTimeout>
 800b150:	4603      	mov	r3, r0
 800b152:	2b00      	cmp	r3, #0
 800b154:	d001      	beq.n	800b15a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b156:	2303      	movs	r3, #3
 800b158:	e00f      	b.n	800b17a <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800b15a:	687b      	ldr	r3, [r7, #4]
 800b15c:	2220      	movs	r2, #32
 800b15e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800b162:	687b      	ldr	r3, [r7, #4]
 800b164:	2220      	movs	r2, #32
 800b166:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b16a:	687b      	ldr	r3, [r7, #4]
 800b16c:	2200      	movs	r2, #0
 800b16e:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800b170:	687b      	ldr	r3, [r7, #4]
 800b172:	2200      	movs	r2, #0
 800b174:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800b178:	2300      	movs	r3, #0
}
 800b17a:	4618      	mov	r0, r3
 800b17c:	3710      	adds	r7, #16
 800b17e:	46bd      	mov	sp, r7
 800b180:	bd80      	pop	{r7, pc}

0800b182 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800b182:	b580      	push	{r7, lr}
 800b184:	b09c      	sub	sp, #112	; 0x70
 800b186:	af00      	add	r7, sp, #0
 800b188:	60f8      	str	r0, [r7, #12]
 800b18a:	60b9      	str	r1, [r7, #8]
 800b18c:	603b      	str	r3, [r7, #0]
 800b18e:	4613      	mov	r3, r2
 800b190:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b192:	e0a9      	b.n	800b2e8 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b194:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b196:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b19a:	f000 80a5 	beq.w	800b2e8 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b19e:	f7f8 f8d1 	bl	8003344 <HAL_GetTick>
 800b1a2:	4602      	mov	r2, r0
 800b1a4:	683b      	ldr	r3, [r7, #0]
 800b1a6:	1ad3      	subs	r3, r2, r3
 800b1a8:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800b1aa:	429a      	cmp	r2, r3
 800b1ac:	d302      	bcc.n	800b1b4 <UART_WaitOnFlagUntilTimeout+0x32>
 800b1ae:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b1b0:	2b00      	cmp	r3, #0
 800b1b2:	d140      	bne.n	800b236 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800b1b4:	68fb      	ldr	r3, [r7, #12]
 800b1b6:	681b      	ldr	r3, [r3, #0]
 800b1b8:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b1ba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b1bc:	e853 3f00 	ldrex	r3, [r3]
 800b1c0:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800b1c2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b1c4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800b1c8:	667b      	str	r3, [r7, #100]	; 0x64
 800b1ca:	68fb      	ldr	r3, [r7, #12]
 800b1cc:	681b      	ldr	r3, [r3, #0]
 800b1ce:	461a      	mov	r2, r3
 800b1d0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b1d2:	65fb      	str	r3, [r7, #92]	; 0x5c
 800b1d4:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b1d6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800b1d8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800b1da:	e841 2300 	strex	r3, r2, [r1]
 800b1de:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800b1e0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b1e2:	2b00      	cmp	r3, #0
 800b1e4:	d1e6      	bne.n	800b1b4 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b1e6:	68fb      	ldr	r3, [r7, #12]
 800b1e8:	681b      	ldr	r3, [r3, #0]
 800b1ea:	3308      	adds	r3, #8
 800b1ec:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b1ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b1f0:	e853 3f00 	ldrex	r3, [r3]
 800b1f4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800b1f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b1f8:	f023 0301 	bic.w	r3, r3, #1
 800b1fc:	663b      	str	r3, [r7, #96]	; 0x60
 800b1fe:	68fb      	ldr	r3, [r7, #12]
 800b200:	681b      	ldr	r3, [r3, #0]
 800b202:	3308      	adds	r3, #8
 800b204:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800b206:	64ba      	str	r2, [r7, #72]	; 0x48
 800b208:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b20a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800b20c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b20e:	e841 2300 	strex	r3, r2, [r1]
 800b212:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800b214:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b216:	2b00      	cmp	r3, #0
 800b218:	d1e5      	bne.n	800b1e6 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800b21a:	68fb      	ldr	r3, [r7, #12]
 800b21c:	2220      	movs	r2, #32
 800b21e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800b222:	68fb      	ldr	r3, [r7, #12]
 800b224:	2220      	movs	r2, #32
 800b226:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800b22a:	68fb      	ldr	r3, [r7, #12]
 800b22c:	2200      	movs	r2, #0
 800b22e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800b232:	2303      	movs	r3, #3
 800b234:	e069      	b.n	800b30a <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800b236:	68fb      	ldr	r3, [r7, #12]
 800b238:	681b      	ldr	r3, [r3, #0]
 800b23a:	681b      	ldr	r3, [r3, #0]
 800b23c:	f003 0304 	and.w	r3, r3, #4
 800b240:	2b00      	cmp	r3, #0
 800b242:	d051      	beq.n	800b2e8 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800b244:	68fb      	ldr	r3, [r7, #12]
 800b246:	681b      	ldr	r3, [r3, #0]
 800b248:	69db      	ldr	r3, [r3, #28]
 800b24a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b24e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b252:	d149      	bne.n	800b2e8 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800b254:	68fb      	ldr	r3, [r7, #12]
 800b256:	681b      	ldr	r3, [r3, #0]
 800b258:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800b25c:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800b25e:	68fb      	ldr	r3, [r7, #12]
 800b260:	681b      	ldr	r3, [r3, #0]
 800b262:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b264:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b266:	e853 3f00 	ldrex	r3, [r3]
 800b26a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800b26c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b26e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800b272:	66fb      	str	r3, [r7, #108]	; 0x6c
 800b274:	68fb      	ldr	r3, [r7, #12]
 800b276:	681b      	ldr	r3, [r3, #0]
 800b278:	461a      	mov	r2, r3
 800b27a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b27c:	637b      	str	r3, [r7, #52]	; 0x34
 800b27e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b280:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800b282:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b284:	e841 2300 	strex	r3, r2, [r1]
 800b288:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800b28a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b28c:	2b00      	cmp	r3, #0
 800b28e:	d1e6      	bne.n	800b25e <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b290:	68fb      	ldr	r3, [r7, #12]
 800b292:	681b      	ldr	r3, [r3, #0]
 800b294:	3308      	adds	r3, #8
 800b296:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b298:	697b      	ldr	r3, [r7, #20]
 800b29a:	e853 3f00 	ldrex	r3, [r3]
 800b29e:	613b      	str	r3, [r7, #16]
   return(result);
 800b2a0:	693b      	ldr	r3, [r7, #16]
 800b2a2:	f023 0301 	bic.w	r3, r3, #1
 800b2a6:	66bb      	str	r3, [r7, #104]	; 0x68
 800b2a8:	68fb      	ldr	r3, [r7, #12]
 800b2aa:	681b      	ldr	r3, [r3, #0]
 800b2ac:	3308      	adds	r3, #8
 800b2ae:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800b2b0:	623a      	str	r2, [r7, #32]
 800b2b2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b2b4:	69f9      	ldr	r1, [r7, #28]
 800b2b6:	6a3a      	ldr	r2, [r7, #32]
 800b2b8:	e841 2300 	strex	r3, r2, [r1]
 800b2bc:	61bb      	str	r3, [r7, #24]
   return(result);
 800b2be:	69bb      	ldr	r3, [r7, #24]
 800b2c0:	2b00      	cmp	r3, #0
 800b2c2:	d1e5      	bne.n	800b290 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 800b2c4:	68fb      	ldr	r3, [r7, #12]
 800b2c6:	2220      	movs	r2, #32
 800b2c8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800b2cc:	68fb      	ldr	r3, [r7, #12]
 800b2ce:	2220      	movs	r2, #32
 800b2d0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800b2d4:	68fb      	ldr	r3, [r7, #12]
 800b2d6:	2220      	movs	r2, #32
 800b2d8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800b2dc:	68fb      	ldr	r3, [r7, #12]
 800b2de:	2200      	movs	r2, #0
 800b2e0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800b2e4:	2303      	movs	r3, #3
 800b2e6:	e010      	b.n	800b30a <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b2e8:	68fb      	ldr	r3, [r7, #12]
 800b2ea:	681b      	ldr	r3, [r3, #0]
 800b2ec:	69da      	ldr	r2, [r3, #28]
 800b2ee:	68bb      	ldr	r3, [r7, #8]
 800b2f0:	4013      	ands	r3, r2
 800b2f2:	68ba      	ldr	r2, [r7, #8]
 800b2f4:	429a      	cmp	r2, r3
 800b2f6:	bf0c      	ite	eq
 800b2f8:	2301      	moveq	r3, #1
 800b2fa:	2300      	movne	r3, #0
 800b2fc:	b2db      	uxtb	r3, r3
 800b2fe:	461a      	mov	r2, r3
 800b300:	79fb      	ldrb	r3, [r7, #7]
 800b302:	429a      	cmp	r2, r3
 800b304:	f43f af46 	beq.w	800b194 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800b308:	2300      	movs	r3, #0
}
 800b30a:	4618      	mov	r0, r3
 800b30c:	3770      	adds	r7, #112	; 0x70
 800b30e:	46bd      	mov	sp, r7
 800b310:	bd80      	pop	{r7, pc}

0800b312 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800b312:	b480      	push	{r7}
 800b314:	b095      	sub	sp, #84	; 0x54
 800b316:	af00      	add	r7, sp, #0
 800b318:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b31a:	687b      	ldr	r3, [r7, #4]
 800b31c:	681b      	ldr	r3, [r3, #0]
 800b31e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b320:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b322:	e853 3f00 	ldrex	r3, [r3]
 800b326:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800b328:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b32a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800b32e:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b330:	687b      	ldr	r3, [r7, #4]
 800b332:	681b      	ldr	r3, [r3, #0]
 800b334:	461a      	mov	r2, r3
 800b336:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b338:	643b      	str	r3, [r7, #64]	; 0x40
 800b33a:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b33c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800b33e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800b340:	e841 2300 	strex	r3, r2, [r1]
 800b344:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800b346:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b348:	2b00      	cmp	r3, #0
 800b34a:	d1e6      	bne.n	800b31a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800b34c:	687b      	ldr	r3, [r7, #4]
 800b34e:	681b      	ldr	r3, [r3, #0]
 800b350:	3308      	adds	r3, #8
 800b352:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b354:	6a3b      	ldr	r3, [r7, #32]
 800b356:	e853 3f00 	ldrex	r3, [r3]
 800b35a:	61fb      	str	r3, [r7, #28]
   return(result);
 800b35c:	69fb      	ldr	r3, [r7, #28]
 800b35e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800b362:	f023 0301 	bic.w	r3, r3, #1
 800b366:	64bb      	str	r3, [r7, #72]	; 0x48
 800b368:	687b      	ldr	r3, [r7, #4]
 800b36a:	681b      	ldr	r3, [r3, #0]
 800b36c:	3308      	adds	r3, #8
 800b36e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b370:	62fa      	str	r2, [r7, #44]	; 0x2c
 800b372:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b374:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800b376:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b378:	e841 2300 	strex	r3, r2, [r1]
 800b37c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800b37e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b380:	2b00      	cmp	r3, #0
 800b382:	d1e3      	bne.n	800b34c <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b384:	687b      	ldr	r3, [r7, #4]
 800b386:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b388:	2b01      	cmp	r3, #1
 800b38a:	d118      	bne.n	800b3be <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b38c:	687b      	ldr	r3, [r7, #4]
 800b38e:	681b      	ldr	r3, [r3, #0]
 800b390:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b392:	68fb      	ldr	r3, [r7, #12]
 800b394:	e853 3f00 	ldrex	r3, [r3]
 800b398:	60bb      	str	r3, [r7, #8]
   return(result);
 800b39a:	68bb      	ldr	r3, [r7, #8]
 800b39c:	f023 0310 	bic.w	r3, r3, #16
 800b3a0:	647b      	str	r3, [r7, #68]	; 0x44
 800b3a2:	687b      	ldr	r3, [r7, #4]
 800b3a4:	681b      	ldr	r3, [r3, #0]
 800b3a6:	461a      	mov	r2, r3
 800b3a8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b3aa:	61bb      	str	r3, [r7, #24]
 800b3ac:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b3ae:	6979      	ldr	r1, [r7, #20]
 800b3b0:	69ba      	ldr	r2, [r7, #24]
 800b3b2:	e841 2300 	strex	r3, r2, [r1]
 800b3b6:	613b      	str	r3, [r7, #16]
   return(result);
 800b3b8:	693b      	ldr	r3, [r7, #16]
 800b3ba:	2b00      	cmp	r3, #0
 800b3bc:	d1e6      	bne.n	800b38c <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800b3be:	687b      	ldr	r3, [r7, #4]
 800b3c0:	2220      	movs	r2, #32
 800b3c2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b3c6:	687b      	ldr	r3, [r7, #4]
 800b3c8:	2200      	movs	r2, #0
 800b3ca:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800b3cc:	687b      	ldr	r3, [r7, #4]
 800b3ce:	2200      	movs	r2, #0
 800b3d0:	671a      	str	r2, [r3, #112]	; 0x70
}
 800b3d2:	bf00      	nop
 800b3d4:	3754      	adds	r7, #84	; 0x54
 800b3d6:	46bd      	mov	sp, r7
 800b3d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3dc:	4770      	bx	lr

0800b3de <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800b3de:	b580      	push	{r7, lr}
 800b3e0:	b084      	sub	sp, #16
 800b3e2:	af00      	add	r7, sp, #0
 800b3e4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b3e6:	687b      	ldr	r3, [r7, #4]
 800b3e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b3ea:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800b3ec:	68fb      	ldr	r3, [r7, #12]
 800b3ee:	2200      	movs	r2, #0
 800b3f0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800b3f4:	68fb      	ldr	r3, [r7, #12]
 800b3f6:	2200      	movs	r2, #0
 800b3f8:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800b3fc:	68f8      	ldr	r0, [r7, #12]
 800b3fe:	f7ff faf1 	bl	800a9e4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b402:	bf00      	nop
 800b404:	3710      	adds	r7, #16
 800b406:	46bd      	mov	sp, r7
 800b408:	bd80      	pop	{r7, pc}

0800b40a <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800b40a:	b580      	push	{r7, lr}
 800b40c:	b088      	sub	sp, #32
 800b40e:	af00      	add	r7, sp, #0
 800b410:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800b412:	687b      	ldr	r3, [r7, #4]
 800b414:	681b      	ldr	r3, [r3, #0]
 800b416:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b418:	68fb      	ldr	r3, [r7, #12]
 800b41a:	e853 3f00 	ldrex	r3, [r3]
 800b41e:	60bb      	str	r3, [r7, #8]
   return(result);
 800b420:	68bb      	ldr	r3, [r7, #8]
 800b422:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b426:	61fb      	str	r3, [r7, #28]
 800b428:	687b      	ldr	r3, [r7, #4]
 800b42a:	681b      	ldr	r3, [r3, #0]
 800b42c:	461a      	mov	r2, r3
 800b42e:	69fb      	ldr	r3, [r7, #28]
 800b430:	61bb      	str	r3, [r7, #24]
 800b432:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b434:	6979      	ldr	r1, [r7, #20]
 800b436:	69ba      	ldr	r2, [r7, #24]
 800b438:	e841 2300 	strex	r3, r2, [r1]
 800b43c:	613b      	str	r3, [r7, #16]
   return(result);
 800b43e:	693b      	ldr	r3, [r7, #16]
 800b440:	2b00      	cmp	r3, #0
 800b442:	d1e6      	bne.n	800b412 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800b444:	687b      	ldr	r3, [r7, #4]
 800b446:	2220      	movs	r2, #32
 800b448:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800b44c:	687b      	ldr	r3, [r7, #4]
 800b44e:	2200      	movs	r2, #0
 800b450:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800b452:	6878      	ldr	r0, [r7, #4]
 800b454:	f7ff fabc 	bl	800a9d0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b458:	bf00      	nop
 800b45a:	3720      	adds	r7, #32
 800b45c:	46bd      	mov	sp, r7
 800b45e:	bd80      	pop	{r7, pc}

0800b460 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800b460:	b480      	push	{r7}
 800b462:	b083      	sub	sp, #12
 800b464:	af00      	add	r7, sp, #0
 800b466:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800b468:	bf00      	nop
 800b46a:	370c      	adds	r7, #12
 800b46c:	46bd      	mov	sp, r7
 800b46e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b472:	4770      	bx	lr

0800b474 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800b474:	b480      	push	{r7}
 800b476:	b083      	sub	sp, #12
 800b478:	af00      	add	r7, sp, #0
 800b47a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800b47c:	bf00      	nop
 800b47e:	370c      	adds	r7, #12
 800b480:	46bd      	mov	sp, r7
 800b482:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b486:	4770      	bx	lr

0800b488 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800b488:	b480      	push	{r7}
 800b48a:	b083      	sub	sp, #12
 800b48c:	af00      	add	r7, sp, #0
 800b48e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800b490:	bf00      	nop
 800b492:	370c      	adds	r7, #12
 800b494:	46bd      	mov	sp, r7
 800b496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b49a:	4770      	bx	lr

0800b49c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800b49c:	b480      	push	{r7}
 800b49e:	b085      	sub	sp, #20
 800b4a0:	af00      	add	r7, sp, #0
 800b4a2:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b4a4:	687b      	ldr	r3, [r7, #4]
 800b4a6:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800b4aa:	2b01      	cmp	r3, #1
 800b4ac:	d101      	bne.n	800b4b2 <HAL_UARTEx_DisableFifoMode+0x16>
 800b4ae:	2302      	movs	r3, #2
 800b4b0:	e027      	b.n	800b502 <HAL_UARTEx_DisableFifoMode+0x66>
 800b4b2:	687b      	ldr	r3, [r7, #4]
 800b4b4:	2201      	movs	r2, #1
 800b4b6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800b4ba:	687b      	ldr	r3, [r7, #4]
 800b4bc:	2224      	movs	r2, #36	; 0x24
 800b4be:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b4c2:	687b      	ldr	r3, [r7, #4]
 800b4c4:	681b      	ldr	r3, [r3, #0]
 800b4c6:	681b      	ldr	r3, [r3, #0]
 800b4c8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b4ca:	687b      	ldr	r3, [r7, #4]
 800b4cc:	681b      	ldr	r3, [r3, #0]
 800b4ce:	681a      	ldr	r2, [r3, #0]
 800b4d0:	687b      	ldr	r3, [r7, #4]
 800b4d2:	681b      	ldr	r3, [r3, #0]
 800b4d4:	f022 0201 	bic.w	r2, r2, #1
 800b4d8:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800b4da:	68fb      	ldr	r3, [r7, #12]
 800b4dc:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800b4e0:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800b4e2:	687b      	ldr	r3, [r7, #4]
 800b4e4:	2200      	movs	r2, #0
 800b4e6:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b4e8:	687b      	ldr	r3, [r7, #4]
 800b4ea:	681b      	ldr	r3, [r3, #0]
 800b4ec:	68fa      	ldr	r2, [r7, #12]
 800b4ee:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b4f0:	687b      	ldr	r3, [r7, #4]
 800b4f2:	2220      	movs	r2, #32
 800b4f4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b4f8:	687b      	ldr	r3, [r7, #4]
 800b4fa:	2200      	movs	r2, #0
 800b4fc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800b500:	2300      	movs	r3, #0
}
 800b502:	4618      	mov	r0, r3
 800b504:	3714      	adds	r7, #20
 800b506:	46bd      	mov	sp, r7
 800b508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b50c:	4770      	bx	lr

0800b50e <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800b50e:	b580      	push	{r7, lr}
 800b510:	b084      	sub	sp, #16
 800b512:	af00      	add	r7, sp, #0
 800b514:	6078      	str	r0, [r7, #4]
 800b516:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b518:	687b      	ldr	r3, [r7, #4]
 800b51a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800b51e:	2b01      	cmp	r3, #1
 800b520:	d101      	bne.n	800b526 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800b522:	2302      	movs	r3, #2
 800b524:	e02d      	b.n	800b582 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800b526:	687b      	ldr	r3, [r7, #4]
 800b528:	2201      	movs	r2, #1
 800b52a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800b52e:	687b      	ldr	r3, [r7, #4]
 800b530:	2224      	movs	r2, #36	; 0x24
 800b532:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b536:	687b      	ldr	r3, [r7, #4]
 800b538:	681b      	ldr	r3, [r3, #0]
 800b53a:	681b      	ldr	r3, [r3, #0]
 800b53c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b53e:	687b      	ldr	r3, [r7, #4]
 800b540:	681b      	ldr	r3, [r3, #0]
 800b542:	681a      	ldr	r2, [r3, #0]
 800b544:	687b      	ldr	r3, [r7, #4]
 800b546:	681b      	ldr	r3, [r3, #0]
 800b548:	f022 0201 	bic.w	r2, r2, #1
 800b54c:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800b54e:	687b      	ldr	r3, [r7, #4]
 800b550:	681b      	ldr	r3, [r3, #0]
 800b552:	689b      	ldr	r3, [r3, #8]
 800b554:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800b558:	687b      	ldr	r3, [r7, #4]
 800b55a:	681b      	ldr	r3, [r3, #0]
 800b55c:	683a      	ldr	r2, [r7, #0]
 800b55e:	430a      	orrs	r2, r1
 800b560:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800b562:	6878      	ldr	r0, [r7, #4]
 800b564:	f000 f850 	bl	800b608 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b568:	687b      	ldr	r3, [r7, #4]
 800b56a:	681b      	ldr	r3, [r3, #0]
 800b56c:	68fa      	ldr	r2, [r7, #12]
 800b56e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b570:	687b      	ldr	r3, [r7, #4]
 800b572:	2220      	movs	r2, #32
 800b574:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b578:	687b      	ldr	r3, [r7, #4]
 800b57a:	2200      	movs	r2, #0
 800b57c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800b580:	2300      	movs	r3, #0
}
 800b582:	4618      	mov	r0, r3
 800b584:	3710      	adds	r7, #16
 800b586:	46bd      	mov	sp, r7
 800b588:	bd80      	pop	{r7, pc}

0800b58a <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800b58a:	b580      	push	{r7, lr}
 800b58c:	b084      	sub	sp, #16
 800b58e:	af00      	add	r7, sp, #0
 800b590:	6078      	str	r0, [r7, #4]
 800b592:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b594:	687b      	ldr	r3, [r7, #4]
 800b596:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800b59a:	2b01      	cmp	r3, #1
 800b59c:	d101      	bne.n	800b5a2 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800b59e:	2302      	movs	r3, #2
 800b5a0:	e02d      	b.n	800b5fe <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800b5a2:	687b      	ldr	r3, [r7, #4]
 800b5a4:	2201      	movs	r2, #1
 800b5a6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800b5aa:	687b      	ldr	r3, [r7, #4]
 800b5ac:	2224      	movs	r2, #36	; 0x24
 800b5ae:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b5b2:	687b      	ldr	r3, [r7, #4]
 800b5b4:	681b      	ldr	r3, [r3, #0]
 800b5b6:	681b      	ldr	r3, [r3, #0]
 800b5b8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b5ba:	687b      	ldr	r3, [r7, #4]
 800b5bc:	681b      	ldr	r3, [r3, #0]
 800b5be:	681a      	ldr	r2, [r3, #0]
 800b5c0:	687b      	ldr	r3, [r7, #4]
 800b5c2:	681b      	ldr	r3, [r3, #0]
 800b5c4:	f022 0201 	bic.w	r2, r2, #1
 800b5c8:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800b5ca:	687b      	ldr	r3, [r7, #4]
 800b5cc:	681b      	ldr	r3, [r3, #0]
 800b5ce:	689b      	ldr	r3, [r3, #8]
 800b5d0:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800b5d4:	687b      	ldr	r3, [r7, #4]
 800b5d6:	681b      	ldr	r3, [r3, #0]
 800b5d8:	683a      	ldr	r2, [r7, #0]
 800b5da:	430a      	orrs	r2, r1
 800b5dc:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800b5de:	6878      	ldr	r0, [r7, #4]
 800b5e0:	f000 f812 	bl	800b608 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b5e4:	687b      	ldr	r3, [r7, #4]
 800b5e6:	681b      	ldr	r3, [r3, #0]
 800b5e8:	68fa      	ldr	r2, [r7, #12]
 800b5ea:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b5ec:	687b      	ldr	r3, [r7, #4]
 800b5ee:	2220      	movs	r2, #32
 800b5f0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b5f4:	687b      	ldr	r3, [r7, #4]
 800b5f6:	2200      	movs	r2, #0
 800b5f8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800b5fc:	2300      	movs	r3, #0
}
 800b5fe:	4618      	mov	r0, r3
 800b600:	3710      	adds	r7, #16
 800b602:	46bd      	mov	sp, r7
 800b604:	bd80      	pop	{r7, pc}
	...

0800b608 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800b608:	b480      	push	{r7}
 800b60a:	b085      	sub	sp, #20
 800b60c:	af00      	add	r7, sp, #0
 800b60e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800b610:	687b      	ldr	r3, [r7, #4]
 800b612:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b614:	2b00      	cmp	r3, #0
 800b616:	d108      	bne.n	800b62a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800b618:	687b      	ldr	r3, [r7, #4]
 800b61a:	2201      	movs	r2, #1
 800b61c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800b620:	687b      	ldr	r3, [r7, #4]
 800b622:	2201      	movs	r2, #1
 800b624:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800b628:	e031      	b.n	800b68e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800b62a:	2308      	movs	r3, #8
 800b62c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800b62e:	2308      	movs	r3, #8
 800b630:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800b632:	687b      	ldr	r3, [r7, #4]
 800b634:	681b      	ldr	r3, [r3, #0]
 800b636:	689b      	ldr	r3, [r3, #8]
 800b638:	0e5b      	lsrs	r3, r3, #25
 800b63a:	b2db      	uxtb	r3, r3
 800b63c:	f003 0307 	and.w	r3, r3, #7
 800b640:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800b642:	687b      	ldr	r3, [r7, #4]
 800b644:	681b      	ldr	r3, [r3, #0]
 800b646:	689b      	ldr	r3, [r3, #8]
 800b648:	0f5b      	lsrs	r3, r3, #29
 800b64a:	b2db      	uxtb	r3, r3
 800b64c:	f003 0307 	and.w	r3, r3, #7
 800b650:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800b652:	7bbb      	ldrb	r3, [r7, #14]
 800b654:	7b3a      	ldrb	r2, [r7, #12]
 800b656:	4911      	ldr	r1, [pc, #68]	; (800b69c <UARTEx_SetNbDataToProcess+0x94>)
 800b658:	5c8a      	ldrb	r2, [r1, r2]
 800b65a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800b65e:	7b3a      	ldrb	r2, [r7, #12]
 800b660:	490f      	ldr	r1, [pc, #60]	; (800b6a0 <UARTEx_SetNbDataToProcess+0x98>)
 800b662:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800b664:	fb93 f3f2 	sdiv	r3, r3, r2
 800b668:	b29a      	uxth	r2, r3
 800b66a:	687b      	ldr	r3, [r7, #4]
 800b66c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800b670:	7bfb      	ldrb	r3, [r7, #15]
 800b672:	7b7a      	ldrb	r2, [r7, #13]
 800b674:	4909      	ldr	r1, [pc, #36]	; (800b69c <UARTEx_SetNbDataToProcess+0x94>)
 800b676:	5c8a      	ldrb	r2, [r1, r2]
 800b678:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800b67c:	7b7a      	ldrb	r2, [r7, #13]
 800b67e:	4908      	ldr	r1, [pc, #32]	; (800b6a0 <UARTEx_SetNbDataToProcess+0x98>)
 800b680:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800b682:	fb93 f3f2 	sdiv	r3, r3, r2
 800b686:	b29a      	uxth	r2, r3
 800b688:	687b      	ldr	r3, [r7, #4]
 800b68a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800b68e:	bf00      	nop
 800b690:	3714      	adds	r7, #20
 800b692:	46bd      	mov	sp, r7
 800b694:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b698:	4770      	bx	lr
 800b69a:	bf00      	nop
 800b69c:	0800bd84 	.word	0x0800bd84
 800b6a0:	0800bd8c 	.word	0x0800bd8c

0800b6a4 <memset>:
 800b6a4:	4402      	add	r2, r0
 800b6a6:	4603      	mov	r3, r0
 800b6a8:	4293      	cmp	r3, r2
 800b6aa:	d100      	bne.n	800b6ae <memset+0xa>
 800b6ac:	4770      	bx	lr
 800b6ae:	f803 1b01 	strb.w	r1, [r3], #1
 800b6b2:	e7f9      	b.n	800b6a8 <memset+0x4>

0800b6b4 <__libc_init_array>:
 800b6b4:	b570      	push	{r4, r5, r6, lr}
 800b6b6:	4d0d      	ldr	r5, [pc, #52]	; (800b6ec <__libc_init_array+0x38>)
 800b6b8:	4c0d      	ldr	r4, [pc, #52]	; (800b6f0 <__libc_init_array+0x3c>)
 800b6ba:	1b64      	subs	r4, r4, r5
 800b6bc:	10a4      	asrs	r4, r4, #2
 800b6be:	2600      	movs	r6, #0
 800b6c0:	42a6      	cmp	r6, r4
 800b6c2:	d109      	bne.n	800b6d8 <__libc_init_array+0x24>
 800b6c4:	4d0b      	ldr	r5, [pc, #44]	; (800b6f4 <__libc_init_array+0x40>)
 800b6c6:	4c0c      	ldr	r4, [pc, #48]	; (800b6f8 <__libc_init_array+0x44>)
 800b6c8:	f000 f818 	bl	800b6fc <_init>
 800b6cc:	1b64      	subs	r4, r4, r5
 800b6ce:	10a4      	asrs	r4, r4, #2
 800b6d0:	2600      	movs	r6, #0
 800b6d2:	42a6      	cmp	r6, r4
 800b6d4:	d105      	bne.n	800b6e2 <__libc_init_array+0x2e>
 800b6d6:	bd70      	pop	{r4, r5, r6, pc}
 800b6d8:	f855 3b04 	ldr.w	r3, [r5], #4
 800b6dc:	4798      	blx	r3
 800b6de:	3601      	adds	r6, #1
 800b6e0:	e7ee      	b.n	800b6c0 <__libc_init_array+0xc>
 800b6e2:	f855 3b04 	ldr.w	r3, [r5], #4
 800b6e6:	4798      	blx	r3
 800b6e8:	3601      	adds	r6, #1
 800b6ea:	e7f2      	b.n	800b6d2 <__libc_init_array+0x1e>
 800b6ec:	0800bd9c 	.word	0x0800bd9c
 800b6f0:	0800bd9c 	.word	0x0800bd9c
 800b6f4:	0800bd9c 	.word	0x0800bd9c
 800b6f8:	0800bda0 	.word	0x0800bda0

0800b6fc <_init>:
 800b6fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b6fe:	bf00      	nop
 800b700:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b702:	bc08      	pop	{r3}
 800b704:	469e      	mov	lr, r3
 800b706:	4770      	bx	lr

0800b708 <_fini>:
 800b708:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b70a:	bf00      	nop
 800b70c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b70e:	bc08      	pop	{r3}
 800b710:	469e      	mov	lr, r3
 800b712:	4770      	bx	lr
