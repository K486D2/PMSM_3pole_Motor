
Doktorat_G431_0707.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ccd8  080001d8  080001d8  000101d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000218  0800ceb0  0800ceb0  0001ceb0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d0c8  0800d0c8  00020048  2**0
                  CONTENTS
  4 .ARM          00000008  0800d0c8  0800d0c8  0001d0c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d0d0  0800d0d0  00020048  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d0d0  0800d0d0  0001d0d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d0d4  0800d0d4  0001d0d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000048  20000000  0800d0d8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001c24  20000048  0800d120  00020048  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001c6c  0800d120  00021c6c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020048  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 13 .debug_info   00021559  00000000  00000000  000200bb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003733  00000000  00000000  00041614  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001b78  00000000  00000000  00044d48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001a30  00000000  00000000  000468c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00022797  00000000  00000000  000482f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001ed80  00000000  00000000  0006aa87  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e7d0b  00000000  00000000  00089807  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00007c48  00000000  00000000  00171514  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000048 	.word	0x20000048
 80001f4:	00000000 	.word	0x00000000
 80001f8:	0800ce98 	.word	0x0800ce98

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	2000004c 	.word	0x2000004c
 8000214:	0800ce98 	.word	0x0800ce98

08000218 <__aeabi_drsub>:
 8000218:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800021c:	e002      	b.n	8000224 <__adddf3>
 800021e:	bf00      	nop

08000220 <__aeabi_dsub>:
 8000220:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000224 <__adddf3>:
 8000224:	b530      	push	{r4, r5, lr}
 8000226:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800022a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800022e:	ea94 0f05 	teq	r4, r5
 8000232:	bf08      	it	eq
 8000234:	ea90 0f02 	teqeq	r0, r2
 8000238:	bf1f      	itttt	ne
 800023a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800023e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000242:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000246:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800024a:	f000 80e2 	beq.w	8000412 <__adddf3+0x1ee>
 800024e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000252:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000256:	bfb8      	it	lt
 8000258:	426d      	neglt	r5, r5
 800025a:	dd0c      	ble.n	8000276 <__adddf3+0x52>
 800025c:	442c      	add	r4, r5
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	ea82 0000 	eor.w	r0, r2, r0
 800026a:	ea83 0101 	eor.w	r1, r3, r1
 800026e:	ea80 0202 	eor.w	r2, r0, r2
 8000272:	ea81 0303 	eor.w	r3, r1, r3
 8000276:	2d36      	cmp	r5, #54	; 0x36
 8000278:	bf88      	it	hi
 800027a:	bd30      	pophi	{r4, r5, pc}
 800027c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000280:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000284:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000288:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800028c:	d002      	beq.n	8000294 <__adddf3+0x70>
 800028e:	4240      	negs	r0, r0
 8000290:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000294:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000298:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800029c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002a0:	d002      	beq.n	80002a8 <__adddf3+0x84>
 80002a2:	4252      	negs	r2, r2
 80002a4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002a8:	ea94 0f05 	teq	r4, r5
 80002ac:	f000 80a7 	beq.w	80003fe <__adddf3+0x1da>
 80002b0:	f1a4 0401 	sub.w	r4, r4, #1
 80002b4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002b8:	db0d      	blt.n	80002d6 <__adddf3+0xb2>
 80002ba:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002be:	fa22 f205 	lsr.w	r2, r2, r5
 80002c2:	1880      	adds	r0, r0, r2
 80002c4:	f141 0100 	adc.w	r1, r1, #0
 80002c8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002cc:	1880      	adds	r0, r0, r2
 80002ce:	fa43 f305 	asr.w	r3, r3, r5
 80002d2:	4159      	adcs	r1, r3
 80002d4:	e00e      	b.n	80002f4 <__adddf3+0xd0>
 80002d6:	f1a5 0520 	sub.w	r5, r5, #32
 80002da:	f10e 0e20 	add.w	lr, lr, #32
 80002de:	2a01      	cmp	r2, #1
 80002e0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002e4:	bf28      	it	cs
 80002e6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002ea:	fa43 f305 	asr.w	r3, r3, r5
 80002ee:	18c0      	adds	r0, r0, r3
 80002f0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002f4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002f8:	d507      	bpl.n	800030a <__adddf3+0xe6>
 80002fa:	f04f 0e00 	mov.w	lr, #0
 80002fe:	f1dc 0c00 	rsbs	ip, ip, #0
 8000302:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000306:	eb6e 0101 	sbc.w	r1, lr, r1
 800030a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800030e:	d31b      	bcc.n	8000348 <__adddf3+0x124>
 8000310:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000314:	d30c      	bcc.n	8000330 <__adddf3+0x10c>
 8000316:	0849      	lsrs	r1, r1, #1
 8000318:	ea5f 0030 	movs.w	r0, r0, rrx
 800031c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000320:	f104 0401 	add.w	r4, r4, #1
 8000324:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000328:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800032c:	f080 809a 	bcs.w	8000464 <__adddf3+0x240>
 8000330:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000334:	bf08      	it	eq
 8000336:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800033a:	f150 0000 	adcs.w	r0, r0, #0
 800033e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000342:	ea41 0105 	orr.w	r1, r1, r5
 8000346:	bd30      	pop	{r4, r5, pc}
 8000348:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800034c:	4140      	adcs	r0, r0
 800034e:	eb41 0101 	adc.w	r1, r1, r1
 8000352:	3c01      	subs	r4, #1
 8000354:	bf28      	it	cs
 8000356:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800035a:	d2e9      	bcs.n	8000330 <__adddf3+0x10c>
 800035c:	f091 0f00 	teq	r1, #0
 8000360:	bf04      	itt	eq
 8000362:	4601      	moveq	r1, r0
 8000364:	2000      	moveq	r0, #0
 8000366:	fab1 f381 	clz	r3, r1
 800036a:	bf08      	it	eq
 800036c:	3320      	addeq	r3, #32
 800036e:	f1a3 030b 	sub.w	r3, r3, #11
 8000372:	f1b3 0220 	subs.w	r2, r3, #32
 8000376:	da0c      	bge.n	8000392 <__adddf3+0x16e>
 8000378:	320c      	adds	r2, #12
 800037a:	dd08      	ble.n	800038e <__adddf3+0x16a>
 800037c:	f102 0c14 	add.w	ip, r2, #20
 8000380:	f1c2 020c 	rsb	r2, r2, #12
 8000384:	fa01 f00c 	lsl.w	r0, r1, ip
 8000388:	fa21 f102 	lsr.w	r1, r1, r2
 800038c:	e00c      	b.n	80003a8 <__adddf3+0x184>
 800038e:	f102 0214 	add.w	r2, r2, #20
 8000392:	bfd8      	it	le
 8000394:	f1c2 0c20 	rsble	ip, r2, #32
 8000398:	fa01 f102 	lsl.w	r1, r1, r2
 800039c:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003a0:	bfdc      	itt	le
 80003a2:	ea41 010c 	orrle.w	r1, r1, ip
 80003a6:	4090      	lslle	r0, r2
 80003a8:	1ae4      	subs	r4, r4, r3
 80003aa:	bfa2      	ittt	ge
 80003ac:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003b0:	4329      	orrge	r1, r5
 80003b2:	bd30      	popge	{r4, r5, pc}
 80003b4:	ea6f 0404 	mvn.w	r4, r4
 80003b8:	3c1f      	subs	r4, #31
 80003ba:	da1c      	bge.n	80003f6 <__adddf3+0x1d2>
 80003bc:	340c      	adds	r4, #12
 80003be:	dc0e      	bgt.n	80003de <__adddf3+0x1ba>
 80003c0:	f104 0414 	add.w	r4, r4, #20
 80003c4:	f1c4 0220 	rsb	r2, r4, #32
 80003c8:	fa20 f004 	lsr.w	r0, r0, r4
 80003cc:	fa01 f302 	lsl.w	r3, r1, r2
 80003d0:	ea40 0003 	orr.w	r0, r0, r3
 80003d4:	fa21 f304 	lsr.w	r3, r1, r4
 80003d8:	ea45 0103 	orr.w	r1, r5, r3
 80003dc:	bd30      	pop	{r4, r5, pc}
 80003de:	f1c4 040c 	rsb	r4, r4, #12
 80003e2:	f1c4 0220 	rsb	r2, r4, #32
 80003e6:	fa20 f002 	lsr.w	r0, r0, r2
 80003ea:	fa01 f304 	lsl.w	r3, r1, r4
 80003ee:	ea40 0003 	orr.w	r0, r0, r3
 80003f2:	4629      	mov	r1, r5
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	fa21 f004 	lsr.w	r0, r1, r4
 80003fa:	4629      	mov	r1, r5
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f094 0f00 	teq	r4, #0
 8000402:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000406:	bf06      	itte	eq
 8000408:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800040c:	3401      	addeq	r4, #1
 800040e:	3d01      	subne	r5, #1
 8000410:	e74e      	b.n	80002b0 <__adddf3+0x8c>
 8000412:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000416:	bf18      	it	ne
 8000418:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800041c:	d029      	beq.n	8000472 <__adddf3+0x24e>
 800041e:	ea94 0f05 	teq	r4, r5
 8000422:	bf08      	it	eq
 8000424:	ea90 0f02 	teqeq	r0, r2
 8000428:	d005      	beq.n	8000436 <__adddf3+0x212>
 800042a:	ea54 0c00 	orrs.w	ip, r4, r0
 800042e:	bf04      	itt	eq
 8000430:	4619      	moveq	r1, r3
 8000432:	4610      	moveq	r0, r2
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	ea91 0f03 	teq	r1, r3
 800043a:	bf1e      	ittt	ne
 800043c:	2100      	movne	r1, #0
 800043e:	2000      	movne	r0, #0
 8000440:	bd30      	popne	{r4, r5, pc}
 8000442:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000446:	d105      	bne.n	8000454 <__adddf3+0x230>
 8000448:	0040      	lsls	r0, r0, #1
 800044a:	4149      	adcs	r1, r1
 800044c:	bf28      	it	cs
 800044e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000452:	bd30      	pop	{r4, r5, pc}
 8000454:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000458:	bf3c      	itt	cc
 800045a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800045e:	bd30      	popcc	{r4, r5, pc}
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000468:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800046c:	f04f 0000 	mov.w	r0, #0
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000476:	bf1a      	itte	ne
 8000478:	4619      	movne	r1, r3
 800047a:	4610      	movne	r0, r2
 800047c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000480:	bf1c      	itt	ne
 8000482:	460b      	movne	r3, r1
 8000484:	4602      	movne	r2, r0
 8000486:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800048a:	bf06      	itte	eq
 800048c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000490:	ea91 0f03 	teqeq	r1, r3
 8000494:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000498:	bd30      	pop	{r4, r5, pc}
 800049a:	bf00      	nop

0800049c <__aeabi_ui2d>:
 800049c:	f090 0f00 	teq	r0, #0
 80004a0:	bf04      	itt	eq
 80004a2:	2100      	moveq	r1, #0
 80004a4:	4770      	bxeq	lr
 80004a6:	b530      	push	{r4, r5, lr}
 80004a8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004ac:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004b0:	f04f 0500 	mov.w	r5, #0
 80004b4:	f04f 0100 	mov.w	r1, #0
 80004b8:	e750      	b.n	800035c <__adddf3+0x138>
 80004ba:	bf00      	nop

080004bc <__aeabi_i2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004d0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004d4:	bf48      	it	mi
 80004d6:	4240      	negmi	r0, r0
 80004d8:	f04f 0100 	mov.w	r1, #0
 80004dc:	e73e      	b.n	800035c <__adddf3+0x138>
 80004de:	bf00      	nop

080004e0 <__aeabi_f2d>:
 80004e0:	0042      	lsls	r2, r0, #1
 80004e2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004e6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004ea:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ee:	bf1f      	itttt	ne
 80004f0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004f4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004f8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004fc:	4770      	bxne	lr
 80004fe:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000502:	bf08      	it	eq
 8000504:	4770      	bxeq	lr
 8000506:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800050a:	bf04      	itt	eq
 800050c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000510:	4770      	bxeq	lr
 8000512:	b530      	push	{r4, r5, lr}
 8000514:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000520:	e71c      	b.n	800035c <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_ul2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f04f 0500 	mov.w	r5, #0
 8000532:	e00a      	b.n	800054a <__aeabi_l2d+0x16>

08000534 <__aeabi_l2d>:
 8000534:	ea50 0201 	orrs.w	r2, r0, r1
 8000538:	bf08      	it	eq
 800053a:	4770      	bxeq	lr
 800053c:	b530      	push	{r4, r5, lr}
 800053e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000542:	d502      	bpl.n	800054a <__aeabi_l2d+0x16>
 8000544:	4240      	negs	r0, r0
 8000546:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800054a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800054e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000552:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000556:	f43f aed8 	beq.w	800030a <__adddf3+0xe6>
 800055a:	f04f 0203 	mov.w	r2, #3
 800055e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000562:	bf18      	it	ne
 8000564:	3203      	addne	r2, #3
 8000566:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800056a:	bf18      	it	ne
 800056c:	3203      	addne	r2, #3
 800056e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000572:	f1c2 0320 	rsb	r3, r2, #32
 8000576:	fa00 fc03 	lsl.w	ip, r0, r3
 800057a:	fa20 f002 	lsr.w	r0, r0, r2
 800057e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000582:	ea40 000e 	orr.w	r0, r0, lr
 8000586:	fa21 f102 	lsr.w	r1, r1, r2
 800058a:	4414      	add	r4, r2
 800058c:	e6bd      	b.n	800030a <__adddf3+0xe6>
 800058e:	bf00      	nop

08000590 <__aeabi_dmul>:
 8000590:	b570      	push	{r4, r5, r6, lr}
 8000592:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000596:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800059a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800059e:	bf1d      	ittte	ne
 80005a0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005a4:	ea94 0f0c 	teqne	r4, ip
 80005a8:	ea95 0f0c 	teqne	r5, ip
 80005ac:	f000 f8de 	bleq	800076c <__aeabi_dmul+0x1dc>
 80005b0:	442c      	add	r4, r5
 80005b2:	ea81 0603 	eor.w	r6, r1, r3
 80005b6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005ba:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005be:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005c2:	bf18      	it	ne
 80005c4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005cc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005d0:	d038      	beq.n	8000644 <__aeabi_dmul+0xb4>
 80005d2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005de:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005e2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005e6:	f04f 0600 	mov.w	r6, #0
 80005ea:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ee:	f09c 0f00 	teq	ip, #0
 80005f2:	bf18      	it	ne
 80005f4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005f8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005fc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000600:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000604:	d204      	bcs.n	8000610 <__aeabi_dmul+0x80>
 8000606:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800060a:	416d      	adcs	r5, r5
 800060c:	eb46 0606 	adc.w	r6, r6, r6
 8000610:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000614:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000618:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800061c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000620:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000624:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000628:	bf88      	it	hi
 800062a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800062e:	d81e      	bhi.n	800066e <__aeabi_dmul+0xde>
 8000630:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000634:	bf08      	it	eq
 8000636:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800063a:	f150 0000 	adcs.w	r0, r0, #0
 800063e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000642:	bd70      	pop	{r4, r5, r6, pc}
 8000644:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000648:	ea46 0101 	orr.w	r1, r6, r1
 800064c:	ea40 0002 	orr.w	r0, r0, r2
 8000650:	ea81 0103 	eor.w	r1, r1, r3
 8000654:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000658:	bfc2      	ittt	gt
 800065a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800065e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000662:	bd70      	popgt	{r4, r5, r6, pc}
 8000664:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000668:	f04f 0e00 	mov.w	lr, #0
 800066c:	3c01      	subs	r4, #1
 800066e:	f300 80ab 	bgt.w	80007c8 <__aeabi_dmul+0x238>
 8000672:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000676:	bfde      	ittt	le
 8000678:	2000      	movle	r0, #0
 800067a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800067e:	bd70      	pople	{r4, r5, r6, pc}
 8000680:	f1c4 0400 	rsb	r4, r4, #0
 8000684:	3c20      	subs	r4, #32
 8000686:	da35      	bge.n	80006f4 <__aeabi_dmul+0x164>
 8000688:	340c      	adds	r4, #12
 800068a:	dc1b      	bgt.n	80006c4 <__aeabi_dmul+0x134>
 800068c:	f104 0414 	add.w	r4, r4, #20
 8000690:	f1c4 0520 	rsb	r5, r4, #32
 8000694:	fa00 f305 	lsl.w	r3, r0, r5
 8000698:	fa20 f004 	lsr.w	r0, r0, r4
 800069c:	fa01 f205 	lsl.w	r2, r1, r5
 80006a0:	ea40 0002 	orr.w	r0, r0, r2
 80006a4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006a8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006ac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b0:	fa21 f604 	lsr.w	r6, r1, r4
 80006b4:	eb42 0106 	adc.w	r1, r2, r6
 80006b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006bc:	bf08      	it	eq
 80006be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006c2:	bd70      	pop	{r4, r5, r6, pc}
 80006c4:	f1c4 040c 	rsb	r4, r4, #12
 80006c8:	f1c4 0520 	rsb	r5, r4, #32
 80006cc:	fa00 f304 	lsl.w	r3, r0, r4
 80006d0:	fa20 f005 	lsr.w	r0, r0, r5
 80006d4:	fa01 f204 	lsl.w	r2, r1, r4
 80006d8:	ea40 0002 	orr.w	r0, r0, r2
 80006dc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006e4:	f141 0100 	adc.w	r1, r1, #0
 80006e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ec:	bf08      	it	eq
 80006ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f1c4 0520 	rsb	r5, r4, #32
 80006f8:	fa00 f205 	lsl.w	r2, r0, r5
 80006fc:	ea4e 0e02 	orr.w	lr, lr, r2
 8000700:	fa20 f304 	lsr.w	r3, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea43 0302 	orr.w	r3, r3, r2
 800070c:	fa21 f004 	lsr.w	r0, r1, r4
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	fa21 f204 	lsr.w	r2, r1, r4
 8000718:	ea20 0002 	bic.w	r0, r0, r2
 800071c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f094 0f00 	teq	r4, #0
 8000730:	d10f      	bne.n	8000752 <__aeabi_dmul+0x1c2>
 8000732:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000736:	0040      	lsls	r0, r0, #1
 8000738:	eb41 0101 	adc.w	r1, r1, r1
 800073c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000740:	bf08      	it	eq
 8000742:	3c01      	subeq	r4, #1
 8000744:	d0f7      	beq.n	8000736 <__aeabi_dmul+0x1a6>
 8000746:	ea41 0106 	orr.w	r1, r1, r6
 800074a:	f095 0f00 	teq	r5, #0
 800074e:	bf18      	it	ne
 8000750:	4770      	bxne	lr
 8000752:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000756:	0052      	lsls	r2, r2, #1
 8000758:	eb43 0303 	adc.w	r3, r3, r3
 800075c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000760:	bf08      	it	eq
 8000762:	3d01      	subeq	r5, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1c6>
 8000766:	ea43 0306 	orr.w	r3, r3, r6
 800076a:	4770      	bx	lr
 800076c:	ea94 0f0c 	teq	r4, ip
 8000770:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000774:	bf18      	it	ne
 8000776:	ea95 0f0c 	teqne	r5, ip
 800077a:	d00c      	beq.n	8000796 <__aeabi_dmul+0x206>
 800077c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000780:	bf18      	it	ne
 8000782:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000786:	d1d1      	bne.n	800072c <__aeabi_dmul+0x19c>
 8000788:	ea81 0103 	eor.w	r1, r1, r3
 800078c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000790:	f04f 0000 	mov.w	r0, #0
 8000794:	bd70      	pop	{r4, r5, r6, pc}
 8000796:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800079a:	bf06      	itte	eq
 800079c:	4610      	moveq	r0, r2
 800079e:	4619      	moveq	r1, r3
 80007a0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a4:	d019      	beq.n	80007da <__aeabi_dmul+0x24a>
 80007a6:	ea94 0f0c 	teq	r4, ip
 80007aa:	d102      	bne.n	80007b2 <__aeabi_dmul+0x222>
 80007ac:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007b0:	d113      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007b2:	ea95 0f0c 	teq	r5, ip
 80007b6:	d105      	bne.n	80007c4 <__aeabi_dmul+0x234>
 80007b8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007bc:	bf1c      	itt	ne
 80007be:	4610      	movne	r0, r2
 80007c0:	4619      	movne	r1, r3
 80007c2:	d10a      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007c4:	ea81 0103 	eor.w	r1, r1, r3
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007d4:	f04f 0000 	mov.w	r0, #0
 80007d8:	bd70      	pop	{r4, r5, r6, pc}
 80007da:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007de:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007e2:	bd70      	pop	{r4, r5, r6, pc}

080007e4 <__aeabi_ddiv>:
 80007e4:	b570      	push	{r4, r5, r6, lr}
 80007e6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007ea:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ee:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007f2:	bf1d      	ittte	ne
 80007f4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007f8:	ea94 0f0c 	teqne	r4, ip
 80007fc:	ea95 0f0c 	teqne	r5, ip
 8000800:	f000 f8a7 	bleq	8000952 <__aeabi_ddiv+0x16e>
 8000804:	eba4 0405 	sub.w	r4, r4, r5
 8000808:	ea81 0e03 	eor.w	lr, r1, r3
 800080c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000810:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000814:	f000 8088 	beq.w	8000928 <__aeabi_ddiv+0x144>
 8000818:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800081c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000820:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000824:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000828:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800082c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000830:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000834:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000838:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800083c:	429d      	cmp	r5, r3
 800083e:	bf08      	it	eq
 8000840:	4296      	cmpeq	r6, r2
 8000842:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000846:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800084a:	d202      	bcs.n	8000852 <__aeabi_ddiv+0x6e>
 800084c:	085b      	lsrs	r3, r3, #1
 800084e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000852:	1ab6      	subs	r6, r6, r2
 8000854:	eb65 0503 	sbc.w	r5, r5, r3
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000862:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 000c 	orrcs.w	r0, r0, ip
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008c0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008c4:	d018      	beq.n	80008f8 <__aeabi_ddiv+0x114>
 80008c6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ca:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ce:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008d2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008d6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008da:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008de:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008e2:	d1c0      	bne.n	8000866 <__aeabi_ddiv+0x82>
 80008e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008e8:	d10b      	bne.n	8000902 <__aeabi_ddiv+0x11e>
 80008ea:	ea41 0100 	orr.w	r1, r1, r0
 80008ee:	f04f 0000 	mov.w	r0, #0
 80008f2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008f6:	e7b6      	b.n	8000866 <__aeabi_ddiv+0x82>
 80008f8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008fc:	bf04      	itt	eq
 80008fe:	4301      	orreq	r1, r0
 8000900:	2000      	moveq	r0, #0
 8000902:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000906:	bf88      	it	hi
 8000908:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800090c:	f63f aeaf 	bhi.w	800066e <__aeabi_dmul+0xde>
 8000910:	ebb5 0c03 	subs.w	ip, r5, r3
 8000914:	bf04      	itt	eq
 8000916:	ebb6 0c02 	subseq.w	ip, r6, r2
 800091a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800091e:	f150 0000 	adcs.w	r0, r0, #0
 8000922:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000926:	bd70      	pop	{r4, r5, r6, pc}
 8000928:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800092c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000930:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000934:	bfc2      	ittt	gt
 8000936:	ebd4 050c 	rsbsgt	r5, r4, ip
 800093a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800093e:	bd70      	popgt	{r4, r5, r6, pc}
 8000940:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000944:	f04f 0e00 	mov.w	lr, #0
 8000948:	3c01      	subs	r4, #1
 800094a:	e690      	b.n	800066e <__aeabi_dmul+0xde>
 800094c:	ea45 0e06 	orr.w	lr, r5, r6
 8000950:	e68d      	b.n	800066e <__aeabi_dmul+0xde>
 8000952:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000956:	ea94 0f0c 	teq	r4, ip
 800095a:	bf08      	it	eq
 800095c:	ea95 0f0c 	teqeq	r5, ip
 8000960:	f43f af3b 	beq.w	80007da <__aeabi_dmul+0x24a>
 8000964:	ea94 0f0c 	teq	r4, ip
 8000968:	d10a      	bne.n	8000980 <__aeabi_ddiv+0x19c>
 800096a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800096e:	f47f af34 	bne.w	80007da <__aeabi_dmul+0x24a>
 8000972:	ea95 0f0c 	teq	r5, ip
 8000976:	f47f af25 	bne.w	80007c4 <__aeabi_dmul+0x234>
 800097a:	4610      	mov	r0, r2
 800097c:	4619      	mov	r1, r3
 800097e:	e72c      	b.n	80007da <__aeabi_dmul+0x24a>
 8000980:	ea95 0f0c 	teq	r5, ip
 8000984:	d106      	bne.n	8000994 <__aeabi_ddiv+0x1b0>
 8000986:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800098a:	f43f aefd 	beq.w	8000788 <__aeabi_dmul+0x1f8>
 800098e:	4610      	mov	r0, r2
 8000990:	4619      	mov	r1, r3
 8000992:	e722      	b.n	80007da <__aeabi_dmul+0x24a>
 8000994:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800099e:	f47f aec5 	bne.w	800072c <__aeabi_dmul+0x19c>
 80009a2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009a6:	f47f af0d 	bne.w	80007c4 <__aeabi_dmul+0x234>
 80009aa:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ae:	f47f aeeb 	bne.w	8000788 <__aeabi_dmul+0x1f8>
 80009b2:	e712      	b.n	80007da <__aeabi_dmul+0x24a>

080009b4 <__gedf2>:
 80009b4:	f04f 3cff 	mov.w	ip, #4294967295
 80009b8:	e006      	b.n	80009c8 <__cmpdf2+0x4>
 80009ba:	bf00      	nop

080009bc <__ledf2>:
 80009bc:	f04f 0c01 	mov.w	ip, #1
 80009c0:	e002      	b.n	80009c8 <__cmpdf2+0x4>
 80009c2:	bf00      	nop

080009c4 <__cmpdf2>:
 80009c4:	f04f 0c01 	mov.w	ip, #1
 80009c8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009cc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009d0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009d8:	bf18      	it	ne
 80009da:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009de:	d01b      	beq.n	8000a18 <__cmpdf2+0x54>
 80009e0:	b001      	add	sp, #4
 80009e2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009e6:	bf0c      	ite	eq
 80009e8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ec:	ea91 0f03 	teqne	r1, r3
 80009f0:	bf02      	ittt	eq
 80009f2:	ea90 0f02 	teqeq	r0, r2
 80009f6:	2000      	moveq	r0, #0
 80009f8:	4770      	bxeq	lr
 80009fa:	f110 0f00 	cmn.w	r0, #0
 80009fe:	ea91 0f03 	teq	r1, r3
 8000a02:	bf58      	it	pl
 8000a04:	4299      	cmppl	r1, r3
 8000a06:	bf08      	it	eq
 8000a08:	4290      	cmpeq	r0, r2
 8000a0a:	bf2c      	ite	cs
 8000a0c:	17d8      	asrcs	r0, r3, #31
 8000a0e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a12:	f040 0001 	orr.w	r0, r0, #1
 8000a16:	4770      	bx	lr
 8000a18:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a1c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a20:	d102      	bne.n	8000a28 <__cmpdf2+0x64>
 8000a22:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a26:	d107      	bne.n	8000a38 <__cmpdf2+0x74>
 8000a28:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a2c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a30:	d1d6      	bne.n	80009e0 <__cmpdf2+0x1c>
 8000a32:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a36:	d0d3      	beq.n	80009e0 <__cmpdf2+0x1c>
 8000a38:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a3c:	4770      	bx	lr
 8000a3e:	bf00      	nop

08000a40 <__aeabi_cdrcmple>:
 8000a40:	4684      	mov	ip, r0
 8000a42:	4610      	mov	r0, r2
 8000a44:	4662      	mov	r2, ip
 8000a46:	468c      	mov	ip, r1
 8000a48:	4619      	mov	r1, r3
 8000a4a:	4663      	mov	r3, ip
 8000a4c:	e000      	b.n	8000a50 <__aeabi_cdcmpeq>
 8000a4e:	bf00      	nop

08000a50 <__aeabi_cdcmpeq>:
 8000a50:	b501      	push	{r0, lr}
 8000a52:	f7ff ffb7 	bl	80009c4 <__cmpdf2>
 8000a56:	2800      	cmp	r0, #0
 8000a58:	bf48      	it	mi
 8000a5a:	f110 0f00 	cmnmi.w	r0, #0
 8000a5e:	bd01      	pop	{r0, pc}

08000a60 <__aeabi_dcmpeq>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff fff4 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a68:	bf0c      	ite	eq
 8000a6a:	2001      	moveq	r0, #1
 8000a6c:	2000      	movne	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_dcmplt>:
 8000a74:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a78:	f7ff ffea 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a7c:	bf34      	ite	cc
 8000a7e:	2001      	movcc	r0, #1
 8000a80:	2000      	movcs	r0, #0
 8000a82:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a86:	bf00      	nop

08000a88 <__aeabi_dcmple>:
 8000a88:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a8c:	f7ff ffe0 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a90:	bf94      	ite	ls
 8000a92:	2001      	movls	r0, #1
 8000a94:	2000      	movhi	r0, #0
 8000a96:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9a:	bf00      	nop

08000a9c <__aeabi_dcmpge>:
 8000a9c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa0:	f7ff ffce 	bl	8000a40 <__aeabi_cdrcmple>
 8000aa4:	bf94      	ite	ls
 8000aa6:	2001      	movls	r0, #1
 8000aa8:	2000      	movhi	r0, #0
 8000aaa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aae:	bf00      	nop

08000ab0 <__aeabi_dcmpgt>:
 8000ab0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab4:	f7ff ffc4 	bl	8000a40 <__aeabi_cdrcmple>
 8000ab8:	bf34      	ite	cc
 8000aba:	2001      	movcc	r0, #1
 8000abc:	2000      	movcs	r0, #0
 8000abe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ac2:	bf00      	nop

08000ac4 <__aeabi_d2iz>:
 8000ac4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ac8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000acc:	d215      	bcs.n	8000afa <__aeabi_d2iz+0x36>
 8000ace:	d511      	bpl.n	8000af4 <__aeabi_d2iz+0x30>
 8000ad0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ad4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ad8:	d912      	bls.n	8000b00 <__aeabi_d2iz+0x3c>
 8000ada:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ade:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ae2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ae6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000aea:	fa23 f002 	lsr.w	r0, r3, r2
 8000aee:	bf18      	it	ne
 8000af0:	4240      	negne	r0, r0
 8000af2:	4770      	bx	lr
 8000af4:	f04f 0000 	mov.w	r0, #0
 8000af8:	4770      	bx	lr
 8000afa:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000afe:	d105      	bne.n	8000b0c <__aeabi_d2iz+0x48>
 8000b00:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b04:	bf08      	it	eq
 8000b06:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b0a:	4770      	bx	lr
 8000b0c:	f04f 0000 	mov.w	r0, #0
 8000b10:	4770      	bx	lr
 8000b12:	bf00      	nop

08000b14 <__aeabi_d2uiz>:
 8000b14:	004a      	lsls	r2, r1, #1
 8000b16:	d211      	bcs.n	8000b3c <__aeabi_d2uiz+0x28>
 8000b18:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b1c:	d211      	bcs.n	8000b42 <__aeabi_d2uiz+0x2e>
 8000b1e:	d50d      	bpl.n	8000b3c <__aeabi_d2uiz+0x28>
 8000b20:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b24:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b28:	d40e      	bmi.n	8000b48 <__aeabi_d2uiz+0x34>
 8000b2a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b32:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b36:	fa23 f002 	lsr.w	r0, r3, r2
 8000b3a:	4770      	bx	lr
 8000b3c:	f04f 0000 	mov.w	r0, #0
 8000b40:	4770      	bx	lr
 8000b42:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b46:	d102      	bne.n	8000b4e <__aeabi_d2uiz+0x3a>
 8000b48:	f04f 30ff 	mov.w	r0, #4294967295
 8000b4c:	4770      	bx	lr
 8000b4e:	f04f 0000 	mov.w	r0, #0
 8000b52:	4770      	bx	lr

08000b54 <__aeabi_d2f>:
 8000b54:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b58:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b5c:	bf24      	itt	cs
 8000b5e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b62:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b66:	d90d      	bls.n	8000b84 <__aeabi_d2f+0x30>
 8000b68:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b6c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b70:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b74:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b78:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b7c:	bf08      	it	eq
 8000b7e:	f020 0001 	biceq.w	r0, r0, #1
 8000b82:	4770      	bx	lr
 8000b84:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b88:	d121      	bne.n	8000bce <__aeabi_d2f+0x7a>
 8000b8a:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b8e:	bfbc      	itt	lt
 8000b90:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b94:	4770      	bxlt	lr
 8000b96:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b9a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b9e:	f1c2 0218 	rsb	r2, r2, #24
 8000ba2:	f1c2 0c20 	rsb	ip, r2, #32
 8000ba6:	fa10 f30c 	lsls.w	r3, r0, ip
 8000baa:	fa20 f002 	lsr.w	r0, r0, r2
 8000bae:	bf18      	it	ne
 8000bb0:	f040 0001 	orrne.w	r0, r0, #1
 8000bb4:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb8:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000bbc:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000bc0:	ea40 000c 	orr.w	r0, r0, ip
 8000bc4:	fa23 f302 	lsr.w	r3, r3, r2
 8000bc8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000bcc:	e7cc      	b.n	8000b68 <__aeabi_d2f+0x14>
 8000bce:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000bd2:	d107      	bne.n	8000be4 <__aeabi_d2f+0x90>
 8000bd4:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000bd8:	bf1e      	ittt	ne
 8000bda:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000bde:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000be2:	4770      	bxne	lr
 8000be4:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000bec:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bf0:	4770      	bx	lr
 8000bf2:	bf00      	nop

08000bf4 <__aeabi_uldivmod>:
 8000bf4:	b953      	cbnz	r3, 8000c0c <__aeabi_uldivmod+0x18>
 8000bf6:	b94a      	cbnz	r2, 8000c0c <__aeabi_uldivmod+0x18>
 8000bf8:	2900      	cmp	r1, #0
 8000bfa:	bf08      	it	eq
 8000bfc:	2800      	cmpeq	r0, #0
 8000bfe:	bf1c      	itt	ne
 8000c00:	f04f 31ff 	movne.w	r1, #4294967295
 8000c04:	f04f 30ff 	movne.w	r0, #4294967295
 8000c08:	f000 b970 	b.w	8000eec <__aeabi_idiv0>
 8000c0c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c10:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c14:	f000 f806 	bl	8000c24 <__udivmoddi4>
 8000c18:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c1c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c20:	b004      	add	sp, #16
 8000c22:	4770      	bx	lr

08000c24 <__udivmoddi4>:
 8000c24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c28:	9e08      	ldr	r6, [sp, #32]
 8000c2a:	460d      	mov	r5, r1
 8000c2c:	4604      	mov	r4, r0
 8000c2e:	460f      	mov	r7, r1
 8000c30:	2b00      	cmp	r3, #0
 8000c32:	d14a      	bne.n	8000cca <__udivmoddi4+0xa6>
 8000c34:	428a      	cmp	r2, r1
 8000c36:	4694      	mov	ip, r2
 8000c38:	d965      	bls.n	8000d06 <__udivmoddi4+0xe2>
 8000c3a:	fab2 f382 	clz	r3, r2
 8000c3e:	b143      	cbz	r3, 8000c52 <__udivmoddi4+0x2e>
 8000c40:	fa02 fc03 	lsl.w	ip, r2, r3
 8000c44:	f1c3 0220 	rsb	r2, r3, #32
 8000c48:	409f      	lsls	r7, r3
 8000c4a:	fa20 f202 	lsr.w	r2, r0, r2
 8000c4e:	4317      	orrs	r7, r2
 8000c50:	409c      	lsls	r4, r3
 8000c52:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000c56:	fa1f f58c 	uxth.w	r5, ip
 8000c5a:	fbb7 f1fe 	udiv	r1, r7, lr
 8000c5e:	0c22      	lsrs	r2, r4, #16
 8000c60:	fb0e 7711 	mls	r7, lr, r1, r7
 8000c64:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000c68:	fb01 f005 	mul.w	r0, r1, r5
 8000c6c:	4290      	cmp	r0, r2
 8000c6e:	d90a      	bls.n	8000c86 <__udivmoddi4+0x62>
 8000c70:	eb1c 0202 	adds.w	r2, ip, r2
 8000c74:	f101 37ff 	add.w	r7, r1, #4294967295
 8000c78:	f080 811c 	bcs.w	8000eb4 <__udivmoddi4+0x290>
 8000c7c:	4290      	cmp	r0, r2
 8000c7e:	f240 8119 	bls.w	8000eb4 <__udivmoddi4+0x290>
 8000c82:	3902      	subs	r1, #2
 8000c84:	4462      	add	r2, ip
 8000c86:	1a12      	subs	r2, r2, r0
 8000c88:	b2a4      	uxth	r4, r4
 8000c8a:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c8e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c92:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000c96:	fb00 f505 	mul.w	r5, r0, r5
 8000c9a:	42a5      	cmp	r5, r4
 8000c9c:	d90a      	bls.n	8000cb4 <__udivmoddi4+0x90>
 8000c9e:	eb1c 0404 	adds.w	r4, ip, r4
 8000ca2:	f100 32ff 	add.w	r2, r0, #4294967295
 8000ca6:	f080 8107 	bcs.w	8000eb8 <__udivmoddi4+0x294>
 8000caa:	42a5      	cmp	r5, r4
 8000cac:	f240 8104 	bls.w	8000eb8 <__udivmoddi4+0x294>
 8000cb0:	4464      	add	r4, ip
 8000cb2:	3802      	subs	r0, #2
 8000cb4:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000cb8:	1b64      	subs	r4, r4, r5
 8000cba:	2100      	movs	r1, #0
 8000cbc:	b11e      	cbz	r6, 8000cc6 <__udivmoddi4+0xa2>
 8000cbe:	40dc      	lsrs	r4, r3
 8000cc0:	2300      	movs	r3, #0
 8000cc2:	e9c6 4300 	strd	r4, r3, [r6]
 8000cc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cca:	428b      	cmp	r3, r1
 8000ccc:	d908      	bls.n	8000ce0 <__udivmoddi4+0xbc>
 8000cce:	2e00      	cmp	r6, #0
 8000cd0:	f000 80ed 	beq.w	8000eae <__udivmoddi4+0x28a>
 8000cd4:	2100      	movs	r1, #0
 8000cd6:	e9c6 0500 	strd	r0, r5, [r6]
 8000cda:	4608      	mov	r0, r1
 8000cdc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ce0:	fab3 f183 	clz	r1, r3
 8000ce4:	2900      	cmp	r1, #0
 8000ce6:	d149      	bne.n	8000d7c <__udivmoddi4+0x158>
 8000ce8:	42ab      	cmp	r3, r5
 8000cea:	d302      	bcc.n	8000cf2 <__udivmoddi4+0xce>
 8000cec:	4282      	cmp	r2, r0
 8000cee:	f200 80f8 	bhi.w	8000ee2 <__udivmoddi4+0x2be>
 8000cf2:	1a84      	subs	r4, r0, r2
 8000cf4:	eb65 0203 	sbc.w	r2, r5, r3
 8000cf8:	2001      	movs	r0, #1
 8000cfa:	4617      	mov	r7, r2
 8000cfc:	2e00      	cmp	r6, #0
 8000cfe:	d0e2      	beq.n	8000cc6 <__udivmoddi4+0xa2>
 8000d00:	e9c6 4700 	strd	r4, r7, [r6]
 8000d04:	e7df      	b.n	8000cc6 <__udivmoddi4+0xa2>
 8000d06:	b902      	cbnz	r2, 8000d0a <__udivmoddi4+0xe6>
 8000d08:	deff      	udf	#255	; 0xff
 8000d0a:	fab2 f382 	clz	r3, r2
 8000d0e:	2b00      	cmp	r3, #0
 8000d10:	f040 8090 	bne.w	8000e34 <__udivmoddi4+0x210>
 8000d14:	1a8a      	subs	r2, r1, r2
 8000d16:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d1a:	fa1f fe8c 	uxth.w	lr, ip
 8000d1e:	2101      	movs	r1, #1
 8000d20:	fbb2 f5f7 	udiv	r5, r2, r7
 8000d24:	fb07 2015 	mls	r0, r7, r5, r2
 8000d28:	0c22      	lsrs	r2, r4, #16
 8000d2a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000d2e:	fb0e f005 	mul.w	r0, lr, r5
 8000d32:	4290      	cmp	r0, r2
 8000d34:	d908      	bls.n	8000d48 <__udivmoddi4+0x124>
 8000d36:	eb1c 0202 	adds.w	r2, ip, r2
 8000d3a:	f105 38ff 	add.w	r8, r5, #4294967295
 8000d3e:	d202      	bcs.n	8000d46 <__udivmoddi4+0x122>
 8000d40:	4290      	cmp	r0, r2
 8000d42:	f200 80cb 	bhi.w	8000edc <__udivmoddi4+0x2b8>
 8000d46:	4645      	mov	r5, r8
 8000d48:	1a12      	subs	r2, r2, r0
 8000d4a:	b2a4      	uxth	r4, r4
 8000d4c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000d50:	fb07 2210 	mls	r2, r7, r0, r2
 8000d54:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d58:	fb0e fe00 	mul.w	lr, lr, r0
 8000d5c:	45a6      	cmp	lr, r4
 8000d5e:	d908      	bls.n	8000d72 <__udivmoddi4+0x14e>
 8000d60:	eb1c 0404 	adds.w	r4, ip, r4
 8000d64:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d68:	d202      	bcs.n	8000d70 <__udivmoddi4+0x14c>
 8000d6a:	45a6      	cmp	lr, r4
 8000d6c:	f200 80bb 	bhi.w	8000ee6 <__udivmoddi4+0x2c2>
 8000d70:	4610      	mov	r0, r2
 8000d72:	eba4 040e 	sub.w	r4, r4, lr
 8000d76:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000d7a:	e79f      	b.n	8000cbc <__udivmoddi4+0x98>
 8000d7c:	f1c1 0720 	rsb	r7, r1, #32
 8000d80:	408b      	lsls	r3, r1
 8000d82:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d86:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d8a:	fa05 f401 	lsl.w	r4, r5, r1
 8000d8e:	fa20 f307 	lsr.w	r3, r0, r7
 8000d92:	40fd      	lsrs	r5, r7
 8000d94:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d98:	4323      	orrs	r3, r4
 8000d9a:	fbb5 f8f9 	udiv	r8, r5, r9
 8000d9e:	fa1f fe8c 	uxth.w	lr, ip
 8000da2:	fb09 5518 	mls	r5, r9, r8, r5
 8000da6:	0c1c      	lsrs	r4, r3, #16
 8000da8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000dac:	fb08 f50e 	mul.w	r5, r8, lr
 8000db0:	42a5      	cmp	r5, r4
 8000db2:	fa02 f201 	lsl.w	r2, r2, r1
 8000db6:	fa00 f001 	lsl.w	r0, r0, r1
 8000dba:	d90b      	bls.n	8000dd4 <__udivmoddi4+0x1b0>
 8000dbc:	eb1c 0404 	adds.w	r4, ip, r4
 8000dc0:	f108 3aff 	add.w	sl, r8, #4294967295
 8000dc4:	f080 8088 	bcs.w	8000ed8 <__udivmoddi4+0x2b4>
 8000dc8:	42a5      	cmp	r5, r4
 8000dca:	f240 8085 	bls.w	8000ed8 <__udivmoddi4+0x2b4>
 8000dce:	f1a8 0802 	sub.w	r8, r8, #2
 8000dd2:	4464      	add	r4, ip
 8000dd4:	1b64      	subs	r4, r4, r5
 8000dd6:	b29d      	uxth	r5, r3
 8000dd8:	fbb4 f3f9 	udiv	r3, r4, r9
 8000ddc:	fb09 4413 	mls	r4, r9, r3, r4
 8000de0:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000de4:	fb03 fe0e 	mul.w	lr, r3, lr
 8000de8:	45a6      	cmp	lr, r4
 8000dea:	d908      	bls.n	8000dfe <__udivmoddi4+0x1da>
 8000dec:	eb1c 0404 	adds.w	r4, ip, r4
 8000df0:	f103 35ff 	add.w	r5, r3, #4294967295
 8000df4:	d26c      	bcs.n	8000ed0 <__udivmoddi4+0x2ac>
 8000df6:	45a6      	cmp	lr, r4
 8000df8:	d96a      	bls.n	8000ed0 <__udivmoddi4+0x2ac>
 8000dfa:	3b02      	subs	r3, #2
 8000dfc:	4464      	add	r4, ip
 8000dfe:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000e02:	fba3 9502 	umull	r9, r5, r3, r2
 8000e06:	eba4 040e 	sub.w	r4, r4, lr
 8000e0a:	42ac      	cmp	r4, r5
 8000e0c:	46c8      	mov	r8, r9
 8000e0e:	46ae      	mov	lr, r5
 8000e10:	d356      	bcc.n	8000ec0 <__udivmoddi4+0x29c>
 8000e12:	d053      	beq.n	8000ebc <__udivmoddi4+0x298>
 8000e14:	b156      	cbz	r6, 8000e2c <__udivmoddi4+0x208>
 8000e16:	ebb0 0208 	subs.w	r2, r0, r8
 8000e1a:	eb64 040e 	sbc.w	r4, r4, lr
 8000e1e:	fa04 f707 	lsl.w	r7, r4, r7
 8000e22:	40ca      	lsrs	r2, r1
 8000e24:	40cc      	lsrs	r4, r1
 8000e26:	4317      	orrs	r7, r2
 8000e28:	e9c6 7400 	strd	r7, r4, [r6]
 8000e2c:	4618      	mov	r0, r3
 8000e2e:	2100      	movs	r1, #0
 8000e30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e34:	f1c3 0120 	rsb	r1, r3, #32
 8000e38:	fa02 fc03 	lsl.w	ip, r2, r3
 8000e3c:	fa20 f201 	lsr.w	r2, r0, r1
 8000e40:	fa25 f101 	lsr.w	r1, r5, r1
 8000e44:	409d      	lsls	r5, r3
 8000e46:	432a      	orrs	r2, r5
 8000e48:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e4c:	fa1f fe8c 	uxth.w	lr, ip
 8000e50:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e54:	fb07 1510 	mls	r5, r7, r0, r1
 8000e58:	0c11      	lsrs	r1, r2, #16
 8000e5a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000e5e:	fb00 f50e 	mul.w	r5, r0, lr
 8000e62:	428d      	cmp	r5, r1
 8000e64:	fa04 f403 	lsl.w	r4, r4, r3
 8000e68:	d908      	bls.n	8000e7c <__udivmoddi4+0x258>
 8000e6a:	eb1c 0101 	adds.w	r1, ip, r1
 8000e6e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e72:	d22f      	bcs.n	8000ed4 <__udivmoddi4+0x2b0>
 8000e74:	428d      	cmp	r5, r1
 8000e76:	d92d      	bls.n	8000ed4 <__udivmoddi4+0x2b0>
 8000e78:	3802      	subs	r0, #2
 8000e7a:	4461      	add	r1, ip
 8000e7c:	1b49      	subs	r1, r1, r5
 8000e7e:	b292      	uxth	r2, r2
 8000e80:	fbb1 f5f7 	udiv	r5, r1, r7
 8000e84:	fb07 1115 	mls	r1, r7, r5, r1
 8000e88:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e8c:	fb05 f10e 	mul.w	r1, r5, lr
 8000e90:	4291      	cmp	r1, r2
 8000e92:	d908      	bls.n	8000ea6 <__udivmoddi4+0x282>
 8000e94:	eb1c 0202 	adds.w	r2, ip, r2
 8000e98:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e9c:	d216      	bcs.n	8000ecc <__udivmoddi4+0x2a8>
 8000e9e:	4291      	cmp	r1, r2
 8000ea0:	d914      	bls.n	8000ecc <__udivmoddi4+0x2a8>
 8000ea2:	3d02      	subs	r5, #2
 8000ea4:	4462      	add	r2, ip
 8000ea6:	1a52      	subs	r2, r2, r1
 8000ea8:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000eac:	e738      	b.n	8000d20 <__udivmoddi4+0xfc>
 8000eae:	4631      	mov	r1, r6
 8000eb0:	4630      	mov	r0, r6
 8000eb2:	e708      	b.n	8000cc6 <__udivmoddi4+0xa2>
 8000eb4:	4639      	mov	r1, r7
 8000eb6:	e6e6      	b.n	8000c86 <__udivmoddi4+0x62>
 8000eb8:	4610      	mov	r0, r2
 8000eba:	e6fb      	b.n	8000cb4 <__udivmoddi4+0x90>
 8000ebc:	4548      	cmp	r0, r9
 8000ebe:	d2a9      	bcs.n	8000e14 <__udivmoddi4+0x1f0>
 8000ec0:	ebb9 0802 	subs.w	r8, r9, r2
 8000ec4:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000ec8:	3b01      	subs	r3, #1
 8000eca:	e7a3      	b.n	8000e14 <__udivmoddi4+0x1f0>
 8000ecc:	4645      	mov	r5, r8
 8000ece:	e7ea      	b.n	8000ea6 <__udivmoddi4+0x282>
 8000ed0:	462b      	mov	r3, r5
 8000ed2:	e794      	b.n	8000dfe <__udivmoddi4+0x1da>
 8000ed4:	4640      	mov	r0, r8
 8000ed6:	e7d1      	b.n	8000e7c <__udivmoddi4+0x258>
 8000ed8:	46d0      	mov	r8, sl
 8000eda:	e77b      	b.n	8000dd4 <__udivmoddi4+0x1b0>
 8000edc:	3d02      	subs	r5, #2
 8000ede:	4462      	add	r2, ip
 8000ee0:	e732      	b.n	8000d48 <__udivmoddi4+0x124>
 8000ee2:	4608      	mov	r0, r1
 8000ee4:	e70a      	b.n	8000cfc <__udivmoddi4+0xd8>
 8000ee6:	4464      	add	r4, ip
 8000ee8:	3802      	subs	r0, #2
 8000eea:	e742      	b.n	8000d72 <__udivmoddi4+0x14e>

08000eec <__aeabi_idiv0>:
 8000eec:	4770      	bx	lr
 8000eee:	bf00      	nop

08000ef0 <PI_Regulator>:

 int16_t U_SVPWM, V_SVPWM, W_SVPWM;
volatile int32_t pozycja_zad;
PI_reg POSTION;
void PI_Regulator()
{
 8000ef0:	b480      	push	{r7}
 8000ef2:	af00      	add	r7, sp, #0



	PI_speed_error = (rpm_speed_zad) - rpm_speed; // dopisac antiwindup oraz limity wartosci aby nie doszlo do przeregulowan
 8000ef4:	4b43      	ldr	r3, [pc, #268]	; (8001004 <PI_Regulator+0x114>)
 8000ef6:	881b      	ldrh	r3, [r3, #0]
 8000ef8:	b21b      	sxth	r3, r3
 8000efa:	461a      	mov	r2, r3
 8000efc:	4b42      	ldr	r3, [pc, #264]	; (8001008 <PI_Regulator+0x118>)
 8000efe:	881b      	ldrh	r3, [r3, #0]
 8000f00:	b21b      	sxth	r3, r3
 8000f02:	1ad3      	subs	r3, r2, r3
 8000f04:	4a41      	ldr	r2, [pc, #260]	; (800100c <PI_Regulator+0x11c>)
 8000f06:	6013      	str	r3, [r2, #0]
	PI_speed_error_sum = PI_speed_error_sum + PI_speed_error; // kierunek nie gra tu roli, regulator dzia�a tak samo
 8000f08:	4b41      	ldr	r3, [pc, #260]	; (8001010 <PI_Regulator+0x120>)
 8000f0a:	681a      	ldr	r2, [r3, #0]
 8000f0c:	4b3f      	ldr	r3, [pc, #252]	; (800100c <PI_Regulator+0x11c>)
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	4413      	add	r3, r2
 8000f12:	4a3f      	ldr	r2, [pc, #252]	; (8001010 <PI_Regulator+0x120>)
 8000f14:	6013      	str	r3, [r2, #0]
/***************PI _STARE********************************/
	if (PI_speed_error_sum > 100000){PI_speed_error_sum  =  100000;}
 8000f16:	4b3e      	ldr	r3, [pc, #248]	; (8001010 <PI_Regulator+0x120>)
 8000f18:	681b      	ldr	r3, [r3, #0]
 8000f1a:	4a3e      	ldr	r2, [pc, #248]	; (8001014 <PI_Regulator+0x124>)
 8000f1c:	4293      	cmp	r3, r2
 8000f1e:	dd03      	ble.n	8000f28 <PI_Regulator+0x38>
 8000f20:	4b3b      	ldr	r3, [pc, #236]	; (8001010 <PI_Regulator+0x120>)
 8000f22:	4a3c      	ldr	r2, [pc, #240]	; (8001014 <PI_Regulator+0x124>)
 8000f24:	601a      	str	r2, [r3, #0]
 8000f26:	e007      	b.n	8000f38 <PI_Regulator+0x48>
	else if (PI_speed_error_sum < -100000){PI_speed_error_sum  = -100000;}
 8000f28:	4b39      	ldr	r3, [pc, #228]	; (8001010 <PI_Regulator+0x120>)
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	4a3a      	ldr	r2, [pc, #232]	; (8001018 <PI_Regulator+0x128>)
 8000f2e:	4293      	cmp	r3, r2
 8000f30:	da02      	bge.n	8000f38 <PI_Regulator+0x48>
 8000f32:	4b37      	ldr	r3, [pc, #220]	; (8001010 <PI_Regulator+0x120>)
 8000f34:	4a38      	ldr	r2, [pc, #224]	; (8001018 <PI_Regulator+0x128>)
 8000f36:	601a      	str	r2, [r3, #0]

	PI_out_regul = Kp * PI_speed_error + Ki * PI_speed_error_sum;
 8000f38:	4b38      	ldr	r3, [pc, #224]	; (800101c <PI_Regulator+0x12c>)
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	4a33      	ldr	r2, [pc, #204]	; (800100c <PI_Regulator+0x11c>)
 8000f3e:	6812      	ldr	r2, [r2, #0]
 8000f40:	fb03 f202 	mul.w	r2, r3, r2
 8000f44:	4b36      	ldr	r3, [pc, #216]	; (8001020 <PI_Regulator+0x130>)
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	4931      	ldr	r1, [pc, #196]	; (8001010 <PI_Regulator+0x120>)
 8000f4a:	6809      	ldr	r1, [r1, #0]
 8000f4c:	fb01 f303 	mul.w	r3, r1, r3
 8000f50:	4413      	add	r3, r2
 8000f52:	4a34      	ldr	r2, [pc, #208]	; (8001024 <PI_Regulator+0x134>)
 8000f54:	6013      	str	r3, [r2, #0]

	if(PI_out_regul > 100000000)PI_out_regul= 100000000;
 8000f56:	4b33      	ldr	r3, [pc, #204]	; (8001024 <PI_Regulator+0x134>)
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	4a33      	ldr	r2, [pc, #204]	; (8001028 <PI_Regulator+0x138>)
 8000f5c:	4293      	cmp	r3, r2
 8000f5e:	dd02      	ble.n	8000f66 <PI_Regulator+0x76>
 8000f60:	4b30      	ldr	r3, [pc, #192]	; (8001024 <PI_Regulator+0x134>)
 8000f62:	4a31      	ldr	r2, [pc, #196]	; (8001028 <PI_Regulator+0x138>)
 8000f64:	601a      	str	r2, [r3, #0]
	if(PI_out_regul < -100000000)PI_out_regul= -100000000;
 8000f66:	4b2f      	ldr	r3, [pc, #188]	; (8001024 <PI_Regulator+0x134>)
 8000f68:	681b      	ldr	r3, [r3, #0]
 8000f6a:	4a30      	ldr	r2, [pc, #192]	; (800102c <PI_Regulator+0x13c>)
 8000f6c:	4293      	cmp	r3, r2
 8000f6e:	da02      	bge.n	8000f76 <PI_Regulator+0x86>
 8000f70:	4b2c      	ldr	r3, [pc, #176]	; (8001024 <PI_Regulator+0x134>)
 8000f72:	4a2e      	ldr	r2, [pc, #184]	; (800102c <PI_Regulator+0x13c>)
 8000f74:	601a      	str	r2, [r3, #0]
	//if(PI_out_regul<0)PI_out_regul=0;
	PI_duty = PI_out_regul/200000;
 8000f76:	4b2b      	ldr	r3, [pc, #172]	; (8001024 <PI_Regulator+0x134>)
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	4a2d      	ldr	r2, [pc, #180]	; (8001030 <PI_Regulator+0x140>)
 8000f7c:	fb82 1203 	smull	r1, r2, r2, r3
 8000f80:	1392      	asrs	r2, r2, #14
 8000f82:	17db      	asrs	r3, r3, #31
 8000f84:	1ad3      	subs	r3, r2, r3
 8000f86:	b29a      	uxth	r2, r3
 8000f88:	4b2a      	ldr	r3, [pc, #168]	; (8001034 <PI_Regulator+0x144>)
 8000f8a:	801a      	strh	r2, [r3, #0]

	if(PI_duty>500)PI_duty=500;
 8000f8c:	4b29      	ldr	r3, [pc, #164]	; (8001034 <PI_Regulator+0x144>)
 8000f8e:	881b      	ldrh	r3, [r3, #0]
 8000f90:	b29b      	uxth	r3, r3
 8000f92:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000f96:	d903      	bls.n	8000fa0 <PI_Regulator+0xb0>
 8000f98:	4b26      	ldr	r3, [pc, #152]	; (8001034 <PI_Regulator+0x144>)
 8000f9a:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000f9e:	801a      	strh	r2, [r3, #0]
	if(PI_duty<=0)PI_duty=0;
 8000fa0:	4b24      	ldr	r3, [pc, #144]	; (8001034 <PI_Regulator+0x144>)
 8000fa2:	881b      	ldrh	r3, [r3, #0]
 8000fa4:	b29b      	uxth	r3, r3
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	d102      	bne.n	8000fb0 <PI_Regulator+0xc0>
 8000faa:	4b22      	ldr	r3, [pc, #136]	; (8001034 <PI_Regulator+0x144>)
 8000fac:	2200      	movs	r2, #0
 8000fae:	801a      	strh	r2, [r3, #0]
 MAGNITUDE=PI_duty;
 8000fb0:	4b20      	ldr	r3, [pc, #128]	; (8001034 <PI_Regulator+0x144>)
 8000fb2:	881b      	ldrh	r3, [r3, #0]
 8000fb4:	b29b      	uxth	r3, r3
 8000fb6:	ee07 3a90 	vmov	s15, r3
 8000fba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000fbe:	4b1e      	ldr	r3, [pc, #120]	; (8001038 <PI_Regulator+0x148>)
 8000fc0:	edc3 7a00 	vstr	s15, [r3]

 //** DO STEROWANIE WEKTOROWEGO **//
 prad_q_zad = (PI_out_regul/200000);
 8000fc4:	4b17      	ldr	r3, [pc, #92]	; (8001024 <PI_Regulator+0x134>)
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	4a19      	ldr	r2, [pc, #100]	; (8001030 <PI_Regulator+0x140>)
 8000fca:	fb82 1203 	smull	r1, r2, r2, r3
 8000fce:	1392      	asrs	r2, r2, #14
 8000fd0:	17db      	asrs	r3, r3, #31
 8000fd2:	1ad3      	subs	r3, r2, r3
 8000fd4:	4a19      	ldr	r2, [pc, #100]	; (800103c <PI_Regulator+0x14c>)
 8000fd6:	6013      	str	r3, [r2, #0]
 if(prad_q_zad>500)prad_q_zad=500;
 8000fd8:	4b18      	ldr	r3, [pc, #96]	; (800103c <PI_Regulator+0x14c>)
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000fe0:	dd03      	ble.n	8000fea <PI_Regulator+0xfa>
 8000fe2:	4b16      	ldr	r3, [pc, #88]	; (800103c <PI_Regulator+0x14c>)
 8000fe4:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000fe8:	601a      	str	r2, [r3, #0]
 if(prad_q_zad<-500)prad_q_zad=-500;
 8000fea:	4b14      	ldr	r3, [pc, #80]	; (800103c <PI_Regulator+0x14c>)
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	f513 7ffa 	cmn.w	r3, #500	; 0x1f4
 8000ff2:	da02      	bge.n	8000ffa <PI_Regulator+0x10a>
 8000ff4:	4b11      	ldr	r3, [pc, #68]	; (800103c <PI_Regulator+0x14c>)
 8000ff6:	4a12      	ldr	r2, [pc, #72]	; (8001040 <PI_Regulator+0x150>)
 8000ff8:	601a      	str	r2, [r3, #0]


}
 8000ffa:	bf00      	nop
 8000ffc:	46bd      	mov	sp, r7
 8000ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001002:	4770      	bx	lr
 8001004:	20000020 	.word	0x20000020
 8001008:	200000ca 	.word	0x200000ca
 800100c:	20000068 	.word	0x20000068
 8001010:	2000006c 	.word	0x2000006c
 8001014:	000186a0 	.word	0x000186a0
 8001018:	fffe7960 	.word	0xfffe7960
 800101c:	20000004 	.word	0x20000004
 8001020:	20000008 	.word	0x20000008
 8001024:	20000074 	.word	0x20000074
 8001028:	05f5e100 	.word	0x05f5e100
 800102c:	fa0a1f00 	.word	0xfa0a1f00
 8001030:	14f8b589 	.word	0x14f8b589
 8001034:	2000007a 	.word	0x2000007a
 8001038:	2000000c 	.word	0x2000000c
 800103c:	20000094 	.word	0x20000094
 8001040:	fffffe0c 	.word	0xfffffe0c

08001044 <SPWM_modulacja>:
		//SINUS_V=+(0.2*sin((PI*((3*Electric_Angle)+240))/180)*PI_duty);
		//SINUS_W=+(0.2*sin((PI*((3*Electric_Angle)+120))/180)*PI_duty);

}
void SPWM_modulacja()
{
 8001044:	b480      	push	{r7}
 8001046:	af00      	add	r7, sp, #0

	if(FOC_ON==1)
 8001048:	4b0c      	ldr	r3, [pc, #48]	; (800107c <SPWM_modulacja+0x38>)
 800104a:	781b      	ldrb	r3, [r3, #0]
 800104c:	b2db      	uxtb	r3, r3
 800104e:	2b01      	cmp	r3, #1
 8001050:	d10e      	bne.n	8001070 <SPWM_modulacja+0x2c>
	{
		TIM1->CCR1 = PWM_U;
 8001052:	4b0b      	ldr	r3, [pc, #44]	; (8001080 <SPWM_modulacja+0x3c>)
 8001054:	881b      	ldrh	r3, [r3, #0]
 8001056:	b29a      	uxth	r2, r3
 8001058:	4b0a      	ldr	r3, [pc, #40]	; (8001084 <SPWM_modulacja+0x40>)
 800105a:	635a      	str	r2, [r3, #52]	; 0x34
		TIM1->CCR2 = PWM_V;
 800105c:	4b0a      	ldr	r3, [pc, #40]	; (8001088 <SPWM_modulacja+0x44>)
 800105e:	881b      	ldrh	r3, [r3, #0]
 8001060:	b29a      	uxth	r2, r3
 8001062:	4b08      	ldr	r3, [pc, #32]	; (8001084 <SPWM_modulacja+0x40>)
 8001064:	639a      	str	r2, [r3, #56]	; 0x38
		TIM1->CCR3 = PWM_W;
 8001066:	4b09      	ldr	r3, [pc, #36]	; (800108c <SPWM_modulacja+0x48>)
 8001068:	881b      	ldrh	r3, [r3, #0]
 800106a:	b29a      	uxth	r2, r3
 800106c:	4b05      	ldr	r3, [pc, #20]	; (8001084 <SPWM_modulacja+0x40>)
 800106e:	63da      	str	r2, [r3, #60]	; 0x3c
	}

}
 8001070:	bf00      	nop
 8001072:	46bd      	mov	sp, r7
 8001074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001078:	4770      	bx	lr
 800107a:	bf00      	nop
 800107c:	20000000 	.word	0x20000000
 8001080:	200000c0 	.word	0x200000c0
 8001084:	40012c00 	.word	0x40012c00
 8001088:	200000c2 	.word	0x200000c2
 800108c:	200000c4 	.word	0x200000c4

08001090 <Iqd_current_reg>:

void Iqd_current_reg() // DLA PRACY GENERATOROWEJ ZNAK "-" out regul DLA PRACY SILNIKOWEJ ZNAK "-" przy prad zmierzony// iq out max 500->7A
{
 8001090:	b480      	push	{r7}
 8001092:	af00      	add	r7, sp, #0
PI_prad_q_uchyb=prad_q_zad-(prad_q);
 8001094:	4b63      	ldr	r3, [pc, #396]	; (8001224 <Iqd_current_reg+0x194>)
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	4a63      	ldr	r2, [pc, #396]	; (8001228 <Iqd_current_reg+0x198>)
 800109a:	8812      	ldrh	r2, [r2, #0]
 800109c:	b212      	sxth	r2, r2
 800109e:	1a9b      	subs	r3, r3, r2
 80010a0:	4a62      	ldr	r2, [pc, #392]	; (800122c <Iqd_current_reg+0x19c>)
 80010a2:	6013      	str	r3, [r2, #0]
PI_prad_q_sumuchyb=PI_prad_q_sumuchyb+PI_prad_q_uchyb;
 80010a4:	4b62      	ldr	r3, [pc, #392]	; (8001230 <Iqd_current_reg+0x1a0>)
 80010a6:	681a      	ldr	r2, [r3, #0]
 80010a8:	4b60      	ldr	r3, [pc, #384]	; (800122c <Iqd_current_reg+0x19c>)
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	4413      	add	r3, r2
 80010ae:	4a60      	ldr	r2, [pc, #384]	; (8001230 <Iqd_current_reg+0x1a0>)
 80010b0:	6013      	str	r3, [r2, #0]
if(PI_prad_q_sumuchyb>500000)PI_prad_q_sumuchyb=500000;
 80010b2:	4b5f      	ldr	r3, [pc, #380]	; (8001230 <Iqd_current_reg+0x1a0>)
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	4a5f      	ldr	r2, [pc, #380]	; (8001234 <Iqd_current_reg+0x1a4>)
 80010b8:	4293      	cmp	r3, r2
 80010ba:	dd02      	ble.n	80010c2 <Iqd_current_reg+0x32>
 80010bc:	4b5c      	ldr	r3, [pc, #368]	; (8001230 <Iqd_current_reg+0x1a0>)
 80010be:	4a5d      	ldr	r2, [pc, #372]	; (8001234 <Iqd_current_reg+0x1a4>)
 80010c0:	601a      	str	r2, [r3, #0]
if(PI_prad_q_sumuchyb<-500000)PI_prad_q_sumuchyb=-500000;
 80010c2:	4b5b      	ldr	r3, [pc, #364]	; (8001230 <Iqd_current_reg+0x1a0>)
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	4a5c      	ldr	r2, [pc, #368]	; (8001238 <Iqd_current_reg+0x1a8>)
 80010c8:	4293      	cmp	r3, r2
 80010ca:	da02      	bge.n	80010d2 <Iqd_current_reg+0x42>
 80010cc:	4b58      	ldr	r3, [pc, #352]	; (8001230 <Iqd_current_reg+0x1a0>)
 80010ce:	4a5a      	ldr	r2, [pc, #360]	; (8001238 <Iqd_current_reg+0x1a8>)
 80010d0:	601a      	str	r2, [r3, #0]
KI_OUT=PI_prad_q_KI*PI_prad_q_sumuchyb;
 80010d2:	4b57      	ldr	r3, [pc, #348]	; (8001230 <Iqd_current_reg+0x1a0>)
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	ee07 3a90 	vmov	s15, r3
 80010da:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80010de:	4b57      	ldr	r3, [pc, #348]	; (800123c <Iqd_current_reg+0x1ac>)
 80010e0:	edd3 7a00 	vldr	s15, [r3]
 80010e4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80010e8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80010ec:	ee17 2a90 	vmov	r2, s15
 80010f0:	4b53      	ldr	r3, [pc, #332]	; (8001240 <Iqd_current_reg+0x1b0>)
 80010f2:	601a      	str	r2, [r3, #0]
if(KI_OUT>500000000)KI_OUT=500000000;
 80010f4:	4b52      	ldr	r3, [pc, #328]	; (8001240 <Iqd_current_reg+0x1b0>)
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	4a52      	ldr	r2, [pc, #328]	; (8001244 <Iqd_current_reg+0x1b4>)
 80010fa:	4293      	cmp	r3, r2
 80010fc:	dd02      	ble.n	8001104 <Iqd_current_reg+0x74>
 80010fe:	4b50      	ldr	r3, [pc, #320]	; (8001240 <Iqd_current_reg+0x1b0>)
 8001100:	4a50      	ldr	r2, [pc, #320]	; (8001244 <Iqd_current_reg+0x1b4>)
 8001102:	601a      	str	r2, [r3, #0]
if(KI_OUT<-500000000)KI_OUT=-500000000;
 8001104:	4b4e      	ldr	r3, [pc, #312]	; (8001240 <Iqd_current_reg+0x1b0>)
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	4a4f      	ldr	r2, [pc, #316]	; (8001248 <Iqd_current_reg+0x1b8>)
 800110a:	4293      	cmp	r3, r2
 800110c:	da02      	bge.n	8001114 <Iqd_current_reg+0x84>
 800110e:	4b4c      	ldr	r3, [pc, #304]	; (8001240 <Iqd_current_reg+0x1b0>)
 8001110:	4a4d      	ldr	r2, [pc, #308]	; (8001248 <Iqd_current_reg+0x1b8>)
 8001112:	601a      	str	r2, [r3, #0]

PI_VQ_out=(PI_prad_q_KP*PI_prad_q_uchyb+KI_OUT);
 8001114:	4b45      	ldr	r3, [pc, #276]	; (800122c <Iqd_current_reg+0x19c>)
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	ee07 3a90 	vmov	s15, r3
 800111c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001120:	4b4a      	ldr	r3, [pc, #296]	; (800124c <Iqd_current_reg+0x1bc>)
 8001122:	edd3 7a00 	vldr	s15, [r3]
 8001126:	ee27 7a27 	vmul.f32	s14, s14, s15
 800112a:	4b45      	ldr	r3, [pc, #276]	; (8001240 <Iqd_current_reg+0x1b0>)
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	ee07 3a90 	vmov	s15, r3
 8001132:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001136:	ee77 7a27 	vadd.f32	s15, s14, s15
 800113a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800113e:	ee17 2a90 	vmov	r2, s15
 8001142:	4b43      	ldr	r3, [pc, #268]	; (8001250 <Iqd_current_reg+0x1c0>)
 8001144:	601a      	str	r2, [r3, #0]

if(PI_VQ_out> 500000000)PI_VQ_out = 500000000;
 8001146:	4b42      	ldr	r3, [pc, #264]	; (8001250 <Iqd_current_reg+0x1c0>)
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	4a3e      	ldr	r2, [pc, #248]	; (8001244 <Iqd_current_reg+0x1b4>)
 800114c:	4293      	cmp	r3, r2
 800114e:	dd02      	ble.n	8001156 <Iqd_current_reg+0xc6>
 8001150:	4b3f      	ldr	r3, [pc, #252]	; (8001250 <Iqd_current_reg+0x1c0>)
 8001152:	4a3c      	ldr	r2, [pc, #240]	; (8001244 <Iqd_current_reg+0x1b4>)
 8001154:	601a      	str	r2, [r3, #0]
if(PI_VQ_out< -500000000)PI_VQ_out = -500000000;
 8001156:	4b3e      	ldr	r3, [pc, #248]	; (8001250 <Iqd_current_reg+0x1c0>)
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	4a3b      	ldr	r2, [pc, #236]	; (8001248 <Iqd_current_reg+0x1b8>)
 800115c:	4293      	cmp	r3, r2
 800115e:	da02      	bge.n	8001166 <Iqd_current_reg+0xd6>
 8001160:	4b3b      	ldr	r3, [pc, #236]	; (8001250 <Iqd_current_reg+0x1c0>)
 8001162:	4a39      	ldr	r2, [pc, #228]	; (8001248 <Iqd_current_reg+0x1b8>)
 8001164:	601a      	str	r2, [r3, #0]

PI_prad_d_uchyb=prad_d_zad-(prad_d);
 8001166:	4b3b      	ldr	r3, [pc, #236]	; (8001254 <Iqd_current_reg+0x1c4>)
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	4a3b      	ldr	r2, [pc, #236]	; (8001258 <Iqd_current_reg+0x1c8>)
 800116c:	8812      	ldrh	r2, [r2, #0]
 800116e:	b212      	sxth	r2, r2
 8001170:	1a9b      	subs	r3, r3, r2
 8001172:	4a3a      	ldr	r2, [pc, #232]	; (800125c <Iqd_current_reg+0x1cc>)
 8001174:	6013      	str	r3, [r2, #0]
PI_prad_d_sumuchyb=PI_prad_d_sumuchyb+PI_prad_d_uchyb;
 8001176:	4b3a      	ldr	r3, [pc, #232]	; (8001260 <Iqd_current_reg+0x1d0>)
 8001178:	681a      	ldr	r2, [r3, #0]
 800117a:	4b38      	ldr	r3, [pc, #224]	; (800125c <Iqd_current_reg+0x1cc>)
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	4413      	add	r3, r2
 8001180:	4a37      	ldr	r2, [pc, #220]	; (8001260 <Iqd_current_reg+0x1d0>)
 8001182:	6013      	str	r3, [r2, #0]
KI_OUT_d =PI_prad_d_KI*PI_prad_d_sumuchyb;
 8001184:	4b36      	ldr	r3, [pc, #216]	; (8001260 <Iqd_current_reg+0x1d0>)
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	ee07 3a90 	vmov	s15, r3
 800118c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001190:	4b34      	ldr	r3, [pc, #208]	; (8001264 <Iqd_current_reg+0x1d4>)
 8001192:	edd3 7a00 	vldr	s15, [r3]
 8001196:	ee67 7a27 	vmul.f32	s15, s14, s15
 800119a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800119e:	ee17 2a90 	vmov	r2, s15
 80011a2:	4b31      	ldr	r3, [pc, #196]	; (8001268 <Iqd_current_reg+0x1d8>)
 80011a4:	601a      	str	r2, [r3, #0]
if(KI_OUT_d>50000000)KI_OUT_d=50000000;
 80011a6:	4b30      	ldr	r3, [pc, #192]	; (8001268 <Iqd_current_reg+0x1d8>)
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	4a30      	ldr	r2, [pc, #192]	; (800126c <Iqd_current_reg+0x1dc>)
 80011ac:	4293      	cmp	r3, r2
 80011ae:	dd02      	ble.n	80011b6 <Iqd_current_reg+0x126>
 80011b0:	4b2d      	ldr	r3, [pc, #180]	; (8001268 <Iqd_current_reg+0x1d8>)
 80011b2:	4a2e      	ldr	r2, [pc, #184]	; (800126c <Iqd_current_reg+0x1dc>)
 80011b4:	601a      	str	r2, [r3, #0]
if(KI_OUT_d<-50000000)KI_OUT_d=-50000000;
 80011b6:	4b2c      	ldr	r3, [pc, #176]	; (8001268 <Iqd_current_reg+0x1d8>)
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	4a2d      	ldr	r2, [pc, #180]	; (8001270 <Iqd_current_reg+0x1e0>)
 80011bc:	4293      	cmp	r3, r2
 80011be:	da02      	bge.n	80011c6 <Iqd_current_reg+0x136>
 80011c0:	4b29      	ldr	r3, [pc, #164]	; (8001268 <Iqd_current_reg+0x1d8>)
 80011c2:	4a2b      	ldr	r2, [pc, #172]	; (8001270 <Iqd_current_reg+0x1e0>)
 80011c4:	601a      	str	r2, [r3, #0]

PI_VD_out=(PI_prad_d_KP*PI_prad_d_uchyb+KI_OUT_d);// wyrzucono minus 11:45 05.09
 80011c6:	4b25      	ldr	r3, [pc, #148]	; (800125c <Iqd_current_reg+0x1cc>)
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	ee07 3a90 	vmov	s15, r3
 80011ce:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80011d2:	4b28      	ldr	r3, [pc, #160]	; (8001274 <Iqd_current_reg+0x1e4>)
 80011d4:	edd3 7a00 	vldr	s15, [r3]
 80011d8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80011dc:	4b22      	ldr	r3, [pc, #136]	; (8001268 <Iqd_current_reg+0x1d8>)
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	ee07 3a90 	vmov	s15, r3
 80011e4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80011e8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80011ec:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80011f0:	ee17 2a90 	vmov	r2, s15
 80011f4:	4b20      	ldr	r3, [pc, #128]	; (8001278 <Iqd_current_reg+0x1e8>)
 80011f6:	601a      	str	r2, [r3, #0]

if(PI_VD_out> 500000000)PI_VD_out = 500000000;
 80011f8:	4b1f      	ldr	r3, [pc, #124]	; (8001278 <Iqd_current_reg+0x1e8>)
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	4a11      	ldr	r2, [pc, #68]	; (8001244 <Iqd_current_reg+0x1b4>)
 80011fe:	4293      	cmp	r3, r2
 8001200:	dd02      	ble.n	8001208 <Iqd_current_reg+0x178>
 8001202:	4b1d      	ldr	r3, [pc, #116]	; (8001278 <Iqd_current_reg+0x1e8>)
 8001204:	4a0f      	ldr	r2, [pc, #60]	; (8001244 <Iqd_current_reg+0x1b4>)
 8001206:	601a      	str	r2, [r3, #0]
if(PI_VD_out< -500000000)PI_VD_out = -500000000;
 8001208:	4b1b      	ldr	r3, [pc, #108]	; (8001278 <Iqd_current_reg+0x1e8>)
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	4a0e      	ldr	r2, [pc, #56]	; (8001248 <Iqd_current_reg+0x1b8>)
 800120e:	4293      	cmp	r3, r2
 8001210:	da02      	bge.n	8001218 <Iqd_current_reg+0x188>
 8001212:	4b19      	ldr	r3, [pc, #100]	; (8001278 <Iqd_current_reg+0x1e8>)
 8001214:	4a0c      	ldr	r2, [pc, #48]	; (8001248 <Iqd_current_reg+0x1b8>)
 8001216:	601a      	str	r2, [r3, #0]
}
 8001218:	bf00      	nop
 800121a:	46bd      	mov	sp, r7
 800121c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001220:	4770      	bx	lr
 8001222:	bf00      	nop
 8001224:	20000094 	.word	0x20000094
 8001228:	200000a8 	.word	0x200000a8
 800122c:	20000080 	.word	0x20000080
 8001230:	20000088 	.word	0x20000088
 8001234:	0007a120 	.word	0x0007a120
 8001238:	fff85ee0 	.word	0xfff85ee0
 800123c:	2000001c 	.word	0x2000001c
 8001240:	2000009c 	.word	0x2000009c
 8001244:	1dcd6500 	.word	0x1dcd6500
 8001248:	e2329b00 	.word	0xe2329b00
 800124c:	20000018 	.word	0x20000018
 8001250:	20000090 	.word	0x20000090
 8001254:	20000098 	.word	0x20000098
 8001258:	200000aa 	.word	0x200000aa
 800125c:	20000084 	.word	0x20000084
 8001260:	200000a4 	.word	0x200000a4
 8001264:	20000014 	.word	0x20000014
 8001268:	200000a0 	.word	0x200000a0
 800126c:	02faf080 	.word	0x02faf080
 8001270:	fd050f80 	.word	0xfd050f80
 8001274:	20000010 	.word	0x20000010
 8001278:	2000008c 	.word	0x2000008c

0800127c <Pozycja>:
Volt_out=PI_volt_out/100000;
if(Volt_out<0)Volt_out=0;
    MAGNITUDE=500-(Volt_out);
}
int16_t Pozycja(uint16_t pozycja_ak,uint16_t pozycja_pop, int32_t *poz_calk, uint16_t kier)
{
 800127c:	b480      	push	{r7}
 800127e:	b087      	sub	sp, #28
 8001280:	af00      	add	r7, sp, #0
 8001282:	60ba      	str	r2, [r7, #8]
 8001284:	461a      	mov	r2, r3
 8001286:	4603      	mov	r3, r0
 8001288:	81fb      	strh	r3, [r7, #14]
 800128a:	460b      	mov	r3, r1
 800128c:	81bb      	strh	r3, [r7, #12]
 800128e:	4613      	mov	r3, r2
 8001290:	80fb      	strh	r3, [r7, #6]
	int16_t  delta_poz, delta_2;
delta_2=pozycja_pop-pozycja_ak;
 8001292:	89ba      	ldrh	r2, [r7, #12]
 8001294:	89fb      	ldrh	r3, [r7, #14]
 8001296:	1ad3      	subs	r3, r2, r3
 8001298:	b29b      	uxth	r3, r3
 800129a:	82bb      	strh	r3, [r7, #20]
	if(abs(pozycja_pop-pozycja_ak)>20)
 800129c:	89ba      	ldrh	r2, [r7, #12]
 800129e:	89fb      	ldrh	r3, [r7, #14]
 80012a0:	1ad3      	subs	r3, r2, r3
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	bfb8      	it	lt
 80012a6:	425b      	neglt	r3, r3
 80012a8:	2b14      	cmp	r3, #20
 80012aa:	dd41      	ble.n	8001330 <Pozycja+0xb4>
	{
		if(pozycja_pop>pozycja_ak&&kier==16)
 80012ac:	89ba      	ldrh	r2, [r7, #12]
 80012ae:	89fb      	ldrh	r3, [r7, #14]
 80012b0:	429a      	cmp	r2, r3
 80012b2:	d908      	bls.n	80012c6 <Pozycja+0x4a>
 80012b4:	88fb      	ldrh	r3, [r7, #6]
 80012b6:	2b10      	cmp	r3, #16
 80012b8:	d105      	bne.n	80012c6 <Pozycja+0x4a>
			{
				delta_poz = -(pozycja_pop-pozycja_ak);
 80012ba:	89fa      	ldrh	r2, [r7, #14]
 80012bc:	89bb      	ldrh	r3, [r7, #12]
 80012be:	1ad3      	subs	r3, r2, r3
 80012c0:	b29b      	uxth	r3, r3
 80012c2:	82fb      	strh	r3, [r7, #22]
 80012c4:	e02d      	b.n	8001322 <Pozycja+0xa6>
			}
		else if(pozycja_pop<pozycja_ak&&kier==16)
 80012c6:	89ba      	ldrh	r2, [r7, #12]
 80012c8:	89fb      	ldrh	r3, [r7, #14]
 80012ca:	429a      	cmp	r2, r3
 80012cc:	d20c      	bcs.n	80012e8 <Pozycja+0x6c>
 80012ce:	88fb      	ldrh	r3, [r7, #6]
 80012d0:	2b10      	cmp	r3, #16
 80012d2:	d109      	bne.n	80012e8 <Pozycja+0x6c>
			{
				delta_poz = -((16385-pozycja_ak)+pozycja_pop);
 80012d4:	89fa      	ldrh	r2, [r7, #14]
 80012d6:	89bb      	ldrh	r3, [r7, #12]
 80012d8:	1ad3      	subs	r3, r2, r3
 80012da:	b29b      	uxth	r3, r3
 80012dc:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 80012e0:	3b01      	subs	r3, #1
 80012e2:	b29b      	uxth	r3, r3
 80012e4:	82fb      	strh	r3, [r7, #22]
 80012e6:	e01c      	b.n	8001322 <Pozycja+0xa6>
			}
		else if(pozycja_pop>pozycja_ak&&kier==0)
 80012e8:	89ba      	ldrh	r2, [r7, #12]
 80012ea:	89fb      	ldrh	r3, [r7, #14]
 80012ec:	429a      	cmp	r2, r3
 80012ee:	d90c      	bls.n	800130a <Pozycja+0x8e>
 80012f0:	88fb      	ldrh	r3, [r7, #6]
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d109      	bne.n	800130a <Pozycja+0x8e>
			{
				delta_poz = (16385-pozycja_pop)+pozycja_ak;
 80012f6:	89fa      	ldrh	r2, [r7, #14]
 80012f8:	89bb      	ldrh	r3, [r7, #12]
 80012fa:	1ad3      	subs	r3, r2, r3
 80012fc:	b29b      	uxth	r3, r3
 80012fe:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8001302:	3301      	adds	r3, #1
 8001304:	b29b      	uxth	r3, r3
 8001306:	82fb      	strh	r3, [r7, #22]
 8001308:	e00b      	b.n	8001322 <Pozycja+0xa6>
			}
		else if(pozycja_pop<pozycja_ak&&kier==0)
 800130a:	89ba      	ldrh	r2, [r7, #12]
 800130c:	89fb      	ldrh	r3, [r7, #14]
 800130e:	429a      	cmp	r2, r3
 8001310:	d207      	bcs.n	8001322 <Pozycja+0xa6>
 8001312:	88fb      	ldrh	r3, [r7, #6]
 8001314:	2b00      	cmp	r3, #0
 8001316:	d104      	bne.n	8001322 <Pozycja+0xa6>
			{
				delta_poz = pozycja_ak-pozycja_pop;
 8001318:	89fa      	ldrh	r2, [r7, #14]
 800131a:	89bb      	ldrh	r3, [r7, #12]
 800131c:	1ad3      	subs	r3, r2, r3
 800131e:	b29b      	uxth	r3, r3
 8001320:	82fb      	strh	r3, [r7, #22]
			}


		*poz_calk+=delta_poz;
 8001322:	68bb      	ldr	r3, [r7, #8]
 8001324:	681a      	ldr	r2, [r3, #0]
 8001326:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800132a:	441a      	add	r2, r3
 800132c:	68bb      	ldr	r3, [r7, #8]
 800132e:	601a      	str	r2, [r3, #0]

	}
	return delta_poz;
 8001330:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
}
 8001334:	4618      	mov	r0, r3
 8001336:	371c      	adds	r7, #28
 8001338:	46bd      	mov	sp, r7
 800133a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800133e:	4770      	bx	lr

08001340 <SVPWM_modulacja>:
	return delta_enc;


}
void SVPWM_modulacja(int32_t u_alpha, int32_t u_beta, int16_t *U_SVM,int16_t *V_SVM, int16_t *W_SVM)
{
 8001340:	b5b0      	push	{r4, r5, r7, lr}
 8001342:	b08c      	sub	sp, #48	; 0x30
 8001344:	af00      	add	r7, sp, #0
 8001346:	60f8      	str	r0, [r7, #12]
 8001348:	60b9      	str	r1, [r7, #8]
 800134a:	607a      	str	r2, [r7, #4]
 800134c:	603b      	str	r3, [r7, #0]

	// U_alpha i beta to zmienne in z transformacji, *x_SVM to pointery na wrzucenie zmiennych out
int32_t u, v, w, T1, T2, T0;
uint8_t sektor;

		u = (u_alpha*1.73-u_beta)*0.5;
 800134e:	68f8      	ldr	r0, [r7, #12]
 8001350:	f7ff f8b4 	bl	80004bc <__aeabi_i2d>
 8001354:	a3b2      	add	r3, pc, #712	; (adr r3, 8001620 <SVPWM_modulacja+0x2e0>)
 8001356:	e9d3 2300 	ldrd	r2, r3, [r3]
 800135a:	f7ff f919 	bl	8000590 <__aeabi_dmul>
 800135e:	4602      	mov	r2, r0
 8001360:	460b      	mov	r3, r1
 8001362:	4614      	mov	r4, r2
 8001364:	461d      	mov	r5, r3
 8001366:	68b8      	ldr	r0, [r7, #8]
 8001368:	f7ff f8a8 	bl	80004bc <__aeabi_i2d>
 800136c:	4602      	mov	r2, r0
 800136e:	460b      	mov	r3, r1
 8001370:	4620      	mov	r0, r4
 8001372:	4629      	mov	r1, r5
 8001374:	f7fe ff54 	bl	8000220 <__aeabi_dsub>
 8001378:	4602      	mov	r2, r0
 800137a:	460b      	mov	r3, r1
 800137c:	4610      	mov	r0, r2
 800137e:	4619      	mov	r1, r3
 8001380:	f04f 0200 	mov.w	r2, #0
 8001384:	4ba8      	ldr	r3, [pc, #672]	; (8001628 <SVPWM_modulacja+0x2e8>)
 8001386:	f7ff f903 	bl	8000590 <__aeabi_dmul>
 800138a:	4602      	mov	r2, r0
 800138c:	460b      	mov	r3, r1
 800138e:	4610      	mov	r0, r2
 8001390:	4619      	mov	r1, r3
 8001392:	f7ff fb97 	bl	8000ac4 <__aeabi_d2iz>
 8001396:	4603      	mov	r3, r0
 8001398:	62bb      	str	r3, [r7, #40]	; 0x28
		v = u_beta;
 800139a:	68bb      	ldr	r3, [r7, #8]
 800139c:	627b      	str	r3, [r7, #36]	; 0x24
		w = (-u_alpha*1.73-u_beta)*0.5;
 800139e:	68fb      	ldr	r3, [r7, #12]
 80013a0:	425b      	negs	r3, r3
 80013a2:	4618      	mov	r0, r3
 80013a4:	f7ff f88a 	bl	80004bc <__aeabi_i2d>
 80013a8:	a39d      	add	r3, pc, #628	; (adr r3, 8001620 <SVPWM_modulacja+0x2e0>)
 80013aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013ae:	f7ff f8ef 	bl	8000590 <__aeabi_dmul>
 80013b2:	4602      	mov	r2, r0
 80013b4:	460b      	mov	r3, r1
 80013b6:	4614      	mov	r4, r2
 80013b8:	461d      	mov	r5, r3
 80013ba:	68b8      	ldr	r0, [r7, #8]
 80013bc:	f7ff f87e 	bl	80004bc <__aeabi_i2d>
 80013c0:	4602      	mov	r2, r0
 80013c2:	460b      	mov	r3, r1
 80013c4:	4620      	mov	r0, r4
 80013c6:	4629      	mov	r1, r5
 80013c8:	f7fe ff2a 	bl	8000220 <__aeabi_dsub>
 80013cc:	4602      	mov	r2, r0
 80013ce:	460b      	mov	r3, r1
 80013d0:	4610      	mov	r0, r2
 80013d2:	4619      	mov	r1, r3
 80013d4:	f04f 0200 	mov.w	r2, #0
 80013d8:	4b93      	ldr	r3, [pc, #588]	; (8001628 <SVPWM_modulacja+0x2e8>)
 80013da:	f7ff f8d9 	bl	8000590 <__aeabi_dmul>
 80013de:	4602      	mov	r2, r0
 80013e0:	460b      	mov	r3, r1
 80013e2:	4610      	mov	r0, r2
 80013e4:	4619      	mov	r1, r3
 80013e6:	f7ff fb6d 	bl	8000ac4 <__aeabi_d2iz>
 80013ea:	4603      	mov	r3, r0
 80013ec:	623b      	str	r3, [r7, #32]

		if(u>0&&v>0&&w<0)
 80013ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	dd09      	ble.n	8001408 <SVPWM_modulacja+0xc8>
 80013f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	dd06      	ble.n	8001408 <SVPWM_modulacja+0xc8>
 80013fa:	6a3b      	ldr	r3, [r7, #32]
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	da03      	bge.n	8001408 <SVPWM_modulacja+0xc8>
			{
			sektor=1;
 8001400:	2301      	movs	r3, #1
 8001402:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8001406:	e03f      	b.n	8001488 <SVPWM_modulacja+0x148>
			}
		else if(v>0&&w<0&&u<0)
 8001408:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800140a:	2b00      	cmp	r3, #0
 800140c:	dd09      	ble.n	8001422 <SVPWM_modulacja+0xe2>
 800140e:	6a3b      	ldr	r3, [r7, #32]
 8001410:	2b00      	cmp	r3, #0
 8001412:	da06      	bge.n	8001422 <SVPWM_modulacja+0xe2>
 8001414:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001416:	2b00      	cmp	r3, #0
 8001418:	da03      	bge.n	8001422 <SVPWM_modulacja+0xe2>
			{
			sektor=2;
 800141a:	2302      	movs	r3, #2
 800141c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8001420:	e032      	b.n	8001488 <SVPWM_modulacja+0x148>
			}
		else if(v>0&&w>0&&u<0)
 8001422:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001424:	2b00      	cmp	r3, #0
 8001426:	dd09      	ble.n	800143c <SVPWM_modulacja+0xfc>
 8001428:	6a3b      	ldr	r3, [r7, #32]
 800142a:	2b00      	cmp	r3, #0
 800142c:	dd06      	ble.n	800143c <SVPWM_modulacja+0xfc>
 800142e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001430:	2b00      	cmp	r3, #0
 8001432:	da03      	bge.n	800143c <SVPWM_modulacja+0xfc>
			{
			sektor=3;
 8001434:	2303      	movs	r3, #3
 8001436:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800143a:	e025      	b.n	8001488 <SVPWM_modulacja+0x148>
			}
		else if(v<0&&w>0&&u<0)
 800143c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800143e:	2b00      	cmp	r3, #0
 8001440:	da09      	bge.n	8001456 <SVPWM_modulacja+0x116>
 8001442:	6a3b      	ldr	r3, [r7, #32]
 8001444:	2b00      	cmp	r3, #0
 8001446:	dd06      	ble.n	8001456 <SVPWM_modulacja+0x116>
 8001448:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800144a:	2b00      	cmp	r3, #0
 800144c:	da03      	bge.n	8001456 <SVPWM_modulacja+0x116>
			{
			sektor=4;
 800144e:	2304      	movs	r3, #4
 8001450:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8001454:	e018      	b.n	8001488 <SVPWM_modulacja+0x148>
			}
		else if(v<0&&w>0&&u>0)
 8001456:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001458:	2b00      	cmp	r3, #0
 800145a:	da09      	bge.n	8001470 <SVPWM_modulacja+0x130>
 800145c:	6a3b      	ldr	r3, [r7, #32]
 800145e:	2b00      	cmp	r3, #0
 8001460:	dd06      	ble.n	8001470 <SVPWM_modulacja+0x130>
 8001462:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001464:	2b00      	cmp	r3, #0
 8001466:	dd03      	ble.n	8001470 <SVPWM_modulacja+0x130>
			{
			sektor=5;
 8001468:	2305      	movs	r3, #5
 800146a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800146e:	e00b      	b.n	8001488 <SVPWM_modulacja+0x148>
			}
		else if(v<0&&w<0&&u>0)
 8001470:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001472:	2b00      	cmp	r3, #0
 8001474:	da08      	bge.n	8001488 <SVPWM_modulacja+0x148>
 8001476:	6a3b      	ldr	r3, [r7, #32]
 8001478:	2b00      	cmp	r3, #0
 800147a:	da05      	bge.n	8001488 <SVPWM_modulacja+0x148>
 800147c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800147e:	2b00      	cmp	r3, #0
 8001480:	dd02      	ble.n	8001488 <SVPWM_modulacja+0x148>
			{
			sektor=6;
 8001482:	2306      	movs	r3, #6
 8001484:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			}

		switch(sektor)
 8001488:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800148c:	3b01      	subs	r3, #1
 800148e:	2b05      	cmp	r3, #5
 8001490:	f200 8238 	bhi.w	8001904 <SVPWM_modulacja+0x5c4>
 8001494:	a201      	add	r2, pc, #4	; (adr r2, 800149c <SVPWM_modulacja+0x15c>)
 8001496:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800149a:	bf00      	nop
 800149c:	080014b5 	.word	0x080014b5
 80014a0:	08001569 	.word	0x08001569
 80014a4:	0800162d 	.word	0x0800162d
 80014a8:	080016e1 	.word	0x080016e1
 80014ac:	08001799 	.word	0x08001799
 80014b0:	0800184d 	.word	0x0800184d
		{
		case 1:	T1=u;
 80014b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80014b6:	61fb      	str	r3, [r7, #28]
				T2=v;
 80014b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014ba:	61bb      	str	r3, [r7, #24]
				T0=1-T1-T2;
 80014bc:	69fb      	ldr	r3, [r7, #28]
 80014be:	f1c3 0201 	rsb	r2, r3, #1
 80014c2:	69bb      	ldr	r3, [r7, #24]
 80014c4:	1ad3      	subs	r3, r2, r3
 80014c6:	617b      	str	r3, [r7, #20]
				*U_SVM=T1+T2+0.5*T0;
 80014c8:	69fa      	ldr	r2, [r7, #28]
 80014ca:	69bb      	ldr	r3, [r7, #24]
 80014cc:	4413      	add	r3, r2
 80014ce:	4618      	mov	r0, r3
 80014d0:	f7fe fff4 	bl	80004bc <__aeabi_i2d>
 80014d4:	4604      	mov	r4, r0
 80014d6:	460d      	mov	r5, r1
 80014d8:	6978      	ldr	r0, [r7, #20]
 80014da:	f7fe ffef 	bl	80004bc <__aeabi_i2d>
 80014de:	f04f 0200 	mov.w	r2, #0
 80014e2:	4b51      	ldr	r3, [pc, #324]	; (8001628 <SVPWM_modulacja+0x2e8>)
 80014e4:	f7ff f854 	bl	8000590 <__aeabi_dmul>
 80014e8:	4602      	mov	r2, r0
 80014ea:	460b      	mov	r3, r1
 80014ec:	4620      	mov	r0, r4
 80014ee:	4629      	mov	r1, r5
 80014f0:	f7fe fe98 	bl	8000224 <__adddf3>
 80014f4:	4602      	mov	r2, r0
 80014f6:	460b      	mov	r3, r1
 80014f8:	4610      	mov	r0, r2
 80014fa:	4619      	mov	r1, r3
 80014fc:	f7ff fae2 	bl	8000ac4 <__aeabi_d2iz>
 8001500:	4603      	mov	r3, r0
 8001502:	b21a      	sxth	r2, r3
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	801a      	strh	r2, [r3, #0]
				*V_SVM=T2+0.5*T0;
 8001508:	69b8      	ldr	r0, [r7, #24]
 800150a:	f7fe ffd7 	bl	80004bc <__aeabi_i2d>
 800150e:	4604      	mov	r4, r0
 8001510:	460d      	mov	r5, r1
 8001512:	6978      	ldr	r0, [r7, #20]
 8001514:	f7fe ffd2 	bl	80004bc <__aeabi_i2d>
 8001518:	f04f 0200 	mov.w	r2, #0
 800151c:	4b42      	ldr	r3, [pc, #264]	; (8001628 <SVPWM_modulacja+0x2e8>)
 800151e:	f7ff f837 	bl	8000590 <__aeabi_dmul>
 8001522:	4602      	mov	r2, r0
 8001524:	460b      	mov	r3, r1
 8001526:	4620      	mov	r0, r4
 8001528:	4629      	mov	r1, r5
 800152a:	f7fe fe7b 	bl	8000224 <__adddf3>
 800152e:	4602      	mov	r2, r0
 8001530:	460b      	mov	r3, r1
 8001532:	4610      	mov	r0, r2
 8001534:	4619      	mov	r1, r3
 8001536:	f7ff fac5 	bl	8000ac4 <__aeabi_d2iz>
 800153a:	4603      	mov	r3, r0
 800153c:	b21a      	sxth	r2, r3
 800153e:	683b      	ldr	r3, [r7, #0]
 8001540:	801a      	strh	r2, [r3, #0]
				*W_SVM=0.5*T0;
 8001542:	6978      	ldr	r0, [r7, #20]
 8001544:	f7fe ffba 	bl	80004bc <__aeabi_i2d>
 8001548:	f04f 0200 	mov.w	r2, #0
 800154c:	4b36      	ldr	r3, [pc, #216]	; (8001628 <SVPWM_modulacja+0x2e8>)
 800154e:	f7ff f81f 	bl	8000590 <__aeabi_dmul>
 8001552:	4602      	mov	r2, r0
 8001554:	460b      	mov	r3, r1
 8001556:	4610      	mov	r0, r2
 8001558:	4619      	mov	r1, r3
 800155a:	f7ff fab3 	bl	8000ac4 <__aeabi_d2iz>
 800155e:	4603      	mov	r3, r0
 8001560:	b21a      	sxth	r2, r3
 8001562:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001564:	801a      	strh	r2, [r3, #0]
				break;
 8001566:	e1cd      	b.n	8001904 <SVPWM_modulacja+0x5c4>
		case 2:	T1=-w;
 8001568:	6a3b      	ldr	r3, [r7, #32]
 800156a:	425b      	negs	r3, r3
 800156c:	61fb      	str	r3, [r7, #28]
				T2=-u;
 800156e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001570:	425b      	negs	r3, r3
 8001572:	61bb      	str	r3, [r7, #24]
				T0=1-T1-T2;
 8001574:	69fb      	ldr	r3, [r7, #28]
 8001576:	f1c3 0201 	rsb	r2, r3, #1
 800157a:	69bb      	ldr	r3, [r7, #24]
 800157c:	1ad3      	subs	r3, r2, r3
 800157e:	617b      	str	r3, [r7, #20]
				*U_SVM=T1+0.5*T0;
 8001580:	69f8      	ldr	r0, [r7, #28]
 8001582:	f7fe ff9b 	bl	80004bc <__aeabi_i2d>
 8001586:	4604      	mov	r4, r0
 8001588:	460d      	mov	r5, r1
 800158a:	6978      	ldr	r0, [r7, #20]
 800158c:	f7fe ff96 	bl	80004bc <__aeabi_i2d>
 8001590:	f04f 0200 	mov.w	r2, #0
 8001594:	4b24      	ldr	r3, [pc, #144]	; (8001628 <SVPWM_modulacja+0x2e8>)
 8001596:	f7fe fffb 	bl	8000590 <__aeabi_dmul>
 800159a:	4602      	mov	r2, r0
 800159c:	460b      	mov	r3, r1
 800159e:	4620      	mov	r0, r4
 80015a0:	4629      	mov	r1, r5
 80015a2:	f7fe fe3f 	bl	8000224 <__adddf3>
 80015a6:	4602      	mov	r2, r0
 80015a8:	460b      	mov	r3, r1
 80015aa:	4610      	mov	r0, r2
 80015ac:	4619      	mov	r1, r3
 80015ae:	f7ff fa89 	bl	8000ac4 <__aeabi_d2iz>
 80015b2:	4603      	mov	r3, r0
 80015b4:	b21a      	sxth	r2, r3
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	801a      	strh	r2, [r3, #0]
				*V_SVM=T1+T2+0.5*T0;
 80015ba:	69fa      	ldr	r2, [r7, #28]
 80015bc:	69bb      	ldr	r3, [r7, #24]
 80015be:	4413      	add	r3, r2
 80015c0:	4618      	mov	r0, r3
 80015c2:	f7fe ff7b 	bl	80004bc <__aeabi_i2d>
 80015c6:	4604      	mov	r4, r0
 80015c8:	460d      	mov	r5, r1
 80015ca:	6978      	ldr	r0, [r7, #20]
 80015cc:	f7fe ff76 	bl	80004bc <__aeabi_i2d>
 80015d0:	f04f 0200 	mov.w	r2, #0
 80015d4:	4b14      	ldr	r3, [pc, #80]	; (8001628 <SVPWM_modulacja+0x2e8>)
 80015d6:	f7fe ffdb 	bl	8000590 <__aeabi_dmul>
 80015da:	4602      	mov	r2, r0
 80015dc:	460b      	mov	r3, r1
 80015de:	4620      	mov	r0, r4
 80015e0:	4629      	mov	r1, r5
 80015e2:	f7fe fe1f 	bl	8000224 <__adddf3>
 80015e6:	4602      	mov	r2, r0
 80015e8:	460b      	mov	r3, r1
 80015ea:	4610      	mov	r0, r2
 80015ec:	4619      	mov	r1, r3
 80015ee:	f7ff fa69 	bl	8000ac4 <__aeabi_d2iz>
 80015f2:	4603      	mov	r3, r0
 80015f4:	b21a      	sxth	r2, r3
 80015f6:	683b      	ldr	r3, [r7, #0]
 80015f8:	801a      	strh	r2, [r3, #0]
				*W_SVM=0.5*T0;
 80015fa:	6978      	ldr	r0, [r7, #20]
 80015fc:	f7fe ff5e 	bl	80004bc <__aeabi_i2d>
 8001600:	f04f 0200 	mov.w	r2, #0
 8001604:	4b08      	ldr	r3, [pc, #32]	; (8001628 <SVPWM_modulacja+0x2e8>)
 8001606:	f7fe ffc3 	bl	8000590 <__aeabi_dmul>
 800160a:	4602      	mov	r2, r0
 800160c:	460b      	mov	r3, r1
 800160e:	4610      	mov	r0, r2
 8001610:	4619      	mov	r1, r3
 8001612:	f7ff fa57 	bl	8000ac4 <__aeabi_d2iz>
 8001616:	4603      	mov	r3, r0
 8001618:	b21a      	sxth	r2, r3
 800161a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800161c:	801a      	strh	r2, [r3, #0]
				break;
 800161e:	e171      	b.n	8001904 <SVPWM_modulacja+0x5c4>
 8001620:	7ae147ae 	.word	0x7ae147ae
 8001624:	3ffbae14 	.word	0x3ffbae14
 8001628:	3fe00000 	.word	0x3fe00000
		case 3:	T1=v;
 800162c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800162e:	61fb      	str	r3, [r7, #28]
				T2=w;
 8001630:	6a3b      	ldr	r3, [r7, #32]
 8001632:	61bb      	str	r3, [r7, #24]
				T0=1-T1-T2;
 8001634:	69fb      	ldr	r3, [r7, #28]
 8001636:	f1c3 0201 	rsb	r2, r3, #1
 800163a:	69bb      	ldr	r3, [r7, #24]
 800163c:	1ad3      	subs	r3, r2, r3
 800163e:	617b      	str	r3, [r7, #20]
				*U_SVM=0.5*T0;
 8001640:	6978      	ldr	r0, [r7, #20]
 8001642:	f7fe ff3b 	bl	80004bc <__aeabi_i2d>
 8001646:	f04f 0200 	mov.w	r2, #0
 800164a:	4bb0      	ldr	r3, [pc, #704]	; (800190c <SVPWM_modulacja+0x5cc>)
 800164c:	f7fe ffa0 	bl	8000590 <__aeabi_dmul>
 8001650:	4602      	mov	r2, r0
 8001652:	460b      	mov	r3, r1
 8001654:	4610      	mov	r0, r2
 8001656:	4619      	mov	r1, r3
 8001658:	f7ff fa34 	bl	8000ac4 <__aeabi_d2iz>
 800165c:	4603      	mov	r3, r0
 800165e:	b21a      	sxth	r2, r3
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	801a      	strh	r2, [r3, #0]
				*V_SVM=T1+T2+0.5*T0;
 8001664:	69fa      	ldr	r2, [r7, #28]
 8001666:	69bb      	ldr	r3, [r7, #24]
 8001668:	4413      	add	r3, r2
 800166a:	4618      	mov	r0, r3
 800166c:	f7fe ff26 	bl	80004bc <__aeabi_i2d>
 8001670:	4604      	mov	r4, r0
 8001672:	460d      	mov	r5, r1
 8001674:	6978      	ldr	r0, [r7, #20]
 8001676:	f7fe ff21 	bl	80004bc <__aeabi_i2d>
 800167a:	f04f 0200 	mov.w	r2, #0
 800167e:	4ba3      	ldr	r3, [pc, #652]	; (800190c <SVPWM_modulacja+0x5cc>)
 8001680:	f7fe ff86 	bl	8000590 <__aeabi_dmul>
 8001684:	4602      	mov	r2, r0
 8001686:	460b      	mov	r3, r1
 8001688:	4620      	mov	r0, r4
 800168a:	4629      	mov	r1, r5
 800168c:	f7fe fdca 	bl	8000224 <__adddf3>
 8001690:	4602      	mov	r2, r0
 8001692:	460b      	mov	r3, r1
 8001694:	4610      	mov	r0, r2
 8001696:	4619      	mov	r1, r3
 8001698:	f7ff fa14 	bl	8000ac4 <__aeabi_d2iz>
 800169c:	4603      	mov	r3, r0
 800169e:	b21a      	sxth	r2, r3
 80016a0:	683b      	ldr	r3, [r7, #0]
 80016a2:	801a      	strh	r2, [r3, #0]
				*W_SVM=T2+0.5*T0;
 80016a4:	69b8      	ldr	r0, [r7, #24]
 80016a6:	f7fe ff09 	bl	80004bc <__aeabi_i2d>
 80016aa:	4604      	mov	r4, r0
 80016ac:	460d      	mov	r5, r1
 80016ae:	6978      	ldr	r0, [r7, #20]
 80016b0:	f7fe ff04 	bl	80004bc <__aeabi_i2d>
 80016b4:	f04f 0200 	mov.w	r2, #0
 80016b8:	4b94      	ldr	r3, [pc, #592]	; (800190c <SVPWM_modulacja+0x5cc>)
 80016ba:	f7fe ff69 	bl	8000590 <__aeabi_dmul>
 80016be:	4602      	mov	r2, r0
 80016c0:	460b      	mov	r3, r1
 80016c2:	4620      	mov	r0, r4
 80016c4:	4629      	mov	r1, r5
 80016c6:	f7fe fdad 	bl	8000224 <__adddf3>
 80016ca:	4602      	mov	r2, r0
 80016cc:	460b      	mov	r3, r1
 80016ce:	4610      	mov	r0, r2
 80016d0:	4619      	mov	r1, r3
 80016d2:	f7ff f9f7 	bl	8000ac4 <__aeabi_d2iz>
 80016d6:	4603      	mov	r3, r0
 80016d8:	b21a      	sxth	r2, r3
 80016da:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80016dc:	801a      	strh	r2, [r3, #0]
				break;
 80016de:	e111      	b.n	8001904 <SVPWM_modulacja+0x5c4>
		case 4:	T1=-u;
 80016e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80016e2:	425b      	negs	r3, r3
 80016e4:	61fb      	str	r3, [r7, #28]
				T2=-v;
 80016e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016e8:	425b      	negs	r3, r3
 80016ea:	61bb      	str	r3, [r7, #24]
				T0=1-T1-T2;
 80016ec:	69fb      	ldr	r3, [r7, #28]
 80016ee:	f1c3 0201 	rsb	r2, r3, #1
 80016f2:	69bb      	ldr	r3, [r7, #24]
 80016f4:	1ad3      	subs	r3, r2, r3
 80016f6:	617b      	str	r3, [r7, #20]
				*U_SVM=0.5*T0;
 80016f8:	6978      	ldr	r0, [r7, #20]
 80016fa:	f7fe fedf 	bl	80004bc <__aeabi_i2d>
 80016fe:	f04f 0200 	mov.w	r2, #0
 8001702:	4b82      	ldr	r3, [pc, #520]	; (800190c <SVPWM_modulacja+0x5cc>)
 8001704:	f7fe ff44 	bl	8000590 <__aeabi_dmul>
 8001708:	4602      	mov	r2, r0
 800170a:	460b      	mov	r3, r1
 800170c:	4610      	mov	r0, r2
 800170e:	4619      	mov	r1, r3
 8001710:	f7ff f9d8 	bl	8000ac4 <__aeabi_d2iz>
 8001714:	4603      	mov	r3, r0
 8001716:	b21a      	sxth	r2, r3
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	801a      	strh	r2, [r3, #0]
				*V_SVM=T1+0.5*T0;
 800171c:	69f8      	ldr	r0, [r7, #28]
 800171e:	f7fe fecd 	bl	80004bc <__aeabi_i2d>
 8001722:	4604      	mov	r4, r0
 8001724:	460d      	mov	r5, r1
 8001726:	6978      	ldr	r0, [r7, #20]
 8001728:	f7fe fec8 	bl	80004bc <__aeabi_i2d>
 800172c:	f04f 0200 	mov.w	r2, #0
 8001730:	4b76      	ldr	r3, [pc, #472]	; (800190c <SVPWM_modulacja+0x5cc>)
 8001732:	f7fe ff2d 	bl	8000590 <__aeabi_dmul>
 8001736:	4602      	mov	r2, r0
 8001738:	460b      	mov	r3, r1
 800173a:	4620      	mov	r0, r4
 800173c:	4629      	mov	r1, r5
 800173e:	f7fe fd71 	bl	8000224 <__adddf3>
 8001742:	4602      	mov	r2, r0
 8001744:	460b      	mov	r3, r1
 8001746:	4610      	mov	r0, r2
 8001748:	4619      	mov	r1, r3
 800174a:	f7ff f9bb 	bl	8000ac4 <__aeabi_d2iz>
 800174e:	4603      	mov	r3, r0
 8001750:	b21a      	sxth	r2, r3
 8001752:	683b      	ldr	r3, [r7, #0]
 8001754:	801a      	strh	r2, [r3, #0]
				*W_SVM=T1+T2+0.5*T0;
 8001756:	69fa      	ldr	r2, [r7, #28]
 8001758:	69bb      	ldr	r3, [r7, #24]
 800175a:	4413      	add	r3, r2
 800175c:	4618      	mov	r0, r3
 800175e:	f7fe fead 	bl	80004bc <__aeabi_i2d>
 8001762:	4604      	mov	r4, r0
 8001764:	460d      	mov	r5, r1
 8001766:	6978      	ldr	r0, [r7, #20]
 8001768:	f7fe fea8 	bl	80004bc <__aeabi_i2d>
 800176c:	f04f 0200 	mov.w	r2, #0
 8001770:	4b66      	ldr	r3, [pc, #408]	; (800190c <SVPWM_modulacja+0x5cc>)
 8001772:	f7fe ff0d 	bl	8000590 <__aeabi_dmul>
 8001776:	4602      	mov	r2, r0
 8001778:	460b      	mov	r3, r1
 800177a:	4620      	mov	r0, r4
 800177c:	4629      	mov	r1, r5
 800177e:	f7fe fd51 	bl	8000224 <__adddf3>
 8001782:	4602      	mov	r2, r0
 8001784:	460b      	mov	r3, r1
 8001786:	4610      	mov	r0, r2
 8001788:	4619      	mov	r1, r3
 800178a:	f7ff f99b 	bl	8000ac4 <__aeabi_d2iz>
 800178e:	4603      	mov	r3, r0
 8001790:	b21a      	sxth	r2, r3
 8001792:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001794:	801a      	strh	r2, [r3, #0]
				break;
 8001796:	e0b5      	b.n	8001904 <SVPWM_modulacja+0x5c4>
		case 5:	T1=w;
 8001798:	6a3b      	ldr	r3, [r7, #32]
 800179a:	61fb      	str	r3, [r7, #28]
				T2=u;
 800179c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800179e:	61bb      	str	r3, [r7, #24]
				T0=1-T1-T2;
 80017a0:	69fb      	ldr	r3, [r7, #28]
 80017a2:	f1c3 0201 	rsb	r2, r3, #1
 80017a6:	69bb      	ldr	r3, [r7, #24]
 80017a8:	1ad3      	subs	r3, r2, r3
 80017aa:	617b      	str	r3, [r7, #20]
				*U_SVM=T2+0.5*T0;
 80017ac:	69b8      	ldr	r0, [r7, #24]
 80017ae:	f7fe fe85 	bl	80004bc <__aeabi_i2d>
 80017b2:	4604      	mov	r4, r0
 80017b4:	460d      	mov	r5, r1
 80017b6:	6978      	ldr	r0, [r7, #20]
 80017b8:	f7fe fe80 	bl	80004bc <__aeabi_i2d>
 80017bc:	f04f 0200 	mov.w	r2, #0
 80017c0:	4b52      	ldr	r3, [pc, #328]	; (800190c <SVPWM_modulacja+0x5cc>)
 80017c2:	f7fe fee5 	bl	8000590 <__aeabi_dmul>
 80017c6:	4602      	mov	r2, r0
 80017c8:	460b      	mov	r3, r1
 80017ca:	4620      	mov	r0, r4
 80017cc:	4629      	mov	r1, r5
 80017ce:	f7fe fd29 	bl	8000224 <__adddf3>
 80017d2:	4602      	mov	r2, r0
 80017d4:	460b      	mov	r3, r1
 80017d6:	4610      	mov	r0, r2
 80017d8:	4619      	mov	r1, r3
 80017da:	f7ff f973 	bl	8000ac4 <__aeabi_d2iz>
 80017de:	4603      	mov	r3, r0
 80017e0:	b21a      	sxth	r2, r3
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	801a      	strh	r2, [r3, #0]
				*V_SVM=0.5*T0;
 80017e6:	6978      	ldr	r0, [r7, #20]
 80017e8:	f7fe fe68 	bl	80004bc <__aeabi_i2d>
 80017ec:	f04f 0200 	mov.w	r2, #0
 80017f0:	4b46      	ldr	r3, [pc, #280]	; (800190c <SVPWM_modulacja+0x5cc>)
 80017f2:	f7fe fecd 	bl	8000590 <__aeabi_dmul>
 80017f6:	4602      	mov	r2, r0
 80017f8:	460b      	mov	r3, r1
 80017fa:	4610      	mov	r0, r2
 80017fc:	4619      	mov	r1, r3
 80017fe:	f7ff f961 	bl	8000ac4 <__aeabi_d2iz>
 8001802:	4603      	mov	r3, r0
 8001804:	b21a      	sxth	r2, r3
 8001806:	683b      	ldr	r3, [r7, #0]
 8001808:	801a      	strh	r2, [r3, #0]
				*W_SVM=T1+T2+0.5*T0;
 800180a:	69fa      	ldr	r2, [r7, #28]
 800180c:	69bb      	ldr	r3, [r7, #24]
 800180e:	4413      	add	r3, r2
 8001810:	4618      	mov	r0, r3
 8001812:	f7fe fe53 	bl	80004bc <__aeabi_i2d>
 8001816:	4604      	mov	r4, r0
 8001818:	460d      	mov	r5, r1
 800181a:	6978      	ldr	r0, [r7, #20]
 800181c:	f7fe fe4e 	bl	80004bc <__aeabi_i2d>
 8001820:	f04f 0200 	mov.w	r2, #0
 8001824:	4b39      	ldr	r3, [pc, #228]	; (800190c <SVPWM_modulacja+0x5cc>)
 8001826:	f7fe feb3 	bl	8000590 <__aeabi_dmul>
 800182a:	4602      	mov	r2, r0
 800182c:	460b      	mov	r3, r1
 800182e:	4620      	mov	r0, r4
 8001830:	4629      	mov	r1, r5
 8001832:	f7fe fcf7 	bl	8000224 <__adddf3>
 8001836:	4602      	mov	r2, r0
 8001838:	460b      	mov	r3, r1
 800183a:	4610      	mov	r0, r2
 800183c:	4619      	mov	r1, r3
 800183e:	f7ff f941 	bl	8000ac4 <__aeabi_d2iz>
 8001842:	4603      	mov	r3, r0
 8001844:	b21a      	sxth	r2, r3
 8001846:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001848:	801a      	strh	r2, [r3, #0]
				break;
 800184a:	e05b      	b.n	8001904 <SVPWM_modulacja+0x5c4>
		case 6:	T1=-v;
 800184c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800184e:	425b      	negs	r3, r3
 8001850:	61fb      	str	r3, [r7, #28]
				T2=-w;
 8001852:	6a3b      	ldr	r3, [r7, #32]
 8001854:	425b      	negs	r3, r3
 8001856:	61bb      	str	r3, [r7, #24]
				T0=1-T1-T2;
 8001858:	69fb      	ldr	r3, [r7, #28]
 800185a:	f1c3 0201 	rsb	r2, r3, #1
 800185e:	69bb      	ldr	r3, [r7, #24]
 8001860:	1ad3      	subs	r3, r2, r3
 8001862:	617b      	str	r3, [r7, #20]
				*U_SVM=T1+T2+0.5*T0;
 8001864:	69fa      	ldr	r2, [r7, #28]
 8001866:	69bb      	ldr	r3, [r7, #24]
 8001868:	4413      	add	r3, r2
 800186a:	4618      	mov	r0, r3
 800186c:	f7fe fe26 	bl	80004bc <__aeabi_i2d>
 8001870:	4604      	mov	r4, r0
 8001872:	460d      	mov	r5, r1
 8001874:	6978      	ldr	r0, [r7, #20]
 8001876:	f7fe fe21 	bl	80004bc <__aeabi_i2d>
 800187a:	f04f 0200 	mov.w	r2, #0
 800187e:	4b23      	ldr	r3, [pc, #140]	; (800190c <SVPWM_modulacja+0x5cc>)
 8001880:	f7fe fe86 	bl	8000590 <__aeabi_dmul>
 8001884:	4602      	mov	r2, r0
 8001886:	460b      	mov	r3, r1
 8001888:	4620      	mov	r0, r4
 800188a:	4629      	mov	r1, r5
 800188c:	f7fe fcca 	bl	8000224 <__adddf3>
 8001890:	4602      	mov	r2, r0
 8001892:	460b      	mov	r3, r1
 8001894:	4610      	mov	r0, r2
 8001896:	4619      	mov	r1, r3
 8001898:	f7ff f914 	bl	8000ac4 <__aeabi_d2iz>
 800189c:	4603      	mov	r3, r0
 800189e:	b21a      	sxth	r2, r3
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	801a      	strh	r2, [r3, #0]
				*V_SVM=0.5*T0;
 80018a4:	6978      	ldr	r0, [r7, #20]
 80018a6:	f7fe fe09 	bl	80004bc <__aeabi_i2d>
 80018aa:	f04f 0200 	mov.w	r2, #0
 80018ae:	4b17      	ldr	r3, [pc, #92]	; (800190c <SVPWM_modulacja+0x5cc>)
 80018b0:	f7fe fe6e 	bl	8000590 <__aeabi_dmul>
 80018b4:	4602      	mov	r2, r0
 80018b6:	460b      	mov	r3, r1
 80018b8:	4610      	mov	r0, r2
 80018ba:	4619      	mov	r1, r3
 80018bc:	f7ff f902 	bl	8000ac4 <__aeabi_d2iz>
 80018c0:	4603      	mov	r3, r0
 80018c2:	b21a      	sxth	r2, r3
 80018c4:	683b      	ldr	r3, [r7, #0]
 80018c6:	801a      	strh	r2, [r3, #0]
				*W_SVM=T1+0.5*T0;
 80018c8:	69f8      	ldr	r0, [r7, #28]
 80018ca:	f7fe fdf7 	bl	80004bc <__aeabi_i2d>
 80018ce:	4604      	mov	r4, r0
 80018d0:	460d      	mov	r5, r1
 80018d2:	6978      	ldr	r0, [r7, #20]
 80018d4:	f7fe fdf2 	bl	80004bc <__aeabi_i2d>
 80018d8:	f04f 0200 	mov.w	r2, #0
 80018dc:	4b0b      	ldr	r3, [pc, #44]	; (800190c <SVPWM_modulacja+0x5cc>)
 80018de:	f7fe fe57 	bl	8000590 <__aeabi_dmul>
 80018e2:	4602      	mov	r2, r0
 80018e4:	460b      	mov	r3, r1
 80018e6:	4620      	mov	r0, r4
 80018e8:	4629      	mov	r1, r5
 80018ea:	f7fe fc9b 	bl	8000224 <__adddf3>
 80018ee:	4602      	mov	r2, r0
 80018f0:	460b      	mov	r3, r1
 80018f2:	4610      	mov	r0, r2
 80018f4:	4619      	mov	r1, r3
 80018f6:	f7ff f8e5 	bl	8000ac4 <__aeabi_d2iz>
 80018fa:	4603      	mov	r3, r0
 80018fc:	b21a      	sxth	r2, r3
 80018fe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001900:	801a      	strh	r2, [r3, #0]
				break;
 8001902:	bf00      	nop
		}

}
 8001904:	bf00      	nop
 8001906:	3730      	adds	r7, #48	; 0x30
 8001908:	46bd      	mov	sp, r7
 800190a:	bdb0      	pop	{r4, r5, r7, pc}
 800190c:	3fe00000 	.word	0x3fe00000

08001910 <PID_REG>:



void PID_REG(PI_reg *Reg, int32_t act_value,int32_t ref_value, int32_t *iq_out)

{
 8001910:	b480      	push	{r7}
 8001912:	b085      	sub	sp, #20
 8001914:	af00      	add	r7, sp, #0
 8001916:	60f8      	str	r0, [r7, #12]
 8001918:	60b9      	str	r1, [r7, #8]
 800191a:	607a      	str	r2, [r7, #4]
 800191c:	603b      	str	r3, [r7, #0]
	static int32_t last_error, tmp_out;
	Reg->PI_error = (ref_value) - act_value; // dopisac antiwindup oraz limity wartosci aby nie doszlo do przeregulowan
 800191e:	687a      	ldr	r2, [r7, #4]
 8001920:	68bb      	ldr	r3, [r7, #8]
 8001922:	1ad2      	subs	r2, r2, r3
 8001924:	68fb      	ldr	r3, [r7, #12]
 8001926:	601a      	str	r2, [r3, #0]
	Reg->PI_error_sum= Reg->PI_error_sum + Reg->PI_error;
 8001928:	68fb      	ldr	r3, [r7, #12]
 800192a:	685a      	ldr	r2, [r3, #4]
 800192c:	68fb      	ldr	r3, [r7, #12]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	441a      	add	r2, r3
 8001932:	68fb      	ldr	r3, [r7, #12]
 8001934:	605a      	str	r2, [r3, #4]
	Reg->PI_diff = Reg->PI_error-last_error; //error-last_erroe
 8001936:	68fb      	ldr	r3, [r7, #12]
 8001938:	681a      	ldr	r2, [r3, #0]
 800193a:	4b34      	ldr	r3, [pc, #208]	; (8001a0c <PID_REG+0xfc>)
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	1ad2      	subs	r2, r2, r3
 8001940:	68fb      	ldr	r3, [r7, #12]
 8001942:	609a      	str	r2, [r3, #8]

	if (Reg->PI_error_sum > 10000000) Reg->PI_error_sum  =  10000000;
 8001944:	68fb      	ldr	r3, [r7, #12]
 8001946:	685b      	ldr	r3, [r3, #4]
 8001948:	4a31      	ldr	r2, [pc, #196]	; (8001a10 <PID_REG+0x100>)
 800194a:	4293      	cmp	r3, r2
 800194c:	dd02      	ble.n	8001954 <PID_REG+0x44>
 800194e:	68fb      	ldr	r3, [r7, #12]
 8001950:	4a2f      	ldr	r2, [pc, #188]	; (8001a10 <PID_REG+0x100>)
 8001952:	605a      	str	r2, [r3, #4]
	if (Reg->PI_error_sum <-10000000) Reg->PI_error_sum  = -10000000;
 8001954:	68fb      	ldr	r3, [r7, #12]
 8001956:	685b      	ldr	r3, [r3, #4]
 8001958:	4a2e      	ldr	r2, [pc, #184]	; (8001a14 <PID_REG+0x104>)
 800195a:	4293      	cmp	r3, r2
 800195c:	da02      	bge.n	8001964 <PID_REG+0x54>
 800195e:	68fb      	ldr	r3, [r7, #12]
 8001960:	4a2c      	ldr	r2, [pc, #176]	; (8001a14 <PID_REG+0x104>)
 8001962:	605a      	str	r2, [r3, #4]

	Reg->PI_out = Reg->KP * Reg->PI_error + Reg->KI * Reg->PI_error_sum + Reg->KD*Reg->PI_diff;
 8001964:	68fb      	ldr	r3, [r7, #12]
 8001966:	ed93 7a04 	vldr	s14, [r3, #16]
 800196a:	68fb      	ldr	r3, [r7, #12]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	ee07 3a90 	vmov	s15, r3
 8001972:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001976:	ee27 7a27 	vmul.f32	s14, s14, s15
 800197a:	68fb      	ldr	r3, [r7, #12]
 800197c:	edd3 6a05 	vldr	s13, [r3, #20]
 8001980:	68fb      	ldr	r3, [r7, #12]
 8001982:	685b      	ldr	r3, [r3, #4]
 8001984:	ee07 3a90 	vmov	s15, r3
 8001988:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800198c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001990:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001994:	68fb      	ldr	r3, [r7, #12]
 8001996:	edd3 6a06 	vldr	s13, [r3, #24]
 800199a:	68fb      	ldr	r3, [r7, #12]
 800199c:	689b      	ldr	r3, [r3, #8]
 800199e:	ee07 3a90 	vmov	s15, r3
 80019a2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80019a6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80019aa:	ee77 7a27 	vadd.f32	s15, s14, s15
 80019ae:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80019b2:	ee17 2a90 	vmov	r2, s15
 80019b6:	68fb      	ldr	r3, [r7, #12]
 80019b8:	60da      	str	r2, [r3, #12]

	if(Reg->PI_out > 50000000)Reg->PI_out= 50000000;
 80019ba:	68fb      	ldr	r3, [r7, #12]
 80019bc:	68db      	ldr	r3, [r3, #12]
 80019be:	4a16      	ldr	r2, [pc, #88]	; (8001a18 <PID_REG+0x108>)
 80019c0:	4293      	cmp	r3, r2
 80019c2:	dd02      	ble.n	80019ca <PID_REG+0xba>
 80019c4:	68fb      	ldr	r3, [r7, #12]
 80019c6:	4a14      	ldr	r2, [pc, #80]	; (8001a18 <PID_REG+0x108>)
 80019c8:	60da      	str	r2, [r3, #12]
	if(Reg->PI_out <-50000000)Reg->PI_out=-50000000;
 80019ca:	68fb      	ldr	r3, [r7, #12]
 80019cc:	68db      	ldr	r3, [r3, #12]
 80019ce:	4a13      	ldr	r2, [pc, #76]	; (8001a1c <PID_REG+0x10c>)
 80019d0:	4293      	cmp	r3, r2
 80019d2:	da02      	bge.n	80019da <PID_REG+0xca>
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	4a11      	ldr	r2, [pc, #68]	; (8001a1c <PID_REG+0x10c>)
 80019d8:	60da      	str	r2, [r3, #12]


	last_error=Reg->PI_error;
 80019da:	68fb      	ldr	r3, [r7, #12]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	4a0b      	ldr	r2, [pc, #44]	; (8001a0c <PID_REG+0xfc>)
 80019e0:	6013      	str	r3, [r2, #0]
	tmp_out=(Reg->PI_out/100000);
 80019e2:	68fb      	ldr	r3, [r7, #12]
 80019e4:	68db      	ldr	r3, [r3, #12]
 80019e6:	4a0e      	ldr	r2, [pc, #56]	; (8001a20 <PID_REG+0x110>)
 80019e8:	fb82 1203 	smull	r1, r2, r2, r3
 80019ec:	1352      	asrs	r2, r2, #13
 80019ee:	17db      	asrs	r3, r3, #31
 80019f0:	1ad3      	subs	r3, r2, r3
 80019f2:	4a0c      	ldr	r2, [pc, #48]	; (8001a24 <PID_REG+0x114>)
 80019f4:	6013      	str	r3, [r2, #0]
	*iq_out = tmp_out; // dla PMSM vectro control method
 80019f6:	4b0b      	ldr	r3, [pc, #44]	; (8001a24 <PID_REG+0x114>)
 80019f8:	681a      	ldr	r2, [r3, #0]
 80019fa:	683b      	ldr	r3, [r7, #0]
 80019fc:	601a      	str	r2, [r3, #0]
/*
	prad_q_zad = (Reg->PI_out/100000);
	 if(prad_q_zad>500)prad_q_zad=500;
	 if(prad_q_zad<-500)prad_q_zad=-500;
	 */
}
 80019fe:	bf00      	nop
 8001a00:	3714      	adds	r7, #20
 8001a02:	46bd      	mov	sp, r7
 8001a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a08:	4770      	bx	lr
 8001a0a:	bf00      	nop
 8001a0c:	200000f4 	.word	0x200000f4
 8001a10:	00989680 	.word	0x00989680
 8001a14:	ff676980 	.word	0xff676980
 8001a18:	02faf080 	.word	0x02faf080
 8001a1c:	fd050f80 	.word	0xfd050f80
 8001a20:	14f8b589 	.word	0x14f8b589
 8001a24:	200000f8 	.word	0x200000f8

08001a28 <get_even_flag>:
volatile uint8_t tryb_speed_m=1, bufor_tx[8]={0x05,0x11,0xca,0xfa,0xdc,0x44,0x55,0x77};

volatile uint16_t czas_10ms, czas_100ms;

uint16_t get_even_flag(uint16_t k)
{
 8001a28:	b480      	push	{r7}
 8001a2a:	b085      	sub	sp, #20
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	4603      	mov	r3, r0
 8001a30:	80fb      	strh	r3, [r7, #6]
	uint16_t wartosc,p,i,parity=0;
 8001a32:	2300      	movs	r3, #0
 8001a34:	817b      	strh	r3, [r7, #10]
	for(p=0;p<15;p++)
 8001a36:	2300      	movs	r3, #0
 8001a38:	81bb      	strh	r3, [r7, #12]
 8001a3a:	e00f      	b.n	8001a5c <get_even_flag+0x34>
		{
	        parity^=(k>>p & 1);
 8001a3c:	88fa      	ldrh	r2, [r7, #6]
 8001a3e:	89bb      	ldrh	r3, [r7, #12]
 8001a40:	fa42 f303 	asr.w	r3, r2, r3
 8001a44:	b21b      	sxth	r3, r3
 8001a46:	f003 0301 	and.w	r3, r3, #1
 8001a4a:	b21a      	sxth	r2, r3
 8001a4c:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8001a50:	4053      	eors	r3, r2
 8001a52:	b21b      	sxth	r3, r3
 8001a54:	817b      	strh	r3, [r7, #10]
	for(p=0;p<15;p++)
 8001a56:	89bb      	ldrh	r3, [r7, #12]
 8001a58:	3301      	adds	r3, #1
 8001a5a:	81bb      	strh	r3, [r7, #12]
 8001a5c:	89bb      	ldrh	r3, [r7, #12]
 8001a5e:	2b0e      	cmp	r3, #14
 8001a60:	d9ec      	bls.n	8001a3c <get_even_flag+0x14>
		}
	if(parity) wartosc=k|0X8000;
 8001a62:	897b      	ldrh	r3, [r7, #10]
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d006      	beq.n	8001a76 <get_even_flag+0x4e>
 8001a68:	88fb      	ldrh	r3, [r7, #6]
 8001a6a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001a6e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001a72:	81fb      	strh	r3, [r7, #14]
 8001a74:	e003      	b.n	8001a7e <get_even_flag+0x56>
	else wartosc=k&(~(0x8000));
 8001a76:	88fb      	ldrh	r3, [r7, #6]
 8001a78:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8001a7c:	81fb      	strh	r3, [r7, #14]
	return wartosc;
 8001a7e:	89fb      	ldrh	r3, [r7, #14]
}
 8001a80:	4618      	mov	r0, r3
 8001a82:	3714      	adds	r7, #20
 8001a84:	46bd      	mov	sp, r7
 8001a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a8a:	4770      	bx	lr
 8001a8c:	0000      	movs	r0, r0
	...

08001a90 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001a90:	b590      	push	{r4, r7, lr}
 8001a92:	b083      	sub	sp, #12
 8001a94:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001a96:	f001 ff28 	bl	80038ea <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001a9a:	f000 f9df 	bl	8001e5c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001a9e:	f000 fdf1 	bl	8002684 <MX_GPIO_Init>
  MX_ADC1_Init();
 8001aa2:	f000 fa27 	bl	8001ef4 <MX_ADC1_Init>
  MX_SPI3_Init();
 8001aa6:	f000 fbd7 	bl	8002258 <MX_SPI3_Init>
  MX_TIM1_Init();
 8001aaa:	f000 fc13 	bl	80022d4 <MX_TIM1_Init>
  MX_TIM6_Init();
 8001aae:	f000 fd41 	bl	8002534 <MX_TIM6_Init>
  MX_TIM17_Init();
 8001ab2:	f000 fd75 	bl	80025a0 <MX_TIM17_Init>
  MX_ADC2_Init();
 8001ab6:	f000 fad3 	bl	8002060 <MX_ADC2_Init>
  MX_DAC1_Init();
 8001aba:	f000 fb4d 	bl	8002158 <MX_DAC1_Init>
  MX_TIM2_Init();
 8001abe:	f000 fce5 	bl	800248c <MX_TIM2_Init>
  MX_CORDIC_Init();
 8001ac2:	f000 fb35 	bl	8002130 <MX_CORDIC_Init>
  MX_USART1_UART_Init();
 8001ac6:	f000 fd91 	bl	80025ec <MX_USART1_UART_Init>
  MX_FDCAN1_Init();
 8001aca:	f000 fb7f 	bl	80021cc <MX_FDCAN1_Init>
  /* USER CODE BEGIN 2 */

  for(a = 0; a < 750; a++)
 8001ace:	4b02      	ldr	r3, [pc, #8]	; (8001ad8 <main+0x48>)
 8001ad0:	2200      	movs	r2, #0
 8001ad2:	601a      	str	r2, [r3, #0]
 8001ad4:	e057      	b.n	8001b86 <main+0xf6>
 8001ad6:	bf00      	nop
 8001ad8:	200004bc 	.word	0x200004bc
    {
  	  sinus_pozycja_wal[a]=sin(PI*a/180);
 8001adc:	4bae      	ldr	r3, [pc, #696]	; (8001d98 <main+0x308>)
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	4618      	mov	r0, r3
 8001ae2:	f7fe fceb 	bl	80004bc <__aeabi_i2d>
 8001ae6:	a3aa      	add	r3, pc, #680	; (adr r3, 8001d90 <main+0x300>)
 8001ae8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001aec:	f7fe fd50 	bl	8000590 <__aeabi_dmul>
 8001af0:	4602      	mov	r2, r0
 8001af2:	460b      	mov	r3, r1
 8001af4:	4610      	mov	r0, r2
 8001af6:	4619      	mov	r1, r3
 8001af8:	f04f 0200 	mov.w	r2, #0
 8001afc:	4ba7      	ldr	r3, [pc, #668]	; (8001d9c <main+0x30c>)
 8001afe:	f7fe fe71 	bl	80007e4 <__aeabi_ddiv>
 8001b02:	4602      	mov	r2, r0
 8001b04:	460b      	mov	r3, r1
 8001b06:	ec43 2b17 	vmov	d7, r2, r3
 8001b0a:	eeb0 0a47 	vmov.f32	s0, s14
 8001b0e:	eef0 0a67 	vmov.f32	s1, s15
 8001b12:	f00a f981 	bl	800be18 <sin>
 8001b16:	ec51 0b10 	vmov	r0, r1, d0
 8001b1a:	4b9f      	ldr	r3, [pc, #636]	; (8001d98 <main+0x308>)
 8001b1c:	681c      	ldr	r4, [r3, #0]
 8001b1e:	f7ff f819 	bl	8000b54 <__aeabi_d2f>
 8001b22:	4602      	mov	r2, r0
 8001b24:	499e      	ldr	r1, [pc, #632]	; (8001da0 <main+0x310>)
 8001b26:	00a3      	lsls	r3, r4, #2
 8001b28:	440b      	add	r3, r1
 8001b2a:	601a      	str	r2, [r3, #0]
  	  cosinus_pozycja_wal[a]=cos(PI*a/180);
 8001b2c:	4b9a      	ldr	r3, [pc, #616]	; (8001d98 <main+0x308>)
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	4618      	mov	r0, r3
 8001b32:	f7fe fcc3 	bl	80004bc <__aeabi_i2d>
 8001b36:	a396      	add	r3, pc, #600	; (adr r3, 8001d90 <main+0x300>)
 8001b38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b3c:	f7fe fd28 	bl	8000590 <__aeabi_dmul>
 8001b40:	4602      	mov	r2, r0
 8001b42:	460b      	mov	r3, r1
 8001b44:	4610      	mov	r0, r2
 8001b46:	4619      	mov	r1, r3
 8001b48:	f04f 0200 	mov.w	r2, #0
 8001b4c:	4b93      	ldr	r3, [pc, #588]	; (8001d9c <main+0x30c>)
 8001b4e:	f7fe fe49 	bl	80007e4 <__aeabi_ddiv>
 8001b52:	4602      	mov	r2, r0
 8001b54:	460b      	mov	r3, r1
 8001b56:	ec43 2b17 	vmov	d7, r2, r3
 8001b5a:	eeb0 0a47 	vmov.f32	s0, s14
 8001b5e:	eef0 0a67 	vmov.f32	s1, s15
 8001b62:	f00a f905 	bl	800bd70 <cos>
 8001b66:	ec51 0b10 	vmov	r0, r1, d0
 8001b6a:	4b8b      	ldr	r3, [pc, #556]	; (8001d98 <main+0x308>)
 8001b6c:	681c      	ldr	r4, [r3, #0]
 8001b6e:	f7fe fff1 	bl	8000b54 <__aeabi_d2f>
 8001b72:	4602      	mov	r2, r0
 8001b74:	498b      	ldr	r1, [pc, #556]	; (8001da4 <main+0x314>)
 8001b76:	00a3      	lsls	r3, r4, #2
 8001b78:	440b      	add	r3, r1
 8001b7a:	601a      	str	r2, [r3, #0]
  for(a = 0; a < 750; a++)
 8001b7c:	4b86      	ldr	r3, [pc, #536]	; (8001d98 <main+0x308>)
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	3301      	adds	r3, #1
 8001b82:	4a85      	ldr	r2, [pc, #532]	; (8001d98 <main+0x308>)
 8001b84:	6013      	str	r3, [r2, #0]
 8001b86:	4b84      	ldr	r3, [pc, #528]	; (8001d98 <main+0x308>)
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	f240 22ed 	movw	r2, #749	; 0x2ed
 8001b8e:	4293      	cmp	r3, r2
 8001b90:	dda4      	ble.n	8001adc <main+0x4c>
    }

HAL_SPI_Init(&hspi3);
 8001b92:	4885      	ldr	r0, [pc, #532]	; (8001da8 <main+0x318>)
 8001b94:	f006 f948 	bl	8007e28 <HAL_SPI_Init>
REG_ANGLECOM=get_even_flag(REG_ANGLECOM_ADR|0X4000);
 8001b98:	4b84      	ldr	r3, [pc, #528]	; (8001dac <main+0x31c>)
 8001b9a:	881b      	ldrh	r3, [r3, #0]
 8001b9c:	b29b      	uxth	r3, r3
 8001b9e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001ba2:	b29b      	uxth	r3, r3
 8001ba4:	4618      	mov	r0, r3
 8001ba6:	f7ff ff3f 	bl	8001a28 <get_even_flag>
 8001baa:	4603      	mov	r3, r0
 8001bac:	461a      	mov	r2, r3
 8001bae:	4b80      	ldr	r3, [pc, #512]	; (8001db0 <main+0x320>)
 8001bb0:	801a      	strh	r2, [r3, #0]
REG_ANGLEUNC=get_even_flag(REG_ANGLEUNC_ADR|0X4000);
 8001bb2:	4b80      	ldr	r3, [pc, #512]	; (8001db4 <main+0x324>)
 8001bb4:	881b      	ldrh	r3, [r3, #0]
 8001bb6:	b29b      	uxth	r3, r3
 8001bb8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001bbc:	b29b      	uxth	r3, r3
 8001bbe:	4618      	mov	r0, r3
 8001bc0:	f7ff ff32 	bl	8001a28 <get_even_flag>
 8001bc4:	4603      	mov	r3, r0
 8001bc6:	461a      	mov	r2, r3
 8001bc8:	4b7b      	ldr	r3, [pc, #492]	; (8001db8 <main+0x328>)
 8001bca:	801a      	strh	r2, [r3, #0]
REG_DIAAGC  =get_even_flag(REG_DIAAGC_ADR |0X4000 );
 8001bcc:	4b7b      	ldr	r3, [pc, #492]	; (8001dbc <main+0x32c>)
 8001bce:	881b      	ldrh	r3, [r3, #0]
 8001bd0:	b29b      	uxth	r3, r3
 8001bd2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001bd6:	b29b      	uxth	r3, r3
 8001bd8:	4618      	mov	r0, r3
 8001bda:	f7ff ff25 	bl	8001a28 <get_even_flag>
 8001bde:	4603      	mov	r3, r0
 8001be0:	461a      	mov	r2, r3
 8001be2:	4b77      	ldr	r3, [pc, #476]	; (8001dc0 <main+0x330>)
 8001be4:	801a      	strh	r2, [r3, #0]
HAL_TIM_PWM_Start_IT(&htim1,TIM_CHANNEL_1);
 8001be6:	2100      	movs	r1, #0
 8001be8:	4876      	ldr	r0, [pc, #472]	; (8001dc4 <main+0x334>)
 8001bea:	f007 f8ed 	bl	8008dc8 <HAL_TIM_PWM_Start_IT>
HAL_TIM_PWM_Start_IT(&htim1,TIM_CHANNEL_2);
 8001bee:	2104      	movs	r1, #4
 8001bf0:	4874      	ldr	r0, [pc, #464]	; (8001dc4 <main+0x334>)
 8001bf2:	f007 f8e9 	bl	8008dc8 <HAL_TIM_PWM_Start_IT>
HAL_TIM_PWM_Start_IT(&htim1,TIM_CHANNEL_3);
 8001bf6:	2108      	movs	r1, #8
 8001bf8:	4872      	ldr	r0, [pc, #456]	; (8001dc4 <main+0x334>)
 8001bfa:	f007 f8e5 	bl	8008dc8 <HAL_TIM_PWM_Start_IT>
HAL_TIM_PWM_Start_IT(&htim1,TIM_CHANNEL_4);
 8001bfe:	210c      	movs	r1, #12
 8001c00:	4870      	ldr	r0, [pc, #448]	; (8001dc4 <main+0x334>)
 8001c02:	f007 f8e1 	bl	8008dc8 <HAL_TIM_PWM_Start_IT>
HAL_TIMEx_PWMN_Start_IT(&htim1, TIM_CHANNEL_1);
 8001c06:	2100      	movs	r1, #0
 8001c08:	486e      	ldr	r0, [pc, #440]	; (8001dc4 <main+0x334>)
 8001c0a:	f008 fb85 	bl	800a318 <HAL_TIMEx_PWMN_Start_IT>
HAL_TIMEx_PWMN_Start_IT(&htim1, TIM_CHANNEL_2);
 8001c0e:	2104      	movs	r1, #4
 8001c10:	486c      	ldr	r0, [pc, #432]	; (8001dc4 <main+0x334>)
 8001c12:	f008 fb81 	bl	800a318 <HAL_TIMEx_PWMN_Start_IT>
HAL_TIMEx_PWMN_Start_IT(&htim1, TIM_CHANNEL_3);
 8001c16:	2108      	movs	r1, #8
 8001c18:	486a      	ldr	r0, [pc, #424]	; (8001dc4 <main+0x334>)
 8001c1a:	f008 fb7d 	bl	800a318 <HAL_TIMEx_PWMN_Start_IT>
HAL_TIM_Encoder_Start_IT(&htim2, TIM_CHANNEL_1);
 8001c1e:	2100      	movs	r1, #0
 8001c20:	4869      	ldr	r0, [pc, #420]	; (8001dc8 <main+0x338>)
 8001c22:	f007 fac3 	bl	80091ac <HAL_TIM_Encoder_Start_IT>
HAL_TIM_Encoder_Start_IT(&htim2, TIM_CHANNEL_2);
 8001c26:	2104      	movs	r1, #4
 8001c28:	4867      	ldr	r0, [pc, #412]	; (8001dc8 <main+0x338>)
 8001c2a:	f007 fabf 	bl	80091ac <HAL_TIM_Encoder_Start_IT>

HAL_Delay(1);
 8001c2e:	2001      	movs	r0, #1
 8001c30:	f001 fecc 	bl	80039cc <HAL_Delay>
SPI_bufor_tx[0]=REG_ANGLECOM_ADR;//odczyt_pozycji;
 8001c34:	4b5d      	ldr	r3, [pc, #372]	; (8001dac <main+0x31c>)
 8001c36:	881b      	ldrh	r3, [r3, #0]
 8001c38:	b29a      	uxth	r2, r3
 8001c3a:	4b64      	ldr	r3, [pc, #400]	; (8001dcc <main+0x33c>)
 8001c3c:	801a      	strh	r2, [r3, #0]
               	  		 // SPI_bufor_tx[1]=odczyt_pozycji&0XFF;
HAL_GPIO_WritePin(GPIOD,GPIO_PIN_2,0);
 8001c3e:	2200      	movs	r2, #0
 8001c40:	2104      	movs	r1, #4
 8001c42:	4863      	ldr	r0, [pc, #396]	; (8001dd0 <main+0x340>)
 8001c44:	f005 f8dc 	bl	8006e00 <HAL_GPIO_WritePin>
HAL_SPI_Transmit(&hspi3,&SPI_bufor_tx,1,2);
 8001c48:	2302      	movs	r3, #2
 8001c4a:	2201      	movs	r2, #1
 8001c4c:	495f      	ldr	r1, [pc, #380]	; (8001dcc <main+0x33c>)
 8001c4e:	4856      	ldr	r0, [pc, #344]	; (8001da8 <main+0x318>)
 8001c50:	f006 f995 	bl	8007f7e <HAL_SPI_Transmit>
HAL_GPIO_WritePin(GPIOD,GPIO_PIN_2,1);
 8001c54:	2201      	movs	r2, #1
 8001c56:	2104      	movs	r1, #4
 8001c58:	485d      	ldr	r0, [pc, #372]	; (8001dd0 <main+0x340>)
 8001c5a:	f005 f8d1 	bl	8006e00 <HAL_GPIO_WritePin>
SPI_bufor_tx[0]=0X0000;
 8001c5e:	4b5b      	ldr	r3, [pc, #364]	; (8001dcc <main+0x33c>)
 8001c60:	2200      	movs	r2, #0
 8001c62:	801a      	strh	r2, [r3, #0]
HAL_GPIO_WritePin(GPIOD,GPIO_PIN_2,0);
 8001c64:	2200      	movs	r2, #0
 8001c66:	2104      	movs	r1, #4
 8001c68:	4859      	ldr	r0, [pc, #356]	; (8001dd0 <main+0x340>)
 8001c6a:	f005 f8c9 	bl	8006e00 <HAL_GPIO_WritePin>
HAL_SPI_Receive(&hspi3,&SPI_bufor_rx,1,2);
 8001c6e:	2302      	movs	r3, #2
 8001c70:	2201      	movs	r2, #1
 8001c72:	4958      	ldr	r1, [pc, #352]	; (8001dd4 <main+0x344>)
 8001c74:	484c      	ldr	r0, [pc, #304]	; (8001da8 <main+0x318>)
 8001c76:	f006 faf0 	bl	800825a <HAL_SPI_Receive>
HAL_GPIO_WritePin(GPIOD,GPIO_PIN_2,1);
 8001c7a:	2201      	movs	r2, #1
 8001c7c:	2104      	movs	r1, #4
 8001c7e:	4854      	ldr	r0, [pc, #336]	; (8001dd0 <main+0x340>)
 8001c80:	f005 f8be 	bl	8006e00 <HAL_GPIO_WritePin>
REG_ANGLECOM=pozycja_walu=SPI_bufor_rx[0]&0X3fff;
 8001c84:	4b53      	ldr	r3, [pc, #332]	; (8001dd4 <main+0x344>)
 8001c86:	881b      	ldrh	r3, [r3, #0]
 8001c88:	b29b      	uxth	r3, r3
 8001c8a:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8001c8e:	b29a      	uxth	r2, r3
 8001c90:	4b51      	ldr	r3, [pc, #324]	; (8001dd8 <main+0x348>)
 8001c92:	4611      	mov	r1, r2
 8001c94:	8019      	strh	r1, [r3, #0]
 8001c96:	4b46      	ldr	r3, [pc, #280]	; (8001db0 <main+0x320>)
 8001c98:	801a      	strh	r2, [r3, #0]

SPI_bufor_rx[0]=0;
 8001c9a:	4b4e      	ldr	r3, [pc, #312]	; (8001dd4 <main+0x344>)
 8001c9c:	2200      	movs	r2, #0
 8001c9e:	801a      	strh	r2, [r3, #0]

HAL_ADCEx_InjectedStart_IT(&hadc1);
 8001ca0:	484e      	ldr	r0, [pc, #312]	; (8001ddc <main+0x34c>)
 8001ca2:	f003 fa77 	bl	8005194 <HAL_ADCEx_InjectedStart_IT>
POSTION.KP=3000;
 8001ca6:	4b4e      	ldr	r3, [pc, #312]	; (8001de0 <main+0x350>)
 8001ca8:	4a4e      	ldr	r2, [pc, #312]	; (8001de4 <main+0x354>)
 8001caa:	611a      	str	r2, [r3, #16]
POSTION.KI=0.05;
 8001cac:	4b4c      	ldr	r3, [pc, #304]	; (8001de0 <main+0x350>)
 8001cae:	4a4e      	ldr	r2, [pc, #312]	; (8001de8 <main+0x358>)
 8001cb0:	615a      	str	r2, [r3, #20]
POSTION.KD=20000;
 8001cb2:	4b4b      	ldr	r3, [pc, #300]	; (8001de0 <main+0x350>)
 8001cb4:	4a4d      	ldr	r2, [pc, #308]	; (8001dec <main+0x35c>)
 8001cb6:	619a      	str	r2, [r3, #24]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  SVPWM_modulacja(napiecie_Ualpha, napiecie_Ubeta, &U_SVPWM, &V_SVPWM, &W_SVPWM );
 8001cb8:	4b4d      	ldr	r3, [pc, #308]	; (8001df0 <main+0x360>)
 8001cba:	6818      	ldr	r0, [r3, #0]
 8001cbc:	4b4d      	ldr	r3, [pc, #308]	; (8001df4 <main+0x364>)
 8001cbe:	6819      	ldr	r1, [r3, #0]
 8001cc0:	4b4d      	ldr	r3, [pc, #308]	; (8001df8 <main+0x368>)
 8001cc2:	9300      	str	r3, [sp, #0]
 8001cc4:	4b4d      	ldr	r3, [pc, #308]	; (8001dfc <main+0x36c>)
 8001cc6:	4a4e      	ldr	r2, [pc, #312]	; (8001e00 <main+0x370>)
 8001cc8:	f7ff fb3a 	bl	8001340 <SVPWM_modulacja>
	  /*
	  PWM_U=(uint16_t)((napiecie_U_U/2)+500);
	  PWM_V=(uint16_t)((napiecie_U_V/2)+500);
	  PWM_W=(uint16_t)((napiecie_U_W/2)+500);
	  */
	  PWM_U=(uint16_t)((U_SVPWM)+500);
 8001ccc:	4b4c      	ldr	r3, [pc, #304]	; (8001e00 <main+0x370>)
 8001cce:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001cd2:	b29b      	uxth	r3, r3
 8001cd4:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8001cd8:	b29a      	uxth	r2, r3
 8001cda:	4b4a      	ldr	r3, [pc, #296]	; (8001e04 <main+0x374>)
 8001cdc:	801a      	strh	r2, [r3, #0]
	  PWM_V=(uint16_t)((V_SVPWM)+500);
 8001cde:	4b47      	ldr	r3, [pc, #284]	; (8001dfc <main+0x36c>)
 8001ce0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001ce4:	b29b      	uxth	r3, r3
 8001ce6:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8001cea:	b29a      	uxth	r2, r3
 8001cec:	4b46      	ldr	r3, [pc, #280]	; (8001e08 <main+0x378>)
 8001cee:	801a      	strh	r2, [r3, #0]
	  PWM_W=(uint16_t)((W_SVPWM)+500);
 8001cf0:	4b41      	ldr	r3, [pc, #260]	; (8001df8 <main+0x368>)
 8001cf2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001cf6:	b29b      	uxth	r3, r3
 8001cf8:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8001cfc:	b29a      	uxth	r2, r3
 8001cfe:	4b43      	ldr	r3, [pc, #268]	; (8001e0c <main+0x37c>)
 8001d00:	801a      	strh	r2, [r3, #0]

	  SPWM_modulacja();
 8001d02:	f7ff f99f 	bl	8001044 <SPWM_modulacja>

	  if(czas_100ms==1)
 8001d06:	4b42      	ldr	r3, [pc, #264]	; (8001e10 <main+0x380>)
 8001d08:	881b      	ldrh	r3, [r3, #0]
 8001d0a:	b29b      	uxth	r3, r3
 8001d0c:	2b01      	cmp	r3, #1
 8001d0e:	d119      	bne.n	8001d44 <main+0x2b4>
	  {
		  //bufor_tx[0]='$'; // synchro
		  bufor_tx[1]=rpm_speed>>8;
 8001d10:	4b40      	ldr	r3, [pc, #256]	; (8001e14 <main+0x384>)
 8001d12:	881b      	ldrh	r3, [r3, #0]
 8001d14:	b21b      	sxth	r3, r3
 8001d16:	121b      	asrs	r3, r3, #8
 8001d18:	b21b      	sxth	r3, r3
 8001d1a:	b2da      	uxtb	r2, r3
 8001d1c:	4b3e      	ldr	r3, [pc, #248]	; (8001e18 <main+0x388>)
 8001d1e:	705a      	strb	r2, [r3, #1]
		  bufor_tx[2]=rpm_speed;
 8001d20:	4b3c      	ldr	r3, [pc, #240]	; (8001e14 <main+0x384>)
 8001d22:	881b      	ldrh	r3, [r3, #0]
 8001d24:	b21b      	sxth	r3, r3
 8001d26:	b2da      	uxtb	r2, r3
 8001d28:	4b3b      	ldr	r3, [pc, #236]	; (8001e18 <main+0x388>)
 8001d2a:	709a      	strb	r2, [r3, #2]
		  bufor_tx[0]=0x55;
 8001d2c:	4b3a      	ldr	r3, [pc, #232]	; (8001e18 <main+0x388>)
 8001d2e:	2255      	movs	r2, #85	; 0x55
 8001d30:	701a      	strb	r2, [r3, #0]
		  HAL_UART_Transmit(&huart1,bufor_tx , 3, 1);
 8001d32:	2301      	movs	r3, #1
 8001d34:	2203      	movs	r2, #3
 8001d36:	4938      	ldr	r1, [pc, #224]	; (8001e18 <main+0x388>)
 8001d38:	4838      	ldr	r0, [pc, #224]	; (8001e1c <main+0x38c>)
 8001d3a:	f008 fdd2 	bl	800a8e2 <HAL_UART_Transmit>
		  czas_100ms=0;
 8001d3e:	4b34      	ldr	r3, [pc, #208]	; (8001e10 <main+0x380>)
 8001d40:	2200      	movs	r2, #0
 8001d42:	801a      	strh	r2, [r3, #0]
	  }

kierunek2=(TIM2->CR1)&0x10;
 8001d44:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	b29b      	uxth	r3, r3
 8001d4c:	f003 0310 	and.w	r3, r3, #16
 8001d50:	b29a      	uxth	r2, r3
 8001d52:	4b33      	ldr	r3, [pc, #204]	; (8001e20 <main+0x390>)
 8001d54:	801a      	strh	r2, [r3, #0]
kierunek=kierunek2;
 8001d56:	4b32      	ldr	r3, [pc, #200]	; (8001e20 <main+0x390>)
 8001d58:	881b      	ldrh	r3, [r3, #0]
 8001d5a:	b29a      	uxth	r2, r3
 8001d5c:	4b31      	ldr	r3, [pc, #196]	; (8001e24 <main+0x394>)
 8001d5e:	801a      	strh	r2, [r3, #0]

	 	   if(PI_regul_on==0)
 8001d60:	4b31      	ldr	r3, [pc, #196]	; (8001e28 <main+0x398>)
 8001d62:	781b      	ldrb	r3, [r3, #0]
 8001d64:	b2db      	uxtb	r3, r3
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d10b      	bne.n	8001d82 <main+0x2f2>
	 	  		  {
	 	  		    //PI_duty=duty;
	 	  		  	PI_out =0;
 8001d6a:	4b30      	ldr	r3, [pc, #192]	; (8001e2c <main+0x39c>)
 8001d6c:	2200      	movs	r2, #0
 8001d6e:	601a      	str	r2, [r3, #0]
	 	  		 	PI_speed_error =0;
 8001d70:	4b2f      	ldr	r3, [pc, #188]	; (8001e30 <main+0x3a0>)
 8001d72:	2200      	movs	r2, #0
 8001d74:	601a      	str	r2, [r3, #0]
	 	  		 	PI_speed_error_sum =0 ;
 8001d76:	4b2f      	ldr	r3, [pc, #188]	; (8001e34 <main+0x3a4>)
 8001d78:	2200      	movs	r2, #0
 8001d7a:	601a      	str	r2, [r3, #0]
	 	  		 	PI_out_regul =0 ;
 8001d7c:	4b2e      	ldr	r3, [pc, #184]	; (8001e38 <main+0x3a8>)
 8001d7e:	2200      	movs	r2, #0
 8001d80:	601a      	str	r2, [r3, #0]

	 	  		  }
	 	  	  if(prad_q==0){f=5000;}
 8001d82:	4b2e      	ldr	r3, [pc, #184]	; (8001e3c <main+0x3ac>)
 8001d84:	881b      	ldrh	r3, [r3, #0]
 8001d86:	b21b      	sxth	r3, r3
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	e059      	b.n	8001e40 <main+0x3b0>
 8001d8c:	f3af 8000 	nop.w
 8001d90:	51eb851f 	.word	0x51eb851f
 8001d94:	40091eb8 	.word	0x40091eb8
 8001d98:	200004bc 	.word	0x200004bc
 8001d9c:	40668000 	.word	0x40668000
 8001da0:	200004d4 	.word	0x200004d4
 8001da4:	2000108c 	.word	0x2000108c
 8001da8:	20000274 	.word	0x20000274
 8001dac:	20000026 	.word	0x20000026
 8001db0:	2000049c 	.word	0x2000049c
 8001db4:	20000024 	.word	0x20000024
 8001db8:	2000049a 	.word	0x2000049a
 8001dbc:	20000022 	.word	0x20000022
 8001dc0:	20000498 	.word	0x20000498
 8001dc4:	200002d8 	.word	0x200002d8
 8001dc8:	20000324 	.word	0x20000324
 8001dcc:	20000028 	.word	0x20000028
 8001dd0:	48000c00 	.word	0x48000c00
 8001dd4:	200004a0 	.word	0x200004a0
 8001dd8:	20000078 	.word	0x20000078
 8001ddc:	200000fc 	.word	0x200000fc
 8001de0:	200000d8 	.word	0x200000d8
 8001de4:	453b8000 	.word	0x453b8000
 8001de8:	3d4ccccd 	.word	0x3d4ccccd
 8001dec:	469c4000 	.word	0x469c4000
 8001df0:	200000ac 	.word	0x200000ac
 8001df4:	200000b0 	.word	0x200000b0
 8001df8:	200000d0 	.word	0x200000d0
 8001dfc:	200000ce 	.word	0x200000ce
 8001e00:	200000cc 	.word	0x200000cc
 8001e04:	200000c0 	.word	0x200000c0
 8001e08:	200000c2 	.word	0x200000c2
 8001e0c:	200000c4 	.word	0x200000c4
 8001e10:	20001c4e 	.word	0x20001c4e
 8001e14:	200000ca 	.word	0x200000ca
 8001e18:	20000034 	.word	0x20000034
 8001e1c:	20000408 	.word	0x20000408
 8001e20:	20001c46 	.word	0x20001c46
 8001e24:	20001c44 	.word	0x20001c44
 8001e28:	20000064 	.word	0x20000064
 8001e2c:	20000070 	.word	0x20000070
 8001e30:	20000068 	.word	0x20000068
 8001e34:	2000006c 	.word	0x2000006c
 8001e38:	20000074 	.word	0x20000074
 8001e3c:	200000a8 	.word	0x200000a8
 8001e40:	d104      	bne.n	8001e4c <main+0x3bc>
 8001e42:	4b05      	ldr	r3, [pc, #20]	; (8001e58 <main+0x3c8>)
 8001e44:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e48:	801a      	strh	r2, [r3, #0]
 8001e4a:	e735      	b.n	8001cb8 <main+0x228>
	 	  	  else{f=1000;}
 8001e4c:	4b02      	ldr	r3, [pc, #8]	; (8001e58 <main+0x3c8>)
 8001e4e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001e52:	801a      	strh	r2, [r3, #0]
	  SVPWM_modulacja(napiecie_Ualpha, napiecie_Ubeta, &U_SVPWM, &V_SVPWM, &W_SVPWM );
 8001e54:	e730      	b.n	8001cb8 <main+0x228>
 8001e56:	bf00      	nop
 8001e58:	200004d0 	.word	0x200004d0

08001e5c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001e5c:	b580      	push	{r7, lr}
 8001e5e:	b094      	sub	sp, #80	; 0x50
 8001e60:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001e62:	f107 0318 	add.w	r3, r7, #24
 8001e66:	2238      	movs	r2, #56	; 0x38
 8001e68:	2100      	movs	r1, #0
 8001e6a:	4618      	mov	r0, r3
 8001e6c:	f009 ff52 	bl	800bd14 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001e70:	1d3b      	adds	r3, r7, #4
 8001e72:	2200      	movs	r2, #0
 8001e74:	601a      	str	r2, [r3, #0]
 8001e76:	605a      	str	r2, [r3, #4]
 8001e78:	609a      	str	r2, [r3, #8]
 8001e7a:	60da      	str	r2, [r3, #12]
 8001e7c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8001e7e:	2000      	movs	r0, #0
 8001e80:	f004 fffa 	bl	8006e78 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001e84:	2302      	movs	r3, #2
 8001e86:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001e88:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001e8c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001e8e:	2340      	movs	r3, #64	; 0x40
 8001e90:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001e92:	2302      	movs	r3, #2
 8001e94:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001e96:	2302      	movs	r3, #2
 8001e98:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8001e9a:	2304      	movs	r3, #4
 8001e9c:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8001e9e:	2355      	movs	r3, #85	; 0x55
 8001ea0:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001ea2:	2302      	movs	r3, #2
 8001ea4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001ea6:	2302      	movs	r3, #2
 8001ea8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001eaa:	2302      	movs	r3, #2
 8001eac:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001eae:	f107 0318 	add.w	r3, r7, #24
 8001eb2:	4618      	mov	r0, r3
 8001eb4:	f005 f894 	bl	8006fe0 <HAL_RCC_OscConfig>
 8001eb8:	4603      	mov	r3, r0
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d001      	beq.n	8001ec2 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8001ebe:	f000 fee1 	bl	8002c84 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001ec2:	230f      	movs	r3, #15
 8001ec4:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001ec6:	2303      	movs	r3, #3
 8001ec8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001eca:	2300      	movs	r3, #0
 8001ecc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001ece:	2300      	movs	r3, #0
 8001ed0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001ed2:	2300      	movs	r3, #0
 8001ed4:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001ed6:	1d3b      	adds	r3, r7, #4
 8001ed8:	2104      	movs	r1, #4
 8001eda:	4618      	mov	r0, r3
 8001edc:	f005 fb98 	bl	8007610 <HAL_RCC_ClockConfig>
 8001ee0:	4603      	mov	r3, r0
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d001      	beq.n	8001eea <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8001ee6:	f000 fecd 	bl	8002c84 <Error_Handler>
  }
}
 8001eea:	bf00      	nop
 8001eec:	3750      	adds	r7, #80	; 0x50
 8001eee:	46bd      	mov	sp, r7
 8001ef0:	bd80      	pop	{r7, pc}
	...

08001ef4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001ef4:	b580      	push	{r7, lr}
 8001ef6:	b092      	sub	sp, #72	; 0x48
 8001ef8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8001efa:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001efe:	2200      	movs	r2, #0
 8001f00:	601a      	str	r2, [r3, #0]
 8001f02:	605a      	str	r2, [r3, #4]
 8001f04:	609a      	str	r2, [r3, #8]
  ADC_InjectionConfTypeDef sConfigInjected = {0};
 8001f06:	463b      	mov	r3, r7
 8001f08:	223c      	movs	r2, #60	; 0x3c
 8001f0a:	2100      	movs	r1, #0
 8001f0c:	4618      	mov	r0, r3
 8001f0e:	f009 ff01 	bl	800bd14 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001f12:	4b4e      	ldr	r3, [pc, #312]	; (800204c <MX_ADC1_Init+0x158>)
 8001f14:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8001f18:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV4;
 8001f1a:	4b4c      	ldr	r3, [pc, #304]	; (800204c <MX_ADC1_Init+0x158>)
 8001f1c:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8001f20:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001f22:	4b4a      	ldr	r3, [pc, #296]	; (800204c <MX_ADC1_Init+0x158>)
 8001f24:	2200      	movs	r2, #0
 8001f26:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001f28:	4b48      	ldr	r3, [pc, #288]	; (800204c <MX_ADC1_Init+0x158>)
 8001f2a:	2200      	movs	r2, #0
 8001f2c:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 8001f2e:	4b47      	ldr	r3, [pc, #284]	; (800204c <MX_ADC1_Init+0x158>)
 8001f30:	2200      	movs	r2, #0
 8001f32:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8001f34:	4b45      	ldr	r3, [pc, #276]	; (800204c <MX_ADC1_Init+0x158>)
 8001f36:	2201      	movs	r2, #1
 8001f38:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001f3a:	4b44      	ldr	r3, [pc, #272]	; (800204c <MX_ADC1_Init+0x158>)
 8001f3c:	2204      	movs	r2, #4
 8001f3e:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001f40:	4b42      	ldr	r3, [pc, #264]	; (800204c <MX_ADC1_Init+0x158>)
 8001f42:	2200      	movs	r2, #0
 8001f44:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001f46:	4b41      	ldr	r3, [pc, #260]	; (800204c <MX_ADC1_Init+0x158>)
 8001f48:	2200      	movs	r2, #0
 8001f4a:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 8001f4c:	4b3f      	ldr	r3, [pc, #252]	; (800204c <MX_ADC1_Init+0x158>)
 8001f4e:	2201      	movs	r2, #1
 8001f50:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001f52:	4b3e      	ldr	r3, [pc, #248]	; (800204c <MX_ADC1_Init+0x158>)
 8001f54:	2200      	movs	r2, #0
 8001f56:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001f5a:	4b3c      	ldr	r3, [pc, #240]	; (800204c <MX_ADC1_Init+0x158>)
 8001f5c:	2200      	movs	r2, #0
 8001f5e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001f62:	4b3a      	ldr	r3, [pc, #232]	; (800204c <MX_ADC1_Init+0x158>)
 8001f64:	2200      	movs	r2, #0
 8001f66:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8001f68:	4b38      	ldr	r3, [pc, #224]	; (800204c <MX_ADC1_Init+0x158>)
 8001f6a:	2200      	movs	r2, #0
 8001f6c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001f70:	4836      	ldr	r0, [pc, #216]	; (800204c <MX_ADC1_Init+0x158>)
 8001f72:	f001 ff7d 	bl	8003e70 <HAL_ADC_Init>
 8001f76:	4603      	mov	r3, r0
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d001      	beq.n	8001f80 <MX_ADC1_Init+0x8c>
  {
    Error_Handler();
 8001f7c:	f000 fe82 	bl	8002c84 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8001f80:	2300      	movs	r3, #0
 8001f82:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8001f84:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001f88:	4619      	mov	r1, r3
 8001f8a:	4830      	ldr	r0, [pc, #192]	; (800204c <MX_ADC1_Init+0x158>)
 8001f8c:	f003 ff28 	bl	8005de0 <HAL_ADCEx_MultiModeConfigChannel>
 8001f90:	4603      	mov	r3, r0
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d001      	beq.n	8001f9a <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 8001f96:	f000 fe75 	bl	8002c84 <Error_Handler>
  }

  /** Configure Injected Channel
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_1;
 8001f9a:	4b2d      	ldr	r3, [pc, #180]	; (8002050 <MX_ADC1_Init+0x15c>)
 8001f9c:	603b      	str	r3, [r7, #0]
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_1;
 8001f9e:	2309      	movs	r3, #9
 8001fa0:	607b      	str	r3, [r7, #4]
  sConfigInjected.InjectedSamplingTime = ADC_SAMPLETIME_12CYCLES_5;
 8001fa2:	2302      	movs	r3, #2
 8001fa4:	60bb      	str	r3, [r7, #8]
  sConfigInjected.InjectedSingleDiff = ADC_SINGLE_ENDED;
 8001fa6:	237f      	movs	r3, #127	; 0x7f
 8001fa8:	60fb      	str	r3, [r7, #12]
  sConfigInjected.InjectedOffsetNumber = ADC_OFFSET_NONE;
 8001faa:	2304      	movs	r3, #4
 8001fac:	613b      	str	r3, [r7, #16]
  sConfigInjected.InjectedOffset = 0;
 8001fae:	2300      	movs	r3, #0
 8001fb0:	617b      	str	r3, [r7, #20]
  sConfigInjected.InjectedNbrOfConversion = 4;
 8001fb2:	2304      	movs	r3, #4
 8001fb4:	623b      	str	r3, [r7, #32]
  sConfigInjected.InjectedDiscontinuousConvMode = DISABLE;
 8001fb6:	2300      	movs	r3, #0
 8001fb8:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  sConfigInjected.AutoInjectedConv = DISABLE;
 8001fbc:	2300      	movs	r3, #0
 8001fbe:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  sConfigInjected.QueueInjectedContext = DISABLE;
 8001fc2:	2300      	movs	r3, #0
 8001fc4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  sConfigInjected.ExternalTrigInjecConv = ADC_EXTERNALTRIGINJEC_T1_CC4;
 8001fc8:	2384      	movs	r3, #132	; 0x84
 8001fca:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigInjected.ExternalTrigInjecConvEdge = ADC_EXTERNALTRIGINJECCONV_EDGE_RISING;
 8001fcc:	2380      	movs	r3, #128	; 0x80
 8001fce:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigInjected.InjecOversamplingMode = DISABLE;
 8001fd0:	2300      	movs	r3, #0
 8001fd2:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 8001fd6:	463b      	mov	r3, r7
 8001fd8:	4619      	mov	r1, r3
 8001fda:	481c      	ldr	r0, [pc, #112]	; (800204c <MX_ADC1_Init+0x158>)
 8001fdc:	f003 fa20 	bl	8005420 <HAL_ADCEx_InjectedConfigChannel>
 8001fe0:	4603      	mov	r3, r0
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d001      	beq.n	8001fea <MX_ADC1_Init+0xf6>
  {
    Error_Handler();
 8001fe6:	f000 fe4d 	bl	8002c84 <Error_Handler>
  }

  /** Configure Injected Channel
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_2;
 8001fea:	4b1a      	ldr	r3, [pc, #104]	; (8002054 <MX_ADC1_Init+0x160>)
 8001fec:	603b      	str	r3, [r7, #0]
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_2;
 8001fee:	f240 130f 	movw	r3, #271	; 0x10f
 8001ff2:	607b      	str	r3, [r7, #4]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 8001ff4:	463b      	mov	r3, r7
 8001ff6:	4619      	mov	r1, r3
 8001ff8:	4814      	ldr	r0, [pc, #80]	; (800204c <MX_ADC1_Init+0x158>)
 8001ffa:	f003 fa11 	bl	8005420 <HAL_ADCEx_InjectedConfigChannel>
 8001ffe:	4603      	mov	r3, r0
 8002000:	2b00      	cmp	r3, #0
 8002002:	d001      	beq.n	8002008 <MX_ADC1_Init+0x114>
  {
    Error_Handler();
 8002004:	f000 fe3e 	bl	8002c84 <Error_Handler>
  }

  /** Configure Injected Channel
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_6;
 8002008:	4b13      	ldr	r3, [pc, #76]	; (8002058 <MX_ADC1_Init+0x164>)
 800200a:	603b      	str	r3, [r7, #0]
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_3;
 800200c:	f240 2315 	movw	r3, #533	; 0x215
 8002010:	607b      	str	r3, [r7, #4]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 8002012:	463b      	mov	r3, r7
 8002014:	4619      	mov	r1, r3
 8002016:	480d      	ldr	r0, [pc, #52]	; (800204c <MX_ADC1_Init+0x158>)
 8002018:	f003 fa02 	bl	8005420 <HAL_ADCEx_InjectedConfigChannel>
 800201c:	4603      	mov	r3, r0
 800201e:	2b00      	cmp	r3, #0
 8002020:	d001      	beq.n	8002026 <MX_ADC1_Init+0x132>
  {
    Error_Handler();
 8002022:	f000 fe2f 	bl	8002c84 <Error_Handler>
  }

  /** Configure Injected Channel
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_7;
 8002026:	4b0d      	ldr	r3, [pc, #52]	; (800205c <MX_ADC1_Init+0x168>)
 8002028:	603b      	str	r3, [r7, #0]
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_4;
 800202a:	f240 331b 	movw	r3, #795	; 0x31b
 800202e:	607b      	str	r3, [r7, #4]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 8002030:	463b      	mov	r3, r7
 8002032:	4619      	mov	r1, r3
 8002034:	4805      	ldr	r0, [pc, #20]	; (800204c <MX_ADC1_Init+0x158>)
 8002036:	f003 f9f3 	bl	8005420 <HAL_ADCEx_InjectedConfigChannel>
 800203a:	4603      	mov	r3, r0
 800203c:	2b00      	cmp	r3, #0
 800203e:	d001      	beq.n	8002044 <MX_ADC1_Init+0x150>
  {
    Error_Handler();
 8002040:	f000 fe20 	bl	8002c84 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8002044:	bf00      	nop
 8002046:	3748      	adds	r7, #72	; 0x48
 8002048:	46bd      	mov	sp, r7
 800204a:	bd80      	pop	{r7, pc}
 800204c:	200000fc 	.word	0x200000fc
 8002050:	04300002 	.word	0x04300002
 8002054:	08600004 	.word	0x08600004
 8002058:	19200040 	.word	0x19200040
 800205c:	1d500080 	.word	0x1d500080

08002060 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8002060:	b580      	push	{r7, lr}
 8002062:	b088      	sub	sp, #32
 8002064:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8002066:	463b      	mov	r3, r7
 8002068:	2220      	movs	r2, #32
 800206a:	2100      	movs	r1, #0
 800206c:	4618      	mov	r0, r3
 800206e:	f009 fe51 	bl	800bd14 <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8002072:	4b2c      	ldr	r3, [pc, #176]	; (8002124 <MX_ADC2_Init+0xc4>)
 8002074:	4a2c      	ldr	r2, [pc, #176]	; (8002128 <MX_ADC2_Init+0xc8>)
 8002076:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV4;
 8002078:	4b2a      	ldr	r3, [pc, #168]	; (8002124 <MX_ADC2_Init+0xc4>)
 800207a:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800207e:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8002080:	4b28      	ldr	r3, [pc, #160]	; (8002124 <MX_ADC2_Init+0xc4>)
 8002082:	2200      	movs	r2, #0
 8002084:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002086:	4b27      	ldr	r3, [pc, #156]	; (8002124 <MX_ADC2_Init+0xc4>)
 8002088:	2200      	movs	r2, #0
 800208a:	60da      	str	r2, [r3, #12]
  hadc2.Init.GainCompensation = 0;
 800208c:	4b25      	ldr	r3, [pc, #148]	; (8002124 <MX_ADC2_Init+0xc4>)
 800208e:	2200      	movs	r2, #0
 8002090:	611a      	str	r2, [r3, #16]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8002092:	4b24      	ldr	r3, [pc, #144]	; (8002124 <MX_ADC2_Init+0xc4>)
 8002094:	2200      	movs	r2, #0
 8002096:	615a      	str	r2, [r3, #20]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002098:	4b22      	ldr	r3, [pc, #136]	; (8002124 <MX_ADC2_Init+0xc4>)
 800209a:	2204      	movs	r2, #4
 800209c:	619a      	str	r2, [r3, #24]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 800209e:	4b21      	ldr	r3, [pc, #132]	; (8002124 <MX_ADC2_Init+0xc4>)
 80020a0:	2200      	movs	r2, #0
 80020a2:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ContinuousConvMode = DISABLE;
 80020a4:	4b1f      	ldr	r3, [pc, #124]	; (8002124 <MX_ADC2_Init+0xc4>)
 80020a6:	2200      	movs	r2, #0
 80020a8:	775a      	strb	r2, [r3, #29]
  hadc2.Init.NbrOfConversion = 1;
 80020aa:	4b1e      	ldr	r3, [pc, #120]	; (8002124 <MX_ADC2_Init+0xc4>)
 80020ac:	2201      	movs	r2, #1
 80020ae:	621a      	str	r2, [r3, #32]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 80020b0:	4b1c      	ldr	r3, [pc, #112]	; (8002124 <MX_ADC2_Init+0xc4>)
 80020b2:	2200      	movs	r2, #0
 80020b4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc2.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T6_TRGO;
 80020b8:	4b1a      	ldr	r3, [pc, #104]	; (8002124 <MX_ADC2_Init+0xc4>)
 80020ba:	f44f 62b4 	mov.w	r2, #1440	; 0x5a0
 80020be:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 80020c0:	4b18      	ldr	r3, [pc, #96]	; (8002124 <MX_ADC2_Init+0xc4>)
 80020c2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80020c6:	631a      	str	r2, [r3, #48]	; 0x30
  hadc2.Init.DMAContinuousRequests = DISABLE;
 80020c8:	4b16      	ldr	r3, [pc, #88]	; (8002124 <MX_ADC2_Init+0xc4>)
 80020ca:	2200      	movs	r2, #0
 80020cc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80020d0:	4b14      	ldr	r3, [pc, #80]	; (8002124 <MX_ADC2_Init+0xc4>)
 80020d2:	2200      	movs	r2, #0
 80020d4:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc2.Init.OversamplingMode = DISABLE;
 80020d6:	4b13      	ldr	r3, [pc, #76]	; (8002124 <MX_ADC2_Init+0xc4>)
 80020d8:	2200      	movs	r2, #0
 80020da:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80020de:	4811      	ldr	r0, [pc, #68]	; (8002124 <MX_ADC2_Init+0xc4>)
 80020e0:	f001 fec6 	bl	8003e70 <HAL_ADC_Init>
 80020e4:	4603      	mov	r3, r0
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d001      	beq.n	80020ee <MX_ADC2_Init+0x8e>
  {
    Error_Handler();
 80020ea:	f000 fdcb 	bl	8002c84 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 80020ee:	4b0f      	ldr	r3, [pc, #60]	; (800212c <MX_ADC2_Init+0xcc>)
 80020f0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80020f2:	2306      	movs	r3, #6
 80020f4:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80020f6:	2300      	movs	r3, #0
 80020f8:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80020fa:	237f      	movs	r3, #127	; 0x7f
 80020fc:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80020fe:	2304      	movs	r3, #4
 8002100:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8002102:	2300      	movs	r3, #0
 8002104:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8002106:	463b      	mov	r3, r7
 8002108:	4619      	mov	r1, r3
 800210a:	4806      	ldr	r0, [pc, #24]	; (8002124 <MX_ADC2_Init+0xc4>)
 800210c:	f002 fa72 	bl	80045f4 <HAL_ADC_ConfigChannel>
 8002110:	4603      	mov	r3, r0
 8002112:	2b00      	cmp	r3, #0
 8002114:	d001      	beq.n	800211a <MX_ADC2_Init+0xba>
  {
    Error_Handler();
 8002116:	f000 fdb5 	bl	8002c84 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 800211a:	bf00      	nop
 800211c:	3720      	adds	r7, #32
 800211e:	46bd      	mov	sp, r7
 8002120:	bd80      	pop	{r7, pc}
 8002122:	bf00      	nop
 8002124:	20000168 	.word	0x20000168
 8002128:	50000100 	.word	0x50000100
 800212c:	21800100 	.word	0x21800100

08002130 <MX_CORDIC_Init>:
  * @brief CORDIC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CORDIC_Init(void)
{
 8002130:	b580      	push	{r7, lr}
 8002132:	af00      	add	r7, sp, #0
  /* USER CODE END CORDIC_Init 0 */

  /* USER CODE BEGIN CORDIC_Init 1 */

  /* USER CODE END CORDIC_Init 1 */
  hcordic.Instance = CORDIC;
 8002134:	4b06      	ldr	r3, [pc, #24]	; (8002150 <MX_CORDIC_Init+0x20>)
 8002136:	4a07      	ldr	r2, [pc, #28]	; (8002154 <MX_CORDIC_Init+0x24>)
 8002138:	601a      	str	r2, [r3, #0]
  if (HAL_CORDIC_Init(&hcordic) != HAL_OK)
 800213a:	4805      	ldr	r0, [pc, #20]	; (8002150 <MX_CORDIC_Init+0x20>)
 800213c:	f003 fef4 	bl	8005f28 <HAL_CORDIC_Init>
 8002140:	4603      	mov	r3, r0
 8002142:	2b00      	cmp	r3, #0
 8002144:	d001      	beq.n	800214a <MX_CORDIC_Init+0x1a>
  {
    Error_Handler();
 8002146:	f000 fd9d 	bl	8002c84 <Error_Handler>
  }
  /* USER CODE BEGIN CORDIC_Init 2 */

  /* USER CODE END CORDIC_Init 2 */

}
 800214a:	bf00      	nop
 800214c:	bd80      	pop	{r7, pc}
 800214e:	bf00      	nop
 8002150:	200001d4 	.word	0x200001d4
 8002154:	40020c00 	.word	0x40020c00

08002158 <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 8002158:	b580      	push	{r7, lr}
 800215a:	b08c      	sub	sp, #48	; 0x30
 800215c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 800215e:	463b      	mov	r3, r7
 8002160:	2230      	movs	r2, #48	; 0x30
 8002162:	2100      	movs	r1, #0
 8002164:	4618      	mov	r0, r3
 8002166:	f009 fdd5 	bl	800bd14 <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 800216a:	4b16      	ldr	r3, [pc, #88]	; (80021c4 <MX_DAC1_Init+0x6c>)
 800216c:	4a16      	ldr	r2, [pc, #88]	; (80021c8 <MX_DAC1_Init+0x70>)
 800216e:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8002170:	4814      	ldr	r0, [pc, #80]	; (80021c4 <MX_DAC1_Init+0x6c>)
 8002172:	f004 f81a 	bl	80061aa <HAL_DAC_Init>
 8002176:	4603      	mov	r3, r0
 8002178:	2b00      	cmp	r3, #0
 800217a:	d001      	beq.n	8002180 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 800217c:	f000 fd82 	bl	8002c84 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC;
 8002180:	2302      	movs	r3, #2
 8002182:	603b      	str	r3, [r7, #0]
  sConfig.DAC_DMADoubleDataMode = DISABLE;
 8002184:	2300      	movs	r3, #0
 8002186:	713b      	strb	r3, [r7, #4]
  sConfig.DAC_SignedFormat = DISABLE;
 8002188:	2300      	movs	r3, #0
 800218a:	717b      	strb	r3, [r7, #5]
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 800218c:	2300      	movs	r3, #0
 800218e:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_Trigger = DAC_TRIGGER_SOFTWARE;
 8002190:	2302      	movs	r3, #2
 8002192:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 8002194:	2300      	movs	r3, #0
 8002196:	613b      	str	r3, [r7, #16]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8002198:	2300      	movs	r3, #0
 800219a:	617b      	str	r3, [r7, #20]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_EXTERNAL;
 800219c:	2301      	movs	r3, #1
 800219e:	61bb      	str	r3, [r7, #24]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 80021a0:	2300      	movs	r3, #0
 80021a2:	61fb      	str	r3, [r7, #28]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 80021a4:	463b      	mov	r3, r7
 80021a6:	2200      	movs	r2, #0
 80021a8:	4619      	mov	r1, r3
 80021aa:	4806      	ldr	r0, [pc, #24]	; (80021c4 <MX_DAC1_Init+0x6c>)
 80021ac:	f004 f884 	bl	80062b8 <HAL_DAC_ConfigChannel>
 80021b0:	4603      	mov	r3, r0
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d001      	beq.n	80021ba <MX_DAC1_Init+0x62>
  {
    Error_Handler();
 80021b6:	f000 fd65 	bl	8002c84 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 80021ba:	bf00      	nop
 80021bc:	3730      	adds	r7, #48	; 0x30
 80021be:	46bd      	mov	sp, r7
 80021c0:	bd80      	pop	{r7, pc}
 80021c2:	bf00      	nop
 80021c4:	200001fc 	.word	0x200001fc
 80021c8:	50000800 	.word	0x50000800

080021cc <MX_FDCAN1_Init>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 80021cc:	b580      	push	{r7, lr}
 80021ce:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 80021d0:	4b1f      	ldr	r3, [pc, #124]	; (8002250 <MX_FDCAN1_Init+0x84>)
 80021d2:	4a20      	ldr	r2, [pc, #128]	; (8002254 <MX_FDCAN1_Init+0x88>)
 80021d4:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 80021d6:	4b1e      	ldr	r3, [pc, #120]	; (8002250 <MX_FDCAN1_Init+0x84>)
 80021d8:	2200      	movs	r2, #0
 80021da:	605a      	str	r2, [r3, #4]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 80021dc:	4b1c      	ldr	r3, [pc, #112]	; (8002250 <MX_FDCAN1_Init+0x84>)
 80021de:	2200      	movs	r2, #0
 80021e0:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 80021e2:	4b1b      	ldr	r3, [pc, #108]	; (8002250 <MX_FDCAN1_Init+0x84>)
 80021e4:	2200      	movs	r2, #0
 80021e6:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 80021e8:	4b19      	ldr	r3, [pc, #100]	; (8002250 <MX_FDCAN1_Init+0x84>)
 80021ea:	2200      	movs	r2, #0
 80021ec:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 80021ee:	4b18      	ldr	r3, [pc, #96]	; (8002250 <MX_FDCAN1_Init+0x84>)
 80021f0:	2200      	movs	r2, #0
 80021f2:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 80021f4:	4b16      	ldr	r3, [pc, #88]	; (8002250 <MX_FDCAN1_Init+0x84>)
 80021f6:	2200      	movs	r2, #0
 80021f8:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 16;
 80021fa:	4b15      	ldr	r3, [pc, #84]	; (8002250 <MX_FDCAN1_Init+0x84>)
 80021fc:	2210      	movs	r2, #16
 80021fe:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 8002200:	4b13      	ldr	r3, [pc, #76]	; (8002250 <MX_FDCAN1_Init+0x84>)
 8002202:	2201      	movs	r2, #1
 8002204:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 2;
 8002206:	4b12      	ldr	r3, [pc, #72]	; (8002250 <MX_FDCAN1_Init+0x84>)
 8002208:	2202      	movs	r2, #2
 800220a:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 2;
 800220c:	4b10      	ldr	r3, [pc, #64]	; (8002250 <MX_FDCAN1_Init+0x84>)
 800220e:	2202      	movs	r2, #2
 8002210:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 8002212:	4b0f      	ldr	r3, [pc, #60]	; (8002250 <MX_FDCAN1_Init+0x84>)
 8002214:	2201      	movs	r2, #1
 8002216:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 8002218:	4b0d      	ldr	r3, [pc, #52]	; (8002250 <MX_FDCAN1_Init+0x84>)
 800221a:	2201      	movs	r2, #1
 800221c:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan1.Init.DataTimeSeg1 = 1;
 800221e:	4b0c      	ldr	r3, [pc, #48]	; (8002250 <MX_FDCAN1_Init+0x84>)
 8002220:	2201      	movs	r2, #1
 8002222:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan1.Init.DataTimeSeg2 = 1;
 8002224:	4b0a      	ldr	r3, [pc, #40]	; (8002250 <MX_FDCAN1_Init+0x84>)
 8002226:	2201      	movs	r2, #1
 8002228:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan1.Init.StdFiltersNbr = 0;
 800222a:	4b09      	ldr	r3, [pc, #36]	; (8002250 <MX_FDCAN1_Init+0x84>)
 800222c:	2200      	movs	r2, #0
 800222e:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan1.Init.ExtFiltersNbr = 0;
 8002230:	4b07      	ldr	r3, [pc, #28]	; (8002250 <MX_FDCAN1_Init+0x84>)
 8002232:	2200      	movs	r2, #0
 8002234:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8002236:	4b06      	ldr	r3, [pc, #24]	; (8002250 <MX_FDCAN1_Init+0x84>)
 8002238:	2200      	movs	r2, #0
 800223a:	63da      	str	r2, [r3, #60]	; 0x3c
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 800223c:	4804      	ldr	r0, [pc, #16]	; (8002250 <MX_FDCAN1_Init+0x84>)
 800223e:	f004 faad 	bl	800679c <HAL_FDCAN_Init>
 8002242:	4603      	mov	r3, r0
 8002244:	2b00      	cmp	r3, #0
 8002246:	d001      	beq.n	800224c <MX_FDCAN1_Init+0x80>
  {
    Error_Handler();
 8002248:	f000 fd1c 	bl	8002c84 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 800224c:	bf00      	nop
 800224e:	bd80      	pop	{r7, pc}
 8002250:	20000210 	.word	0x20000210
 8002254:	40006400 	.word	0x40006400

08002258 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8002258:	b580      	push	{r7, lr}
 800225a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 800225c:	4b1b      	ldr	r3, [pc, #108]	; (80022cc <MX_SPI3_Init+0x74>)
 800225e:	4a1c      	ldr	r2, [pc, #112]	; (80022d0 <MX_SPI3_Init+0x78>)
 8002260:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8002262:	4b1a      	ldr	r3, [pc, #104]	; (80022cc <MX_SPI3_Init+0x74>)
 8002264:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002268:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 800226a:	4b18      	ldr	r3, [pc, #96]	; (80022cc <MX_SPI3_Init+0x74>)
 800226c:	2200      	movs	r2, #0
 800226e:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_16BIT;
 8002270:	4b16      	ldr	r3, [pc, #88]	; (80022cc <MX_SPI3_Init+0x74>)
 8002272:	f44f 6270 	mov.w	r2, #3840	; 0xf00
 8002276:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002278:	4b14      	ldr	r3, [pc, #80]	; (80022cc <MX_SPI3_Init+0x74>)
 800227a:	2200      	movs	r2, #0
 800227c:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_2EDGE;
 800227e:	4b13      	ldr	r3, [pc, #76]	; (80022cc <MX_SPI3_Init+0x74>)
 8002280:	2201      	movs	r2, #1
 8002282:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8002284:	4b11      	ldr	r3, [pc, #68]	; (80022cc <MX_SPI3_Init+0x74>)
 8002286:	f44f 7200 	mov.w	r2, #512	; 0x200
 800228a:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 800228c:	4b0f      	ldr	r3, [pc, #60]	; (80022cc <MX_SPI3_Init+0x74>)
 800228e:	2218      	movs	r2, #24
 8002290:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002292:	4b0e      	ldr	r3, [pc, #56]	; (80022cc <MX_SPI3_Init+0x74>)
 8002294:	2200      	movs	r2, #0
 8002296:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8002298:	4b0c      	ldr	r3, [pc, #48]	; (80022cc <MX_SPI3_Init+0x74>)
 800229a:	2200      	movs	r2, #0
 800229c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800229e:	4b0b      	ldr	r3, [pc, #44]	; (80022cc <MX_SPI3_Init+0x74>)
 80022a0:	2200      	movs	r2, #0
 80022a2:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 80022a4:	4b09      	ldr	r3, [pc, #36]	; (80022cc <MX_SPI3_Init+0x74>)
 80022a6:	2207      	movs	r2, #7
 80022a8:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80022aa:	4b08      	ldr	r3, [pc, #32]	; (80022cc <MX_SPI3_Init+0x74>)
 80022ac:	2200      	movs	r2, #0
 80022ae:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 80022b0:	4b06      	ldr	r3, [pc, #24]	; (80022cc <MX_SPI3_Init+0x74>)
 80022b2:	2200      	movs	r2, #0
 80022b4:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 80022b6:	4805      	ldr	r0, [pc, #20]	; (80022cc <MX_SPI3_Init+0x74>)
 80022b8:	f005 fdb6 	bl	8007e28 <HAL_SPI_Init>
 80022bc:	4603      	mov	r3, r0
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d001      	beq.n	80022c6 <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 80022c2:	f000 fcdf 	bl	8002c84 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 80022c6:	bf00      	nop
 80022c8:	bd80      	pop	{r7, pc}
 80022ca:	bf00      	nop
 80022cc:	20000274 	.word	0x20000274
 80022d0:	40003c00 	.word	0x40003c00

080022d4 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80022d4:	b580      	push	{r7, lr}
 80022d6:	b09c      	sub	sp, #112	; 0x70
 80022d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80022da:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80022de:	2200      	movs	r2, #0
 80022e0:	601a      	str	r2, [r3, #0]
 80022e2:	605a      	str	r2, [r3, #4]
 80022e4:	609a      	str	r2, [r3, #8]
 80022e6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80022e8:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80022ec:	2200      	movs	r2, #0
 80022ee:	601a      	str	r2, [r3, #0]
 80022f0:	605a      	str	r2, [r3, #4]
 80022f2:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80022f4:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80022f8:	2200      	movs	r2, #0
 80022fa:	601a      	str	r2, [r3, #0]
 80022fc:	605a      	str	r2, [r3, #4]
 80022fe:	609a      	str	r2, [r3, #8]
 8002300:	60da      	str	r2, [r3, #12]
 8002302:	611a      	str	r2, [r3, #16]
 8002304:	615a      	str	r2, [r3, #20]
 8002306:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002308:	1d3b      	adds	r3, r7, #4
 800230a:	2234      	movs	r2, #52	; 0x34
 800230c:	2100      	movs	r1, #0
 800230e:	4618      	mov	r0, r3
 8002310:	f009 fd00 	bl	800bd14 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002314:	4b5b      	ldr	r3, [pc, #364]	; (8002484 <MX_TIM1_Init+0x1b0>)
 8002316:	4a5c      	ldr	r2, [pc, #368]	; (8002488 <MX_TIM1_Init+0x1b4>)
 8002318:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 7;
 800231a:	4b5a      	ldr	r3, [pc, #360]	; (8002484 <MX_TIM1_Init+0x1b0>)
 800231c:	2207      	movs	r2, #7
 800231e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 8002320:	4b58      	ldr	r3, [pc, #352]	; (8002484 <MX_TIM1_Init+0x1b0>)
 8002322:	2220      	movs	r2, #32
 8002324:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000;
 8002326:	4b57      	ldr	r3, [pc, #348]	; (8002484 <MX_TIM1_Init+0x1b0>)
 8002328:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800232c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800232e:	4b55      	ldr	r3, [pc, #340]	; (8002484 <MX_TIM1_Init+0x1b0>)
 8002330:	2200      	movs	r2, #0
 8002332:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002334:	4b53      	ldr	r3, [pc, #332]	; (8002484 <MX_TIM1_Init+0x1b0>)
 8002336:	2200      	movs	r2, #0
 8002338:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800233a:	4b52      	ldr	r3, [pc, #328]	; (8002484 <MX_TIM1_Init+0x1b0>)
 800233c:	2200      	movs	r2, #0
 800233e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8002340:	4850      	ldr	r0, [pc, #320]	; (8002484 <MX_TIM1_Init+0x1b0>)
 8002342:	f006 fc89 	bl	8008c58 <HAL_TIM_Base_Init>
 8002346:	4603      	mov	r3, r0
 8002348:	2b00      	cmp	r3, #0
 800234a:	d001      	beq.n	8002350 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 800234c:	f000 fc9a 	bl	8002c84 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002350:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002354:	663b      	str	r3, [r7, #96]	; 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8002356:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800235a:	4619      	mov	r1, r3
 800235c:	4849      	ldr	r0, [pc, #292]	; (8002484 <MX_TIM1_Init+0x1b0>)
 800235e:	f007 fa67 	bl	8009830 <HAL_TIM_ConfigClockSource>
 8002362:	4603      	mov	r3, r0
 8002364:	2b00      	cmp	r3, #0
 8002366:	d001      	beq.n	800236c <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8002368:	f000 fc8c 	bl	8002c84 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800236c:	4845      	ldr	r0, [pc, #276]	; (8002484 <MX_TIM1_Init+0x1b0>)
 800236e:	f006 fcca 	bl	8008d06 <HAL_TIM_PWM_Init>
 8002372:	4603      	mov	r3, r0
 8002374:	2b00      	cmp	r3, #0
 8002376:	d001      	beq.n	800237c <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8002378:	f000 fc84 	bl	8002c84 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC4REF;
 800237c:	2370      	movs	r3, #112	; 0x70
 800237e:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_OC4REF;
 8002380:	f44f 03e0 	mov.w	r3, #7340032	; 0x700000
 8002384:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002386:	2300      	movs	r3, #0
 8002388:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800238a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800238e:	4619      	mov	r1, r3
 8002390:	483c      	ldr	r0, [pc, #240]	; (8002484 <MX_TIM1_Init+0x1b0>)
 8002392:	f008 f8c9 	bl	800a528 <HAL_TIMEx_MasterConfigSynchronization>
 8002396:	4603      	mov	r3, r0
 8002398:	2b00      	cmp	r3, #0
 800239a:	d001      	beq.n	80023a0 <MX_TIM1_Init+0xcc>
  {
    Error_Handler();
 800239c:	f000 fc72 	bl	8002c84 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80023a0:	2360      	movs	r3, #96	; 0x60
 80023a2:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 80023a4:	2300      	movs	r3, #0
 80023a6:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80023a8:	2300      	movs	r3, #0
 80023aa:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_LOW;
 80023ac:	2308      	movs	r3, #8
 80023ae:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80023b0:	2300      	movs	r3, #0
 80023b2:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80023b4:	2300      	movs	r3, #0
 80023b6:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80023b8:	2300      	movs	r3, #0
 80023ba:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80023bc:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80023c0:	2200      	movs	r2, #0
 80023c2:	4619      	mov	r1, r3
 80023c4:	482f      	ldr	r0, [pc, #188]	; (8002484 <MX_TIM1_Init+0x1b0>)
 80023c6:	f007 f91f 	bl	8009608 <HAL_TIM_PWM_ConfigChannel>
 80023ca:	4603      	mov	r3, r0
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d001      	beq.n	80023d4 <MX_TIM1_Init+0x100>
  {
    Error_Handler();
 80023d0:	f000 fc58 	bl	8002c84 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80023d4:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80023d8:	2204      	movs	r2, #4
 80023da:	4619      	mov	r1, r3
 80023dc:	4829      	ldr	r0, [pc, #164]	; (8002484 <MX_TIM1_Init+0x1b0>)
 80023de:	f007 f913 	bl	8009608 <HAL_TIM_PWM_ConfigChannel>
 80023e2:	4603      	mov	r3, r0
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d001      	beq.n	80023ec <MX_TIM1_Init+0x118>
  {
    Error_Handler();
 80023e8:	f000 fc4c 	bl	8002c84 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80023ec:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80023f0:	2208      	movs	r2, #8
 80023f2:	4619      	mov	r1, r3
 80023f4:	4823      	ldr	r0, [pc, #140]	; (8002484 <MX_TIM1_Init+0x1b0>)
 80023f6:	f007 f907 	bl	8009608 <HAL_TIM_PWM_ConfigChannel>
 80023fa:	4603      	mov	r3, r0
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d001      	beq.n	8002404 <MX_TIM1_Init+0x130>
  {
    Error_Handler();
 8002400:	f000 fc40 	bl	8002c84 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM2;
 8002404:	2370      	movs	r3, #112	; 0x70
 8002406:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 990;
 8002408:	f240 33de 	movw	r3, #990	; 0x3de
 800240c:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800240e:	2300      	movs	r3, #0
 8002410:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8002412:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8002416:	220c      	movs	r2, #12
 8002418:	4619      	mov	r1, r3
 800241a:	481a      	ldr	r0, [pc, #104]	; (8002484 <MX_TIM1_Init+0x1b0>)
 800241c:	f007 f8f4 	bl	8009608 <HAL_TIM_PWM_ConfigChannel>
 8002420:	4603      	mov	r3, r0
 8002422:	2b00      	cmp	r3, #0
 8002424:	d001      	beq.n	800242a <MX_TIM1_Init+0x156>
  {
    Error_Handler();
 8002426:	f000 fc2d 	bl	8002c84 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800242a:	2300      	movs	r3, #0
 800242c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800242e:	2300      	movs	r3, #0
 8002430:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002432:	2300      	movs	r3, #0
 8002434:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 50;
 8002436:	2332      	movs	r3, #50	; 0x32
 8002438:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800243a:	2300      	movs	r3, #0
 800243c:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800243e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002442:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8002444:	2300      	movs	r3, #0
 8002446:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8002448:	2300      	movs	r3, #0
 800244a:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 800244c:	2300      	movs	r3, #0
 800244e:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8002450:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002454:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8002456:	2300      	movs	r3, #0
 8002458:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 800245a:	2300      	movs	r3, #0
 800245c:	633b      	str	r3, [r7, #48]	; 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800245e:	2300      	movs	r3, #0
 8002460:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8002462:	1d3b      	adds	r3, r7, #4
 8002464:	4619      	mov	r1, r3
 8002466:	4807      	ldr	r0, [pc, #28]	; (8002484 <MX_TIM1_Init+0x1b0>)
 8002468:	f008 f8e0 	bl	800a62c <HAL_TIMEx_ConfigBreakDeadTime>
 800246c:	4603      	mov	r3, r0
 800246e:	2b00      	cmp	r3, #0
 8002470:	d001      	beq.n	8002476 <MX_TIM1_Init+0x1a2>
  {
    Error_Handler();
 8002472:	f000 fc07 	bl	8002c84 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8002476:	4803      	ldr	r0, [pc, #12]	; (8002484 <MX_TIM1_Init+0x1b0>)
 8002478:	f000 fede 	bl	8003238 <HAL_TIM_MspPostInit>

}
 800247c:	bf00      	nop
 800247e:	3770      	adds	r7, #112	; 0x70
 8002480:	46bd      	mov	sp, r7
 8002482:	bd80      	pop	{r7, pc}
 8002484:	200002d8 	.word	0x200002d8
 8002488:	40012c00 	.word	0x40012c00

0800248c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800248c:	b580      	push	{r7, lr}
 800248e:	b08c      	sub	sp, #48	; 0x30
 8002490:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8002492:	f107 030c 	add.w	r3, r7, #12
 8002496:	2224      	movs	r2, #36	; 0x24
 8002498:	2100      	movs	r1, #0
 800249a:	4618      	mov	r0, r3
 800249c:	f009 fc3a 	bl	800bd14 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80024a0:	463b      	mov	r3, r7
 80024a2:	2200      	movs	r2, #0
 80024a4:	601a      	str	r2, [r3, #0]
 80024a6:	605a      	str	r2, [r3, #4]
 80024a8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80024aa:	4b21      	ldr	r3, [pc, #132]	; (8002530 <MX_TIM2_Init+0xa4>)
 80024ac:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80024b0:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80024b2:	4b1f      	ldr	r3, [pc, #124]	; (8002530 <MX_TIM2_Init+0xa4>)
 80024b4:	2200      	movs	r2, #0
 80024b6:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80024b8:	4b1d      	ldr	r3, [pc, #116]	; (8002530 <MX_TIM2_Init+0xa4>)
 80024ba:	2200      	movs	r2, #0
 80024bc:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 2000;
 80024be:	4b1c      	ldr	r3, [pc, #112]	; (8002530 <MX_TIM2_Init+0xa4>)
 80024c0:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80024c4:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80024c6:	4b1a      	ldr	r3, [pc, #104]	; (8002530 <MX_TIM2_Init+0xa4>)
 80024c8:	2200      	movs	r2, #0
 80024ca:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80024cc:	4b18      	ldr	r3, [pc, #96]	; (8002530 <MX_TIM2_Init+0xa4>)
 80024ce:	2200      	movs	r2, #0
 80024d0:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 80024d2:	2301      	movs	r3, #1
 80024d4:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80024d6:	2300      	movs	r3, #0
 80024d8:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80024da:	2301      	movs	r3, #1
 80024dc:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80024de:	2300      	movs	r3, #0
 80024e0:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 80024e2:	230a      	movs	r3, #10
 80024e4:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80024e6:	2300      	movs	r3, #0
 80024e8:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80024ea:	2301      	movs	r3, #1
 80024ec:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80024ee:	2300      	movs	r3, #0
 80024f0:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 10;
 80024f2:	230a      	movs	r3, #10
 80024f4:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 80024f6:	f107 030c 	add.w	r3, r7, #12
 80024fa:	4619      	mov	r1, r3
 80024fc:	480c      	ldr	r0, [pc, #48]	; (8002530 <MX_TIM2_Init+0xa4>)
 80024fe:	f006 fdaf 	bl	8009060 <HAL_TIM_Encoder_Init>
 8002502:	4603      	mov	r3, r0
 8002504:	2b00      	cmp	r3, #0
 8002506:	d001      	beq.n	800250c <MX_TIM2_Init+0x80>
  {
    Error_Handler();
 8002508:	f000 fbbc 	bl	8002c84 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800250c:	2320      	movs	r3, #32
 800250e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002510:	2300      	movs	r3, #0
 8002512:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002514:	463b      	mov	r3, r7
 8002516:	4619      	mov	r1, r3
 8002518:	4805      	ldr	r0, [pc, #20]	; (8002530 <MX_TIM2_Init+0xa4>)
 800251a:	f008 f805 	bl	800a528 <HAL_TIMEx_MasterConfigSynchronization>
 800251e:	4603      	mov	r3, r0
 8002520:	2b00      	cmp	r3, #0
 8002522:	d001      	beq.n	8002528 <MX_TIM2_Init+0x9c>
  {
    Error_Handler();
 8002524:	f000 fbae 	bl	8002c84 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002528:	bf00      	nop
 800252a:	3730      	adds	r7, #48	; 0x30
 800252c:	46bd      	mov	sp, r7
 800252e:	bd80      	pop	{r7, pc}
 8002530:	20000324 	.word	0x20000324

08002534 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8002534:	b580      	push	{r7, lr}
 8002536:	b084      	sub	sp, #16
 8002538:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800253a:	1d3b      	adds	r3, r7, #4
 800253c:	2200      	movs	r2, #0
 800253e:	601a      	str	r2, [r3, #0]
 8002540:	605a      	str	r2, [r3, #4]
 8002542:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8002544:	4b14      	ldr	r3, [pc, #80]	; (8002598 <MX_TIM6_Init+0x64>)
 8002546:	4a15      	ldr	r2, [pc, #84]	; (800259c <MX_TIM6_Init+0x68>)
 8002548:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 16;
 800254a:	4b13      	ldr	r3, [pc, #76]	; (8002598 <MX_TIM6_Init+0x64>)
 800254c:	2210      	movs	r2, #16
 800254e:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002550:	4b11      	ldr	r3, [pc, #68]	; (8002598 <MX_TIM6_Init+0x64>)
 8002552:	2200      	movs	r2, #0
 8002554:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 999;
 8002556:	4b10      	ldr	r3, [pc, #64]	; (8002598 <MX_TIM6_Init+0x64>)
 8002558:	f240 32e7 	movw	r2, #999	; 0x3e7
 800255c:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800255e:	4b0e      	ldr	r3, [pc, #56]	; (8002598 <MX_TIM6_Init+0x64>)
 8002560:	2200      	movs	r2, #0
 8002562:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8002564:	480c      	ldr	r0, [pc, #48]	; (8002598 <MX_TIM6_Init+0x64>)
 8002566:	f006 fb77 	bl	8008c58 <HAL_TIM_Base_Init>
 800256a:	4603      	mov	r3, r0
 800256c:	2b00      	cmp	r3, #0
 800256e:	d001      	beq.n	8002574 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8002570:	f000 fb88 	bl	8002c84 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002574:	2300      	movs	r3, #0
 8002576:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002578:	2300      	movs	r3, #0
 800257a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800257c:	1d3b      	adds	r3, r7, #4
 800257e:	4619      	mov	r1, r3
 8002580:	4805      	ldr	r0, [pc, #20]	; (8002598 <MX_TIM6_Init+0x64>)
 8002582:	f007 ffd1 	bl	800a528 <HAL_TIMEx_MasterConfigSynchronization>
 8002586:	4603      	mov	r3, r0
 8002588:	2b00      	cmp	r3, #0
 800258a:	d001      	beq.n	8002590 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 800258c:	f000 fb7a 	bl	8002c84 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8002590:	bf00      	nop
 8002592:	3710      	adds	r7, #16
 8002594:	46bd      	mov	sp, r7
 8002596:	bd80      	pop	{r7, pc}
 8002598:	20000370 	.word	0x20000370
 800259c:	40001000 	.word	0x40001000

080025a0 <MX_TIM17_Init>:
  * @brief TIM17 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM17_Init(void)
{
 80025a0:	b580      	push	{r7, lr}
 80025a2:	af00      	add	r7, sp, #0
  /* USER CODE END TIM17_Init 0 */

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 80025a4:	4b0f      	ldr	r3, [pc, #60]	; (80025e4 <MX_TIM17_Init+0x44>)
 80025a6:	4a10      	ldr	r2, [pc, #64]	; (80025e8 <MX_TIM17_Init+0x48>)
 80025a8:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 0;
 80025aa:	4b0e      	ldr	r3, [pc, #56]	; (80025e4 <MX_TIM17_Init+0x44>)
 80025ac:	2200      	movs	r2, #0
 80025ae:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 80025b0:	4b0c      	ldr	r3, [pc, #48]	; (80025e4 <MX_TIM17_Init+0x44>)
 80025b2:	2200      	movs	r2, #0
 80025b4:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 65535;
 80025b6:	4b0b      	ldr	r3, [pc, #44]	; (80025e4 <MX_TIM17_Init+0x44>)
 80025b8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80025bc:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80025be:	4b09      	ldr	r3, [pc, #36]	; (80025e4 <MX_TIM17_Init+0x44>)
 80025c0:	2200      	movs	r2, #0
 80025c2:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 80025c4:	4b07      	ldr	r3, [pc, #28]	; (80025e4 <MX_TIM17_Init+0x44>)
 80025c6:	2200      	movs	r2, #0
 80025c8:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80025ca:	4b06      	ldr	r3, [pc, #24]	; (80025e4 <MX_TIM17_Init+0x44>)
 80025cc:	2200      	movs	r2, #0
 80025ce:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 80025d0:	4804      	ldr	r0, [pc, #16]	; (80025e4 <MX_TIM17_Init+0x44>)
 80025d2:	f006 fb41 	bl	8008c58 <HAL_TIM_Base_Init>
 80025d6:	4603      	mov	r3, r0
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d001      	beq.n	80025e0 <MX_TIM17_Init+0x40>
  {
    Error_Handler();
 80025dc:	f000 fb52 	bl	8002c84 <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */

}
 80025e0:	bf00      	nop
 80025e2:	bd80      	pop	{r7, pc}
 80025e4:	200003bc 	.word	0x200003bc
 80025e8:	40014800 	.word	0x40014800

080025ec <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80025ec:	b580      	push	{r7, lr}
 80025ee:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80025f0:	4b22      	ldr	r3, [pc, #136]	; (800267c <MX_USART1_UART_Init+0x90>)
 80025f2:	4a23      	ldr	r2, [pc, #140]	; (8002680 <MX_USART1_UART_Init+0x94>)
 80025f4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600; //921600
 80025f6:	4b21      	ldr	r3, [pc, #132]	; (800267c <MX_USART1_UART_Init+0x90>)
 80025f8:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80025fc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80025fe:	4b1f      	ldr	r3, [pc, #124]	; (800267c <MX_USART1_UART_Init+0x90>)
 8002600:	2200      	movs	r2, #0
 8002602:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002604:	4b1d      	ldr	r3, [pc, #116]	; (800267c <MX_USART1_UART_Init+0x90>)
 8002606:	2200      	movs	r2, #0
 8002608:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800260a:	4b1c      	ldr	r3, [pc, #112]	; (800267c <MX_USART1_UART_Init+0x90>)
 800260c:	2200      	movs	r2, #0
 800260e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002610:	4b1a      	ldr	r3, [pc, #104]	; (800267c <MX_USART1_UART_Init+0x90>)
 8002612:	220c      	movs	r2, #12
 8002614:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002616:	4b19      	ldr	r3, [pc, #100]	; (800267c <MX_USART1_UART_Init+0x90>)
 8002618:	2200      	movs	r2, #0
 800261a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800261c:	4b17      	ldr	r3, [pc, #92]	; (800267c <MX_USART1_UART_Init+0x90>)
 800261e:	2200      	movs	r2, #0
 8002620:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002622:	4b16      	ldr	r3, [pc, #88]	; (800267c <MX_USART1_UART_Init+0x90>)
 8002624:	2200      	movs	r2, #0
 8002626:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002628:	4b14      	ldr	r3, [pc, #80]	; (800267c <MX_USART1_UART_Init+0x90>)
 800262a:	2200      	movs	r2, #0
 800262c:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800262e:	4b13      	ldr	r3, [pc, #76]	; (800267c <MX_USART1_UART_Init+0x90>)
 8002630:	2200      	movs	r2, #0
 8002632:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002634:	4811      	ldr	r0, [pc, #68]	; (800267c <MX_USART1_UART_Init+0x90>)
 8002636:	f008 f904 	bl	800a842 <HAL_UART_Init>
 800263a:	4603      	mov	r3, r0
 800263c:	2b00      	cmp	r3, #0
 800263e:	d001      	beq.n	8002644 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8002640:	f000 fb20 	bl	8002c84 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002644:	2100      	movs	r1, #0
 8002646:	480d      	ldr	r0, [pc, #52]	; (800267c <MX_USART1_UART_Init+0x90>)
 8002648:	f009 fa99 	bl	800bb7e <HAL_UARTEx_SetTxFifoThreshold>
 800264c:	4603      	mov	r3, r0
 800264e:	2b00      	cmp	r3, #0
 8002650:	d001      	beq.n	8002656 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8002652:	f000 fb17 	bl	8002c84 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002656:	2100      	movs	r1, #0
 8002658:	4808      	ldr	r0, [pc, #32]	; (800267c <MX_USART1_UART_Init+0x90>)
 800265a:	f009 face 	bl	800bbfa <HAL_UARTEx_SetRxFifoThreshold>
 800265e:	4603      	mov	r3, r0
 8002660:	2b00      	cmp	r3, #0
 8002662:	d001      	beq.n	8002668 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8002664:	f000 fb0e 	bl	8002c84 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8002668:	4804      	ldr	r0, [pc, #16]	; (800267c <MX_USART1_UART_Init+0x90>)
 800266a:	f009 fa4f 	bl	800bb0c <HAL_UARTEx_DisableFifoMode>
 800266e:	4603      	mov	r3, r0
 8002670:	2b00      	cmp	r3, #0
 8002672:	d001      	beq.n	8002678 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8002674:	f000 fb06 	bl	8002c84 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002678:	bf00      	nop
 800267a:	bd80      	pop	{r7, pc}
 800267c:	20000408 	.word	0x20000408
 8002680:	40013800 	.word	0x40013800

08002684 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002684:	b580      	push	{r7, lr}
 8002686:	b08a      	sub	sp, #40	; 0x28
 8002688:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800268a:	f107 0314 	add.w	r3, r7, #20
 800268e:	2200      	movs	r2, #0
 8002690:	601a      	str	r2, [r3, #0]
 8002692:	605a      	str	r2, [r3, #4]
 8002694:	609a      	str	r2, [r3, #8]
 8002696:	60da      	str	r2, [r3, #12]
 8002698:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800269a:	4b3f      	ldr	r3, [pc, #252]	; (8002798 <MX_GPIO_Init+0x114>)
 800269c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800269e:	4a3e      	ldr	r2, [pc, #248]	; (8002798 <MX_GPIO_Init+0x114>)
 80026a0:	f043 0304 	orr.w	r3, r3, #4
 80026a4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80026a6:	4b3c      	ldr	r3, [pc, #240]	; (8002798 <MX_GPIO_Init+0x114>)
 80026a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80026aa:	f003 0304 	and.w	r3, r3, #4
 80026ae:	613b      	str	r3, [r7, #16]
 80026b0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80026b2:	4b39      	ldr	r3, [pc, #228]	; (8002798 <MX_GPIO_Init+0x114>)
 80026b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80026b6:	4a38      	ldr	r2, [pc, #224]	; (8002798 <MX_GPIO_Init+0x114>)
 80026b8:	f043 0320 	orr.w	r3, r3, #32
 80026bc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80026be:	4b36      	ldr	r3, [pc, #216]	; (8002798 <MX_GPIO_Init+0x114>)
 80026c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80026c2:	f003 0320 	and.w	r3, r3, #32
 80026c6:	60fb      	str	r3, [r7, #12]
 80026c8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80026ca:	4b33      	ldr	r3, [pc, #204]	; (8002798 <MX_GPIO_Init+0x114>)
 80026cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80026ce:	4a32      	ldr	r2, [pc, #200]	; (8002798 <MX_GPIO_Init+0x114>)
 80026d0:	f043 0301 	orr.w	r3, r3, #1
 80026d4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80026d6:	4b30      	ldr	r3, [pc, #192]	; (8002798 <MX_GPIO_Init+0x114>)
 80026d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80026da:	f003 0301 	and.w	r3, r3, #1
 80026de:	60bb      	str	r3, [r7, #8]
 80026e0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80026e2:	4b2d      	ldr	r3, [pc, #180]	; (8002798 <MX_GPIO_Init+0x114>)
 80026e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80026e6:	4a2c      	ldr	r2, [pc, #176]	; (8002798 <MX_GPIO_Init+0x114>)
 80026e8:	f043 0302 	orr.w	r3, r3, #2
 80026ec:	64d3      	str	r3, [r2, #76]	; 0x4c
 80026ee:	4b2a      	ldr	r3, [pc, #168]	; (8002798 <MX_GPIO_Init+0x114>)
 80026f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80026f2:	f003 0302 	and.w	r3, r3, #2
 80026f6:	607b      	str	r3, [r7, #4]
 80026f8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80026fa:	4b27      	ldr	r3, [pc, #156]	; (8002798 <MX_GPIO_Init+0x114>)
 80026fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80026fe:	4a26      	ldr	r2, [pc, #152]	; (8002798 <MX_GPIO_Init+0x114>)
 8002700:	f043 0308 	orr.w	r3, r3, #8
 8002704:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002706:	4b24      	ldr	r3, [pc, #144]	; (8002798 <MX_GPIO_Init+0x114>)
 8002708:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800270a:	f003 0308 	and.w	r3, r3, #8
 800270e:	603b      	str	r3, [r7, #0]
 8002710:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8002712:	2200      	movs	r2, #0
 8002714:	2120      	movs	r1, #32
 8002716:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800271a:	f004 fb71 	bl	8006e00 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_RESET);
 800271e:	2200      	movs	r2, #0
 8002720:	2104      	movs	r1, #4
 8002722:	481e      	ldr	r0, [pc, #120]	; (800279c <MX_GPIO_Init+0x118>)
 8002724:	f004 fb6c 	bl	8006e00 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8002728:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800272c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800272e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8002732:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002734:	2300      	movs	r3, #0
 8002736:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8002738:	f107 0314 	add.w	r3, r7, #20
 800273c:	4619      	mov	r1, r3
 800273e:	4818      	ldr	r0, [pc, #96]	; (80027a0 <MX_GPIO_Init+0x11c>)
 8002740:	f004 f9dc 	bl	8006afc <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8002744:	2320      	movs	r3, #32
 8002746:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002748:	2301      	movs	r3, #1
 800274a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800274c:	2300      	movs	r3, #0
 800274e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002750:	2300      	movs	r3, #0
 8002752:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8002754:	f107 0314 	add.w	r3, r7, #20
 8002758:	4619      	mov	r1, r3
 800275a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800275e:	f004 f9cd 	bl	8006afc <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002762:	2304      	movs	r3, #4
 8002764:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002766:	2301      	movs	r3, #1
 8002768:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800276a:	2300      	movs	r3, #0
 800276c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800276e:	2300      	movs	r3, #0
 8002770:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002772:	f107 0314 	add.w	r3, r7, #20
 8002776:	4619      	mov	r1, r3
 8002778:	4808      	ldr	r0, [pc, #32]	; (800279c <MX_GPIO_Init+0x118>)
 800277a:	f004 f9bf 	bl	8006afc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800277e:	2200      	movs	r2, #0
 8002780:	2100      	movs	r1, #0
 8002782:	2028      	movs	r0, #40	; 0x28
 8002784:	f003 fcdd 	bl	8006142 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8002788:	2028      	movs	r0, #40	; 0x28
 800278a:	f003 fcf4 	bl	8006176 <HAL_NVIC_EnableIRQ>

}
 800278e:	bf00      	nop
 8002790:	3728      	adds	r7, #40	; 0x28
 8002792:	46bd      	mov	sp, r7
 8002794:	bd80      	pop	{r7, pc}
 8002796:	bf00      	nop
 8002798:	40021000 	.word	0x40021000
 800279c:	48000c00 	.word	0x48000c00
 80027a0:	48000800 	.word	0x48000800
 80027a4:	00000000 	.word	0x00000000

080027a8 <HAL_ADCEx_InjectedConvCpltCallback>:

/* USER CODE BEGIN 4 */

void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80027a8:	b5b0      	push	{r4, r5, r7, lr}
 80027aa:	b086      	sub	sp, #24
 80027ac:	af02      	add	r7, sp, #8
 80027ae:	6078      	str	r0, [r7, #4]


	/**POMIAR PRADU**/ //2us
	GPIOA->ODR|= 1<<5;
 80027b0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80027b4:	695b      	ldr	r3, [r3, #20]
 80027b6:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80027ba:	f043 0320 	orr.w	r3, r3, #32
 80027be:	6153      	str	r3, [r2, #20]
if(CAL_status==0)
 80027c0:	4b09      	ldr	r3, [pc, #36]	; (80027e8 <HAL_ADCEx_InjectedConvCpltCallback+0x40>)
 80027c2:	781b      	ldrb	r3, [r3, #0]
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d12e      	bne.n	8002826 <HAL_ADCEx_InjectedConvCpltCallback+0x7e>
{
	TIM1->CCR1=1000;TIM1->CCR2=1000;TIM1->CCR3=1000;
 80027c8:	4b08      	ldr	r3, [pc, #32]	; (80027ec <HAL_ADCEx_InjectedConvCpltCallback+0x44>)
 80027ca:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80027ce:	635a      	str	r2, [r3, #52]	; 0x34
 80027d0:	4b06      	ldr	r3, [pc, #24]	; (80027ec <HAL_ADCEx_InjectedConvCpltCallback+0x44>)
 80027d2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80027d6:	639a      	str	r2, [r3, #56]	; 0x38
 80027d8:	4b04      	ldr	r3, [pc, #16]	; (80027ec <HAL_ADCEx_InjectedConvCpltCallback+0x44>)
 80027da:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80027de:	63da      	str	r2, [r3, #60]	; 0x3c
	for(int i=0;i<1000000;i++)
 80027e0:	2300      	movs	r3, #0
 80027e2:	60fb      	str	r3, [r7, #12]
 80027e4:	e018      	b.n	8002818 <HAL_ADCEx_InjectedConvCpltCallback+0x70>
 80027e6:	bf00      	nop
 80027e8:	200004b8 	.word	0x200004b8
 80027ec:	40012c00 	.word	0x40012c00
	{
		ADC_CAL[0]=HAL_ADCEx_InjectedGetValue(&hadc1, ADC_INJECTED_RANK_1);
 80027f0:	2109      	movs	r1, #9
 80027f2:	48b1      	ldr	r0, [pc, #708]	; (8002ab8 <HAL_ADCEx_InjectedConvCpltCallback+0x310>)
 80027f4:	f002 fdb4 	bl	8005360 <HAL_ADCEx_InjectedGetValue>
 80027f8:	4603      	mov	r3, r0
 80027fa:	b29a      	uxth	r2, r3
 80027fc:	4baf      	ldr	r3, [pc, #700]	; (8002abc <HAL_ADCEx_InjectedConvCpltCallback+0x314>)
 80027fe:	801a      	strh	r2, [r3, #0]
		ADC_CAL[2]=HAL_ADCEx_InjectedGetValue(&hadc1, ADC_INJECTED_RANK_4);
 8002800:	f240 311b 	movw	r1, #795	; 0x31b
 8002804:	48ac      	ldr	r0, [pc, #688]	; (8002ab8 <HAL_ADCEx_InjectedConvCpltCallback+0x310>)
 8002806:	f002 fdab 	bl	8005360 <HAL_ADCEx_InjectedGetValue>
 800280a:	4603      	mov	r3, r0
 800280c:	b29a      	uxth	r2, r3
 800280e:	4bab      	ldr	r3, [pc, #684]	; (8002abc <HAL_ADCEx_InjectedConvCpltCallback+0x314>)
 8002810:	809a      	strh	r2, [r3, #4]
	for(int i=0;i<1000000;i++)
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	3301      	adds	r3, #1
 8002816:	60fb      	str	r3, [r7, #12]
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	4aa9      	ldr	r2, [pc, #676]	; (8002ac0 <HAL_ADCEx_InjectedConvCpltCallback+0x318>)
 800281c:	4293      	cmp	r3, r2
 800281e:	dde7      	ble.n	80027f0 <HAL_ADCEx_InjectedConvCpltCallback+0x48>
	}
	CAL_status=1;
 8002820:	4ba8      	ldr	r3, [pc, #672]	; (8002ac4 <HAL_ADCEx_InjectedConvCpltCallback+0x31c>)
 8002822:	2201      	movs	r2, #1
 8002824:	701a      	strb	r2, [r3, #0]
}

prad[0]=HAL_ADCEx_InjectedGetValue(&hadc1, ADC_INJECTED_RANK_1);
 8002826:	2109      	movs	r1, #9
 8002828:	48a3      	ldr	r0, [pc, #652]	; (8002ab8 <HAL_ADCEx_InjectedConvCpltCallback+0x310>)
 800282a:	f002 fd99 	bl	8005360 <HAL_ADCEx_InjectedGetValue>
 800282e:	4603      	mov	r3, r0
 8002830:	b29a      	uxth	r2, r3
 8002832:	4ba5      	ldr	r3, [pc, #660]	; (8002ac8 <HAL_ADCEx_InjectedConvCpltCallback+0x320>)
 8002834:	801a      	strh	r2, [r3, #0]
prad[1]=HAL_ADCEx_InjectedGetValue(&hadc1, ADC_INJECTED_RANK_2);
 8002836:	f240 110f 	movw	r1, #271	; 0x10f
 800283a:	489f      	ldr	r0, [pc, #636]	; (8002ab8 <HAL_ADCEx_InjectedConvCpltCallback+0x310>)
 800283c:	f002 fd90 	bl	8005360 <HAL_ADCEx_InjectedGetValue>
 8002840:	4603      	mov	r3, r0
 8002842:	b29a      	uxth	r2, r3
 8002844:	4ba0      	ldr	r3, [pc, #640]	; (8002ac8 <HAL_ADCEx_InjectedConvCpltCallback+0x320>)
 8002846:	805a      	strh	r2, [r3, #2]
prad[2]=HAL_ADCEx_InjectedGetValue(&hadc1, ADC_INJECTED_RANK_3);
 8002848:	f240 2115 	movw	r1, #533	; 0x215
 800284c:	489a      	ldr	r0, [pc, #616]	; (8002ab8 <HAL_ADCEx_InjectedConvCpltCallback+0x310>)
 800284e:	f002 fd87 	bl	8005360 <HAL_ADCEx_InjectedGetValue>
 8002852:	4603      	mov	r3, r0
 8002854:	b29a      	uxth	r2, r3
 8002856:	4b9c      	ldr	r3, [pc, #624]	; (8002ac8 <HAL_ADCEx_InjectedConvCpltCallback+0x320>)
 8002858:	809a      	strh	r2, [r3, #4]
prad[3]=HAL_ADCEx_InjectedGetValue(&hadc1, ADC_INJECTED_RANK_4);
 800285a:	f240 311b 	movw	r1, #795	; 0x31b
 800285e:	4896      	ldr	r0, [pc, #600]	; (8002ab8 <HAL_ADCEx_InjectedConvCpltCallback+0x310>)
 8002860:	f002 fd7e 	bl	8005360 <HAL_ADCEx_InjectedGetValue>
 8002864:	4603      	mov	r3, r0
 8002866:	b29a      	uxth	r2, r3
 8002868:	4b97      	ldr	r3, [pc, #604]	; (8002ac8 <HAL_ADCEx_InjectedConvCpltCallback+0x320>)
 800286a:	80da      	strh	r2, [r3, #6]
PRAD_POM[0]=-(prad[0]-ADC_CAL[0]);
 800286c:	4b93      	ldr	r3, [pc, #588]	; (8002abc <HAL_ADCEx_InjectedConvCpltCallback+0x314>)
 800286e:	881a      	ldrh	r2, [r3, #0]
 8002870:	4b95      	ldr	r3, [pc, #596]	; (8002ac8 <HAL_ADCEx_InjectedConvCpltCallback+0x320>)
 8002872:	881b      	ldrh	r3, [r3, #0]
 8002874:	1ad3      	subs	r3, r2, r3
 8002876:	b29b      	uxth	r3, r3
 8002878:	b21a      	sxth	r2, r3
 800287a:	4b94      	ldr	r3, [pc, #592]	; (8002acc <HAL_ADCEx_InjectedConvCpltCallback+0x324>)
 800287c:	801a      	strh	r2, [r3, #0]
PRAD_POM[1]=-(prad[3]-ADC_CAL[2]);
 800287e:	4b8f      	ldr	r3, [pc, #572]	; (8002abc <HAL_ADCEx_InjectedConvCpltCallback+0x314>)
 8002880:	889a      	ldrh	r2, [r3, #4]
 8002882:	4b91      	ldr	r3, [pc, #580]	; (8002ac8 <HAL_ADCEx_InjectedConvCpltCallback+0x320>)
 8002884:	88db      	ldrh	r3, [r3, #6]
 8002886:	1ad3      	subs	r3, r2, r3
 8002888:	b29b      	uxth	r3, r3
 800288a:	b21a      	sxth	r2, r3
 800288c:	4b8f      	ldr	r3, [pc, #572]	; (8002acc <HAL_ADCEx_InjectedConvCpltCallback+0x324>)
 800288e:	805a      	strh	r2, [r3, #2]
PRAD_POM[2]=prad[1];
 8002890:	4b8d      	ldr	r3, [pc, #564]	; (8002ac8 <HAL_ADCEx_InjectedConvCpltCallback+0x320>)
 8002892:	885b      	ldrh	r3, [r3, #2]
 8002894:	b21a      	sxth	r2, r3
 8002896:	4b8d      	ldr	r3, [pc, #564]	; (8002acc <HAL_ADCEx_InjectedConvCpltCallback+0x324>)
 8002898:	809a      	strh	r2, [r3, #4]
RMS_volt=prad[1];
 800289a:	4b8b      	ldr	r3, [pc, #556]	; (8002ac8 <HAL_ADCEx_InjectedConvCpltCallback+0x320>)
 800289c:	885a      	ldrh	r2, [r3, #2]
 800289e:	4b8c      	ldr	r3, [pc, #560]	; (8002ad0 <HAL_ADCEx_InjectedConvCpltCallback+0x328>)
 80028a0:	801a      	strh	r2, [r3, #0]

						/**POMIAR POZYCJI**/ //6us

SPI_bufor_tx[0]=REG_ANGLECOM_ADR;
 80028a2:	4b8c      	ldr	r3, [pc, #560]	; (8002ad4 <HAL_ADCEx_InjectedConvCpltCallback+0x32c>)
 80028a4:	881b      	ldrh	r3, [r3, #0]
 80028a6:	b29a      	uxth	r2, r3
 80028a8:	4b8b      	ldr	r3, [pc, #556]	; (8002ad8 <HAL_ADCEx_InjectedConvCpltCallback+0x330>)
 80028aa:	801a      	strh	r2, [r3, #0]
HAL_GPIO_WritePin(GPIOD,GPIO_PIN_2,0);
 80028ac:	2200      	movs	r2, #0
 80028ae:	2104      	movs	r1, #4
 80028b0:	488a      	ldr	r0, [pc, #552]	; (8002adc <HAL_ADCEx_InjectedConvCpltCallback+0x334>)
 80028b2:	f004 faa5 	bl	8006e00 <HAL_GPIO_WritePin>
HAL_SPI_TransmitReceive(&hspi3, (uint8_t*)SPI_bufor_tx, (uint8_t*)SPI_bufor_rx, 1, 0);
 80028b6:	2300      	movs	r3, #0
 80028b8:	9300      	str	r3, [sp, #0]
 80028ba:	2301      	movs	r3, #1
 80028bc:	4a88      	ldr	r2, [pc, #544]	; (8002ae0 <HAL_ADCEx_InjectedConvCpltCallback+0x338>)
 80028be:	4986      	ldr	r1, [pc, #536]	; (8002ad8 <HAL_ADCEx_InjectedConvCpltCallback+0x330>)
 80028c0:	4888      	ldr	r0, [pc, #544]	; (8002ae4 <HAL_ADCEx_InjectedConvCpltCallback+0x33c>)
 80028c2:	f005 fdfa 	bl	80084ba <HAL_SPI_TransmitReceive>
HAL_GPIO_WritePin(GPIOD,GPIO_PIN_2,1);
 80028c6:	2201      	movs	r2, #1
 80028c8:	2104      	movs	r1, #4
 80028ca:	4884      	ldr	r0, [pc, #528]	; (8002adc <HAL_ADCEx_InjectedConvCpltCallback+0x334>)
 80028cc:	f004 fa98 	bl	8006e00 <HAL_GPIO_WritePin>
REG_ANGLECOM=pozycja_walu=SPI_bufor_rx[0]&0X3fff;
 80028d0:	4b83      	ldr	r3, [pc, #524]	; (8002ae0 <HAL_ADCEx_InjectedConvCpltCallback+0x338>)
 80028d2:	881b      	ldrh	r3, [r3, #0]
 80028d4:	b29b      	uxth	r3, r3
 80028d6:	f3c3 030d 	ubfx	r3, r3, #0, #14
 80028da:	b29a      	uxth	r2, r3
 80028dc:	4b82      	ldr	r3, [pc, #520]	; (8002ae8 <HAL_ADCEx_InjectedConvCpltCallback+0x340>)
 80028de:	4611      	mov	r1, r2
 80028e0:	8019      	strh	r1, [r3, #0]
 80028e2:	4b82      	ldr	r3, [pc, #520]	; (8002aec <HAL_ADCEx_InjectedConvCpltCallback+0x344>)
 80028e4:	801a      	strh	r2, [r3, #0]


					/**OBLICZENIA WEKTOR FOC**/ //15us

pozycja_walu_deg = ((pozycja_walu*0.044)+wal_offset); //0,044 bo dwie pary biegunów
 80028e6:	4b80      	ldr	r3, [pc, #512]	; (8002ae8 <HAL_ADCEx_InjectedConvCpltCallback+0x340>)
 80028e8:	881b      	ldrh	r3, [r3, #0]
 80028ea:	b29b      	uxth	r3, r3
 80028ec:	4618      	mov	r0, r3
 80028ee:	f7fd fde5 	bl	80004bc <__aeabi_i2d>
 80028f2:	a36b      	add	r3, pc, #428	; (adr r3, 8002aa0 <HAL_ADCEx_InjectedConvCpltCallback+0x2f8>)
 80028f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028f8:	f7fd fe4a 	bl	8000590 <__aeabi_dmul>
 80028fc:	4602      	mov	r2, r0
 80028fe:	460b      	mov	r3, r1
 8002900:	4614      	mov	r4, r2
 8002902:	461d      	mov	r5, r3
 8002904:	4b7a      	ldr	r3, [pc, #488]	; (8002af0 <HAL_ADCEx_InjectedConvCpltCallback+0x348>)
 8002906:	881b      	ldrh	r3, [r3, #0]
 8002908:	b29b      	uxth	r3, r3
 800290a:	4618      	mov	r0, r3
 800290c:	f7fd fdd6 	bl	80004bc <__aeabi_i2d>
 8002910:	4602      	mov	r2, r0
 8002912:	460b      	mov	r3, r1
 8002914:	4620      	mov	r0, r4
 8002916:	4629      	mov	r1, r5
 8002918:	f7fd fc84 	bl	8000224 <__adddf3>
 800291c:	4602      	mov	r2, r0
 800291e:	460b      	mov	r3, r1
 8002920:	4610      	mov	r0, r2
 8002922:	4619      	mov	r1, r3
 8002924:	f7fe f8f6 	bl	8000b14 <__aeabi_d2uiz>
 8002928:	4603      	mov	r3, r0
 800292a:	b29a      	uxth	r2, r3
 800292c:	4b71      	ldr	r3, [pc, #452]	; (8002af4 <HAL_ADCEx_InjectedConvCpltCallback+0x34c>)
 800292e:	801a      	strh	r2, [r3, #0]
prad_alpha=PRAD_POM[0];
 8002930:	4b66      	ldr	r3, [pc, #408]	; (8002acc <HAL_ADCEx_InjectedConvCpltCallback+0x324>)
 8002932:	881b      	ldrh	r3, [r3, #0]
 8002934:	b21a      	sxth	r2, r3
 8002936:	4b70      	ldr	r3, [pc, #448]	; (8002af8 <HAL_ADCEx_InjectedConvCpltCallback+0x350>)
 8002938:	801a      	strh	r2, [r3, #0]
prad_beta =(PRAD_POM[0]+2*PRAD_POM[1])*0.577;
 800293a:	4b64      	ldr	r3, [pc, #400]	; (8002acc <HAL_ADCEx_InjectedConvCpltCallback+0x324>)
 800293c:	881b      	ldrh	r3, [r3, #0]
 800293e:	b21b      	sxth	r3, r3
 8002940:	461a      	mov	r2, r3
 8002942:	4b62      	ldr	r3, [pc, #392]	; (8002acc <HAL_ADCEx_InjectedConvCpltCallback+0x324>)
 8002944:	885b      	ldrh	r3, [r3, #2]
 8002946:	b21b      	sxth	r3, r3
 8002948:	005b      	lsls	r3, r3, #1
 800294a:	4413      	add	r3, r2
 800294c:	4618      	mov	r0, r3
 800294e:	f7fd fdb5 	bl	80004bc <__aeabi_i2d>
 8002952:	a355      	add	r3, pc, #340	; (adr r3, 8002aa8 <HAL_ADCEx_InjectedConvCpltCallback+0x300>)
 8002954:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002958:	f7fd fe1a 	bl	8000590 <__aeabi_dmul>
 800295c:	4602      	mov	r2, r0
 800295e:	460b      	mov	r3, r1
 8002960:	4610      	mov	r0, r2
 8002962:	4619      	mov	r1, r3
 8002964:	f7fe f8ae 	bl	8000ac4 <__aeabi_d2iz>
 8002968:	4603      	mov	r3, r0
 800296a:	b21a      	sxth	r2, r3
 800296c:	4b63      	ldr	r3, [pc, #396]	; (8002afc <HAL_ADCEx_InjectedConvCpltCallback+0x354>)
 800296e:	801a      	strh	r2, [r3, #0]
prad_q= (prad_beta*cosinus_pozycja_wal[pozycja_walu_deg]-prad_alpha*sinus_pozycja_wal[pozycja_walu_deg]);
 8002970:	4b62      	ldr	r3, [pc, #392]	; (8002afc <HAL_ADCEx_InjectedConvCpltCallback+0x354>)
 8002972:	881b      	ldrh	r3, [r3, #0]
 8002974:	b21b      	sxth	r3, r3
 8002976:	ee07 3a90 	vmov	s15, r3
 800297a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800297e:	4b5d      	ldr	r3, [pc, #372]	; (8002af4 <HAL_ADCEx_InjectedConvCpltCallback+0x34c>)
 8002980:	881b      	ldrh	r3, [r3, #0]
 8002982:	b29b      	uxth	r3, r3
 8002984:	4a5e      	ldr	r2, [pc, #376]	; (8002b00 <HAL_ADCEx_InjectedConvCpltCallback+0x358>)
 8002986:	009b      	lsls	r3, r3, #2
 8002988:	4413      	add	r3, r2
 800298a:	edd3 7a00 	vldr	s15, [r3]
 800298e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002992:	4b59      	ldr	r3, [pc, #356]	; (8002af8 <HAL_ADCEx_InjectedConvCpltCallback+0x350>)
 8002994:	881b      	ldrh	r3, [r3, #0]
 8002996:	b21b      	sxth	r3, r3
 8002998:	ee07 3a90 	vmov	s15, r3
 800299c:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80029a0:	4b54      	ldr	r3, [pc, #336]	; (8002af4 <HAL_ADCEx_InjectedConvCpltCallback+0x34c>)
 80029a2:	881b      	ldrh	r3, [r3, #0]
 80029a4:	b29b      	uxth	r3, r3
 80029a6:	4a57      	ldr	r2, [pc, #348]	; (8002b04 <HAL_ADCEx_InjectedConvCpltCallback+0x35c>)
 80029a8:	009b      	lsls	r3, r3, #2
 80029aa:	4413      	add	r3, r2
 80029ac:	edd3 7a00 	vldr	s15, [r3]
 80029b0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80029b4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80029b8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80029bc:	ee17 3a90 	vmov	r3, s15
 80029c0:	b21a      	sxth	r2, r3
 80029c2:	4b51      	ldr	r3, [pc, #324]	; (8002b08 <HAL_ADCEx_InjectedConvCpltCallback+0x360>)
 80029c4:	801a      	strh	r2, [r3, #0]
prad_d=	(prad_alpha*cosinus_pozycja_wal[pozycja_walu_deg]+prad_beta*sinus_pozycja_wal[pozycja_walu_deg]);
 80029c6:	4b4c      	ldr	r3, [pc, #304]	; (8002af8 <HAL_ADCEx_InjectedConvCpltCallback+0x350>)
 80029c8:	881b      	ldrh	r3, [r3, #0]
 80029ca:	b21b      	sxth	r3, r3
 80029cc:	ee07 3a90 	vmov	s15, r3
 80029d0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80029d4:	4b47      	ldr	r3, [pc, #284]	; (8002af4 <HAL_ADCEx_InjectedConvCpltCallback+0x34c>)
 80029d6:	881b      	ldrh	r3, [r3, #0]
 80029d8:	b29b      	uxth	r3, r3
 80029da:	4a49      	ldr	r2, [pc, #292]	; (8002b00 <HAL_ADCEx_InjectedConvCpltCallback+0x358>)
 80029dc:	009b      	lsls	r3, r3, #2
 80029de:	4413      	add	r3, r2
 80029e0:	edd3 7a00 	vldr	s15, [r3]
 80029e4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80029e8:	4b44      	ldr	r3, [pc, #272]	; (8002afc <HAL_ADCEx_InjectedConvCpltCallback+0x354>)
 80029ea:	881b      	ldrh	r3, [r3, #0]
 80029ec:	b21b      	sxth	r3, r3
 80029ee:	ee07 3a90 	vmov	s15, r3
 80029f2:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80029f6:	4b3f      	ldr	r3, [pc, #252]	; (8002af4 <HAL_ADCEx_InjectedConvCpltCallback+0x34c>)
 80029f8:	881b      	ldrh	r3, [r3, #0]
 80029fa:	b29b      	uxth	r3, r3
 80029fc:	4a41      	ldr	r2, [pc, #260]	; (8002b04 <HAL_ADCEx_InjectedConvCpltCallback+0x35c>)
 80029fe:	009b      	lsls	r3, r3, #2
 8002a00:	4413      	add	r3, r2
 8002a02:	edd3 7a00 	vldr	s15, [r3]
 8002a06:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002a0a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002a0e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002a12:	ee17 3a90 	vmov	r3, s15
 8002a16:	b21a      	sxth	r2, r3
 8002a18:	4b3c      	ldr	r3, [pc, #240]	; (8002b0c <HAL_ADCEx_InjectedConvCpltCallback+0x364>)
 8002a1a:	801a      	strh	r2, [r3, #0]

Iqd_current_reg();
 8002a1c:	f7fe fb38 	bl	8001090 <Iqd_current_reg>



							/**TRANSFORMATA ODWROTNA PARK'a**/
napiecie_Ualpha=(PI_VD_out*cosinus_pozycja_wal[pozycja_walu_deg]-PI_VQ_out*sinus_pozycja_wal[pozycja_walu_deg])*0.000002;
 8002a20:	4b3b      	ldr	r3, [pc, #236]	; (8002b10 <HAL_ADCEx_InjectedConvCpltCallback+0x368>)
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	ee07 3a90 	vmov	s15, r3
 8002a28:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002a2c:	4b31      	ldr	r3, [pc, #196]	; (8002af4 <HAL_ADCEx_InjectedConvCpltCallback+0x34c>)
 8002a2e:	881b      	ldrh	r3, [r3, #0]
 8002a30:	b29b      	uxth	r3, r3
 8002a32:	4a33      	ldr	r2, [pc, #204]	; (8002b00 <HAL_ADCEx_InjectedConvCpltCallback+0x358>)
 8002a34:	009b      	lsls	r3, r3, #2
 8002a36:	4413      	add	r3, r2
 8002a38:	edd3 7a00 	vldr	s15, [r3]
 8002a3c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002a40:	4b34      	ldr	r3, [pc, #208]	; (8002b14 <HAL_ADCEx_InjectedConvCpltCallback+0x36c>)
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	ee07 3a90 	vmov	s15, r3
 8002a48:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8002a4c:	4b29      	ldr	r3, [pc, #164]	; (8002af4 <HAL_ADCEx_InjectedConvCpltCallback+0x34c>)
 8002a4e:	881b      	ldrh	r3, [r3, #0]
 8002a50:	b29b      	uxth	r3, r3
 8002a52:	4a2c      	ldr	r2, [pc, #176]	; (8002b04 <HAL_ADCEx_InjectedConvCpltCallback+0x35c>)
 8002a54:	009b      	lsls	r3, r3, #2
 8002a56:	4413      	add	r3, r2
 8002a58:	edd3 7a00 	vldr	s15, [r3]
 8002a5c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002a60:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002a64:	ee17 0a90 	vmov	r0, s15
 8002a68:	f7fd fd3a 	bl	80004e0 <__aeabi_f2d>
 8002a6c:	a310      	add	r3, pc, #64	; (adr r3, 8002ab0 <HAL_ADCEx_InjectedConvCpltCallback+0x308>)
 8002a6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a72:	f7fd fd8d 	bl	8000590 <__aeabi_dmul>
 8002a76:	4602      	mov	r2, r0
 8002a78:	460b      	mov	r3, r1
 8002a7a:	4610      	mov	r0, r2
 8002a7c:	4619      	mov	r1, r3
 8002a7e:	f7fe f821 	bl	8000ac4 <__aeabi_d2iz>
 8002a82:	4603      	mov	r3, r0
 8002a84:	4a24      	ldr	r2, [pc, #144]	; (8002b18 <HAL_ADCEx_InjectedConvCpltCallback+0x370>)
 8002a86:	6013      	str	r3, [r2, #0]
napiecie_Ubeta =(PI_VQ_out*cosinus_pozycja_wal[pozycja_walu_deg]+PI_VD_out*sinus_pozycja_wal[pozycja_walu_deg])*0.000002;
 8002a88:	4b22      	ldr	r3, [pc, #136]	; (8002b14 <HAL_ADCEx_InjectedConvCpltCallback+0x36c>)
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	ee07 3a90 	vmov	s15, r3
 8002a90:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002a94:	4b17      	ldr	r3, [pc, #92]	; (8002af4 <HAL_ADCEx_InjectedConvCpltCallback+0x34c>)
 8002a96:	881b      	ldrh	r3, [r3, #0]
 8002a98:	b29b      	uxth	r3, r3
 8002a9a:	e03f      	b.n	8002b1c <HAL_ADCEx_InjectedConvCpltCallback+0x374>
 8002a9c:	f3af 8000 	nop.w
 8002aa0:	020c49ba 	.word	0x020c49ba
 8002aa4:	3fa6872b 	.word	0x3fa6872b
 8002aa8:	b4395810 	.word	0xb4395810
 8002aac:	3fe276c8 	.word	0x3fe276c8
 8002ab0:	a0b5ed8d 	.word	0xa0b5ed8d
 8002ab4:	3ec0c6f7 	.word	0x3ec0c6f7
 8002ab8:	200000fc 	.word	0x200000fc
 8002abc:	200004b0 	.word	0x200004b0
 8002ac0:	000f423f 	.word	0x000f423f
 8002ac4:	200004b8 	.word	0x200004b8
 8002ac8:	200004a8 	.word	0x200004a8
 8002acc:	200004c8 	.word	0x200004c8
 8002ad0:	200000c6 	.word	0x200000c6
 8002ad4:	20000026 	.word	0x20000026
 8002ad8:	20000028 	.word	0x20000028
 8002adc:	48000c00 	.word	0x48000c00
 8002ae0:	200004a0 	.word	0x200004a0
 8002ae4:	20000274 	.word	0x20000274
 8002ae8:	20000078 	.word	0x20000078
 8002aec:	2000049c 	.word	0x2000049c
 8002af0:	200004d2 	.word	0x200004d2
 8002af4:	2000007e 	.word	0x2000007e
 8002af8:	200004c4 	.word	0x200004c4
 8002afc:	200004c6 	.word	0x200004c6
 8002b00:	2000108c 	.word	0x2000108c
 8002b04:	200004d4 	.word	0x200004d4
 8002b08:	200000a8 	.word	0x200000a8
 8002b0c:	200000aa 	.word	0x200000aa
 8002b10:	2000008c 	.word	0x2000008c
 8002b14:	20000090 	.word	0x20000090
 8002b18:	200000ac 	.word	0x200000ac
 8002b1c:	4a4e      	ldr	r2, [pc, #312]	; (8002c58 <HAL_ADCEx_InjectedConvCpltCallback+0x4b0>)
 8002b1e:	009b      	lsls	r3, r3, #2
 8002b20:	4413      	add	r3, r2
 8002b22:	edd3 7a00 	vldr	s15, [r3]
 8002b26:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002b2a:	4b4c      	ldr	r3, [pc, #304]	; (8002c5c <HAL_ADCEx_InjectedConvCpltCallback+0x4b4>)
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	ee07 3a90 	vmov	s15, r3
 8002b32:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8002b36:	4b4a      	ldr	r3, [pc, #296]	; (8002c60 <HAL_ADCEx_InjectedConvCpltCallback+0x4b8>)
 8002b38:	881b      	ldrh	r3, [r3, #0]
 8002b3a:	b29b      	uxth	r3, r3
 8002b3c:	4a49      	ldr	r2, [pc, #292]	; (8002c64 <HAL_ADCEx_InjectedConvCpltCallback+0x4bc>)
 8002b3e:	009b      	lsls	r3, r3, #2
 8002b40:	4413      	add	r3, r2
 8002b42:	edd3 7a00 	vldr	s15, [r3]
 8002b46:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002b4a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002b4e:	ee17 0a90 	vmov	r0, s15
 8002b52:	f7fd fcc5 	bl	80004e0 <__aeabi_f2d>
 8002b56:	a33c      	add	r3, pc, #240	; (adr r3, 8002c48 <HAL_ADCEx_InjectedConvCpltCallback+0x4a0>)
 8002b58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b5c:	f7fd fd18 	bl	8000590 <__aeabi_dmul>
 8002b60:	4602      	mov	r2, r0
 8002b62:	460b      	mov	r3, r1
 8002b64:	4610      	mov	r0, r2
 8002b66:	4619      	mov	r1, r3
 8002b68:	f7fd ffac 	bl	8000ac4 <__aeabi_d2iz>
 8002b6c:	4603      	mov	r3, r0
 8002b6e:	4a3e      	ldr	r2, [pc, #248]	; (8002c68 <HAL_ADCEx_InjectedConvCpltCallback+0x4c0>)
 8002b70:	6013      	str	r3, [r2, #0]

							/**TRANSFORMATA ODWROTNA CLARKA'a**/
napiecie_U_U=napiecie_Ualpha;
 8002b72:	4b3e      	ldr	r3, [pc, #248]	; (8002c6c <HAL_ADCEx_InjectedConvCpltCallback+0x4c4>)
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	4a3e      	ldr	r2, [pc, #248]	; (8002c70 <HAL_ADCEx_InjectedConvCpltCallback+0x4c8>)
 8002b78:	6013      	str	r3, [r2, #0]
napiecie_U_V=((napiecie_Ubeta*1.73)-napiecie_Ualpha)*0.5;
 8002b7a:	4b3b      	ldr	r3, [pc, #236]	; (8002c68 <HAL_ADCEx_InjectedConvCpltCallback+0x4c0>)
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	4618      	mov	r0, r3
 8002b80:	f7fd fc9c 	bl	80004bc <__aeabi_i2d>
 8002b84:	a332      	add	r3, pc, #200	; (adr r3, 8002c50 <HAL_ADCEx_InjectedConvCpltCallback+0x4a8>)
 8002b86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b8a:	f7fd fd01 	bl	8000590 <__aeabi_dmul>
 8002b8e:	4602      	mov	r2, r0
 8002b90:	460b      	mov	r3, r1
 8002b92:	4614      	mov	r4, r2
 8002b94:	461d      	mov	r5, r3
 8002b96:	4b35      	ldr	r3, [pc, #212]	; (8002c6c <HAL_ADCEx_InjectedConvCpltCallback+0x4c4>)
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	4618      	mov	r0, r3
 8002b9c:	f7fd fc8e 	bl	80004bc <__aeabi_i2d>
 8002ba0:	4602      	mov	r2, r0
 8002ba2:	460b      	mov	r3, r1
 8002ba4:	4620      	mov	r0, r4
 8002ba6:	4629      	mov	r1, r5
 8002ba8:	f7fd fb3a 	bl	8000220 <__aeabi_dsub>
 8002bac:	4602      	mov	r2, r0
 8002bae:	460b      	mov	r3, r1
 8002bb0:	4610      	mov	r0, r2
 8002bb2:	4619      	mov	r1, r3
 8002bb4:	f04f 0200 	mov.w	r2, #0
 8002bb8:	4b2e      	ldr	r3, [pc, #184]	; (8002c74 <HAL_ADCEx_InjectedConvCpltCallback+0x4cc>)
 8002bba:	f7fd fce9 	bl	8000590 <__aeabi_dmul>
 8002bbe:	4602      	mov	r2, r0
 8002bc0:	460b      	mov	r3, r1
 8002bc2:	4610      	mov	r0, r2
 8002bc4:	4619      	mov	r1, r3
 8002bc6:	f7fd ff7d 	bl	8000ac4 <__aeabi_d2iz>
 8002bca:	4603      	mov	r3, r0
 8002bcc:	4a2a      	ldr	r2, [pc, #168]	; (8002c78 <HAL_ADCEx_InjectedConvCpltCallback+0x4d0>)
 8002bce:	6013      	str	r3, [r2, #0]
napiecie_U_W=((-napiecie_Ubeta*1.73)-napiecie_Ualpha)*0.5;
 8002bd0:	4b25      	ldr	r3, [pc, #148]	; (8002c68 <HAL_ADCEx_InjectedConvCpltCallback+0x4c0>)
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	425b      	negs	r3, r3
 8002bd6:	4618      	mov	r0, r3
 8002bd8:	f7fd fc70 	bl	80004bc <__aeabi_i2d>
 8002bdc:	a31c      	add	r3, pc, #112	; (adr r3, 8002c50 <HAL_ADCEx_InjectedConvCpltCallback+0x4a8>)
 8002bde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002be2:	f7fd fcd5 	bl	8000590 <__aeabi_dmul>
 8002be6:	4602      	mov	r2, r0
 8002be8:	460b      	mov	r3, r1
 8002bea:	4614      	mov	r4, r2
 8002bec:	461d      	mov	r5, r3
 8002bee:	4b1f      	ldr	r3, [pc, #124]	; (8002c6c <HAL_ADCEx_InjectedConvCpltCallback+0x4c4>)
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	4618      	mov	r0, r3
 8002bf4:	f7fd fc62 	bl	80004bc <__aeabi_i2d>
 8002bf8:	4602      	mov	r2, r0
 8002bfa:	460b      	mov	r3, r1
 8002bfc:	4620      	mov	r0, r4
 8002bfe:	4629      	mov	r1, r5
 8002c00:	f7fd fb0e 	bl	8000220 <__aeabi_dsub>
 8002c04:	4602      	mov	r2, r0
 8002c06:	460b      	mov	r3, r1
 8002c08:	4610      	mov	r0, r2
 8002c0a:	4619      	mov	r1, r3
 8002c0c:	f04f 0200 	mov.w	r2, #0
 8002c10:	4b18      	ldr	r3, [pc, #96]	; (8002c74 <HAL_ADCEx_InjectedConvCpltCallback+0x4cc>)
 8002c12:	f7fd fcbd 	bl	8000590 <__aeabi_dmul>
 8002c16:	4602      	mov	r2, r0
 8002c18:	460b      	mov	r3, r1
 8002c1a:	4610      	mov	r0, r2
 8002c1c:	4619      	mov	r1, r3
 8002c1e:	f7fd ff51 	bl	8000ac4 <__aeabi_d2iz>
 8002c22:	4603      	mov	r3, r0
 8002c24:	4a15      	ldr	r2, [pc, #84]	; (8002c7c <HAL_ADCEx_InjectedConvCpltCallback+0x4d4>)
 8002c26:	6013      	str	r3, [r2, #0]
SPWM_modulacja();

							/**pomocnicze**///25us


SPI_bufor_rx[0]=0;
 8002c28:	4b15      	ldr	r3, [pc, #84]	; (8002c80 <HAL_ADCEx_InjectedConvCpltCallback+0x4d8>)
 8002c2a:	2200      	movs	r2, #0
 8002c2c:	801a      	strh	r2, [r3, #0]
GPIOA->ODR &=~ 1<<5;
 8002c2e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8002c32:	695b      	ldr	r3, [r3, #20]
 8002c34:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8002c38:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002c3c:	6153      	str	r3, [r2, #20]

}
 8002c3e:	bf00      	nop
 8002c40:	3710      	adds	r7, #16
 8002c42:	46bd      	mov	sp, r7
 8002c44:	bdb0      	pop	{r4, r5, r7, pc}
 8002c46:	bf00      	nop
 8002c48:	a0b5ed8d 	.word	0xa0b5ed8d
 8002c4c:	3ec0c6f7 	.word	0x3ec0c6f7
 8002c50:	7ae147ae 	.word	0x7ae147ae
 8002c54:	3ffbae14 	.word	0x3ffbae14
 8002c58:	2000108c 	.word	0x2000108c
 8002c5c:	2000008c 	.word	0x2000008c
 8002c60:	2000007e 	.word	0x2000007e
 8002c64:	200004d4 	.word	0x200004d4
 8002c68:	200000b0 	.word	0x200000b0
 8002c6c:	200000ac 	.word	0x200000ac
 8002c70:	200000b4 	.word	0x200000b4
 8002c74:	3fe00000 	.word	0x3fe00000
 8002c78:	200000b8 	.word	0x200000b8
 8002c7c:	200000bc 	.word	0x200000bc
 8002c80:	200004a0 	.word	0x200004a0

08002c84 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002c84:	b480      	push	{r7}
 8002c86:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002c88:	b672      	cpsid	i
}
 8002c8a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002c8c:	e7fe      	b.n	8002c8c <Error_Handler+0x8>
	...

08002c90 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002c90:	b580      	push	{r7, lr}
 8002c92:	b082      	sub	sp, #8
 8002c94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002c96:	4b0f      	ldr	r3, [pc, #60]	; (8002cd4 <HAL_MspInit+0x44>)
 8002c98:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002c9a:	4a0e      	ldr	r2, [pc, #56]	; (8002cd4 <HAL_MspInit+0x44>)
 8002c9c:	f043 0301 	orr.w	r3, r3, #1
 8002ca0:	6613      	str	r3, [r2, #96]	; 0x60
 8002ca2:	4b0c      	ldr	r3, [pc, #48]	; (8002cd4 <HAL_MspInit+0x44>)
 8002ca4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002ca6:	f003 0301 	and.w	r3, r3, #1
 8002caa:	607b      	str	r3, [r7, #4]
 8002cac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002cae:	4b09      	ldr	r3, [pc, #36]	; (8002cd4 <HAL_MspInit+0x44>)
 8002cb0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002cb2:	4a08      	ldr	r2, [pc, #32]	; (8002cd4 <HAL_MspInit+0x44>)
 8002cb4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002cb8:	6593      	str	r3, [r2, #88]	; 0x58
 8002cba:	4b06      	ldr	r3, [pc, #24]	; (8002cd4 <HAL_MspInit+0x44>)
 8002cbc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002cbe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002cc2:	603b      	str	r3, [r7, #0]
 8002cc4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8002cc6:	f004 f97b 	bl	8006fc0 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002cca:	bf00      	nop
 8002ccc:	3708      	adds	r7, #8
 8002cce:	46bd      	mov	sp, r7
 8002cd0:	bd80      	pop	{r7, pc}
 8002cd2:	bf00      	nop
 8002cd4:	40021000 	.word	0x40021000

08002cd8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002cd8:	b580      	push	{r7, lr}
 8002cda:	b09e      	sub	sp, #120	; 0x78
 8002cdc:	af00      	add	r7, sp, #0
 8002cde:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ce0:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8002ce4:	2200      	movs	r2, #0
 8002ce6:	601a      	str	r2, [r3, #0]
 8002ce8:	605a      	str	r2, [r3, #4]
 8002cea:	609a      	str	r2, [r3, #8]
 8002cec:	60da      	str	r2, [r3, #12]
 8002cee:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002cf0:	f107 0320 	add.w	r3, r7, #32
 8002cf4:	2244      	movs	r2, #68	; 0x44
 8002cf6:	2100      	movs	r1, #0
 8002cf8:	4618      	mov	r0, r3
 8002cfa:	f009 f80b 	bl	800bd14 <memset>
  if(hadc->Instance==ADC1)
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002d06:	d15e      	bne.n	8002dc6 <HAL_ADC_MspInit+0xee>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8002d08:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002d0c:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8002d0e:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8002d12:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002d14:	f107 0320 	add.w	r3, r7, #32
 8002d18:	4618      	mov	r0, r3
 8002d1a:	f004 fe95 	bl	8007a48 <HAL_RCCEx_PeriphCLKConfig>
 8002d1e:	4603      	mov	r3, r0
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d001      	beq.n	8002d28 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8002d24:	f7ff ffae 	bl	8002c84 <Error_Handler>
    }

    /* Peripheral clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 8002d28:	4b4e      	ldr	r3, [pc, #312]	; (8002e64 <HAL_ADC_MspInit+0x18c>)
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	3301      	adds	r3, #1
 8002d2e:	4a4d      	ldr	r2, [pc, #308]	; (8002e64 <HAL_ADC_MspInit+0x18c>)
 8002d30:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8002d32:	4b4c      	ldr	r3, [pc, #304]	; (8002e64 <HAL_ADC_MspInit+0x18c>)
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	2b01      	cmp	r3, #1
 8002d38:	d10b      	bne.n	8002d52 <HAL_ADC_MspInit+0x7a>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8002d3a:	4b4b      	ldr	r3, [pc, #300]	; (8002e68 <HAL_ADC_MspInit+0x190>)
 8002d3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d3e:	4a4a      	ldr	r2, [pc, #296]	; (8002e68 <HAL_ADC_MspInit+0x190>)
 8002d40:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002d44:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002d46:	4b48      	ldr	r3, [pc, #288]	; (8002e68 <HAL_ADC_MspInit+0x190>)
 8002d48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d4a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002d4e:	61fb      	str	r3, [r7, #28]
 8002d50:	69fb      	ldr	r3, [r7, #28]
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002d52:	4b45      	ldr	r3, [pc, #276]	; (8002e68 <HAL_ADC_MspInit+0x190>)
 8002d54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d56:	4a44      	ldr	r2, [pc, #272]	; (8002e68 <HAL_ADC_MspInit+0x190>)
 8002d58:	f043 0304 	orr.w	r3, r3, #4
 8002d5c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002d5e:	4b42      	ldr	r3, [pc, #264]	; (8002e68 <HAL_ADC_MspInit+0x190>)
 8002d60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d62:	f003 0304 	and.w	r3, r3, #4
 8002d66:	61bb      	str	r3, [r7, #24]
 8002d68:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d6a:	4b3f      	ldr	r3, [pc, #252]	; (8002e68 <HAL_ADC_MspInit+0x190>)
 8002d6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d6e:	4a3e      	ldr	r2, [pc, #248]	; (8002e68 <HAL_ADC_MspInit+0x190>)
 8002d70:	f043 0301 	orr.w	r3, r3, #1
 8002d74:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002d76:	4b3c      	ldr	r3, [pc, #240]	; (8002e68 <HAL_ADC_MspInit+0x190>)
 8002d78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d7a:	f003 0301 	and.w	r3, r3, #1
 8002d7e:	617b      	str	r3, [r7, #20]
 8002d80:	697b      	ldr	r3, [r7, #20]
    PC0     ------> ADC1_IN6
    PC1     ------> ADC1_IN7
    PA0     ------> ADC1_IN1
    PA1     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002d82:	2303      	movs	r3, #3
 8002d84:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002d86:	2303      	movs	r3, #3
 8002d88:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d8a:	2300      	movs	r3, #0
 8002d8c:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002d8e:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8002d92:	4619      	mov	r1, r3
 8002d94:	4835      	ldr	r0, [pc, #212]	; (8002e6c <HAL_ADC_MspInit+0x194>)
 8002d96:	f003 feb1 	bl	8006afc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002d9a:	2303      	movs	r3, #3
 8002d9c:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002d9e:	2303      	movs	r3, #3
 8002da0:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002da2:	2300      	movs	r3, #0
 8002da4:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002da6:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8002daa:	4619      	mov	r1, r3
 8002dac:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002db0:	f003 fea4 	bl	8006afc <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8002db4:	2200      	movs	r2, #0
 8002db6:	2100      	movs	r1, #0
 8002db8:	2012      	movs	r0, #18
 8002dba:	f003 f9c2 	bl	8006142 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8002dbe:	2012      	movs	r0, #18
 8002dc0:	f003 f9d9 	bl	8006176 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8002dc4:	e049      	b.n	8002e5a <HAL_ADC_MspInit+0x182>
  else if(hadc->Instance==ADC2)
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	4a29      	ldr	r2, [pc, #164]	; (8002e70 <HAL_ADC_MspInit+0x198>)
 8002dcc:	4293      	cmp	r3, r2
 8002dce:	d144      	bne.n	8002e5a <HAL_ADC_MspInit+0x182>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8002dd0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002dd4:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8002dd6:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8002dda:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002ddc:	f107 0320 	add.w	r3, r7, #32
 8002de0:	4618      	mov	r0, r3
 8002de2:	f004 fe31 	bl	8007a48 <HAL_RCCEx_PeriphCLKConfig>
 8002de6:	4603      	mov	r3, r0
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d001      	beq.n	8002df0 <HAL_ADC_MspInit+0x118>
      Error_Handler();
 8002dec:	f7ff ff4a 	bl	8002c84 <Error_Handler>
    HAL_RCC_ADC12_CLK_ENABLED++;
 8002df0:	4b1c      	ldr	r3, [pc, #112]	; (8002e64 <HAL_ADC_MspInit+0x18c>)
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	3301      	adds	r3, #1
 8002df6:	4a1b      	ldr	r2, [pc, #108]	; (8002e64 <HAL_ADC_MspInit+0x18c>)
 8002df8:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8002dfa:	4b1a      	ldr	r3, [pc, #104]	; (8002e64 <HAL_ADC_MspInit+0x18c>)
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	2b01      	cmp	r3, #1
 8002e00:	d10b      	bne.n	8002e1a <HAL_ADC_MspInit+0x142>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8002e02:	4b19      	ldr	r3, [pc, #100]	; (8002e68 <HAL_ADC_MspInit+0x190>)
 8002e04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e06:	4a18      	ldr	r2, [pc, #96]	; (8002e68 <HAL_ADC_MspInit+0x190>)
 8002e08:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002e0c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002e0e:	4b16      	ldr	r3, [pc, #88]	; (8002e68 <HAL_ADC_MspInit+0x190>)
 8002e10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e12:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002e16:	613b      	str	r3, [r7, #16]
 8002e18:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002e1a:	4b13      	ldr	r3, [pc, #76]	; (8002e68 <HAL_ADC_MspInit+0x190>)
 8002e1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e1e:	4a12      	ldr	r2, [pc, #72]	; (8002e68 <HAL_ADC_MspInit+0x190>)
 8002e20:	f043 0304 	orr.w	r3, r3, #4
 8002e24:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002e26:	4b10      	ldr	r3, [pc, #64]	; (8002e68 <HAL_ADC_MspInit+0x190>)
 8002e28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e2a:	f003 0304 	and.w	r3, r3, #4
 8002e2e:	60fb      	str	r3, [r7, #12]
 8002e30:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002e32:	2304      	movs	r3, #4
 8002e34:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002e36:	2303      	movs	r3, #3
 8002e38:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e3a:	2300      	movs	r3, #0
 8002e3c:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002e3e:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8002e42:	4619      	mov	r1, r3
 8002e44:	4809      	ldr	r0, [pc, #36]	; (8002e6c <HAL_ADC_MspInit+0x194>)
 8002e46:	f003 fe59 	bl	8006afc <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8002e4a:	2200      	movs	r2, #0
 8002e4c:	2100      	movs	r1, #0
 8002e4e:	2012      	movs	r0, #18
 8002e50:	f003 f977 	bl	8006142 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8002e54:	2012      	movs	r0, #18
 8002e56:	f003 f98e 	bl	8006176 <HAL_NVIC_EnableIRQ>
}
 8002e5a:	bf00      	nop
 8002e5c:	3778      	adds	r7, #120	; 0x78
 8002e5e:	46bd      	mov	sp, r7
 8002e60:	bd80      	pop	{r7, pc}
 8002e62:	bf00      	nop
 8002e64:	20001c50 	.word	0x20001c50
 8002e68:	40021000 	.word	0x40021000
 8002e6c:	48000800 	.word	0x48000800
 8002e70:	50000100 	.word	0x50000100

08002e74 <HAL_CORDIC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcordic: CORDIC handle pointer
* @retval None
*/
void HAL_CORDIC_MspInit(CORDIC_HandleTypeDef* hcordic)
{
 8002e74:	b480      	push	{r7}
 8002e76:	b085      	sub	sp, #20
 8002e78:	af00      	add	r7, sp, #0
 8002e7a:	6078      	str	r0, [r7, #4]
  if(hcordic->Instance==CORDIC)
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	4a0a      	ldr	r2, [pc, #40]	; (8002eac <HAL_CORDIC_MspInit+0x38>)
 8002e82:	4293      	cmp	r3, r2
 8002e84:	d10b      	bne.n	8002e9e <HAL_CORDIC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CORDIC_MspInit 0 */

  /* USER CODE END CORDIC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CORDIC_CLK_ENABLE();
 8002e86:	4b0a      	ldr	r3, [pc, #40]	; (8002eb0 <HAL_CORDIC_MspInit+0x3c>)
 8002e88:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002e8a:	4a09      	ldr	r2, [pc, #36]	; (8002eb0 <HAL_CORDIC_MspInit+0x3c>)
 8002e8c:	f043 0308 	orr.w	r3, r3, #8
 8002e90:	6493      	str	r3, [r2, #72]	; 0x48
 8002e92:	4b07      	ldr	r3, [pc, #28]	; (8002eb0 <HAL_CORDIC_MspInit+0x3c>)
 8002e94:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002e96:	f003 0308 	and.w	r3, r3, #8
 8002e9a:	60fb      	str	r3, [r7, #12]
 8002e9c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CORDIC_MspInit 1 */

  /* USER CODE END CORDIC_MspInit 1 */
  }

}
 8002e9e:	bf00      	nop
 8002ea0:	3714      	adds	r7, #20
 8002ea2:	46bd      	mov	sp, r7
 8002ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea8:	4770      	bx	lr
 8002eaa:	bf00      	nop
 8002eac:	40020c00 	.word	0x40020c00
 8002eb0:	40021000 	.word	0x40021000

08002eb4 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8002eb4:	b580      	push	{r7, lr}
 8002eb6:	b08a      	sub	sp, #40	; 0x28
 8002eb8:	af00      	add	r7, sp, #0
 8002eba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ebc:	f107 0314 	add.w	r3, r7, #20
 8002ec0:	2200      	movs	r2, #0
 8002ec2:	601a      	str	r2, [r3, #0]
 8002ec4:	605a      	str	r2, [r3, #4]
 8002ec6:	609a      	str	r2, [r3, #8]
 8002ec8:	60da      	str	r2, [r3, #12]
 8002eca:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	4a19      	ldr	r2, [pc, #100]	; (8002f38 <HAL_DAC_MspInit+0x84>)
 8002ed2:	4293      	cmp	r3, r2
 8002ed4:	d12c      	bne.n	8002f30 <HAL_DAC_MspInit+0x7c>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 8002ed6:	4b19      	ldr	r3, [pc, #100]	; (8002f3c <HAL_DAC_MspInit+0x88>)
 8002ed8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002eda:	4a18      	ldr	r2, [pc, #96]	; (8002f3c <HAL_DAC_MspInit+0x88>)
 8002edc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ee0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002ee2:	4b16      	ldr	r3, [pc, #88]	; (8002f3c <HAL_DAC_MspInit+0x88>)
 8002ee4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ee6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002eea:	613b      	str	r3, [r7, #16]
 8002eec:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002eee:	4b13      	ldr	r3, [pc, #76]	; (8002f3c <HAL_DAC_MspInit+0x88>)
 8002ef0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ef2:	4a12      	ldr	r2, [pc, #72]	; (8002f3c <HAL_DAC_MspInit+0x88>)
 8002ef4:	f043 0301 	orr.w	r3, r3, #1
 8002ef8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002efa:	4b10      	ldr	r3, [pc, #64]	; (8002f3c <HAL_DAC_MspInit+0x88>)
 8002efc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002efe:	f003 0301 	and.w	r3, r3, #1
 8002f02:	60fb      	str	r3, [r7, #12]
 8002f04:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8002f06:	2310      	movs	r3, #16
 8002f08:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002f0a:	2303      	movs	r3, #3
 8002f0c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f0e:	2300      	movs	r3, #0
 8002f10:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002f12:	f107 0314 	add.w	r3, r7, #20
 8002f16:	4619      	mov	r1, r3
 8002f18:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002f1c:	f003 fdee 	bl	8006afc <HAL_GPIO_Init>

    /* DAC1 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8002f20:	2200      	movs	r2, #0
 8002f22:	2100      	movs	r1, #0
 8002f24:	2036      	movs	r0, #54	; 0x36
 8002f26:	f003 f90c 	bl	8006142 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002f2a:	2036      	movs	r0, #54	; 0x36
 8002f2c:	f003 f923 	bl	8006176 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 8002f30:	bf00      	nop
 8002f32:	3728      	adds	r7, #40	; 0x28
 8002f34:	46bd      	mov	sp, r7
 8002f36:	bd80      	pop	{r7, pc}
 8002f38:	50000800 	.word	0x50000800
 8002f3c:	40021000 	.word	0x40021000

08002f40 <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 8002f40:	b580      	push	{r7, lr}
 8002f42:	b09a      	sub	sp, #104	; 0x68
 8002f44:	af00      	add	r7, sp, #0
 8002f46:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f48:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002f4c:	2200      	movs	r2, #0
 8002f4e:	601a      	str	r2, [r3, #0]
 8002f50:	605a      	str	r2, [r3, #4]
 8002f52:	609a      	str	r2, [r3, #8]
 8002f54:	60da      	str	r2, [r3, #12]
 8002f56:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002f58:	f107 0310 	add.w	r3, r7, #16
 8002f5c:	2244      	movs	r2, #68	; 0x44
 8002f5e:	2100      	movs	r1, #0
 8002f60:	4618      	mov	r0, r3
 8002f62:	f008 fed7 	bl	800bd14 <memset>
  if(hfdcan->Instance==FDCAN1)
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	4a20      	ldr	r2, [pc, #128]	; (8002fec <HAL_FDCAN_MspInit+0xac>)
 8002f6c:	4293      	cmp	r3, r2
 8002f6e:	d139      	bne.n	8002fe4 <HAL_FDCAN_MspInit+0xa4>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8002f70:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002f74:	613b      	str	r3, [r7, #16]
    PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PCLK1;
 8002f76:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002f7a:	643b      	str	r3, [r7, #64]	; 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002f7c:	f107 0310 	add.w	r3, r7, #16
 8002f80:	4618      	mov	r0, r3
 8002f82:	f004 fd61 	bl	8007a48 <HAL_RCCEx_PeriphCLKConfig>
 8002f86:	4603      	mov	r3, r0
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d001      	beq.n	8002f90 <HAL_FDCAN_MspInit+0x50>
    {
      Error_Handler();
 8002f8c:	f7ff fe7a 	bl	8002c84 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 8002f90:	4b17      	ldr	r3, [pc, #92]	; (8002ff0 <HAL_FDCAN_MspInit+0xb0>)
 8002f92:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f94:	4a16      	ldr	r2, [pc, #88]	; (8002ff0 <HAL_FDCAN_MspInit+0xb0>)
 8002f96:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002f9a:	6593      	str	r3, [r2, #88]	; 0x58
 8002f9c:	4b14      	ldr	r3, [pc, #80]	; (8002ff0 <HAL_FDCAN_MspInit+0xb0>)
 8002f9e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002fa0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002fa4:	60fb      	str	r3, [r7, #12]
 8002fa6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002fa8:	4b11      	ldr	r3, [pc, #68]	; (8002ff0 <HAL_FDCAN_MspInit+0xb0>)
 8002faa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002fac:	4a10      	ldr	r2, [pc, #64]	; (8002ff0 <HAL_FDCAN_MspInit+0xb0>)
 8002fae:	f043 0301 	orr.w	r3, r3, #1
 8002fb2:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002fb4:	4b0e      	ldr	r3, [pc, #56]	; (8002ff0 <HAL_FDCAN_MspInit+0xb0>)
 8002fb6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002fb8:	f003 0301 	and.w	r3, r3, #1
 8002fbc:	60bb      	str	r3, [r7, #8]
 8002fbe:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN1 GPIO Configuration
    PA11     ------> FDCAN1_RX
    PA12     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8002fc0:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8002fc4:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002fc6:	2302      	movs	r3, #2
 8002fc8:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fca:	2300      	movs	r3, #0
 8002fcc:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002fce:	2300      	movs	r3, #0
 8002fd0:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8002fd2:	2309      	movs	r3, #9
 8002fd4:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002fd6:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002fda:	4619      	mov	r1, r3
 8002fdc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002fe0:	f003 fd8c 	bl	8006afc <HAL_GPIO_Init>
  /* USER CODE BEGIN FDCAN1_MspInit 1 */

  /* USER CODE END FDCAN1_MspInit 1 */
  }

}
 8002fe4:	bf00      	nop
 8002fe6:	3768      	adds	r7, #104	; 0x68
 8002fe8:	46bd      	mov	sp, r7
 8002fea:	bd80      	pop	{r7, pc}
 8002fec:	40006400 	.word	0x40006400
 8002ff0:	40021000 	.word	0x40021000

08002ff4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002ff4:	b580      	push	{r7, lr}
 8002ff6:	b08a      	sub	sp, #40	; 0x28
 8002ff8:	af00      	add	r7, sp, #0
 8002ffa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ffc:	f107 0314 	add.w	r3, r7, #20
 8003000:	2200      	movs	r2, #0
 8003002:	601a      	str	r2, [r3, #0]
 8003004:	605a      	str	r2, [r3, #4]
 8003006:	609a      	str	r2, [r3, #8]
 8003008:	60da      	str	r2, [r3, #12]
 800300a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	4a17      	ldr	r2, [pc, #92]	; (8003070 <HAL_SPI_MspInit+0x7c>)
 8003012:	4293      	cmp	r3, r2
 8003014:	d128      	bne.n	8003068 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8003016:	4b17      	ldr	r3, [pc, #92]	; (8003074 <HAL_SPI_MspInit+0x80>)
 8003018:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800301a:	4a16      	ldr	r2, [pc, #88]	; (8003074 <HAL_SPI_MspInit+0x80>)
 800301c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003020:	6593      	str	r3, [r2, #88]	; 0x58
 8003022:	4b14      	ldr	r3, [pc, #80]	; (8003074 <HAL_SPI_MspInit+0x80>)
 8003024:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003026:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800302a:	613b      	str	r3, [r7, #16]
 800302c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800302e:	4b11      	ldr	r3, [pc, #68]	; (8003074 <HAL_SPI_MspInit+0x80>)
 8003030:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003032:	4a10      	ldr	r2, [pc, #64]	; (8003074 <HAL_SPI_MspInit+0x80>)
 8003034:	f043 0304 	orr.w	r3, r3, #4
 8003038:	64d3      	str	r3, [r2, #76]	; 0x4c
 800303a:	4b0e      	ldr	r3, [pc, #56]	; (8003074 <HAL_SPI_MspInit+0x80>)
 800303c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800303e:	f003 0304 	and.w	r3, r3, #4
 8003042:	60fb      	str	r3, [r7, #12]
 8003044:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8003046:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800304a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800304c:	2302      	movs	r3, #2
 800304e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003050:	2300      	movs	r3, #0
 8003052:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003054:	2300      	movs	r3, #0
 8003056:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8003058:	2306      	movs	r3, #6
 800305a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800305c:	f107 0314 	add.w	r3, r7, #20
 8003060:	4619      	mov	r1, r3
 8003062:	4805      	ldr	r0, [pc, #20]	; (8003078 <HAL_SPI_MspInit+0x84>)
 8003064:	f003 fd4a 	bl	8006afc <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8003068:	bf00      	nop
 800306a:	3728      	adds	r7, #40	; 0x28
 800306c:	46bd      	mov	sp, r7
 800306e:	bd80      	pop	{r7, pc}
 8003070:	40003c00 	.word	0x40003c00
 8003074:	40021000 	.word	0x40021000
 8003078:	48000800 	.word	0x48000800

0800307c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800307c:	b580      	push	{r7, lr}
 800307e:	b086      	sub	sp, #24
 8003080:	af00      	add	r7, sp, #0
 8003082:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	4a33      	ldr	r2, [pc, #204]	; (8003158 <HAL_TIM_Base_MspInit+0xdc>)
 800308a:	4293      	cmp	r3, r2
 800308c:	d12c      	bne.n	80030e8 <HAL_TIM_Base_MspInit+0x6c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800308e:	4b33      	ldr	r3, [pc, #204]	; (800315c <HAL_TIM_Base_MspInit+0xe0>)
 8003090:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003092:	4a32      	ldr	r2, [pc, #200]	; (800315c <HAL_TIM_Base_MspInit+0xe0>)
 8003094:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003098:	6613      	str	r3, [r2, #96]	; 0x60
 800309a:	4b30      	ldr	r3, [pc, #192]	; (800315c <HAL_TIM_Base_MspInit+0xe0>)
 800309c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800309e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80030a2:	617b      	str	r3, [r7, #20]
 80030a4:	697b      	ldr	r3, [r7, #20]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 0, 0);
 80030a6:	2200      	movs	r2, #0
 80030a8:	2100      	movs	r1, #0
 80030aa:	2018      	movs	r0, #24
 80030ac:	f003 f849 	bl	8006142 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 80030b0:	2018      	movs	r0, #24
 80030b2:	f003 f860 	bl	8006176 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 80030b6:	2200      	movs	r2, #0
 80030b8:	2100      	movs	r1, #0
 80030ba:	2019      	movs	r0, #25
 80030bc:	f003 f841 	bl	8006142 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 80030c0:	2019      	movs	r0, #25
 80030c2:	f003 f858 	bl	8006176 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, 0, 0);
 80030c6:	2200      	movs	r2, #0
 80030c8:	2100      	movs	r1, #0
 80030ca:	201a      	movs	r0, #26
 80030cc:	f003 f839 	bl	8006142 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 80030d0:	201a      	movs	r0, #26
 80030d2:	f003 f850 	bl	8006176 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 80030d6:	2200      	movs	r2, #0
 80030d8:	2100      	movs	r1, #0
 80030da:	201b      	movs	r0, #27
 80030dc:	f003 f831 	bl	8006142 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 80030e0:	201b      	movs	r0, #27
 80030e2:	f003 f848 	bl	8006176 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }

}
 80030e6:	e032      	b.n	800314e <HAL_TIM_Base_MspInit+0xd2>
  else if(htim_base->Instance==TIM6)
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	4a1c      	ldr	r2, [pc, #112]	; (8003160 <HAL_TIM_Base_MspInit+0xe4>)
 80030ee:	4293      	cmp	r3, r2
 80030f0:	d114      	bne.n	800311c <HAL_TIM_Base_MspInit+0xa0>
    __HAL_RCC_TIM6_CLK_ENABLE();
 80030f2:	4b1a      	ldr	r3, [pc, #104]	; (800315c <HAL_TIM_Base_MspInit+0xe0>)
 80030f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030f6:	4a19      	ldr	r2, [pc, #100]	; (800315c <HAL_TIM_Base_MspInit+0xe0>)
 80030f8:	f043 0310 	orr.w	r3, r3, #16
 80030fc:	6593      	str	r3, [r2, #88]	; 0x58
 80030fe:	4b17      	ldr	r3, [pc, #92]	; (800315c <HAL_TIM_Base_MspInit+0xe0>)
 8003100:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003102:	f003 0310 	and.w	r3, r3, #16
 8003106:	613b      	str	r3, [r7, #16]
 8003108:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 800310a:	2200      	movs	r2, #0
 800310c:	2100      	movs	r1, #0
 800310e:	2036      	movs	r0, #54	; 0x36
 8003110:	f003 f817 	bl	8006142 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8003114:	2036      	movs	r0, #54	; 0x36
 8003116:	f003 f82e 	bl	8006176 <HAL_NVIC_EnableIRQ>
}
 800311a:	e018      	b.n	800314e <HAL_TIM_Base_MspInit+0xd2>
  else if(htim_base->Instance==TIM17)
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	4a10      	ldr	r2, [pc, #64]	; (8003164 <HAL_TIM_Base_MspInit+0xe8>)
 8003122:	4293      	cmp	r3, r2
 8003124:	d113      	bne.n	800314e <HAL_TIM_Base_MspInit+0xd2>
    __HAL_RCC_TIM17_CLK_ENABLE();
 8003126:	4b0d      	ldr	r3, [pc, #52]	; (800315c <HAL_TIM_Base_MspInit+0xe0>)
 8003128:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800312a:	4a0c      	ldr	r2, [pc, #48]	; (800315c <HAL_TIM_Base_MspInit+0xe0>)
 800312c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003130:	6613      	str	r3, [r2, #96]	; 0x60
 8003132:	4b0a      	ldr	r3, [pc, #40]	; (800315c <HAL_TIM_Base_MspInit+0xe0>)
 8003134:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003136:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800313a:	60fb      	str	r3, [r7, #12]
 800313c:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, 0, 0);
 800313e:	2200      	movs	r2, #0
 8003140:	2100      	movs	r1, #0
 8003142:	201a      	movs	r0, #26
 8003144:	f002 fffd 	bl	8006142 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 8003148:	201a      	movs	r0, #26
 800314a:	f003 f814 	bl	8006176 <HAL_NVIC_EnableIRQ>
}
 800314e:	bf00      	nop
 8003150:	3718      	adds	r7, #24
 8003152:	46bd      	mov	sp, r7
 8003154:	bd80      	pop	{r7, pc}
 8003156:	bf00      	nop
 8003158:	40012c00 	.word	0x40012c00
 800315c:	40021000 	.word	0x40021000
 8003160:	40001000 	.word	0x40001000
 8003164:	40014800 	.word	0x40014800

08003168 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8003168:	b580      	push	{r7, lr}
 800316a:	b08a      	sub	sp, #40	; 0x28
 800316c:	af00      	add	r7, sp, #0
 800316e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003170:	f107 0314 	add.w	r3, r7, #20
 8003174:	2200      	movs	r2, #0
 8003176:	601a      	str	r2, [r3, #0]
 8003178:	605a      	str	r2, [r3, #4]
 800317a:	609a      	str	r2, [r3, #8]
 800317c:	60da      	str	r2, [r3, #12]
 800317e:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003188:	d14d      	bne.n	8003226 <HAL_TIM_Encoder_MspInit+0xbe>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800318a:	4b29      	ldr	r3, [pc, #164]	; (8003230 <HAL_TIM_Encoder_MspInit+0xc8>)
 800318c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800318e:	4a28      	ldr	r2, [pc, #160]	; (8003230 <HAL_TIM_Encoder_MspInit+0xc8>)
 8003190:	f043 0301 	orr.w	r3, r3, #1
 8003194:	6593      	str	r3, [r2, #88]	; 0x58
 8003196:	4b26      	ldr	r3, [pc, #152]	; (8003230 <HAL_TIM_Encoder_MspInit+0xc8>)
 8003198:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800319a:	f003 0301 	and.w	r3, r3, #1
 800319e:	613b      	str	r3, [r7, #16]
 80031a0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80031a2:	4b23      	ldr	r3, [pc, #140]	; (8003230 <HAL_TIM_Encoder_MspInit+0xc8>)
 80031a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80031a6:	4a22      	ldr	r2, [pc, #136]	; (8003230 <HAL_TIM_Encoder_MspInit+0xc8>)
 80031a8:	f043 0301 	orr.w	r3, r3, #1
 80031ac:	64d3      	str	r3, [r2, #76]	; 0x4c
 80031ae:	4b20      	ldr	r3, [pc, #128]	; (8003230 <HAL_TIM_Encoder_MspInit+0xc8>)
 80031b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80031b2:	f003 0301 	and.w	r3, r3, #1
 80031b6:	60fb      	str	r3, [r7, #12]
 80031b8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80031ba:	4b1d      	ldr	r3, [pc, #116]	; (8003230 <HAL_TIM_Encoder_MspInit+0xc8>)
 80031bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80031be:	4a1c      	ldr	r2, [pc, #112]	; (8003230 <HAL_TIM_Encoder_MspInit+0xc8>)
 80031c0:	f043 0302 	orr.w	r3, r3, #2
 80031c4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80031c6:	4b1a      	ldr	r3, [pc, #104]	; (8003230 <HAL_TIM_Encoder_MspInit+0xc8>)
 80031c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80031ca:	f003 0302 	and.w	r3, r3, #2
 80031ce:	60bb      	str	r3, [r7, #8]
 80031d0:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80031d2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80031d6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80031d8:	2302      	movs	r3, #2
 80031da:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031dc:	2300      	movs	r3, #0
 80031de:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80031e0:	2300      	movs	r3, #0
 80031e2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80031e4:	2301      	movs	r3, #1
 80031e6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80031e8:	f107 0314 	add.w	r3, r7, #20
 80031ec:	4619      	mov	r1, r3
 80031ee:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80031f2:	f003 fc83 	bl	8006afc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80031f6:	2308      	movs	r3, #8
 80031f8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80031fa:	2302      	movs	r3, #2
 80031fc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031fe:	2300      	movs	r3, #0
 8003200:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003202:	2300      	movs	r3, #0
 8003204:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003206:	2301      	movs	r3, #1
 8003208:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800320a:	f107 0314 	add.w	r3, r7, #20
 800320e:	4619      	mov	r1, r3
 8003210:	4808      	ldr	r0, [pc, #32]	; (8003234 <HAL_TIM_Encoder_MspInit+0xcc>)
 8003212:	f003 fc73 	bl	8006afc <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8003216:	2200      	movs	r2, #0
 8003218:	2100      	movs	r1, #0
 800321a:	201c      	movs	r0, #28
 800321c:	f002 ff91 	bl	8006142 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8003220:	201c      	movs	r0, #28
 8003222:	f002 ffa8 	bl	8006176 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8003226:	bf00      	nop
 8003228:	3728      	adds	r7, #40	; 0x28
 800322a:	46bd      	mov	sp, r7
 800322c:	bd80      	pop	{r7, pc}
 800322e:	bf00      	nop
 8003230:	40021000 	.word	0x40021000
 8003234:	48000400 	.word	0x48000400

08003238 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003238:	b580      	push	{r7, lr}
 800323a:	b08a      	sub	sp, #40	; 0x28
 800323c:	af00      	add	r7, sp, #0
 800323e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003240:	f107 0314 	add.w	r3, r7, #20
 8003244:	2200      	movs	r2, #0
 8003246:	601a      	str	r2, [r3, #0]
 8003248:	605a      	str	r2, [r3, #4]
 800324a:	609a      	str	r2, [r3, #8]
 800324c:	60da      	str	r2, [r3, #12]
 800324e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	4a20      	ldr	r2, [pc, #128]	; (80032d8 <HAL_TIM_MspPostInit+0xa0>)
 8003256:	4293      	cmp	r3, r2
 8003258:	d139      	bne.n	80032ce <HAL_TIM_MspPostInit+0x96>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800325a:	4b20      	ldr	r3, [pc, #128]	; (80032dc <HAL_TIM_MspPostInit+0xa4>)
 800325c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800325e:	4a1f      	ldr	r2, [pc, #124]	; (80032dc <HAL_TIM_MspPostInit+0xa4>)
 8003260:	f043 0301 	orr.w	r3, r3, #1
 8003264:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003266:	4b1d      	ldr	r3, [pc, #116]	; (80032dc <HAL_TIM_MspPostInit+0xa4>)
 8003268:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800326a:	f003 0301 	and.w	r3, r3, #1
 800326e:	613b      	str	r3, [r7, #16]
 8003270:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003272:	4b1a      	ldr	r3, [pc, #104]	; (80032dc <HAL_TIM_MspPostInit+0xa4>)
 8003274:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003276:	4a19      	ldr	r2, [pc, #100]	; (80032dc <HAL_TIM_MspPostInit+0xa4>)
 8003278:	f043 0302 	orr.w	r3, r3, #2
 800327c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800327e:	4b17      	ldr	r3, [pc, #92]	; (80032dc <HAL_TIM_MspPostInit+0xa4>)
 8003280:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003282:	f003 0302 	and.w	r3, r3, #2
 8003286:	60fb      	str	r3, [r7, #12]
 8003288:	68fb      	ldr	r3, [r7, #12]
    PB1     ------> TIM1_CH3N
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 800328a:	f44f 63f0 	mov.w	r3, #1920	; 0x780
 800328e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003290:	2302      	movs	r3, #2
 8003292:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003294:	2300      	movs	r3, #0
 8003296:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003298:	2300      	movs	r3, #0
 800329a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 800329c:	2306      	movs	r3, #6
 800329e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80032a0:	f107 0314 	add.w	r3, r7, #20
 80032a4:	4619      	mov	r1, r3
 80032a6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80032aa:	f003 fc27 	bl	8006afc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80032ae:	2303      	movs	r3, #3
 80032b0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80032b2:	2302      	movs	r3, #2
 80032b4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032b6:	2300      	movs	r3, #0
 80032b8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80032ba:	2300      	movs	r3, #0
 80032bc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 80032be:	2306      	movs	r3, #6
 80032c0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80032c2:	f107 0314 	add.w	r3, r7, #20
 80032c6:	4619      	mov	r1, r3
 80032c8:	4805      	ldr	r0, [pc, #20]	; (80032e0 <HAL_TIM_MspPostInit+0xa8>)
 80032ca:	f003 fc17 	bl	8006afc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80032ce:	bf00      	nop
 80032d0:	3728      	adds	r7, #40	; 0x28
 80032d2:	46bd      	mov	sp, r7
 80032d4:	bd80      	pop	{r7, pc}
 80032d6:	bf00      	nop
 80032d8:	40012c00 	.word	0x40012c00
 80032dc:	40021000 	.word	0x40021000
 80032e0:	48000400 	.word	0x48000400

080032e4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80032e4:	b580      	push	{r7, lr}
 80032e6:	b09a      	sub	sp, #104	; 0x68
 80032e8:	af00      	add	r7, sp, #0
 80032ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80032ec:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80032f0:	2200      	movs	r2, #0
 80032f2:	601a      	str	r2, [r3, #0]
 80032f4:	605a      	str	r2, [r3, #4]
 80032f6:	609a      	str	r2, [r3, #8]
 80032f8:	60da      	str	r2, [r3, #12]
 80032fa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80032fc:	f107 0310 	add.w	r3, r7, #16
 8003300:	2244      	movs	r2, #68	; 0x44
 8003302:	2100      	movs	r1, #0
 8003304:	4618      	mov	r0, r3
 8003306:	f008 fd05 	bl	800bd14 <memset>
  if(huart->Instance==USART1)
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	4a22      	ldr	r2, [pc, #136]	; (8003398 <HAL_UART_MspInit+0xb4>)
 8003310:	4293      	cmp	r3, r2
 8003312:	d13d      	bne.n	8003390 <HAL_UART_MspInit+0xac>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8003314:	2301      	movs	r3, #1
 8003316:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8003318:	2300      	movs	r3, #0
 800331a:	617b      	str	r3, [r7, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800331c:	f107 0310 	add.w	r3, r7, #16
 8003320:	4618      	mov	r0, r3
 8003322:	f004 fb91 	bl	8007a48 <HAL_RCCEx_PeriphCLKConfig>
 8003326:	4603      	mov	r3, r0
 8003328:	2b00      	cmp	r3, #0
 800332a:	d001      	beq.n	8003330 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 800332c:	f7ff fcaa 	bl	8002c84 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003330:	4b1a      	ldr	r3, [pc, #104]	; (800339c <HAL_UART_MspInit+0xb8>)
 8003332:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003334:	4a19      	ldr	r2, [pc, #100]	; (800339c <HAL_UART_MspInit+0xb8>)
 8003336:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800333a:	6613      	str	r3, [r2, #96]	; 0x60
 800333c:	4b17      	ldr	r3, [pc, #92]	; (800339c <HAL_UART_MspInit+0xb8>)
 800333e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003340:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003344:	60fb      	str	r3, [r7, #12]
 8003346:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003348:	4b14      	ldr	r3, [pc, #80]	; (800339c <HAL_UART_MspInit+0xb8>)
 800334a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800334c:	4a13      	ldr	r2, [pc, #76]	; (800339c <HAL_UART_MspInit+0xb8>)
 800334e:	f043 0304 	orr.w	r3, r3, #4
 8003352:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003354:	4b11      	ldr	r3, [pc, #68]	; (800339c <HAL_UART_MspInit+0xb8>)
 8003356:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003358:	f003 0304 	and.w	r3, r3, #4
 800335c:	60bb      	str	r3, [r7, #8]
 800335e:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PC4     ------> USART1_TX
    PC5     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8003360:	2330      	movs	r3, #48	; 0x30
 8003362:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003364:	2302      	movs	r3, #2
 8003366:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003368:	2300      	movs	r3, #0
 800336a:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800336c:	2300      	movs	r3, #0
 800336e:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003370:	2307      	movs	r3, #7
 8003372:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003374:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8003378:	4619      	mov	r1, r3
 800337a:	4809      	ldr	r0, [pc, #36]	; (80033a0 <HAL_UART_MspInit+0xbc>)
 800337c:	f003 fbbe 	bl	8006afc <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8003380:	2200      	movs	r2, #0
 8003382:	2100      	movs	r1, #0
 8003384:	2025      	movs	r0, #37	; 0x25
 8003386:	f002 fedc 	bl	8006142 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800338a:	2025      	movs	r0, #37	; 0x25
 800338c:	f002 fef3 	bl	8006176 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8003390:	bf00      	nop
 8003392:	3768      	adds	r7, #104	; 0x68
 8003394:	46bd      	mov	sp, r7
 8003396:	bd80      	pop	{r7, pc}
 8003398:	40013800 	.word	0x40013800
 800339c:	40021000 	.word	0x40021000
 80033a0:	48000800 	.word	0x48000800

080033a4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80033a4:	b480      	push	{r7}
 80033a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80033a8:	e7fe      	b.n	80033a8 <NMI_Handler+0x4>

080033aa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80033aa:	b480      	push	{r7}
 80033ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80033ae:	e7fe      	b.n	80033ae <HardFault_Handler+0x4>

080033b0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80033b0:	b480      	push	{r7}
 80033b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80033b4:	e7fe      	b.n	80033b4 <MemManage_Handler+0x4>

080033b6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80033b6:	b480      	push	{r7}
 80033b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80033ba:	e7fe      	b.n	80033ba <BusFault_Handler+0x4>

080033bc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80033bc:	b480      	push	{r7}
 80033be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80033c0:	e7fe      	b.n	80033c0 <UsageFault_Handler+0x4>

080033c2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80033c2:	b480      	push	{r7}
 80033c4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80033c6:	bf00      	nop
 80033c8:	46bd      	mov	sp, r7
 80033ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ce:	4770      	bx	lr

080033d0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80033d0:	b480      	push	{r7}
 80033d2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80033d4:	bf00      	nop
 80033d6:	46bd      	mov	sp, r7
 80033d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033dc:	4770      	bx	lr

080033de <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80033de:	b480      	push	{r7}
 80033e0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80033e2:	bf00      	nop
 80033e4:	46bd      	mov	sp, r7
 80033e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ea:	4770      	bx	lr
 80033ec:	0000      	movs	r0, r0
	...

080033f0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80033f0:	b580      	push	{r7, lr}
 80033f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	static int16_t start=2000, start_speed, count_10ms, poz_x, poz_pop, poz_pop_cal,licznik_10ms, licznik_100ms;


	start_speed++;
 80033f4:	4b72      	ldr	r3, [pc, #456]	; (80035c0 <SysTick_Handler+0x1d0>)
 80033f6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80033fa:	b29b      	uxth	r3, r3
 80033fc:	3301      	adds	r3, #1
 80033fe:	b29b      	uxth	r3, r3
 8003400:	b21a      	sxth	r2, r3
 8003402:	4b6f      	ldr	r3, [pc, #444]	; (80035c0 <SysTick_Handler+0x1d0>)
 8003404:	801a      	strh	r2, [r3, #0]

	count++;
 8003406:	4b6f      	ldr	r3, [pc, #444]	; (80035c4 <SysTick_Handler+0x1d4>)
 8003408:	881b      	ldrh	r3, [r3, #0]
 800340a:	3301      	adds	r3, #1
 800340c:	b29a      	uxth	r2, r3
 800340e:	4b6d      	ldr	r3, [pc, #436]	; (80035c4 <SysTick_Handler+0x1d4>)
 8003410:	801a      	strh	r2, [r3, #0]
	count_10ms++;
 8003412:	4b6d      	ldr	r3, [pc, #436]	; (80035c8 <SysTick_Handler+0x1d8>)
 8003414:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003418:	b29b      	uxth	r3, r3
 800341a:	3301      	adds	r3, #1
 800341c:	b29b      	uxth	r3, r3
 800341e:	b21a      	sxth	r2, r3
 8003420:	4b69      	ldr	r3, [pc, #420]	; (80035c8 <SysTick_Handler+0x1d8>)
 8003422:	801a      	strh	r2, [r3, #0]
		if(count==5)
 8003424:	4b67      	ldr	r3, [pc, #412]	; (80035c4 <SysTick_Handler+0x1d4>)
 8003426:	881b      	ldrh	r3, [r3, #0]
 8003428:	2b05      	cmp	r3, #5
 800342a:	f040 8161 	bne.w	80036f0 <SysTick_Handler+0x300>
		{
			if(tryb_speed_m==1)
 800342e:	4b67      	ldr	r3, [pc, #412]	; (80035cc <SysTick_Handler+0x1dc>)
 8003430:	781b      	ldrb	r3, [r3, #0]
 8003432:	b2db      	uxtb	r3, r3
 8003434:	2b01      	cmp	r3, #1
 8003436:	f040 8158 	bne.w	80036ea <SysTick_Handler+0x2fa>
			{
				pozycja_x=pozycja_walu;
 800343a:	4b65      	ldr	r3, [pc, #404]	; (80035d0 <SysTick_Handler+0x1e0>)
 800343c:	881b      	ldrh	r3, [r3, #0]
 800343e:	b29b      	uxth	r3, r3
 8003440:	b21a      	sxth	r2, r3
 8003442:	4b64      	ldr	r3, [pc, #400]	; (80035d4 <SysTick_Handler+0x1e4>)
 8003444:	801a      	strh	r2, [r3, #0]

				if(kierunek2==0&&(pozycja_poprz-pozycja_x>10||pozycja_poprz-pozycja_x<-10))
 8003446:	4b64      	ldr	r3, [pc, #400]	; (80035d8 <SysTick_Handler+0x1e8>)
 8003448:	881b      	ldrh	r3, [r3, #0]
 800344a:	b29b      	uxth	r3, r3
 800344c:	2b00      	cmp	r3, #0
 800344e:	d171      	bne.n	8003534 <SysTick_Handler+0x144>
 8003450:	4b62      	ldr	r3, [pc, #392]	; (80035dc <SysTick_Handler+0x1ec>)
 8003452:	881b      	ldrh	r3, [r3, #0]
 8003454:	b21b      	sxth	r3, r3
 8003456:	461a      	mov	r2, r3
 8003458:	4b5e      	ldr	r3, [pc, #376]	; (80035d4 <SysTick_Handler+0x1e4>)
 800345a:	881b      	ldrh	r3, [r3, #0]
 800345c:	b21b      	sxth	r3, r3
 800345e:	1ad3      	subs	r3, r2, r3
 8003460:	2b0a      	cmp	r3, #10
 8003462:	dc0a      	bgt.n	800347a <SysTick_Handler+0x8a>
 8003464:	4b5d      	ldr	r3, [pc, #372]	; (80035dc <SysTick_Handler+0x1ec>)
 8003466:	881b      	ldrh	r3, [r3, #0]
 8003468:	b21b      	sxth	r3, r3
 800346a:	461a      	mov	r2, r3
 800346c:	4b59      	ldr	r3, [pc, #356]	; (80035d4 <SysTick_Handler+0x1e4>)
 800346e:	881b      	ldrh	r3, [r3, #0]
 8003470:	b21b      	sxth	r3, r3
 8003472:	1ad3      	subs	r3, r2, r3
 8003474:	f113 0f0a 	cmn.w	r3, #10
 8003478:	da5c      	bge.n	8003534 <SysTick_Handler+0x144>
				{
					if(pozycja_x>pozycja_poprz)
 800347a:	4b56      	ldr	r3, [pc, #344]	; (80035d4 <SysTick_Handler+0x1e4>)
 800347c:	881b      	ldrh	r3, [r3, #0]
 800347e:	b21a      	sxth	r2, r3
 8003480:	4b56      	ldr	r3, [pc, #344]	; (80035dc <SysTick_Handler+0x1ec>)
 8003482:	881b      	ldrh	r3, [r3, #0]
 8003484:	b21b      	sxth	r3, r3
 8003486:	429a      	cmp	r2, r3
 8003488:	dd1d      	ble.n	80034c6 <SysTick_Handler+0xd6>
					{
						rpm_speed =abs((pozycja_x-pozycja_poprz))*0.72; //0.72
 800348a:	4b52      	ldr	r3, [pc, #328]	; (80035d4 <SysTick_Handler+0x1e4>)
 800348c:	881b      	ldrh	r3, [r3, #0]
 800348e:	b21b      	sxth	r3, r3
 8003490:	461a      	mov	r2, r3
 8003492:	4b52      	ldr	r3, [pc, #328]	; (80035dc <SysTick_Handler+0x1ec>)
 8003494:	881b      	ldrh	r3, [r3, #0]
 8003496:	b21b      	sxth	r3, r3
 8003498:	1ad3      	subs	r3, r2, r3
 800349a:	2b00      	cmp	r3, #0
 800349c:	bfb8      	it	lt
 800349e:	425b      	neglt	r3, r3
 80034a0:	4618      	mov	r0, r3
 80034a2:	f7fd f80b 	bl	80004bc <__aeabi_i2d>
 80034a6:	a344      	add	r3, pc, #272	; (adr r3, 80035b8 <SysTick_Handler+0x1c8>)
 80034a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034ac:	f7fd f870 	bl	8000590 <__aeabi_dmul>
 80034b0:	4602      	mov	r2, r0
 80034b2:	460b      	mov	r3, r1
 80034b4:	4610      	mov	r0, r2
 80034b6:	4619      	mov	r1, r3
 80034b8:	f7fd fb04 	bl	8000ac4 <__aeabi_d2iz>
 80034bc:	4603      	mov	r3, r0
 80034be:	b21a      	sxth	r2, r3
 80034c0:	4b47      	ldr	r3, [pc, #284]	; (80035e0 <SysTick_Handler+0x1f0>)
 80034c2:	801a      	strh	r2, [r3, #0]
 80034c4:	e026      	b.n	8003514 <SysTick_Handler+0x124>
					}
					else if(pozycja_x<pozycja_poprz)
 80034c6:	4b43      	ldr	r3, [pc, #268]	; (80035d4 <SysTick_Handler+0x1e4>)
 80034c8:	881b      	ldrh	r3, [r3, #0]
 80034ca:	b21a      	sxth	r2, r3
 80034cc:	4b43      	ldr	r3, [pc, #268]	; (80035dc <SysTick_Handler+0x1ec>)
 80034ce:	881b      	ldrh	r3, [r3, #0]
 80034d0:	b21b      	sxth	r3, r3
 80034d2:	429a      	cmp	r2, r3
 80034d4:	da1e      	bge.n	8003514 <SysTick_Handler+0x124>
					{
						rpm_speed=abs((16385-pozycja_poprz)+pozycja_x)*0.72;
 80034d6:	4b41      	ldr	r3, [pc, #260]	; (80035dc <SysTick_Handler+0x1ec>)
 80034d8:	881b      	ldrh	r3, [r3, #0]
 80034da:	b21b      	sxth	r3, r3
 80034dc:	f5c3 4380 	rsb	r3, r3, #16384	; 0x4000
 80034e0:	3301      	adds	r3, #1
 80034e2:	4a3c      	ldr	r2, [pc, #240]	; (80035d4 <SysTick_Handler+0x1e4>)
 80034e4:	8812      	ldrh	r2, [r2, #0]
 80034e6:	b212      	sxth	r2, r2
 80034e8:	4413      	add	r3, r2
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	bfb8      	it	lt
 80034ee:	425b      	neglt	r3, r3
 80034f0:	4618      	mov	r0, r3
 80034f2:	f7fc ffe3 	bl	80004bc <__aeabi_i2d>
 80034f6:	a330      	add	r3, pc, #192	; (adr r3, 80035b8 <SysTick_Handler+0x1c8>)
 80034f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034fc:	f7fd f848 	bl	8000590 <__aeabi_dmul>
 8003500:	4602      	mov	r2, r0
 8003502:	460b      	mov	r3, r1
 8003504:	4610      	mov	r0, r2
 8003506:	4619      	mov	r1, r3
 8003508:	f7fd fadc 	bl	8000ac4 <__aeabi_d2iz>
 800350c:	4603      	mov	r3, r0
 800350e:	b21a      	sxth	r2, r3
 8003510:	4b33      	ldr	r3, [pc, #204]	; (80035e0 <SysTick_Handler+0x1f0>)
 8003512:	801a      	strh	r2, [r3, #0]
					}
					 if(pozycja_x==pozycja_poprz){obroty_pom=0;rpm_speed=0;}
 8003514:	4b2f      	ldr	r3, [pc, #188]	; (80035d4 <SysTick_Handler+0x1e4>)
 8003516:	881b      	ldrh	r3, [r3, #0]
 8003518:	b21a      	sxth	r2, r3
 800351a:	4b30      	ldr	r3, [pc, #192]	; (80035dc <SysTick_Handler+0x1ec>)
 800351c:	881b      	ldrh	r3, [r3, #0]
 800351e:	b21b      	sxth	r3, r3
 8003520:	429a      	cmp	r2, r3
 8003522:	f040 8091 	bne.w	8003648 <SysTick_Handler+0x258>
 8003526:	4b2f      	ldr	r3, [pc, #188]	; (80035e4 <SysTick_Handler+0x1f4>)
 8003528:	2200      	movs	r2, #0
 800352a:	801a      	strh	r2, [r3, #0]
 800352c:	4b2c      	ldr	r3, [pc, #176]	; (80035e0 <SysTick_Handler+0x1f0>)
 800352e:	2200      	movs	r2, #0
 8003530:	801a      	strh	r2, [r3, #0]
 8003532:	e089      	b.n	8003648 <SysTick_Handler+0x258>
				}

				else if(kierunek2==16&&(pozycja_poprz-pozycja_x>10||pozycja_poprz-pozycja_x<-10))
 8003534:	4b28      	ldr	r3, [pc, #160]	; (80035d8 <SysTick_Handler+0x1e8>)
 8003536:	881b      	ldrh	r3, [r3, #0]
 8003538:	b29b      	uxth	r3, r3
 800353a:	2b10      	cmp	r3, #16
 800353c:	f040 8084 	bne.w	8003648 <SysTick_Handler+0x258>
 8003540:	4b26      	ldr	r3, [pc, #152]	; (80035dc <SysTick_Handler+0x1ec>)
 8003542:	881b      	ldrh	r3, [r3, #0]
 8003544:	b21b      	sxth	r3, r3
 8003546:	461a      	mov	r2, r3
 8003548:	4b22      	ldr	r3, [pc, #136]	; (80035d4 <SysTick_Handler+0x1e4>)
 800354a:	881b      	ldrh	r3, [r3, #0]
 800354c:	b21b      	sxth	r3, r3
 800354e:	1ad3      	subs	r3, r2, r3
 8003550:	2b0a      	cmp	r3, #10
 8003552:	dc0a      	bgt.n	800356a <SysTick_Handler+0x17a>
 8003554:	4b21      	ldr	r3, [pc, #132]	; (80035dc <SysTick_Handler+0x1ec>)
 8003556:	881b      	ldrh	r3, [r3, #0]
 8003558:	b21b      	sxth	r3, r3
 800355a:	461a      	mov	r2, r3
 800355c:	4b1d      	ldr	r3, [pc, #116]	; (80035d4 <SysTick_Handler+0x1e4>)
 800355e:	881b      	ldrh	r3, [r3, #0]
 8003560:	b21b      	sxth	r3, r3
 8003562:	1ad3      	subs	r3, r2, r3
 8003564:	f113 0f0a 	cmn.w	r3, #10
 8003568:	da6e      	bge.n	8003648 <SysTick_Handler+0x258>
				{
					if(pozycja_x>pozycja_poprz)
 800356a:	4b1a      	ldr	r3, [pc, #104]	; (80035d4 <SysTick_Handler+0x1e4>)
 800356c:	881b      	ldrh	r3, [r3, #0]
 800356e:	b21a      	sxth	r2, r3
 8003570:	4b1a      	ldr	r3, [pc, #104]	; (80035dc <SysTick_Handler+0x1ec>)
 8003572:	881b      	ldrh	r3, [r3, #0]
 8003574:	b21b      	sxth	r3, r3
 8003576:	429a      	cmp	r2, r3
 8003578:	dd36      	ble.n	80035e8 <SysTick_Handler+0x1f8>
					{
						rpm_speed = -((16385-pozycja_x)+pozycja_poprz)*0.72;
 800357a:	4b16      	ldr	r3, [pc, #88]	; (80035d4 <SysTick_Handler+0x1e4>)
 800357c:	881b      	ldrh	r3, [r3, #0]
 800357e:	b21b      	sxth	r3, r3
 8003580:	f5c3 4380 	rsb	r3, r3, #16384	; 0x4000
 8003584:	3301      	adds	r3, #1
 8003586:	4a15      	ldr	r2, [pc, #84]	; (80035dc <SysTick_Handler+0x1ec>)
 8003588:	8812      	ldrh	r2, [r2, #0]
 800358a:	b212      	sxth	r2, r2
 800358c:	4413      	add	r3, r2
 800358e:	425b      	negs	r3, r3
 8003590:	4618      	mov	r0, r3
 8003592:	f7fc ff93 	bl	80004bc <__aeabi_i2d>
 8003596:	a308      	add	r3, pc, #32	; (adr r3, 80035b8 <SysTick_Handler+0x1c8>)
 8003598:	e9d3 2300 	ldrd	r2, r3, [r3]
 800359c:	f7fc fff8 	bl	8000590 <__aeabi_dmul>
 80035a0:	4602      	mov	r2, r0
 80035a2:	460b      	mov	r3, r1
 80035a4:	4610      	mov	r0, r2
 80035a6:	4619      	mov	r1, r3
 80035a8:	f7fd fa8c 	bl	8000ac4 <__aeabi_d2iz>
 80035ac:	4603      	mov	r3, r0
 80035ae:	b21a      	sxth	r2, r3
 80035b0:	4b0b      	ldr	r3, [pc, #44]	; (80035e0 <SysTick_Handler+0x1f0>)
 80035b2:	801a      	strh	r2, [r3, #0]
 80035b4:	e03a      	b.n	800362c <SysTick_Handler+0x23c>
 80035b6:	bf00      	nop
 80035b8:	70a3d70a 	.word	0x70a3d70a
 80035bc:	3fe70a3d 	.word	0x3fe70a3d
 80035c0:	20001c58 	.word	0x20001c58
 80035c4:	2000007c 	.word	0x2000007c
 80035c8:	20001c5a 	.word	0x20001c5a
 80035cc:	20000030 	.word	0x20000030
 80035d0:	20000078 	.word	0x20000078
 80035d4:	200004c2 	.word	0x200004c2
 80035d8:	20001c46 	.word	0x20001c46
 80035dc:	200004c0 	.word	0x200004c0
 80035e0:	200000ca 	.word	0x200000ca
 80035e4:	200000c8 	.word	0x200000c8

					}
					else if(pozycja_x<pozycja_poprz)
 80035e8:	4b59      	ldr	r3, [pc, #356]	; (8003750 <SysTick_Handler+0x360>)
 80035ea:	881b      	ldrh	r3, [r3, #0]
 80035ec:	b21a      	sxth	r2, r3
 80035ee:	4b59      	ldr	r3, [pc, #356]	; (8003754 <SysTick_Handler+0x364>)
 80035f0:	881b      	ldrh	r3, [r3, #0]
 80035f2:	b21b      	sxth	r3, r3
 80035f4:	429a      	cmp	r2, r3
 80035f6:	da19      	bge.n	800362c <SysTick_Handler+0x23c>
					{
						rpm_speed =-(pozycja_poprz-pozycja_x)*0.72;
 80035f8:	4b55      	ldr	r3, [pc, #340]	; (8003750 <SysTick_Handler+0x360>)
 80035fa:	881b      	ldrh	r3, [r3, #0]
 80035fc:	b21b      	sxth	r3, r3
 80035fe:	461a      	mov	r2, r3
 8003600:	4b54      	ldr	r3, [pc, #336]	; (8003754 <SysTick_Handler+0x364>)
 8003602:	881b      	ldrh	r3, [r3, #0]
 8003604:	b21b      	sxth	r3, r3
 8003606:	1ad3      	subs	r3, r2, r3
 8003608:	4618      	mov	r0, r3
 800360a:	f7fc ff57 	bl	80004bc <__aeabi_i2d>
 800360e:	a34e      	add	r3, pc, #312	; (adr r3, 8003748 <SysTick_Handler+0x358>)
 8003610:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003614:	f7fc ffbc 	bl	8000590 <__aeabi_dmul>
 8003618:	4602      	mov	r2, r0
 800361a:	460b      	mov	r3, r1
 800361c:	4610      	mov	r0, r2
 800361e:	4619      	mov	r1, r3
 8003620:	f7fd fa50 	bl	8000ac4 <__aeabi_d2iz>
 8003624:	4603      	mov	r3, r0
 8003626:	b21a      	sxth	r2, r3
 8003628:	4b4b      	ldr	r3, [pc, #300]	; (8003758 <SysTick_Handler+0x368>)
 800362a:	801a      	strh	r2, [r3, #0]
					}
					 if(pozycja_x==pozycja_poprz){obroty_pom=0;rpm_speed=0;}
 800362c:	4b48      	ldr	r3, [pc, #288]	; (8003750 <SysTick_Handler+0x360>)
 800362e:	881b      	ldrh	r3, [r3, #0]
 8003630:	b21a      	sxth	r2, r3
 8003632:	4b48      	ldr	r3, [pc, #288]	; (8003754 <SysTick_Handler+0x364>)
 8003634:	881b      	ldrh	r3, [r3, #0]
 8003636:	b21b      	sxth	r3, r3
 8003638:	429a      	cmp	r2, r3
 800363a:	d105      	bne.n	8003648 <SysTick_Handler+0x258>
 800363c:	4b47      	ldr	r3, [pc, #284]	; (800375c <SysTick_Handler+0x36c>)
 800363e:	2200      	movs	r2, #0
 8003640:	801a      	strh	r2, [r3, #0]
 8003642:	4b45      	ldr	r3, [pc, #276]	; (8003758 <SysTick_Handler+0x368>)
 8003644:	2200      	movs	r2, #0
 8003646:	801a      	strh	r2, [r3, #0]
					}

				//delta_poz=Pozycja(pozycja_walu,pozycja_poprz, &calka_pozycja, kierunek);
				pozycja_poprz=pozycja_x;
 8003648:	4b41      	ldr	r3, [pc, #260]	; (8003750 <SysTick_Handler+0x360>)
 800364a:	881b      	ldrh	r3, [r3, #0]
 800364c:	b21a      	sxth	r2, r3
 800364e:	4b41      	ldr	r3, [pc, #260]	; (8003754 <SysTick_Handler+0x364>)
 8003650:	801a      	strh	r2, [r3, #0]
				poz_x=pozycja_walu;
 8003652:	4b43      	ldr	r3, [pc, #268]	; (8003760 <SysTick_Handler+0x370>)
 8003654:	881b      	ldrh	r3, [r3, #0]
 8003656:	b29b      	uxth	r3, r3
 8003658:	b21a      	sxth	r2, r3
 800365a:	4b42      	ldr	r3, [pc, #264]	; (8003764 <SysTick_Handler+0x374>)
 800365c:	801a      	strh	r2, [r3, #0]
				delta_poz=Pozycja(poz_x,poz_pop, &calka_pozycja, kierunek);
 800365e:	4b41      	ldr	r3, [pc, #260]	; (8003764 <SysTick_Handler+0x374>)
 8003660:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003664:	b298      	uxth	r0, r3
 8003666:	4b40      	ldr	r3, [pc, #256]	; (8003768 <SysTick_Handler+0x378>)
 8003668:	f9b3 3000 	ldrsh.w	r3, [r3]
 800366c:	b299      	uxth	r1, r3
 800366e:	4b3f      	ldr	r3, [pc, #252]	; (800376c <SysTick_Handler+0x37c>)
 8003670:	881b      	ldrh	r3, [r3, #0]
 8003672:	b29b      	uxth	r3, r3
 8003674:	4a3e      	ldr	r2, [pc, #248]	; (8003770 <SysTick_Handler+0x380>)
 8003676:	f7fd fe01 	bl	800127c <Pozycja>
 800367a:	4603      	mov	r3, r0
 800367c:	461a      	mov	r2, r3
 800367e:	4b3d      	ldr	r3, [pc, #244]	; (8003774 <SysTick_Handler+0x384>)
 8003680:	801a      	strh	r2, [r3, #0]
				if(Pos_reg==1)
 8003682:	4b3d      	ldr	r3, [pc, #244]	; (8003778 <SysTick_Handler+0x388>)
 8003684:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003688:	2b01      	cmp	r3, #1
 800368a:	d107      	bne.n	800369c <SysTick_Handler+0x2ac>
				{
					PID_REG(&POSTION,calka_pozycja,pozycja_zad, &prad_q_zad);
 800368c:	4b38      	ldr	r3, [pc, #224]	; (8003770 <SysTick_Handler+0x380>)
 800368e:	6819      	ldr	r1, [r3, #0]
 8003690:	4b3a      	ldr	r3, [pc, #232]	; (800377c <SysTick_Handler+0x38c>)
 8003692:	681a      	ldr	r2, [r3, #0]
 8003694:	4b3a      	ldr	r3, [pc, #232]	; (8003780 <SysTick_Handler+0x390>)
 8003696:	483b      	ldr	r0, [pc, #236]	; (8003784 <SysTick_Handler+0x394>)
 8003698:	f7fe f93a 	bl	8001910 <PID_REG>
				}

				poz_pop_cal=calka_pozycja;
 800369c:	4b34      	ldr	r3, [pc, #208]	; (8003770 <SysTick_Handler+0x380>)
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	b21a      	sxth	r2, r3
 80036a2:	4b39      	ldr	r3, [pc, #228]	; (8003788 <SysTick_Handler+0x398>)
 80036a4:	801a      	strh	r2, [r3, #0]
				poz_pop=poz_x;
 80036a6:	4b2f      	ldr	r3, [pc, #188]	; (8003764 <SysTick_Handler+0x374>)
 80036a8:	f9b3 2000 	ldrsh.w	r2, [r3]
 80036ac:	4b2e      	ldr	r3, [pc, #184]	; (8003768 <SysTick_Handler+0x378>)
 80036ae:	801a      	strh	r2, [r3, #0]
				count_10ms=0;
 80036b0:	4b36      	ldr	r3, [pc, #216]	; (800378c <SysTick_Handler+0x39c>)
 80036b2:	2200      	movs	r2, #0
 80036b4:	801a      	strh	r2, [r3, #0]

				if(rpm_speed>6000){rpm_speed=0;}
 80036b6:	4b28      	ldr	r3, [pc, #160]	; (8003758 <SysTick_Handler+0x368>)
 80036b8:	881b      	ldrh	r3, [r3, #0]
 80036ba:	b21b      	sxth	r3, r3
 80036bc:	f241 7270 	movw	r2, #6000	; 0x1770
 80036c0:	4293      	cmp	r3, r2
 80036c2:	dd02      	ble.n	80036ca <SysTick_Handler+0x2da>
 80036c4:	4b24      	ldr	r3, [pc, #144]	; (8003758 <SysTick_Handler+0x368>)
 80036c6:	2200      	movs	r2, #0
 80036c8:	801a      	strh	r2, [r3, #0]
				if(rpm_speed<-6000){rpm_speed=0;}
 80036ca:	4b23      	ldr	r3, [pc, #140]	; (8003758 <SysTick_Handler+0x368>)
 80036cc:	881b      	ldrh	r3, [r3, #0]
 80036ce:	b21b      	sxth	r3, r3
 80036d0:	4a2f      	ldr	r2, [pc, #188]	; (8003790 <SysTick_Handler+0x3a0>)
 80036d2:	4293      	cmp	r3, r2
 80036d4:	da02      	bge.n	80036dc <SysTick_Handler+0x2ec>
 80036d6:	4b20      	ldr	r3, [pc, #128]	; (8003758 <SysTick_Handler+0x368>)
 80036d8:	2200      	movs	r2, #0
 80036da:	801a      	strh	r2, [r3, #0]
				if(PI_regul_on==1){PI_Regulator();}
 80036dc:	4b2d      	ldr	r3, [pc, #180]	; (8003794 <SysTick_Handler+0x3a4>)
 80036de:	781b      	ldrb	r3, [r3, #0]
 80036e0:	b2db      	uxtb	r3, r3
 80036e2:	2b01      	cmp	r3, #1
 80036e4:	d101      	bne.n	80036ea <SysTick_Handler+0x2fa>
 80036e6:	f7fd fc03 	bl	8000ef0 <PI_Regulator>

			}
			count=0;
 80036ea:	4b2b      	ldr	r3, [pc, #172]	; (8003798 <SysTick_Handler+0x3a8>)
 80036ec:	2200      	movs	r2, #0
 80036ee:	801a      	strh	r2, [r3, #0]
		}

licznik_10ms++;
 80036f0:	4b2a      	ldr	r3, [pc, #168]	; (800379c <SysTick_Handler+0x3ac>)
 80036f2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80036f6:	b29b      	uxth	r3, r3
 80036f8:	3301      	adds	r3, #1
 80036fa:	b29b      	uxth	r3, r3
 80036fc:	b21a      	sxth	r2, r3
 80036fe:	4b27      	ldr	r3, [pc, #156]	; (800379c <SysTick_Handler+0x3ac>)
 8003700:	801a      	strh	r2, [r3, #0]
licznik_100ms++;
 8003702:	4b27      	ldr	r3, [pc, #156]	; (80037a0 <SysTick_Handler+0x3b0>)
 8003704:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003708:	b29b      	uxth	r3, r3
 800370a:	3301      	adds	r3, #1
 800370c:	b29b      	uxth	r3, r3
 800370e:	b21a      	sxth	r2, r3
 8003710:	4b23      	ldr	r3, [pc, #140]	; (80037a0 <SysTick_Handler+0x3b0>)
 8003712:	801a      	strh	r2, [r3, #0]
if(licznik_10ms==10){czas_10ms=1;licznik_10ms=0;}
 8003714:	4b21      	ldr	r3, [pc, #132]	; (800379c <SysTick_Handler+0x3ac>)
 8003716:	f9b3 3000 	ldrsh.w	r3, [r3]
 800371a:	2b0a      	cmp	r3, #10
 800371c:	d105      	bne.n	800372a <SysTick_Handler+0x33a>
 800371e:	4b21      	ldr	r3, [pc, #132]	; (80037a4 <SysTick_Handler+0x3b4>)
 8003720:	2201      	movs	r2, #1
 8003722:	801a      	strh	r2, [r3, #0]
 8003724:	4b1d      	ldr	r3, [pc, #116]	; (800379c <SysTick_Handler+0x3ac>)
 8003726:	2200      	movs	r2, #0
 8003728:	801a      	strh	r2, [r3, #0]
if(licznik_100ms==100){czas_100ms=1;licznik_100ms=0;}
 800372a:	4b1d      	ldr	r3, [pc, #116]	; (80037a0 <SysTick_Handler+0x3b0>)
 800372c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003730:	2b64      	cmp	r3, #100	; 0x64
 8003732:	d105      	bne.n	8003740 <SysTick_Handler+0x350>
 8003734:	4b1c      	ldr	r3, [pc, #112]	; (80037a8 <SysTick_Handler+0x3b8>)
 8003736:	2201      	movs	r2, #1
 8003738:	801a      	strh	r2, [r3, #0]
 800373a:	4b19      	ldr	r3, [pc, #100]	; (80037a0 <SysTick_Handler+0x3b0>)
 800373c:	2200      	movs	r2, #0
 800373e:	801a      	strh	r2, [r3, #0]

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003740:	f000 f926 	bl	8003990 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003744:	bf00      	nop
 8003746:	bd80      	pop	{r7, pc}
 8003748:	70a3d70a 	.word	0x70a3d70a
 800374c:	3fe70a3d 	.word	0x3fe70a3d
 8003750:	200004c2 	.word	0x200004c2
 8003754:	200004c0 	.word	0x200004c0
 8003758:	200000ca 	.word	0x200000ca
 800375c:	200000c8 	.word	0x200000c8
 8003760:	20000078 	.word	0x20000078
 8003764:	20001c5c 	.word	0x20001c5c
 8003768:	20001c5e 	.word	0x20001c5e
 800376c:	20001c44 	.word	0x20001c44
 8003770:	20001c48 	.word	0x20001c48
 8003774:	20001c54 	.word	0x20001c54
 8003778:	20001c56 	.word	0x20001c56
 800377c:	200000d4 	.word	0x200000d4
 8003780:	20000094 	.word	0x20000094
 8003784:	200000d8 	.word	0x200000d8
 8003788:	20001c60 	.word	0x20001c60
 800378c:	20001c5a 	.word	0x20001c5a
 8003790:	ffffe890 	.word	0xffffe890
 8003794:	20000064 	.word	0x20000064
 8003798:	2000007c 	.word	0x2000007c
 800379c:	20001c62 	.word	0x20001c62
 80037a0:	20001c64 	.word	0x20001c64
 80037a4:	20001c4c 	.word	0x20001c4c
 80037a8:	20001c4e 	.word	0x20001c4e

080037ac <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupt.
  */
void ADC1_2_IRQHandler(void)
{
 80037ac:	b580      	push	{r7, lr}
 80037ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80037b0:	4803      	ldr	r0, [pc, #12]	; (80037c0 <ADC1_2_IRQHandler+0x14>)
 80037b2:	f000 fce7 	bl	8004184 <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc2);
 80037b6:	4803      	ldr	r0, [pc, #12]	; (80037c4 <ADC1_2_IRQHandler+0x18>)
 80037b8:	f000 fce4 	bl	8004184 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 80037bc:	bf00      	nop
 80037be:	bd80      	pop	{r7, pc}
 80037c0:	200000fc 	.word	0x200000fc
 80037c4:	20000168 	.word	0x20000168

080037c8 <TIM1_BRK_TIM15_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM15 global interrupt.
  */
void TIM1_BRK_TIM15_IRQHandler(void)
{
 80037c8:	b580      	push	{r7, lr}
 80037ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80037cc:	4802      	ldr	r0, [pc, #8]	; (80037d8 <TIM1_BRK_TIM15_IRQHandler+0x10>)
 80037ce:	f005 fd9b 	bl	8009308 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 1 */
}
 80037d2:	bf00      	nop
 80037d4:	bd80      	pop	{r7, pc}
 80037d6:	bf00      	nop
 80037d8:	200002d8 	.word	0x200002d8

080037dc <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 80037dc:	b580      	push	{r7, lr}
 80037de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80037e0:	4802      	ldr	r0, [pc, #8]	; (80037ec <TIM1_UP_TIM16_IRQHandler+0x10>)
 80037e2:	f005 fd91 	bl	8009308 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 80037e6:	bf00      	nop
 80037e8:	bd80      	pop	{r7, pc}
 80037ea:	bf00      	nop
 80037ec:	200002d8 	.word	0x200002d8

080037f0 <TIM1_TRG_COM_TIM17_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM17 global interrupt.
  */
void TIM1_TRG_COM_TIM17_IRQHandler(void)
{
 80037f0:	b580      	push	{r7, lr}
 80037f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80037f4:	4803      	ldr	r0, [pc, #12]	; (8003804 <TIM1_TRG_COM_TIM17_IRQHandler+0x14>)
 80037f6:	f005 fd87 	bl	8009308 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim17);
 80037fa:	4803      	ldr	r0, [pc, #12]	; (8003808 <TIM1_TRG_COM_TIM17_IRQHandler+0x18>)
 80037fc:	f005 fd84 	bl	8009308 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 1 */
}
 8003800:	bf00      	nop
 8003802:	bd80      	pop	{r7, pc}
 8003804:	200002d8 	.word	0x200002d8
 8003808:	200003bc 	.word	0x200003bc

0800380c <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 800380c:	b580      	push	{r7, lr}
 800380e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8003810:	4802      	ldr	r0, [pc, #8]	; (800381c <TIM1_CC_IRQHandler+0x10>)
 8003812:	f005 fd79 	bl	8009308 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8003816:	bf00      	nop
 8003818:	bd80      	pop	{r7, pc}
 800381a:	bf00      	nop
 800381c:	200002d8 	.word	0x200002d8

08003820 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8003820:	b580      	push	{r7, lr}
 8003822:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8003824:	4802      	ldr	r0, [pc, #8]	; (8003830 <TIM2_IRQHandler+0x10>)
 8003826:	f005 fd6f 	bl	8009308 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800382a:	bf00      	nop
 800382c:	bd80      	pop	{r7, pc}
 800382e:	bf00      	nop
 8003830:	20000324 	.word	0x20000324

08003834 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8003834:	b580      	push	{r7, lr}
 8003836:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8003838:	4802      	ldr	r0, [pc, #8]	; (8003844 <USART1_IRQHandler+0x10>)
 800383a:	f007 f8e9 	bl	800aa10 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800383e:	bf00      	nop
 8003840:	bd80      	pop	{r7, pc}
 8003842:	bf00      	nop
 8003844:	20000408 	.word	0x20000408

08003848 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8003848:	b580      	push	{r7, lr}
 800384a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 800384c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8003850:	f003 faee 	bl	8006e30 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8003854:	bf00      	nop
 8003856:	bd80      	pop	{r7, pc}

08003858 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC3 channel underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8003858:	b580      	push	{r7, lr}
 800385a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800385c:	4803      	ldr	r0, [pc, #12]	; (800386c <TIM6_DAC_IRQHandler+0x14>)
 800385e:	f005 fd53 	bl	8009308 <HAL_TIM_IRQHandler>
  HAL_DAC_IRQHandler(&hdac1);
 8003862:	4803      	ldr	r0, [pc, #12]	; (8003870 <TIM6_DAC_IRQHandler+0x18>)
 8003864:	f002 fcc3 	bl	80061ee <HAL_DAC_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8003868:	bf00      	nop
 800386a:	bd80      	pop	{r7, pc}
 800386c:	20000370 	.word	0x20000370
 8003870:	200001fc 	.word	0x200001fc

08003874 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8003874:	b480      	push	{r7}
 8003876:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8003878:	4b06      	ldr	r3, [pc, #24]	; (8003894 <SystemInit+0x20>)
 800387a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800387e:	4a05      	ldr	r2, [pc, #20]	; (8003894 <SystemInit+0x20>)
 8003880:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003884:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003888:	bf00      	nop
 800388a:	46bd      	mov	sp, r7
 800388c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003890:	4770      	bx	lr
 8003892:	bf00      	nop
 8003894:	e000ed00 	.word	0xe000ed00

08003898 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8003898:	480d      	ldr	r0, [pc, #52]	; (80038d0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800389a:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800389c:	480d      	ldr	r0, [pc, #52]	; (80038d4 <LoopForever+0x6>)
  ldr r1, =_edata
 800389e:	490e      	ldr	r1, [pc, #56]	; (80038d8 <LoopForever+0xa>)
  ldr r2, =_sidata
 80038a0:	4a0e      	ldr	r2, [pc, #56]	; (80038dc <LoopForever+0xe>)
  movs r3, #0
 80038a2:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 80038a4:	e002      	b.n	80038ac <LoopCopyDataInit>

080038a6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80038a6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80038a8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80038aa:	3304      	adds	r3, #4

080038ac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80038ac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80038ae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80038b0:	d3f9      	bcc.n	80038a6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80038b2:	4a0b      	ldr	r2, [pc, #44]	; (80038e0 <LoopForever+0x12>)
  ldr r4, =_ebss
 80038b4:	4c0b      	ldr	r4, [pc, #44]	; (80038e4 <LoopForever+0x16>)
  movs r3, #0
 80038b6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80038b8:	e001      	b.n	80038be <LoopFillZerobss>

080038ba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80038ba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80038bc:	3204      	adds	r2, #4

080038be <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80038be:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80038c0:	d3fb      	bcc.n	80038ba <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80038c2:	f7ff ffd7 	bl	8003874 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80038c6:	f008 fa2d 	bl	800bd24 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80038ca:	f7fe f8e1 	bl	8001a90 <main>

080038ce <LoopForever>:

LoopForever:
    b LoopForever
 80038ce:	e7fe      	b.n	80038ce <LoopForever>
  ldr   r0, =_estack
 80038d0:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 80038d4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80038d8:	20000048 	.word	0x20000048
  ldr r2, =_sidata
 80038dc:	0800d0d8 	.word	0x0800d0d8
  ldr r2, =_sbss
 80038e0:	20000048 	.word	0x20000048
  ldr r4, =_ebss
 80038e4:	20001c6c 	.word	0x20001c6c

080038e8 <COMP1_2_3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80038e8:	e7fe      	b.n	80038e8 <COMP1_2_3_IRQHandler>

080038ea <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80038ea:	b580      	push	{r7, lr}
 80038ec:	b082      	sub	sp, #8
 80038ee:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80038f0:	2300      	movs	r3, #0
 80038f2:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80038f4:	2003      	movs	r0, #3
 80038f6:	f002 fc19 	bl	800612c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80038fa:	2000      	movs	r0, #0
 80038fc:	f000 f80e 	bl	800391c <HAL_InitTick>
 8003900:	4603      	mov	r3, r0
 8003902:	2b00      	cmp	r3, #0
 8003904:	d002      	beq.n	800390c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8003906:	2301      	movs	r3, #1
 8003908:	71fb      	strb	r3, [r7, #7]
 800390a:	e001      	b.n	8003910 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800390c:	f7ff f9c0 	bl	8002c90 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8003910:	79fb      	ldrb	r3, [r7, #7]

}
 8003912:	4618      	mov	r0, r3
 8003914:	3708      	adds	r7, #8
 8003916:	46bd      	mov	sp, r7
 8003918:	bd80      	pop	{r7, pc}
	...

0800391c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800391c:	b580      	push	{r7, lr}
 800391e:	b084      	sub	sp, #16
 8003920:	af00      	add	r7, sp, #0
 8003922:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8003924:	2300      	movs	r3, #0
 8003926:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8003928:	4b16      	ldr	r3, [pc, #88]	; (8003984 <HAL_InitTick+0x68>)
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	2b00      	cmp	r3, #0
 800392e:	d022      	beq.n	8003976 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8003930:	4b15      	ldr	r3, [pc, #84]	; (8003988 <HAL_InitTick+0x6c>)
 8003932:	681a      	ldr	r2, [r3, #0]
 8003934:	4b13      	ldr	r3, [pc, #76]	; (8003984 <HAL_InitTick+0x68>)
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800393c:	fbb1 f3f3 	udiv	r3, r1, r3
 8003940:	fbb2 f3f3 	udiv	r3, r2, r3
 8003944:	4618      	mov	r0, r3
 8003946:	f002 fc24 	bl	8006192 <HAL_SYSTICK_Config>
 800394a:	4603      	mov	r3, r0
 800394c:	2b00      	cmp	r3, #0
 800394e:	d10f      	bne.n	8003970 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	2b0f      	cmp	r3, #15
 8003954:	d809      	bhi.n	800396a <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003956:	2200      	movs	r2, #0
 8003958:	6879      	ldr	r1, [r7, #4]
 800395a:	f04f 30ff 	mov.w	r0, #4294967295
 800395e:	f002 fbf0 	bl	8006142 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003962:	4a0a      	ldr	r2, [pc, #40]	; (800398c <HAL_InitTick+0x70>)
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	6013      	str	r3, [r2, #0]
 8003968:	e007      	b.n	800397a <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 800396a:	2301      	movs	r3, #1
 800396c:	73fb      	strb	r3, [r7, #15]
 800396e:	e004      	b.n	800397a <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8003970:	2301      	movs	r3, #1
 8003972:	73fb      	strb	r3, [r7, #15]
 8003974:	e001      	b.n	800397a <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8003976:	2301      	movs	r3, #1
 8003978:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800397a:	7bfb      	ldrb	r3, [r7, #15]
}
 800397c:	4618      	mov	r0, r3
 800397e:	3710      	adds	r7, #16
 8003980:	46bd      	mov	sp, r7
 8003982:	bd80      	pop	{r7, pc}
 8003984:	20000044 	.word	0x20000044
 8003988:	2000003c 	.word	0x2000003c
 800398c:	20000040 	.word	0x20000040

08003990 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003990:	b480      	push	{r7}
 8003992:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003994:	4b05      	ldr	r3, [pc, #20]	; (80039ac <HAL_IncTick+0x1c>)
 8003996:	681a      	ldr	r2, [r3, #0]
 8003998:	4b05      	ldr	r3, [pc, #20]	; (80039b0 <HAL_IncTick+0x20>)
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	4413      	add	r3, r2
 800399e:	4a03      	ldr	r2, [pc, #12]	; (80039ac <HAL_IncTick+0x1c>)
 80039a0:	6013      	str	r3, [r2, #0]
}
 80039a2:	bf00      	nop
 80039a4:	46bd      	mov	sp, r7
 80039a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039aa:	4770      	bx	lr
 80039ac:	20001c68 	.word	0x20001c68
 80039b0:	20000044 	.word	0x20000044

080039b4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80039b4:	b480      	push	{r7}
 80039b6:	af00      	add	r7, sp, #0
  return uwTick;
 80039b8:	4b03      	ldr	r3, [pc, #12]	; (80039c8 <HAL_GetTick+0x14>)
 80039ba:	681b      	ldr	r3, [r3, #0]
}
 80039bc:	4618      	mov	r0, r3
 80039be:	46bd      	mov	sp, r7
 80039c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039c4:	4770      	bx	lr
 80039c6:	bf00      	nop
 80039c8:	20001c68 	.word	0x20001c68

080039cc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80039cc:	b580      	push	{r7, lr}
 80039ce:	b084      	sub	sp, #16
 80039d0:	af00      	add	r7, sp, #0
 80039d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80039d4:	f7ff ffee 	bl	80039b4 <HAL_GetTick>
 80039d8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039e4:	d004      	beq.n	80039f0 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 80039e6:	4b09      	ldr	r3, [pc, #36]	; (8003a0c <HAL_Delay+0x40>)
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	68fa      	ldr	r2, [r7, #12]
 80039ec:	4413      	add	r3, r2
 80039ee:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80039f0:	bf00      	nop
 80039f2:	f7ff ffdf 	bl	80039b4 <HAL_GetTick>
 80039f6:	4602      	mov	r2, r0
 80039f8:	68bb      	ldr	r3, [r7, #8]
 80039fa:	1ad3      	subs	r3, r2, r3
 80039fc:	68fa      	ldr	r2, [r7, #12]
 80039fe:	429a      	cmp	r2, r3
 8003a00:	d8f7      	bhi.n	80039f2 <HAL_Delay+0x26>
  {
  }
}
 8003a02:	bf00      	nop
 8003a04:	bf00      	nop
 8003a06:	3710      	adds	r7, #16
 8003a08:	46bd      	mov	sp, r7
 8003a0a:	bd80      	pop	{r7, pc}
 8003a0c:	20000044 	.word	0x20000044

08003a10 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8003a10:	b480      	push	{r7}
 8003a12:	b083      	sub	sp, #12
 8003a14:	af00      	add	r7, sp, #0
 8003a16:	6078      	str	r0, [r7, #4]
 8003a18:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	689b      	ldr	r3, [r3, #8]
 8003a1e:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8003a22:	683b      	ldr	r3, [r7, #0]
 8003a24:	431a      	orrs	r2, r3
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	609a      	str	r2, [r3, #8]
}
 8003a2a:	bf00      	nop
 8003a2c:	370c      	adds	r7, #12
 8003a2e:	46bd      	mov	sp, r7
 8003a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a34:	4770      	bx	lr

08003a36 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8003a36:	b480      	push	{r7}
 8003a38:	b083      	sub	sp, #12
 8003a3a:	af00      	add	r7, sp, #0
 8003a3c:	6078      	str	r0, [r7, #4]
 8003a3e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	689b      	ldr	r3, [r3, #8]
 8003a44:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8003a48:	683b      	ldr	r3, [r7, #0]
 8003a4a:	431a      	orrs	r2, r3
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	609a      	str	r2, [r3, #8]
}
 8003a50:	bf00      	nop
 8003a52:	370c      	adds	r7, #12
 8003a54:	46bd      	mov	sp, r7
 8003a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a5a:	4770      	bx	lr

08003a5c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003a5c:	b480      	push	{r7}
 8003a5e:	b083      	sub	sp, #12
 8003a60:	af00      	add	r7, sp, #0
 8003a62:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	689b      	ldr	r3, [r3, #8]
 8003a68:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8003a6c:	4618      	mov	r0, r3
 8003a6e:	370c      	adds	r7, #12
 8003a70:	46bd      	mov	sp, r7
 8003a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a76:	4770      	bx	lr

08003a78 <LL_ADC_SetOffset>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8003a78:	b480      	push	{r7}
 8003a7a:	b087      	sub	sp, #28
 8003a7c:	af00      	add	r7, sp, #0
 8003a7e:	60f8      	str	r0, [r7, #12]
 8003a80:	60b9      	str	r1, [r7, #8]
 8003a82:	607a      	str	r2, [r7, #4]
 8003a84:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	3360      	adds	r3, #96	; 0x60
 8003a8a:	461a      	mov	r2, r3
 8003a8c:	68bb      	ldr	r3, [r7, #8]
 8003a8e:	009b      	lsls	r3, r3, #2
 8003a90:	4413      	add	r3, r2
 8003a92:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003a94:	697b      	ldr	r3, [r7, #20]
 8003a96:	681a      	ldr	r2, [r3, #0]
 8003a98:	4b08      	ldr	r3, [pc, #32]	; (8003abc <LL_ADC_SetOffset+0x44>)
 8003a9a:	4013      	ands	r3, r2
 8003a9c:	687a      	ldr	r2, [r7, #4]
 8003a9e:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8003aa2:	683a      	ldr	r2, [r7, #0]
 8003aa4:	430a      	orrs	r2, r1
 8003aa6:	4313      	orrs	r3, r2
 8003aa8:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8003aac:	697b      	ldr	r3, [r7, #20]
 8003aae:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8003ab0:	bf00      	nop
 8003ab2:	371c      	adds	r7, #28
 8003ab4:	46bd      	mov	sp, r7
 8003ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aba:	4770      	bx	lr
 8003abc:	03fff000 	.word	0x03fff000

08003ac0 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8003ac0:	b480      	push	{r7}
 8003ac2:	b085      	sub	sp, #20
 8003ac4:	af00      	add	r7, sp, #0
 8003ac6:	6078      	str	r0, [r7, #4]
 8003ac8:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	3360      	adds	r3, #96	; 0x60
 8003ace:	461a      	mov	r2, r3
 8003ad0:	683b      	ldr	r3, [r7, #0]
 8003ad2:	009b      	lsls	r3, r3, #2
 8003ad4:	4413      	add	r3, r2
 8003ad6:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8003ae0:	4618      	mov	r0, r3
 8003ae2:	3714      	adds	r7, #20
 8003ae4:	46bd      	mov	sp, r7
 8003ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aea:	4770      	bx	lr

08003aec <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8003aec:	b480      	push	{r7}
 8003aee:	b087      	sub	sp, #28
 8003af0:	af00      	add	r7, sp, #0
 8003af2:	60f8      	str	r0, [r7, #12]
 8003af4:	60b9      	str	r1, [r7, #8]
 8003af6:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	3360      	adds	r3, #96	; 0x60
 8003afc:	461a      	mov	r2, r3
 8003afe:	68bb      	ldr	r3, [r7, #8]
 8003b00:	009b      	lsls	r3, r3, #2
 8003b02:	4413      	add	r3, r2
 8003b04:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003b06:	697b      	ldr	r3, [r7, #20]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	431a      	orrs	r2, r3
 8003b12:	697b      	ldr	r3, [r7, #20]
 8003b14:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8003b16:	bf00      	nop
 8003b18:	371c      	adds	r7, #28
 8003b1a:	46bd      	mov	sp, r7
 8003b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b20:	4770      	bx	lr

08003b22 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8003b22:	b480      	push	{r7}
 8003b24:	b087      	sub	sp, #28
 8003b26:	af00      	add	r7, sp, #0
 8003b28:	60f8      	str	r0, [r7, #12]
 8003b2a:	60b9      	str	r1, [r7, #8]
 8003b2c:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	3360      	adds	r3, #96	; 0x60
 8003b32:	461a      	mov	r2, r3
 8003b34:	68bb      	ldr	r3, [r7, #8]
 8003b36:	009b      	lsls	r3, r3, #2
 8003b38:	4413      	add	r3, r2
 8003b3a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003b3c:	697b      	ldr	r3, [r7, #20]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	431a      	orrs	r2, r3
 8003b48:	697b      	ldr	r3, [r7, #20]
 8003b4a:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8003b4c:	bf00      	nop
 8003b4e:	371c      	adds	r7, #28
 8003b50:	46bd      	mov	sp, r7
 8003b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b56:	4770      	bx	lr

08003b58 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8003b58:	b480      	push	{r7}
 8003b5a:	b087      	sub	sp, #28
 8003b5c:	af00      	add	r7, sp, #0
 8003b5e:	60f8      	str	r0, [r7, #12]
 8003b60:	60b9      	str	r1, [r7, #8]
 8003b62:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	3360      	adds	r3, #96	; 0x60
 8003b68:	461a      	mov	r2, r3
 8003b6a:	68bb      	ldr	r3, [r7, #8]
 8003b6c:	009b      	lsls	r3, r3, #2
 8003b6e:	4413      	add	r3, r2
 8003b70:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003b72:	697b      	ldr	r3, [r7, #20]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	431a      	orrs	r2, r3
 8003b7e:	697b      	ldr	r3, [r7, #20]
 8003b80:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8003b82:	bf00      	nop
 8003b84:	371c      	adds	r7, #28
 8003b86:	46bd      	mov	sp, r7
 8003b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b8c:	4770      	bx	lr

08003b8e <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8003b8e:	b480      	push	{r7}
 8003b90:	b083      	sub	sp, #12
 8003b92:	af00      	add	r7, sp, #0
 8003b94:	6078      	str	r0, [r7, #4]
 8003b96:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	695b      	ldr	r3, [r3, #20]
 8003b9c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003ba0:	683b      	ldr	r3, [r7, #0]
 8003ba2:	431a      	orrs	r2, r3
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	615a      	str	r2, [r3, #20]
}
 8003ba8:	bf00      	nop
 8003baa:	370c      	adds	r7, #12
 8003bac:	46bd      	mov	sp, r7
 8003bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bb2:	4770      	bx	lr

08003bb4 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8003bb4:	b480      	push	{r7}
 8003bb6:	b083      	sub	sp, #12
 8003bb8:	af00      	add	r7, sp, #0
 8003bba:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	68db      	ldr	r3, [r3, #12]
 8003bc0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d101      	bne.n	8003bcc <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8003bc8:	2301      	movs	r3, #1
 8003bca:	e000      	b.n	8003bce <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8003bcc:	2300      	movs	r3, #0
}
 8003bce:	4618      	mov	r0, r3
 8003bd0:	370c      	adds	r7, #12
 8003bd2:	46bd      	mov	sp, r7
 8003bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bd8:	4770      	bx	lr

08003bda <LL_ADC_REG_SetSequencerRanks>:
  *         (8) On STM32G4, fast channel allows: 2.5 (sampling) + 12.5 (conversion) = 15 ADC clock cycles (fADC) to convert in 12-bit resolution.
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8003bda:	b480      	push	{r7}
 8003bdc:	b087      	sub	sp, #28
 8003bde:	af00      	add	r7, sp, #0
 8003be0:	60f8      	str	r0, [r7, #12]
 8003be2:	60b9      	str	r1, [r7, #8]
 8003be4:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	3330      	adds	r3, #48	; 0x30
 8003bea:	461a      	mov	r2, r3
 8003bec:	68bb      	ldr	r3, [r7, #8]
 8003bee:	0a1b      	lsrs	r3, r3, #8
 8003bf0:	009b      	lsls	r3, r3, #2
 8003bf2:	f003 030c 	and.w	r3, r3, #12
 8003bf6:	4413      	add	r3, r2
 8003bf8:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003bfa:	697b      	ldr	r3, [r7, #20]
 8003bfc:	681a      	ldr	r2, [r3, #0]
 8003bfe:	68bb      	ldr	r3, [r7, #8]
 8003c00:	f003 031f 	and.w	r3, r3, #31
 8003c04:	211f      	movs	r1, #31
 8003c06:	fa01 f303 	lsl.w	r3, r1, r3
 8003c0a:	43db      	mvns	r3, r3
 8003c0c:	401a      	ands	r2, r3
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	0e9b      	lsrs	r3, r3, #26
 8003c12:	f003 011f 	and.w	r1, r3, #31
 8003c16:	68bb      	ldr	r3, [r7, #8]
 8003c18:	f003 031f 	and.w	r3, r3, #31
 8003c1c:	fa01 f303 	lsl.w	r3, r1, r3
 8003c20:	431a      	orrs	r2, r3
 8003c22:	697b      	ldr	r3, [r7, #20]
 8003c24:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8003c26:	bf00      	nop
 8003c28:	371c      	adds	r7, #28
 8003c2a:	46bd      	mov	sp, r7
 8003c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c30:	4770      	bx	lr

08003c32 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8003c32:	b480      	push	{r7}
 8003c34:	b083      	sub	sp, #12
 8003c36:	af00      	add	r7, sp, #0
 8003c38:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c3e:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d101      	bne.n	8003c4a <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8003c46:	2301      	movs	r3, #1
 8003c48:	e000      	b.n	8003c4c <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8003c4a:	2300      	movs	r3, #0
}
 8003c4c:	4618      	mov	r0, r3
 8003c4e:	370c      	adds	r7, #12
 8003c50:	46bd      	mov	sp, r7
 8003c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c56:	4770      	bx	lr

08003c58 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8003c58:	b480      	push	{r7}
 8003c5a:	b087      	sub	sp, #28
 8003c5c:	af00      	add	r7, sp, #0
 8003c5e:	60f8      	str	r0, [r7, #12]
 8003c60:	60b9      	str	r1, [r7, #8]
 8003c62:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	3314      	adds	r3, #20
 8003c68:	461a      	mov	r2, r3
 8003c6a:	68bb      	ldr	r3, [r7, #8]
 8003c6c:	0e5b      	lsrs	r3, r3, #25
 8003c6e:	009b      	lsls	r3, r3, #2
 8003c70:	f003 0304 	and.w	r3, r3, #4
 8003c74:	4413      	add	r3, r2
 8003c76:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003c78:	697b      	ldr	r3, [r7, #20]
 8003c7a:	681a      	ldr	r2, [r3, #0]
 8003c7c:	68bb      	ldr	r3, [r7, #8]
 8003c7e:	0d1b      	lsrs	r3, r3, #20
 8003c80:	f003 031f 	and.w	r3, r3, #31
 8003c84:	2107      	movs	r1, #7
 8003c86:	fa01 f303 	lsl.w	r3, r1, r3
 8003c8a:	43db      	mvns	r3, r3
 8003c8c:	401a      	ands	r2, r3
 8003c8e:	68bb      	ldr	r3, [r7, #8]
 8003c90:	0d1b      	lsrs	r3, r3, #20
 8003c92:	f003 031f 	and.w	r3, r3, #31
 8003c96:	6879      	ldr	r1, [r7, #4]
 8003c98:	fa01 f303 	lsl.w	r3, r1, r3
 8003c9c:	431a      	orrs	r2, r3
 8003c9e:	697b      	ldr	r3, [r7, #20]
 8003ca0:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8003ca2:	bf00      	nop
 8003ca4:	371c      	adds	r7, #28
 8003ca6:	46bd      	mov	sp, r7
 8003ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cac:	4770      	bx	lr
	...

08003cb0 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8003cb0:	b480      	push	{r7}
 8003cb2:	b085      	sub	sp, #20
 8003cb4:	af00      	add	r7, sp, #0
 8003cb6:	60f8      	str	r0, [r7, #12]
 8003cb8:	60b9      	str	r1, [r7, #8]
 8003cba:	607a      	str	r2, [r7, #4]
  /* Bits for single or differential mode selection for each channel are set  */
  /* to 1 only when the differential mode is selected, and to 0 when the      */
  /* single mode is selected.                                                 */
  
  if (SingleDiff == LL_ADC_DIFFERENTIAL_ENDED)
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	4a0f      	ldr	r2, [pc, #60]	; (8003cfc <LL_ADC_SetChannelSingleDiff+0x4c>)
 8003cc0:	4293      	cmp	r3, r2
 8003cc2:	d10a      	bne.n	8003cda <LL_ADC_SetChannelSingleDiff+0x2a>
  {
    SET_BIT(ADCx->DIFSEL,
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8003cca:	68bb      	ldr	r3, [r7, #8]
 8003ccc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003cd0:	431a      	orrs	r2, r3
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  else
  {
    CLEAR_BIT(ADCx->DIFSEL,
            Channel & ADC_SINGLEDIFF_CHANNEL_MASK);
  }
}
 8003cd8:	e00a      	b.n	8003cf0 <LL_ADC_SetChannelSingleDiff+0x40>
    CLEAR_BIT(ADCx->DIFSEL,
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8003ce0:	68bb      	ldr	r3, [r7, #8]
 8003ce2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003ce6:	43db      	mvns	r3, r3
 8003ce8:	401a      	ands	r2, r3
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
 8003cf0:	bf00      	nop
 8003cf2:	3714      	adds	r7, #20
 8003cf4:	46bd      	mov	sp, r7
 8003cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cfa:	4770      	bx	lr
 8003cfc:	407f0000 	.word	0x407f0000

08003d00 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003d00:	b480      	push	{r7}
 8003d02:	b083      	sub	sp, #12
 8003d04:	af00      	add	r7, sp, #0
 8003d06:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	689b      	ldr	r3, [r3, #8]
 8003d0c:	f003 031f 	and.w	r3, r3, #31
}
 8003d10:	4618      	mov	r0, r3
 8003d12:	370c      	adds	r7, #12
 8003d14:	46bd      	mov	sp, r7
 8003d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d1a:	4770      	bx	lr

08003d1c <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003d1c:	b480      	push	{r7}
 8003d1e:	b083      	sub	sp, #12
 8003d20:	af00      	add	r7, sp, #0
 8003d22:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	689b      	ldr	r3, [r3, #8]
 8003d28:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 8003d2c:	4618      	mov	r0, r3
 8003d2e:	370c      	adds	r7, #12
 8003d30:	46bd      	mov	sp, r7
 8003d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d36:	4770      	bx	lr

08003d38 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8003d38:	b480      	push	{r7}
 8003d3a:	b083      	sub	sp, #12
 8003d3c:	af00      	add	r7, sp, #0
 8003d3e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	689b      	ldr	r3, [r3, #8]
 8003d44:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8003d48:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003d4c:	687a      	ldr	r2, [r7, #4]
 8003d4e:	6093      	str	r3, [r2, #8]
}
 8003d50:	bf00      	nop
 8003d52:	370c      	adds	r7, #12
 8003d54:	46bd      	mov	sp, r7
 8003d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d5a:	4770      	bx	lr

08003d5c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8003d5c:	b480      	push	{r7}
 8003d5e:	b083      	sub	sp, #12
 8003d60:	af00      	add	r7, sp, #0
 8003d62:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	689b      	ldr	r3, [r3, #8]
 8003d68:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003d6c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003d70:	d101      	bne.n	8003d76 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8003d72:	2301      	movs	r3, #1
 8003d74:	e000      	b.n	8003d78 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8003d76:	2300      	movs	r3, #0
}
 8003d78:	4618      	mov	r0, r3
 8003d7a:	370c      	adds	r7, #12
 8003d7c:	46bd      	mov	sp, r7
 8003d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d82:	4770      	bx	lr

08003d84 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8003d84:	b480      	push	{r7}
 8003d86:	b083      	sub	sp, #12
 8003d88:	af00      	add	r7, sp, #0
 8003d8a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	689b      	ldr	r3, [r3, #8]
 8003d90:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8003d94:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003d98:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8003da0:	bf00      	nop
 8003da2:	370c      	adds	r7, #12
 8003da4:	46bd      	mov	sp, r7
 8003da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003daa:	4770      	bx	lr

08003dac <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8003dac:	b480      	push	{r7}
 8003dae:	b083      	sub	sp, #12
 8003db0:	af00      	add	r7, sp, #0
 8003db2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	689b      	ldr	r3, [r3, #8]
 8003db8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003dbc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003dc0:	d101      	bne.n	8003dc6 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8003dc2:	2301      	movs	r3, #1
 8003dc4:	e000      	b.n	8003dc8 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8003dc6:	2300      	movs	r3, #0
}
 8003dc8:	4618      	mov	r0, r3
 8003dca:	370c      	adds	r7, #12
 8003dcc:	46bd      	mov	sp, r7
 8003dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dd2:	4770      	bx	lr

08003dd4 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8003dd4:	b480      	push	{r7}
 8003dd6:	b083      	sub	sp, #12
 8003dd8:	af00      	add	r7, sp, #0
 8003dda:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	689b      	ldr	r3, [r3, #8]
 8003de0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003de4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003de8:	f043 0201 	orr.w	r2, r3, #1
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8003df0:	bf00      	nop
 8003df2:	370c      	adds	r7, #12
 8003df4:	46bd      	mov	sp, r7
 8003df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dfa:	4770      	bx	lr

08003dfc <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8003dfc:	b480      	push	{r7}
 8003dfe:	b083      	sub	sp, #12
 8003e00:	af00      	add	r7, sp, #0
 8003e02:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	689b      	ldr	r3, [r3, #8]
 8003e08:	f003 0301 	and.w	r3, r3, #1
 8003e0c:	2b01      	cmp	r3, #1
 8003e0e:	d101      	bne.n	8003e14 <LL_ADC_IsEnabled+0x18>
 8003e10:	2301      	movs	r3, #1
 8003e12:	e000      	b.n	8003e16 <LL_ADC_IsEnabled+0x1a>
 8003e14:	2300      	movs	r3, #0
}
 8003e16:	4618      	mov	r0, r3
 8003e18:	370c      	adds	r7, #12
 8003e1a:	46bd      	mov	sp, r7
 8003e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e20:	4770      	bx	lr

08003e22 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8003e22:	b480      	push	{r7}
 8003e24:	b083      	sub	sp, #12
 8003e26:	af00      	add	r7, sp, #0
 8003e28:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	689b      	ldr	r3, [r3, #8]
 8003e2e:	f003 0304 	and.w	r3, r3, #4
 8003e32:	2b04      	cmp	r3, #4
 8003e34:	d101      	bne.n	8003e3a <LL_ADC_REG_IsConversionOngoing+0x18>
 8003e36:	2301      	movs	r3, #1
 8003e38:	e000      	b.n	8003e3c <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003e3a:	2300      	movs	r3, #0
}
 8003e3c:	4618      	mov	r0, r3
 8003e3e:	370c      	adds	r7, #12
 8003e40:	46bd      	mov	sp, r7
 8003e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e46:	4770      	bx	lr

08003e48 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8003e48:	b480      	push	{r7}
 8003e4a:	b083      	sub	sp, #12
 8003e4c:	af00      	add	r7, sp, #0
 8003e4e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	689b      	ldr	r3, [r3, #8]
 8003e54:	f003 0308 	and.w	r3, r3, #8
 8003e58:	2b08      	cmp	r3, #8
 8003e5a:	d101      	bne.n	8003e60 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8003e5c:	2301      	movs	r3, #1
 8003e5e:	e000      	b.n	8003e62 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8003e60:	2300      	movs	r3, #0
}
 8003e62:	4618      	mov	r0, r3
 8003e64:	370c      	adds	r7, #12
 8003e66:	46bd      	mov	sp, r7
 8003e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e6c:	4770      	bx	lr
	...

08003e70 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003e70:	b590      	push	{r4, r7, lr}
 8003e72:	b089      	sub	sp, #36	; 0x24
 8003e74:	af00      	add	r7, sp, #0
 8003e76:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003e78:	2300      	movs	r3, #0
 8003e7a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8003e7c:	2300      	movs	r3, #0
 8003e7e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d101      	bne.n	8003e8a <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8003e86:	2301      	movs	r3, #1
 8003e88:	e177      	b.n	800417a <HAL_ADC_Init+0x30a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	695b      	ldr	r3, [r3, #20]
 8003e8e:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d109      	bne.n	8003eac <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003e98:	6878      	ldr	r0, [r7, #4]
 8003e9a:	f7fe ff1d 	bl	8002cd8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	2200      	movs	r2, #0
 8003ea2:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	2200      	movs	r2, #0
 8003ea8:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	4618      	mov	r0, r3
 8003eb2:	f7ff ff53 	bl	8003d5c <LL_ADC_IsDeepPowerDownEnabled>
 8003eb6:	4603      	mov	r3, r0
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d004      	beq.n	8003ec6 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	4618      	mov	r0, r3
 8003ec2:	f7ff ff39 	bl	8003d38 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	4618      	mov	r0, r3
 8003ecc:	f7ff ff6e 	bl	8003dac <LL_ADC_IsInternalRegulatorEnabled>
 8003ed0:	4603      	mov	r3, r0
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d115      	bne.n	8003f02 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	4618      	mov	r0, r3
 8003edc:	f7ff ff52 	bl	8003d84 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003ee0:	4b9c      	ldr	r3, [pc, #624]	; (8004154 <HAL_ADC_Init+0x2e4>)
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	099b      	lsrs	r3, r3, #6
 8003ee6:	4a9c      	ldr	r2, [pc, #624]	; (8004158 <HAL_ADC_Init+0x2e8>)
 8003ee8:	fba2 2303 	umull	r2, r3, r2, r3
 8003eec:	099b      	lsrs	r3, r3, #6
 8003eee:	3301      	adds	r3, #1
 8003ef0:	005b      	lsls	r3, r3, #1
 8003ef2:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8003ef4:	e002      	b.n	8003efc <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8003ef6:	68bb      	ldr	r3, [r7, #8]
 8003ef8:	3b01      	subs	r3, #1
 8003efa:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8003efc:	68bb      	ldr	r3, [r7, #8]
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d1f9      	bne.n	8003ef6 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	4618      	mov	r0, r3
 8003f08:	f7ff ff50 	bl	8003dac <LL_ADC_IsInternalRegulatorEnabled>
 8003f0c:	4603      	mov	r3, r0
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d10d      	bne.n	8003f2e <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f16:	f043 0210 	orr.w	r2, r3, #16
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003f22:	f043 0201 	orr.w	r2, r3, #1
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8003f2a:	2301      	movs	r3, #1
 8003f2c:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	4618      	mov	r0, r3
 8003f34:	f7ff ff75 	bl	8003e22 <LL_ADC_REG_IsConversionOngoing>
 8003f38:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f3e:	f003 0310 	and.w	r3, r3, #16
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	f040 8110 	bne.w	8004168 <HAL_ADC_Init+0x2f8>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8003f48:	697b      	ldr	r3, [r7, #20]
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	f040 810c 	bne.w	8004168 <HAL_ADC_Init+0x2f8>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f54:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8003f58:	f043 0202 	orr.w	r2, r3, #2
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	4618      	mov	r0, r3
 8003f66:	f7ff ff49 	bl	8003dfc <LL_ADC_IsEnabled>
 8003f6a:	4603      	mov	r3, r0
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d111      	bne.n	8003f94 <HAL_ADC_Init+0x124>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003f70:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8003f74:	f7ff ff42 	bl	8003dfc <LL_ADC_IsEnabled>
 8003f78:	4604      	mov	r4, r0
 8003f7a:	4878      	ldr	r0, [pc, #480]	; (800415c <HAL_ADC_Init+0x2ec>)
 8003f7c:	f7ff ff3e 	bl	8003dfc <LL_ADC_IsEnabled>
 8003f80:	4603      	mov	r3, r0
 8003f82:	4323      	orrs	r3, r4
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d105      	bne.n	8003f94 <HAL_ADC_Init+0x124>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	685b      	ldr	r3, [r3, #4]
 8003f8c:	4619      	mov	r1, r3
 8003f8e:	4874      	ldr	r0, [pc, #464]	; (8004160 <HAL_ADC_Init+0x2f0>)
 8003f90:	f7ff fd3e 	bl	8003a10 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	7f5b      	ldrb	r3, [r3, #29]
 8003f98:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003f9e:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8003fa4:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8003faa:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003fb2:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003fb4:	4313      	orrs	r3, r2
 8003fb6:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003fbe:	2b01      	cmp	r3, #1
 8003fc0:	d106      	bne.n	8003fd0 <HAL_ADC_Init+0x160>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fc6:	3b01      	subs	r3, #1
 8003fc8:	045b      	lsls	r3, r3, #17
 8003fca:	69ba      	ldr	r2, [r7, #24]
 8003fcc:	4313      	orrs	r3, r2
 8003fce:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d009      	beq.n	8003fec <HAL_ADC_Init+0x17c>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fdc:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fe4:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003fe6:	69ba      	ldr	r2, [r7, #24]
 8003fe8:	4313      	orrs	r3, r2
 8003fea:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	68da      	ldr	r2, [r3, #12]
 8003ff2:	4b5c      	ldr	r3, [pc, #368]	; (8004164 <HAL_ADC_Init+0x2f4>)
 8003ff4:	4013      	ands	r3, r2
 8003ff6:	687a      	ldr	r2, [r7, #4]
 8003ff8:	6812      	ldr	r2, [r2, #0]
 8003ffa:	69b9      	ldr	r1, [r7, #24]
 8003ffc:	430b      	orrs	r3, r1
 8003ffe:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	691b      	ldr	r3, [r3, #16]
 8004006:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	430a      	orrs	r2, r1
 8004014:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	4618      	mov	r0, r3
 800401c:	f7ff ff01 	bl	8003e22 <LL_ADC_REG_IsConversionOngoing>
 8004020:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	4618      	mov	r0, r3
 8004028:	f7ff ff0e 	bl	8003e48 <LL_ADC_INJ_IsConversionOngoing>
 800402c:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800402e:	693b      	ldr	r3, [r7, #16]
 8004030:	2b00      	cmp	r3, #0
 8004032:	d16d      	bne.n	8004110 <HAL_ADC_Init+0x2a0>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	2b00      	cmp	r3, #0
 8004038:	d16a      	bne.n	8004110 <HAL_ADC_Init+0x2a0>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	7f1b      	ldrb	r3, [r3, #28]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 800403e:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004046:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8004048:	4313      	orrs	r3, r2
 800404a:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	68db      	ldr	r3, [r3, #12]
 8004052:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004056:	f023 0302 	bic.w	r3, r3, #2
 800405a:	687a      	ldr	r2, [r7, #4]
 800405c:	6812      	ldr	r2, [r2, #0]
 800405e:	69b9      	ldr	r1, [r7, #24]
 8004060:	430b      	orrs	r3, r1
 8004062:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	691b      	ldr	r3, [r3, #16]
 8004068:	2b00      	cmp	r3, #0
 800406a:	d017      	beq.n	800409c <HAL_ADC_Init+0x22c>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	691a      	ldr	r2, [r3, #16]
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800407a:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8004084:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8004088:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800408c:	687a      	ldr	r2, [r7, #4]
 800408e:	6911      	ldr	r1, [r2, #16]
 8004090:	687a      	ldr	r2, [r7, #4]
 8004092:	6812      	ldr	r2, [r2, #0]
 8004094:	430b      	orrs	r3, r1
 8004096:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 800409a:	e013      	b.n	80040c4 <HAL_ADC_Init+0x254>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	691a      	ldr	r2, [r3, #16]
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80040aa:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80040b4:	687a      	ldr	r2, [r7, #4]
 80040b6:	6812      	ldr	r2, [r2, #0]
 80040b8:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80040bc:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80040c0:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80040ca:	2b01      	cmp	r3, #1
 80040cc:	d118      	bne.n	8004100 <HAL_ADC_Init+0x290>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	691b      	ldr	r3, [r3, #16]
 80040d4:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80040d8:	f023 0304 	bic.w	r3, r3, #4
 80040dc:	687a      	ldr	r2, [r7, #4]
 80040de:	6c51      	ldr	r1, [r2, #68]	; 0x44
 80040e0:	687a      	ldr	r2, [r7, #4]
 80040e2:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80040e4:	4311      	orrs	r1, r2
 80040e6:	687a      	ldr	r2, [r7, #4]
 80040e8:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80040ea:	4311      	orrs	r1, r2
 80040ec:	687a      	ldr	r2, [r7, #4]
 80040ee:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80040f0:	430a      	orrs	r2, r1
 80040f2:	431a      	orrs	r2, r3
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	f042 0201 	orr.w	r2, r2, #1
 80040fc:	611a      	str	r2, [r3, #16]
 80040fe:	e007      	b.n	8004110 <HAL_ADC_Init+0x2a0>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	691a      	ldr	r2, [r3, #16]
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	f022 0201 	bic.w	r2, r2, #1
 800410e:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	695b      	ldr	r3, [r3, #20]
 8004114:	2b01      	cmp	r3, #1
 8004116:	d10c      	bne.n	8004132 <HAL_ADC_Init+0x2c2>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800411e:	f023 010f 	bic.w	r1, r3, #15
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	6a1b      	ldr	r3, [r3, #32]
 8004126:	1e5a      	subs	r2, r3, #1
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	430a      	orrs	r2, r1
 800412e:	631a      	str	r2, [r3, #48]	; 0x30
 8004130:	e007      	b.n	8004142 <HAL_ADC_Init+0x2d2>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	f022 020f 	bic.w	r2, r2, #15
 8004140:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004146:	f023 0303 	bic.w	r3, r3, #3
 800414a:	f043 0201 	orr.w	r2, r3, #1
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	65da      	str	r2, [r3, #92]	; 0x5c
 8004152:	e011      	b.n	8004178 <HAL_ADC_Init+0x308>
 8004154:	2000003c 	.word	0x2000003c
 8004158:	053e2d63 	.word	0x053e2d63
 800415c:	50000100 	.word	0x50000100
 8004160:	50000300 	.word	0x50000300
 8004164:	fff04007 	.word	0xfff04007
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800416c:	f043 0210 	orr.w	r2, r3, #16
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8004174:	2301      	movs	r3, #1
 8004176:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8004178:	7ffb      	ldrb	r3, [r7, #31]
}
 800417a:	4618      	mov	r0, r3
 800417c:	3724      	adds	r7, #36	; 0x24
 800417e:	46bd      	mov	sp, r7
 8004180:	bd90      	pop	{r4, r7, pc}
 8004182:	bf00      	nop

08004184 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8004184:	b580      	push	{r7, lr}
 8004186:	b08a      	sub	sp, #40	; 0x28
 8004188:	af00      	add	r7, sp, #0
 800418a:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 800418c:	2300      	movs	r3, #0
 800418e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	685b      	ldr	r3, [r3, #4]
 800419e:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80041a0:	4883      	ldr	r0, [pc, #524]	; (80043b0 <HAL_ADC_IRQHandler+0x22c>)
 80041a2:	f7ff fdad 	bl	8003d00 <LL_ADC_GetMultimode>
 80041a6:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 80041a8:	69fb      	ldr	r3, [r7, #28]
 80041aa:	f003 0302 	and.w	r3, r3, #2
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d017      	beq.n	80041e2 <HAL_ADC_IRQHandler+0x5e>
 80041b2:	69bb      	ldr	r3, [r7, #24]
 80041b4:	f003 0302 	and.w	r3, r3, #2
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d012      	beq.n	80041e2 <HAL_ADC_IRQHandler+0x5e>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80041c0:	f003 0310 	and.w	r3, r3, #16
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d105      	bne.n	80041d4 <HAL_ADC_IRQHandler+0x50>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80041cc:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	65da      	str	r2, [r3, #92]	; 0x5c

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 80041d4:	6878      	ldr	r0, [r7, #4]
 80041d6:	f001 f919 	bl	800540c <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	2202      	movs	r2, #2
 80041e0:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 80041e2:	69fb      	ldr	r3, [r7, #28]
 80041e4:	f003 0304 	and.w	r3, r3, #4
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d004      	beq.n	80041f6 <HAL_ADC_IRQHandler+0x72>
 80041ec:	69bb      	ldr	r3, [r7, #24]
 80041ee:	f003 0304 	and.w	r3, r3, #4
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d10a      	bne.n	800420c <HAL_ADC_IRQHandler+0x88>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 80041f6:	69fb      	ldr	r3, [r7, #28]
 80041f8:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	f000 8085 	beq.w	800430c <HAL_ADC_IRQHandler+0x188>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8004202:	69bb      	ldr	r3, [r7, #24]
 8004204:	f003 0308 	and.w	r3, r3, #8
 8004208:	2b00      	cmp	r3, #0
 800420a:	d07f      	beq.n	800430c <HAL_ADC_IRQHandler+0x188>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004210:	f003 0310 	and.w	r3, r3, #16
 8004214:	2b00      	cmp	r3, #0
 8004216:	d105      	bne.n	8004224 <HAL_ADC_IRQHandler+0xa0>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800421c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	4618      	mov	r0, r3
 800422a:	f7ff fcc3 	bl	8003bb4 <LL_ADC_REG_IsTriggerSourceSWStart>
 800422e:	4603      	mov	r3, r0
 8004230:	2b00      	cmp	r3, #0
 8004232:	d064      	beq.n	80042fe <HAL_ADC_IRQHandler+0x17a>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	4a5e      	ldr	r2, [pc, #376]	; (80043b4 <HAL_ADC_IRQHandler+0x230>)
 800423a:	4293      	cmp	r3, r2
 800423c:	d002      	beq.n	8004244 <HAL_ADC_IRQHandler+0xc0>
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	e001      	b.n	8004248 <HAL_ADC_IRQHandler+0xc4>
 8004244:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8004248:	687a      	ldr	r2, [r7, #4]
 800424a:	6812      	ldr	r2, [r2, #0]
 800424c:	4293      	cmp	r3, r2
 800424e:	d008      	beq.n	8004262 <HAL_ADC_IRQHandler+0xde>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8004250:	697b      	ldr	r3, [r7, #20]
 8004252:	2b00      	cmp	r3, #0
 8004254:	d005      	beq.n	8004262 <HAL_ADC_IRQHandler+0xde>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8004256:	697b      	ldr	r3, [r7, #20]
 8004258:	2b05      	cmp	r3, #5
 800425a:	d002      	beq.n	8004262 <HAL_ADC_IRQHandler+0xde>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800425c:	697b      	ldr	r3, [r7, #20]
 800425e:	2b09      	cmp	r3, #9
 8004260:	d104      	bne.n	800426c <HAL_ADC_IRQHandler+0xe8>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	68db      	ldr	r3, [r3, #12]
 8004268:	623b      	str	r3, [r7, #32]
 800426a:	e00d      	b.n	8004288 <HAL_ADC_IRQHandler+0x104>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	4a50      	ldr	r2, [pc, #320]	; (80043b4 <HAL_ADC_IRQHandler+0x230>)
 8004272:	4293      	cmp	r3, r2
 8004274:	d002      	beq.n	800427c <HAL_ADC_IRQHandler+0xf8>
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	e001      	b.n	8004280 <HAL_ADC_IRQHandler+0xfc>
 800427c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8004280:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8004282:	693b      	ldr	r3, [r7, #16]
 8004284:	68db      	ldr	r3, [r3, #12]
 8004286:	623b      	str	r3, [r7, #32]
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8004288:	6a3b      	ldr	r3, [r7, #32]
 800428a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800428e:	2b00      	cmp	r3, #0
 8004290:	d135      	bne.n	80042fe <HAL_ADC_IRQHandler+0x17a>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	f003 0308 	and.w	r3, r3, #8
 800429c:	2b08      	cmp	r3, #8
 800429e:	d12e      	bne.n	80042fe <HAL_ADC_IRQHandler+0x17a>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	4618      	mov	r0, r3
 80042a6:	f7ff fdbc 	bl	8003e22 <LL_ADC_REG_IsConversionOngoing>
 80042aa:	4603      	mov	r3, r0
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d11a      	bne.n	80042e6 <HAL_ADC_IRQHandler+0x162>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	685a      	ldr	r2, [r3, #4]
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	f022 020c 	bic.w	r2, r2, #12
 80042be:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80042c4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	65da      	str	r2, [r3, #92]	; 0x5c

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80042d0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d112      	bne.n	80042fe <HAL_ADC_IRQHandler+0x17a>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80042dc:	f043 0201 	orr.w	r2, r3, #1
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	65da      	str	r2, [r3, #92]	; 0x5c
 80042e4:	e00b      	b.n	80042fe <HAL_ADC_IRQHandler+0x17a>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80042ea:	f043 0210 	orr.w	r2, r3, #16
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	65da      	str	r2, [r3, #92]	; 0x5c

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80042f6:	f043 0201 	orr.w	r2, r3, #1
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	661a      	str	r2, [r3, #96]	; 0x60
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80042fe:	6878      	ldr	r0, [r7, #4]
 8004300:	f000 f95a 	bl	80045b8 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	220c      	movs	r2, #12
 800430a:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 800430c:	69fb      	ldr	r3, [r7, #28]
 800430e:	f003 0320 	and.w	r3, r3, #32
 8004312:	2b00      	cmp	r3, #0
 8004314:	d004      	beq.n	8004320 <HAL_ADC_IRQHandler+0x19c>
 8004316:	69bb      	ldr	r3, [r7, #24]
 8004318:	f003 0320 	and.w	r3, r3, #32
 800431c:	2b00      	cmp	r3, #0
 800431e:	d10b      	bne.n	8004338 <HAL_ADC_IRQHandler+0x1b4>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8004320:	69fb      	ldr	r3, [r7, #28]
 8004322:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8004326:	2b00      	cmp	r3, #0
 8004328:	f000 809e 	beq.w	8004468 <HAL_ADC_IRQHandler+0x2e4>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 800432c:	69bb      	ldr	r3, [r7, #24]
 800432e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004332:	2b00      	cmp	r3, #0
 8004334:	f000 8098 	beq.w	8004468 <HAL_ADC_IRQHandler+0x2e4>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800433c:	f003 0310 	and.w	r3, r3, #16
 8004340:	2b00      	cmp	r3, #0
 8004342:	d105      	bne.n	8004350 <HAL_ADC_IRQHandler+0x1cc>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004348:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	4618      	mov	r0, r3
 8004356:	f7ff fc6c 	bl	8003c32 <LL_ADC_INJ_IsTriggerSourceSWStart>
 800435a:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	4618      	mov	r0, r3
 8004362:	f7ff fc27 	bl	8003bb4 <LL_ADC_REG_IsTriggerSourceSWStart>
 8004366:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	4a11      	ldr	r2, [pc, #68]	; (80043b4 <HAL_ADC_IRQHandler+0x230>)
 800436e:	4293      	cmp	r3, r2
 8004370:	d002      	beq.n	8004378 <HAL_ADC_IRQHandler+0x1f4>
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	e001      	b.n	800437c <HAL_ADC_IRQHandler+0x1f8>
 8004378:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800437c:	687a      	ldr	r2, [r7, #4]
 800437e:	6812      	ldr	r2, [r2, #0]
 8004380:	4293      	cmp	r3, r2
 8004382:	d008      	beq.n	8004396 <HAL_ADC_IRQHandler+0x212>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8004384:	697b      	ldr	r3, [r7, #20]
 8004386:	2b00      	cmp	r3, #0
 8004388:	d005      	beq.n	8004396 <HAL_ADC_IRQHandler+0x212>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 800438a:	697b      	ldr	r3, [r7, #20]
 800438c:	2b06      	cmp	r3, #6
 800438e:	d002      	beq.n	8004396 <HAL_ADC_IRQHandler+0x212>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8004390:	697b      	ldr	r3, [r7, #20]
 8004392:	2b07      	cmp	r3, #7
 8004394:	d104      	bne.n	80043a0 <HAL_ADC_IRQHandler+0x21c>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	68db      	ldr	r3, [r3, #12]
 800439c:	623b      	str	r3, [r7, #32]
 800439e:	e011      	b.n	80043c4 <HAL_ADC_IRQHandler+0x240>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	4a03      	ldr	r2, [pc, #12]	; (80043b4 <HAL_ADC_IRQHandler+0x230>)
 80043a6:	4293      	cmp	r3, r2
 80043a8:	d006      	beq.n	80043b8 <HAL_ADC_IRQHandler+0x234>
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	e005      	b.n	80043bc <HAL_ADC_IRQHandler+0x238>
 80043b0:	50000300 	.word	0x50000300
 80043b4:	50000100 	.word	0x50000100
 80043b8:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80043bc:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 80043be:	693b      	ldr	r3, [r7, #16]
 80043c0:	68db      	ldr	r3, [r3, #12]
 80043c2:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d047      	beq.n	800445a <HAL_ADC_IRQHandler+0x2d6>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 80043ca:	6a3b      	ldr	r3, [r7, #32]
 80043cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d007      	beq.n	80043e4 <HAL_ADC_IRQHandler+0x260>
 80043d4:	68bb      	ldr	r3, [r7, #8]
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d03f      	beq.n	800445a <HAL_ADC_IRQHandler+0x2d6>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 80043da:	6a3b      	ldr	r3, [r7, #32]
 80043dc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d13a      	bne.n	800445a <HAL_ADC_IRQHandler+0x2d6>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80043ee:	2b40      	cmp	r3, #64	; 0x40
 80043f0:	d133      	bne.n	800445a <HAL_ADC_IRQHandler+0x2d6>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 80043f2:	6a3b      	ldr	r3, [r7, #32]
 80043f4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d12e      	bne.n	800445a <HAL_ADC_IRQHandler+0x2d6>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	4618      	mov	r0, r3
 8004402:	f7ff fd21 	bl	8003e48 <LL_ADC_INJ_IsConversionOngoing>
 8004406:	4603      	mov	r3, r0
 8004408:	2b00      	cmp	r3, #0
 800440a:	d11a      	bne.n	8004442 <HAL_ADC_IRQHandler+0x2be>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	685a      	ldr	r2, [r3, #4]
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800441a:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004420:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	65da      	str	r2, [r3, #92]	; 0x5c

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800442c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004430:	2b00      	cmp	r3, #0
 8004432:	d112      	bne.n	800445a <HAL_ADC_IRQHandler+0x2d6>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004438:	f043 0201 	orr.w	r2, r3, #1
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	65da      	str	r2, [r3, #92]	; 0x5c
 8004440:	e00b      	b.n	800445a <HAL_ADC_IRQHandler+0x2d6>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004446:	f043 0210 	orr.w	r2, r3, #16
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	65da      	str	r2, [r3, #92]	; 0x5c

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004452:	f043 0201 	orr.w	r2, r3, #1
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	661a      	str	r2, [r3, #96]	; 0x60
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 800445a:	6878      	ldr	r0, [r7, #4]
 800445c:	f7fe f9a4 	bl	80027a8 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	2260      	movs	r2, #96	; 0x60
 8004466:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8004468:	69fb      	ldr	r3, [r7, #28]
 800446a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800446e:	2b00      	cmp	r3, #0
 8004470:	d011      	beq.n	8004496 <HAL_ADC_IRQHandler+0x312>
 8004472:	69bb      	ldr	r3, [r7, #24]
 8004474:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004478:	2b00      	cmp	r3, #0
 800447a:	d00c      	beq.n	8004496 <HAL_ADC_IRQHandler+0x312>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004480:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8004488:	6878      	ldr	r0, [r7, #4]
 800448a:	f000 f89f 	bl	80045cc <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	2280      	movs	r2, #128	; 0x80
 8004494:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8004496:	69fb      	ldr	r3, [r7, #28]
 8004498:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800449c:	2b00      	cmp	r3, #0
 800449e:	d012      	beq.n	80044c6 <HAL_ADC_IRQHandler+0x342>
 80044a0:	69bb      	ldr	r3, [r7, #24]
 80044a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d00d      	beq.n	80044c6 <HAL_ADC_IRQHandler+0x342>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80044ae:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 80044b6:	6878      	ldr	r0, [r7, #4]
 80044b8:	f000 ff94 	bl	80053e4 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80044c4:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 80044c6:	69fb      	ldr	r3, [r7, #28]
 80044c8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d012      	beq.n	80044f6 <HAL_ADC_IRQHandler+0x372>
 80044d0:	69bb      	ldr	r3, [r7, #24]
 80044d2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d00d      	beq.n	80044f6 <HAL_ADC_IRQHandler+0x372>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80044de:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 80044e6:	6878      	ldr	r0, [r7, #4]
 80044e8:	f000 ff86 	bl	80053f8 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80044f4:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 80044f6:	69fb      	ldr	r3, [r7, #28]
 80044f8:	f003 0310 	and.w	r3, r3, #16
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d036      	beq.n	800456e <HAL_ADC_IRQHandler+0x3ea>
 8004500:	69bb      	ldr	r3, [r7, #24]
 8004502:	f003 0310 	and.w	r3, r3, #16
 8004506:	2b00      	cmp	r3, #0
 8004508:	d031      	beq.n	800456e <HAL_ADC_IRQHandler+0x3ea>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800450e:	2b00      	cmp	r3, #0
 8004510:	d102      	bne.n	8004518 <HAL_ADC_IRQHandler+0x394>
    {
      overrun_error = 1UL;
 8004512:	2301      	movs	r3, #1
 8004514:	627b      	str	r3, [r7, #36]	; 0x24
 8004516:	e014      	b.n	8004542 <HAL_ADC_IRQHandler+0x3be>
    }
    else
    {
      /* Check DMA configuration */
#if defined(ADC_MULTIMODE_SUPPORT)
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 8004518:	697b      	ldr	r3, [r7, #20]
 800451a:	2b00      	cmp	r3, #0
 800451c:	d008      	beq.n	8004530 <HAL_ADC_IRQHandler+0x3ac>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 800451e:	4825      	ldr	r0, [pc, #148]	; (80045b4 <HAL_ADC_IRQHandler+0x430>)
 8004520:	f7ff fbfc 	bl	8003d1c <LL_ADC_GetMultiDMATransfer>
 8004524:	4603      	mov	r3, r0
 8004526:	2b00      	cmp	r3, #0
 8004528:	d00b      	beq.n	8004542 <HAL_ADC_IRQHandler+0x3be>
        {
          overrun_error = 1UL;
 800452a:	2301      	movs	r3, #1
 800452c:	627b      	str	r3, [r7, #36]	; 0x24
 800452e:	e008      	b.n	8004542 <HAL_ADC_IRQHandler+0x3be>
      }
      else
#endif
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	68db      	ldr	r3, [r3, #12]
 8004536:	f003 0301 	and.w	r3, r3, #1
 800453a:	2b00      	cmp	r3, #0
 800453c:	d001      	beq.n	8004542 <HAL_ADC_IRQHandler+0x3be>
        {
          overrun_error = 1UL;
 800453e:	2301      	movs	r3, #1
 8004540:	627b      	str	r3, [r7, #36]	; 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 8004542:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004544:	2b01      	cmp	r3, #1
 8004546:	d10e      	bne.n	8004566 <HAL_ADC_IRQHandler+0x3e2>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800454c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004558:	f043 0202 	orr.w	r2, r3, #2
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	661a      	str	r2, [r3, #96]	; 0x60
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8004560:	6878      	ldr	r0, [r7, #4]
 8004562:	f000 f83d 	bl	80045e0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	2210      	movs	r2, #16
 800456c:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 800456e:	69fb      	ldr	r3, [r7, #28]
 8004570:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004574:	2b00      	cmp	r3, #0
 8004576:	d018      	beq.n	80045aa <HAL_ADC_IRQHandler+0x426>
 8004578:	69bb      	ldr	r3, [r7, #24]
 800457a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800457e:	2b00      	cmp	r3, #0
 8004580:	d013      	beq.n	80045aa <HAL_ADC_IRQHandler+0x426>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004586:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004592:	f043 0208 	orr.w	r2, r3, #8
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	661a      	str	r2, [r3, #96]	; 0x60

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80045a2:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 80045a4:	6878      	ldr	r0, [r7, #4]
 80045a6:	f000 ff13 	bl	80053d0 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 80045aa:	bf00      	nop
 80045ac:	3728      	adds	r7, #40	; 0x28
 80045ae:	46bd      	mov	sp, r7
 80045b0:	bd80      	pop	{r7, pc}
 80045b2:	bf00      	nop
 80045b4:	50000300 	.word	0x50000300

080045b8 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80045b8:	b480      	push	{r7}
 80045ba:	b083      	sub	sp, #12
 80045bc:	af00      	add	r7, sp, #0
 80045be:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 80045c0:	bf00      	nop
 80045c2:	370c      	adds	r7, #12
 80045c4:	46bd      	mov	sp, r7
 80045c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ca:	4770      	bx	lr

080045cc <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 80045cc:	b480      	push	{r7}
 80045ce:	b083      	sub	sp, #12
 80045d0:	af00      	add	r7, sp, #0
 80045d2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 80045d4:	bf00      	nop
 80045d6:	370c      	adds	r7, #12
 80045d8:	46bd      	mov	sp, r7
 80045da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045de:	4770      	bx	lr

080045e0 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80045e0:	b480      	push	{r7}
 80045e2:	b083      	sub	sp, #12
 80045e4:	af00      	add	r7, sp, #0
 80045e6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80045e8:	bf00      	nop
 80045ea:	370c      	adds	r7, #12
 80045ec:	46bd      	mov	sp, r7
 80045ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045f2:	4770      	bx	lr

080045f4 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80045f4:	b580      	push	{r7, lr}
 80045f6:	b0b6      	sub	sp, #216	; 0xd8
 80045f8:	af00      	add	r7, sp, #0
 80045fa:	6078      	str	r0, [r7, #4]
 80045fc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80045fe:	2300      	movs	r3, #0
 8004600:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8004604:	2300      	movs	r3, #0
 8004606:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800460e:	2b01      	cmp	r3, #1
 8004610:	d101      	bne.n	8004616 <HAL_ADC_ConfigChannel+0x22>
 8004612:	2302      	movs	r3, #2
 8004614:	e3c8      	b.n	8004da8 <HAL_ADC_ConfigChannel+0x7b4>
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	2201      	movs	r2, #1
 800461a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	4618      	mov	r0, r3
 8004624:	f7ff fbfd 	bl	8003e22 <LL_ADC_REG_IsConversionOngoing>
 8004628:	4603      	mov	r3, r0
 800462a:	2b00      	cmp	r3, #0
 800462c:	f040 83ad 	bne.w	8004d8a <HAL_ADC_ConfigChannel+0x796>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	6818      	ldr	r0, [r3, #0]
 8004634:	683b      	ldr	r3, [r7, #0]
 8004636:	6859      	ldr	r1, [r3, #4]
 8004638:	683b      	ldr	r3, [r7, #0]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	461a      	mov	r2, r3
 800463e:	f7ff facc 	bl	8003bda <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	4618      	mov	r0, r3
 8004648:	f7ff fbeb 	bl	8003e22 <LL_ADC_REG_IsConversionOngoing>
 800464c:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	4618      	mov	r0, r3
 8004656:	f7ff fbf7 	bl	8003e48 <LL_ADC_INJ_IsConversionOngoing>
 800465a:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800465e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8004662:	2b00      	cmp	r3, #0
 8004664:	f040 81d9 	bne.w	8004a1a <HAL_ADC_ConfigChannel+0x426>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8004668:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800466c:	2b00      	cmp	r3, #0
 800466e:	f040 81d4 	bne.w	8004a1a <HAL_ADC_ConfigChannel+0x426>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8004672:	683b      	ldr	r3, [r7, #0]
 8004674:	689b      	ldr	r3, [r3, #8]
 8004676:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800467a:	d10f      	bne.n	800469c <HAL_ADC_ConfigChannel+0xa8>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	6818      	ldr	r0, [r3, #0]
 8004680:	683b      	ldr	r3, [r7, #0]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	2200      	movs	r2, #0
 8004686:	4619      	mov	r1, r3
 8004688:	f7ff fae6 	bl	8003c58 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8004694:	4618      	mov	r0, r3
 8004696:	f7ff fa7a 	bl	8003b8e <LL_ADC_SetSamplingTimeCommonConfig>
 800469a:	e00e      	b.n	80046ba <HAL_ADC_ConfigChannel+0xc6>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	6818      	ldr	r0, [r3, #0]
 80046a0:	683b      	ldr	r3, [r7, #0]
 80046a2:	6819      	ldr	r1, [r3, #0]
 80046a4:	683b      	ldr	r3, [r7, #0]
 80046a6:	689b      	ldr	r3, [r3, #8]
 80046a8:	461a      	mov	r2, r3
 80046aa:	f7ff fad5 	bl	8003c58 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	2100      	movs	r1, #0
 80046b4:	4618      	mov	r0, r3
 80046b6:	f7ff fa6a 	bl	8003b8e <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80046ba:	683b      	ldr	r3, [r7, #0]
 80046bc:	695a      	ldr	r2, [r3, #20]
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	68db      	ldr	r3, [r3, #12]
 80046c4:	08db      	lsrs	r3, r3, #3
 80046c6:	f003 0303 	and.w	r3, r3, #3
 80046ca:	005b      	lsls	r3, r3, #1
 80046cc:	fa02 f303 	lsl.w	r3, r2, r3
 80046d0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80046d4:	683b      	ldr	r3, [r7, #0]
 80046d6:	691b      	ldr	r3, [r3, #16]
 80046d8:	2b04      	cmp	r3, #4
 80046da:	d022      	beq.n	8004722 <HAL_ADC_ConfigChannel+0x12e>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	6818      	ldr	r0, [r3, #0]
 80046e0:	683b      	ldr	r3, [r7, #0]
 80046e2:	6919      	ldr	r1, [r3, #16]
 80046e4:	683b      	ldr	r3, [r7, #0]
 80046e6:	681a      	ldr	r2, [r3, #0]
 80046e8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80046ec:	f7ff f9c4 	bl	8003a78 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(sConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	6818      	ldr	r0, [r3, #0]
 80046f4:	683b      	ldr	r3, [r7, #0]
 80046f6:	6919      	ldr	r1, [r3, #16]
 80046f8:	683b      	ldr	r3, [r7, #0]
 80046fa:	699b      	ldr	r3, [r3, #24]
 80046fc:	461a      	mov	r2, r3
 80046fe:	f7ff fa10 	bl	8003b22 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	6818      	ldr	r0, [r3, #0]
 8004706:	683b      	ldr	r3, [r7, #0]
 8004708:	6919      	ldr	r1, [r3, #16]
 800470a:	683b      	ldr	r3, [r7, #0]
 800470c:	7f1b      	ldrb	r3, [r3, #28]
 800470e:	2b01      	cmp	r3, #1
 8004710:	d102      	bne.n	8004718 <HAL_ADC_ConfigChannel+0x124>
 8004712:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004716:	e000      	b.n	800471a <HAL_ADC_ConfigChannel+0x126>
 8004718:	2300      	movs	r3, #0
 800471a:	461a      	mov	r2, r3
 800471c:	f7ff fa1c 	bl	8003b58 <LL_ADC_SetOffsetSaturation>
 8004720:	e17b      	b.n	8004a1a <HAL_ADC_ConfigChannel+0x426>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	2100      	movs	r1, #0
 8004728:	4618      	mov	r0, r3
 800472a:	f7ff f9c9 	bl	8003ac0 <LL_ADC_GetOffsetChannel>
 800472e:	4603      	mov	r3, r0
 8004730:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004734:	2b00      	cmp	r3, #0
 8004736:	d10a      	bne.n	800474e <HAL_ADC_ConfigChannel+0x15a>
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	2100      	movs	r1, #0
 800473e:	4618      	mov	r0, r3
 8004740:	f7ff f9be 	bl	8003ac0 <LL_ADC_GetOffsetChannel>
 8004744:	4603      	mov	r3, r0
 8004746:	0e9b      	lsrs	r3, r3, #26
 8004748:	f003 021f 	and.w	r2, r3, #31
 800474c:	e01e      	b.n	800478c <HAL_ADC_ConfigChannel+0x198>
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	2100      	movs	r1, #0
 8004754:	4618      	mov	r0, r3
 8004756:	f7ff f9b3 	bl	8003ac0 <LL_ADC_GetOffsetChannel>
 800475a:	4603      	mov	r3, r0
 800475c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004760:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8004764:	fa93 f3a3 	rbit	r3, r3
 8004768:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800476c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8004770:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8004774:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004778:	2b00      	cmp	r3, #0
 800477a:	d101      	bne.n	8004780 <HAL_ADC_ConfigChannel+0x18c>
  {
    return 32U;
 800477c:	2320      	movs	r3, #32
 800477e:	e004      	b.n	800478a <HAL_ADC_ConfigChannel+0x196>
  }
  return __builtin_clz(value);
 8004780:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004784:	fab3 f383 	clz	r3, r3
 8004788:	b2db      	uxtb	r3, r3
 800478a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800478c:	683b      	ldr	r3, [r7, #0]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004794:	2b00      	cmp	r3, #0
 8004796:	d105      	bne.n	80047a4 <HAL_ADC_ConfigChannel+0x1b0>
 8004798:	683b      	ldr	r3, [r7, #0]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	0e9b      	lsrs	r3, r3, #26
 800479e:	f003 031f 	and.w	r3, r3, #31
 80047a2:	e018      	b.n	80047d6 <HAL_ADC_ConfigChannel+0x1e2>
 80047a4:	683b      	ldr	r3, [r7, #0]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80047ac:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80047b0:	fa93 f3a3 	rbit	r3, r3
 80047b4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 80047b8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80047bc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 80047c0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d101      	bne.n	80047cc <HAL_ADC_ConfigChannel+0x1d8>
    return 32U;
 80047c8:	2320      	movs	r3, #32
 80047ca:	e004      	b.n	80047d6 <HAL_ADC_ConfigChannel+0x1e2>
  return __builtin_clz(value);
 80047cc:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80047d0:	fab3 f383 	clz	r3, r3
 80047d4:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80047d6:	429a      	cmp	r2, r3
 80047d8:	d106      	bne.n	80047e8 <HAL_ADC_ConfigChannel+0x1f4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	2200      	movs	r2, #0
 80047e0:	2100      	movs	r1, #0
 80047e2:	4618      	mov	r0, r3
 80047e4:	f7ff f982 	bl	8003aec <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	2101      	movs	r1, #1
 80047ee:	4618      	mov	r0, r3
 80047f0:	f7ff f966 	bl	8003ac0 <LL_ADC_GetOffsetChannel>
 80047f4:	4603      	mov	r3, r0
 80047f6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d10a      	bne.n	8004814 <HAL_ADC_ConfigChannel+0x220>
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	2101      	movs	r1, #1
 8004804:	4618      	mov	r0, r3
 8004806:	f7ff f95b 	bl	8003ac0 <LL_ADC_GetOffsetChannel>
 800480a:	4603      	mov	r3, r0
 800480c:	0e9b      	lsrs	r3, r3, #26
 800480e:	f003 021f 	and.w	r2, r3, #31
 8004812:	e01e      	b.n	8004852 <HAL_ADC_ConfigChannel+0x25e>
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	2101      	movs	r1, #1
 800481a:	4618      	mov	r0, r3
 800481c:	f7ff f950 	bl	8003ac0 <LL_ADC_GetOffsetChannel>
 8004820:	4603      	mov	r3, r0
 8004822:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004826:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800482a:	fa93 f3a3 	rbit	r3, r3
 800482e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8004832:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004836:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 800483a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800483e:	2b00      	cmp	r3, #0
 8004840:	d101      	bne.n	8004846 <HAL_ADC_ConfigChannel+0x252>
    return 32U;
 8004842:	2320      	movs	r3, #32
 8004844:	e004      	b.n	8004850 <HAL_ADC_ConfigChannel+0x25c>
  return __builtin_clz(value);
 8004846:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800484a:	fab3 f383 	clz	r3, r3
 800484e:	b2db      	uxtb	r3, r3
 8004850:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8004852:	683b      	ldr	r3, [r7, #0]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800485a:	2b00      	cmp	r3, #0
 800485c:	d105      	bne.n	800486a <HAL_ADC_ConfigChannel+0x276>
 800485e:	683b      	ldr	r3, [r7, #0]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	0e9b      	lsrs	r3, r3, #26
 8004864:	f003 031f 	and.w	r3, r3, #31
 8004868:	e018      	b.n	800489c <HAL_ADC_ConfigChannel+0x2a8>
 800486a:	683b      	ldr	r3, [r7, #0]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004872:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004876:	fa93 f3a3 	rbit	r3, r3
 800487a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 800487e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8004882:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8004886:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800488a:	2b00      	cmp	r3, #0
 800488c:	d101      	bne.n	8004892 <HAL_ADC_ConfigChannel+0x29e>
    return 32U;
 800488e:	2320      	movs	r3, #32
 8004890:	e004      	b.n	800489c <HAL_ADC_ConfigChannel+0x2a8>
  return __builtin_clz(value);
 8004892:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004896:	fab3 f383 	clz	r3, r3
 800489a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800489c:	429a      	cmp	r2, r3
 800489e:	d106      	bne.n	80048ae <HAL_ADC_ConfigChannel+0x2ba>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	2200      	movs	r2, #0
 80048a6:	2101      	movs	r1, #1
 80048a8:	4618      	mov	r0, r3
 80048aa:	f7ff f91f 	bl	8003aec <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	2102      	movs	r1, #2
 80048b4:	4618      	mov	r0, r3
 80048b6:	f7ff f903 	bl	8003ac0 <LL_ADC_GetOffsetChannel>
 80048ba:	4603      	mov	r3, r0
 80048bc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d10a      	bne.n	80048da <HAL_ADC_ConfigChannel+0x2e6>
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	2102      	movs	r1, #2
 80048ca:	4618      	mov	r0, r3
 80048cc:	f7ff f8f8 	bl	8003ac0 <LL_ADC_GetOffsetChannel>
 80048d0:	4603      	mov	r3, r0
 80048d2:	0e9b      	lsrs	r3, r3, #26
 80048d4:	f003 021f 	and.w	r2, r3, #31
 80048d8:	e01e      	b.n	8004918 <HAL_ADC_ConfigChannel+0x324>
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	2102      	movs	r1, #2
 80048e0:	4618      	mov	r0, r3
 80048e2:	f7ff f8ed 	bl	8003ac0 <LL_ADC_GetOffsetChannel>
 80048e6:	4603      	mov	r3, r0
 80048e8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80048ec:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80048f0:	fa93 f3a3 	rbit	r3, r3
 80048f4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 80048f8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80048fc:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8004900:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004904:	2b00      	cmp	r3, #0
 8004906:	d101      	bne.n	800490c <HAL_ADC_ConfigChannel+0x318>
    return 32U;
 8004908:	2320      	movs	r3, #32
 800490a:	e004      	b.n	8004916 <HAL_ADC_ConfigChannel+0x322>
  return __builtin_clz(value);
 800490c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004910:	fab3 f383 	clz	r3, r3
 8004914:	b2db      	uxtb	r3, r3
 8004916:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8004918:	683b      	ldr	r3, [r7, #0]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004920:	2b00      	cmp	r3, #0
 8004922:	d105      	bne.n	8004930 <HAL_ADC_ConfigChannel+0x33c>
 8004924:	683b      	ldr	r3, [r7, #0]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	0e9b      	lsrs	r3, r3, #26
 800492a:	f003 031f 	and.w	r3, r3, #31
 800492e:	e016      	b.n	800495e <HAL_ADC_ConfigChannel+0x36a>
 8004930:	683b      	ldr	r3, [r7, #0]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004938:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800493c:	fa93 f3a3 	rbit	r3, r3
 8004940:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8004942:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004944:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8004948:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800494c:	2b00      	cmp	r3, #0
 800494e:	d101      	bne.n	8004954 <HAL_ADC_ConfigChannel+0x360>
    return 32U;
 8004950:	2320      	movs	r3, #32
 8004952:	e004      	b.n	800495e <HAL_ADC_ConfigChannel+0x36a>
  return __builtin_clz(value);
 8004954:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004958:	fab3 f383 	clz	r3, r3
 800495c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800495e:	429a      	cmp	r2, r3
 8004960:	d106      	bne.n	8004970 <HAL_ADC_ConfigChannel+0x37c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	2200      	movs	r2, #0
 8004968:	2102      	movs	r1, #2
 800496a:	4618      	mov	r0, r3
 800496c:	f7ff f8be 	bl	8003aec <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	2103      	movs	r1, #3
 8004976:	4618      	mov	r0, r3
 8004978:	f7ff f8a2 	bl	8003ac0 <LL_ADC_GetOffsetChannel>
 800497c:	4603      	mov	r3, r0
 800497e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004982:	2b00      	cmp	r3, #0
 8004984:	d10a      	bne.n	800499c <HAL_ADC_ConfigChannel+0x3a8>
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	2103      	movs	r1, #3
 800498c:	4618      	mov	r0, r3
 800498e:	f7ff f897 	bl	8003ac0 <LL_ADC_GetOffsetChannel>
 8004992:	4603      	mov	r3, r0
 8004994:	0e9b      	lsrs	r3, r3, #26
 8004996:	f003 021f 	and.w	r2, r3, #31
 800499a:	e017      	b.n	80049cc <HAL_ADC_ConfigChannel+0x3d8>
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	2103      	movs	r1, #3
 80049a2:	4618      	mov	r0, r3
 80049a4:	f7ff f88c 	bl	8003ac0 <LL_ADC_GetOffsetChannel>
 80049a8:	4603      	mov	r3, r0
 80049aa:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80049ac:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80049ae:	fa93 f3a3 	rbit	r3, r3
 80049b2:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 80049b4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80049b6:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 80049b8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d101      	bne.n	80049c2 <HAL_ADC_ConfigChannel+0x3ce>
    return 32U;
 80049be:	2320      	movs	r3, #32
 80049c0:	e003      	b.n	80049ca <HAL_ADC_ConfigChannel+0x3d6>
  return __builtin_clz(value);
 80049c2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80049c4:	fab3 f383 	clz	r3, r3
 80049c8:	b2db      	uxtb	r3, r3
 80049ca:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80049cc:	683b      	ldr	r3, [r7, #0]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d105      	bne.n	80049e4 <HAL_ADC_ConfigChannel+0x3f0>
 80049d8:	683b      	ldr	r3, [r7, #0]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	0e9b      	lsrs	r3, r3, #26
 80049de:	f003 031f 	and.w	r3, r3, #31
 80049e2:	e011      	b.n	8004a08 <HAL_ADC_ConfigChannel+0x414>
 80049e4:	683b      	ldr	r3, [r7, #0]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80049ea:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80049ec:	fa93 f3a3 	rbit	r3, r3
 80049f0:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 80049f2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80049f4:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 80049f6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d101      	bne.n	8004a00 <HAL_ADC_ConfigChannel+0x40c>
    return 32U;
 80049fc:	2320      	movs	r3, #32
 80049fe:	e003      	b.n	8004a08 <HAL_ADC_ConfigChannel+0x414>
  return __builtin_clz(value);
 8004a00:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004a02:	fab3 f383 	clz	r3, r3
 8004a06:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8004a08:	429a      	cmp	r2, r3
 8004a0a:	d106      	bne.n	8004a1a <HAL_ADC_ConfigChannel+0x426>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	2200      	movs	r2, #0
 8004a12:	2103      	movs	r1, #3
 8004a14:	4618      	mov	r0, r3
 8004a16:	f7ff f869 	bl	8003aec <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	4618      	mov	r0, r3
 8004a20:	f7ff f9ec 	bl	8003dfc <LL_ADC_IsEnabled>
 8004a24:	4603      	mov	r3, r0
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	f040 8140 	bne.w	8004cac <HAL_ADC_ConfigChannel+0x6b8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	6818      	ldr	r0, [r3, #0]
 8004a30:	683b      	ldr	r3, [r7, #0]
 8004a32:	6819      	ldr	r1, [r3, #0]
 8004a34:	683b      	ldr	r3, [r7, #0]
 8004a36:	68db      	ldr	r3, [r3, #12]
 8004a38:	461a      	mov	r2, r3
 8004a3a:	f7ff f939 	bl	8003cb0 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8004a3e:	683b      	ldr	r3, [r7, #0]
 8004a40:	68db      	ldr	r3, [r3, #12]
 8004a42:	4a8f      	ldr	r2, [pc, #572]	; (8004c80 <HAL_ADC_ConfigChannel+0x68c>)
 8004a44:	4293      	cmp	r3, r2
 8004a46:	f040 8131 	bne.w	8004cac <HAL_ADC_ConfigChannel+0x6b8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004a4e:	683b      	ldr	r3, [r7, #0]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d10b      	bne.n	8004a72 <HAL_ADC_ConfigChannel+0x47e>
 8004a5a:	683b      	ldr	r3, [r7, #0]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	0e9b      	lsrs	r3, r3, #26
 8004a60:	3301      	adds	r3, #1
 8004a62:	f003 031f 	and.w	r3, r3, #31
 8004a66:	2b09      	cmp	r3, #9
 8004a68:	bf94      	ite	ls
 8004a6a:	2301      	movls	r3, #1
 8004a6c:	2300      	movhi	r3, #0
 8004a6e:	b2db      	uxtb	r3, r3
 8004a70:	e019      	b.n	8004aa6 <HAL_ADC_ConfigChannel+0x4b2>
 8004a72:	683b      	ldr	r3, [r7, #0]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a78:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004a7a:	fa93 f3a3 	rbit	r3, r3
 8004a7e:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8004a80:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004a82:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8004a84:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d101      	bne.n	8004a8e <HAL_ADC_ConfigChannel+0x49a>
    return 32U;
 8004a8a:	2320      	movs	r3, #32
 8004a8c:	e003      	b.n	8004a96 <HAL_ADC_ConfigChannel+0x4a2>
  return __builtin_clz(value);
 8004a8e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004a90:	fab3 f383 	clz	r3, r3
 8004a94:	b2db      	uxtb	r3, r3
 8004a96:	3301      	adds	r3, #1
 8004a98:	f003 031f 	and.w	r3, r3, #31
 8004a9c:	2b09      	cmp	r3, #9
 8004a9e:	bf94      	ite	ls
 8004aa0:	2301      	movls	r3, #1
 8004aa2:	2300      	movhi	r3, #0
 8004aa4:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d079      	beq.n	8004b9e <HAL_ADC_ConfigChannel+0x5aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004aaa:	683b      	ldr	r3, [r7, #0]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d107      	bne.n	8004ac6 <HAL_ADC_ConfigChannel+0x4d2>
 8004ab6:	683b      	ldr	r3, [r7, #0]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	0e9b      	lsrs	r3, r3, #26
 8004abc:	3301      	adds	r3, #1
 8004abe:	069b      	lsls	r3, r3, #26
 8004ac0:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004ac4:	e015      	b.n	8004af2 <HAL_ADC_ConfigChannel+0x4fe>
 8004ac6:	683b      	ldr	r3, [r7, #0]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004acc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004ace:	fa93 f3a3 	rbit	r3, r3
 8004ad2:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8004ad4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004ad6:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8004ad8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d101      	bne.n	8004ae2 <HAL_ADC_ConfigChannel+0x4ee>
    return 32U;
 8004ade:	2320      	movs	r3, #32
 8004ae0:	e003      	b.n	8004aea <HAL_ADC_ConfigChannel+0x4f6>
  return __builtin_clz(value);
 8004ae2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004ae4:	fab3 f383 	clz	r3, r3
 8004ae8:	b2db      	uxtb	r3, r3
 8004aea:	3301      	adds	r3, #1
 8004aec:	069b      	lsls	r3, r3, #26
 8004aee:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004af2:	683b      	ldr	r3, [r7, #0]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d109      	bne.n	8004b12 <HAL_ADC_ConfigChannel+0x51e>
 8004afe:	683b      	ldr	r3, [r7, #0]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	0e9b      	lsrs	r3, r3, #26
 8004b04:	3301      	adds	r3, #1
 8004b06:	f003 031f 	and.w	r3, r3, #31
 8004b0a:	2101      	movs	r1, #1
 8004b0c:	fa01 f303 	lsl.w	r3, r1, r3
 8004b10:	e017      	b.n	8004b42 <HAL_ADC_ConfigChannel+0x54e>
 8004b12:	683b      	ldr	r3, [r7, #0]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b18:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004b1a:	fa93 f3a3 	rbit	r3, r3
 8004b1e:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8004b20:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004b22:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8004b24:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d101      	bne.n	8004b2e <HAL_ADC_ConfigChannel+0x53a>
    return 32U;
 8004b2a:	2320      	movs	r3, #32
 8004b2c:	e003      	b.n	8004b36 <HAL_ADC_ConfigChannel+0x542>
  return __builtin_clz(value);
 8004b2e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004b30:	fab3 f383 	clz	r3, r3
 8004b34:	b2db      	uxtb	r3, r3
 8004b36:	3301      	adds	r3, #1
 8004b38:	f003 031f 	and.w	r3, r3, #31
 8004b3c:	2101      	movs	r1, #1
 8004b3e:	fa01 f303 	lsl.w	r3, r1, r3
 8004b42:	ea42 0103 	orr.w	r1, r2, r3
 8004b46:	683b      	ldr	r3, [r7, #0]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d10a      	bne.n	8004b68 <HAL_ADC_ConfigChannel+0x574>
 8004b52:	683b      	ldr	r3, [r7, #0]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	0e9b      	lsrs	r3, r3, #26
 8004b58:	3301      	adds	r3, #1
 8004b5a:	f003 021f 	and.w	r2, r3, #31
 8004b5e:	4613      	mov	r3, r2
 8004b60:	005b      	lsls	r3, r3, #1
 8004b62:	4413      	add	r3, r2
 8004b64:	051b      	lsls	r3, r3, #20
 8004b66:	e018      	b.n	8004b9a <HAL_ADC_ConfigChannel+0x5a6>
 8004b68:	683b      	ldr	r3, [r7, #0]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b70:	fa93 f3a3 	rbit	r3, r3
 8004b74:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8004b76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b78:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8004b7a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d101      	bne.n	8004b84 <HAL_ADC_ConfigChannel+0x590>
    return 32U;
 8004b80:	2320      	movs	r3, #32
 8004b82:	e003      	b.n	8004b8c <HAL_ADC_ConfigChannel+0x598>
  return __builtin_clz(value);
 8004b84:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004b86:	fab3 f383 	clz	r3, r3
 8004b8a:	b2db      	uxtb	r3, r3
 8004b8c:	3301      	adds	r3, #1
 8004b8e:	f003 021f 	and.w	r2, r3, #31
 8004b92:	4613      	mov	r3, r2
 8004b94:	005b      	lsls	r3, r3, #1
 8004b96:	4413      	add	r3, r2
 8004b98:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004b9a:	430b      	orrs	r3, r1
 8004b9c:	e081      	b.n	8004ca2 <HAL_ADC_ConfigChannel+0x6ae>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004b9e:	683b      	ldr	r3, [r7, #0]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d107      	bne.n	8004bba <HAL_ADC_ConfigChannel+0x5c6>
 8004baa:	683b      	ldr	r3, [r7, #0]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	0e9b      	lsrs	r3, r3, #26
 8004bb0:	3301      	adds	r3, #1
 8004bb2:	069b      	lsls	r3, r3, #26
 8004bb4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004bb8:	e015      	b.n	8004be6 <HAL_ADC_ConfigChannel+0x5f2>
 8004bba:	683b      	ldr	r3, [r7, #0]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004bc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004bc2:	fa93 f3a3 	rbit	r3, r3
 8004bc6:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8004bc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bca:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8004bcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d101      	bne.n	8004bd6 <HAL_ADC_ConfigChannel+0x5e2>
    return 32U;
 8004bd2:	2320      	movs	r3, #32
 8004bd4:	e003      	b.n	8004bde <HAL_ADC_ConfigChannel+0x5ea>
  return __builtin_clz(value);
 8004bd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bd8:	fab3 f383 	clz	r3, r3
 8004bdc:	b2db      	uxtb	r3, r3
 8004bde:	3301      	adds	r3, #1
 8004be0:	069b      	lsls	r3, r3, #26
 8004be2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004be6:	683b      	ldr	r3, [r7, #0]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d109      	bne.n	8004c06 <HAL_ADC_ConfigChannel+0x612>
 8004bf2:	683b      	ldr	r3, [r7, #0]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	0e9b      	lsrs	r3, r3, #26
 8004bf8:	3301      	adds	r3, #1
 8004bfa:	f003 031f 	and.w	r3, r3, #31
 8004bfe:	2101      	movs	r1, #1
 8004c00:	fa01 f303 	lsl.w	r3, r1, r3
 8004c04:	e017      	b.n	8004c36 <HAL_ADC_ConfigChannel+0x642>
 8004c06:	683b      	ldr	r3, [r7, #0]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c0c:	6a3b      	ldr	r3, [r7, #32]
 8004c0e:	fa93 f3a3 	rbit	r3, r3
 8004c12:	61fb      	str	r3, [r7, #28]
  return result;
 8004c14:	69fb      	ldr	r3, [r7, #28]
 8004c16:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8004c18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d101      	bne.n	8004c22 <HAL_ADC_ConfigChannel+0x62e>
    return 32U;
 8004c1e:	2320      	movs	r3, #32
 8004c20:	e003      	b.n	8004c2a <HAL_ADC_ConfigChannel+0x636>
  return __builtin_clz(value);
 8004c22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c24:	fab3 f383 	clz	r3, r3
 8004c28:	b2db      	uxtb	r3, r3
 8004c2a:	3301      	adds	r3, #1
 8004c2c:	f003 031f 	and.w	r3, r3, #31
 8004c30:	2101      	movs	r1, #1
 8004c32:	fa01 f303 	lsl.w	r3, r1, r3
 8004c36:	ea42 0103 	orr.w	r1, r2, r3
 8004c3a:	683b      	ldr	r3, [r7, #0]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d10d      	bne.n	8004c62 <HAL_ADC_ConfigChannel+0x66e>
 8004c46:	683b      	ldr	r3, [r7, #0]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	0e9b      	lsrs	r3, r3, #26
 8004c4c:	3301      	adds	r3, #1
 8004c4e:	f003 021f 	and.w	r2, r3, #31
 8004c52:	4613      	mov	r3, r2
 8004c54:	005b      	lsls	r3, r3, #1
 8004c56:	4413      	add	r3, r2
 8004c58:	3b1e      	subs	r3, #30
 8004c5a:	051b      	lsls	r3, r3, #20
 8004c5c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004c60:	e01e      	b.n	8004ca0 <HAL_ADC_ConfigChannel+0x6ac>
 8004c62:	683b      	ldr	r3, [r7, #0]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c68:	697b      	ldr	r3, [r7, #20]
 8004c6a:	fa93 f3a3 	rbit	r3, r3
 8004c6e:	613b      	str	r3, [r7, #16]
  return result;
 8004c70:	693b      	ldr	r3, [r7, #16]
 8004c72:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8004c74:	69bb      	ldr	r3, [r7, #24]
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d104      	bne.n	8004c84 <HAL_ADC_ConfigChannel+0x690>
    return 32U;
 8004c7a:	2320      	movs	r3, #32
 8004c7c:	e006      	b.n	8004c8c <HAL_ADC_ConfigChannel+0x698>
 8004c7e:	bf00      	nop
 8004c80:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8004c84:	69bb      	ldr	r3, [r7, #24]
 8004c86:	fab3 f383 	clz	r3, r3
 8004c8a:	b2db      	uxtb	r3, r3
 8004c8c:	3301      	adds	r3, #1
 8004c8e:	f003 021f 	and.w	r2, r3, #31
 8004c92:	4613      	mov	r3, r2
 8004c94:	005b      	lsls	r3, r3, #1
 8004c96:	4413      	add	r3, r2
 8004c98:	3b1e      	subs	r3, #30
 8004c9a:	051b      	lsls	r3, r3, #20
 8004c9c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004ca0:	430b      	orrs	r3, r1
 8004ca2:	683a      	ldr	r2, [r7, #0]
 8004ca4:	6892      	ldr	r2, [r2, #8]
 8004ca6:	4619      	mov	r1, r3
 8004ca8:	f7fe ffd6 	bl	8003c58 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8004cac:	683b      	ldr	r3, [r7, #0]
 8004cae:	681a      	ldr	r2, [r3, #0]
 8004cb0:	4b3f      	ldr	r3, [pc, #252]	; (8004db0 <HAL_ADC_ConfigChannel+0x7bc>)
 8004cb2:	4013      	ands	r3, r2
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d071      	beq.n	8004d9c <HAL_ADC_ConfigChannel+0x7a8>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004cb8:	483e      	ldr	r0, [pc, #248]	; (8004db4 <HAL_ADC_ConfigChannel+0x7c0>)
 8004cba:	f7fe fecf 	bl	8003a5c <LL_ADC_GetCommonPathInternalCh>
 8004cbe:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8004cc2:	683b      	ldr	r3, [r7, #0]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	4a3c      	ldr	r2, [pc, #240]	; (8004db8 <HAL_ADC_ConfigChannel+0x7c4>)
 8004cc8:	4293      	cmp	r3, r2
 8004cca:	d004      	beq.n	8004cd6 <HAL_ADC_ConfigChannel+0x6e2>
 8004ccc:	683b      	ldr	r3, [r7, #0]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	4a3a      	ldr	r2, [pc, #232]	; (8004dbc <HAL_ADC_ConfigChannel+0x7c8>)
 8004cd2:	4293      	cmp	r3, r2
 8004cd4:	d127      	bne.n	8004d26 <HAL_ADC_ConfigChannel+0x732>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8004cd6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004cda:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d121      	bne.n	8004d26 <HAL_ADC_ConfigChannel+0x732>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004cea:	d157      	bne.n	8004d9c <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004cec:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004cf0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004cf4:	4619      	mov	r1, r3
 8004cf6:	482f      	ldr	r0, [pc, #188]	; (8004db4 <HAL_ADC_ConfigChannel+0x7c0>)
 8004cf8:	f7fe fe9d 	bl	8003a36 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004cfc:	4b30      	ldr	r3, [pc, #192]	; (8004dc0 <HAL_ADC_ConfigChannel+0x7cc>)
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	099b      	lsrs	r3, r3, #6
 8004d02:	4a30      	ldr	r2, [pc, #192]	; (8004dc4 <HAL_ADC_ConfigChannel+0x7d0>)
 8004d04:	fba2 2303 	umull	r2, r3, r2, r3
 8004d08:	099b      	lsrs	r3, r3, #6
 8004d0a:	1c5a      	adds	r2, r3, #1
 8004d0c:	4613      	mov	r3, r2
 8004d0e:	005b      	lsls	r3, r3, #1
 8004d10:	4413      	add	r3, r2
 8004d12:	009b      	lsls	r3, r3, #2
 8004d14:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8004d16:	e002      	b.n	8004d1e <HAL_ADC_ConfigChannel+0x72a>
          {
            wait_loop_index--;
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	3b01      	subs	r3, #1
 8004d1c:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d1f9      	bne.n	8004d18 <HAL_ADC_ConfigChannel+0x724>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004d24:	e03a      	b.n	8004d9c <HAL_ADC_ConfigChannel+0x7a8>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8004d26:	683b      	ldr	r3, [r7, #0]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	4a27      	ldr	r2, [pc, #156]	; (8004dc8 <HAL_ADC_ConfigChannel+0x7d4>)
 8004d2c:	4293      	cmp	r3, r2
 8004d2e:	d113      	bne.n	8004d58 <HAL_ADC_ConfigChannel+0x764>
 8004d30:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004d34:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d10d      	bne.n	8004d58 <HAL_ADC_ConfigChannel+0x764>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	4a22      	ldr	r2, [pc, #136]	; (8004dcc <HAL_ADC_ConfigChannel+0x7d8>)
 8004d42:	4293      	cmp	r3, r2
 8004d44:	d02a      	beq.n	8004d9c <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004d46:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004d4a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004d4e:	4619      	mov	r1, r3
 8004d50:	4818      	ldr	r0, [pc, #96]	; (8004db4 <HAL_ADC_ConfigChannel+0x7c0>)
 8004d52:	f7fe fe70 	bl	8003a36 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004d56:	e021      	b.n	8004d9c <HAL_ADC_ConfigChannel+0x7a8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8004d58:	683b      	ldr	r3, [r7, #0]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	4a1c      	ldr	r2, [pc, #112]	; (8004dd0 <HAL_ADC_ConfigChannel+0x7dc>)
 8004d5e:	4293      	cmp	r3, r2
 8004d60:	d11c      	bne.n	8004d9c <HAL_ADC_ConfigChannel+0x7a8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8004d62:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004d66:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d116      	bne.n	8004d9c <HAL_ADC_ConfigChannel+0x7a8>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	4a16      	ldr	r2, [pc, #88]	; (8004dcc <HAL_ADC_ConfigChannel+0x7d8>)
 8004d74:	4293      	cmp	r3, r2
 8004d76:	d011      	beq.n	8004d9c <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004d78:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004d7c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004d80:	4619      	mov	r1, r3
 8004d82:	480c      	ldr	r0, [pc, #48]	; (8004db4 <HAL_ADC_ConfigChannel+0x7c0>)
 8004d84:	f7fe fe57 	bl	8003a36 <LL_ADC_SetCommonPathInternalCh>
 8004d88:	e008      	b.n	8004d9c <HAL_ADC_ConfigChannel+0x7a8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004d8e:	f043 0220 	orr.w	r2, r3, #32
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8004d96:	2301      	movs	r3, #1
 8004d98:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	2200      	movs	r2, #0
 8004da0:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8004da4:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8004da8:	4618      	mov	r0, r3
 8004daa:	37d8      	adds	r7, #216	; 0xd8
 8004dac:	46bd      	mov	sp, r7
 8004dae:	bd80      	pop	{r7, pc}
 8004db0:	80080000 	.word	0x80080000
 8004db4:	50000300 	.word	0x50000300
 8004db8:	c3210000 	.word	0xc3210000
 8004dbc:	90c00010 	.word	0x90c00010
 8004dc0:	2000003c 	.word	0x2000003c
 8004dc4:	053e2d63 	.word	0x053e2d63
 8004dc8:	c7520000 	.word	0xc7520000
 8004dcc:	50000100 	.word	0x50000100
 8004dd0:	cb840000 	.word	0xcb840000

08004dd4 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8004dd4:	b580      	push	{r7, lr}
 8004dd6:	b084      	sub	sp, #16
 8004dd8:	af00      	add	r7, sp, #0
 8004dda:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	4618      	mov	r0, r3
 8004de2:	f7ff f80b 	bl	8003dfc <LL_ADC_IsEnabled>
 8004de6:	4603      	mov	r3, r0
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d14d      	bne.n	8004e88 <ADC_Enable+0xb4>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	689a      	ldr	r2, [r3, #8]
 8004df2:	4b28      	ldr	r3, [pc, #160]	; (8004e94 <ADC_Enable+0xc0>)
 8004df4:	4013      	ands	r3, r2
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d00d      	beq.n	8004e16 <ADC_Enable+0x42>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004dfe:	f043 0210 	orr.w	r2, r3, #16
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004e0a:	f043 0201 	orr.w	r2, r3, #1
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 8004e12:	2301      	movs	r3, #1
 8004e14:	e039      	b.n	8004e8a <ADC_Enable+0xb6>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	4618      	mov	r0, r3
 8004e1c:	f7fe ffda 	bl	8003dd4 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8004e20:	f7fe fdc8 	bl	80039b4 <HAL_GetTick>
 8004e24:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004e26:	e028      	b.n	8004e7a <ADC_Enable+0xa6>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	4618      	mov	r0, r3
 8004e2e:	f7fe ffe5 	bl	8003dfc <LL_ADC_IsEnabled>
 8004e32:	4603      	mov	r3, r0
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d104      	bne.n	8004e42 <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	4618      	mov	r0, r3
 8004e3e:	f7fe ffc9 	bl	8003dd4 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8004e42:	f7fe fdb7 	bl	80039b4 <HAL_GetTick>
 8004e46:	4602      	mov	r2, r0
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	1ad3      	subs	r3, r2, r3
 8004e4c:	2b02      	cmp	r3, #2
 8004e4e:	d914      	bls.n	8004e7a <ADC_Enable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	f003 0301 	and.w	r3, r3, #1
 8004e5a:	2b01      	cmp	r3, #1
 8004e5c:	d00d      	beq.n	8004e7a <ADC_Enable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004e62:	f043 0210 	orr.w	r2, r3, #16
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004e6e:	f043 0201 	orr.w	r2, r3, #1
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 8004e76:	2301      	movs	r3, #1
 8004e78:	e007      	b.n	8004e8a <ADC_Enable+0xb6>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	f003 0301 	and.w	r3, r3, #1
 8004e84:	2b01      	cmp	r3, #1
 8004e86:	d1cf      	bne.n	8004e28 <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8004e88:	2300      	movs	r3, #0
}
 8004e8a:	4618      	mov	r0, r3
 8004e8c:	3710      	adds	r7, #16
 8004e8e:	46bd      	mov	sp, r7
 8004e90:	bd80      	pop	{r7, pc}
 8004e92:	bf00      	nop
 8004e94:	8000003f 	.word	0x8000003f

08004e98 <LL_ADC_SetCommonPathInternalCh>:
{
 8004e98:	b480      	push	{r7}
 8004e9a:	b083      	sub	sp, #12
 8004e9c:	af00      	add	r7, sp, #0
 8004e9e:	6078      	str	r0, [r7, #4]
 8004ea0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	689b      	ldr	r3, [r3, #8]
 8004ea6:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8004eaa:	683b      	ldr	r3, [r7, #0]
 8004eac:	431a      	orrs	r2, r3
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	609a      	str	r2, [r3, #8]
}
 8004eb2:	bf00      	nop
 8004eb4:	370c      	adds	r7, #12
 8004eb6:	46bd      	mov	sp, r7
 8004eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ebc:	4770      	bx	lr

08004ebe <LL_ADC_GetCommonPathInternalCh>:
{
 8004ebe:	b480      	push	{r7}
 8004ec0:	b083      	sub	sp, #12
 8004ec2:	af00      	add	r7, sp, #0
 8004ec4:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	689b      	ldr	r3, [r3, #8]
 8004eca:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8004ece:	4618      	mov	r0, r3
 8004ed0:	370c      	adds	r7, #12
 8004ed2:	46bd      	mov	sp, r7
 8004ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ed8:	4770      	bx	lr
	...

08004edc <LL_ADC_SetOffset>:
{
 8004edc:	b480      	push	{r7}
 8004ede:	b087      	sub	sp, #28
 8004ee0:	af00      	add	r7, sp, #0
 8004ee2:	60f8      	str	r0, [r7, #12]
 8004ee4:	60b9      	str	r1, [r7, #8]
 8004ee6:	607a      	str	r2, [r7, #4]
 8004ee8:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	3360      	adds	r3, #96	; 0x60
 8004eee:	461a      	mov	r2, r3
 8004ef0:	68bb      	ldr	r3, [r7, #8]
 8004ef2:	009b      	lsls	r3, r3, #2
 8004ef4:	4413      	add	r3, r2
 8004ef6:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg,
 8004ef8:	697b      	ldr	r3, [r7, #20]
 8004efa:	681a      	ldr	r2, [r3, #0]
 8004efc:	4b08      	ldr	r3, [pc, #32]	; (8004f20 <LL_ADC_SetOffset+0x44>)
 8004efe:	4013      	ands	r3, r2
 8004f00:	687a      	ldr	r2, [r7, #4]
 8004f02:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8004f06:	683a      	ldr	r2, [r7, #0]
 8004f08:	430a      	orrs	r2, r1
 8004f0a:	4313      	orrs	r3, r2
 8004f0c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8004f10:	697b      	ldr	r3, [r7, #20]
 8004f12:	601a      	str	r2, [r3, #0]
}
 8004f14:	bf00      	nop
 8004f16:	371c      	adds	r7, #28
 8004f18:	46bd      	mov	sp, r7
 8004f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f1e:	4770      	bx	lr
 8004f20:	03fff000 	.word	0x03fff000

08004f24 <LL_ADC_GetOffsetChannel>:
{
 8004f24:	b480      	push	{r7}
 8004f26:	b085      	sub	sp, #20
 8004f28:	af00      	add	r7, sp, #0
 8004f2a:	6078      	str	r0, [r7, #4]
 8004f2c:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	3360      	adds	r3, #96	; 0x60
 8004f32:	461a      	mov	r2, r3
 8004f34:	683b      	ldr	r3, [r7, #0]
 8004f36:	009b      	lsls	r3, r3, #2
 8004f38:	4413      	add	r3, r2
 8004f3a:	60fb      	str	r3, [r7, #12]
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8004f44:	4618      	mov	r0, r3
 8004f46:	3714      	adds	r7, #20
 8004f48:	46bd      	mov	sp, r7
 8004f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f4e:	4770      	bx	lr

08004f50 <LL_ADC_SetOffsetState>:
{
 8004f50:	b480      	push	{r7}
 8004f52:	b087      	sub	sp, #28
 8004f54:	af00      	add	r7, sp, #0
 8004f56:	60f8      	str	r0, [r7, #12]
 8004f58:	60b9      	str	r1, [r7, #8]
 8004f5a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	3360      	adds	r3, #96	; 0x60
 8004f60:	461a      	mov	r2, r3
 8004f62:	68bb      	ldr	r3, [r7, #8]
 8004f64:	009b      	lsls	r3, r3, #2
 8004f66:	4413      	add	r3, r2
 8004f68:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg,
 8004f6a:	697b      	ldr	r3, [r7, #20]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	431a      	orrs	r2, r3
 8004f76:	697b      	ldr	r3, [r7, #20]
 8004f78:	601a      	str	r2, [r3, #0]
}
 8004f7a:	bf00      	nop
 8004f7c:	371c      	adds	r7, #28
 8004f7e:	46bd      	mov	sp, r7
 8004f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f84:	4770      	bx	lr

08004f86 <LL_ADC_SetOffsetSign>:
{
 8004f86:	b480      	push	{r7}
 8004f88:	b087      	sub	sp, #28
 8004f8a:	af00      	add	r7, sp, #0
 8004f8c:	60f8      	str	r0, [r7, #12]
 8004f8e:	60b9      	str	r1, [r7, #8]
 8004f90:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	3360      	adds	r3, #96	; 0x60
 8004f96:	461a      	mov	r2, r3
 8004f98:	68bb      	ldr	r3, [r7, #8]
 8004f9a:	009b      	lsls	r3, r3, #2
 8004f9c:	4413      	add	r3, r2
 8004f9e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg,
 8004fa0:	697b      	ldr	r3, [r7, #20]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	431a      	orrs	r2, r3
 8004fac:	697b      	ldr	r3, [r7, #20]
 8004fae:	601a      	str	r2, [r3, #0]
}
 8004fb0:	bf00      	nop
 8004fb2:	371c      	adds	r7, #28
 8004fb4:	46bd      	mov	sp, r7
 8004fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fba:	4770      	bx	lr

08004fbc <LL_ADC_SetOffsetSaturation>:
{
 8004fbc:	b480      	push	{r7}
 8004fbe:	b087      	sub	sp, #28
 8004fc0:	af00      	add	r7, sp, #0
 8004fc2:	60f8      	str	r0, [r7, #12]
 8004fc4:	60b9      	str	r1, [r7, #8]
 8004fc6:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	3360      	adds	r3, #96	; 0x60
 8004fcc:	461a      	mov	r2, r3
 8004fce:	68bb      	ldr	r3, [r7, #8]
 8004fd0:	009b      	lsls	r3, r3, #2
 8004fd2:	4413      	add	r3, r2
 8004fd4:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg,
 8004fd6:	697b      	ldr	r3, [r7, #20]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	431a      	orrs	r2, r3
 8004fe2:	697b      	ldr	r3, [r7, #20]
 8004fe4:	601a      	str	r2, [r3, #0]
}
 8004fe6:	bf00      	nop
 8004fe8:	371c      	adds	r7, #28
 8004fea:	46bd      	mov	sp, r7
 8004fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ff0:	4770      	bx	lr

08004ff2 <LL_ADC_SetSamplingTimeCommonConfig>:
{
 8004ff2:	b480      	push	{r7}
 8004ff4:	b083      	sub	sp, #12
 8004ff6:	af00      	add	r7, sp, #0
 8004ff8:	6078      	str	r0, [r7, #4]
 8004ffa:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	695b      	ldr	r3, [r3, #20]
 8005000:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8005004:	683b      	ldr	r3, [r7, #0]
 8005006:	431a      	orrs	r2, r3
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	615a      	str	r2, [r3, #20]
}
 800500c:	bf00      	nop
 800500e:	370c      	adds	r7, #12
 8005010:	46bd      	mov	sp, r7
 8005012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005016:	4770      	bx	lr

08005018 <LL_ADC_INJ_GetTrigAuto>:
{
 8005018:	b480      	push	{r7}
 800501a:	b083      	sub	sp, #12
 800501c:	af00      	add	r7, sp, #0
 800501e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCx->CFGR, ADC_CFGR_JAUTO));
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	68db      	ldr	r3, [r3, #12]
 8005024:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
}
 8005028:	4618      	mov	r0, r3
 800502a:	370c      	adds	r7, #12
 800502c:	46bd      	mov	sp, r7
 800502e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005032:	4770      	bx	lr

08005034 <LL_ADC_SetChannelSamplingTime>:
{
 8005034:	b480      	push	{r7}
 8005036:	b087      	sub	sp, #28
 8005038:	af00      	add	r7, sp, #0
 800503a:	60f8      	str	r0, [r7, #12]
 800503c:	60b9      	str	r1, [r7, #8]
 800503e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	3314      	adds	r3, #20
 8005044:	461a      	mov	r2, r3
 8005046:	68bb      	ldr	r3, [r7, #8]
 8005048:	0e5b      	lsrs	r3, r3, #25
 800504a:	009b      	lsls	r3, r3, #2
 800504c:	f003 0304 	and.w	r3, r3, #4
 8005050:	4413      	add	r3, r2
 8005052:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg,
 8005054:	697b      	ldr	r3, [r7, #20]
 8005056:	681a      	ldr	r2, [r3, #0]
 8005058:	68bb      	ldr	r3, [r7, #8]
 800505a:	0d1b      	lsrs	r3, r3, #20
 800505c:	f003 031f 	and.w	r3, r3, #31
 8005060:	2107      	movs	r1, #7
 8005062:	fa01 f303 	lsl.w	r3, r1, r3
 8005066:	43db      	mvns	r3, r3
 8005068:	401a      	ands	r2, r3
 800506a:	68bb      	ldr	r3, [r7, #8]
 800506c:	0d1b      	lsrs	r3, r3, #20
 800506e:	f003 031f 	and.w	r3, r3, #31
 8005072:	6879      	ldr	r1, [r7, #4]
 8005074:	fa01 f303 	lsl.w	r3, r1, r3
 8005078:	431a      	orrs	r2, r3
 800507a:	697b      	ldr	r3, [r7, #20]
 800507c:	601a      	str	r2, [r3, #0]
}
 800507e:	bf00      	nop
 8005080:	371c      	adds	r7, #28
 8005082:	46bd      	mov	sp, r7
 8005084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005088:	4770      	bx	lr
	...

0800508c <LL_ADC_SetChannelSingleDiff>:
{
 800508c:	b480      	push	{r7}
 800508e:	b085      	sub	sp, #20
 8005090:	af00      	add	r7, sp, #0
 8005092:	60f8      	str	r0, [r7, #12]
 8005094:	60b9      	str	r1, [r7, #8]
 8005096:	607a      	str	r2, [r7, #4]
  if (SingleDiff == LL_ADC_DIFFERENTIAL_ENDED)
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	4a0f      	ldr	r2, [pc, #60]	; (80050d8 <LL_ADC_SetChannelSingleDiff+0x4c>)
 800509c:	4293      	cmp	r3, r2
 800509e:	d10a      	bne.n	80050b6 <LL_ADC_SetChannelSingleDiff+0x2a>
    SET_BIT(ADCx->DIFSEL,
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80050a6:	68bb      	ldr	r3, [r7, #8]
 80050a8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80050ac:	431a      	orrs	r2, r3
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
 80050b4:	e00a      	b.n	80050cc <LL_ADC_SetChannelSingleDiff+0x40>
    CLEAR_BIT(ADCx->DIFSEL,
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80050bc:	68bb      	ldr	r3, [r7, #8]
 80050be:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80050c2:	43db      	mvns	r3, r3
 80050c4:	401a      	ands	r2, r3
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
 80050cc:	bf00      	nop
 80050ce:	3714      	adds	r7, #20
 80050d0:	46bd      	mov	sp, r7
 80050d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050d6:	4770      	bx	lr
 80050d8:	407f0000 	.word	0x407f0000

080050dc <LL_ADC_GetMultimode>:
{
 80050dc:	b480      	push	{r7}
 80050de:	b083      	sub	sp, #12
 80050e0:	af00      	add	r7, sp, #0
 80050e2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	689b      	ldr	r3, [r3, #8]
 80050e8:	f003 031f 	and.w	r3, r3, #31
}
 80050ec:	4618      	mov	r0, r3
 80050ee:	370c      	adds	r7, #12
 80050f0:	46bd      	mov	sp, r7
 80050f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050f6:	4770      	bx	lr

080050f8 <LL_ADC_IsEnabled>:
{
 80050f8:	b480      	push	{r7}
 80050fa:	b083      	sub	sp, #12
 80050fc:	af00      	add	r7, sp, #0
 80050fe:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	689b      	ldr	r3, [r3, #8]
 8005104:	f003 0301 	and.w	r3, r3, #1
 8005108:	2b01      	cmp	r3, #1
 800510a:	d101      	bne.n	8005110 <LL_ADC_IsEnabled+0x18>
 800510c:	2301      	movs	r3, #1
 800510e:	e000      	b.n	8005112 <LL_ADC_IsEnabled+0x1a>
 8005110:	2300      	movs	r3, #0
}
 8005112:	4618      	mov	r0, r3
 8005114:	370c      	adds	r7, #12
 8005116:	46bd      	mov	sp, r7
 8005118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800511c:	4770      	bx	lr

0800511e <LL_ADC_REG_IsConversionOngoing>:
{
 800511e:	b480      	push	{r7}
 8005120:	b083      	sub	sp, #12
 8005122:	af00      	add	r7, sp, #0
 8005124:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	689b      	ldr	r3, [r3, #8]
 800512a:	f003 0304 	and.w	r3, r3, #4
 800512e:	2b04      	cmp	r3, #4
 8005130:	d101      	bne.n	8005136 <LL_ADC_REG_IsConversionOngoing+0x18>
 8005132:	2301      	movs	r3, #1
 8005134:	e000      	b.n	8005138 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8005136:	2300      	movs	r3, #0
}
 8005138:	4618      	mov	r0, r3
 800513a:	370c      	adds	r7, #12
 800513c:	46bd      	mov	sp, r7
 800513e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005142:	4770      	bx	lr

08005144 <LL_ADC_INJ_StartConversion>:
{
 8005144:	b480      	push	{r7}
 8005146:	b083      	sub	sp, #12
 8005148:	af00      	add	r7, sp, #0
 800514a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	689b      	ldr	r3, [r3, #8]
 8005150:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005154:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8005158:	f043 0208 	orr.w	r2, r3, #8
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	609a      	str	r2, [r3, #8]
}
 8005160:	bf00      	nop
 8005162:	370c      	adds	r7, #12
 8005164:	46bd      	mov	sp, r7
 8005166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800516a:	4770      	bx	lr

0800516c <LL_ADC_INJ_IsConversionOngoing>:
{
 800516c:	b480      	push	{r7}
 800516e:	b083      	sub	sp, #12
 8005170:	af00      	add	r7, sp, #0
 8005172:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	689b      	ldr	r3, [r3, #8]
 8005178:	f003 0308 	and.w	r3, r3, #8
 800517c:	2b08      	cmp	r3, #8
 800517e:	d101      	bne.n	8005184 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8005180:	2301      	movs	r3, #1
 8005182:	e000      	b.n	8005186 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8005184:	2300      	movs	r3, #0
}
 8005186:	4618      	mov	r0, r3
 8005188:	370c      	adds	r7, #12
 800518a:	46bd      	mov	sp, r7
 800518c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005190:	4770      	bx	lr
	...

08005194 <HAL_ADCEx_InjectedStart_IT>:
  *         For ADC master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedStart_IT(ADC_HandleTypeDef *hadc)
{
 8005194:	b580      	push	{r7, lr}
 8005196:	b086      	sub	sp, #24
 8005198:	af00      	add	r7, sp, #0
 800519a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  uint32_t tmp_config_injected_queue;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800519c:	486e      	ldr	r0, [pc, #440]	; (8005358 <HAL_ADCEx_InjectedStart_IT+0x1c4>)
 800519e:	f7ff ff9d 	bl	80050dc <LL_ADC_GetMultimode>
 80051a2:	6178      	str	r0, [r7, #20]
#endif

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	4618      	mov	r0, r3
 80051aa:	f7ff ffdf 	bl	800516c <LL_ADC_INJ_IsConversionOngoing>
 80051ae:	4603      	mov	r3, r0
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d001      	beq.n	80051b8 <HAL_ADCEx_InjectedStart_IT+0x24>
  {
    return HAL_BUSY;
 80051b4:	2302      	movs	r3, #2
 80051b6:	e0ca      	b.n	800534e <HAL_ADCEx_InjectedStart_IT+0x1ba>
       If JQDIS is not set at that point, returns an error
       - since software trigger detection is disabled. User needs to
       resort to HAL_ADCEx_DisableInjectedQueue() API to set JQDIS.
       - or (if JQDIS is intentionally reset) since JEXTEN = 0 which means
         the queue is empty */
    tmp_config_injected_queue = READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JQDIS);
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	68db      	ldr	r3, [r3, #12]
 80051be:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80051c2:	613b      	str	r3, [r7, #16]

    if ((READ_BIT(hadc->Instance->JSQR, ADC_JSQR_JEXTEN) == 0UL)
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80051ca:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d10a      	bne.n	80051e8 <HAL_ADCEx_InjectedStart_IT+0x54>
        && (tmp_config_injected_queue == 0UL)
 80051d2:	693b      	ldr	r3, [r7, #16]
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	d107      	bne.n	80051e8 <HAL_ADCEx_InjectedStart_IT+0x54>
       )
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80051dc:	f043 0220 	orr.w	r2, r3, #32
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	65da      	str	r2, [r3, #92]	; 0x5c
      return HAL_ERROR;
 80051e4:	2301      	movs	r3, #1
 80051e6:	e0b2      	b.n	800534e <HAL_ADCEx_InjectedStart_IT+0x1ba>
    }

    /* Process locked */
    __HAL_LOCK(hadc);
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80051ee:	2b01      	cmp	r3, #1
 80051f0:	d101      	bne.n	80051f6 <HAL_ADCEx_InjectedStart_IT+0x62>
 80051f2:	2302      	movs	r3, #2
 80051f4:	e0ab      	b.n	800534e <HAL_ADCEx_InjectedStart_IT+0x1ba>
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	2201      	movs	r2, #1
 80051fa:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80051fe:	6878      	ldr	r0, [r7, #4]
 8005200:	f7ff fde8 	bl	8004dd4 <ADC_Enable>
 8005204:	4603      	mov	r3, r0
 8005206:	73fb      	strb	r3, [r7, #15]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8005208:	7bfb      	ldrb	r3, [r7, #15]
 800520a:	2b00      	cmp	r3, #0
 800520c:	f040 809a 	bne.w	8005344 <HAL_ADCEx_InjectedStart_IT+0x1b0>
    {
      /* Check if a regular conversion is ongoing */
      if ((hadc->State & HAL_ADC_STATE_REG_BUSY) != 0UL)
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005214:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005218:	2b00      	cmp	r3, #0
 800521a:	d006      	beq.n	800522a <HAL_ADCEx_InjectedStart_IT+0x96>
      {
        /* Reset ADC error code field related to injected conversions only */
        CLEAR_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005220:	f023 0208 	bic.w	r2, r3, #8
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	661a      	str	r2, [r3, #96]	; 0x60
 8005228:	e002      	b.n	8005230 <HAL_ADCEx_InjectedStart_IT+0x9c>
      }
      else
      {
        /* Set ADC error code to none */
        ADC_CLEAR_ERRORCODE(hadc);
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	2200      	movs	r2, #0
 800522e:	661a      	str	r2, [r3, #96]	; 0x60
      }

      /* Set ADC state                                                        */
      /* - Clear state bitfield related to injected group conversion results  */
      /* - Set state bitfield related to injected operation                   */
      ADC_STATE_CLR_SET(hadc->State,
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005234:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8005238:	f023 0301 	bic.w	r3, r3, #1
 800523c:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	65da      	str	r2, [r3, #92]	; 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	4a44      	ldr	r2, [pc, #272]	; (800535c <HAL_ADCEx_InjectedStart_IT+0x1c8>)
 800524a:	4293      	cmp	r3, r2
 800524c:	d002      	beq.n	8005254 <HAL_ADCEx_InjectedStart_IT+0xc0>
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	e001      	b.n	8005258 <HAL_ADCEx_InjectedStart_IT+0xc4>
 8005254:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8005258:	687a      	ldr	r2, [r7, #4]
 800525a:	6812      	ldr	r2, [r2, #0]
 800525c:	4293      	cmp	r3, r2
 800525e:	d002      	beq.n	8005266 <HAL_ADCEx_InjectedStart_IT+0xd2>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8005260:	697b      	ldr	r3, [r7, #20]
 8005262:	2b00      	cmp	r3, #0
 8005264:	d105      	bne.n	8005272 <HAL_ADCEx_InjectedStart_IT+0xde>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800526a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	65da      	str	r2, [r3, #92]	; 0x5c
      }
#endif

      /* Clear ADC group injected group conversion flag */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JEOC | ADC_FLAG_JEOS));
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	2260      	movs	r2, #96	; 0x60
 8005278:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	2200      	movs	r2, #0
 800527e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

      /* Enable ADC Injected context queue overflow interrupt if this feature   */
      /* is enabled.                                                            */
      if ((hadc->Instance->CFGR & ADC_CFGR_JQM) != 0UL)
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	68db      	ldr	r3, [r3, #12]
 8005288:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800528c:	2b00      	cmp	r3, #0
 800528e:	d007      	beq.n	80052a0 <HAL_ADCEx_InjectedStart_IT+0x10c>
      {
        __HAL_ADC_ENABLE_IT(hadc, ADC_FLAG_JQOVF);
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	685a      	ldr	r2, [r3, #4]
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800529e:	605a      	str	r2, [r3, #4]
      }

      /* Enable ADC end of conversion interrupt */
      switch (hadc->Init.EOCSelection)
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	699b      	ldr	r3, [r3, #24]
 80052a4:	2b08      	cmp	r3, #8
 80052a6:	d110      	bne.n	80052ca <HAL_ADCEx_InjectedStart_IT+0x136>
      {
        case ADC_EOC_SEQ_CONV:
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	685a      	ldr	r2, [r3, #4]
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	f022 0220 	bic.w	r2, r2, #32
 80052b6:	605a      	str	r2, [r3, #4]
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOS);
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	685a      	ldr	r2, [r3, #4]
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80052c6:	605a      	str	r2, [r3, #4]
          break;
 80052c8:	e010      	b.n	80052ec <HAL_ADCEx_InjectedStart_IT+0x158>
        /* case ADC_EOC_SINGLE_CONV */
        default:
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOS);
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	685a      	ldr	r2, [r3, #4]
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80052d8:	605a      	str	r2, [r3, #4]
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	685a      	ldr	r2, [r3, #4]
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	f042 0220 	orr.w	r2, r2, #32
 80052e8:	605a      	str	r2, [r3, #4]
          break;
 80052ea:	bf00      	nop
      /*    - if multimode only concerns regular conversion, ADC is enabled     */
      /*     and conversion is started.                                         */
      /* If ADC is master or independent,                                       */
      /*    - ADC is enabled and conversion is started.                         */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	4a1a      	ldr	r2, [pc, #104]	; (800535c <HAL_ADCEx_InjectedStart_IT+0x1c8>)
 80052f2:	4293      	cmp	r3, r2
 80052f4:	d002      	beq.n	80052fc <HAL_ADCEx_InjectedStart_IT+0x168>
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	e001      	b.n	8005300 <HAL_ADCEx_InjectedStart_IT+0x16c>
 80052fc:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8005300:	687a      	ldr	r2, [r7, #4]
 8005302:	6812      	ldr	r2, [r2, #0]
 8005304:	4293      	cmp	r3, r2
 8005306:	d008      	beq.n	800531a <HAL_ADCEx_InjectedStart_IT+0x186>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8005308:	697b      	ldr	r3, [r7, #20]
 800530a:	2b00      	cmp	r3, #0
 800530c:	d005      	beq.n	800531a <HAL_ADCEx_InjectedStart_IT+0x186>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 800530e:	697b      	ldr	r3, [r7, #20]
 8005310:	2b06      	cmp	r3, #6
 8005312:	d002      	beq.n	800531a <HAL_ADCEx_InjectedStart_IT+0x186>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8005314:	697b      	ldr	r3, [r7, #20]
 8005316:	2b07      	cmp	r3, #7
 8005318:	d10d      	bne.n	8005336 <HAL_ADCEx_InjectedStart_IT+0x1a2>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode injected conversions enabled */
        if (LL_ADC_INJ_GetTrigAuto(hadc->Instance) == LL_ADC_INJ_TRIG_INDEPENDENT)
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	4618      	mov	r0, r3
 8005320:	f7ff fe7a 	bl	8005018 <LL_ADC_INJ_GetTrigAuto>
 8005324:	4603      	mov	r3, r0
 8005326:	2b00      	cmp	r3, #0
 8005328:	d110      	bne.n	800534c <HAL_ADCEx_InjectedStart_IT+0x1b8>
        {
          LL_ADC_INJ_StartConversion(hadc->Instance);
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	4618      	mov	r0, r3
 8005330:	f7ff ff08 	bl	8005144 <LL_ADC_INJ_StartConversion>
        if (LL_ADC_INJ_GetTrigAuto(hadc->Instance) == LL_ADC_INJ_TRIG_INDEPENDENT)
 8005334:	e00a      	b.n	800534c <HAL_ADCEx_InjectedStart_IT+0x1b8>
        }
      }
      else
      {
        /* ADC instance is not a multimode slave instance with multimode injected conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800533a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	65da      	str	r2, [r3, #92]	; 0x5c
 8005342:	e003      	b.n	800534c <HAL_ADCEx_InjectedStart_IT+0x1b8>

    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	2200      	movs	r2, #0
 8005348:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
    }

    /* Return function status */
    return tmp_hal_status;
 800534c:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 800534e:	4618      	mov	r0, r3
 8005350:	3718      	adds	r7, #24
 8005352:	46bd      	mov	sp, r7
 8005354:	bd80      	pop	{r7, pc}
 8005356:	bf00      	nop
 8005358:	50000300 	.word	0x50000300
 800535c:	50000100 	.word	0x50000100

08005360 <HAL_ADCEx_InjectedGetValue>:
  *            @arg @ref ADC_INJECTED_RANK_3 ADC group injected rank 3
  *            @arg @ref ADC_INJECTED_RANK_4 ADC group injected rank 4
  * @retval ADC group injected conversion data
  */
uint32_t HAL_ADCEx_InjectedGetValue(ADC_HandleTypeDef *hadc, uint32_t InjectedRank)
{
 8005360:	b480      	push	{r7}
 8005362:	b085      	sub	sp, #20
 8005364:	af00      	add	r7, sp, #0
 8005366:	6078      	str	r0, [r7, #4]
 8005368:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_INJECTED_RANK(InjectedRank));

  /* Get ADC converted value */
  switch (InjectedRank)
 800536a:	683b      	ldr	r3, [r7, #0]
 800536c:	f240 321b 	movw	r2, #795	; 0x31b
 8005370:	4293      	cmp	r3, r2
 8005372:	d00e      	beq.n	8005392 <HAL_ADCEx_InjectedGetValue+0x32>
 8005374:	683b      	ldr	r3, [r7, #0]
 8005376:	f5b3 7f47 	cmp.w	r3, #796	; 0x31c
 800537a:	d21c      	bcs.n	80053b6 <HAL_ADCEx_InjectedGetValue+0x56>
 800537c:	683b      	ldr	r3, [r7, #0]
 800537e:	f240 120f 	movw	r2, #271	; 0x10f
 8005382:	4293      	cmp	r3, r2
 8005384:	d011      	beq.n	80053aa <HAL_ADCEx_InjectedGetValue+0x4a>
 8005386:	683b      	ldr	r3, [r7, #0]
 8005388:	f240 2215 	movw	r2, #533	; 0x215
 800538c:	4293      	cmp	r3, r2
 800538e:	d006      	beq.n	800539e <HAL_ADCEx_InjectedGetValue+0x3e>
 8005390:	e011      	b.n	80053b6 <HAL_ADCEx_InjectedGetValue+0x56>
  {
    case ADC_INJECTED_RANK_4:
      tmp_jdr = hadc->Instance->JDR4;
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800539a:	60fb      	str	r3, [r7, #12]
      break;
 800539c:	e011      	b.n	80053c2 <HAL_ADCEx_InjectedGetValue+0x62>
    case ADC_INJECTED_RANK_3:
      tmp_jdr = hadc->Instance->JDR3;
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80053a6:	60fb      	str	r3, [r7, #12]
      break;
 80053a8:	e00b      	b.n	80053c2 <HAL_ADCEx_InjectedGetValue+0x62>
    case ADC_INJECTED_RANK_2:
      tmp_jdr = hadc->Instance->JDR2;
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80053b2:	60fb      	str	r3, [r7, #12]
      break;
 80053b4:	e005      	b.n	80053c2 <HAL_ADCEx_InjectedGetValue+0x62>
    case ADC_INJECTED_RANK_1:
    default:
      tmp_jdr = hadc->Instance->JDR1;
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80053be:	60fb      	str	r3, [r7, #12]
      break;
 80053c0:	bf00      	nop
  }

  /* Return ADC converted value */
  return tmp_jdr;
 80053c2:	68fb      	ldr	r3, [r7, #12]
}
 80053c4:	4618      	mov	r0, r3
 80053c6:	3714      	adds	r7, #20
 80053c8:	46bd      	mov	sp, r7
 80053ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ce:	4770      	bx	lr

080053d0 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 80053d0:	b480      	push	{r7}
 80053d2:	b083      	sub	sp, #12
 80053d4:	af00      	add	r7, sp, #0
 80053d6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 80053d8:	bf00      	nop
 80053da:	370c      	adds	r7, #12
 80053dc:	46bd      	mov	sp, r7
 80053de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053e2:	4770      	bx	lr

080053e4 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 80053e4:	b480      	push	{r7}
 80053e6:	b083      	sub	sp, #12
 80053e8:	af00      	add	r7, sp, #0
 80053ea:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 80053ec:	bf00      	nop
 80053ee:	370c      	adds	r7, #12
 80053f0:	46bd      	mov	sp, r7
 80053f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053f6:	4770      	bx	lr

080053f8 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 80053f8:	b480      	push	{r7}
 80053fa:	b083      	sub	sp, #12
 80053fc:	af00      	add	r7, sp, #0
 80053fe:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8005400:	bf00      	nop
 8005402:	370c      	adds	r7, #12
 8005404:	46bd      	mov	sp, r7
 8005406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800540a:	4770      	bx	lr

0800540c <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 800540c:	b480      	push	{r7}
 800540e:	b083      	sub	sp, #12
 8005410:	af00      	add	r7, sp, #0
 8005412:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8005414:	bf00      	nop
 8005416:	370c      	adds	r7, #12
 8005418:	46bd      	mov	sp, r7
 800541a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800541e:	4770      	bx	lr

08005420 <HAL_ADCEx_InjectedConfigChannel>:
  * @param sConfigInjected Structure of ADC injected group and ADC channel for
  *         injected group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedConfigChannel(ADC_HandleTypeDef *hadc, ADC_InjectionConfTypeDef *sConfigInjected)
{
 8005420:	b580      	push	{r7, lr}
 8005422:	b0b6      	sub	sp, #216	; 0xd8
 8005424:	af00      	add	r7, sp, #0
 8005426:	6078      	str	r0, [r7, #4]
 8005428:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800542a:	2300      	movs	r3, #0
 800542c:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0;
 8005430:	2300      	movs	r3, #0
 8005432:	60bb      	str	r3, [r7, #8]

  uint32_t tmp_JSQR_ContextQueueBeingBuilt = 0U;
 8005434:	2300      	movs	r3, #0
 8005436:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfigInjected->InjectedChannel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8005440:	2b01      	cmp	r3, #1
 8005442:	d102      	bne.n	800544a <HAL_ADCEx_InjectedConfigChannel+0x2a>
 8005444:	2302      	movs	r3, #2
 8005446:	f000 bcb5 	b.w	8005db4 <HAL_ADCEx_InjectedConfigChannel+0x994>
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	2201      	movs	r2, #1
 800544e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /*      injected channel rank. It is entered into queue only when all       */
  /*      injected ranks have been set.                                       */
  /*   Note: Scan mode is not present by hardware on this device, but used    */
  /*   by software for alignment over all STM32 devices.                      */

  if ((hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)  ||
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	695b      	ldr	r3, [r3, #20]
 8005456:	2b00      	cmp	r3, #0
 8005458:	d003      	beq.n	8005462 <HAL_ADCEx_InjectedConfigChannel+0x42>
      (sConfigInjected->InjectedNbrOfConversion == 1U))
 800545a:	683b      	ldr	r3, [r7, #0]
 800545c:	6a1b      	ldr	r3, [r3, #32]
  if ((hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)  ||
 800545e:	2b01      	cmp	r3, #1
 8005460:	d130      	bne.n	80054c4 <HAL_ADCEx_InjectedConfigChannel+0xa4>
    /*    (scan mode disabled, only rank 1 used)                              */
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - channel set to rank 1 (scan mode disabled, only rank 1 can be used) */

    if (sConfigInjected->InjectedRank == ADC_INJECTED_RANK_1)
 8005462:	683b      	ldr	r3, [r7, #0]
 8005464:	685b      	ldr	r3, [r3, #4]
 8005466:	2b09      	cmp	r3, #9
 8005468:	d179      	bne.n	800555e <HAL_ADCEx_InjectedConfigChannel+0x13e>
      /* Enable external trigger if trigger selection is different of         */
      /* software start.                                                      */
      /* Note: This configuration keeps the hardware feature of parameter     */
      /*       ExternalTrigInjecConvEdge "trigger edge none" equivalent to    */
      /*       software start.                                                */
      if (sConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 800546a:	683b      	ldr	r3, [r7, #0]
 800546c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800546e:	2b00      	cmp	r3, #0
 8005470:	d010      	beq.n	8005494 <HAL_ADCEx_InjectedConfigChannel+0x74>
      {
        tmp_JSQR_ContextQueueBeingBuilt = (ADC_JSQR_RK(sConfigInjected->InjectedChannel, ADC_INJECTED_RANK_1)
 8005472:	683b      	ldr	r3, [r7, #0]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	0e9b      	lsrs	r3, r3, #26
 8005478:	025b      	lsls	r3, r3, #9
 800547a:	f403 5278 	and.w	r2, r3, #15872	; 0x3e00
                                           | (sConfigInjected->ExternalTrigInjecConv & ADC_JSQR_JEXTSEL)
 800547e:	683b      	ldr	r3, [r7, #0]
 8005480:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005482:	f003 037c 	and.w	r3, r3, #124	; 0x7c
 8005486:	431a      	orrs	r2, r3
                                           | sConfigInjected->ExternalTrigInjecConvEdge
 8005488:	683b      	ldr	r3, [r7, #0]
 800548a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        tmp_JSQR_ContextQueueBeingBuilt = (ADC_JSQR_RK(sConfigInjected->InjectedChannel, ADC_INJECTED_RANK_1)
 800548c:	4313      	orrs	r3, r2
 800548e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005492:	e007      	b.n	80054a4 <HAL_ADCEx_InjectedConfigChannel+0x84>
                                          );
      }
      else
      {
        tmp_JSQR_ContextQueueBeingBuilt = (ADC_JSQR_RK(sConfigInjected->InjectedChannel, ADC_INJECTED_RANK_1));
 8005494:	683b      	ldr	r3, [r7, #0]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	0e9b      	lsrs	r3, r3, #26
 800549a:	025b      	lsls	r3, r3, #9
 800549c:	f403 5378 	and.w	r3, r3, #15872	; 0x3e00
 80054a0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
      }

      MODIFY_REG(hadc->Instance->JSQR, ADC_JSQR_FIELDS, tmp_JSQR_ContextQueueBeingBuilt);
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80054aa:	4b84      	ldr	r3, [pc, #528]	; (80056bc <HAL_ADCEx_InjectedConfigChannel+0x29c>)
 80054ac:	4013      	ands	r3, r2
 80054ae:	687a      	ldr	r2, [r7, #4]
 80054b0:	6812      	ldr	r2, [r2, #0]
 80054b2:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 80054b6:	430b      	orrs	r3, r1
 80054b8:	64d3      	str	r3, [r2, #76]	; 0x4c
      /* For debug and informative reasons, hadc handle saves JSQR setting */
      hadc->InjectionConfig.ContextQueue = tmp_JSQR_ContextQueueBeingBuilt;
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80054c0:	665a      	str	r2, [r3, #100]	; 0x64
    if (sConfigInjected->InjectedRank == ADC_INJECTED_RANK_1)
 80054c2:	e04c      	b.n	800555e <HAL_ADCEx_InjectedConfigChannel+0x13e>
    /* 1. Start new context and set parameters related to all injected        */
    /*    channels: injected sequence length and trigger.                     */

    /* if hadc->InjectionConfig.ChannelCount is equal to 0, this is the first */
    /*   call of the context under setting                                    */
    if (hadc->InjectionConfig.ChannelCount == 0U)
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d11d      	bne.n	8005508 <HAL_ADCEx_InjectedConfigChannel+0xe8>
    {
      /* Initialize number of channels that will be configured on the context */
      /*  being built                                                         */
      hadc->InjectionConfig.ChannelCount = sConfigInjected->InjectedNbrOfConversion;
 80054cc:	683b      	ldr	r3, [r7, #0]
 80054ce:	6a1a      	ldr	r2, [r3, #32]
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	669a      	str	r2, [r3, #104]	; 0x68
      /* Handle hadc saves the context under build up over each HAL_ADCEx_InjectedConfigChannel()
         call, this context will be written in JSQR register at the last call.
         At this point, the context is merely reset  */
      hadc->InjectionConfig.ContextQueue = 0x00000000U;
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	2200      	movs	r2, #0
 80054d8:	665a      	str	r2, [r3, #100]	; 0x64
      /* Enable external trigger if trigger selection is different of         */
      /* software start.                                                      */
      /* Note: This configuration keeps the hardware feature of parameter     */
      /*       ExternalTrigInjecConvEdge "trigger edge none" equivalent to    */
      /*       software start.                                                */
      if (sConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 80054da:	683b      	ldr	r3, [r7, #0]
 80054dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d00d      	beq.n	80054fe <HAL_ADCEx_InjectedConfigChannel+0xde>
      {
        tmp_JSQR_ContextQueueBeingBuilt = ((sConfigInjected->InjectedNbrOfConversion - 1U)
 80054e2:	683b      	ldr	r3, [r7, #0]
 80054e4:	6a1b      	ldr	r3, [r3, #32]
 80054e6:	1e5a      	subs	r2, r3, #1
                                           | (sConfigInjected->ExternalTrigInjecConv & ADC_JSQR_JEXTSEL)
 80054e8:	683b      	ldr	r3, [r7, #0]
 80054ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054ec:	f003 037c 	and.w	r3, r3, #124	; 0x7c
 80054f0:	431a      	orrs	r2, r3
                                           | sConfigInjected->ExternalTrigInjecConvEdge
 80054f2:	683b      	ldr	r3, [r7, #0]
 80054f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        tmp_JSQR_ContextQueueBeingBuilt = ((sConfigInjected->InjectedNbrOfConversion - 1U)
 80054f6:	4313      	orrs	r3, r2
 80054f8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80054fc:	e004      	b.n	8005508 <HAL_ADCEx_InjectedConfigChannel+0xe8>
                                          );
      }
      else
      {
        tmp_JSQR_ContextQueueBeingBuilt = ((sConfigInjected->InjectedNbrOfConversion - 1U));
 80054fe:	683b      	ldr	r3, [r7, #0]
 8005500:	6a1b      	ldr	r3, [r3, #32]
 8005502:	3b01      	subs	r3, #1
 8005504:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    /*    related to each channel: channel rank sequence                    */
    /* Clear the old JSQx bits for the selected rank */
    tmp_JSQR_ContextQueueBeingBuilt &= ~ADC_JSQR_RK(ADC_SQR3_SQ10, sConfigInjected->InjectedRank);

    /* Set the JSQx bits for the selected rank */
    tmp_JSQR_ContextQueueBeingBuilt |= ADC_JSQR_RK(sConfigInjected->InjectedChannel, sConfigInjected->InjectedRank);
 8005508:	683b      	ldr	r3, [r7, #0]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	0e9b      	lsrs	r3, r3, #26
 800550e:	f003 021f 	and.w	r2, r3, #31
 8005512:	683b      	ldr	r3, [r7, #0]
 8005514:	685b      	ldr	r3, [r3, #4]
 8005516:	f003 031f 	and.w	r3, r3, #31
 800551a:	fa02 f303 	lsl.w	r3, r2, r3
 800551e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8005522:	4313      	orrs	r3, r2
 8005524:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0

    /* Decrease channel count  */
    hadc->InjectionConfig.ChannelCount--;
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800552c:	1e5a      	subs	r2, r3, #1
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	669a      	str	r2, [r3, #104]	; 0x68

    /* 3. tmp_JSQR_ContextQueueBeingBuilt is fully built for this HAL_ADCEx_InjectedConfigChannel()
          call, aggregate the setting to those already built during the previous
          HAL_ADCEx_InjectedConfigChannel() calls (for the same context of course)  */
    hadc->InjectionConfig.ContextQueue |= tmp_JSQR_ContextQueueBeingBuilt;
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8005536:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800553a:	431a      	orrs	r2, r3
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	665a      	str	r2, [r3, #100]	; 0x64

    /* 4. End of context setting: if this is the last channel set, then write context
        into register JSQR and make it enter into queue                   */
    if (hadc->InjectionConfig.ChannelCount == 0U)
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005544:	2b00      	cmp	r3, #0
 8005546:	d10a      	bne.n	800555e <HAL_ADCEx_InjectedConfigChannel+0x13e>
    {
      MODIFY_REG(hadc->Instance->JSQR, ADC_JSQR_FIELDS, hadc->InjectionConfig.ContextQueue);
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800554e:	4b5b      	ldr	r3, [pc, #364]	; (80056bc <HAL_ADCEx_InjectedConfigChannel+0x29c>)
 8005550:	4013      	ands	r3, r2
 8005552:	687a      	ldr	r2, [r7, #4]
 8005554:	6e51      	ldr	r1, [r2, #100]	; 0x64
 8005556:	687a      	ldr	r2, [r7, #4]
 8005558:	6812      	ldr	r2, [r2, #0]
 800555a:	430b      	orrs	r3, r1
 800555c:	64d3      	str	r3, [r2, #76]	; 0x4c
  /* conversion on going on injected group:                                   */
  /*  - Injected context queue: Queue disable (active context is kept) or     */
  /*    enable (context decremented, up to 2 contexts queued)                 */
  /*  - Injected discontinuous mode: can be enabled only if auto-injected     */
  /*    mode is disabled.                                                     */
  if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	4618      	mov	r0, r3
 8005564:	f7ff fe02 	bl	800516c <LL_ADC_INJ_IsConversionOngoing>
 8005568:	4603      	mov	r3, r0
 800556a:	2b00      	cmp	r3, #0
 800556c:	d124      	bne.n	80055b8 <HAL_ADCEx_InjectedConfigChannel+0x198>
  {
    /* If auto-injected mode is disabled: no constraint                       */
    if (sConfigInjected->AutoInjectedConv == DISABLE)
 800556e:	683b      	ldr	r3, [r7, #0]
 8005570:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8005574:	2b00      	cmp	r3, #0
 8005576:	d112      	bne.n	800559e <HAL_ADCEx_InjectedConfigChannel+0x17e>
    {
      MODIFY_REG(hadc->Instance->CFGR,
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	68db      	ldr	r3, [r3, #12]
 800557e:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8005582:	683b      	ldr	r3, [r7, #0]
 8005584:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8005588:	055a      	lsls	r2, r3, #21
 800558a:	683b      	ldr	r3, [r7, #0]
 800558c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005590:	051b      	lsls	r3, r3, #20
 8005592:	431a      	orrs	r2, r3
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	430a      	orrs	r2, r1
 800559a:	60da      	str	r2, [r3, #12]
 800559c:	e00c      	b.n	80055b8 <HAL_ADCEx_InjectedConfigChannel+0x198>
    }
    /* If auto-injected mode is enabled: Injected discontinuous setting is    */
    /* discarded.                                                             */
    else
    {
      MODIFY_REG(hadc->Instance->CFGR,
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	68db      	ldr	r3, [r3, #12]
 80055a4:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 80055a8:	683b      	ldr	r3, [r7, #0]
 80055aa:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 80055ae:	055a      	lsls	r2, r3, #21
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	430a      	orrs	r2, r1
 80055b6:	60da      	str	r2, [r3, #12]
  /* conversion on going on regular and injected groups:                      */
  /*  - Automatic injected conversion: can be enabled if injected group       */
  /*    external triggers are disabled.                                       */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	4618      	mov	r0, r3
 80055be:	f7ff fdae 	bl	800511e <LL_ADC_REG_IsConversionOngoing>
 80055c2:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	4618      	mov	r0, r3
 80055cc:	f7ff fdce 	bl	800516c <LL_ADC_INJ_IsConversionOngoing>
 80055d0:	f8c7 00c8 	str.w	r0, [r7, #200]	; 0xc8

  if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80055d4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80055d8:	2b00      	cmp	r3, #0
 80055da:	f040 822e 	bne.w	8005a3a <HAL_ADCEx_InjectedConfigChannel+0x61a>
      && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80055de:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	f040 8229 	bne.w	8005a3a <HAL_ADCEx_InjectedConfigChannel+0x61a>
     )
  {
    /* If injected group external triggers are disabled (set to injected      */
    /* software start): no constraint                                         */
    if ((sConfigInjected->ExternalTrigInjecConv == ADC_INJECTED_SOFTWARE_START)
 80055e8:	683b      	ldr	r3, [r7, #0]
 80055ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d003      	beq.n	80055f8 <HAL_ADCEx_InjectedConfigChannel+0x1d8>
        || (sConfigInjected->ExternalTrigInjecConvEdge == ADC_EXTERNALTRIGINJECCONV_EDGE_NONE))
 80055f0:	683b      	ldr	r3, [r7, #0]
 80055f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d116      	bne.n	8005626 <HAL_ADCEx_InjectedConfigChannel+0x206>
    {
      if (sConfigInjected->AutoInjectedConv == ENABLE)
 80055f8:	683b      	ldr	r3, [r7, #0]
 80055fa:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80055fe:	2b01      	cmp	r3, #1
 8005600:	d108      	bne.n	8005614 <HAL_ADCEx_InjectedConfigChannel+0x1f4>
      {
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO);
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	68da      	ldr	r2, [r3, #12]
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 8005610:	60da      	str	r2, [r3, #12]
      if (sConfigInjected->AutoInjectedConv == ENABLE)
 8005612:	e01f      	b.n	8005654 <HAL_ADCEx_InjectedConfigChannel+0x234>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO);
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	68da      	ldr	r2, [r3, #12]
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	f022 7200 	bic.w	r2, r2, #33554432	; 0x2000000
 8005622:	60da      	str	r2, [r3, #12]
      if (sConfigInjected->AutoInjectedConv == ENABLE)
 8005624:	e016      	b.n	8005654 <HAL_ADCEx_InjectedConfigChannel+0x234>
    }
    /* If Automatic injected conversion was intended to be set and could not  */
    /* due to injected group external triggers enabled, error is reported.    */
    else
    {
      if (sConfigInjected->AutoInjectedConv == ENABLE)
 8005626:	683b      	ldr	r3, [r7, #0]
 8005628:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800562c:	2b01      	cmp	r3, #1
 800562e:	d109      	bne.n	8005644 <HAL_ADCEx_InjectedConfigChannel+0x224>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005634:	f043 0220 	orr.w	r2, r3, #32
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	65da      	str	r2, [r3, #92]	; 0x5c

        tmp_hal_status = HAL_ERROR;
 800563c:	2301      	movs	r3, #1
 800563e:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 8005642:	e007      	b.n	8005654 <HAL_ADCEx_InjectedConfigChannel+0x234>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO);
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	68da      	ldr	r2, [r3, #12]
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	f022 7200 	bic.w	r2, r2, #33554432	; 0x2000000
 8005652:	60da      	str	r2, [r3, #12]
      }
    }

    if (sConfigInjected->InjecOversamplingMode == ENABLE)
 8005654:	683b      	ldr	r3, [r7, #0]
 8005656:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800565a:	2b01      	cmp	r3, #1
 800565c:	d110      	bne.n	8005680 <HAL_ADCEx_InjectedConfigChannel+0x260>
      /* Configuration of Injected Oversampler:                                 */
      /*  - Oversampling Ratio                                                  */
      /*  - Right bit shift                                                     */

      /* Enable OverSampling mode */
      MODIFY_REG(hadc->Instance->CFGR2,
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	691b      	ldr	r3, [r3, #16]
 8005664:	f423 72ff 	bic.w	r2, r3, #510	; 0x1fe
 8005668:	683b      	ldr	r3, [r7, #0]
 800566a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800566c:	683b      	ldr	r3, [r7, #0]
 800566e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005670:	430b      	orrs	r3, r1
 8005672:	431a      	orrs	r2, r3
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	f042 0202 	orr.w	r2, r2, #2
 800567c:	611a      	str	r2, [r3, #16]
 800567e:	e007      	b.n	8005690 <HAL_ADCEx_InjectedConfigChannel+0x270>
                );
    }
    else
    {
      /* Disable Regular OverSampling */
      CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_JOVSE);
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	691a      	ldr	r2, [r3, #16]
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	f022 0202 	bic.w	r2, r2, #2
 800568e:	611a      	str	r2, [r3, #16]
    }

    /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
    if (sConfigInjected->InjectedSamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8005690:	683b      	ldr	r3, [r7, #0]
 8005692:	689b      	ldr	r3, [r3, #8]
 8005694:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005698:	d112      	bne.n	80056c0 <HAL_ADCEx_InjectedConfigChannel+0x2a0>
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfigInjected->InjectedChannel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	6818      	ldr	r0, [r3, #0]
 800569e:	683b      	ldr	r3, [r7, #0]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	2200      	movs	r2, #0
 80056a4:	4619      	mov	r1, r3
 80056a6:	f7ff fcc5 	bl	8005034 <LL_ADC_SetChannelSamplingTime>

      /* Set ADC sampling time common configuration */
      LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 80056b2:	4618      	mov	r0, r3
 80056b4:	f7ff fc9d 	bl	8004ff2 <LL_ADC_SetSamplingTimeCommonConfig>
 80056b8:	e011      	b.n	80056de <HAL_ADCEx_InjectedConfigChannel+0x2be>
 80056ba:	bf00      	nop
 80056bc:	04104000 	.word	0x04104000
    }
    else
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfigInjected->InjectedChannel, sConfigInjected->InjectedSamplingTime);
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	6818      	ldr	r0, [r3, #0]
 80056c4:	683b      	ldr	r3, [r7, #0]
 80056c6:	6819      	ldr	r1, [r3, #0]
 80056c8:	683b      	ldr	r3, [r7, #0]
 80056ca:	689b      	ldr	r3, [r3, #8]
 80056cc:	461a      	mov	r2, r3
 80056ce:	f7ff fcb1 	bl	8005034 <LL_ADC_SetChannelSamplingTime>

      /* Set ADC sampling time common configuration */
      LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	2100      	movs	r1, #0
 80056d8:	4618      	mov	r0, r3
 80056da:	f7ff fc8a 	bl	8004ff2 <LL_ADC_SetSamplingTimeCommonConfig>

    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset with respect to the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfigInjected->InjectedOffset);
 80056de:	683b      	ldr	r3, [r7, #0]
 80056e0:	695a      	ldr	r2, [r3, #20]
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	68db      	ldr	r3, [r3, #12]
 80056e8:	08db      	lsrs	r3, r3, #3
 80056ea:	f003 0303 	and.w	r3, r3, #3
 80056ee:	005b      	lsls	r3, r3, #1
 80056f0:	fa02 f303 	lsl.w	r3, r2, r3
 80056f4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4

    if (sConfigInjected->InjectedOffsetNumber != ADC_OFFSET_NONE)
 80056f8:	683b      	ldr	r3, [r7, #0]
 80056fa:	691b      	ldr	r3, [r3, #16]
 80056fc:	2b04      	cmp	r3, #4
 80056fe:	d022      	beq.n	8005746 <HAL_ADCEx_InjectedConfigChannel+0x326>
    {
      /* Set ADC selected offset number */
      LL_ADC_SetOffset(hadc->Instance, sConfigInjected->InjectedOffsetNumber, sConfigInjected->InjectedChannel,
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	6818      	ldr	r0, [r3, #0]
 8005704:	683b      	ldr	r3, [r7, #0]
 8005706:	6919      	ldr	r1, [r3, #16]
 8005708:	683b      	ldr	r3, [r7, #0]
 800570a:	681a      	ldr	r2, [r3, #0]
 800570c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8005710:	f7ff fbe4 	bl	8004edc <LL_ADC_SetOffset>
                       tmpOffsetShifted);

      /* Set ADC selected offset sign & saturation */
      LL_ADC_SetOffsetSign(hadc->Instance, sConfigInjected->InjectedOffsetNumber, sConfigInjected->InjectedOffsetSign);
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	6818      	ldr	r0, [r3, #0]
 8005718:	683b      	ldr	r3, [r7, #0]
 800571a:	6919      	ldr	r1, [r3, #16]
 800571c:	683b      	ldr	r3, [r7, #0]
 800571e:	699b      	ldr	r3, [r3, #24]
 8005720:	461a      	mov	r2, r3
 8005722:	f7ff fc30 	bl	8004f86 <LL_ADC_SetOffsetSign>
      LL_ADC_SetOffsetSaturation(hadc->Instance, sConfigInjected->InjectedOffsetNumber,
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	6818      	ldr	r0, [r3, #0]
 800572a:	683b      	ldr	r3, [r7, #0]
 800572c:	6919      	ldr	r1, [r3, #16]
                                 (sConfigInjected->InjectedOffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 800572e:	683b      	ldr	r3, [r7, #0]
 8005730:	7f1b      	ldrb	r3, [r3, #28]
      LL_ADC_SetOffsetSaturation(hadc->Instance, sConfigInjected->InjectedOffsetNumber,
 8005732:	2b01      	cmp	r3, #1
 8005734:	d102      	bne.n	800573c <HAL_ADCEx_InjectedConfigChannel+0x31c>
 8005736:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800573a:	e000      	b.n	800573e <HAL_ADCEx_InjectedConfigChannel+0x31e>
 800573c:	2300      	movs	r3, #0
 800573e:	461a      	mov	r2, r3
 8005740:	f7ff fc3c 	bl	8004fbc <LL_ADC_SetOffsetSaturation>
 8005744:	e179      	b.n	8005a3a <HAL_ADCEx_InjectedConfigChannel+0x61a>
    }
    else
    {
      /* Scan each offset register to check if the selected channel is targeted. */
      /* If this is the case, the corresponding offset number is disabled.       */
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	2100      	movs	r1, #0
 800574c:	4618      	mov	r0, r3
 800574e:	f7ff fbe9 	bl	8004f24 <LL_ADC_GetOffsetChannel>
 8005752:	4603      	mov	r3, r0
 8005754:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005758:	2b00      	cmp	r3, #0
 800575a:	d10a      	bne.n	8005772 <HAL_ADCEx_InjectedConfigChannel+0x352>
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	2100      	movs	r1, #0
 8005762:	4618      	mov	r0, r3
 8005764:	f7ff fbde 	bl	8004f24 <LL_ADC_GetOffsetChannel>
 8005768:	4603      	mov	r3, r0
 800576a:	0e9b      	lsrs	r3, r3, #26
 800576c:	f003 021f 	and.w	r2, r3, #31
 8005770:	e01e      	b.n	80057b0 <HAL_ADCEx_InjectedConfigChannel+0x390>
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	2100      	movs	r1, #0
 8005778:	4618      	mov	r0, r3
 800577a:	f7ff fbd3 	bl	8004f24 <LL_ADC_GetOffsetChannel>
 800577e:	4603      	mov	r3, r0
 8005780:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005784:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005788:	fa93 f3a3 	rbit	r3, r3
 800578c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  return result;
 8005790:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8005794:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  if (value == 0U)
 8005798:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800579c:	2b00      	cmp	r3, #0
 800579e:	d101      	bne.n	80057a4 <HAL_ADCEx_InjectedConfigChannel+0x384>
    return 32U;
 80057a0:	2320      	movs	r3, #32
 80057a2:	e004      	b.n	80057ae <HAL_ADCEx_InjectedConfigChannel+0x38e>
  return __builtin_clz(value);
 80057a4:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80057a8:	fab3 f383 	clz	r3, r3
 80057ac:	b2db      	uxtb	r3, r3
 80057ae:	461a      	mov	r2, r3
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfigInjected->InjectedChannel))
 80057b0:	683b      	ldr	r3, [r7, #0]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	d105      	bne.n	80057c8 <HAL_ADCEx_InjectedConfigChannel+0x3a8>
 80057bc:	683b      	ldr	r3, [r7, #0]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	0e9b      	lsrs	r3, r3, #26
 80057c2:	f003 031f 	and.w	r3, r3, #31
 80057c6:	e018      	b.n	80057fa <HAL_ADCEx_InjectedConfigChannel+0x3da>
 80057c8:	683b      	ldr	r3, [r7, #0]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80057d0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80057d4:	fa93 f3a3 	rbit	r3, r3
 80057d8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  return result;
 80057dc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80057e0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  if (value == 0U)
 80057e4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d101      	bne.n	80057f0 <HAL_ADCEx_InjectedConfigChannel+0x3d0>
    return 32U;
 80057ec:	2320      	movs	r3, #32
 80057ee:	e004      	b.n	80057fa <HAL_ADCEx_InjectedConfigChannel+0x3da>
  return __builtin_clz(value);
 80057f0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80057f4:	fab3 f383 	clz	r3, r3
 80057f8:	b2db      	uxtb	r3, r3
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80057fa:	429a      	cmp	r2, r3
 80057fc:	d106      	bne.n	800580c <HAL_ADCEx_InjectedConfigChannel+0x3ec>
      {
        LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	2200      	movs	r2, #0
 8005804:	2100      	movs	r1, #0
 8005806:	4618      	mov	r0, r3
 8005808:	f7ff fba2 	bl	8004f50 <LL_ADC_SetOffsetState>
      }
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	2101      	movs	r1, #1
 8005812:	4618      	mov	r0, r3
 8005814:	f7ff fb86 	bl	8004f24 <LL_ADC_GetOffsetChannel>
 8005818:	4603      	mov	r3, r0
 800581a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800581e:	2b00      	cmp	r3, #0
 8005820:	d10a      	bne.n	8005838 <HAL_ADCEx_InjectedConfigChannel+0x418>
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	2101      	movs	r1, #1
 8005828:	4618      	mov	r0, r3
 800582a:	f7ff fb7b 	bl	8004f24 <LL_ADC_GetOffsetChannel>
 800582e:	4603      	mov	r3, r0
 8005830:	0e9b      	lsrs	r3, r3, #26
 8005832:	f003 021f 	and.w	r2, r3, #31
 8005836:	e01e      	b.n	8005876 <HAL_ADCEx_InjectedConfigChannel+0x456>
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	2101      	movs	r1, #1
 800583e:	4618      	mov	r0, r3
 8005840:	f7ff fb70 	bl	8004f24 <LL_ADC_GetOffsetChannel>
 8005844:	4603      	mov	r3, r0
 8005846:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800584a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800584e:	fa93 f3a3 	rbit	r3, r3
 8005852:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  return result;
 8005856:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800585a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (value == 0U)
 800585e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8005862:	2b00      	cmp	r3, #0
 8005864:	d101      	bne.n	800586a <HAL_ADCEx_InjectedConfigChannel+0x44a>
    return 32U;
 8005866:	2320      	movs	r3, #32
 8005868:	e004      	b.n	8005874 <HAL_ADCEx_InjectedConfigChannel+0x454>
  return __builtin_clz(value);
 800586a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800586e:	fab3 f383 	clz	r3, r3
 8005872:	b2db      	uxtb	r3, r3
 8005874:	461a      	mov	r2, r3
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfigInjected->InjectedChannel))
 8005876:	683b      	ldr	r3, [r7, #0]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800587e:	2b00      	cmp	r3, #0
 8005880:	d105      	bne.n	800588e <HAL_ADCEx_InjectedConfigChannel+0x46e>
 8005882:	683b      	ldr	r3, [r7, #0]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	0e9b      	lsrs	r3, r3, #26
 8005888:	f003 031f 	and.w	r3, r3, #31
 800588c:	e018      	b.n	80058c0 <HAL_ADCEx_InjectedConfigChannel+0x4a0>
 800588e:	683b      	ldr	r3, [r7, #0]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005896:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800589a:	fa93 f3a3 	rbit	r3, r3
 800589e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  return result;
 80058a2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80058a6:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  if (value == 0U)
 80058aa:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d101      	bne.n	80058b6 <HAL_ADCEx_InjectedConfigChannel+0x496>
    return 32U;
 80058b2:	2320      	movs	r3, #32
 80058b4:	e004      	b.n	80058c0 <HAL_ADCEx_InjectedConfigChannel+0x4a0>
  return __builtin_clz(value);
 80058b6:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80058ba:	fab3 f383 	clz	r3, r3
 80058be:	b2db      	uxtb	r3, r3
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80058c0:	429a      	cmp	r2, r3
 80058c2:	d106      	bne.n	80058d2 <HAL_ADCEx_InjectedConfigChannel+0x4b2>
      {
        LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	2200      	movs	r2, #0
 80058ca:	2101      	movs	r1, #1
 80058cc:	4618      	mov	r0, r3
 80058ce:	f7ff fb3f 	bl	8004f50 <LL_ADC_SetOffsetState>
      }
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	2102      	movs	r1, #2
 80058d8:	4618      	mov	r0, r3
 80058da:	f7ff fb23 	bl	8004f24 <LL_ADC_GetOffsetChannel>
 80058de:	4603      	mov	r3, r0
 80058e0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	d10a      	bne.n	80058fe <HAL_ADCEx_InjectedConfigChannel+0x4de>
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	2102      	movs	r1, #2
 80058ee:	4618      	mov	r0, r3
 80058f0:	f7ff fb18 	bl	8004f24 <LL_ADC_GetOffsetChannel>
 80058f4:	4603      	mov	r3, r0
 80058f6:	0e9b      	lsrs	r3, r3, #26
 80058f8:	f003 021f 	and.w	r2, r3, #31
 80058fc:	e01e      	b.n	800593c <HAL_ADCEx_InjectedConfigChannel+0x51c>
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	2102      	movs	r1, #2
 8005904:	4618      	mov	r0, r3
 8005906:	f7ff fb0d 	bl	8004f24 <LL_ADC_GetOffsetChannel>
 800590a:	4603      	mov	r3, r0
 800590c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005910:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005914:	fa93 f3a3 	rbit	r3, r3
 8005918:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  return result;
 800591c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005920:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (value == 0U)
 8005924:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005928:	2b00      	cmp	r3, #0
 800592a:	d101      	bne.n	8005930 <HAL_ADCEx_InjectedConfigChannel+0x510>
    return 32U;
 800592c:	2320      	movs	r3, #32
 800592e:	e004      	b.n	800593a <HAL_ADCEx_InjectedConfigChannel+0x51a>
  return __builtin_clz(value);
 8005930:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005934:	fab3 f383 	clz	r3, r3
 8005938:	b2db      	uxtb	r3, r3
 800593a:	461a      	mov	r2, r3
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfigInjected->InjectedChannel))
 800593c:	683b      	ldr	r3, [r7, #0]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005944:	2b00      	cmp	r3, #0
 8005946:	d105      	bne.n	8005954 <HAL_ADCEx_InjectedConfigChannel+0x534>
 8005948:	683b      	ldr	r3, [r7, #0]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	0e9b      	lsrs	r3, r3, #26
 800594e:	f003 031f 	and.w	r3, r3, #31
 8005952:	e014      	b.n	800597e <HAL_ADCEx_InjectedConfigChannel+0x55e>
 8005954:	683b      	ldr	r3, [r7, #0]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800595a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800595c:	fa93 f3a3 	rbit	r3, r3
 8005960:	67bb      	str	r3, [r7, #120]	; 0x78
  return result;
 8005962:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005964:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  if (value == 0U)
 8005968:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800596c:	2b00      	cmp	r3, #0
 800596e:	d101      	bne.n	8005974 <HAL_ADCEx_InjectedConfigChannel+0x554>
    return 32U;
 8005970:	2320      	movs	r3, #32
 8005972:	e004      	b.n	800597e <HAL_ADCEx_InjectedConfigChannel+0x55e>
  return __builtin_clz(value);
 8005974:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005978:	fab3 f383 	clz	r3, r3
 800597c:	b2db      	uxtb	r3, r3
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800597e:	429a      	cmp	r2, r3
 8005980:	d106      	bne.n	8005990 <HAL_ADCEx_InjectedConfigChannel+0x570>
      {
        LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	2200      	movs	r2, #0
 8005988:	2102      	movs	r1, #2
 800598a:	4618      	mov	r0, r3
 800598c:	f7ff fae0 	bl	8004f50 <LL_ADC_SetOffsetState>
      }
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	2103      	movs	r1, #3
 8005996:	4618      	mov	r0, r3
 8005998:	f7ff fac4 	bl	8004f24 <LL_ADC_GetOffsetChannel>
 800599c:	4603      	mov	r3, r0
 800599e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d10a      	bne.n	80059bc <HAL_ADCEx_InjectedConfigChannel+0x59c>
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	2103      	movs	r1, #3
 80059ac:	4618      	mov	r0, r3
 80059ae:	f7ff fab9 	bl	8004f24 <LL_ADC_GetOffsetChannel>
 80059b2:	4603      	mov	r3, r0
 80059b4:	0e9b      	lsrs	r3, r3, #26
 80059b6:	f003 021f 	and.w	r2, r3, #31
 80059ba:	e017      	b.n	80059ec <HAL_ADCEx_InjectedConfigChannel+0x5cc>
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	2103      	movs	r1, #3
 80059c2:	4618      	mov	r0, r3
 80059c4:	f7ff faae 	bl	8004f24 <LL_ADC_GetOffsetChannel>
 80059c8:	4603      	mov	r3, r0
 80059ca:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80059cc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80059ce:	fa93 f3a3 	rbit	r3, r3
 80059d2:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 80059d4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80059d6:	677b      	str	r3, [r7, #116]	; 0x74
  if (value == 0U)
 80059d8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d101      	bne.n	80059e2 <HAL_ADCEx_InjectedConfigChannel+0x5c2>
    return 32U;
 80059de:	2320      	movs	r3, #32
 80059e0:	e003      	b.n	80059ea <HAL_ADCEx_InjectedConfigChannel+0x5ca>
  return __builtin_clz(value);
 80059e2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80059e4:	fab3 f383 	clz	r3, r3
 80059e8:	b2db      	uxtb	r3, r3
 80059ea:	461a      	mov	r2, r3
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfigInjected->InjectedChannel))
 80059ec:	683b      	ldr	r3, [r7, #0]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	d105      	bne.n	8005a04 <HAL_ADCEx_InjectedConfigChannel+0x5e4>
 80059f8:	683b      	ldr	r3, [r7, #0]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	0e9b      	lsrs	r3, r3, #26
 80059fe:	f003 031f 	and.w	r3, r3, #31
 8005a02:	e011      	b.n	8005a28 <HAL_ADCEx_InjectedConfigChannel+0x608>
 8005a04:	683b      	ldr	r3, [r7, #0]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005a0a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005a0c:	fa93 f3a3 	rbit	r3, r3
 8005a10:	663b      	str	r3, [r7, #96]	; 0x60
  return result;
 8005a12:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005a14:	66bb      	str	r3, [r7, #104]	; 0x68
  if (value == 0U)
 8005a16:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d101      	bne.n	8005a20 <HAL_ADCEx_InjectedConfigChannel+0x600>
    return 32U;
 8005a1c:	2320      	movs	r3, #32
 8005a1e:	e003      	b.n	8005a28 <HAL_ADCEx_InjectedConfigChannel+0x608>
  return __builtin_clz(value);
 8005a20:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005a22:	fab3 f383 	clz	r3, r3
 8005a26:	b2db      	uxtb	r3, r3
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8005a28:	429a      	cmp	r2, r3
 8005a2a:	d106      	bne.n	8005a3a <HAL_ADCEx_InjectedConfigChannel+0x61a>
      {
        LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	2200      	movs	r2, #0
 8005a32:	2103      	movs	r1, #3
 8005a34:	4618      	mov	r0, r3
 8005a36:	f7ff fa8b 	bl	8004f50 <LL_ADC_SetOffsetState>
  }

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	4618      	mov	r0, r3
 8005a40:	f7ff fb5a 	bl	80050f8 <LL_ADC_IsEnabled>
 8005a44:	4603      	mov	r3, r0
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	f040 8140 	bne.w	8005ccc <HAL_ADCEx_InjectedConfigChannel+0x8ac>
  {
    /* Set mode single-ended or differential input of the selected ADC channel */
    LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfigInjected->InjectedChannel, sConfigInjected->InjectedSingleDiff);
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	6818      	ldr	r0, [r3, #0]
 8005a50:	683b      	ldr	r3, [r7, #0]
 8005a52:	6819      	ldr	r1, [r3, #0]
 8005a54:	683b      	ldr	r3, [r7, #0]
 8005a56:	68db      	ldr	r3, [r3, #12]
 8005a58:	461a      	mov	r2, r3
 8005a5a:	f7ff fb17 	bl	800508c <LL_ADC_SetChannelSingleDiff>

    /* Configuration of differential mode */
    /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
    if (sConfigInjected->InjectedSingleDiff == ADC_DIFFERENTIAL_ENDED)
 8005a5e:	683b      	ldr	r3, [r7, #0]
 8005a60:	68db      	ldr	r3, [r3, #12]
 8005a62:	4a8f      	ldr	r2, [pc, #572]	; (8005ca0 <HAL_ADCEx_InjectedConfigChannel+0x880>)
 8005a64:	4293      	cmp	r3, r2
 8005a66:	f040 8131 	bne.w	8005ccc <HAL_ADCEx_InjectedConfigChannel+0x8ac>
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	6818      	ldr	r0, [r3, #0]
                                    (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfigInjected->InjectedChannel)
 8005a6e:	683b      	ldr	r3, [r7, #0]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d10b      	bne.n	8005a92 <HAL_ADCEx_InjectedConfigChannel+0x672>
 8005a7a:	683b      	ldr	r3, [r7, #0]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	0e9b      	lsrs	r3, r3, #26
 8005a80:	3301      	adds	r3, #1
 8005a82:	f003 031f 	and.w	r3, r3, #31
 8005a86:	2b09      	cmp	r3, #9
 8005a88:	bf94      	ite	ls
 8005a8a:	2301      	movls	r3, #1
 8005a8c:	2300      	movhi	r3, #0
 8005a8e:	b2db      	uxtb	r3, r3
 8005a90:	e019      	b.n	8005ac6 <HAL_ADCEx_InjectedConfigChannel+0x6a6>
 8005a92:	683b      	ldr	r3, [r7, #0]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005a98:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005a9a:	fa93 f3a3 	rbit	r3, r3
 8005a9e:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8005aa0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005aa2:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 8005aa4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d101      	bne.n	8005aae <HAL_ADCEx_InjectedConfigChannel+0x68e>
    return 32U;
 8005aaa:	2320      	movs	r3, #32
 8005aac:	e003      	b.n	8005ab6 <HAL_ADCEx_InjectedConfigChannel+0x696>
  return __builtin_clz(value);
 8005aae:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005ab0:	fab3 f383 	clz	r3, r3
 8005ab4:	b2db      	uxtb	r3, r3
 8005ab6:	3301      	adds	r3, #1
 8005ab8:	f003 031f 	and.w	r3, r3, #31
 8005abc:	2b09      	cmp	r3, #9
 8005abe:	bf94      	ite	ls
 8005ac0:	2301      	movls	r3, #1
 8005ac2:	2300      	movhi	r3, #0
 8005ac4:	b2db      	uxtb	r3, r3
      LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d079      	beq.n	8005bbe <HAL_ADCEx_InjectedConfigChannel+0x79e>
                                    (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfigInjected->InjectedChannel)
 8005aca:	683b      	ldr	r3, [r7, #0]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d107      	bne.n	8005ae6 <HAL_ADCEx_InjectedConfigChannel+0x6c6>
 8005ad6:	683b      	ldr	r3, [r7, #0]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	0e9b      	lsrs	r3, r3, #26
 8005adc:	3301      	adds	r3, #1
 8005ade:	069b      	lsls	r3, r3, #26
 8005ae0:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8005ae4:	e015      	b.n	8005b12 <HAL_ADCEx_InjectedConfigChannel+0x6f2>
 8005ae6:	683b      	ldr	r3, [r7, #0]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005aec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005aee:	fa93 f3a3 	rbit	r3, r3
 8005af2:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 8005af4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005af6:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 8005af8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	d101      	bne.n	8005b02 <HAL_ADCEx_InjectedConfigChannel+0x6e2>
    return 32U;
 8005afe:	2320      	movs	r3, #32
 8005b00:	e003      	b.n	8005b0a <HAL_ADCEx_InjectedConfigChannel+0x6ea>
  return __builtin_clz(value);
 8005b02:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005b04:	fab3 f383 	clz	r3, r3
 8005b08:	b2db      	uxtb	r3, r3
 8005b0a:	3301      	adds	r3, #1
 8005b0c:	069b      	lsls	r3, r3, #26
 8005b0e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8005b12:	683b      	ldr	r3, [r7, #0]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	d109      	bne.n	8005b32 <HAL_ADCEx_InjectedConfigChannel+0x712>
 8005b1e:	683b      	ldr	r3, [r7, #0]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	0e9b      	lsrs	r3, r3, #26
 8005b24:	3301      	adds	r3, #1
 8005b26:	f003 031f 	and.w	r3, r3, #31
 8005b2a:	2101      	movs	r1, #1
 8005b2c:	fa01 f303 	lsl.w	r3, r1, r3
 8005b30:	e017      	b.n	8005b62 <HAL_ADCEx_InjectedConfigChannel+0x742>
 8005b32:	683b      	ldr	r3, [r7, #0]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005b38:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005b3a:	fa93 f3a3 	rbit	r3, r3
 8005b3e:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8005b40:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005b42:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 8005b44:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	d101      	bne.n	8005b4e <HAL_ADCEx_InjectedConfigChannel+0x72e>
    return 32U;
 8005b4a:	2320      	movs	r3, #32
 8005b4c:	e003      	b.n	8005b56 <HAL_ADCEx_InjectedConfigChannel+0x736>
  return __builtin_clz(value);
 8005b4e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005b50:	fab3 f383 	clz	r3, r3
 8005b54:	b2db      	uxtb	r3, r3
 8005b56:	3301      	adds	r3, #1
 8005b58:	f003 031f 	and.w	r3, r3, #31
 8005b5c:	2101      	movs	r1, #1
 8005b5e:	fa01 f303 	lsl.w	r3, r1, r3
 8005b62:	ea42 0103 	orr.w	r1, r2, r3
 8005b66:	683b      	ldr	r3, [r7, #0]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	d10a      	bne.n	8005b88 <HAL_ADCEx_InjectedConfigChannel+0x768>
 8005b72:	683b      	ldr	r3, [r7, #0]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	0e9b      	lsrs	r3, r3, #26
 8005b78:	3301      	adds	r3, #1
 8005b7a:	f003 021f 	and.w	r2, r3, #31
 8005b7e:	4613      	mov	r3, r2
 8005b80:	005b      	lsls	r3, r3, #1
 8005b82:	4413      	add	r3, r2
 8005b84:	051b      	lsls	r3, r3, #20
 8005b86:	e018      	b.n	8005bba <HAL_ADCEx_InjectedConfigChannel+0x79a>
 8005b88:	683b      	ldr	r3, [r7, #0]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005b8e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005b90:	fa93 f3a3 	rbit	r3, r3
 8005b94:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 8005b96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b98:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 8005b9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	d101      	bne.n	8005ba4 <HAL_ADCEx_InjectedConfigChannel+0x784>
    return 32U;
 8005ba0:	2320      	movs	r3, #32
 8005ba2:	e003      	b.n	8005bac <HAL_ADCEx_InjectedConfigChannel+0x78c>
  return __builtin_clz(value);
 8005ba4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ba6:	fab3 f383 	clz	r3, r3
 8005baa:	b2db      	uxtb	r3, r3
 8005bac:	3301      	adds	r3, #1
 8005bae:	f003 021f 	and.w	r2, r3, #31
 8005bb2:	4613      	mov	r3, r2
 8005bb4:	005b      	lsls	r3, r3, #1
 8005bb6:	4413      	add	r3, r2
 8005bb8:	051b      	lsls	r3, r3, #20
      LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005bba:	430b      	orrs	r3, r1
 8005bbc:	e081      	b.n	8005cc2 <HAL_ADCEx_InjectedConfigChannel+0x8a2>
                                    (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfigInjected->InjectedChannel)
 8005bbe:	683b      	ldr	r3, [r7, #0]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d107      	bne.n	8005bda <HAL_ADCEx_InjectedConfigChannel+0x7ba>
 8005bca:	683b      	ldr	r3, [r7, #0]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	0e9b      	lsrs	r3, r3, #26
 8005bd0:	3301      	adds	r3, #1
 8005bd2:	069b      	lsls	r3, r3, #26
 8005bd4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8005bd8:	e015      	b.n	8005c06 <HAL_ADCEx_InjectedConfigChannel+0x7e6>
 8005bda:	683b      	ldr	r3, [r7, #0]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005be0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005be2:	fa93 f3a3 	rbit	r3, r3
 8005be6:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8005be8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bea:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 8005bec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	d101      	bne.n	8005bf6 <HAL_ADCEx_InjectedConfigChannel+0x7d6>
    return 32U;
 8005bf2:	2320      	movs	r3, #32
 8005bf4:	e003      	b.n	8005bfe <HAL_ADCEx_InjectedConfigChannel+0x7de>
  return __builtin_clz(value);
 8005bf6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005bf8:	fab3 f383 	clz	r3, r3
 8005bfc:	b2db      	uxtb	r3, r3
 8005bfe:	3301      	adds	r3, #1
 8005c00:	069b      	lsls	r3, r3, #26
 8005c02:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8005c06:	683b      	ldr	r3, [r7, #0]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	d109      	bne.n	8005c26 <HAL_ADCEx_InjectedConfigChannel+0x806>
 8005c12:	683b      	ldr	r3, [r7, #0]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	0e9b      	lsrs	r3, r3, #26
 8005c18:	3301      	adds	r3, #1
 8005c1a:	f003 031f 	and.w	r3, r3, #31
 8005c1e:	2101      	movs	r1, #1
 8005c20:	fa01 f303 	lsl.w	r3, r1, r3
 8005c24:	e017      	b.n	8005c56 <HAL_ADCEx_InjectedConfigChannel+0x836>
 8005c26:	683b      	ldr	r3, [r7, #0]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005c2c:	69fb      	ldr	r3, [r7, #28]
 8005c2e:	fa93 f3a3 	rbit	r3, r3
 8005c32:	61bb      	str	r3, [r7, #24]
  return result;
 8005c34:	69bb      	ldr	r3, [r7, #24]
 8005c36:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8005c38:	6a3b      	ldr	r3, [r7, #32]
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d101      	bne.n	8005c42 <HAL_ADCEx_InjectedConfigChannel+0x822>
    return 32U;
 8005c3e:	2320      	movs	r3, #32
 8005c40:	e003      	b.n	8005c4a <HAL_ADCEx_InjectedConfigChannel+0x82a>
  return __builtin_clz(value);
 8005c42:	6a3b      	ldr	r3, [r7, #32]
 8005c44:	fab3 f383 	clz	r3, r3
 8005c48:	b2db      	uxtb	r3, r3
 8005c4a:	3301      	adds	r3, #1
 8005c4c:	f003 031f 	and.w	r3, r3, #31
 8005c50:	2101      	movs	r1, #1
 8005c52:	fa01 f303 	lsl.w	r3, r1, r3
 8005c56:	ea42 0103 	orr.w	r1, r2, r3
 8005c5a:	683b      	ldr	r3, [r7, #0]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d10d      	bne.n	8005c82 <HAL_ADCEx_InjectedConfigChannel+0x862>
 8005c66:	683b      	ldr	r3, [r7, #0]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	0e9b      	lsrs	r3, r3, #26
 8005c6c:	3301      	adds	r3, #1
 8005c6e:	f003 021f 	and.w	r2, r3, #31
 8005c72:	4613      	mov	r3, r2
 8005c74:	005b      	lsls	r3, r3, #1
 8005c76:	4413      	add	r3, r2
 8005c78:	3b1e      	subs	r3, #30
 8005c7a:	051b      	lsls	r3, r3, #20
 8005c7c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8005c80:	e01e      	b.n	8005cc0 <HAL_ADCEx_InjectedConfigChannel+0x8a0>
 8005c82:	683b      	ldr	r3, [r7, #0]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005c88:	693b      	ldr	r3, [r7, #16]
 8005c8a:	fa93 f3a3 	rbit	r3, r3
 8005c8e:	60fb      	str	r3, [r7, #12]
  return result;
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8005c94:	697b      	ldr	r3, [r7, #20]
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d104      	bne.n	8005ca4 <HAL_ADCEx_InjectedConfigChannel+0x884>
    return 32U;
 8005c9a:	2320      	movs	r3, #32
 8005c9c:	e006      	b.n	8005cac <HAL_ADCEx_InjectedConfigChannel+0x88c>
 8005c9e:	bf00      	nop
 8005ca0:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8005ca4:	697b      	ldr	r3, [r7, #20]
 8005ca6:	fab3 f383 	clz	r3, r3
 8005caa:	b2db      	uxtb	r3, r3
 8005cac:	3301      	adds	r3, #1
 8005cae:	f003 021f 	and.w	r2, r3, #31
 8005cb2:	4613      	mov	r3, r2
 8005cb4:	005b      	lsls	r3, r3, #1
 8005cb6:	4413      	add	r3, r2
 8005cb8:	3b1e      	subs	r3, #30
 8005cba:	051b      	lsls	r3, r3, #20
 8005cbc:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
      LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005cc0:	430b      	orrs	r3, r1
 8005cc2:	683a      	ldr	r2, [r7, #0]
 8005cc4:	6892      	ldr	r2, [r2, #8]
 8005cc6:	4619      	mov	r1, r3
 8005cc8:	f7ff f9b4 	bl	8005034 <LL_ADC_SetChannelSamplingTime>
  /* internal measurement paths enable: If internal channel selected,       */
  /* enable dedicated internal buffers and path.                            */
  /* Note: these internal measurement paths can be disabled using           */
  /* HAL_ADC_DeInit().                                                      */

  if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfigInjected->InjectedChannel))
 8005ccc:	683b      	ldr	r3, [r7, #0]
 8005cce:	681a      	ldr	r2, [r3, #0]
 8005cd0:	4b3a      	ldr	r3, [pc, #232]	; (8005dbc <HAL_ADCEx_InjectedConfigChannel+0x99c>)
 8005cd2:	4013      	ands	r3, r2
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	d067      	beq.n	8005da8 <HAL_ADCEx_InjectedConfigChannel+0x988>
  {
    tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8005cd8:	4839      	ldr	r0, [pc, #228]	; (8005dc0 <HAL_ADCEx_InjectedConfigChannel+0x9a0>)
 8005cda:	f7ff f8f0 	bl	8004ebe <LL_ADC_GetCommonPathInternalCh>
 8005cde:	f8c7 00c0 	str.w	r0, [r7, #192]	; 0xc0

    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR_ADC1)
 8005ce2:	683b      	ldr	r3, [r7, #0]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	4a37      	ldr	r2, [pc, #220]	; (8005dc4 <HAL_ADCEx_InjectedConfigChannel+0x9a4>)
 8005ce8:	4293      	cmp	r3, r2
 8005cea:	d004      	beq.n	8005cf6 <HAL_ADCEx_InjectedConfigChannel+0x8d6>
         || (sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8005cec:	683b      	ldr	r3, [r7, #0]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	4a35      	ldr	r2, [pc, #212]	; (8005dc8 <HAL_ADCEx_InjectedConfigChannel+0x9a8>)
 8005cf2:	4293      	cmp	r3, r2
 8005cf4:	d127      	bne.n	8005d46 <HAL_ADCEx_InjectedConfigChannel+0x926>
        && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8005cf6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8005cfa:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	d121      	bne.n	8005d46 <HAL_ADCEx_InjectedConfigChannel+0x926>
    {
      if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005d0a:	d14d      	bne.n	8005da8 <HAL_ADCEx_InjectedConfigChannel+0x988>
      {
        LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8005d0c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8005d10:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8005d14:	4619      	mov	r1, r3
 8005d16:	482a      	ldr	r0, [pc, #168]	; (8005dc0 <HAL_ADCEx_InjectedConfigChannel+0x9a0>)
 8005d18:	f7ff f8be 	bl	8004e98 <LL_ADC_SetCommonPathInternalCh>
        /* Delay for temperature sensor stabilization time */
        /* Wait loop initialization and execution */
        /* Note: Variable divided by 2 to compensate partially              */
        /*       CPU processing cycles, scaling in us split to not          */
        /*       exceed 32 bits register capacity and handle low frequency. */
        wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (((SystemCoreClock / (100000UL * 2UL)) + 1UL) + 1UL));
 8005d1c:	4b2b      	ldr	r3, [pc, #172]	; (8005dcc <HAL_ADCEx_InjectedConfigChannel+0x9ac>)
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	099b      	lsrs	r3, r3, #6
 8005d22:	4a2b      	ldr	r2, [pc, #172]	; (8005dd0 <HAL_ADCEx_InjectedConfigChannel+0x9b0>)
 8005d24:	fba2 2303 	umull	r2, r3, r2, r3
 8005d28:	099a      	lsrs	r2, r3, #6
 8005d2a:	4613      	mov	r3, r2
 8005d2c:	005b      	lsls	r3, r3, #1
 8005d2e:	4413      	add	r3, r2
 8005d30:	009b      	lsls	r3, r3, #2
 8005d32:	3318      	adds	r3, #24
 8005d34:	60bb      	str	r3, [r7, #8]
        while (wait_loop_index != 0UL)
 8005d36:	e002      	b.n	8005d3e <HAL_ADCEx_InjectedConfigChannel+0x91e>
        {
          wait_loop_index--;
 8005d38:	68bb      	ldr	r3, [r7, #8]
 8005d3a:	3b01      	subs	r3, #1
 8005d3c:	60bb      	str	r3, [r7, #8]
        while (wait_loop_index != 0UL)
 8005d3e:	68bb      	ldr	r3, [r7, #8]
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	d1f9      	bne.n	8005d38 <HAL_ADCEx_InjectedConfigChannel+0x918>
      if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8005d44:	e030      	b.n	8005da8 <HAL_ADCEx_InjectedConfigChannel+0x988>
        }
      }
    }
    else if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_VBAT)
 8005d46:	683b      	ldr	r3, [r7, #0]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	4a22      	ldr	r2, [pc, #136]	; (8005dd4 <HAL_ADCEx_InjectedConfigChannel+0x9b4>)
 8005d4c:	4293      	cmp	r3, r2
 8005d4e:	d113      	bne.n	8005d78 <HAL_ADCEx_InjectedConfigChannel+0x958>
             && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8005d50:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8005d54:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	d10d      	bne.n	8005d78 <HAL_ADCEx_InjectedConfigChannel+0x958>
    {
      if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	4a1d      	ldr	r2, [pc, #116]	; (8005dd8 <HAL_ADCEx_InjectedConfigChannel+0x9b8>)
 8005d62:	4293      	cmp	r3, r2
 8005d64:	d020      	beq.n	8005da8 <HAL_ADCEx_InjectedConfigChannel+0x988>
      {
        LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8005d66:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8005d6a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005d6e:	4619      	mov	r1, r3
 8005d70:	4813      	ldr	r0, [pc, #76]	; (8005dc0 <HAL_ADCEx_InjectedConfigChannel+0x9a0>)
 8005d72:	f7ff f891 	bl	8004e98 <LL_ADC_SetCommonPathInternalCh>
      if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8005d76:	e017      	b.n	8005da8 <HAL_ADCEx_InjectedConfigChannel+0x988>
                                       LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
      }
    }
    else if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_VREFINT)
 8005d78:	683b      	ldr	r3, [r7, #0]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	4a17      	ldr	r2, [pc, #92]	; (8005ddc <HAL_ADCEx_InjectedConfigChannel+0x9bc>)
 8005d7e:	4293      	cmp	r3, r2
 8005d80:	d112      	bne.n	8005da8 <HAL_ADCEx_InjectedConfigChannel+0x988>
             && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8005d82:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8005d86:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	d10c      	bne.n	8005da8 <HAL_ADCEx_InjectedConfigChannel+0x988>
    {
      if (ADC_VREFINT_INSTANCE(hadc))
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	4a11      	ldr	r2, [pc, #68]	; (8005dd8 <HAL_ADCEx_InjectedConfigChannel+0x9b8>)
 8005d94:	4293      	cmp	r3, r2
 8005d96:	d007      	beq.n	8005da8 <HAL_ADCEx_InjectedConfigChannel+0x988>
      {
        LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8005d98:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8005d9c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8005da0:	4619      	mov	r1, r3
 8005da2:	4807      	ldr	r0, [pc, #28]	; (8005dc0 <HAL_ADCEx_InjectedConfigChannel+0x9a0>)
 8005da4:	f7ff f878 	bl	8004e98 <LL_ADC_SetCommonPathInternalCh>
      /* nothing to do */
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	2200      	movs	r2, #0
 8005dac:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8005db0:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8005db4:	4618      	mov	r0, r3
 8005db6:	37d8      	adds	r7, #216	; 0xd8
 8005db8:	46bd      	mov	sp, r7
 8005dba:	bd80      	pop	{r7, pc}
 8005dbc:	80080000 	.word	0x80080000
 8005dc0:	50000300 	.word	0x50000300
 8005dc4:	c3210000 	.word	0xc3210000
 8005dc8:	90c00010 	.word	0x90c00010
 8005dcc:	2000003c 	.word	0x2000003c
 8005dd0:	053e2d63 	.word	0x053e2d63
 8005dd4:	c7520000 	.word	0xc7520000
 8005dd8:	50000100 	.word	0x50000100
 8005ddc:	cb840000 	.word	0xcb840000

08005de0 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8005de0:	b590      	push	{r4, r7, lr}
 8005de2:	b0a1      	sub	sp, #132	; 0x84
 8005de4:	af00      	add	r7, sp, #0
 8005de6:	6078      	str	r0, [r7, #4]
 8005de8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005dea:	2300      	movs	r3, #0
 8005dec:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8005df6:	2b01      	cmp	r3, #1
 8005df8:	d101      	bne.n	8005dfe <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8005dfa:	2302      	movs	r3, #2
 8005dfc:	e08b      	b.n	8005f16 <HAL_ADCEx_MultiModeConfigChannel+0x136>
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	2201      	movs	r2, #1
 8005e02:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 8005e06:	2300      	movs	r3, #0
 8005e08:	667b      	str	r3, [r7, #100]	; 0x64
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 8005e0a:	2300      	movs	r3, #0
 8005e0c:	66bb      	str	r3, [r7, #104]	; 0x68

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005e16:	d102      	bne.n	8005e1e <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8005e18:	4b41      	ldr	r3, [pc, #260]	; (8005f20 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8005e1a:	60bb      	str	r3, [r7, #8]
 8005e1c:	e001      	b.n	8005e22 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8005e1e:	2300      	movs	r3, #0
 8005e20:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8005e22:	68bb      	ldr	r3, [r7, #8]
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	d10b      	bne.n	8005e40 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005e2c:	f043 0220 	orr.w	r2, r3, #32
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	2200      	movs	r2, #0
 8005e38:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 8005e3c:	2301      	movs	r3, #1
 8005e3e:	e06a      	b.n	8005f16 <HAL_ADCEx_MultiModeConfigChannel+0x136>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8005e40:	68bb      	ldr	r3, [r7, #8]
 8005e42:	4618      	mov	r0, r3
 8005e44:	f7ff f96b 	bl	800511e <LL_ADC_REG_IsConversionOngoing>
 8005e48:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	4618      	mov	r0, r3
 8005e50:	f7ff f965 	bl	800511e <LL_ADC_REG_IsConversionOngoing>
 8005e54:	4603      	mov	r3, r0
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	d14c      	bne.n	8005ef4 <HAL_ADCEx_MultiModeConfigChannel+0x114>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8005e5a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	d149      	bne.n	8005ef4 <HAL_ADCEx_MultiModeConfigChannel+0x114>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8005e60:	4b30      	ldr	r3, [pc, #192]	; (8005f24 <HAL_ADCEx_MultiModeConfigChannel+0x144>)
 8005e62:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8005e64:	683b      	ldr	r3, [r7, #0]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	d028      	beq.n	8005ebe <HAL_ADCEx_MultiModeConfigChannel+0xde>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8005e6c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005e6e:	689b      	ldr	r3, [r3, #8]
 8005e70:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005e74:	683b      	ldr	r3, [r7, #0]
 8005e76:	6859      	ldr	r1, [r3, #4]
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005e7e:	035b      	lsls	r3, r3, #13
 8005e80:	430b      	orrs	r3, r1
 8005e82:	431a      	orrs	r2, r3
 8005e84:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005e86:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8005e88:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8005e8c:	f7ff f934 	bl	80050f8 <LL_ADC_IsEnabled>
 8005e90:	4604      	mov	r4, r0
 8005e92:	4823      	ldr	r0, [pc, #140]	; (8005f20 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8005e94:	f7ff f930 	bl	80050f8 <LL_ADC_IsEnabled>
 8005e98:	4603      	mov	r3, r0
 8005e9a:	4323      	orrs	r3, r4
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	d133      	bne.n	8005f08 <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8005ea0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005ea2:	689b      	ldr	r3, [r3, #8]
 8005ea4:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8005ea8:	f023 030f 	bic.w	r3, r3, #15
 8005eac:	683a      	ldr	r2, [r7, #0]
 8005eae:	6811      	ldr	r1, [r2, #0]
 8005eb0:	683a      	ldr	r2, [r7, #0]
 8005eb2:	6892      	ldr	r2, [r2, #8]
 8005eb4:	430a      	orrs	r2, r1
 8005eb6:	431a      	orrs	r2, r3
 8005eb8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005eba:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8005ebc:	e024      	b.n	8005f08 <HAL_ADCEx_MultiModeConfigChannel+0x128>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8005ebe:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005ec0:	689b      	ldr	r3, [r3, #8]
 8005ec2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005ec6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005ec8:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8005eca:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8005ece:	f7ff f913 	bl	80050f8 <LL_ADC_IsEnabled>
 8005ed2:	4604      	mov	r4, r0
 8005ed4:	4812      	ldr	r0, [pc, #72]	; (8005f20 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8005ed6:	f7ff f90f 	bl	80050f8 <LL_ADC_IsEnabled>
 8005eda:	4603      	mov	r3, r0
 8005edc:	4323      	orrs	r3, r4
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	d112      	bne.n	8005f08 <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8005ee2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005ee4:	689b      	ldr	r3, [r3, #8]
 8005ee6:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8005eea:	f023 030f 	bic.w	r3, r3, #15
 8005eee:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8005ef0:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8005ef2:	e009      	b.n	8005f08 <HAL_ADCEx_MultiModeConfigChannel+0x128>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005ef8:	f043 0220 	orr.w	r2, r3, #32
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8005f00:	2301      	movs	r3, #1
 8005f02:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8005f06:	e000      	b.n	8005f0a <HAL_ADCEx_MultiModeConfigChannel+0x12a>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8005f08:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	2200      	movs	r2, #0
 8005f0e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8005f12:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8005f16:	4618      	mov	r0, r3
 8005f18:	3784      	adds	r7, #132	; 0x84
 8005f1a:	46bd      	mov	sp, r7
 8005f1c:	bd90      	pop	{r4, r7, pc}
 8005f1e:	bf00      	nop
 8005f20:	50000100 	.word	0x50000100
 8005f24:	50000300 	.word	0x50000300

08005f28 <HAL_CORDIC_Init>:
  * @brief  Initialize the CORDIC peripheral and the associated handle.
  * @param  hcordic pointer to a CORDIC_HandleTypeDef structure.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CORDIC_Init(CORDIC_HandleTypeDef *hcordic)
{
 8005f28:	b580      	push	{r7, lr}
 8005f2a:	b082      	sub	sp, #8
 8005f2c:	af00      	add	r7, sp, #0
 8005f2e:	6078      	str	r0, [r7, #4]
  /* Check the CORDIC handle allocation */
  if (hcordic == NULL)
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	d101      	bne.n	8005f3a <HAL_CORDIC_Init+0x12>
  {
    /* Return error status */
    return HAL_ERROR;
 8005f36:	2301      	movs	r3, #1
 8005f38:	e023      	b.n	8005f82 <HAL_CORDIC_Init+0x5a>

    /* Initialize the low level hardware */
    hcordic->MspInitCallback(hcordic);
  }
#else
  if (hcordic->State == HAL_CORDIC_STATE_RESET)
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8005f40:	b2db      	uxtb	r3, r3
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d106      	bne.n	8005f54 <HAL_CORDIC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hcordic->Lock = HAL_UNLOCKED;
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	2200      	movs	r2, #0
 8005f4a:	f883 2020 	strb.w	r2, [r3, #32]

    /* Initialize the low level hardware */
    HAL_CORDIC_MspInit(hcordic);
 8005f4e:	6878      	ldr	r0, [r7, #4]
 8005f50:	f7fc ff90 	bl	8002e74 <HAL_CORDIC_MspInit>
  }
#endif /* (USE_HAL_CORDIC_REGISTER_CALLBACKS) */

  /* Set CORDIC error code to none */
  hcordic->ErrorCode = HAL_CORDIC_ERROR_NONE;
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	2200      	movs	r2, #0
 8005f58:	625a      	str	r2, [r3, #36]	; 0x24

  /* Reset pInBuff and pOutBuff */
  hcordic->pInBuff = NULL;
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	2200      	movs	r2, #0
 8005f5e:	605a      	str	r2, [r3, #4]
  hcordic->pOutBuff = NULL;
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	2200      	movs	r2, #0
 8005f64:	609a      	str	r2, [r3, #8]

  /* Reset NbCalcToOrder and NbCalcToGet */
  hcordic->NbCalcToOrder = 0U;
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	2200      	movs	r2, #0
 8005f6a:	60da      	str	r2, [r3, #12]
  hcordic->NbCalcToGet = 0U;
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	2200      	movs	r2, #0
 8005f70:	611a      	str	r2, [r3, #16]

  /* Reset DMADirection */
  hcordic->DMADirection = CORDIC_DMA_DIR_NONE;
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	2200      	movs	r2, #0
 8005f76:	615a      	str	r2, [r3, #20]

  /* Change CORDIC peripheral state */
  hcordic->State = HAL_CORDIC_STATE_READY;
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	2201      	movs	r2, #1
 8005f7c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Return function status */
  return HAL_OK;
 8005f80:	2300      	movs	r3, #0
}
 8005f82:	4618      	mov	r0, r3
 8005f84:	3708      	adds	r7, #8
 8005f86:	46bd      	mov	sp, r7
 8005f88:	bd80      	pop	{r7, pc}
	...

08005f8c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005f8c:	b480      	push	{r7}
 8005f8e:	b085      	sub	sp, #20
 8005f90:	af00      	add	r7, sp, #0
 8005f92:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	f003 0307 	and.w	r3, r3, #7
 8005f9a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005f9c:	4b0c      	ldr	r3, [pc, #48]	; (8005fd0 <__NVIC_SetPriorityGrouping+0x44>)
 8005f9e:	68db      	ldr	r3, [r3, #12]
 8005fa0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005fa2:	68ba      	ldr	r2, [r7, #8]
 8005fa4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005fa8:	4013      	ands	r3, r2
 8005faa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005fb0:	68bb      	ldr	r3, [r7, #8]
 8005fb2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005fb4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8005fb8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005fbc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005fbe:	4a04      	ldr	r2, [pc, #16]	; (8005fd0 <__NVIC_SetPriorityGrouping+0x44>)
 8005fc0:	68bb      	ldr	r3, [r7, #8]
 8005fc2:	60d3      	str	r3, [r2, #12]
}
 8005fc4:	bf00      	nop
 8005fc6:	3714      	adds	r7, #20
 8005fc8:	46bd      	mov	sp, r7
 8005fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fce:	4770      	bx	lr
 8005fd0:	e000ed00 	.word	0xe000ed00

08005fd4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005fd4:	b480      	push	{r7}
 8005fd6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005fd8:	4b04      	ldr	r3, [pc, #16]	; (8005fec <__NVIC_GetPriorityGrouping+0x18>)
 8005fda:	68db      	ldr	r3, [r3, #12]
 8005fdc:	0a1b      	lsrs	r3, r3, #8
 8005fde:	f003 0307 	and.w	r3, r3, #7
}
 8005fe2:	4618      	mov	r0, r3
 8005fe4:	46bd      	mov	sp, r7
 8005fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fea:	4770      	bx	lr
 8005fec:	e000ed00 	.word	0xe000ed00

08005ff0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005ff0:	b480      	push	{r7}
 8005ff2:	b083      	sub	sp, #12
 8005ff4:	af00      	add	r7, sp, #0
 8005ff6:	4603      	mov	r3, r0
 8005ff8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005ffa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	db0b      	blt.n	800601a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006002:	79fb      	ldrb	r3, [r7, #7]
 8006004:	f003 021f 	and.w	r2, r3, #31
 8006008:	4907      	ldr	r1, [pc, #28]	; (8006028 <__NVIC_EnableIRQ+0x38>)
 800600a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800600e:	095b      	lsrs	r3, r3, #5
 8006010:	2001      	movs	r0, #1
 8006012:	fa00 f202 	lsl.w	r2, r0, r2
 8006016:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800601a:	bf00      	nop
 800601c:	370c      	adds	r7, #12
 800601e:	46bd      	mov	sp, r7
 8006020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006024:	4770      	bx	lr
 8006026:	bf00      	nop
 8006028:	e000e100 	.word	0xe000e100

0800602c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800602c:	b480      	push	{r7}
 800602e:	b083      	sub	sp, #12
 8006030:	af00      	add	r7, sp, #0
 8006032:	4603      	mov	r3, r0
 8006034:	6039      	str	r1, [r7, #0]
 8006036:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006038:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800603c:	2b00      	cmp	r3, #0
 800603e:	db0a      	blt.n	8006056 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006040:	683b      	ldr	r3, [r7, #0]
 8006042:	b2da      	uxtb	r2, r3
 8006044:	490c      	ldr	r1, [pc, #48]	; (8006078 <__NVIC_SetPriority+0x4c>)
 8006046:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800604a:	0112      	lsls	r2, r2, #4
 800604c:	b2d2      	uxtb	r2, r2
 800604e:	440b      	add	r3, r1
 8006050:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8006054:	e00a      	b.n	800606c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006056:	683b      	ldr	r3, [r7, #0]
 8006058:	b2da      	uxtb	r2, r3
 800605a:	4908      	ldr	r1, [pc, #32]	; (800607c <__NVIC_SetPriority+0x50>)
 800605c:	79fb      	ldrb	r3, [r7, #7]
 800605e:	f003 030f 	and.w	r3, r3, #15
 8006062:	3b04      	subs	r3, #4
 8006064:	0112      	lsls	r2, r2, #4
 8006066:	b2d2      	uxtb	r2, r2
 8006068:	440b      	add	r3, r1
 800606a:	761a      	strb	r2, [r3, #24]
}
 800606c:	bf00      	nop
 800606e:	370c      	adds	r7, #12
 8006070:	46bd      	mov	sp, r7
 8006072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006076:	4770      	bx	lr
 8006078:	e000e100 	.word	0xe000e100
 800607c:	e000ed00 	.word	0xe000ed00

08006080 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006080:	b480      	push	{r7}
 8006082:	b089      	sub	sp, #36	; 0x24
 8006084:	af00      	add	r7, sp, #0
 8006086:	60f8      	str	r0, [r7, #12]
 8006088:	60b9      	str	r1, [r7, #8]
 800608a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	f003 0307 	and.w	r3, r3, #7
 8006092:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006094:	69fb      	ldr	r3, [r7, #28]
 8006096:	f1c3 0307 	rsb	r3, r3, #7
 800609a:	2b04      	cmp	r3, #4
 800609c:	bf28      	it	cs
 800609e:	2304      	movcs	r3, #4
 80060a0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80060a2:	69fb      	ldr	r3, [r7, #28]
 80060a4:	3304      	adds	r3, #4
 80060a6:	2b06      	cmp	r3, #6
 80060a8:	d902      	bls.n	80060b0 <NVIC_EncodePriority+0x30>
 80060aa:	69fb      	ldr	r3, [r7, #28]
 80060ac:	3b03      	subs	r3, #3
 80060ae:	e000      	b.n	80060b2 <NVIC_EncodePriority+0x32>
 80060b0:	2300      	movs	r3, #0
 80060b2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80060b4:	f04f 32ff 	mov.w	r2, #4294967295
 80060b8:	69bb      	ldr	r3, [r7, #24]
 80060ba:	fa02 f303 	lsl.w	r3, r2, r3
 80060be:	43da      	mvns	r2, r3
 80060c0:	68bb      	ldr	r3, [r7, #8]
 80060c2:	401a      	ands	r2, r3
 80060c4:	697b      	ldr	r3, [r7, #20]
 80060c6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80060c8:	f04f 31ff 	mov.w	r1, #4294967295
 80060cc:	697b      	ldr	r3, [r7, #20]
 80060ce:	fa01 f303 	lsl.w	r3, r1, r3
 80060d2:	43d9      	mvns	r1, r3
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80060d8:	4313      	orrs	r3, r2
         );
}
 80060da:	4618      	mov	r0, r3
 80060dc:	3724      	adds	r7, #36	; 0x24
 80060de:	46bd      	mov	sp, r7
 80060e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060e4:	4770      	bx	lr
	...

080060e8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80060e8:	b580      	push	{r7, lr}
 80060ea:	b082      	sub	sp, #8
 80060ec:	af00      	add	r7, sp, #0
 80060ee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	3b01      	subs	r3, #1
 80060f4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80060f8:	d301      	bcc.n	80060fe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80060fa:	2301      	movs	r3, #1
 80060fc:	e00f      	b.n	800611e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80060fe:	4a0a      	ldr	r2, [pc, #40]	; (8006128 <SysTick_Config+0x40>)
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	3b01      	subs	r3, #1
 8006104:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8006106:	210f      	movs	r1, #15
 8006108:	f04f 30ff 	mov.w	r0, #4294967295
 800610c:	f7ff ff8e 	bl	800602c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8006110:	4b05      	ldr	r3, [pc, #20]	; (8006128 <SysTick_Config+0x40>)
 8006112:	2200      	movs	r2, #0
 8006114:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8006116:	4b04      	ldr	r3, [pc, #16]	; (8006128 <SysTick_Config+0x40>)
 8006118:	2207      	movs	r2, #7
 800611a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800611c:	2300      	movs	r3, #0
}
 800611e:	4618      	mov	r0, r3
 8006120:	3708      	adds	r7, #8
 8006122:	46bd      	mov	sp, r7
 8006124:	bd80      	pop	{r7, pc}
 8006126:	bf00      	nop
 8006128:	e000e010 	.word	0xe000e010

0800612c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800612c:	b580      	push	{r7, lr}
 800612e:	b082      	sub	sp, #8
 8006130:	af00      	add	r7, sp, #0
 8006132:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8006134:	6878      	ldr	r0, [r7, #4]
 8006136:	f7ff ff29 	bl	8005f8c <__NVIC_SetPriorityGrouping>
}
 800613a:	bf00      	nop
 800613c:	3708      	adds	r7, #8
 800613e:	46bd      	mov	sp, r7
 8006140:	bd80      	pop	{r7, pc}

08006142 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006142:	b580      	push	{r7, lr}
 8006144:	b086      	sub	sp, #24
 8006146:	af00      	add	r7, sp, #0
 8006148:	4603      	mov	r3, r0
 800614a:	60b9      	str	r1, [r7, #8]
 800614c:	607a      	str	r2, [r7, #4]
 800614e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8006150:	f7ff ff40 	bl	8005fd4 <__NVIC_GetPriorityGrouping>
 8006154:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8006156:	687a      	ldr	r2, [r7, #4]
 8006158:	68b9      	ldr	r1, [r7, #8]
 800615a:	6978      	ldr	r0, [r7, #20]
 800615c:	f7ff ff90 	bl	8006080 <NVIC_EncodePriority>
 8006160:	4602      	mov	r2, r0
 8006162:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006166:	4611      	mov	r1, r2
 8006168:	4618      	mov	r0, r3
 800616a:	f7ff ff5f 	bl	800602c <__NVIC_SetPriority>
}
 800616e:	bf00      	nop
 8006170:	3718      	adds	r7, #24
 8006172:	46bd      	mov	sp, r7
 8006174:	bd80      	pop	{r7, pc}

08006176 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006176:	b580      	push	{r7, lr}
 8006178:	b082      	sub	sp, #8
 800617a:	af00      	add	r7, sp, #0
 800617c:	4603      	mov	r3, r0
 800617e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8006180:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006184:	4618      	mov	r0, r3
 8006186:	f7ff ff33 	bl	8005ff0 <__NVIC_EnableIRQ>
}
 800618a:	bf00      	nop
 800618c:	3708      	adds	r7, #8
 800618e:	46bd      	mov	sp, r7
 8006190:	bd80      	pop	{r7, pc}

08006192 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8006192:	b580      	push	{r7, lr}
 8006194:	b082      	sub	sp, #8
 8006196:	af00      	add	r7, sp, #0
 8006198:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800619a:	6878      	ldr	r0, [r7, #4]
 800619c:	f7ff ffa4 	bl	80060e8 <SysTick_Config>
 80061a0:	4603      	mov	r3, r0
}
 80061a2:	4618      	mov	r0, r3
 80061a4:	3708      	adds	r7, #8
 80061a6:	46bd      	mov	sp, r7
 80061a8:	bd80      	pop	{r7, pc}

080061aa <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 80061aa:	b580      	push	{r7, lr}
 80061ac:	b082      	sub	sp, #8
 80061ae:	af00      	add	r7, sp, #0
 80061b0:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	d101      	bne.n	80061bc <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 80061b8:	2301      	movs	r3, #1
 80061ba:	e014      	b.n	80061e6 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	791b      	ldrb	r3, [r3, #4]
 80061c0:	b2db      	uxtb	r3, r3
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	d105      	bne.n	80061d2 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	2200      	movs	r2, #0
 80061ca:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 80061cc:	6878      	ldr	r0, [r7, #4]
 80061ce:	f7fc fe71 	bl	8002eb4 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	2202      	movs	r2, #2
 80061d6:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	2200      	movs	r2, #0
 80061dc:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	2201      	movs	r2, #1
 80061e2:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 80061e4:	2300      	movs	r3, #0
}
 80061e6:	4618      	mov	r0, r3
 80061e8:	3708      	adds	r7, #8
 80061ea:	46bd      	mov	sp, r7
 80061ec:	bd80      	pop	{r7, pc}

080061ee <HAL_DAC_IRQHandler>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(DAC_HandleTypeDef *hdac)
{
 80061ee:	b580      	push	{r7, lr}
 80061f0:	b082      	sub	sp, #8
 80061f2:	af00      	add	r7, sp, #0
 80061f4:	6078      	str	r0, [r7, #4]
  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR1))
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006200:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006204:	d120      	bne.n	8006248 <HAL_DAC_IRQHandler+0x5a>
  {
    /* Check underrun flag of DAC channel 1 */
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR1))
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800620c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006210:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006214:	d118      	bne.n	8006248 <HAL_DAC_IRQHandler+0x5a>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	2204      	movs	r2, #4
 800621a:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel1 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH1);
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	691b      	ldr	r3, [r3, #16]
 8006220:	f043 0201 	orr.w	r2, r3, #1
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR1);
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8006230:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel1 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	681a      	ldr	r2, [r3, #0]
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8006240:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh1(hdac);
#else
      HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 8006242:	6878      	ldr	r0, [r7, #4]
 8006244:	f000 f82d 	bl	80062a2 <HAL_DAC_DMAUnderrunCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }


  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR2))
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006252:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006256:	d120      	bne.n	800629a <HAL_DAC_IRQHandler+0xac>
  {
    /* Check underrun flag of DAC channel 2 */
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR2))
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800625e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006262:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006266:	d118      	bne.n	800629a <HAL_DAC_IRQHandler+0xac>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	2204      	movs	r2, #4
 800626c:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel2 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH2);
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	691b      	ldr	r3, [r3, #16]
 8006272:	f043 0202 	orr.w	r2, r3, #2
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR2);
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8006282:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel2 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	681a      	ldr	r2, [r3, #0]
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8006292:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh2(hdac);
#else
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 8006294:	6878      	ldr	r0, [r7, #4]
 8006296:	f000 f9b7 	bl	8006608 <HAL_DACEx_DMAUnderrunCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }

}
 800629a:	bf00      	nop
 800629c:	3708      	adds	r7, #8
 800629e:	46bd      	mov	sp, r7
 80062a0:	bd80      	pop	{r7, pc}

080062a2 <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 80062a2:	b480      	push	{r7}
 80062a4:	b083      	sub	sp, #12
 80062a6:	af00      	add	r7, sp, #0
 80062a8:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 80062aa:	bf00      	nop
 80062ac:	370c      	adds	r7, #12
 80062ae:	46bd      	mov	sp, r7
 80062b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062b4:	4770      	bx	lr
	...

080062b8 <HAL_DAC_ConfigChannel>:
  *         (1) On this STM32 series, parameter not available on all instances.
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 80062b8:	b580      	push	{r7, lr}
 80062ba:	b08a      	sub	sp, #40	; 0x28
 80062bc:	af00      	add	r7, sp, #0
 80062be:	60f8      	str	r0, [r7, #12]
 80062c0:	60b9      	str	r1, [r7, #8]
 80062c2:	607a      	str	r2, [r7, #4]
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_DMADoubleDataMode));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_SignedFormat));

  /* Process locked */
  __HAL_LOCK(hdac);
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	795b      	ldrb	r3, [r3, #5]
 80062c8:	2b01      	cmp	r3, #1
 80062ca:	d101      	bne.n	80062d0 <HAL_DAC_ConfigChannel+0x18>
 80062cc:	2302      	movs	r3, #2
 80062ce:	e192      	b.n	80065f6 <HAL_DAC_ConfigChannel+0x33e>
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	2201      	movs	r2, #1
 80062d4:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	2202      	movs	r2, #2
 80062da:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 80062dc:	68bb      	ldr	r3, [r7, #8]
 80062de:	689b      	ldr	r3, [r3, #8]
 80062e0:	2b04      	cmp	r3, #4
 80062e2:	d174      	bne.n	80063ce <HAL_DAC_ConfigChannel+0x116>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 80062e4:	f7fd fb66 	bl	80039b4 <HAL_GetTick>
 80062e8:	61f8      	str	r0, [r7, #28]

    if (Channel == DAC_CHANNEL_1)
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	d134      	bne.n	800635a <HAL_DAC_ConfigChannel+0xa2>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80062f0:	e011      	b.n	8006316 <HAL_DAC_ConfigChannel+0x5e>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 80062f2:	f7fd fb5f 	bl	80039b4 <HAL_GetTick>
 80062f6:	4602      	mov	r2, r0
 80062f8:	69fb      	ldr	r3, [r7, #28]
 80062fa:	1ad3      	subs	r3, r2, r3
 80062fc:	2b01      	cmp	r3, #1
 80062fe:	d90a      	bls.n	8006316 <HAL_DAC_ConfigChannel+0x5e>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	691b      	ldr	r3, [r3, #16]
 8006304:	f043 0208 	orr.w	r2, r3, #8
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	2203      	movs	r2, #3
 8006310:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 8006312:	2303      	movs	r3, #3
 8006314:	e16f      	b.n	80065f6 <HAL_DAC_ConfigChannel+0x33e>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800631c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006320:	2b00      	cmp	r3, #0
 8006322:	d1e6      	bne.n	80062f2 <HAL_DAC_ConfigChannel+0x3a>
        }
      }
      HAL_Delay(1);
 8006324:	2001      	movs	r0, #1
 8006326:	f7fd fb51 	bl	80039cc <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	68ba      	ldr	r2, [r7, #8]
 8006330:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8006332:	641a      	str	r2, [r3, #64]	; 0x40
 8006334:	e01e      	b.n	8006374 <HAL_DAC_ConfigChannel+0xbc>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8006336:	f7fd fb3d 	bl	80039b4 <HAL_GetTick>
 800633a:	4602      	mov	r2, r0
 800633c:	69fb      	ldr	r3, [r7, #28]
 800633e:	1ad3      	subs	r3, r2, r3
 8006340:	2b01      	cmp	r3, #1
 8006342:	d90a      	bls.n	800635a <HAL_DAC_ConfigChannel+0xa2>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	691b      	ldr	r3, [r3, #16]
 8006348:	f043 0208 	orr.w	r2, r3, #8
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	2203      	movs	r2, #3
 8006354:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 8006356:	2303      	movs	r3, #3
 8006358:	e14d      	b.n	80065f6 <HAL_DAC_ConfigChannel+0x33e>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006360:	2b00      	cmp	r3, #0
 8006362:	dbe8      	blt.n	8006336 <HAL_DAC_ConfigChannel+0x7e>
        }
      }
      HAL_Delay(1U);
 8006364:	2001      	movs	r0, #1
 8006366:	f7fd fb31 	bl	80039cc <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	68ba      	ldr	r2, [r7, #8]
 8006370:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8006372:	645a      	str	r2, [r3, #68]	; 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	f003 0310 	and.w	r3, r3, #16
 8006380:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8006384:	fa01 f303 	lsl.w	r3, r1, r3
 8006388:	43db      	mvns	r3, r3
 800638a:	ea02 0103 	and.w	r1, r2, r3
 800638e:	68bb      	ldr	r3, [r7, #8]
 8006390:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	f003 0310 	and.w	r3, r3, #16
 8006398:	409a      	lsls	r2, r3
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	430a      	orrs	r2, r1
 80063a0:	649a      	str	r2, [r3, #72]	; 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	f003 0310 	and.w	r3, r3, #16
 80063ae:	21ff      	movs	r1, #255	; 0xff
 80063b0:	fa01 f303 	lsl.w	r3, r1, r3
 80063b4:	43db      	mvns	r3, r3
 80063b6:	ea02 0103 	and.w	r1, r2, r3
 80063ba:	68bb      	ldr	r3, [r7, #8]
 80063bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	f003 0310 	and.w	r3, r3, #16
 80063c4:	409a      	lsls	r2, r3
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	430a      	orrs	r2, r1
 80063cc:	64da      	str	r2, [r3, #76]	; 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 80063ce:	68bb      	ldr	r3, [r7, #8]
 80063d0:	69db      	ldr	r3, [r3, #28]
 80063d2:	2b01      	cmp	r3, #1
 80063d4:	d11d      	bne.n	8006412 <HAL_DAC_ConfigChannel+0x15a>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063dc:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	f003 0310 	and.w	r3, r3, #16
 80063e4:	221f      	movs	r2, #31
 80063e6:	fa02 f303 	lsl.w	r3, r2, r3
 80063ea:	43db      	mvns	r3, r3
 80063ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80063ee:	4013      	ands	r3, r2
 80063f0:	627b      	str	r3, [r7, #36]	; 0x24
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 80063f2:	68bb      	ldr	r3, [r7, #8]
 80063f4:	6a1b      	ldr	r3, [r3, #32]
 80063f6:	61bb      	str	r3, [r7, #24]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	f003 0310 	and.w	r3, r3, #16
 80063fe:	69ba      	ldr	r2, [r7, #24]
 8006400:	fa02 f303 	lsl.w	r3, r2, r3
 8006404:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006406:	4313      	orrs	r3, r2
 8006408:	627b      	str	r3, [r7, #36]	; 0x24
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006410:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006418:	627b      	str	r3, [r7, #36]	; 0x24
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	f003 0310 	and.w	r3, r3, #16
 8006420:	2207      	movs	r2, #7
 8006422:	fa02 f303 	lsl.w	r3, r2, r3
 8006426:	43db      	mvns	r3, r3
 8006428:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800642a:	4013      	ands	r3, r2
 800642c:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 800642e:	68bb      	ldr	r3, [r7, #8]
 8006430:	699b      	ldr	r3, [r3, #24]
 8006432:	2b01      	cmp	r3, #1
 8006434:	d102      	bne.n	800643c <HAL_DAC_ConfigChannel+0x184>
  {
    connectOnChip = 0x00000000UL;
 8006436:	2300      	movs	r3, #0
 8006438:	623b      	str	r3, [r7, #32]
 800643a:	e00f      	b.n	800645c <HAL_DAC_ConfigChannel+0x1a4>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 800643c:	68bb      	ldr	r3, [r7, #8]
 800643e:	699b      	ldr	r3, [r3, #24]
 8006440:	2b02      	cmp	r3, #2
 8006442:	d102      	bne.n	800644a <HAL_DAC_ConfigChannel+0x192>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 8006444:	2301      	movs	r3, #1
 8006446:	623b      	str	r3, [r7, #32]
 8006448:	e008      	b.n	800645c <HAL_DAC_ConfigChannel+0x1a4>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 800644a:	68bb      	ldr	r3, [r7, #8]
 800644c:	695b      	ldr	r3, [r3, #20]
 800644e:	2b00      	cmp	r3, #0
 8006450:	d102      	bne.n	8006458 <HAL_DAC_ConfigChannel+0x1a0>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 8006452:	2301      	movs	r3, #1
 8006454:	623b      	str	r3, [r7, #32]
 8006456:	e001      	b.n	800645c <HAL_DAC_ConfigChannel+0x1a4>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 8006458:	2300      	movs	r3, #0
 800645a:	623b      	str	r3, [r7, #32]
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 800645c:	68bb      	ldr	r3, [r7, #8]
 800645e:	689a      	ldr	r2, [r3, #8]
 8006460:	68bb      	ldr	r3, [r7, #8]
 8006462:	695b      	ldr	r3, [r3, #20]
 8006464:	4313      	orrs	r3, r2
 8006466:	6a3a      	ldr	r2, [r7, #32]
 8006468:	4313      	orrs	r3, r2
 800646a:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_DMADOUBLEx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_DMADOUBLE1)) << (Channel & 0x10UL));
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	f003 0310 	and.w	r3, r3, #16
 8006472:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006476:	fa02 f303 	lsl.w	r3, r2, r3
 800647a:	43db      	mvns	r3, r3
 800647c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800647e:	4013      	ands	r3, r2
 8006480:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: DMA double data mode */
  tmpreg2 |= (sConfig->DAC_DMADoubleDataMode == ENABLE) ? DAC_MCR_DMADOUBLE1 : 0UL;
 8006482:	68bb      	ldr	r3, [r7, #8]
 8006484:	791b      	ldrb	r3, [r3, #4]
 8006486:	2b01      	cmp	r3, #1
 8006488:	d102      	bne.n	8006490 <HAL_DAC_ConfigChannel+0x1d8>
 800648a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800648e:	e000      	b.n	8006492 <HAL_DAC_ConfigChannel+0x1da>
 8006490:	2300      	movs	r3, #0
 8006492:	69ba      	ldr	r2, [r7, #24]
 8006494:	4313      	orrs	r3, r2
 8006496:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_SINFORMATx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_SINFORMAT1)) << (Channel & 0x10UL));
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	f003 0310 	and.w	r3, r3, #16
 800649e:	f44f 7200 	mov.w	r2, #512	; 0x200
 80064a2:	fa02 f303 	lsl.w	r3, r2, r3
 80064a6:	43db      	mvns	r3, r3
 80064a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80064aa:	4013      	ands	r3, r2
 80064ac:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: Signed format */
  tmpreg2 |= (sConfig->DAC_SignedFormat == ENABLE) ? DAC_MCR_SINFORMAT1 : 0UL;
 80064ae:	68bb      	ldr	r3, [r7, #8]
 80064b0:	795b      	ldrb	r3, [r3, #5]
 80064b2:	2b01      	cmp	r3, #1
 80064b4:	d102      	bne.n	80064bc <HAL_DAC_ConfigChannel+0x204>
 80064b6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80064ba:	e000      	b.n	80064be <HAL_DAC_ConfigChannel+0x206>
 80064bc:	2300      	movs	r3, #0
 80064be:	69ba      	ldr	r2, [r7, #24]
 80064c0:	4313      	orrs	r3, r2
 80064c2:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_HFSEL bits */
  tmpreg1 &= ~(DAC_MCR_HFSEL);
 80064c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064c6:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80064ca:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for both DAC channels: high frequency mode */
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC == sConfig->DAC_HighFrequency)
 80064cc:	68bb      	ldr	r3, [r7, #8]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	2b02      	cmp	r3, #2
 80064d2:	d114      	bne.n	80064fe <HAL_DAC_ConfigChannel+0x246>
  {
    hclkfreq = HAL_RCC_GetHCLKFreq();
 80064d4:	f001 fa3a 	bl	800794c <HAL_RCC_GetHCLKFreq>
 80064d8:	6178      	str	r0, [r7, #20]
    if (hclkfreq > HFSEL_ENABLE_THRESHOLD_160MHZ)
 80064da:	697b      	ldr	r3, [r7, #20]
 80064dc:	4a48      	ldr	r2, [pc, #288]	; (8006600 <HAL_DAC_ConfigChannel+0x348>)
 80064de:	4293      	cmp	r3, r2
 80064e0:	d904      	bls.n	80064ec <HAL_DAC_ConfigChannel+0x234>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_160MHZ;
 80064e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064e4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80064e8:	627b      	str	r3, [r7, #36]	; 0x24
 80064ea:	e00f      	b.n	800650c <HAL_DAC_ConfigChannel+0x254>
    }
    else if (hclkfreq > HFSEL_ENABLE_THRESHOLD_80MHZ)
 80064ec:	697b      	ldr	r3, [r7, #20]
 80064ee:	4a45      	ldr	r2, [pc, #276]	; (8006604 <HAL_DAC_ConfigChannel+0x34c>)
 80064f0:	4293      	cmp	r3, r2
 80064f2:	d90a      	bls.n	800650a <HAL_DAC_ConfigChannel+0x252>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 80064f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064f6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80064fa:	627b      	str	r3, [r7, #36]	; 0x24
 80064fc:	e006      	b.n	800650c <HAL_DAC_ConfigChannel+0x254>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
    }
  }
  else
  {
    tmpreg1 |= sConfig->DAC_HighFrequency;
 80064fe:	68bb      	ldr	r3, [r7, #8]
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006504:	4313      	orrs	r3, r2
 8006506:	627b      	str	r3, [r7, #36]	; 0x24
 8006508:	e000      	b.n	800650c <HAL_DAC_ConfigChannel+0x254>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
 800650a:	bf00      	nop
  }
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	f003 0310 	and.w	r3, r3, #16
 8006512:	69ba      	ldr	r2, [r7, #24]
 8006514:	fa02 f303 	lsl.w	r3, r2, r3
 8006518:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800651a:	4313      	orrs	r3, r2
 800651c:	627b      	str	r3, [r7, #36]	; 0x24
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006524:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	6819      	ldr	r1, [r3, #0]
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	f003 0310 	and.w	r3, r3, #16
 8006532:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8006536:	fa02 f303 	lsl.w	r3, r2, r3
 800653a:	43da      	mvns	r2, r3
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	400a      	ands	r2, r1
 8006542:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	627b      	str	r3, [r7, #36]	; 0x24
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	f003 0310 	and.w	r3, r3, #16
 8006552:	f640 72fe 	movw	r2, #4094	; 0xffe
 8006556:	fa02 f303 	lsl.w	r3, r2, r3
 800655a:	43db      	mvns	r3, r3
 800655c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800655e:	4013      	ands	r3, r2
 8006560:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8006562:	68bb      	ldr	r3, [r7, #8]
 8006564:	68db      	ldr	r3, [r3, #12]
 8006566:	61bb      	str	r3, [r7, #24]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	f003 0310 	and.w	r3, r3, #16
 800656e:	69ba      	ldr	r2, [r7, #24]
 8006570:	fa02 f303 	lsl.w	r3, r2, r3
 8006574:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006576:	4313      	orrs	r3, r2
 8006578:	627b      	str	r3, [r7, #36]	; 0x24
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006580:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	6819      	ldr	r1, [r3, #0]
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	f003 0310 	and.w	r3, r3, #16
 800658e:	22c0      	movs	r2, #192	; 0xc0
 8006590:	fa02 f303 	lsl.w	r3, r2, r3
 8006594:	43da      	mvns	r2, r3
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	400a      	ands	r2, r1
 800659c:	601a      	str	r2, [r3, #0]

  /* Set STRSTTRIGSELx and STINCTRIGSELx bits according to DAC_Trigger & DAC_Trigger2 values */
  tmpreg2 = ((sConfig->DAC_Trigger & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STRSTTRIGSEL1_Pos;
 800659e:	68bb      	ldr	r3, [r7, #8]
 80065a0:	68db      	ldr	r3, [r3, #12]
 80065a2:	089b      	lsrs	r3, r3, #2
 80065a4:	f003 030f 	and.w	r3, r3, #15
 80065a8:	61bb      	str	r3, [r7, #24]
  tmpreg2 |= ((sConfig->DAC_Trigger2 & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STINCTRIGSEL1_Pos;
 80065aa:	68bb      	ldr	r3, [r7, #8]
 80065ac:	691b      	ldr	r3, [r3, #16]
 80065ae:	089b      	lsrs	r3, r3, #2
 80065b0:	021b      	lsls	r3, r3, #8
 80065b2:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80065b6:	69ba      	ldr	r2, [r7, #24]
 80065b8:	4313      	orrs	r3, r2
 80065ba:	61bb      	str	r3, [r7, #24]
  /* Modify STMODR register value depending on DAC_Channel */
  MODIFY_REG(hdac->Instance->STMODR, (DAC_STMODR_STINCTRIGSEL1 | DAC_STMODR_STRSTTRIGSEL1) << (Channel & 0x10UL), tmpreg2 << (Channel & 0x10UL));
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	f003 0310 	and.w	r3, r3, #16
 80065c8:	f640 710f 	movw	r1, #3855	; 0xf0f
 80065cc:	fa01 f303 	lsl.w	r3, r1, r3
 80065d0:	43db      	mvns	r3, r3
 80065d2:	ea02 0103 	and.w	r1, r2, r3
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	f003 0310 	and.w	r3, r3, #16
 80065dc:	69ba      	ldr	r2, [r7, #24]
 80065de:	409a      	lsls	r2, r3
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	430a      	orrs	r2, r1
 80065e6:	661a      	str	r2, [r3, #96]	; 0x60
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	2201      	movs	r2, #1
 80065ec:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	2200      	movs	r2, #0
 80065f2:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80065f4:	2300      	movs	r3, #0
}
 80065f6:	4618      	mov	r0, r3
 80065f8:	3728      	adds	r7, #40	; 0x28
 80065fa:	46bd      	mov	sp, r7
 80065fc:	bd80      	pop	{r7, pc}
 80065fe:	bf00      	nop
 8006600:	09896800 	.word	0x09896800
 8006604:	04c4b400 	.word	0x04c4b400

08006608 <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8006608:	b480      	push	{r7}
 800660a:	b083      	sub	sp, #12
 800660c:	af00      	add	r7, sp, #0
 800660e:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_DMAUnderrunCallbackCh2 could be implemented in the user file
   */
}
 8006610:	bf00      	nop
 8006612:	370c      	adds	r7, #12
 8006614:	46bd      	mov	sp, r7
 8006616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800661a:	4770      	bx	lr

0800661c <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800661c:	b480      	push	{r7}
 800661e:	b085      	sub	sp, #20
 8006620:	af00      	add	r7, sp, #0
 8006622:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006624:	2300      	movs	r3, #0
 8006626:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800662e:	b2db      	uxtb	r3, r3
 8006630:	2b02      	cmp	r3, #2
 8006632:	d005      	beq.n	8006640 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	2204      	movs	r2, #4
 8006638:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 800663a:	2301      	movs	r3, #1
 800663c:	73fb      	strb	r3, [r7, #15]
 800663e:	e037      	b.n	80066b0 <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	681a      	ldr	r2, [r3, #0]
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	f022 020e 	bic.w	r2, r2, #14
 800664e:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006654:	681a      	ldr	r2, [r3, #0]
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800665a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800665e:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	681a      	ldr	r2, [r3, #0]
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	f022 0201 	bic.w	r2, r2, #1
 800666e:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006674:	f003 021f 	and.w	r2, r3, #31
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800667c:	2101      	movs	r1, #1
 800667e:	fa01 f202 	lsl.w	r2, r1, r2
 8006682:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006688:	687a      	ldr	r2, [r7, #4]
 800668a:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800668c:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006692:	2b00      	cmp	r3, #0
 8006694:	d00c      	beq.n	80066b0 <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800669a:	681a      	ldr	r2, [r3, #0]
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80066a0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80066a4:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80066aa:	687a      	ldr	r2, [r7, #4]
 80066ac:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80066ae:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	2201      	movs	r2, #1
 80066b4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	2200      	movs	r2, #0
 80066bc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
 80066c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80066c2:	4618      	mov	r0, r3
 80066c4:	3714      	adds	r7, #20
 80066c6:	46bd      	mov	sp, r7
 80066c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066cc:	4770      	bx	lr

080066ce <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80066ce:	b580      	push	{r7, lr}
 80066d0:	b084      	sub	sp, #16
 80066d2:	af00      	add	r7, sp, #0
 80066d4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80066d6:	2300      	movs	r3, #0
 80066d8:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80066e0:	b2db      	uxtb	r3, r3
 80066e2:	2b02      	cmp	r3, #2
 80066e4:	d00d      	beq.n	8006702 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	2204      	movs	r2, #4
 80066ea:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	2201      	movs	r2, #1
 80066f0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	2200      	movs	r2, #0
 80066f8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    status = HAL_ERROR;
 80066fc:	2301      	movs	r3, #1
 80066fe:	73fb      	strb	r3, [r7, #15]
 8006700:	e047      	b.n	8006792 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	681a      	ldr	r2, [r3, #0]
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	f022 020e 	bic.w	r2, r2, #14
 8006710:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	681a      	ldr	r2, [r3, #0]
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	f022 0201 	bic.w	r2, r2, #1
 8006720:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006726:	681a      	ldr	r2, [r3, #0]
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800672c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006730:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006736:	f003 021f 	and.w	r2, r3, #31
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800673e:	2101      	movs	r1, #1
 8006740:	fa01 f202 	lsl.w	r2, r1, r2
 8006744:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800674a:	687a      	ldr	r2, [r7, #4]
 800674c:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800674e:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006754:	2b00      	cmp	r3, #0
 8006756:	d00c      	beq.n	8006772 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800675c:	681a      	ldr	r2, [r3, #0]
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006762:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006766:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800676c:	687a      	ldr	r2, [r7, #4]
 800676e:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8006770:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	2201      	movs	r2, #1
 8006776:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	2200      	movs	r2, #0
 800677e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006786:	2b00      	cmp	r3, #0
 8006788:	d003      	beq.n	8006792 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800678e:	6878      	ldr	r0, [r7, #4]
 8006790:	4798      	blx	r3
    }
  }
  return status;
 8006792:	7bfb      	ldrb	r3, [r7, #15]
}
 8006794:	4618      	mov	r0, r3
 8006796:	3710      	adds	r7, #16
 8006798:	46bd      	mov	sp, r7
 800679a:	bd80      	pop	{r7, pc}

0800679c <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 800679c:	b580      	push	{r7, lr}
 800679e:	b084      	sub	sp, #16
 80067a0:	af00      	add	r7, sp, #0
 80067a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	2b00      	cmp	r3, #0
 80067a8:	d101      	bne.n	80067ae <HAL_FDCAN_Init+0x12>
  {
    return HAL_ERROR;
 80067aa:	2301      	movs	r3, #1
 80067ac:	e147      	b.n	8006a3e <HAL_FDCAN_Init+0x2a2>

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80067b4:	b2db      	uxtb	r3, r3
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	d106      	bne.n	80067c8 <HAL_FDCAN_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	2200      	movs	r2, #0
 80067be:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 80067c2:	6878      	ldr	r0, [r7, #4]
 80067c4:	f7fc fbbc 	bl	8002f40 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	699a      	ldr	r2, [r3, #24]
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	f022 0210 	bic.w	r2, r2, #16
 80067d6:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 80067d8:	f7fd f8ec 	bl	80039b4 <HAL_GetTick>
 80067dc:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 80067de:	e012      	b.n	8006806 <HAL_FDCAN_Init+0x6a>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 80067e0:	f7fd f8e8 	bl	80039b4 <HAL_GetTick>
 80067e4:	4602      	mov	r2, r0
 80067e6:	68fb      	ldr	r3, [r7, #12]
 80067e8:	1ad3      	subs	r3, r2, r3
 80067ea:	2b0a      	cmp	r3, #10
 80067ec:	d90b      	bls.n	8006806 <HAL_FDCAN_Init+0x6a>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80067f2:	f043 0201 	orr.w	r2, r3, #1
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	661a      	str	r2, [r3, #96]	; 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	2203      	movs	r2, #3
 80067fe:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 8006802:	2301      	movs	r3, #1
 8006804:	e11b      	b.n	8006a3e <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	699b      	ldr	r3, [r3, #24]
 800680c:	f003 0308 	and.w	r3, r3, #8
 8006810:	2b08      	cmp	r3, #8
 8006812:	d0e5      	beq.n	80067e0 <HAL_FDCAN_Init+0x44>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	699a      	ldr	r2, [r3, #24]
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	f042 0201 	orr.w	r2, r2, #1
 8006822:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006824:	f7fd f8c6 	bl	80039b4 <HAL_GetTick>
 8006828:	60f8      	str	r0, [r7, #12]

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 800682a:	e012      	b.n	8006852 <HAL_FDCAN_Init+0xb6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 800682c:	f7fd f8c2 	bl	80039b4 <HAL_GetTick>
 8006830:	4602      	mov	r2, r0
 8006832:	68fb      	ldr	r3, [r7, #12]
 8006834:	1ad3      	subs	r3, r2, r3
 8006836:	2b0a      	cmp	r3, #10
 8006838:	d90b      	bls.n	8006852 <HAL_FDCAN_Init+0xb6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800683e:	f043 0201 	orr.w	r2, r3, #1
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	661a      	str	r2, [r3, #96]	; 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	2203      	movs	r2, #3
 800684a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 800684e:	2301      	movs	r3, #1
 8006850:	e0f5      	b.n	8006a3e <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	699b      	ldr	r3, [r3, #24]
 8006858:	f003 0301 	and.w	r3, r3, #1
 800685c:	2b00      	cmp	r3, #0
 800685e:	d0e5      	beq.n	800682c <HAL_FDCAN_Init+0x90>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	699a      	ldr	r2, [r3, #24]
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	f042 0202 	orr.w	r2, r2, #2
 800686e:	619a      	str	r2, [r3, #24]

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	4a74      	ldr	r2, [pc, #464]	; (8006a48 <HAL_FDCAN_Init+0x2ac>)
 8006876:	4293      	cmp	r3, r2
 8006878:	d103      	bne.n	8006882 <HAL_FDCAN_Init+0xe6>
  {
    /* Configure Clock divider */
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 800687a:	4a74      	ldr	r2, [pc, #464]	; (8006a4c <HAL_FDCAN_Init+0x2b0>)
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	685b      	ldr	r3, [r3, #4]
 8006880:	6013      	str	r3, [r2, #0]
  }

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	7c1b      	ldrb	r3, [r3, #16]
 8006886:	2b01      	cmp	r3, #1
 8006888:	d108      	bne.n	800689c <HAL_FDCAN_Init+0x100>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	699a      	ldr	r2, [r3, #24]
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006898:	619a      	str	r2, [r3, #24]
 800689a:	e007      	b.n	80068ac <HAL_FDCAN_Init+0x110>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	699a      	ldr	r2, [r3, #24]
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80068aa:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	7c5b      	ldrb	r3, [r3, #17]
 80068b0:	2b01      	cmp	r3, #1
 80068b2:	d108      	bne.n	80068c6 <HAL_FDCAN_Init+0x12a>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	699a      	ldr	r2, [r3, #24]
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80068c2:	619a      	str	r2, [r3, #24]
 80068c4:	e007      	b.n	80068d6 <HAL_FDCAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	699a      	ldr	r2, [r3, #24]
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80068d4:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	7c9b      	ldrb	r3, [r3, #18]
 80068da:	2b01      	cmp	r3, #1
 80068dc:	d108      	bne.n	80068f0 <HAL_FDCAN_Init+0x154>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	699a      	ldr	r2, [r3, #24]
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80068ec:	619a      	str	r2, [r3, #24]
 80068ee:	e007      	b.n	8006900 <HAL_FDCAN_Init+0x164>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	699a      	ldr	r2, [r3, #24]
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80068fe:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	699b      	ldr	r3, [r3, #24]
 8006906:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	689a      	ldr	r2, [r3, #8]
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	430a      	orrs	r2, r1
 8006914:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	699a      	ldr	r2, [r3, #24]
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 8006924:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	691a      	ldr	r2, [r3, #16]
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	f022 0210 	bic.w	r2, r2, #16
 8006934:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	68db      	ldr	r3, [r3, #12]
 800693a:	2b01      	cmp	r3, #1
 800693c:	d108      	bne.n	8006950 <HAL_FDCAN_Init+0x1b4>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	699a      	ldr	r2, [r3, #24]
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	f042 0204 	orr.w	r2, r2, #4
 800694c:	619a      	str	r2, [r3, #24]
 800694e:	e02c      	b.n	80069aa <HAL_FDCAN_Init+0x20e>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	68db      	ldr	r3, [r3, #12]
 8006954:	2b00      	cmp	r3, #0
 8006956:	d028      	beq.n	80069aa <HAL_FDCAN_Init+0x20e>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	68db      	ldr	r3, [r3, #12]
 800695c:	2b02      	cmp	r3, #2
 800695e:	d01c      	beq.n	800699a <HAL_FDCAN_Init+0x1fe>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	699a      	ldr	r2, [r3, #24]
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800696e:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	691a      	ldr	r2, [r3, #16]
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	f042 0210 	orr.w	r2, r2, #16
 800697e:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	68db      	ldr	r3, [r3, #12]
 8006984:	2b03      	cmp	r3, #3
 8006986:	d110      	bne.n	80069aa <HAL_FDCAN_Init+0x20e>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	699a      	ldr	r2, [r3, #24]
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	f042 0220 	orr.w	r2, r2, #32
 8006996:	619a      	str	r2, [r3, #24]
 8006998:	e007      	b.n	80069aa <HAL_FDCAN_Init+0x20e>
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	699a      	ldr	r2, [r3, #24]
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	f042 0220 	orr.w	r2, r2, #32
 80069a8:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	699b      	ldr	r3, [r3, #24]
 80069ae:	3b01      	subs	r3, #1
 80069b0:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	69db      	ldr	r3, [r3, #28]
 80069b6:	3b01      	subs	r3, #1
 80069b8:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80069ba:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	6a1b      	ldr	r3, [r3, #32]
 80069c0:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 80069c2:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	695b      	ldr	r3, [r3, #20]
 80069ca:	3b01      	subs	r3, #1
 80069cc:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 80069d2:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80069d4:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	689b      	ldr	r3, [r3, #8]
 80069da:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80069de:	d115      	bne.n	8006a0c <HAL_FDCAN_Init+0x270>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80069e4:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069ea:	3b01      	subs	r3, #1
 80069ec:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80069ee:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80069f4:	3b01      	subs	r3, #1
 80069f6:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 80069f8:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a00:	3b01      	subs	r3, #1
 8006a02:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8006a08:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8006a0a:	60da      	str	r2, [r3, #12]
  }

  /* Select between Tx FIFO and Tx Queue operation modes */
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	430a      	orrs	r2, r1
 8006a1e:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Calculate each RAM block address */
  FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8006a22:	6878      	ldr	r0, [r7, #4]
 8006a24:	f000 f814 	bl	8006a50 <FDCAN_CalcultateRamBlockAddresses>

  /* Initialize the Latest Tx request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	2200      	movs	r2, #0
 8006a2c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	2200      	movs	r2, #0
 8006a32:	661a      	str	r2, [r3, #96]	; 0x60

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	2201      	movs	r2, #1
 8006a38:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Return function status */
  return HAL_OK;
 8006a3c:	2300      	movs	r3, #0
}
 8006a3e:	4618      	mov	r0, r3
 8006a40:	3710      	adds	r7, #16
 8006a42:	46bd      	mov	sp, r7
 8006a44:	bd80      	pop	{r7, pc}
 8006a46:	bf00      	nop
 8006a48:	40006400 	.word	0x40006400
 8006a4c:	40006500 	.word	0x40006500

08006a50 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval none
 */
static void FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8006a50:	b480      	push	{r7}
 8006a52:	b085      	sub	sp, #20
 8006a54:	af00      	add	r7, sp, #0
 8006a56:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
 8006a58:	4b27      	ldr	r3, [pc, #156]	; (8006af8 <FDCAN_CalcultateRamBlockAddresses+0xa8>)
 8006a5a:	60bb      	str	r3, [r7, #8]
    SramCanInstanceBase += SRAMCAN_SIZE * 2U;
  }
#endif /* FDCAN3 */

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	68ba      	ldr	r2, [r7, #8]
 8006a60:	641a      	str	r2, [r3, #64]	; 0x40

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006a6a:	f423 11f8 	bic.w	r1, r3, #2031616	; 0x1f0000
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006a72:	041a      	lsls	r2, r3, #16
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	430a      	orrs	r2, r1
 8006a7a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 8006a7e:	68bb      	ldr	r3, [r7, #8]
 8006a80:	f103 0270 	add.w	r2, r3, #112	; 0x70
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	645a      	str	r2, [r3, #68]	; 0x44

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006a90:	f023 6170 	bic.w	r1, r3, #251658240	; 0xf000000
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a98:	061a      	lsls	r2, r3, #24
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	430a      	orrs	r2, r1
 8006aa0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 8006aa4:	68bb      	ldr	r3, [r7, #8]
 8006aa6:	f103 02b0 	add.w	r2, r3, #176	; 0xb0
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	649a      	str	r2, [r3, #72]	; 0x48

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 8006aae:	68bb      	ldr	r3, [r7, #8]
 8006ab0:	f503 72c4 	add.w	r2, r3, #392	; 0x188
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 8006ab8:	68bb      	ldr	r3, [r7, #8]
 8006aba:	f503 7218 	add.w	r2, r3, #608	; 0x260
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	651a      	str	r2, [r3, #80]	; 0x50

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 8006ac2:	68bb      	ldr	r3, [r7, #8]
 8006ac4:	f503 721e 	add.w	r2, r3, #632	; 0x278
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	655a      	str	r2, [r3, #84]	; 0x54

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8006acc:	68bb      	ldr	r3, [r7, #8]
 8006ace:	60fb      	str	r3, [r7, #12]
 8006ad0:	e005      	b.n	8006ade <FDCAN_CalcultateRamBlockAddresses+0x8e>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 8006ad2:	68fb      	ldr	r3, [r7, #12]
 8006ad4:	2200      	movs	r2, #0
 8006ad6:	601a      	str	r2, [r3, #0]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	3304      	adds	r3, #4
 8006adc:	60fb      	str	r3, [r7, #12]
 8006ade:	68bb      	ldr	r3, [r7, #8]
 8006ae0:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8006ae4:	68fa      	ldr	r2, [r7, #12]
 8006ae6:	429a      	cmp	r2, r3
 8006ae8:	d3f3      	bcc.n	8006ad2 <FDCAN_CalcultateRamBlockAddresses+0x82>
  }
}
 8006aea:	bf00      	nop
 8006aec:	bf00      	nop
 8006aee:	3714      	adds	r7, #20
 8006af0:	46bd      	mov	sp, r7
 8006af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006af6:	4770      	bx	lr
 8006af8:	4000a400 	.word	0x4000a400

08006afc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006afc:	b480      	push	{r7}
 8006afe:	b087      	sub	sp, #28
 8006b00:	af00      	add	r7, sp, #0
 8006b02:	6078      	str	r0, [r7, #4]
 8006b04:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8006b06:	2300      	movs	r3, #0
 8006b08:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8006b0a:	e15a      	b.n	8006dc2 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8006b0c:	683b      	ldr	r3, [r7, #0]
 8006b0e:	681a      	ldr	r2, [r3, #0]
 8006b10:	2101      	movs	r1, #1
 8006b12:	697b      	ldr	r3, [r7, #20]
 8006b14:	fa01 f303 	lsl.w	r3, r1, r3
 8006b18:	4013      	ands	r3, r2
 8006b1a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8006b1c:	68fb      	ldr	r3, [r7, #12]
 8006b1e:	2b00      	cmp	r3, #0
 8006b20:	f000 814c 	beq.w	8006dbc <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8006b24:	683b      	ldr	r3, [r7, #0]
 8006b26:	685b      	ldr	r3, [r3, #4]
 8006b28:	f003 0303 	and.w	r3, r3, #3
 8006b2c:	2b01      	cmp	r3, #1
 8006b2e:	d005      	beq.n	8006b3c <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8006b30:	683b      	ldr	r3, [r7, #0]
 8006b32:	685b      	ldr	r3, [r3, #4]
 8006b34:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8006b38:	2b02      	cmp	r3, #2
 8006b3a:	d130      	bne.n	8006b9e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	689b      	ldr	r3, [r3, #8]
 8006b40:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8006b42:	697b      	ldr	r3, [r7, #20]
 8006b44:	005b      	lsls	r3, r3, #1
 8006b46:	2203      	movs	r2, #3
 8006b48:	fa02 f303 	lsl.w	r3, r2, r3
 8006b4c:	43db      	mvns	r3, r3
 8006b4e:	693a      	ldr	r2, [r7, #16]
 8006b50:	4013      	ands	r3, r2
 8006b52:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8006b54:	683b      	ldr	r3, [r7, #0]
 8006b56:	68da      	ldr	r2, [r3, #12]
 8006b58:	697b      	ldr	r3, [r7, #20]
 8006b5a:	005b      	lsls	r3, r3, #1
 8006b5c:	fa02 f303 	lsl.w	r3, r2, r3
 8006b60:	693a      	ldr	r2, [r7, #16]
 8006b62:	4313      	orrs	r3, r2
 8006b64:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	693a      	ldr	r2, [r7, #16]
 8006b6a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	685b      	ldr	r3, [r3, #4]
 8006b70:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8006b72:	2201      	movs	r2, #1
 8006b74:	697b      	ldr	r3, [r7, #20]
 8006b76:	fa02 f303 	lsl.w	r3, r2, r3
 8006b7a:	43db      	mvns	r3, r3
 8006b7c:	693a      	ldr	r2, [r7, #16]
 8006b7e:	4013      	ands	r3, r2
 8006b80:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8006b82:	683b      	ldr	r3, [r7, #0]
 8006b84:	685b      	ldr	r3, [r3, #4]
 8006b86:	091b      	lsrs	r3, r3, #4
 8006b88:	f003 0201 	and.w	r2, r3, #1
 8006b8c:	697b      	ldr	r3, [r7, #20]
 8006b8e:	fa02 f303 	lsl.w	r3, r2, r3
 8006b92:	693a      	ldr	r2, [r7, #16]
 8006b94:	4313      	orrs	r3, r2
 8006b96:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	693a      	ldr	r2, [r7, #16]
 8006b9c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8006b9e:	683b      	ldr	r3, [r7, #0]
 8006ba0:	685b      	ldr	r3, [r3, #4]
 8006ba2:	f003 0303 	and.w	r3, r3, #3
 8006ba6:	2b03      	cmp	r3, #3
 8006ba8:	d017      	beq.n	8006bda <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	68db      	ldr	r3, [r3, #12]
 8006bae:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8006bb0:	697b      	ldr	r3, [r7, #20]
 8006bb2:	005b      	lsls	r3, r3, #1
 8006bb4:	2203      	movs	r2, #3
 8006bb6:	fa02 f303 	lsl.w	r3, r2, r3
 8006bba:	43db      	mvns	r3, r3
 8006bbc:	693a      	ldr	r2, [r7, #16]
 8006bbe:	4013      	ands	r3, r2
 8006bc0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006bc2:	683b      	ldr	r3, [r7, #0]
 8006bc4:	689a      	ldr	r2, [r3, #8]
 8006bc6:	697b      	ldr	r3, [r7, #20]
 8006bc8:	005b      	lsls	r3, r3, #1
 8006bca:	fa02 f303 	lsl.w	r3, r2, r3
 8006bce:	693a      	ldr	r2, [r7, #16]
 8006bd0:	4313      	orrs	r3, r2
 8006bd2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	693a      	ldr	r2, [r7, #16]
 8006bd8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006bda:	683b      	ldr	r3, [r7, #0]
 8006bdc:	685b      	ldr	r3, [r3, #4]
 8006bde:	f003 0303 	and.w	r3, r3, #3
 8006be2:	2b02      	cmp	r3, #2
 8006be4:	d123      	bne.n	8006c2e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8006be6:	697b      	ldr	r3, [r7, #20]
 8006be8:	08da      	lsrs	r2, r3, #3
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	3208      	adds	r2, #8
 8006bee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006bf2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8006bf4:	697b      	ldr	r3, [r7, #20]
 8006bf6:	f003 0307 	and.w	r3, r3, #7
 8006bfa:	009b      	lsls	r3, r3, #2
 8006bfc:	220f      	movs	r2, #15
 8006bfe:	fa02 f303 	lsl.w	r3, r2, r3
 8006c02:	43db      	mvns	r3, r3
 8006c04:	693a      	ldr	r2, [r7, #16]
 8006c06:	4013      	ands	r3, r2
 8006c08:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8006c0a:	683b      	ldr	r3, [r7, #0]
 8006c0c:	691a      	ldr	r2, [r3, #16]
 8006c0e:	697b      	ldr	r3, [r7, #20]
 8006c10:	f003 0307 	and.w	r3, r3, #7
 8006c14:	009b      	lsls	r3, r3, #2
 8006c16:	fa02 f303 	lsl.w	r3, r2, r3
 8006c1a:	693a      	ldr	r2, [r7, #16]
 8006c1c:	4313      	orrs	r3, r2
 8006c1e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8006c20:	697b      	ldr	r3, [r7, #20]
 8006c22:	08da      	lsrs	r2, r3, #3
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	3208      	adds	r2, #8
 8006c28:	6939      	ldr	r1, [r7, #16]
 8006c2a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8006c34:	697b      	ldr	r3, [r7, #20]
 8006c36:	005b      	lsls	r3, r3, #1
 8006c38:	2203      	movs	r2, #3
 8006c3a:	fa02 f303 	lsl.w	r3, r2, r3
 8006c3e:	43db      	mvns	r3, r3
 8006c40:	693a      	ldr	r2, [r7, #16]
 8006c42:	4013      	ands	r3, r2
 8006c44:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8006c46:	683b      	ldr	r3, [r7, #0]
 8006c48:	685b      	ldr	r3, [r3, #4]
 8006c4a:	f003 0203 	and.w	r2, r3, #3
 8006c4e:	697b      	ldr	r3, [r7, #20]
 8006c50:	005b      	lsls	r3, r3, #1
 8006c52:	fa02 f303 	lsl.w	r3, r2, r3
 8006c56:	693a      	ldr	r2, [r7, #16]
 8006c58:	4313      	orrs	r3, r2
 8006c5a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	693a      	ldr	r2, [r7, #16]
 8006c60:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8006c62:	683b      	ldr	r3, [r7, #0]
 8006c64:	685b      	ldr	r3, [r3, #4]
 8006c66:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8006c6a:	2b00      	cmp	r3, #0
 8006c6c:	f000 80a6 	beq.w	8006dbc <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006c70:	4b5b      	ldr	r3, [pc, #364]	; (8006de0 <HAL_GPIO_Init+0x2e4>)
 8006c72:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006c74:	4a5a      	ldr	r2, [pc, #360]	; (8006de0 <HAL_GPIO_Init+0x2e4>)
 8006c76:	f043 0301 	orr.w	r3, r3, #1
 8006c7a:	6613      	str	r3, [r2, #96]	; 0x60
 8006c7c:	4b58      	ldr	r3, [pc, #352]	; (8006de0 <HAL_GPIO_Init+0x2e4>)
 8006c7e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006c80:	f003 0301 	and.w	r3, r3, #1
 8006c84:	60bb      	str	r3, [r7, #8]
 8006c86:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8006c88:	4a56      	ldr	r2, [pc, #344]	; (8006de4 <HAL_GPIO_Init+0x2e8>)
 8006c8a:	697b      	ldr	r3, [r7, #20]
 8006c8c:	089b      	lsrs	r3, r3, #2
 8006c8e:	3302      	adds	r3, #2
 8006c90:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006c94:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8006c96:	697b      	ldr	r3, [r7, #20]
 8006c98:	f003 0303 	and.w	r3, r3, #3
 8006c9c:	009b      	lsls	r3, r3, #2
 8006c9e:	220f      	movs	r2, #15
 8006ca0:	fa02 f303 	lsl.w	r3, r2, r3
 8006ca4:	43db      	mvns	r3, r3
 8006ca6:	693a      	ldr	r2, [r7, #16]
 8006ca8:	4013      	ands	r3, r2
 8006caa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8006cb2:	d01f      	beq.n	8006cf4 <HAL_GPIO_Init+0x1f8>
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	4a4c      	ldr	r2, [pc, #304]	; (8006de8 <HAL_GPIO_Init+0x2ec>)
 8006cb8:	4293      	cmp	r3, r2
 8006cba:	d019      	beq.n	8006cf0 <HAL_GPIO_Init+0x1f4>
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	4a4b      	ldr	r2, [pc, #300]	; (8006dec <HAL_GPIO_Init+0x2f0>)
 8006cc0:	4293      	cmp	r3, r2
 8006cc2:	d013      	beq.n	8006cec <HAL_GPIO_Init+0x1f0>
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	4a4a      	ldr	r2, [pc, #296]	; (8006df0 <HAL_GPIO_Init+0x2f4>)
 8006cc8:	4293      	cmp	r3, r2
 8006cca:	d00d      	beq.n	8006ce8 <HAL_GPIO_Init+0x1ec>
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	4a49      	ldr	r2, [pc, #292]	; (8006df4 <HAL_GPIO_Init+0x2f8>)
 8006cd0:	4293      	cmp	r3, r2
 8006cd2:	d007      	beq.n	8006ce4 <HAL_GPIO_Init+0x1e8>
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	4a48      	ldr	r2, [pc, #288]	; (8006df8 <HAL_GPIO_Init+0x2fc>)
 8006cd8:	4293      	cmp	r3, r2
 8006cda:	d101      	bne.n	8006ce0 <HAL_GPIO_Init+0x1e4>
 8006cdc:	2305      	movs	r3, #5
 8006cde:	e00a      	b.n	8006cf6 <HAL_GPIO_Init+0x1fa>
 8006ce0:	2306      	movs	r3, #6
 8006ce2:	e008      	b.n	8006cf6 <HAL_GPIO_Init+0x1fa>
 8006ce4:	2304      	movs	r3, #4
 8006ce6:	e006      	b.n	8006cf6 <HAL_GPIO_Init+0x1fa>
 8006ce8:	2303      	movs	r3, #3
 8006cea:	e004      	b.n	8006cf6 <HAL_GPIO_Init+0x1fa>
 8006cec:	2302      	movs	r3, #2
 8006cee:	e002      	b.n	8006cf6 <HAL_GPIO_Init+0x1fa>
 8006cf0:	2301      	movs	r3, #1
 8006cf2:	e000      	b.n	8006cf6 <HAL_GPIO_Init+0x1fa>
 8006cf4:	2300      	movs	r3, #0
 8006cf6:	697a      	ldr	r2, [r7, #20]
 8006cf8:	f002 0203 	and.w	r2, r2, #3
 8006cfc:	0092      	lsls	r2, r2, #2
 8006cfe:	4093      	lsls	r3, r2
 8006d00:	693a      	ldr	r2, [r7, #16]
 8006d02:	4313      	orrs	r3, r2
 8006d04:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8006d06:	4937      	ldr	r1, [pc, #220]	; (8006de4 <HAL_GPIO_Init+0x2e8>)
 8006d08:	697b      	ldr	r3, [r7, #20]
 8006d0a:	089b      	lsrs	r3, r3, #2
 8006d0c:	3302      	adds	r3, #2
 8006d0e:	693a      	ldr	r2, [r7, #16]
 8006d10:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8006d14:	4b39      	ldr	r3, [pc, #228]	; (8006dfc <HAL_GPIO_Init+0x300>)
 8006d16:	689b      	ldr	r3, [r3, #8]
 8006d18:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006d1a:	68fb      	ldr	r3, [r7, #12]
 8006d1c:	43db      	mvns	r3, r3
 8006d1e:	693a      	ldr	r2, [r7, #16]
 8006d20:	4013      	ands	r3, r2
 8006d22:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8006d24:	683b      	ldr	r3, [r7, #0]
 8006d26:	685b      	ldr	r3, [r3, #4]
 8006d28:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006d2c:	2b00      	cmp	r3, #0
 8006d2e:	d003      	beq.n	8006d38 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8006d30:	693a      	ldr	r2, [r7, #16]
 8006d32:	68fb      	ldr	r3, [r7, #12]
 8006d34:	4313      	orrs	r3, r2
 8006d36:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8006d38:	4a30      	ldr	r2, [pc, #192]	; (8006dfc <HAL_GPIO_Init+0x300>)
 8006d3a:	693b      	ldr	r3, [r7, #16]
 8006d3c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8006d3e:	4b2f      	ldr	r3, [pc, #188]	; (8006dfc <HAL_GPIO_Init+0x300>)
 8006d40:	68db      	ldr	r3, [r3, #12]
 8006d42:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	43db      	mvns	r3, r3
 8006d48:	693a      	ldr	r2, [r7, #16]
 8006d4a:	4013      	ands	r3, r2
 8006d4c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8006d4e:	683b      	ldr	r3, [r7, #0]
 8006d50:	685b      	ldr	r3, [r3, #4]
 8006d52:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006d56:	2b00      	cmp	r3, #0
 8006d58:	d003      	beq.n	8006d62 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8006d5a:	693a      	ldr	r2, [r7, #16]
 8006d5c:	68fb      	ldr	r3, [r7, #12]
 8006d5e:	4313      	orrs	r3, r2
 8006d60:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8006d62:	4a26      	ldr	r2, [pc, #152]	; (8006dfc <HAL_GPIO_Init+0x300>)
 8006d64:	693b      	ldr	r3, [r7, #16]
 8006d66:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8006d68:	4b24      	ldr	r3, [pc, #144]	; (8006dfc <HAL_GPIO_Init+0x300>)
 8006d6a:	685b      	ldr	r3, [r3, #4]
 8006d6c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006d6e:	68fb      	ldr	r3, [r7, #12]
 8006d70:	43db      	mvns	r3, r3
 8006d72:	693a      	ldr	r2, [r7, #16]
 8006d74:	4013      	ands	r3, r2
 8006d76:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8006d78:	683b      	ldr	r3, [r7, #0]
 8006d7a:	685b      	ldr	r3, [r3, #4]
 8006d7c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006d80:	2b00      	cmp	r3, #0
 8006d82:	d003      	beq.n	8006d8c <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8006d84:	693a      	ldr	r2, [r7, #16]
 8006d86:	68fb      	ldr	r3, [r7, #12]
 8006d88:	4313      	orrs	r3, r2
 8006d8a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8006d8c:	4a1b      	ldr	r2, [pc, #108]	; (8006dfc <HAL_GPIO_Init+0x300>)
 8006d8e:	693b      	ldr	r3, [r7, #16]
 8006d90:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8006d92:	4b1a      	ldr	r3, [pc, #104]	; (8006dfc <HAL_GPIO_Init+0x300>)
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006d98:	68fb      	ldr	r3, [r7, #12]
 8006d9a:	43db      	mvns	r3, r3
 8006d9c:	693a      	ldr	r2, [r7, #16]
 8006d9e:	4013      	ands	r3, r2
 8006da0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8006da2:	683b      	ldr	r3, [r7, #0]
 8006da4:	685b      	ldr	r3, [r3, #4]
 8006da6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006daa:	2b00      	cmp	r3, #0
 8006dac:	d003      	beq.n	8006db6 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8006dae:	693a      	ldr	r2, [r7, #16]
 8006db0:	68fb      	ldr	r3, [r7, #12]
 8006db2:	4313      	orrs	r3, r2
 8006db4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8006db6:	4a11      	ldr	r2, [pc, #68]	; (8006dfc <HAL_GPIO_Init+0x300>)
 8006db8:	693b      	ldr	r3, [r7, #16]
 8006dba:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8006dbc:	697b      	ldr	r3, [r7, #20]
 8006dbe:	3301      	adds	r3, #1
 8006dc0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8006dc2:	683b      	ldr	r3, [r7, #0]
 8006dc4:	681a      	ldr	r2, [r3, #0]
 8006dc6:	697b      	ldr	r3, [r7, #20]
 8006dc8:	fa22 f303 	lsr.w	r3, r2, r3
 8006dcc:	2b00      	cmp	r3, #0
 8006dce:	f47f ae9d 	bne.w	8006b0c <HAL_GPIO_Init+0x10>
  }
}
 8006dd2:	bf00      	nop
 8006dd4:	bf00      	nop
 8006dd6:	371c      	adds	r7, #28
 8006dd8:	46bd      	mov	sp, r7
 8006dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dde:	4770      	bx	lr
 8006de0:	40021000 	.word	0x40021000
 8006de4:	40010000 	.word	0x40010000
 8006de8:	48000400 	.word	0x48000400
 8006dec:	48000800 	.word	0x48000800
 8006df0:	48000c00 	.word	0x48000c00
 8006df4:	48001000 	.word	0x48001000
 8006df8:	48001400 	.word	0x48001400
 8006dfc:	40010400 	.word	0x40010400

08006e00 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006e00:	b480      	push	{r7}
 8006e02:	b083      	sub	sp, #12
 8006e04:	af00      	add	r7, sp, #0
 8006e06:	6078      	str	r0, [r7, #4]
 8006e08:	460b      	mov	r3, r1
 8006e0a:	807b      	strh	r3, [r7, #2]
 8006e0c:	4613      	mov	r3, r2
 8006e0e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8006e10:	787b      	ldrb	r3, [r7, #1]
 8006e12:	2b00      	cmp	r3, #0
 8006e14:	d003      	beq.n	8006e1e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8006e16:	887a      	ldrh	r2, [r7, #2]
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8006e1c:	e002      	b.n	8006e24 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8006e1e:	887a      	ldrh	r2, [r7, #2]
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	629a      	str	r2, [r3, #40]	; 0x28
}
 8006e24:	bf00      	nop
 8006e26:	370c      	adds	r7, #12
 8006e28:	46bd      	mov	sp, r7
 8006e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e2e:	4770      	bx	lr

08006e30 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8006e30:	b580      	push	{r7, lr}
 8006e32:	b082      	sub	sp, #8
 8006e34:	af00      	add	r7, sp, #0
 8006e36:	4603      	mov	r3, r0
 8006e38:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8006e3a:	4b08      	ldr	r3, [pc, #32]	; (8006e5c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006e3c:	695a      	ldr	r2, [r3, #20]
 8006e3e:	88fb      	ldrh	r3, [r7, #6]
 8006e40:	4013      	ands	r3, r2
 8006e42:	2b00      	cmp	r3, #0
 8006e44:	d006      	beq.n	8006e54 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8006e46:	4a05      	ldr	r2, [pc, #20]	; (8006e5c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006e48:	88fb      	ldrh	r3, [r7, #6]
 8006e4a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8006e4c:	88fb      	ldrh	r3, [r7, #6]
 8006e4e:	4618      	mov	r0, r3
 8006e50:	f000 f806 	bl	8006e60 <HAL_GPIO_EXTI_Callback>
  }
}
 8006e54:	bf00      	nop
 8006e56:	3708      	adds	r7, #8
 8006e58:	46bd      	mov	sp, r7
 8006e5a:	bd80      	pop	{r7, pc}
 8006e5c:	40010400 	.word	0x40010400

08006e60 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8006e60:	b480      	push	{r7}
 8006e62:	b083      	sub	sp, #12
 8006e64:	af00      	add	r7, sp, #0
 8006e66:	4603      	mov	r3, r0
 8006e68:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8006e6a:	bf00      	nop
 8006e6c:	370c      	adds	r7, #12
 8006e6e:	46bd      	mov	sp, r7
 8006e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e74:	4770      	bx	lr
	...

08006e78 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8006e78:	b480      	push	{r7}
 8006e7a:	b085      	sub	sp, #20
 8006e7c:	af00      	add	r7, sp, #0
 8006e7e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	2b00      	cmp	r3, #0
 8006e84:	d141      	bne.n	8006f0a <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8006e86:	4b4b      	ldr	r3, [pc, #300]	; (8006fb4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8006e8e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006e92:	d131      	bne.n	8006ef8 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8006e94:	4b47      	ldr	r3, [pc, #284]	; (8006fb4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006e96:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006e9a:	4a46      	ldr	r2, [pc, #280]	; (8006fb4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006e9c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006ea0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8006ea4:	4b43      	ldr	r3, [pc, #268]	; (8006fb4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8006eac:	4a41      	ldr	r2, [pc, #260]	; (8006fb4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006eae:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006eb2:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8006eb4:	4b40      	ldr	r3, [pc, #256]	; (8006fb8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	2232      	movs	r2, #50	; 0x32
 8006eba:	fb02 f303 	mul.w	r3, r2, r3
 8006ebe:	4a3f      	ldr	r2, [pc, #252]	; (8006fbc <HAL_PWREx_ControlVoltageScaling+0x144>)
 8006ec0:	fba2 2303 	umull	r2, r3, r2, r3
 8006ec4:	0c9b      	lsrs	r3, r3, #18
 8006ec6:	3301      	adds	r3, #1
 8006ec8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006eca:	e002      	b.n	8006ed2 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8006ecc:	68fb      	ldr	r3, [r7, #12]
 8006ece:	3b01      	subs	r3, #1
 8006ed0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006ed2:	4b38      	ldr	r3, [pc, #224]	; (8006fb4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006ed4:	695b      	ldr	r3, [r3, #20]
 8006ed6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006eda:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006ede:	d102      	bne.n	8006ee6 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8006ee0:	68fb      	ldr	r3, [r7, #12]
 8006ee2:	2b00      	cmp	r3, #0
 8006ee4:	d1f2      	bne.n	8006ecc <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8006ee6:	4b33      	ldr	r3, [pc, #204]	; (8006fb4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006ee8:	695b      	ldr	r3, [r3, #20]
 8006eea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006eee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006ef2:	d158      	bne.n	8006fa6 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8006ef4:	2303      	movs	r3, #3
 8006ef6:	e057      	b.n	8006fa8 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8006ef8:	4b2e      	ldr	r3, [pc, #184]	; (8006fb4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006efa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006efe:	4a2d      	ldr	r2, [pc, #180]	; (8006fb4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006f00:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006f04:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8006f08:	e04d      	b.n	8006fa6 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006f10:	d141      	bne.n	8006f96 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8006f12:	4b28      	ldr	r3, [pc, #160]	; (8006fb4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8006f1a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006f1e:	d131      	bne.n	8006f84 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8006f20:	4b24      	ldr	r3, [pc, #144]	; (8006fb4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006f22:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006f26:	4a23      	ldr	r2, [pc, #140]	; (8006fb4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006f28:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006f2c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8006f30:	4b20      	ldr	r3, [pc, #128]	; (8006fb4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8006f38:	4a1e      	ldr	r2, [pc, #120]	; (8006fb4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006f3a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006f3e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8006f40:	4b1d      	ldr	r3, [pc, #116]	; (8006fb8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	2232      	movs	r2, #50	; 0x32
 8006f46:	fb02 f303 	mul.w	r3, r2, r3
 8006f4a:	4a1c      	ldr	r2, [pc, #112]	; (8006fbc <HAL_PWREx_ControlVoltageScaling+0x144>)
 8006f4c:	fba2 2303 	umull	r2, r3, r2, r3
 8006f50:	0c9b      	lsrs	r3, r3, #18
 8006f52:	3301      	adds	r3, #1
 8006f54:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006f56:	e002      	b.n	8006f5e <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8006f58:	68fb      	ldr	r3, [r7, #12]
 8006f5a:	3b01      	subs	r3, #1
 8006f5c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006f5e:	4b15      	ldr	r3, [pc, #84]	; (8006fb4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006f60:	695b      	ldr	r3, [r3, #20]
 8006f62:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006f66:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006f6a:	d102      	bne.n	8006f72 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8006f6c:	68fb      	ldr	r3, [r7, #12]
 8006f6e:	2b00      	cmp	r3, #0
 8006f70:	d1f2      	bne.n	8006f58 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8006f72:	4b10      	ldr	r3, [pc, #64]	; (8006fb4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006f74:	695b      	ldr	r3, [r3, #20]
 8006f76:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006f7a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006f7e:	d112      	bne.n	8006fa6 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8006f80:	2303      	movs	r3, #3
 8006f82:	e011      	b.n	8006fa8 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8006f84:	4b0b      	ldr	r3, [pc, #44]	; (8006fb4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006f86:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006f8a:	4a0a      	ldr	r2, [pc, #40]	; (8006fb4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006f8c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006f90:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8006f94:	e007      	b.n	8006fa6 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8006f96:	4b07      	ldr	r3, [pc, #28]	; (8006fb4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8006f9e:	4a05      	ldr	r2, [pc, #20]	; (8006fb4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006fa0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8006fa4:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8006fa6:	2300      	movs	r3, #0
}
 8006fa8:	4618      	mov	r0, r3
 8006faa:	3714      	adds	r7, #20
 8006fac:	46bd      	mov	sp, r7
 8006fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fb2:	4770      	bx	lr
 8006fb4:	40007000 	.word	0x40007000
 8006fb8:	2000003c 	.word	0x2000003c
 8006fbc:	431bde83 	.word	0x431bde83

08006fc0 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8006fc0:	b480      	push	{r7}
 8006fc2:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8006fc4:	4b05      	ldr	r3, [pc, #20]	; (8006fdc <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8006fc6:	689b      	ldr	r3, [r3, #8]
 8006fc8:	4a04      	ldr	r2, [pc, #16]	; (8006fdc <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8006fca:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006fce:	6093      	str	r3, [r2, #8]
}
 8006fd0:	bf00      	nop
 8006fd2:	46bd      	mov	sp, r7
 8006fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fd8:	4770      	bx	lr
 8006fda:	bf00      	nop
 8006fdc:	40007000 	.word	0x40007000

08006fe0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006fe0:	b580      	push	{r7, lr}
 8006fe2:	b088      	sub	sp, #32
 8006fe4:	af00      	add	r7, sp, #0
 8006fe6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	2b00      	cmp	r3, #0
 8006fec:	d101      	bne.n	8006ff2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006fee:	2301      	movs	r3, #1
 8006ff0:	e306      	b.n	8007600 <HAL_RCC_OscConfig+0x620>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	f003 0301 	and.w	r3, r3, #1
 8006ffa:	2b00      	cmp	r3, #0
 8006ffc:	d075      	beq.n	80070ea <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006ffe:	4b97      	ldr	r3, [pc, #604]	; (800725c <HAL_RCC_OscConfig+0x27c>)
 8007000:	689b      	ldr	r3, [r3, #8]
 8007002:	f003 030c 	and.w	r3, r3, #12
 8007006:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8007008:	4b94      	ldr	r3, [pc, #592]	; (800725c <HAL_RCC_OscConfig+0x27c>)
 800700a:	68db      	ldr	r3, [r3, #12]
 800700c:	f003 0303 	and.w	r3, r3, #3
 8007010:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8007012:	69bb      	ldr	r3, [r7, #24]
 8007014:	2b0c      	cmp	r3, #12
 8007016:	d102      	bne.n	800701e <HAL_RCC_OscConfig+0x3e>
 8007018:	697b      	ldr	r3, [r7, #20]
 800701a:	2b03      	cmp	r3, #3
 800701c:	d002      	beq.n	8007024 <HAL_RCC_OscConfig+0x44>
 800701e:	69bb      	ldr	r3, [r7, #24]
 8007020:	2b08      	cmp	r3, #8
 8007022:	d10b      	bne.n	800703c <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007024:	4b8d      	ldr	r3, [pc, #564]	; (800725c <HAL_RCC_OscConfig+0x27c>)
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800702c:	2b00      	cmp	r3, #0
 800702e:	d05b      	beq.n	80070e8 <HAL_RCC_OscConfig+0x108>
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	685b      	ldr	r3, [r3, #4]
 8007034:	2b00      	cmp	r3, #0
 8007036:	d157      	bne.n	80070e8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8007038:	2301      	movs	r3, #1
 800703a:	e2e1      	b.n	8007600 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	685b      	ldr	r3, [r3, #4]
 8007040:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007044:	d106      	bne.n	8007054 <HAL_RCC_OscConfig+0x74>
 8007046:	4b85      	ldr	r3, [pc, #532]	; (800725c <HAL_RCC_OscConfig+0x27c>)
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	4a84      	ldr	r2, [pc, #528]	; (800725c <HAL_RCC_OscConfig+0x27c>)
 800704c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007050:	6013      	str	r3, [r2, #0]
 8007052:	e01d      	b.n	8007090 <HAL_RCC_OscConfig+0xb0>
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	685b      	ldr	r3, [r3, #4]
 8007058:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800705c:	d10c      	bne.n	8007078 <HAL_RCC_OscConfig+0x98>
 800705e:	4b7f      	ldr	r3, [pc, #508]	; (800725c <HAL_RCC_OscConfig+0x27c>)
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	4a7e      	ldr	r2, [pc, #504]	; (800725c <HAL_RCC_OscConfig+0x27c>)
 8007064:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007068:	6013      	str	r3, [r2, #0]
 800706a:	4b7c      	ldr	r3, [pc, #496]	; (800725c <HAL_RCC_OscConfig+0x27c>)
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	4a7b      	ldr	r2, [pc, #492]	; (800725c <HAL_RCC_OscConfig+0x27c>)
 8007070:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007074:	6013      	str	r3, [r2, #0]
 8007076:	e00b      	b.n	8007090 <HAL_RCC_OscConfig+0xb0>
 8007078:	4b78      	ldr	r3, [pc, #480]	; (800725c <HAL_RCC_OscConfig+0x27c>)
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	4a77      	ldr	r2, [pc, #476]	; (800725c <HAL_RCC_OscConfig+0x27c>)
 800707e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007082:	6013      	str	r3, [r2, #0]
 8007084:	4b75      	ldr	r3, [pc, #468]	; (800725c <HAL_RCC_OscConfig+0x27c>)
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	4a74      	ldr	r2, [pc, #464]	; (800725c <HAL_RCC_OscConfig+0x27c>)
 800708a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800708e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	685b      	ldr	r3, [r3, #4]
 8007094:	2b00      	cmp	r3, #0
 8007096:	d013      	beq.n	80070c0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007098:	f7fc fc8c 	bl	80039b4 <HAL_GetTick>
 800709c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800709e:	e008      	b.n	80070b2 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80070a0:	f7fc fc88 	bl	80039b4 <HAL_GetTick>
 80070a4:	4602      	mov	r2, r0
 80070a6:	693b      	ldr	r3, [r7, #16]
 80070a8:	1ad3      	subs	r3, r2, r3
 80070aa:	2b64      	cmp	r3, #100	; 0x64
 80070ac:	d901      	bls.n	80070b2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80070ae:	2303      	movs	r3, #3
 80070b0:	e2a6      	b.n	8007600 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80070b2:	4b6a      	ldr	r3, [pc, #424]	; (800725c <HAL_RCC_OscConfig+0x27c>)
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80070ba:	2b00      	cmp	r3, #0
 80070bc:	d0f0      	beq.n	80070a0 <HAL_RCC_OscConfig+0xc0>
 80070be:	e014      	b.n	80070ea <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80070c0:	f7fc fc78 	bl	80039b4 <HAL_GetTick>
 80070c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80070c6:	e008      	b.n	80070da <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80070c8:	f7fc fc74 	bl	80039b4 <HAL_GetTick>
 80070cc:	4602      	mov	r2, r0
 80070ce:	693b      	ldr	r3, [r7, #16]
 80070d0:	1ad3      	subs	r3, r2, r3
 80070d2:	2b64      	cmp	r3, #100	; 0x64
 80070d4:	d901      	bls.n	80070da <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80070d6:	2303      	movs	r3, #3
 80070d8:	e292      	b.n	8007600 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80070da:	4b60      	ldr	r3, [pc, #384]	; (800725c <HAL_RCC_OscConfig+0x27c>)
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80070e2:	2b00      	cmp	r3, #0
 80070e4:	d1f0      	bne.n	80070c8 <HAL_RCC_OscConfig+0xe8>
 80070e6:	e000      	b.n	80070ea <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80070e8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	f003 0302 	and.w	r3, r3, #2
 80070f2:	2b00      	cmp	r3, #0
 80070f4:	d075      	beq.n	80071e2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80070f6:	4b59      	ldr	r3, [pc, #356]	; (800725c <HAL_RCC_OscConfig+0x27c>)
 80070f8:	689b      	ldr	r3, [r3, #8]
 80070fa:	f003 030c 	and.w	r3, r3, #12
 80070fe:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8007100:	4b56      	ldr	r3, [pc, #344]	; (800725c <HAL_RCC_OscConfig+0x27c>)
 8007102:	68db      	ldr	r3, [r3, #12]
 8007104:	f003 0303 	and.w	r3, r3, #3
 8007108:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800710a:	69bb      	ldr	r3, [r7, #24]
 800710c:	2b0c      	cmp	r3, #12
 800710e:	d102      	bne.n	8007116 <HAL_RCC_OscConfig+0x136>
 8007110:	697b      	ldr	r3, [r7, #20]
 8007112:	2b02      	cmp	r3, #2
 8007114:	d002      	beq.n	800711c <HAL_RCC_OscConfig+0x13c>
 8007116:	69bb      	ldr	r3, [r7, #24]
 8007118:	2b04      	cmp	r3, #4
 800711a:	d11f      	bne.n	800715c <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800711c:	4b4f      	ldr	r3, [pc, #316]	; (800725c <HAL_RCC_OscConfig+0x27c>)
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007124:	2b00      	cmp	r3, #0
 8007126:	d005      	beq.n	8007134 <HAL_RCC_OscConfig+0x154>
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	68db      	ldr	r3, [r3, #12]
 800712c:	2b00      	cmp	r3, #0
 800712e:	d101      	bne.n	8007134 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8007130:	2301      	movs	r3, #1
 8007132:	e265      	b.n	8007600 <HAL_RCC_OscConfig+0x620>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007134:	4b49      	ldr	r3, [pc, #292]	; (800725c <HAL_RCC_OscConfig+0x27c>)
 8007136:	685b      	ldr	r3, [r3, #4]
 8007138:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	691b      	ldr	r3, [r3, #16]
 8007140:	061b      	lsls	r3, r3, #24
 8007142:	4946      	ldr	r1, [pc, #280]	; (800725c <HAL_RCC_OscConfig+0x27c>)
 8007144:	4313      	orrs	r3, r2
 8007146:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8007148:	4b45      	ldr	r3, [pc, #276]	; (8007260 <HAL_RCC_OscConfig+0x280>)
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	4618      	mov	r0, r3
 800714e:	f7fc fbe5 	bl	800391c <HAL_InitTick>
 8007152:	4603      	mov	r3, r0
 8007154:	2b00      	cmp	r3, #0
 8007156:	d043      	beq.n	80071e0 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8007158:	2301      	movs	r3, #1
 800715a:	e251      	b.n	8007600 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	68db      	ldr	r3, [r3, #12]
 8007160:	2b00      	cmp	r3, #0
 8007162:	d023      	beq.n	80071ac <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007164:	4b3d      	ldr	r3, [pc, #244]	; (800725c <HAL_RCC_OscConfig+0x27c>)
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	4a3c      	ldr	r2, [pc, #240]	; (800725c <HAL_RCC_OscConfig+0x27c>)
 800716a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800716e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007170:	f7fc fc20 	bl	80039b4 <HAL_GetTick>
 8007174:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8007176:	e008      	b.n	800718a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007178:	f7fc fc1c 	bl	80039b4 <HAL_GetTick>
 800717c:	4602      	mov	r2, r0
 800717e:	693b      	ldr	r3, [r7, #16]
 8007180:	1ad3      	subs	r3, r2, r3
 8007182:	2b02      	cmp	r3, #2
 8007184:	d901      	bls.n	800718a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8007186:	2303      	movs	r3, #3
 8007188:	e23a      	b.n	8007600 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800718a:	4b34      	ldr	r3, [pc, #208]	; (800725c <HAL_RCC_OscConfig+0x27c>)
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007192:	2b00      	cmp	r3, #0
 8007194:	d0f0      	beq.n	8007178 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007196:	4b31      	ldr	r3, [pc, #196]	; (800725c <HAL_RCC_OscConfig+0x27c>)
 8007198:	685b      	ldr	r3, [r3, #4]
 800719a:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	691b      	ldr	r3, [r3, #16]
 80071a2:	061b      	lsls	r3, r3, #24
 80071a4:	492d      	ldr	r1, [pc, #180]	; (800725c <HAL_RCC_OscConfig+0x27c>)
 80071a6:	4313      	orrs	r3, r2
 80071a8:	604b      	str	r3, [r1, #4]
 80071aa:	e01a      	b.n	80071e2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80071ac:	4b2b      	ldr	r3, [pc, #172]	; (800725c <HAL_RCC_OscConfig+0x27c>)
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	4a2a      	ldr	r2, [pc, #168]	; (800725c <HAL_RCC_OscConfig+0x27c>)
 80071b2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80071b6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80071b8:	f7fc fbfc 	bl	80039b4 <HAL_GetTick>
 80071bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80071be:	e008      	b.n	80071d2 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80071c0:	f7fc fbf8 	bl	80039b4 <HAL_GetTick>
 80071c4:	4602      	mov	r2, r0
 80071c6:	693b      	ldr	r3, [r7, #16]
 80071c8:	1ad3      	subs	r3, r2, r3
 80071ca:	2b02      	cmp	r3, #2
 80071cc:	d901      	bls.n	80071d2 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80071ce:	2303      	movs	r3, #3
 80071d0:	e216      	b.n	8007600 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80071d2:	4b22      	ldr	r3, [pc, #136]	; (800725c <HAL_RCC_OscConfig+0x27c>)
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80071da:	2b00      	cmp	r3, #0
 80071dc:	d1f0      	bne.n	80071c0 <HAL_RCC_OscConfig+0x1e0>
 80071de:	e000      	b.n	80071e2 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80071e0:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	f003 0308 	and.w	r3, r3, #8
 80071ea:	2b00      	cmp	r3, #0
 80071ec:	d041      	beq.n	8007272 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	695b      	ldr	r3, [r3, #20]
 80071f2:	2b00      	cmp	r3, #0
 80071f4:	d01c      	beq.n	8007230 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80071f6:	4b19      	ldr	r3, [pc, #100]	; (800725c <HAL_RCC_OscConfig+0x27c>)
 80071f8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80071fc:	4a17      	ldr	r2, [pc, #92]	; (800725c <HAL_RCC_OscConfig+0x27c>)
 80071fe:	f043 0301 	orr.w	r3, r3, #1
 8007202:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007206:	f7fc fbd5 	bl	80039b4 <HAL_GetTick>
 800720a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800720c:	e008      	b.n	8007220 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800720e:	f7fc fbd1 	bl	80039b4 <HAL_GetTick>
 8007212:	4602      	mov	r2, r0
 8007214:	693b      	ldr	r3, [r7, #16]
 8007216:	1ad3      	subs	r3, r2, r3
 8007218:	2b02      	cmp	r3, #2
 800721a:	d901      	bls.n	8007220 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800721c:	2303      	movs	r3, #3
 800721e:	e1ef      	b.n	8007600 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8007220:	4b0e      	ldr	r3, [pc, #56]	; (800725c <HAL_RCC_OscConfig+0x27c>)
 8007222:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007226:	f003 0302 	and.w	r3, r3, #2
 800722a:	2b00      	cmp	r3, #0
 800722c:	d0ef      	beq.n	800720e <HAL_RCC_OscConfig+0x22e>
 800722e:	e020      	b.n	8007272 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007230:	4b0a      	ldr	r3, [pc, #40]	; (800725c <HAL_RCC_OscConfig+0x27c>)
 8007232:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007236:	4a09      	ldr	r2, [pc, #36]	; (800725c <HAL_RCC_OscConfig+0x27c>)
 8007238:	f023 0301 	bic.w	r3, r3, #1
 800723c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007240:	f7fc fbb8 	bl	80039b4 <HAL_GetTick>
 8007244:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8007246:	e00d      	b.n	8007264 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007248:	f7fc fbb4 	bl	80039b4 <HAL_GetTick>
 800724c:	4602      	mov	r2, r0
 800724e:	693b      	ldr	r3, [r7, #16]
 8007250:	1ad3      	subs	r3, r2, r3
 8007252:	2b02      	cmp	r3, #2
 8007254:	d906      	bls.n	8007264 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8007256:	2303      	movs	r3, #3
 8007258:	e1d2      	b.n	8007600 <HAL_RCC_OscConfig+0x620>
 800725a:	bf00      	nop
 800725c:	40021000 	.word	0x40021000
 8007260:	20000040 	.word	0x20000040
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8007264:	4b8c      	ldr	r3, [pc, #560]	; (8007498 <HAL_RCC_OscConfig+0x4b8>)
 8007266:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800726a:	f003 0302 	and.w	r3, r3, #2
 800726e:	2b00      	cmp	r3, #0
 8007270:	d1ea      	bne.n	8007248 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	f003 0304 	and.w	r3, r3, #4
 800727a:	2b00      	cmp	r3, #0
 800727c:	f000 80a6 	beq.w	80073cc <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007280:	2300      	movs	r3, #0
 8007282:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8007284:	4b84      	ldr	r3, [pc, #528]	; (8007498 <HAL_RCC_OscConfig+0x4b8>)
 8007286:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007288:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800728c:	2b00      	cmp	r3, #0
 800728e:	d101      	bne.n	8007294 <HAL_RCC_OscConfig+0x2b4>
 8007290:	2301      	movs	r3, #1
 8007292:	e000      	b.n	8007296 <HAL_RCC_OscConfig+0x2b6>
 8007294:	2300      	movs	r3, #0
 8007296:	2b00      	cmp	r3, #0
 8007298:	d00d      	beq.n	80072b6 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800729a:	4b7f      	ldr	r3, [pc, #508]	; (8007498 <HAL_RCC_OscConfig+0x4b8>)
 800729c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800729e:	4a7e      	ldr	r2, [pc, #504]	; (8007498 <HAL_RCC_OscConfig+0x4b8>)
 80072a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80072a4:	6593      	str	r3, [r2, #88]	; 0x58
 80072a6:	4b7c      	ldr	r3, [pc, #496]	; (8007498 <HAL_RCC_OscConfig+0x4b8>)
 80072a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80072aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80072ae:	60fb      	str	r3, [r7, #12]
 80072b0:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80072b2:	2301      	movs	r3, #1
 80072b4:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80072b6:	4b79      	ldr	r3, [pc, #484]	; (800749c <HAL_RCC_OscConfig+0x4bc>)
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80072be:	2b00      	cmp	r3, #0
 80072c0:	d118      	bne.n	80072f4 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80072c2:	4b76      	ldr	r3, [pc, #472]	; (800749c <HAL_RCC_OscConfig+0x4bc>)
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	4a75      	ldr	r2, [pc, #468]	; (800749c <HAL_RCC_OscConfig+0x4bc>)
 80072c8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80072cc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80072ce:	f7fc fb71 	bl	80039b4 <HAL_GetTick>
 80072d2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80072d4:	e008      	b.n	80072e8 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80072d6:	f7fc fb6d 	bl	80039b4 <HAL_GetTick>
 80072da:	4602      	mov	r2, r0
 80072dc:	693b      	ldr	r3, [r7, #16]
 80072de:	1ad3      	subs	r3, r2, r3
 80072e0:	2b02      	cmp	r3, #2
 80072e2:	d901      	bls.n	80072e8 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 80072e4:	2303      	movs	r3, #3
 80072e6:	e18b      	b.n	8007600 <HAL_RCC_OscConfig+0x620>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80072e8:	4b6c      	ldr	r3, [pc, #432]	; (800749c <HAL_RCC_OscConfig+0x4bc>)
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80072f0:	2b00      	cmp	r3, #0
 80072f2:	d0f0      	beq.n	80072d6 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	689b      	ldr	r3, [r3, #8]
 80072f8:	2b01      	cmp	r3, #1
 80072fa:	d108      	bne.n	800730e <HAL_RCC_OscConfig+0x32e>
 80072fc:	4b66      	ldr	r3, [pc, #408]	; (8007498 <HAL_RCC_OscConfig+0x4b8>)
 80072fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007302:	4a65      	ldr	r2, [pc, #404]	; (8007498 <HAL_RCC_OscConfig+0x4b8>)
 8007304:	f043 0301 	orr.w	r3, r3, #1
 8007308:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800730c:	e024      	b.n	8007358 <HAL_RCC_OscConfig+0x378>
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	689b      	ldr	r3, [r3, #8]
 8007312:	2b05      	cmp	r3, #5
 8007314:	d110      	bne.n	8007338 <HAL_RCC_OscConfig+0x358>
 8007316:	4b60      	ldr	r3, [pc, #384]	; (8007498 <HAL_RCC_OscConfig+0x4b8>)
 8007318:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800731c:	4a5e      	ldr	r2, [pc, #376]	; (8007498 <HAL_RCC_OscConfig+0x4b8>)
 800731e:	f043 0304 	orr.w	r3, r3, #4
 8007322:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8007326:	4b5c      	ldr	r3, [pc, #368]	; (8007498 <HAL_RCC_OscConfig+0x4b8>)
 8007328:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800732c:	4a5a      	ldr	r2, [pc, #360]	; (8007498 <HAL_RCC_OscConfig+0x4b8>)
 800732e:	f043 0301 	orr.w	r3, r3, #1
 8007332:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8007336:	e00f      	b.n	8007358 <HAL_RCC_OscConfig+0x378>
 8007338:	4b57      	ldr	r3, [pc, #348]	; (8007498 <HAL_RCC_OscConfig+0x4b8>)
 800733a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800733e:	4a56      	ldr	r2, [pc, #344]	; (8007498 <HAL_RCC_OscConfig+0x4b8>)
 8007340:	f023 0301 	bic.w	r3, r3, #1
 8007344:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8007348:	4b53      	ldr	r3, [pc, #332]	; (8007498 <HAL_RCC_OscConfig+0x4b8>)
 800734a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800734e:	4a52      	ldr	r2, [pc, #328]	; (8007498 <HAL_RCC_OscConfig+0x4b8>)
 8007350:	f023 0304 	bic.w	r3, r3, #4
 8007354:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	689b      	ldr	r3, [r3, #8]
 800735c:	2b00      	cmp	r3, #0
 800735e:	d016      	beq.n	800738e <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007360:	f7fc fb28 	bl	80039b4 <HAL_GetTick>
 8007364:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007366:	e00a      	b.n	800737e <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007368:	f7fc fb24 	bl	80039b4 <HAL_GetTick>
 800736c:	4602      	mov	r2, r0
 800736e:	693b      	ldr	r3, [r7, #16]
 8007370:	1ad3      	subs	r3, r2, r3
 8007372:	f241 3288 	movw	r2, #5000	; 0x1388
 8007376:	4293      	cmp	r3, r2
 8007378:	d901      	bls.n	800737e <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800737a:	2303      	movs	r3, #3
 800737c:	e140      	b.n	8007600 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800737e:	4b46      	ldr	r3, [pc, #280]	; (8007498 <HAL_RCC_OscConfig+0x4b8>)
 8007380:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007384:	f003 0302 	and.w	r3, r3, #2
 8007388:	2b00      	cmp	r3, #0
 800738a:	d0ed      	beq.n	8007368 <HAL_RCC_OscConfig+0x388>
 800738c:	e015      	b.n	80073ba <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800738e:	f7fc fb11 	bl	80039b4 <HAL_GetTick>
 8007392:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8007394:	e00a      	b.n	80073ac <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007396:	f7fc fb0d 	bl	80039b4 <HAL_GetTick>
 800739a:	4602      	mov	r2, r0
 800739c:	693b      	ldr	r3, [r7, #16]
 800739e:	1ad3      	subs	r3, r2, r3
 80073a0:	f241 3288 	movw	r2, #5000	; 0x1388
 80073a4:	4293      	cmp	r3, r2
 80073a6:	d901      	bls.n	80073ac <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80073a8:	2303      	movs	r3, #3
 80073aa:	e129      	b.n	8007600 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80073ac:	4b3a      	ldr	r3, [pc, #232]	; (8007498 <HAL_RCC_OscConfig+0x4b8>)
 80073ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80073b2:	f003 0302 	and.w	r3, r3, #2
 80073b6:	2b00      	cmp	r3, #0
 80073b8:	d1ed      	bne.n	8007396 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80073ba:	7ffb      	ldrb	r3, [r7, #31]
 80073bc:	2b01      	cmp	r3, #1
 80073be:	d105      	bne.n	80073cc <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80073c0:	4b35      	ldr	r3, [pc, #212]	; (8007498 <HAL_RCC_OscConfig+0x4b8>)
 80073c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80073c4:	4a34      	ldr	r2, [pc, #208]	; (8007498 <HAL_RCC_OscConfig+0x4b8>)
 80073c6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80073ca:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	f003 0320 	and.w	r3, r3, #32
 80073d4:	2b00      	cmp	r3, #0
 80073d6:	d03c      	beq.n	8007452 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	699b      	ldr	r3, [r3, #24]
 80073dc:	2b00      	cmp	r3, #0
 80073de:	d01c      	beq.n	800741a <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80073e0:	4b2d      	ldr	r3, [pc, #180]	; (8007498 <HAL_RCC_OscConfig+0x4b8>)
 80073e2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80073e6:	4a2c      	ldr	r2, [pc, #176]	; (8007498 <HAL_RCC_OscConfig+0x4b8>)
 80073e8:	f043 0301 	orr.w	r3, r3, #1
 80073ec:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80073f0:	f7fc fae0 	bl	80039b4 <HAL_GetTick>
 80073f4:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80073f6:	e008      	b.n	800740a <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80073f8:	f7fc fadc 	bl	80039b4 <HAL_GetTick>
 80073fc:	4602      	mov	r2, r0
 80073fe:	693b      	ldr	r3, [r7, #16]
 8007400:	1ad3      	subs	r3, r2, r3
 8007402:	2b02      	cmp	r3, #2
 8007404:	d901      	bls.n	800740a <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8007406:	2303      	movs	r3, #3
 8007408:	e0fa      	b.n	8007600 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800740a:	4b23      	ldr	r3, [pc, #140]	; (8007498 <HAL_RCC_OscConfig+0x4b8>)
 800740c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007410:	f003 0302 	and.w	r3, r3, #2
 8007414:	2b00      	cmp	r3, #0
 8007416:	d0ef      	beq.n	80073f8 <HAL_RCC_OscConfig+0x418>
 8007418:	e01b      	b.n	8007452 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800741a:	4b1f      	ldr	r3, [pc, #124]	; (8007498 <HAL_RCC_OscConfig+0x4b8>)
 800741c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007420:	4a1d      	ldr	r2, [pc, #116]	; (8007498 <HAL_RCC_OscConfig+0x4b8>)
 8007422:	f023 0301 	bic.w	r3, r3, #1
 8007426:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800742a:	f7fc fac3 	bl	80039b4 <HAL_GetTick>
 800742e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8007430:	e008      	b.n	8007444 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8007432:	f7fc fabf 	bl	80039b4 <HAL_GetTick>
 8007436:	4602      	mov	r2, r0
 8007438:	693b      	ldr	r3, [r7, #16]
 800743a:	1ad3      	subs	r3, r2, r3
 800743c:	2b02      	cmp	r3, #2
 800743e:	d901      	bls.n	8007444 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8007440:	2303      	movs	r3, #3
 8007442:	e0dd      	b.n	8007600 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8007444:	4b14      	ldr	r3, [pc, #80]	; (8007498 <HAL_RCC_OscConfig+0x4b8>)
 8007446:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800744a:	f003 0302 	and.w	r3, r3, #2
 800744e:	2b00      	cmp	r3, #0
 8007450:	d1ef      	bne.n	8007432 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	69db      	ldr	r3, [r3, #28]
 8007456:	2b00      	cmp	r3, #0
 8007458:	f000 80d1 	beq.w	80075fe <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800745c:	4b0e      	ldr	r3, [pc, #56]	; (8007498 <HAL_RCC_OscConfig+0x4b8>)
 800745e:	689b      	ldr	r3, [r3, #8]
 8007460:	f003 030c 	and.w	r3, r3, #12
 8007464:	2b0c      	cmp	r3, #12
 8007466:	f000 808b 	beq.w	8007580 <HAL_RCC_OscConfig+0x5a0>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	69db      	ldr	r3, [r3, #28]
 800746e:	2b02      	cmp	r3, #2
 8007470:	d15e      	bne.n	8007530 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007472:	4b09      	ldr	r3, [pc, #36]	; (8007498 <HAL_RCC_OscConfig+0x4b8>)
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	4a08      	ldr	r2, [pc, #32]	; (8007498 <HAL_RCC_OscConfig+0x4b8>)
 8007478:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800747c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800747e:	f7fc fa99 	bl	80039b4 <HAL_GetTick>
 8007482:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007484:	e00c      	b.n	80074a0 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007486:	f7fc fa95 	bl	80039b4 <HAL_GetTick>
 800748a:	4602      	mov	r2, r0
 800748c:	693b      	ldr	r3, [r7, #16]
 800748e:	1ad3      	subs	r3, r2, r3
 8007490:	2b02      	cmp	r3, #2
 8007492:	d905      	bls.n	80074a0 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8007494:	2303      	movs	r3, #3
 8007496:	e0b3      	b.n	8007600 <HAL_RCC_OscConfig+0x620>
 8007498:	40021000 	.word	0x40021000
 800749c:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80074a0:	4b59      	ldr	r3, [pc, #356]	; (8007608 <HAL_RCC_OscConfig+0x628>)
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80074a8:	2b00      	cmp	r3, #0
 80074aa:	d1ec      	bne.n	8007486 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80074ac:	4b56      	ldr	r3, [pc, #344]	; (8007608 <HAL_RCC_OscConfig+0x628>)
 80074ae:	68da      	ldr	r2, [r3, #12]
 80074b0:	4b56      	ldr	r3, [pc, #344]	; (800760c <HAL_RCC_OscConfig+0x62c>)
 80074b2:	4013      	ands	r3, r2
 80074b4:	687a      	ldr	r2, [r7, #4]
 80074b6:	6a11      	ldr	r1, [r2, #32]
 80074b8:	687a      	ldr	r2, [r7, #4]
 80074ba:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80074bc:	3a01      	subs	r2, #1
 80074be:	0112      	lsls	r2, r2, #4
 80074c0:	4311      	orrs	r1, r2
 80074c2:	687a      	ldr	r2, [r7, #4]
 80074c4:	6a92      	ldr	r2, [r2, #40]	; 0x28
 80074c6:	0212      	lsls	r2, r2, #8
 80074c8:	4311      	orrs	r1, r2
 80074ca:	687a      	ldr	r2, [r7, #4]
 80074cc:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80074ce:	0852      	lsrs	r2, r2, #1
 80074d0:	3a01      	subs	r2, #1
 80074d2:	0552      	lsls	r2, r2, #21
 80074d4:	4311      	orrs	r1, r2
 80074d6:	687a      	ldr	r2, [r7, #4]
 80074d8:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80074da:	0852      	lsrs	r2, r2, #1
 80074dc:	3a01      	subs	r2, #1
 80074de:	0652      	lsls	r2, r2, #25
 80074e0:	4311      	orrs	r1, r2
 80074e2:	687a      	ldr	r2, [r7, #4]
 80074e4:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80074e6:	06d2      	lsls	r2, r2, #27
 80074e8:	430a      	orrs	r2, r1
 80074ea:	4947      	ldr	r1, [pc, #284]	; (8007608 <HAL_RCC_OscConfig+0x628>)
 80074ec:	4313      	orrs	r3, r2
 80074ee:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80074f0:	4b45      	ldr	r3, [pc, #276]	; (8007608 <HAL_RCC_OscConfig+0x628>)
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	4a44      	ldr	r2, [pc, #272]	; (8007608 <HAL_RCC_OscConfig+0x628>)
 80074f6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80074fa:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80074fc:	4b42      	ldr	r3, [pc, #264]	; (8007608 <HAL_RCC_OscConfig+0x628>)
 80074fe:	68db      	ldr	r3, [r3, #12]
 8007500:	4a41      	ldr	r2, [pc, #260]	; (8007608 <HAL_RCC_OscConfig+0x628>)
 8007502:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007506:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007508:	f7fc fa54 	bl	80039b4 <HAL_GetTick>
 800750c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800750e:	e008      	b.n	8007522 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007510:	f7fc fa50 	bl	80039b4 <HAL_GetTick>
 8007514:	4602      	mov	r2, r0
 8007516:	693b      	ldr	r3, [r7, #16]
 8007518:	1ad3      	subs	r3, r2, r3
 800751a:	2b02      	cmp	r3, #2
 800751c:	d901      	bls.n	8007522 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 800751e:	2303      	movs	r3, #3
 8007520:	e06e      	b.n	8007600 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007522:	4b39      	ldr	r3, [pc, #228]	; (8007608 <HAL_RCC_OscConfig+0x628>)
 8007524:	681b      	ldr	r3, [r3, #0]
 8007526:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800752a:	2b00      	cmp	r3, #0
 800752c:	d0f0      	beq.n	8007510 <HAL_RCC_OscConfig+0x530>
 800752e:	e066      	b.n	80075fe <HAL_RCC_OscConfig+0x61e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007530:	4b35      	ldr	r3, [pc, #212]	; (8007608 <HAL_RCC_OscConfig+0x628>)
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	4a34      	ldr	r2, [pc, #208]	; (8007608 <HAL_RCC_OscConfig+0x628>)
 8007536:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800753a:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 800753c:	4b32      	ldr	r3, [pc, #200]	; (8007608 <HAL_RCC_OscConfig+0x628>)
 800753e:	68db      	ldr	r3, [r3, #12]
 8007540:	4a31      	ldr	r2, [pc, #196]	; (8007608 <HAL_RCC_OscConfig+0x628>)
 8007542:	f023 0303 	bic.w	r3, r3, #3
 8007546:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8007548:	4b2f      	ldr	r3, [pc, #188]	; (8007608 <HAL_RCC_OscConfig+0x628>)
 800754a:	68db      	ldr	r3, [r3, #12]
 800754c:	4a2e      	ldr	r2, [pc, #184]	; (8007608 <HAL_RCC_OscConfig+0x628>)
 800754e:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8007552:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007556:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007558:	f7fc fa2c 	bl	80039b4 <HAL_GetTick>
 800755c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800755e:	e008      	b.n	8007572 <HAL_RCC_OscConfig+0x592>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007560:	f7fc fa28 	bl	80039b4 <HAL_GetTick>
 8007564:	4602      	mov	r2, r0
 8007566:	693b      	ldr	r3, [r7, #16]
 8007568:	1ad3      	subs	r3, r2, r3
 800756a:	2b02      	cmp	r3, #2
 800756c:	d901      	bls.n	8007572 <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 800756e:	2303      	movs	r3, #3
 8007570:	e046      	b.n	8007600 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007572:	4b25      	ldr	r3, [pc, #148]	; (8007608 <HAL_RCC_OscConfig+0x628>)
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800757a:	2b00      	cmp	r3, #0
 800757c:	d1f0      	bne.n	8007560 <HAL_RCC_OscConfig+0x580>
 800757e:	e03e      	b.n	80075fe <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	69db      	ldr	r3, [r3, #28]
 8007584:	2b01      	cmp	r3, #1
 8007586:	d101      	bne.n	800758c <HAL_RCC_OscConfig+0x5ac>
      {
        return HAL_ERROR;
 8007588:	2301      	movs	r3, #1
 800758a:	e039      	b.n	8007600 <HAL_RCC_OscConfig+0x620>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 800758c:	4b1e      	ldr	r3, [pc, #120]	; (8007608 <HAL_RCC_OscConfig+0x628>)
 800758e:	68db      	ldr	r3, [r3, #12]
 8007590:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007592:	697b      	ldr	r3, [r7, #20]
 8007594:	f003 0203 	and.w	r2, r3, #3
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	6a1b      	ldr	r3, [r3, #32]
 800759c:	429a      	cmp	r2, r3
 800759e:	d12c      	bne.n	80075fa <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80075a0:	697b      	ldr	r3, [r7, #20]
 80075a2:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075aa:	3b01      	subs	r3, #1
 80075ac:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80075ae:	429a      	cmp	r2, r3
 80075b0:	d123      	bne.n	80075fa <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80075b2:	697b      	ldr	r3, [r7, #20]
 80075b4:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80075bc:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80075be:	429a      	cmp	r2, r3
 80075c0:	d11b      	bne.n	80075fa <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80075c2:	697b      	ldr	r3, [r7, #20]
 80075c4:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075cc:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80075ce:	429a      	cmp	r2, r3
 80075d0:	d113      	bne.n	80075fa <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80075d2:	697b      	ldr	r3, [r7, #20]
 80075d4:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80075dc:	085b      	lsrs	r3, r3, #1
 80075de:	3b01      	subs	r3, #1
 80075e0:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80075e2:	429a      	cmp	r2, r3
 80075e4:	d109      	bne.n	80075fa <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80075e6:	697b      	ldr	r3, [r7, #20]
 80075e8:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80075f0:	085b      	lsrs	r3, r3, #1
 80075f2:	3b01      	subs	r3, #1
 80075f4:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80075f6:	429a      	cmp	r2, r3
 80075f8:	d001      	beq.n	80075fe <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 80075fa:	2301      	movs	r3, #1
 80075fc:	e000      	b.n	8007600 <HAL_RCC_OscConfig+0x620>
      }
    }
  }
  }

  return HAL_OK;
 80075fe:	2300      	movs	r3, #0
}
 8007600:	4618      	mov	r0, r3
 8007602:	3720      	adds	r7, #32
 8007604:	46bd      	mov	sp, r7
 8007606:	bd80      	pop	{r7, pc}
 8007608:	40021000 	.word	0x40021000
 800760c:	019f800c 	.word	0x019f800c

08007610 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007610:	b580      	push	{r7, lr}
 8007612:	b086      	sub	sp, #24
 8007614:	af00      	add	r7, sp, #0
 8007616:	6078      	str	r0, [r7, #4]
 8007618:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800761a:	2300      	movs	r3, #0
 800761c:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	2b00      	cmp	r3, #0
 8007622:	d101      	bne.n	8007628 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8007624:	2301      	movs	r3, #1
 8007626:	e11e      	b.n	8007866 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8007628:	4b91      	ldr	r3, [pc, #580]	; (8007870 <HAL_RCC_ClockConfig+0x260>)
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	f003 030f 	and.w	r3, r3, #15
 8007630:	683a      	ldr	r2, [r7, #0]
 8007632:	429a      	cmp	r2, r3
 8007634:	d910      	bls.n	8007658 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007636:	4b8e      	ldr	r3, [pc, #568]	; (8007870 <HAL_RCC_ClockConfig+0x260>)
 8007638:	681b      	ldr	r3, [r3, #0]
 800763a:	f023 020f 	bic.w	r2, r3, #15
 800763e:	498c      	ldr	r1, [pc, #560]	; (8007870 <HAL_RCC_ClockConfig+0x260>)
 8007640:	683b      	ldr	r3, [r7, #0]
 8007642:	4313      	orrs	r3, r2
 8007644:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007646:	4b8a      	ldr	r3, [pc, #552]	; (8007870 <HAL_RCC_ClockConfig+0x260>)
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	f003 030f 	and.w	r3, r3, #15
 800764e:	683a      	ldr	r2, [r7, #0]
 8007650:	429a      	cmp	r2, r3
 8007652:	d001      	beq.n	8007658 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8007654:	2301      	movs	r3, #1
 8007656:	e106      	b.n	8007866 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	f003 0301 	and.w	r3, r3, #1
 8007660:	2b00      	cmp	r3, #0
 8007662:	d073      	beq.n	800774c <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	685b      	ldr	r3, [r3, #4]
 8007668:	2b03      	cmp	r3, #3
 800766a:	d129      	bne.n	80076c0 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800766c:	4b81      	ldr	r3, [pc, #516]	; (8007874 <HAL_RCC_ClockConfig+0x264>)
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007674:	2b00      	cmp	r3, #0
 8007676:	d101      	bne.n	800767c <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8007678:	2301      	movs	r3, #1
 800767a:	e0f4      	b.n	8007866 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 800767c:	f000 f99e 	bl	80079bc <RCC_GetSysClockFreqFromPLLSource>
 8007680:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8007682:	693b      	ldr	r3, [r7, #16]
 8007684:	4a7c      	ldr	r2, [pc, #496]	; (8007878 <HAL_RCC_ClockConfig+0x268>)
 8007686:	4293      	cmp	r3, r2
 8007688:	d93f      	bls.n	800770a <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800768a:	4b7a      	ldr	r3, [pc, #488]	; (8007874 <HAL_RCC_ClockConfig+0x264>)
 800768c:	689b      	ldr	r3, [r3, #8]
 800768e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007692:	2b00      	cmp	r3, #0
 8007694:	d009      	beq.n	80076aa <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800769e:	2b00      	cmp	r3, #0
 80076a0:	d033      	beq.n	800770a <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80076a6:	2b00      	cmp	r3, #0
 80076a8:	d12f      	bne.n	800770a <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80076aa:	4b72      	ldr	r3, [pc, #456]	; (8007874 <HAL_RCC_ClockConfig+0x264>)
 80076ac:	689b      	ldr	r3, [r3, #8]
 80076ae:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80076b2:	4a70      	ldr	r2, [pc, #448]	; (8007874 <HAL_RCC_ClockConfig+0x264>)
 80076b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80076b8:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80076ba:	2380      	movs	r3, #128	; 0x80
 80076bc:	617b      	str	r3, [r7, #20]
 80076be:	e024      	b.n	800770a <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	685b      	ldr	r3, [r3, #4]
 80076c4:	2b02      	cmp	r3, #2
 80076c6:	d107      	bne.n	80076d8 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80076c8:	4b6a      	ldr	r3, [pc, #424]	; (8007874 <HAL_RCC_ClockConfig+0x264>)
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80076d0:	2b00      	cmp	r3, #0
 80076d2:	d109      	bne.n	80076e8 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80076d4:	2301      	movs	r3, #1
 80076d6:	e0c6      	b.n	8007866 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80076d8:	4b66      	ldr	r3, [pc, #408]	; (8007874 <HAL_RCC_ClockConfig+0x264>)
 80076da:	681b      	ldr	r3, [r3, #0]
 80076dc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80076e0:	2b00      	cmp	r3, #0
 80076e2:	d101      	bne.n	80076e8 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80076e4:	2301      	movs	r3, #1
 80076e6:	e0be      	b.n	8007866 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 80076e8:	f000 f8ce 	bl	8007888 <HAL_RCC_GetSysClockFreq>
 80076ec:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 80076ee:	693b      	ldr	r3, [r7, #16]
 80076f0:	4a61      	ldr	r2, [pc, #388]	; (8007878 <HAL_RCC_ClockConfig+0x268>)
 80076f2:	4293      	cmp	r3, r2
 80076f4:	d909      	bls.n	800770a <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80076f6:	4b5f      	ldr	r3, [pc, #380]	; (8007874 <HAL_RCC_ClockConfig+0x264>)
 80076f8:	689b      	ldr	r3, [r3, #8]
 80076fa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80076fe:	4a5d      	ldr	r2, [pc, #372]	; (8007874 <HAL_RCC_ClockConfig+0x264>)
 8007700:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007704:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8007706:	2380      	movs	r3, #128	; 0x80
 8007708:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800770a:	4b5a      	ldr	r3, [pc, #360]	; (8007874 <HAL_RCC_ClockConfig+0x264>)
 800770c:	689b      	ldr	r3, [r3, #8]
 800770e:	f023 0203 	bic.w	r2, r3, #3
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	685b      	ldr	r3, [r3, #4]
 8007716:	4957      	ldr	r1, [pc, #348]	; (8007874 <HAL_RCC_ClockConfig+0x264>)
 8007718:	4313      	orrs	r3, r2
 800771a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800771c:	f7fc f94a 	bl	80039b4 <HAL_GetTick>
 8007720:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007722:	e00a      	b.n	800773a <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007724:	f7fc f946 	bl	80039b4 <HAL_GetTick>
 8007728:	4602      	mov	r2, r0
 800772a:	68fb      	ldr	r3, [r7, #12]
 800772c:	1ad3      	subs	r3, r2, r3
 800772e:	f241 3288 	movw	r2, #5000	; 0x1388
 8007732:	4293      	cmp	r3, r2
 8007734:	d901      	bls.n	800773a <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8007736:	2303      	movs	r3, #3
 8007738:	e095      	b.n	8007866 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800773a:	4b4e      	ldr	r3, [pc, #312]	; (8007874 <HAL_RCC_ClockConfig+0x264>)
 800773c:	689b      	ldr	r3, [r3, #8]
 800773e:	f003 020c 	and.w	r2, r3, #12
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	685b      	ldr	r3, [r3, #4]
 8007746:	009b      	lsls	r3, r3, #2
 8007748:	429a      	cmp	r2, r3
 800774a:	d1eb      	bne.n	8007724 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	f003 0302 	and.w	r3, r3, #2
 8007754:	2b00      	cmp	r3, #0
 8007756:	d023      	beq.n	80077a0 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	f003 0304 	and.w	r3, r3, #4
 8007760:	2b00      	cmp	r3, #0
 8007762:	d005      	beq.n	8007770 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007764:	4b43      	ldr	r3, [pc, #268]	; (8007874 <HAL_RCC_ClockConfig+0x264>)
 8007766:	689b      	ldr	r3, [r3, #8]
 8007768:	4a42      	ldr	r2, [pc, #264]	; (8007874 <HAL_RCC_ClockConfig+0x264>)
 800776a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800776e:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	681b      	ldr	r3, [r3, #0]
 8007774:	f003 0308 	and.w	r3, r3, #8
 8007778:	2b00      	cmp	r3, #0
 800777a:	d007      	beq.n	800778c <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 800777c:	4b3d      	ldr	r3, [pc, #244]	; (8007874 <HAL_RCC_ClockConfig+0x264>)
 800777e:	689b      	ldr	r3, [r3, #8]
 8007780:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8007784:	4a3b      	ldr	r2, [pc, #236]	; (8007874 <HAL_RCC_ClockConfig+0x264>)
 8007786:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800778a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800778c:	4b39      	ldr	r3, [pc, #228]	; (8007874 <HAL_RCC_ClockConfig+0x264>)
 800778e:	689b      	ldr	r3, [r3, #8]
 8007790:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	689b      	ldr	r3, [r3, #8]
 8007798:	4936      	ldr	r1, [pc, #216]	; (8007874 <HAL_RCC_ClockConfig+0x264>)
 800779a:	4313      	orrs	r3, r2
 800779c:	608b      	str	r3, [r1, #8]
 800779e:	e008      	b.n	80077b2 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 80077a0:	697b      	ldr	r3, [r7, #20]
 80077a2:	2b80      	cmp	r3, #128	; 0x80
 80077a4:	d105      	bne.n	80077b2 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80077a6:	4b33      	ldr	r3, [pc, #204]	; (8007874 <HAL_RCC_ClockConfig+0x264>)
 80077a8:	689b      	ldr	r3, [r3, #8]
 80077aa:	4a32      	ldr	r2, [pc, #200]	; (8007874 <HAL_RCC_ClockConfig+0x264>)
 80077ac:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80077b0:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80077b2:	4b2f      	ldr	r3, [pc, #188]	; (8007870 <HAL_RCC_ClockConfig+0x260>)
 80077b4:	681b      	ldr	r3, [r3, #0]
 80077b6:	f003 030f 	and.w	r3, r3, #15
 80077ba:	683a      	ldr	r2, [r7, #0]
 80077bc:	429a      	cmp	r2, r3
 80077be:	d21d      	bcs.n	80077fc <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80077c0:	4b2b      	ldr	r3, [pc, #172]	; (8007870 <HAL_RCC_ClockConfig+0x260>)
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	f023 020f 	bic.w	r2, r3, #15
 80077c8:	4929      	ldr	r1, [pc, #164]	; (8007870 <HAL_RCC_ClockConfig+0x260>)
 80077ca:	683b      	ldr	r3, [r7, #0]
 80077cc:	4313      	orrs	r3, r2
 80077ce:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80077d0:	f7fc f8f0 	bl	80039b4 <HAL_GetTick>
 80077d4:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80077d6:	e00a      	b.n	80077ee <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80077d8:	f7fc f8ec 	bl	80039b4 <HAL_GetTick>
 80077dc:	4602      	mov	r2, r0
 80077de:	68fb      	ldr	r3, [r7, #12]
 80077e0:	1ad3      	subs	r3, r2, r3
 80077e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80077e6:	4293      	cmp	r3, r2
 80077e8:	d901      	bls.n	80077ee <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 80077ea:	2303      	movs	r3, #3
 80077ec:	e03b      	b.n	8007866 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80077ee:	4b20      	ldr	r3, [pc, #128]	; (8007870 <HAL_RCC_ClockConfig+0x260>)
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	f003 030f 	and.w	r3, r3, #15
 80077f6:	683a      	ldr	r2, [r7, #0]
 80077f8:	429a      	cmp	r2, r3
 80077fa:	d1ed      	bne.n	80077d8 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	f003 0304 	and.w	r3, r3, #4
 8007804:	2b00      	cmp	r3, #0
 8007806:	d008      	beq.n	800781a <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007808:	4b1a      	ldr	r3, [pc, #104]	; (8007874 <HAL_RCC_ClockConfig+0x264>)
 800780a:	689b      	ldr	r3, [r3, #8]
 800780c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	68db      	ldr	r3, [r3, #12]
 8007814:	4917      	ldr	r1, [pc, #92]	; (8007874 <HAL_RCC_ClockConfig+0x264>)
 8007816:	4313      	orrs	r3, r2
 8007818:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	f003 0308 	and.w	r3, r3, #8
 8007822:	2b00      	cmp	r3, #0
 8007824:	d009      	beq.n	800783a <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8007826:	4b13      	ldr	r3, [pc, #76]	; (8007874 <HAL_RCC_ClockConfig+0x264>)
 8007828:	689b      	ldr	r3, [r3, #8]
 800782a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	691b      	ldr	r3, [r3, #16]
 8007832:	00db      	lsls	r3, r3, #3
 8007834:	490f      	ldr	r1, [pc, #60]	; (8007874 <HAL_RCC_ClockConfig+0x264>)
 8007836:	4313      	orrs	r3, r2
 8007838:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800783a:	f000 f825 	bl	8007888 <HAL_RCC_GetSysClockFreq>
 800783e:	4602      	mov	r2, r0
 8007840:	4b0c      	ldr	r3, [pc, #48]	; (8007874 <HAL_RCC_ClockConfig+0x264>)
 8007842:	689b      	ldr	r3, [r3, #8]
 8007844:	091b      	lsrs	r3, r3, #4
 8007846:	f003 030f 	and.w	r3, r3, #15
 800784a:	490c      	ldr	r1, [pc, #48]	; (800787c <HAL_RCC_ClockConfig+0x26c>)
 800784c:	5ccb      	ldrb	r3, [r1, r3]
 800784e:	f003 031f 	and.w	r3, r3, #31
 8007852:	fa22 f303 	lsr.w	r3, r2, r3
 8007856:	4a0a      	ldr	r2, [pc, #40]	; (8007880 <HAL_RCC_ClockConfig+0x270>)
 8007858:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800785a:	4b0a      	ldr	r3, [pc, #40]	; (8007884 <HAL_RCC_ClockConfig+0x274>)
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	4618      	mov	r0, r3
 8007860:	f7fc f85c 	bl	800391c <HAL_InitTick>
 8007864:	4603      	mov	r3, r0
}
 8007866:	4618      	mov	r0, r3
 8007868:	3718      	adds	r7, #24
 800786a:	46bd      	mov	sp, r7
 800786c:	bd80      	pop	{r7, pc}
 800786e:	bf00      	nop
 8007870:	40022000 	.word	0x40022000
 8007874:	40021000 	.word	0x40021000
 8007878:	04c4b400 	.word	0x04c4b400
 800787c:	0800ceb0 	.word	0x0800ceb0
 8007880:	2000003c 	.word	0x2000003c
 8007884:	20000040 	.word	0x20000040

08007888 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007888:	b480      	push	{r7}
 800788a:	b087      	sub	sp, #28
 800788c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800788e:	4b2c      	ldr	r3, [pc, #176]	; (8007940 <HAL_RCC_GetSysClockFreq+0xb8>)
 8007890:	689b      	ldr	r3, [r3, #8]
 8007892:	f003 030c 	and.w	r3, r3, #12
 8007896:	2b04      	cmp	r3, #4
 8007898:	d102      	bne.n	80078a0 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800789a:	4b2a      	ldr	r3, [pc, #168]	; (8007944 <HAL_RCC_GetSysClockFreq+0xbc>)
 800789c:	613b      	str	r3, [r7, #16]
 800789e:	e047      	b.n	8007930 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80078a0:	4b27      	ldr	r3, [pc, #156]	; (8007940 <HAL_RCC_GetSysClockFreq+0xb8>)
 80078a2:	689b      	ldr	r3, [r3, #8]
 80078a4:	f003 030c 	and.w	r3, r3, #12
 80078a8:	2b08      	cmp	r3, #8
 80078aa:	d102      	bne.n	80078b2 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80078ac:	4b26      	ldr	r3, [pc, #152]	; (8007948 <HAL_RCC_GetSysClockFreq+0xc0>)
 80078ae:	613b      	str	r3, [r7, #16]
 80078b0:	e03e      	b.n	8007930 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80078b2:	4b23      	ldr	r3, [pc, #140]	; (8007940 <HAL_RCC_GetSysClockFreq+0xb8>)
 80078b4:	689b      	ldr	r3, [r3, #8]
 80078b6:	f003 030c 	and.w	r3, r3, #12
 80078ba:	2b0c      	cmp	r3, #12
 80078bc:	d136      	bne.n	800792c <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80078be:	4b20      	ldr	r3, [pc, #128]	; (8007940 <HAL_RCC_GetSysClockFreq+0xb8>)
 80078c0:	68db      	ldr	r3, [r3, #12]
 80078c2:	f003 0303 	and.w	r3, r3, #3
 80078c6:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80078c8:	4b1d      	ldr	r3, [pc, #116]	; (8007940 <HAL_RCC_GetSysClockFreq+0xb8>)
 80078ca:	68db      	ldr	r3, [r3, #12]
 80078cc:	091b      	lsrs	r3, r3, #4
 80078ce:	f003 030f 	and.w	r3, r3, #15
 80078d2:	3301      	adds	r3, #1
 80078d4:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80078d6:	68fb      	ldr	r3, [r7, #12]
 80078d8:	2b03      	cmp	r3, #3
 80078da:	d10c      	bne.n	80078f6 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80078dc:	4a1a      	ldr	r2, [pc, #104]	; (8007948 <HAL_RCC_GetSysClockFreq+0xc0>)
 80078de:	68bb      	ldr	r3, [r7, #8]
 80078e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80078e4:	4a16      	ldr	r2, [pc, #88]	; (8007940 <HAL_RCC_GetSysClockFreq+0xb8>)
 80078e6:	68d2      	ldr	r2, [r2, #12]
 80078e8:	0a12      	lsrs	r2, r2, #8
 80078ea:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80078ee:	fb02 f303 	mul.w	r3, r2, r3
 80078f2:	617b      	str	r3, [r7, #20]
      break;
 80078f4:	e00c      	b.n	8007910 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80078f6:	4a13      	ldr	r2, [pc, #76]	; (8007944 <HAL_RCC_GetSysClockFreq+0xbc>)
 80078f8:	68bb      	ldr	r3, [r7, #8]
 80078fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80078fe:	4a10      	ldr	r2, [pc, #64]	; (8007940 <HAL_RCC_GetSysClockFreq+0xb8>)
 8007900:	68d2      	ldr	r2, [r2, #12]
 8007902:	0a12      	lsrs	r2, r2, #8
 8007904:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8007908:	fb02 f303 	mul.w	r3, r2, r3
 800790c:	617b      	str	r3, [r7, #20]
      break;
 800790e:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8007910:	4b0b      	ldr	r3, [pc, #44]	; (8007940 <HAL_RCC_GetSysClockFreq+0xb8>)
 8007912:	68db      	ldr	r3, [r3, #12]
 8007914:	0e5b      	lsrs	r3, r3, #25
 8007916:	f003 0303 	and.w	r3, r3, #3
 800791a:	3301      	adds	r3, #1
 800791c:	005b      	lsls	r3, r3, #1
 800791e:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8007920:	697a      	ldr	r2, [r7, #20]
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	fbb2 f3f3 	udiv	r3, r2, r3
 8007928:	613b      	str	r3, [r7, #16]
 800792a:	e001      	b.n	8007930 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 800792c:	2300      	movs	r3, #0
 800792e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8007930:	693b      	ldr	r3, [r7, #16]
}
 8007932:	4618      	mov	r0, r3
 8007934:	371c      	adds	r7, #28
 8007936:	46bd      	mov	sp, r7
 8007938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800793c:	4770      	bx	lr
 800793e:	bf00      	nop
 8007940:	40021000 	.word	0x40021000
 8007944:	00f42400 	.word	0x00f42400
 8007948:	016e3600 	.word	0x016e3600

0800794c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800794c:	b480      	push	{r7}
 800794e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007950:	4b03      	ldr	r3, [pc, #12]	; (8007960 <HAL_RCC_GetHCLKFreq+0x14>)
 8007952:	681b      	ldr	r3, [r3, #0]
}
 8007954:	4618      	mov	r0, r3
 8007956:	46bd      	mov	sp, r7
 8007958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800795c:	4770      	bx	lr
 800795e:	bf00      	nop
 8007960:	2000003c 	.word	0x2000003c

08007964 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007964:	b580      	push	{r7, lr}
 8007966:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8007968:	f7ff fff0 	bl	800794c <HAL_RCC_GetHCLKFreq>
 800796c:	4602      	mov	r2, r0
 800796e:	4b06      	ldr	r3, [pc, #24]	; (8007988 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007970:	689b      	ldr	r3, [r3, #8]
 8007972:	0a1b      	lsrs	r3, r3, #8
 8007974:	f003 0307 	and.w	r3, r3, #7
 8007978:	4904      	ldr	r1, [pc, #16]	; (800798c <HAL_RCC_GetPCLK1Freq+0x28>)
 800797a:	5ccb      	ldrb	r3, [r1, r3]
 800797c:	f003 031f 	and.w	r3, r3, #31
 8007980:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007984:	4618      	mov	r0, r3
 8007986:	bd80      	pop	{r7, pc}
 8007988:	40021000 	.word	0x40021000
 800798c:	0800cec0 	.word	0x0800cec0

08007990 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007990:	b580      	push	{r7, lr}
 8007992:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8007994:	f7ff ffda 	bl	800794c <HAL_RCC_GetHCLKFreq>
 8007998:	4602      	mov	r2, r0
 800799a:	4b06      	ldr	r3, [pc, #24]	; (80079b4 <HAL_RCC_GetPCLK2Freq+0x24>)
 800799c:	689b      	ldr	r3, [r3, #8]
 800799e:	0adb      	lsrs	r3, r3, #11
 80079a0:	f003 0307 	and.w	r3, r3, #7
 80079a4:	4904      	ldr	r1, [pc, #16]	; (80079b8 <HAL_RCC_GetPCLK2Freq+0x28>)
 80079a6:	5ccb      	ldrb	r3, [r1, r3]
 80079a8:	f003 031f 	and.w	r3, r3, #31
 80079ac:	fa22 f303 	lsr.w	r3, r2, r3
}
 80079b0:	4618      	mov	r0, r3
 80079b2:	bd80      	pop	{r7, pc}
 80079b4:	40021000 	.word	0x40021000
 80079b8:	0800cec0 	.word	0x0800cec0

080079bc <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80079bc:	b480      	push	{r7}
 80079be:	b087      	sub	sp, #28
 80079c0:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80079c2:	4b1e      	ldr	r3, [pc, #120]	; (8007a3c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80079c4:	68db      	ldr	r3, [r3, #12]
 80079c6:	f003 0303 	and.w	r3, r3, #3
 80079ca:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80079cc:	4b1b      	ldr	r3, [pc, #108]	; (8007a3c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80079ce:	68db      	ldr	r3, [r3, #12]
 80079d0:	091b      	lsrs	r3, r3, #4
 80079d2:	f003 030f 	and.w	r3, r3, #15
 80079d6:	3301      	adds	r3, #1
 80079d8:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80079da:	693b      	ldr	r3, [r7, #16]
 80079dc:	2b03      	cmp	r3, #3
 80079de:	d10c      	bne.n	80079fa <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80079e0:	4a17      	ldr	r2, [pc, #92]	; (8007a40 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80079e2:	68fb      	ldr	r3, [r7, #12]
 80079e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80079e8:	4a14      	ldr	r2, [pc, #80]	; (8007a3c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80079ea:	68d2      	ldr	r2, [r2, #12]
 80079ec:	0a12      	lsrs	r2, r2, #8
 80079ee:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80079f2:	fb02 f303 	mul.w	r3, r2, r3
 80079f6:	617b      	str	r3, [r7, #20]
    break;
 80079f8:	e00c      	b.n	8007a14 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80079fa:	4a12      	ldr	r2, [pc, #72]	; (8007a44 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 80079fc:	68fb      	ldr	r3, [r7, #12]
 80079fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8007a02:	4a0e      	ldr	r2, [pc, #56]	; (8007a3c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8007a04:	68d2      	ldr	r2, [r2, #12]
 8007a06:	0a12      	lsrs	r2, r2, #8
 8007a08:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8007a0c:	fb02 f303 	mul.w	r3, r2, r3
 8007a10:	617b      	str	r3, [r7, #20]
    break;
 8007a12:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8007a14:	4b09      	ldr	r3, [pc, #36]	; (8007a3c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8007a16:	68db      	ldr	r3, [r3, #12]
 8007a18:	0e5b      	lsrs	r3, r3, #25
 8007a1a:	f003 0303 	and.w	r3, r3, #3
 8007a1e:	3301      	adds	r3, #1
 8007a20:	005b      	lsls	r3, r3, #1
 8007a22:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8007a24:	697a      	ldr	r2, [r7, #20]
 8007a26:	68bb      	ldr	r3, [r7, #8]
 8007a28:	fbb2 f3f3 	udiv	r3, r2, r3
 8007a2c:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8007a2e:	687b      	ldr	r3, [r7, #4]
}
 8007a30:	4618      	mov	r0, r3
 8007a32:	371c      	adds	r7, #28
 8007a34:	46bd      	mov	sp, r7
 8007a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a3a:	4770      	bx	lr
 8007a3c:	40021000 	.word	0x40021000
 8007a40:	016e3600 	.word	0x016e3600
 8007a44:	00f42400 	.word	0x00f42400

08007a48 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007a48:	b580      	push	{r7, lr}
 8007a4a:	b086      	sub	sp, #24
 8007a4c:	af00      	add	r7, sp, #0
 8007a4e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8007a50:	2300      	movs	r3, #0
 8007a52:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8007a54:	2300      	movs	r3, #0
 8007a56:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	681b      	ldr	r3, [r3, #0]
 8007a5c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007a60:	2b00      	cmp	r3, #0
 8007a62:	f000 8098 	beq.w	8007b96 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007a66:	2300      	movs	r3, #0
 8007a68:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007a6a:	4b43      	ldr	r3, [pc, #268]	; (8007b78 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007a6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007a6e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007a72:	2b00      	cmp	r3, #0
 8007a74:	d10d      	bne.n	8007a92 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007a76:	4b40      	ldr	r3, [pc, #256]	; (8007b78 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007a78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007a7a:	4a3f      	ldr	r2, [pc, #252]	; (8007b78 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007a7c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007a80:	6593      	str	r3, [r2, #88]	; 0x58
 8007a82:	4b3d      	ldr	r3, [pc, #244]	; (8007b78 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007a84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007a86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007a8a:	60bb      	str	r3, [r7, #8]
 8007a8c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007a8e:	2301      	movs	r3, #1
 8007a90:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007a92:	4b3a      	ldr	r3, [pc, #232]	; (8007b7c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8007a94:	681b      	ldr	r3, [r3, #0]
 8007a96:	4a39      	ldr	r2, [pc, #228]	; (8007b7c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8007a98:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007a9c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8007a9e:	f7fb ff89 	bl	80039b4 <HAL_GetTick>
 8007aa2:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007aa4:	e009      	b.n	8007aba <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007aa6:	f7fb ff85 	bl	80039b4 <HAL_GetTick>
 8007aaa:	4602      	mov	r2, r0
 8007aac:	68fb      	ldr	r3, [r7, #12]
 8007aae:	1ad3      	subs	r3, r2, r3
 8007ab0:	2b02      	cmp	r3, #2
 8007ab2:	d902      	bls.n	8007aba <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8007ab4:	2303      	movs	r3, #3
 8007ab6:	74fb      	strb	r3, [r7, #19]
        break;
 8007ab8:	e005      	b.n	8007ac6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007aba:	4b30      	ldr	r3, [pc, #192]	; (8007b7c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8007abc:	681b      	ldr	r3, [r3, #0]
 8007abe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007ac2:	2b00      	cmp	r3, #0
 8007ac4:	d0ef      	beq.n	8007aa6 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8007ac6:	7cfb      	ldrb	r3, [r7, #19]
 8007ac8:	2b00      	cmp	r3, #0
 8007aca:	d159      	bne.n	8007b80 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8007acc:	4b2a      	ldr	r3, [pc, #168]	; (8007b78 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007ace:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007ad2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007ad6:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8007ad8:	697b      	ldr	r3, [r7, #20]
 8007ada:	2b00      	cmp	r3, #0
 8007adc:	d01e      	beq.n	8007b1c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ae2:	697a      	ldr	r2, [r7, #20]
 8007ae4:	429a      	cmp	r2, r3
 8007ae6:	d019      	beq.n	8007b1c <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8007ae8:	4b23      	ldr	r3, [pc, #140]	; (8007b78 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007aea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007aee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007af2:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8007af4:	4b20      	ldr	r3, [pc, #128]	; (8007b78 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007af6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007afa:	4a1f      	ldr	r2, [pc, #124]	; (8007b78 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007afc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007b00:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8007b04:	4b1c      	ldr	r3, [pc, #112]	; (8007b78 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007b06:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007b0a:	4a1b      	ldr	r2, [pc, #108]	; (8007b78 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007b0c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007b10:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8007b14:	4a18      	ldr	r2, [pc, #96]	; (8007b78 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007b16:	697b      	ldr	r3, [r7, #20]
 8007b18:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8007b1c:	697b      	ldr	r3, [r7, #20]
 8007b1e:	f003 0301 	and.w	r3, r3, #1
 8007b22:	2b00      	cmp	r3, #0
 8007b24:	d016      	beq.n	8007b54 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007b26:	f7fb ff45 	bl	80039b4 <HAL_GetTick>
 8007b2a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007b2c:	e00b      	b.n	8007b46 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007b2e:	f7fb ff41 	bl	80039b4 <HAL_GetTick>
 8007b32:	4602      	mov	r2, r0
 8007b34:	68fb      	ldr	r3, [r7, #12]
 8007b36:	1ad3      	subs	r3, r2, r3
 8007b38:	f241 3288 	movw	r2, #5000	; 0x1388
 8007b3c:	4293      	cmp	r3, r2
 8007b3e:	d902      	bls.n	8007b46 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8007b40:	2303      	movs	r3, #3
 8007b42:	74fb      	strb	r3, [r7, #19]
            break;
 8007b44:	e006      	b.n	8007b54 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007b46:	4b0c      	ldr	r3, [pc, #48]	; (8007b78 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007b48:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007b4c:	f003 0302 	and.w	r3, r3, #2
 8007b50:	2b00      	cmp	r3, #0
 8007b52:	d0ec      	beq.n	8007b2e <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8007b54:	7cfb      	ldrb	r3, [r7, #19]
 8007b56:	2b00      	cmp	r3, #0
 8007b58:	d10b      	bne.n	8007b72 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007b5a:	4b07      	ldr	r3, [pc, #28]	; (8007b78 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007b5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007b60:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b68:	4903      	ldr	r1, [pc, #12]	; (8007b78 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007b6a:	4313      	orrs	r3, r2
 8007b6c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8007b70:	e008      	b.n	8007b84 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8007b72:	7cfb      	ldrb	r3, [r7, #19]
 8007b74:	74bb      	strb	r3, [r7, #18]
 8007b76:	e005      	b.n	8007b84 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8007b78:	40021000 	.word	0x40021000
 8007b7c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007b80:	7cfb      	ldrb	r3, [r7, #19]
 8007b82:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8007b84:	7c7b      	ldrb	r3, [r7, #17]
 8007b86:	2b01      	cmp	r3, #1
 8007b88:	d105      	bne.n	8007b96 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007b8a:	4ba6      	ldr	r3, [pc, #664]	; (8007e24 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007b8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007b8e:	4aa5      	ldr	r2, [pc, #660]	; (8007e24 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007b90:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007b94:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	681b      	ldr	r3, [r3, #0]
 8007b9a:	f003 0301 	and.w	r3, r3, #1
 8007b9e:	2b00      	cmp	r3, #0
 8007ba0:	d00a      	beq.n	8007bb8 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8007ba2:	4ba0      	ldr	r3, [pc, #640]	; (8007e24 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007ba4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007ba8:	f023 0203 	bic.w	r2, r3, #3
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	685b      	ldr	r3, [r3, #4]
 8007bb0:	499c      	ldr	r1, [pc, #624]	; (8007e24 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007bb2:	4313      	orrs	r3, r2
 8007bb4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	681b      	ldr	r3, [r3, #0]
 8007bbc:	f003 0302 	and.w	r3, r3, #2
 8007bc0:	2b00      	cmp	r3, #0
 8007bc2:	d00a      	beq.n	8007bda <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8007bc4:	4b97      	ldr	r3, [pc, #604]	; (8007e24 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007bc6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007bca:	f023 020c 	bic.w	r2, r3, #12
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	689b      	ldr	r3, [r3, #8]
 8007bd2:	4994      	ldr	r1, [pc, #592]	; (8007e24 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007bd4:	4313      	orrs	r3, r2
 8007bd6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	681b      	ldr	r3, [r3, #0]
 8007bde:	f003 0304 	and.w	r3, r3, #4
 8007be2:	2b00      	cmp	r3, #0
 8007be4:	d00a      	beq.n	8007bfc <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8007be6:	4b8f      	ldr	r3, [pc, #572]	; (8007e24 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007be8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007bec:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	68db      	ldr	r3, [r3, #12]
 8007bf4:	498b      	ldr	r1, [pc, #556]	; (8007e24 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007bf6:	4313      	orrs	r3, r2
 8007bf8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	681b      	ldr	r3, [r3, #0]
 8007c00:	f003 0308 	and.w	r3, r3, #8
 8007c04:	2b00      	cmp	r3, #0
 8007c06:	d00a      	beq.n	8007c1e <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8007c08:	4b86      	ldr	r3, [pc, #536]	; (8007e24 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007c0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007c0e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	691b      	ldr	r3, [r3, #16]
 8007c16:	4983      	ldr	r1, [pc, #524]	; (8007e24 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007c18:	4313      	orrs	r3, r2
 8007c1a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	681b      	ldr	r3, [r3, #0]
 8007c22:	f003 0320 	and.w	r3, r3, #32
 8007c26:	2b00      	cmp	r3, #0
 8007c28:	d00a      	beq.n	8007c40 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8007c2a:	4b7e      	ldr	r3, [pc, #504]	; (8007e24 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007c2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007c30:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	695b      	ldr	r3, [r3, #20]
 8007c38:	497a      	ldr	r1, [pc, #488]	; (8007e24 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007c3a:	4313      	orrs	r3, r2
 8007c3c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	681b      	ldr	r3, [r3, #0]
 8007c44:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007c48:	2b00      	cmp	r3, #0
 8007c4a:	d00a      	beq.n	8007c62 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8007c4c:	4b75      	ldr	r3, [pc, #468]	; (8007e24 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007c4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007c52:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	699b      	ldr	r3, [r3, #24]
 8007c5a:	4972      	ldr	r1, [pc, #456]	; (8007e24 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007c5c:	4313      	orrs	r3, r2
 8007c5e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	681b      	ldr	r3, [r3, #0]
 8007c66:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007c6a:	2b00      	cmp	r3, #0
 8007c6c:	d00a      	beq.n	8007c84 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8007c6e:	4b6d      	ldr	r3, [pc, #436]	; (8007e24 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007c70:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007c74:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	69db      	ldr	r3, [r3, #28]
 8007c7c:	4969      	ldr	r1, [pc, #420]	; (8007e24 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007c7e:	4313      	orrs	r3, r2
 8007c80:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	681b      	ldr	r3, [r3, #0]
 8007c88:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007c8c:	2b00      	cmp	r3, #0
 8007c8e:	d00a      	beq.n	8007ca6 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8007c90:	4b64      	ldr	r3, [pc, #400]	; (8007e24 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007c92:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007c96:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	6a1b      	ldr	r3, [r3, #32]
 8007c9e:	4961      	ldr	r1, [pc, #388]	; (8007e24 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007ca0:	4313      	orrs	r3, r2
 8007ca2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	681b      	ldr	r3, [r3, #0]
 8007caa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007cae:	2b00      	cmp	r3, #0
 8007cb0:	d00a      	beq.n	8007cc8 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007cb2:	4b5c      	ldr	r3, [pc, #368]	; (8007e24 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007cb4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007cb8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007cc0:	4958      	ldr	r1, [pc, #352]	; (8007e24 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007cc2:	4313      	orrs	r3, r2
 8007cc4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	681b      	ldr	r3, [r3, #0]
 8007ccc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007cd0:	2b00      	cmp	r3, #0
 8007cd2:	d015      	beq.n	8007d00 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8007cd4:	4b53      	ldr	r3, [pc, #332]	; (8007e24 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007cd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007cda:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ce2:	4950      	ldr	r1, [pc, #320]	; (8007e24 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007ce4:	4313      	orrs	r3, r2
 8007ce6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007cee:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007cf2:	d105      	bne.n	8007d00 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007cf4:	4b4b      	ldr	r3, [pc, #300]	; (8007e24 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007cf6:	68db      	ldr	r3, [r3, #12]
 8007cf8:	4a4a      	ldr	r2, [pc, #296]	; (8007e24 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007cfa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007cfe:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	681b      	ldr	r3, [r3, #0]
 8007d04:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007d08:	2b00      	cmp	r3, #0
 8007d0a:	d015      	beq.n	8007d38 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8007d0c:	4b45      	ldr	r3, [pc, #276]	; (8007e24 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007d0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007d12:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d1a:	4942      	ldr	r1, [pc, #264]	; (8007e24 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007d1c:	4313      	orrs	r3, r2
 8007d1e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d26:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007d2a:	d105      	bne.n	8007d38 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007d2c:	4b3d      	ldr	r3, [pc, #244]	; (8007e24 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007d2e:	68db      	ldr	r3, [r3, #12]
 8007d30:	4a3c      	ldr	r2, [pc, #240]	; (8007e24 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007d32:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007d36:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	681b      	ldr	r3, [r3, #0]
 8007d3c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007d40:	2b00      	cmp	r3, #0
 8007d42:	d015      	beq.n	8007d70 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8007d44:	4b37      	ldr	r3, [pc, #220]	; (8007e24 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007d46:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007d4a:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d52:	4934      	ldr	r1, [pc, #208]	; (8007e24 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007d54:	4313      	orrs	r3, r2
 8007d56:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d5e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8007d62:	d105      	bne.n	8007d70 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007d64:	4b2f      	ldr	r3, [pc, #188]	; (8007e24 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007d66:	68db      	ldr	r3, [r3, #12]
 8007d68:	4a2e      	ldr	r2, [pc, #184]	; (8007e24 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007d6a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007d6e:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	681b      	ldr	r3, [r3, #0]
 8007d74:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007d78:	2b00      	cmp	r3, #0
 8007d7a:	d015      	beq.n	8007da8 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8007d7c:	4b29      	ldr	r3, [pc, #164]	; (8007e24 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007d7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007d82:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007d8a:	4926      	ldr	r1, [pc, #152]	; (8007e24 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007d8c:	4313      	orrs	r3, r2
 8007d8e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007d96:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007d9a:	d105      	bne.n	8007da8 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007d9c:	4b21      	ldr	r3, [pc, #132]	; (8007e24 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007d9e:	68db      	ldr	r3, [r3, #12]
 8007da0:	4a20      	ldr	r2, [pc, #128]	; (8007e24 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007da2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007da6:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	681b      	ldr	r3, [r3, #0]
 8007dac:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007db0:	2b00      	cmp	r3, #0
 8007db2:	d015      	beq.n	8007de0 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8007db4:	4b1b      	ldr	r3, [pc, #108]	; (8007e24 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007db6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007dba:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007dc2:	4918      	ldr	r1, [pc, #96]	; (8007e24 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007dc4:	4313      	orrs	r3, r2
 8007dc6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007dce:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007dd2:	d105      	bne.n	8007de0 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007dd4:	4b13      	ldr	r3, [pc, #76]	; (8007e24 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007dd6:	68db      	ldr	r3, [r3, #12]
 8007dd8:	4a12      	ldr	r2, [pc, #72]	; (8007e24 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007dda:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007dde:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	681b      	ldr	r3, [r3, #0]
 8007de4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007de8:	2b00      	cmp	r3, #0
 8007dea:	d015      	beq.n	8007e18 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8007dec:	4b0d      	ldr	r3, [pc, #52]	; (8007e24 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007dee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007df2:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007dfa:	490a      	ldr	r1, [pc, #40]	; (8007e24 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007dfc:	4313      	orrs	r3, r2
 8007dfe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007e06:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007e0a:	d105      	bne.n	8007e18 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8007e0c:	4b05      	ldr	r3, [pc, #20]	; (8007e24 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007e0e:	68db      	ldr	r3, [r3, #12]
 8007e10:	4a04      	ldr	r2, [pc, #16]	; (8007e24 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007e12:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007e16:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8007e18:	7cbb      	ldrb	r3, [r7, #18]
}
 8007e1a:	4618      	mov	r0, r3
 8007e1c:	3718      	adds	r7, #24
 8007e1e:	46bd      	mov	sp, r7
 8007e20:	bd80      	pop	{r7, pc}
 8007e22:	bf00      	nop
 8007e24:	40021000 	.word	0x40021000

08007e28 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007e28:	b580      	push	{r7, lr}
 8007e2a:	b084      	sub	sp, #16
 8007e2c:	af00      	add	r7, sp, #0
 8007e2e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	2b00      	cmp	r3, #0
 8007e34:	d101      	bne.n	8007e3a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8007e36:	2301      	movs	r3, #1
 8007e38:	e09d      	b.n	8007f76 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e3e:	2b00      	cmp	r3, #0
 8007e40:	d108      	bne.n	8007e54 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	685b      	ldr	r3, [r3, #4]
 8007e46:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007e4a:	d009      	beq.n	8007e60 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	2200      	movs	r2, #0
 8007e50:	61da      	str	r2, [r3, #28]
 8007e52:	e005      	b.n	8007e60 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	2200      	movs	r2, #0
 8007e58:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	2200      	movs	r2, #0
 8007e5e:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	2200      	movs	r2, #0
 8007e64:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8007e6c:	b2db      	uxtb	r3, r3
 8007e6e:	2b00      	cmp	r3, #0
 8007e70:	d106      	bne.n	8007e80 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	2200      	movs	r2, #0
 8007e76:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007e7a:	6878      	ldr	r0, [r7, #4]
 8007e7c:	f7fb f8ba 	bl	8002ff4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	2202      	movs	r2, #2
 8007e84:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	681b      	ldr	r3, [r3, #0]
 8007e8c:	681a      	ldr	r2, [r3, #0]
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	681b      	ldr	r3, [r3, #0]
 8007e92:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007e96:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	68db      	ldr	r3, [r3, #12]
 8007e9c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8007ea0:	d902      	bls.n	8007ea8 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8007ea2:	2300      	movs	r3, #0
 8007ea4:	60fb      	str	r3, [r7, #12]
 8007ea6:	e002      	b.n	8007eae <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8007ea8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007eac:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	68db      	ldr	r3, [r3, #12]
 8007eb2:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8007eb6:	d007      	beq.n	8007ec8 <HAL_SPI_Init+0xa0>
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	68db      	ldr	r3, [r3, #12]
 8007ebc:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8007ec0:	d002      	beq.n	8007ec8 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	2200      	movs	r2, #0
 8007ec6:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	685b      	ldr	r3, [r3, #4]
 8007ecc:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	689b      	ldr	r3, [r3, #8]
 8007ed4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8007ed8:	431a      	orrs	r2, r3
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	691b      	ldr	r3, [r3, #16]
 8007ede:	f003 0302 	and.w	r3, r3, #2
 8007ee2:	431a      	orrs	r2, r3
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	695b      	ldr	r3, [r3, #20]
 8007ee8:	f003 0301 	and.w	r3, r3, #1
 8007eec:	431a      	orrs	r2, r3
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	699b      	ldr	r3, [r3, #24]
 8007ef2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007ef6:	431a      	orrs	r2, r3
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	69db      	ldr	r3, [r3, #28]
 8007efc:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007f00:	431a      	orrs	r2, r3
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	6a1b      	ldr	r3, [r3, #32]
 8007f06:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007f0a:	ea42 0103 	orr.w	r1, r2, r3
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f12:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	681b      	ldr	r3, [r3, #0]
 8007f1a:	430a      	orrs	r2, r1
 8007f1c:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	699b      	ldr	r3, [r3, #24]
 8007f22:	0c1b      	lsrs	r3, r3, #16
 8007f24:	f003 0204 	and.w	r2, r3, #4
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f2c:	f003 0310 	and.w	r3, r3, #16
 8007f30:	431a      	orrs	r2, r3
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007f36:	f003 0308 	and.w	r3, r3, #8
 8007f3a:	431a      	orrs	r2, r3
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	68db      	ldr	r3, [r3, #12]
 8007f40:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8007f44:	ea42 0103 	orr.w	r1, r2, r3
 8007f48:	68fb      	ldr	r3, [r7, #12]
 8007f4a:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	681b      	ldr	r3, [r3, #0]
 8007f52:	430a      	orrs	r2, r1
 8007f54:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	681b      	ldr	r3, [r3, #0]
 8007f5a:	69da      	ldr	r2, [r3, #28]
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	681b      	ldr	r3, [r3, #0]
 8007f60:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007f64:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	2200      	movs	r2, #0
 8007f6a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	2201      	movs	r2, #1
 8007f70:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8007f74:	2300      	movs	r3, #0
}
 8007f76:	4618      	mov	r0, r3
 8007f78:	3710      	adds	r7, #16
 8007f7a:	46bd      	mov	sp, r7
 8007f7c:	bd80      	pop	{r7, pc}

08007f7e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007f7e:	b580      	push	{r7, lr}
 8007f80:	b088      	sub	sp, #32
 8007f82:	af00      	add	r7, sp, #0
 8007f84:	60f8      	str	r0, [r7, #12]
 8007f86:	60b9      	str	r1, [r7, #8]
 8007f88:	603b      	str	r3, [r7, #0]
 8007f8a:	4613      	mov	r3, r2
 8007f8c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8007f8e:	2300      	movs	r3, #0
 8007f90:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007f92:	68fb      	ldr	r3, [r7, #12]
 8007f94:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8007f98:	2b01      	cmp	r3, #1
 8007f9a:	d101      	bne.n	8007fa0 <HAL_SPI_Transmit+0x22>
 8007f9c:	2302      	movs	r3, #2
 8007f9e:	e158      	b.n	8008252 <HAL_SPI_Transmit+0x2d4>
 8007fa0:	68fb      	ldr	r3, [r7, #12]
 8007fa2:	2201      	movs	r2, #1
 8007fa4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007fa8:	f7fb fd04 	bl	80039b4 <HAL_GetTick>
 8007fac:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8007fae:	88fb      	ldrh	r3, [r7, #6]
 8007fb0:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8007fb2:	68fb      	ldr	r3, [r7, #12]
 8007fb4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8007fb8:	b2db      	uxtb	r3, r3
 8007fba:	2b01      	cmp	r3, #1
 8007fbc:	d002      	beq.n	8007fc4 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8007fbe:	2302      	movs	r3, #2
 8007fc0:	77fb      	strb	r3, [r7, #31]
    goto error;
 8007fc2:	e13d      	b.n	8008240 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 8007fc4:	68bb      	ldr	r3, [r7, #8]
 8007fc6:	2b00      	cmp	r3, #0
 8007fc8:	d002      	beq.n	8007fd0 <HAL_SPI_Transmit+0x52>
 8007fca:	88fb      	ldrh	r3, [r7, #6]
 8007fcc:	2b00      	cmp	r3, #0
 8007fce:	d102      	bne.n	8007fd6 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8007fd0:	2301      	movs	r3, #1
 8007fd2:	77fb      	strb	r3, [r7, #31]
    goto error;
 8007fd4:	e134      	b.n	8008240 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8007fd6:	68fb      	ldr	r3, [r7, #12]
 8007fd8:	2203      	movs	r2, #3
 8007fda:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007fde:	68fb      	ldr	r3, [r7, #12]
 8007fe0:	2200      	movs	r2, #0
 8007fe2:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8007fe4:	68fb      	ldr	r3, [r7, #12]
 8007fe6:	68ba      	ldr	r2, [r7, #8]
 8007fe8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8007fea:	68fb      	ldr	r3, [r7, #12]
 8007fec:	88fa      	ldrh	r2, [r7, #6]
 8007fee:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8007ff0:	68fb      	ldr	r3, [r7, #12]
 8007ff2:	88fa      	ldrh	r2, [r7, #6]
 8007ff4:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8007ff6:	68fb      	ldr	r3, [r7, #12]
 8007ff8:	2200      	movs	r2, #0
 8007ffa:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8007ffc:	68fb      	ldr	r3, [r7, #12]
 8007ffe:	2200      	movs	r2, #0
 8008000:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8008004:	68fb      	ldr	r3, [r7, #12]
 8008006:	2200      	movs	r2, #0
 8008008:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 800800c:	68fb      	ldr	r3, [r7, #12]
 800800e:	2200      	movs	r2, #0
 8008010:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8008012:	68fb      	ldr	r3, [r7, #12]
 8008014:	2200      	movs	r2, #0
 8008016:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008018:	68fb      	ldr	r3, [r7, #12]
 800801a:	689b      	ldr	r3, [r3, #8]
 800801c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008020:	d10f      	bne.n	8008042 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8008022:	68fb      	ldr	r3, [r7, #12]
 8008024:	681b      	ldr	r3, [r3, #0]
 8008026:	681a      	ldr	r2, [r3, #0]
 8008028:	68fb      	ldr	r3, [r7, #12]
 800802a:	681b      	ldr	r3, [r3, #0]
 800802c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008030:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8008032:	68fb      	ldr	r3, [r7, #12]
 8008034:	681b      	ldr	r3, [r3, #0]
 8008036:	681a      	ldr	r2, [r3, #0]
 8008038:	68fb      	ldr	r3, [r7, #12]
 800803a:	681b      	ldr	r3, [r3, #0]
 800803c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008040:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008042:	68fb      	ldr	r3, [r7, #12]
 8008044:	681b      	ldr	r3, [r3, #0]
 8008046:	681b      	ldr	r3, [r3, #0]
 8008048:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800804c:	2b40      	cmp	r3, #64	; 0x40
 800804e:	d007      	beq.n	8008060 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008050:	68fb      	ldr	r3, [r7, #12]
 8008052:	681b      	ldr	r3, [r3, #0]
 8008054:	681a      	ldr	r2, [r3, #0]
 8008056:	68fb      	ldr	r3, [r7, #12]
 8008058:	681b      	ldr	r3, [r3, #0]
 800805a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800805e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008060:	68fb      	ldr	r3, [r7, #12]
 8008062:	68db      	ldr	r3, [r3, #12]
 8008064:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8008068:	d94b      	bls.n	8008102 <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800806a:	68fb      	ldr	r3, [r7, #12]
 800806c:	685b      	ldr	r3, [r3, #4]
 800806e:	2b00      	cmp	r3, #0
 8008070:	d002      	beq.n	8008078 <HAL_SPI_Transmit+0xfa>
 8008072:	8afb      	ldrh	r3, [r7, #22]
 8008074:	2b01      	cmp	r3, #1
 8008076:	d13e      	bne.n	80080f6 <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008078:	68fb      	ldr	r3, [r7, #12]
 800807a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800807c:	881a      	ldrh	r2, [r3, #0]
 800807e:	68fb      	ldr	r3, [r7, #12]
 8008080:	681b      	ldr	r3, [r3, #0]
 8008082:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8008084:	68fb      	ldr	r3, [r7, #12]
 8008086:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008088:	1c9a      	adds	r2, r3, #2
 800808a:	68fb      	ldr	r3, [r7, #12]
 800808c:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800808e:	68fb      	ldr	r3, [r7, #12]
 8008090:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008092:	b29b      	uxth	r3, r3
 8008094:	3b01      	subs	r3, #1
 8008096:	b29a      	uxth	r2, r3
 8008098:	68fb      	ldr	r3, [r7, #12]
 800809a:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800809c:	e02b      	b.n	80080f6 <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800809e:	68fb      	ldr	r3, [r7, #12]
 80080a0:	681b      	ldr	r3, [r3, #0]
 80080a2:	689b      	ldr	r3, [r3, #8]
 80080a4:	f003 0302 	and.w	r3, r3, #2
 80080a8:	2b02      	cmp	r3, #2
 80080aa:	d112      	bne.n	80080d2 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80080ac:	68fb      	ldr	r3, [r7, #12]
 80080ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80080b0:	881a      	ldrh	r2, [r3, #0]
 80080b2:	68fb      	ldr	r3, [r7, #12]
 80080b4:	681b      	ldr	r3, [r3, #0]
 80080b6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80080b8:	68fb      	ldr	r3, [r7, #12]
 80080ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80080bc:	1c9a      	adds	r2, r3, #2
 80080be:	68fb      	ldr	r3, [r7, #12]
 80080c0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80080c2:	68fb      	ldr	r3, [r7, #12]
 80080c4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80080c6:	b29b      	uxth	r3, r3
 80080c8:	3b01      	subs	r3, #1
 80080ca:	b29a      	uxth	r2, r3
 80080cc:	68fb      	ldr	r3, [r7, #12]
 80080ce:	87da      	strh	r2, [r3, #62]	; 0x3e
 80080d0:	e011      	b.n	80080f6 <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80080d2:	f7fb fc6f 	bl	80039b4 <HAL_GetTick>
 80080d6:	4602      	mov	r2, r0
 80080d8:	69bb      	ldr	r3, [r7, #24]
 80080da:	1ad3      	subs	r3, r2, r3
 80080dc:	683a      	ldr	r2, [r7, #0]
 80080de:	429a      	cmp	r2, r3
 80080e0:	d803      	bhi.n	80080ea <HAL_SPI_Transmit+0x16c>
 80080e2:	683b      	ldr	r3, [r7, #0]
 80080e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80080e8:	d102      	bne.n	80080f0 <HAL_SPI_Transmit+0x172>
 80080ea:	683b      	ldr	r3, [r7, #0]
 80080ec:	2b00      	cmp	r3, #0
 80080ee:	d102      	bne.n	80080f6 <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 80080f0:	2303      	movs	r3, #3
 80080f2:	77fb      	strb	r3, [r7, #31]
          goto error;
 80080f4:	e0a4      	b.n	8008240 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 80080f6:	68fb      	ldr	r3, [r7, #12]
 80080f8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80080fa:	b29b      	uxth	r3, r3
 80080fc:	2b00      	cmp	r3, #0
 80080fe:	d1ce      	bne.n	800809e <HAL_SPI_Transmit+0x120>
 8008100:	e07c      	b.n	80081fc <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008102:	68fb      	ldr	r3, [r7, #12]
 8008104:	685b      	ldr	r3, [r3, #4]
 8008106:	2b00      	cmp	r3, #0
 8008108:	d002      	beq.n	8008110 <HAL_SPI_Transmit+0x192>
 800810a:	8afb      	ldrh	r3, [r7, #22]
 800810c:	2b01      	cmp	r3, #1
 800810e:	d170      	bne.n	80081f2 <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 8008110:	68fb      	ldr	r3, [r7, #12]
 8008112:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008114:	b29b      	uxth	r3, r3
 8008116:	2b01      	cmp	r3, #1
 8008118:	d912      	bls.n	8008140 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800811a:	68fb      	ldr	r3, [r7, #12]
 800811c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800811e:	881a      	ldrh	r2, [r3, #0]
 8008120:	68fb      	ldr	r3, [r7, #12]
 8008122:	681b      	ldr	r3, [r3, #0]
 8008124:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8008126:	68fb      	ldr	r3, [r7, #12]
 8008128:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800812a:	1c9a      	adds	r2, r3, #2
 800812c:	68fb      	ldr	r3, [r7, #12]
 800812e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8008130:	68fb      	ldr	r3, [r7, #12]
 8008132:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008134:	b29b      	uxth	r3, r3
 8008136:	3b02      	subs	r3, #2
 8008138:	b29a      	uxth	r2, r3
 800813a:	68fb      	ldr	r3, [r7, #12]
 800813c:	87da      	strh	r2, [r3, #62]	; 0x3e
 800813e:	e058      	b.n	80081f2 <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8008140:	68fb      	ldr	r3, [r7, #12]
 8008142:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008144:	68fb      	ldr	r3, [r7, #12]
 8008146:	681b      	ldr	r3, [r3, #0]
 8008148:	330c      	adds	r3, #12
 800814a:	7812      	ldrb	r2, [r2, #0]
 800814c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 800814e:	68fb      	ldr	r3, [r7, #12]
 8008150:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008152:	1c5a      	adds	r2, r3, #1
 8008154:	68fb      	ldr	r3, [r7, #12]
 8008156:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8008158:	68fb      	ldr	r3, [r7, #12]
 800815a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800815c:	b29b      	uxth	r3, r3
 800815e:	3b01      	subs	r3, #1
 8008160:	b29a      	uxth	r2, r3
 8008162:	68fb      	ldr	r3, [r7, #12]
 8008164:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8008166:	e044      	b.n	80081f2 <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8008168:	68fb      	ldr	r3, [r7, #12]
 800816a:	681b      	ldr	r3, [r3, #0]
 800816c:	689b      	ldr	r3, [r3, #8]
 800816e:	f003 0302 	and.w	r3, r3, #2
 8008172:	2b02      	cmp	r3, #2
 8008174:	d12b      	bne.n	80081ce <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 8008176:	68fb      	ldr	r3, [r7, #12]
 8008178:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800817a:	b29b      	uxth	r3, r3
 800817c:	2b01      	cmp	r3, #1
 800817e:	d912      	bls.n	80081a6 <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008180:	68fb      	ldr	r3, [r7, #12]
 8008182:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008184:	881a      	ldrh	r2, [r3, #0]
 8008186:	68fb      	ldr	r3, [r7, #12]
 8008188:	681b      	ldr	r3, [r3, #0]
 800818a:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800818c:	68fb      	ldr	r3, [r7, #12]
 800818e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008190:	1c9a      	adds	r2, r3, #2
 8008192:	68fb      	ldr	r3, [r7, #12]
 8008194:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8008196:	68fb      	ldr	r3, [r7, #12]
 8008198:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800819a:	b29b      	uxth	r3, r3
 800819c:	3b02      	subs	r3, #2
 800819e:	b29a      	uxth	r2, r3
 80081a0:	68fb      	ldr	r3, [r7, #12]
 80081a2:	87da      	strh	r2, [r3, #62]	; 0x3e
 80081a4:	e025      	b.n	80081f2 <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80081a6:	68fb      	ldr	r3, [r7, #12]
 80081a8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80081aa:	68fb      	ldr	r3, [r7, #12]
 80081ac:	681b      	ldr	r3, [r3, #0]
 80081ae:	330c      	adds	r3, #12
 80081b0:	7812      	ldrb	r2, [r2, #0]
 80081b2:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80081b4:	68fb      	ldr	r3, [r7, #12]
 80081b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80081b8:	1c5a      	adds	r2, r3, #1
 80081ba:	68fb      	ldr	r3, [r7, #12]
 80081bc:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 80081be:	68fb      	ldr	r3, [r7, #12]
 80081c0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80081c2:	b29b      	uxth	r3, r3
 80081c4:	3b01      	subs	r3, #1
 80081c6:	b29a      	uxth	r2, r3
 80081c8:	68fb      	ldr	r3, [r7, #12]
 80081ca:	87da      	strh	r2, [r3, #62]	; 0x3e
 80081cc:	e011      	b.n	80081f2 <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80081ce:	f7fb fbf1 	bl	80039b4 <HAL_GetTick>
 80081d2:	4602      	mov	r2, r0
 80081d4:	69bb      	ldr	r3, [r7, #24]
 80081d6:	1ad3      	subs	r3, r2, r3
 80081d8:	683a      	ldr	r2, [r7, #0]
 80081da:	429a      	cmp	r2, r3
 80081dc:	d803      	bhi.n	80081e6 <HAL_SPI_Transmit+0x268>
 80081de:	683b      	ldr	r3, [r7, #0]
 80081e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80081e4:	d102      	bne.n	80081ec <HAL_SPI_Transmit+0x26e>
 80081e6:	683b      	ldr	r3, [r7, #0]
 80081e8:	2b00      	cmp	r3, #0
 80081ea:	d102      	bne.n	80081f2 <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 80081ec:	2303      	movs	r3, #3
 80081ee:	77fb      	strb	r3, [r7, #31]
          goto error;
 80081f0:	e026      	b.n	8008240 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 80081f2:	68fb      	ldr	r3, [r7, #12]
 80081f4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80081f6:	b29b      	uxth	r3, r3
 80081f8:	2b00      	cmp	r3, #0
 80081fa:	d1b5      	bne.n	8008168 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80081fc:	69ba      	ldr	r2, [r7, #24]
 80081fe:	6839      	ldr	r1, [r7, #0]
 8008200:	68f8      	ldr	r0, [r7, #12]
 8008202:	f000 fce3 	bl	8008bcc <SPI_EndRxTxTransaction>
 8008206:	4603      	mov	r3, r0
 8008208:	2b00      	cmp	r3, #0
 800820a:	d002      	beq.n	8008212 <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800820c:	68fb      	ldr	r3, [r7, #12]
 800820e:	2220      	movs	r2, #32
 8008210:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8008212:	68fb      	ldr	r3, [r7, #12]
 8008214:	689b      	ldr	r3, [r3, #8]
 8008216:	2b00      	cmp	r3, #0
 8008218:	d10a      	bne.n	8008230 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800821a:	2300      	movs	r3, #0
 800821c:	613b      	str	r3, [r7, #16]
 800821e:	68fb      	ldr	r3, [r7, #12]
 8008220:	681b      	ldr	r3, [r3, #0]
 8008222:	68db      	ldr	r3, [r3, #12]
 8008224:	613b      	str	r3, [r7, #16]
 8008226:	68fb      	ldr	r3, [r7, #12]
 8008228:	681b      	ldr	r3, [r3, #0]
 800822a:	689b      	ldr	r3, [r3, #8]
 800822c:	613b      	str	r3, [r7, #16]
 800822e:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008230:	68fb      	ldr	r3, [r7, #12]
 8008232:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008234:	2b00      	cmp	r3, #0
 8008236:	d002      	beq.n	800823e <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 8008238:	2301      	movs	r3, #1
 800823a:	77fb      	strb	r3, [r7, #31]
 800823c:	e000      	b.n	8008240 <HAL_SPI_Transmit+0x2c2>
  }

error:
 800823e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8008240:	68fb      	ldr	r3, [r7, #12]
 8008242:	2201      	movs	r2, #1
 8008244:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8008248:	68fb      	ldr	r3, [r7, #12]
 800824a:	2200      	movs	r2, #0
 800824c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8008250:	7ffb      	ldrb	r3, [r7, #31]
}
 8008252:	4618      	mov	r0, r3
 8008254:	3720      	adds	r7, #32
 8008256:	46bd      	mov	sp, r7
 8008258:	bd80      	pop	{r7, pc}

0800825a <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800825a:	b580      	push	{r7, lr}
 800825c:	b088      	sub	sp, #32
 800825e:	af02      	add	r7, sp, #8
 8008260:	60f8      	str	r0, [r7, #12]
 8008262:	60b9      	str	r1, [r7, #8]
 8008264:	603b      	str	r3, [r7, #0]
 8008266:	4613      	mov	r3, r2
 8008268:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800826a:	2300      	movs	r3, #0
 800826c:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800826e:	68fb      	ldr	r3, [r7, #12]
 8008270:	685b      	ldr	r3, [r3, #4]
 8008272:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008276:	d112      	bne.n	800829e <HAL_SPI_Receive+0x44>
 8008278:	68fb      	ldr	r3, [r7, #12]
 800827a:	689b      	ldr	r3, [r3, #8]
 800827c:	2b00      	cmp	r3, #0
 800827e:	d10e      	bne.n	800829e <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8008280:	68fb      	ldr	r3, [r7, #12]
 8008282:	2204      	movs	r2, #4
 8008284:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8008288:	88fa      	ldrh	r2, [r7, #6]
 800828a:	683b      	ldr	r3, [r7, #0]
 800828c:	9300      	str	r3, [sp, #0]
 800828e:	4613      	mov	r3, r2
 8008290:	68ba      	ldr	r2, [r7, #8]
 8008292:	68b9      	ldr	r1, [r7, #8]
 8008294:	68f8      	ldr	r0, [r7, #12]
 8008296:	f000 f910 	bl	80084ba <HAL_SPI_TransmitReceive>
 800829a:	4603      	mov	r3, r0
 800829c:	e109      	b.n	80084b2 <HAL_SPI_Receive+0x258>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800829e:	68fb      	ldr	r3, [r7, #12]
 80082a0:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80082a4:	2b01      	cmp	r3, #1
 80082a6:	d101      	bne.n	80082ac <HAL_SPI_Receive+0x52>
 80082a8:	2302      	movs	r3, #2
 80082aa:	e102      	b.n	80084b2 <HAL_SPI_Receive+0x258>
 80082ac:	68fb      	ldr	r3, [r7, #12]
 80082ae:	2201      	movs	r2, #1
 80082b0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80082b4:	f7fb fb7e 	bl	80039b4 <HAL_GetTick>
 80082b8:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 80082ba:	68fb      	ldr	r3, [r7, #12]
 80082bc:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80082c0:	b2db      	uxtb	r3, r3
 80082c2:	2b01      	cmp	r3, #1
 80082c4:	d002      	beq.n	80082cc <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 80082c6:	2302      	movs	r3, #2
 80082c8:	75fb      	strb	r3, [r7, #23]
    goto error;
 80082ca:	e0e9      	b.n	80084a0 <HAL_SPI_Receive+0x246>
  }

  if ((pData == NULL) || (Size == 0U))
 80082cc:	68bb      	ldr	r3, [r7, #8]
 80082ce:	2b00      	cmp	r3, #0
 80082d0:	d002      	beq.n	80082d8 <HAL_SPI_Receive+0x7e>
 80082d2:	88fb      	ldrh	r3, [r7, #6]
 80082d4:	2b00      	cmp	r3, #0
 80082d6:	d102      	bne.n	80082de <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 80082d8:	2301      	movs	r3, #1
 80082da:	75fb      	strb	r3, [r7, #23]
    goto error;
 80082dc:	e0e0      	b.n	80084a0 <HAL_SPI_Receive+0x246>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80082de:	68fb      	ldr	r3, [r7, #12]
 80082e0:	2204      	movs	r2, #4
 80082e2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80082e6:	68fb      	ldr	r3, [r7, #12]
 80082e8:	2200      	movs	r2, #0
 80082ea:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80082ec:	68fb      	ldr	r3, [r7, #12]
 80082ee:	68ba      	ldr	r2, [r7, #8]
 80082f0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 80082f2:	68fb      	ldr	r3, [r7, #12]
 80082f4:	88fa      	ldrh	r2, [r7, #6]
 80082f6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 80082fa:	68fb      	ldr	r3, [r7, #12]
 80082fc:	88fa      	ldrh	r2, [r7, #6]
 80082fe:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8008302:	68fb      	ldr	r3, [r7, #12]
 8008304:	2200      	movs	r2, #0
 8008306:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8008308:	68fb      	ldr	r3, [r7, #12]
 800830a:	2200      	movs	r2, #0
 800830c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 800830e:	68fb      	ldr	r3, [r7, #12]
 8008310:	2200      	movs	r2, #0
 8008312:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8008314:	68fb      	ldr	r3, [r7, #12]
 8008316:	2200      	movs	r2, #0
 8008318:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800831a:	68fb      	ldr	r3, [r7, #12]
 800831c:	2200      	movs	r2, #0
 800831e:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008320:	68fb      	ldr	r3, [r7, #12]
 8008322:	68db      	ldr	r3, [r3, #12]
 8008324:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8008328:	d908      	bls.n	800833c <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800832a:	68fb      	ldr	r3, [r7, #12]
 800832c:	681b      	ldr	r3, [r3, #0]
 800832e:	685a      	ldr	r2, [r3, #4]
 8008330:	68fb      	ldr	r3, [r7, #12]
 8008332:	681b      	ldr	r3, [r3, #0]
 8008334:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8008338:	605a      	str	r2, [r3, #4]
 800833a:	e007      	b.n	800834c <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800833c:	68fb      	ldr	r3, [r7, #12]
 800833e:	681b      	ldr	r3, [r3, #0]
 8008340:	685a      	ldr	r2, [r3, #4]
 8008342:	68fb      	ldr	r3, [r7, #12]
 8008344:	681b      	ldr	r3, [r3, #0]
 8008346:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800834a:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800834c:	68fb      	ldr	r3, [r7, #12]
 800834e:	689b      	ldr	r3, [r3, #8]
 8008350:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008354:	d10f      	bne.n	8008376 <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8008356:	68fb      	ldr	r3, [r7, #12]
 8008358:	681b      	ldr	r3, [r3, #0]
 800835a:	681a      	ldr	r2, [r3, #0]
 800835c:	68fb      	ldr	r3, [r7, #12]
 800835e:	681b      	ldr	r3, [r3, #0]
 8008360:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008364:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8008366:	68fb      	ldr	r3, [r7, #12]
 8008368:	681b      	ldr	r3, [r3, #0]
 800836a:	681a      	ldr	r2, [r3, #0]
 800836c:	68fb      	ldr	r3, [r7, #12]
 800836e:	681b      	ldr	r3, [r3, #0]
 8008370:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8008374:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008376:	68fb      	ldr	r3, [r7, #12]
 8008378:	681b      	ldr	r3, [r3, #0]
 800837a:	681b      	ldr	r3, [r3, #0]
 800837c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008380:	2b40      	cmp	r3, #64	; 0x40
 8008382:	d007      	beq.n	8008394 <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008384:	68fb      	ldr	r3, [r7, #12]
 8008386:	681b      	ldr	r3, [r3, #0]
 8008388:	681a      	ldr	r2, [r3, #0]
 800838a:	68fb      	ldr	r3, [r7, #12]
 800838c:	681b      	ldr	r3, [r3, #0]
 800838e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008392:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8008394:	68fb      	ldr	r3, [r7, #12]
 8008396:	68db      	ldr	r3, [r3, #12]
 8008398:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800839c:	d867      	bhi.n	800846e <HAL_SPI_Receive+0x214>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800839e:	e030      	b.n	8008402 <HAL_SPI_Receive+0x1a8>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80083a0:	68fb      	ldr	r3, [r7, #12]
 80083a2:	681b      	ldr	r3, [r3, #0]
 80083a4:	689b      	ldr	r3, [r3, #8]
 80083a6:	f003 0301 	and.w	r3, r3, #1
 80083aa:	2b01      	cmp	r3, #1
 80083ac:	d117      	bne.n	80083de <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80083ae:	68fb      	ldr	r3, [r7, #12]
 80083b0:	681b      	ldr	r3, [r3, #0]
 80083b2:	f103 020c 	add.w	r2, r3, #12
 80083b6:	68fb      	ldr	r3, [r7, #12]
 80083b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80083ba:	7812      	ldrb	r2, [r2, #0]
 80083bc:	b2d2      	uxtb	r2, r2
 80083be:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80083c0:	68fb      	ldr	r3, [r7, #12]
 80083c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80083c4:	1c5a      	adds	r2, r3, #1
 80083c6:	68fb      	ldr	r3, [r7, #12]
 80083c8:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80083ca:	68fb      	ldr	r3, [r7, #12]
 80083cc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80083d0:	b29b      	uxth	r3, r3
 80083d2:	3b01      	subs	r3, #1
 80083d4:	b29a      	uxth	r2, r3
 80083d6:	68fb      	ldr	r3, [r7, #12]
 80083d8:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 80083dc:	e011      	b.n	8008402 <HAL_SPI_Receive+0x1a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80083de:	f7fb fae9 	bl	80039b4 <HAL_GetTick>
 80083e2:	4602      	mov	r2, r0
 80083e4:	693b      	ldr	r3, [r7, #16]
 80083e6:	1ad3      	subs	r3, r2, r3
 80083e8:	683a      	ldr	r2, [r7, #0]
 80083ea:	429a      	cmp	r2, r3
 80083ec:	d803      	bhi.n	80083f6 <HAL_SPI_Receive+0x19c>
 80083ee:	683b      	ldr	r3, [r7, #0]
 80083f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80083f4:	d102      	bne.n	80083fc <HAL_SPI_Receive+0x1a2>
 80083f6:	683b      	ldr	r3, [r7, #0]
 80083f8:	2b00      	cmp	r3, #0
 80083fa:	d102      	bne.n	8008402 <HAL_SPI_Receive+0x1a8>
        {
          errorcode = HAL_TIMEOUT;
 80083fc:	2303      	movs	r3, #3
 80083fe:	75fb      	strb	r3, [r7, #23]
          goto error;
 8008400:	e04e      	b.n	80084a0 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 8008402:	68fb      	ldr	r3, [r7, #12]
 8008404:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008408:	b29b      	uxth	r3, r3
 800840a:	2b00      	cmp	r3, #0
 800840c:	d1c8      	bne.n	80083a0 <HAL_SPI_Receive+0x146>
 800840e:	e034      	b.n	800847a <HAL_SPI_Receive+0x220>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8008410:	68fb      	ldr	r3, [r7, #12]
 8008412:	681b      	ldr	r3, [r3, #0]
 8008414:	689b      	ldr	r3, [r3, #8]
 8008416:	f003 0301 	and.w	r3, r3, #1
 800841a:	2b01      	cmp	r3, #1
 800841c:	d115      	bne.n	800844a <HAL_SPI_Receive+0x1f0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800841e:	68fb      	ldr	r3, [r7, #12]
 8008420:	681b      	ldr	r3, [r3, #0]
 8008422:	68da      	ldr	r2, [r3, #12]
 8008424:	68fb      	ldr	r3, [r7, #12]
 8008426:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008428:	b292      	uxth	r2, r2
 800842a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800842c:	68fb      	ldr	r3, [r7, #12]
 800842e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008430:	1c9a      	adds	r2, r3, #2
 8008432:	68fb      	ldr	r3, [r7, #12]
 8008434:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8008436:	68fb      	ldr	r3, [r7, #12]
 8008438:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800843c:	b29b      	uxth	r3, r3
 800843e:	3b01      	subs	r3, #1
 8008440:	b29a      	uxth	r2, r3
 8008442:	68fb      	ldr	r3, [r7, #12]
 8008444:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8008448:	e011      	b.n	800846e <HAL_SPI_Receive+0x214>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800844a:	f7fb fab3 	bl	80039b4 <HAL_GetTick>
 800844e:	4602      	mov	r2, r0
 8008450:	693b      	ldr	r3, [r7, #16]
 8008452:	1ad3      	subs	r3, r2, r3
 8008454:	683a      	ldr	r2, [r7, #0]
 8008456:	429a      	cmp	r2, r3
 8008458:	d803      	bhi.n	8008462 <HAL_SPI_Receive+0x208>
 800845a:	683b      	ldr	r3, [r7, #0]
 800845c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008460:	d102      	bne.n	8008468 <HAL_SPI_Receive+0x20e>
 8008462:	683b      	ldr	r3, [r7, #0]
 8008464:	2b00      	cmp	r3, #0
 8008466:	d102      	bne.n	800846e <HAL_SPI_Receive+0x214>
        {
          errorcode = HAL_TIMEOUT;
 8008468:	2303      	movs	r3, #3
 800846a:	75fb      	strb	r3, [r7, #23]
          goto error;
 800846c:	e018      	b.n	80084a0 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 800846e:	68fb      	ldr	r3, [r7, #12]
 8008470:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008474:	b29b      	uxth	r3, r3
 8008476:	2b00      	cmp	r3, #0
 8008478:	d1ca      	bne.n	8008410 <HAL_SPI_Receive+0x1b6>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800847a:	693a      	ldr	r2, [r7, #16]
 800847c:	6839      	ldr	r1, [r7, #0]
 800847e:	68f8      	ldr	r0, [r7, #12]
 8008480:	f000 fb4c 	bl	8008b1c <SPI_EndRxTransaction>
 8008484:	4603      	mov	r3, r0
 8008486:	2b00      	cmp	r3, #0
 8008488:	d002      	beq.n	8008490 <HAL_SPI_Receive+0x236>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800848a:	68fb      	ldr	r3, [r7, #12]
 800848c:	2220      	movs	r2, #32
 800848e:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008490:	68fb      	ldr	r3, [r7, #12]
 8008492:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008494:	2b00      	cmp	r3, #0
 8008496:	d002      	beq.n	800849e <HAL_SPI_Receive+0x244>
  {
    errorcode = HAL_ERROR;
 8008498:	2301      	movs	r3, #1
 800849a:	75fb      	strb	r3, [r7, #23]
 800849c:	e000      	b.n	80084a0 <HAL_SPI_Receive+0x246>
  }

error :
 800849e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80084a0:	68fb      	ldr	r3, [r7, #12]
 80084a2:	2201      	movs	r2, #1
 80084a4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 80084a8:	68fb      	ldr	r3, [r7, #12]
 80084aa:	2200      	movs	r2, #0
 80084ac:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80084b0:	7dfb      	ldrb	r3, [r7, #23]
}
 80084b2:	4618      	mov	r0, r3
 80084b4:	3718      	adds	r7, #24
 80084b6:	46bd      	mov	sp, r7
 80084b8:	bd80      	pop	{r7, pc}

080084ba <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80084ba:	b580      	push	{r7, lr}
 80084bc:	b08a      	sub	sp, #40	; 0x28
 80084be:	af00      	add	r7, sp, #0
 80084c0:	60f8      	str	r0, [r7, #12]
 80084c2:	60b9      	str	r1, [r7, #8]
 80084c4:	607a      	str	r2, [r7, #4]
 80084c6:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80084c8:	2301      	movs	r3, #1
 80084ca:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80084cc:	2300      	movs	r3, #0
 80084ce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80084d2:	68fb      	ldr	r3, [r7, #12]
 80084d4:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80084d8:	2b01      	cmp	r3, #1
 80084da:	d101      	bne.n	80084e0 <HAL_SPI_TransmitReceive+0x26>
 80084dc:	2302      	movs	r3, #2
 80084de:	e1fb      	b.n	80088d8 <HAL_SPI_TransmitReceive+0x41e>
 80084e0:	68fb      	ldr	r3, [r7, #12]
 80084e2:	2201      	movs	r2, #1
 80084e4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80084e8:	f7fb fa64 	bl	80039b4 <HAL_GetTick>
 80084ec:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80084ee:	68fb      	ldr	r3, [r7, #12]
 80084f0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80084f4:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 80084f6:	68fb      	ldr	r3, [r7, #12]
 80084f8:	685b      	ldr	r3, [r3, #4]
 80084fa:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 80084fc:	887b      	ldrh	r3, [r7, #2]
 80084fe:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8008500:	887b      	ldrh	r3, [r7, #2]
 8008502:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8008504:	7efb      	ldrb	r3, [r7, #27]
 8008506:	2b01      	cmp	r3, #1
 8008508:	d00e      	beq.n	8008528 <HAL_SPI_TransmitReceive+0x6e>
 800850a:	697b      	ldr	r3, [r7, #20]
 800850c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008510:	d106      	bne.n	8008520 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8008512:	68fb      	ldr	r3, [r7, #12]
 8008514:	689b      	ldr	r3, [r3, #8]
 8008516:	2b00      	cmp	r3, #0
 8008518:	d102      	bne.n	8008520 <HAL_SPI_TransmitReceive+0x66>
 800851a:	7efb      	ldrb	r3, [r7, #27]
 800851c:	2b04      	cmp	r3, #4
 800851e:	d003      	beq.n	8008528 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8008520:	2302      	movs	r3, #2
 8008522:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8008526:	e1cd      	b.n	80088c4 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8008528:	68bb      	ldr	r3, [r7, #8]
 800852a:	2b00      	cmp	r3, #0
 800852c:	d005      	beq.n	800853a <HAL_SPI_TransmitReceive+0x80>
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	2b00      	cmp	r3, #0
 8008532:	d002      	beq.n	800853a <HAL_SPI_TransmitReceive+0x80>
 8008534:	887b      	ldrh	r3, [r7, #2]
 8008536:	2b00      	cmp	r3, #0
 8008538:	d103      	bne.n	8008542 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 800853a:	2301      	movs	r3, #1
 800853c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8008540:	e1c0      	b.n	80088c4 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8008542:	68fb      	ldr	r3, [r7, #12]
 8008544:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8008548:	b2db      	uxtb	r3, r3
 800854a:	2b04      	cmp	r3, #4
 800854c:	d003      	beq.n	8008556 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800854e:	68fb      	ldr	r3, [r7, #12]
 8008550:	2205      	movs	r2, #5
 8008552:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008556:	68fb      	ldr	r3, [r7, #12]
 8008558:	2200      	movs	r2, #0
 800855a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800855c:	68fb      	ldr	r3, [r7, #12]
 800855e:	687a      	ldr	r2, [r7, #4]
 8008560:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8008562:	68fb      	ldr	r3, [r7, #12]
 8008564:	887a      	ldrh	r2, [r7, #2]
 8008566:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 800856a:	68fb      	ldr	r3, [r7, #12]
 800856c:	887a      	ldrh	r2, [r7, #2]
 800856e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8008572:	68fb      	ldr	r3, [r7, #12]
 8008574:	68ba      	ldr	r2, [r7, #8]
 8008576:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8008578:	68fb      	ldr	r3, [r7, #12]
 800857a:	887a      	ldrh	r2, [r7, #2]
 800857c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 800857e:	68fb      	ldr	r3, [r7, #12]
 8008580:	887a      	ldrh	r2, [r7, #2]
 8008582:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8008584:	68fb      	ldr	r3, [r7, #12]
 8008586:	2200      	movs	r2, #0
 8008588:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800858a:	68fb      	ldr	r3, [r7, #12]
 800858c:	2200      	movs	r2, #0
 800858e:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8008590:	68fb      	ldr	r3, [r7, #12]
 8008592:	68db      	ldr	r3, [r3, #12]
 8008594:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8008598:	d802      	bhi.n	80085a0 <HAL_SPI_TransmitReceive+0xe6>
 800859a:	8a3b      	ldrh	r3, [r7, #16]
 800859c:	2b01      	cmp	r3, #1
 800859e:	d908      	bls.n	80085b2 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80085a0:	68fb      	ldr	r3, [r7, #12]
 80085a2:	681b      	ldr	r3, [r3, #0]
 80085a4:	685a      	ldr	r2, [r3, #4]
 80085a6:	68fb      	ldr	r3, [r7, #12]
 80085a8:	681b      	ldr	r3, [r3, #0]
 80085aa:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80085ae:	605a      	str	r2, [r3, #4]
 80085b0:	e007      	b.n	80085c2 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80085b2:	68fb      	ldr	r3, [r7, #12]
 80085b4:	681b      	ldr	r3, [r3, #0]
 80085b6:	685a      	ldr	r2, [r3, #4]
 80085b8:	68fb      	ldr	r3, [r7, #12]
 80085ba:	681b      	ldr	r3, [r3, #0]
 80085bc:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80085c0:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80085c2:	68fb      	ldr	r3, [r7, #12]
 80085c4:	681b      	ldr	r3, [r3, #0]
 80085c6:	681b      	ldr	r3, [r3, #0]
 80085c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80085cc:	2b40      	cmp	r3, #64	; 0x40
 80085ce:	d007      	beq.n	80085e0 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80085d0:	68fb      	ldr	r3, [r7, #12]
 80085d2:	681b      	ldr	r3, [r3, #0]
 80085d4:	681a      	ldr	r2, [r3, #0]
 80085d6:	68fb      	ldr	r3, [r7, #12]
 80085d8:	681b      	ldr	r3, [r3, #0]
 80085da:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80085de:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80085e0:	68fb      	ldr	r3, [r7, #12]
 80085e2:	68db      	ldr	r3, [r3, #12]
 80085e4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80085e8:	d97c      	bls.n	80086e4 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80085ea:	68fb      	ldr	r3, [r7, #12]
 80085ec:	685b      	ldr	r3, [r3, #4]
 80085ee:	2b00      	cmp	r3, #0
 80085f0:	d002      	beq.n	80085f8 <HAL_SPI_TransmitReceive+0x13e>
 80085f2:	8a7b      	ldrh	r3, [r7, #18]
 80085f4:	2b01      	cmp	r3, #1
 80085f6:	d169      	bne.n	80086cc <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80085f8:	68fb      	ldr	r3, [r7, #12]
 80085fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80085fc:	881a      	ldrh	r2, [r3, #0]
 80085fe:	68fb      	ldr	r3, [r7, #12]
 8008600:	681b      	ldr	r3, [r3, #0]
 8008602:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8008604:	68fb      	ldr	r3, [r7, #12]
 8008606:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008608:	1c9a      	adds	r2, r3, #2
 800860a:	68fb      	ldr	r3, [r7, #12]
 800860c:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800860e:	68fb      	ldr	r3, [r7, #12]
 8008610:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008612:	b29b      	uxth	r3, r3
 8008614:	3b01      	subs	r3, #1
 8008616:	b29a      	uxth	r2, r3
 8008618:	68fb      	ldr	r3, [r7, #12]
 800861a:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800861c:	e056      	b.n	80086cc <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800861e:	68fb      	ldr	r3, [r7, #12]
 8008620:	681b      	ldr	r3, [r3, #0]
 8008622:	689b      	ldr	r3, [r3, #8]
 8008624:	f003 0302 	and.w	r3, r3, #2
 8008628:	2b02      	cmp	r3, #2
 800862a:	d11b      	bne.n	8008664 <HAL_SPI_TransmitReceive+0x1aa>
 800862c:	68fb      	ldr	r3, [r7, #12]
 800862e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008630:	b29b      	uxth	r3, r3
 8008632:	2b00      	cmp	r3, #0
 8008634:	d016      	beq.n	8008664 <HAL_SPI_TransmitReceive+0x1aa>
 8008636:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008638:	2b01      	cmp	r3, #1
 800863a:	d113      	bne.n	8008664 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800863c:	68fb      	ldr	r3, [r7, #12]
 800863e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008640:	881a      	ldrh	r2, [r3, #0]
 8008642:	68fb      	ldr	r3, [r7, #12]
 8008644:	681b      	ldr	r3, [r3, #0]
 8008646:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8008648:	68fb      	ldr	r3, [r7, #12]
 800864a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800864c:	1c9a      	adds	r2, r3, #2
 800864e:	68fb      	ldr	r3, [r7, #12]
 8008650:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8008652:	68fb      	ldr	r3, [r7, #12]
 8008654:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008656:	b29b      	uxth	r3, r3
 8008658:	3b01      	subs	r3, #1
 800865a:	b29a      	uxth	r2, r3
 800865c:	68fb      	ldr	r3, [r7, #12]
 800865e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8008660:	2300      	movs	r3, #0
 8008662:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8008664:	68fb      	ldr	r3, [r7, #12]
 8008666:	681b      	ldr	r3, [r3, #0]
 8008668:	689b      	ldr	r3, [r3, #8]
 800866a:	f003 0301 	and.w	r3, r3, #1
 800866e:	2b01      	cmp	r3, #1
 8008670:	d11c      	bne.n	80086ac <HAL_SPI_TransmitReceive+0x1f2>
 8008672:	68fb      	ldr	r3, [r7, #12]
 8008674:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008678:	b29b      	uxth	r3, r3
 800867a:	2b00      	cmp	r3, #0
 800867c:	d016      	beq.n	80086ac <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800867e:	68fb      	ldr	r3, [r7, #12]
 8008680:	681b      	ldr	r3, [r3, #0]
 8008682:	68da      	ldr	r2, [r3, #12]
 8008684:	68fb      	ldr	r3, [r7, #12]
 8008686:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008688:	b292      	uxth	r2, r2
 800868a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800868c:	68fb      	ldr	r3, [r7, #12]
 800868e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008690:	1c9a      	adds	r2, r3, #2
 8008692:	68fb      	ldr	r3, [r7, #12]
 8008694:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8008696:	68fb      	ldr	r3, [r7, #12]
 8008698:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800869c:	b29b      	uxth	r3, r3
 800869e:	3b01      	subs	r3, #1
 80086a0:	b29a      	uxth	r2, r3
 80086a2:	68fb      	ldr	r3, [r7, #12]
 80086a4:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80086a8:	2301      	movs	r3, #1
 80086aa:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80086ac:	f7fb f982 	bl	80039b4 <HAL_GetTick>
 80086b0:	4602      	mov	r2, r0
 80086b2:	69fb      	ldr	r3, [r7, #28]
 80086b4:	1ad3      	subs	r3, r2, r3
 80086b6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80086b8:	429a      	cmp	r2, r3
 80086ba:	d807      	bhi.n	80086cc <HAL_SPI_TransmitReceive+0x212>
 80086bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80086c2:	d003      	beq.n	80086cc <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 80086c4:	2303      	movs	r3, #3
 80086c6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 80086ca:	e0fb      	b.n	80088c4 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80086cc:	68fb      	ldr	r3, [r7, #12]
 80086ce:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80086d0:	b29b      	uxth	r3, r3
 80086d2:	2b00      	cmp	r3, #0
 80086d4:	d1a3      	bne.n	800861e <HAL_SPI_TransmitReceive+0x164>
 80086d6:	68fb      	ldr	r3, [r7, #12]
 80086d8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80086dc:	b29b      	uxth	r3, r3
 80086de:	2b00      	cmp	r3, #0
 80086e0:	d19d      	bne.n	800861e <HAL_SPI_TransmitReceive+0x164>
 80086e2:	e0df      	b.n	80088a4 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80086e4:	68fb      	ldr	r3, [r7, #12]
 80086e6:	685b      	ldr	r3, [r3, #4]
 80086e8:	2b00      	cmp	r3, #0
 80086ea:	d003      	beq.n	80086f4 <HAL_SPI_TransmitReceive+0x23a>
 80086ec:	8a7b      	ldrh	r3, [r7, #18]
 80086ee:	2b01      	cmp	r3, #1
 80086f0:	f040 80cb 	bne.w	800888a <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 80086f4:	68fb      	ldr	r3, [r7, #12]
 80086f6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80086f8:	b29b      	uxth	r3, r3
 80086fa:	2b01      	cmp	r3, #1
 80086fc:	d912      	bls.n	8008724 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80086fe:	68fb      	ldr	r3, [r7, #12]
 8008700:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008702:	881a      	ldrh	r2, [r3, #0]
 8008704:	68fb      	ldr	r3, [r7, #12]
 8008706:	681b      	ldr	r3, [r3, #0]
 8008708:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800870a:	68fb      	ldr	r3, [r7, #12]
 800870c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800870e:	1c9a      	adds	r2, r3, #2
 8008710:	68fb      	ldr	r3, [r7, #12]
 8008712:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8008714:	68fb      	ldr	r3, [r7, #12]
 8008716:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008718:	b29b      	uxth	r3, r3
 800871a:	3b02      	subs	r3, #2
 800871c:	b29a      	uxth	r2, r3
 800871e:	68fb      	ldr	r3, [r7, #12]
 8008720:	87da      	strh	r2, [r3, #62]	; 0x3e
 8008722:	e0b2      	b.n	800888a <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8008724:	68fb      	ldr	r3, [r7, #12]
 8008726:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008728:	68fb      	ldr	r3, [r7, #12]
 800872a:	681b      	ldr	r3, [r3, #0]
 800872c:	330c      	adds	r3, #12
 800872e:	7812      	ldrb	r2, [r2, #0]
 8008730:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8008732:	68fb      	ldr	r3, [r7, #12]
 8008734:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008736:	1c5a      	adds	r2, r3, #1
 8008738:	68fb      	ldr	r3, [r7, #12]
 800873a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800873c:	68fb      	ldr	r3, [r7, #12]
 800873e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008740:	b29b      	uxth	r3, r3
 8008742:	3b01      	subs	r3, #1
 8008744:	b29a      	uxth	r2, r3
 8008746:	68fb      	ldr	r3, [r7, #12]
 8008748:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800874a:	e09e      	b.n	800888a <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800874c:	68fb      	ldr	r3, [r7, #12]
 800874e:	681b      	ldr	r3, [r3, #0]
 8008750:	689b      	ldr	r3, [r3, #8]
 8008752:	f003 0302 	and.w	r3, r3, #2
 8008756:	2b02      	cmp	r3, #2
 8008758:	d134      	bne.n	80087c4 <HAL_SPI_TransmitReceive+0x30a>
 800875a:	68fb      	ldr	r3, [r7, #12]
 800875c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800875e:	b29b      	uxth	r3, r3
 8008760:	2b00      	cmp	r3, #0
 8008762:	d02f      	beq.n	80087c4 <HAL_SPI_TransmitReceive+0x30a>
 8008764:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008766:	2b01      	cmp	r3, #1
 8008768:	d12c      	bne.n	80087c4 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 800876a:	68fb      	ldr	r3, [r7, #12]
 800876c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800876e:	b29b      	uxth	r3, r3
 8008770:	2b01      	cmp	r3, #1
 8008772:	d912      	bls.n	800879a <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008774:	68fb      	ldr	r3, [r7, #12]
 8008776:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008778:	881a      	ldrh	r2, [r3, #0]
 800877a:	68fb      	ldr	r3, [r7, #12]
 800877c:	681b      	ldr	r3, [r3, #0]
 800877e:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8008780:	68fb      	ldr	r3, [r7, #12]
 8008782:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008784:	1c9a      	adds	r2, r3, #2
 8008786:	68fb      	ldr	r3, [r7, #12]
 8008788:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800878a:	68fb      	ldr	r3, [r7, #12]
 800878c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800878e:	b29b      	uxth	r3, r3
 8008790:	3b02      	subs	r3, #2
 8008792:	b29a      	uxth	r2, r3
 8008794:	68fb      	ldr	r3, [r7, #12]
 8008796:	87da      	strh	r2, [r3, #62]	; 0x3e
 8008798:	e012      	b.n	80087c0 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800879a:	68fb      	ldr	r3, [r7, #12]
 800879c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800879e:	68fb      	ldr	r3, [r7, #12]
 80087a0:	681b      	ldr	r3, [r3, #0]
 80087a2:	330c      	adds	r3, #12
 80087a4:	7812      	ldrb	r2, [r2, #0]
 80087a6:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80087a8:	68fb      	ldr	r3, [r7, #12]
 80087aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80087ac:	1c5a      	adds	r2, r3, #1
 80087ae:	68fb      	ldr	r3, [r7, #12]
 80087b0:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 80087b2:	68fb      	ldr	r3, [r7, #12]
 80087b4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80087b6:	b29b      	uxth	r3, r3
 80087b8:	3b01      	subs	r3, #1
 80087ba:	b29a      	uxth	r2, r3
 80087bc:	68fb      	ldr	r3, [r7, #12]
 80087be:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80087c0:	2300      	movs	r3, #0
 80087c2:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80087c4:	68fb      	ldr	r3, [r7, #12]
 80087c6:	681b      	ldr	r3, [r3, #0]
 80087c8:	689b      	ldr	r3, [r3, #8]
 80087ca:	f003 0301 	and.w	r3, r3, #1
 80087ce:	2b01      	cmp	r3, #1
 80087d0:	d148      	bne.n	8008864 <HAL_SPI_TransmitReceive+0x3aa>
 80087d2:	68fb      	ldr	r3, [r7, #12]
 80087d4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80087d8:	b29b      	uxth	r3, r3
 80087da:	2b00      	cmp	r3, #0
 80087dc:	d042      	beq.n	8008864 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 80087de:	68fb      	ldr	r3, [r7, #12]
 80087e0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80087e4:	b29b      	uxth	r3, r3
 80087e6:	2b01      	cmp	r3, #1
 80087e8:	d923      	bls.n	8008832 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80087ea:	68fb      	ldr	r3, [r7, #12]
 80087ec:	681b      	ldr	r3, [r3, #0]
 80087ee:	68da      	ldr	r2, [r3, #12]
 80087f0:	68fb      	ldr	r3, [r7, #12]
 80087f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80087f4:	b292      	uxth	r2, r2
 80087f6:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80087f8:	68fb      	ldr	r3, [r7, #12]
 80087fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80087fc:	1c9a      	adds	r2, r3, #2
 80087fe:	68fb      	ldr	r3, [r7, #12]
 8008800:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8008802:	68fb      	ldr	r3, [r7, #12]
 8008804:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008808:	b29b      	uxth	r3, r3
 800880a:	3b02      	subs	r3, #2
 800880c:	b29a      	uxth	r2, r3
 800880e:	68fb      	ldr	r3, [r7, #12]
 8008810:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8008814:	68fb      	ldr	r3, [r7, #12]
 8008816:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800881a:	b29b      	uxth	r3, r3
 800881c:	2b01      	cmp	r3, #1
 800881e:	d81f      	bhi.n	8008860 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8008820:	68fb      	ldr	r3, [r7, #12]
 8008822:	681b      	ldr	r3, [r3, #0]
 8008824:	685a      	ldr	r2, [r3, #4]
 8008826:	68fb      	ldr	r3, [r7, #12]
 8008828:	681b      	ldr	r3, [r3, #0]
 800882a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800882e:	605a      	str	r2, [r3, #4]
 8008830:	e016      	b.n	8008860 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8008832:	68fb      	ldr	r3, [r7, #12]
 8008834:	681b      	ldr	r3, [r3, #0]
 8008836:	f103 020c 	add.w	r2, r3, #12
 800883a:	68fb      	ldr	r3, [r7, #12]
 800883c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800883e:	7812      	ldrb	r2, [r2, #0]
 8008840:	b2d2      	uxtb	r2, r2
 8008842:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8008844:	68fb      	ldr	r3, [r7, #12]
 8008846:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008848:	1c5a      	adds	r2, r3, #1
 800884a:	68fb      	ldr	r3, [r7, #12]
 800884c:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 800884e:	68fb      	ldr	r3, [r7, #12]
 8008850:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008854:	b29b      	uxth	r3, r3
 8008856:	3b01      	subs	r3, #1
 8008858:	b29a      	uxth	r2, r3
 800885a:	68fb      	ldr	r3, [r7, #12]
 800885c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8008860:	2301      	movs	r3, #1
 8008862:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8008864:	f7fb f8a6 	bl	80039b4 <HAL_GetTick>
 8008868:	4602      	mov	r2, r0
 800886a:	69fb      	ldr	r3, [r7, #28]
 800886c:	1ad3      	subs	r3, r2, r3
 800886e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008870:	429a      	cmp	r2, r3
 8008872:	d803      	bhi.n	800887c <HAL_SPI_TransmitReceive+0x3c2>
 8008874:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008876:	f1b3 3fff 	cmp.w	r3, #4294967295
 800887a:	d102      	bne.n	8008882 <HAL_SPI_TransmitReceive+0x3c8>
 800887c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800887e:	2b00      	cmp	r3, #0
 8008880:	d103      	bne.n	800888a <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 8008882:	2303      	movs	r3, #3
 8008884:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8008888:	e01c      	b.n	80088c4 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800888a:	68fb      	ldr	r3, [r7, #12]
 800888c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800888e:	b29b      	uxth	r3, r3
 8008890:	2b00      	cmp	r3, #0
 8008892:	f47f af5b 	bne.w	800874c <HAL_SPI_TransmitReceive+0x292>
 8008896:	68fb      	ldr	r3, [r7, #12]
 8008898:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800889c:	b29b      	uxth	r3, r3
 800889e:	2b00      	cmp	r3, #0
 80088a0:	f47f af54 	bne.w	800874c <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80088a4:	69fa      	ldr	r2, [r7, #28]
 80088a6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80088a8:	68f8      	ldr	r0, [r7, #12]
 80088aa:	f000 f98f 	bl	8008bcc <SPI_EndRxTxTransaction>
 80088ae:	4603      	mov	r3, r0
 80088b0:	2b00      	cmp	r3, #0
 80088b2:	d006      	beq.n	80088c2 <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 80088b4:	2301      	movs	r3, #1
 80088b6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80088ba:	68fb      	ldr	r3, [r7, #12]
 80088bc:	2220      	movs	r2, #32
 80088be:	661a      	str	r2, [r3, #96]	; 0x60
 80088c0:	e000      	b.n	80088c4 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 80088c2:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80088c4:	68fb      	ldr	r3, [r7, #12]
 80088c6:	2201      	movs	r2, #1
 80088c8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 80088cc:	68fb      	ldr	r3, [r7, #12]
 80088ce:	2200      	movs	r2, #0
 80088d0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80088d4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 80088d8:	4618      	mov	r0, r3
 80088da:	3728      	adds	r7, #40	; 0x28
 80088dc:	46bd      	mov	sp, r7
 80088de:	bd80      	pop	{r7, pc}

080088e0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80088e0:	b580      	push	{r7, lr}
 80088e2:	b088      	sub	sp, #32
 80088e4:	af00      	add	r7, sp, #0
 80088e6:	60f8      	str	r0, [r7, #12]
 80088e8:	60b9      	str	r1, [r7, #8]
 80088ea:	603b      	str	r3, [r7, #0]
 80088ec:	4613      	mov	r3, r2
 80088ee:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80088f0:	f7fb f860 	bl	80039b4 <HAL_GetTick>
 80088f4:	4602      	mov	r2, r0
 80088f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80088f8:	1a9b      	subs	r3, r3, r2
 80088fa:	683a      	ldr	r2, [r7, #0]
 80088fc:	4413      	add	r3, r2
 80088fe:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8008900:	f7fb f858 	bl	80039b4 <HAL_GetTick>
 8008904:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8008906:	4b39      	ldr	r3, [pc, #228]	; (80089ec <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8008908:	681b      	ldr	r3, [r3, #0]
 800890a:	015b      	lsls	r3, r3, #5
 800890c:	0d1b      	lsrs	r3, r3, #20
 800890e:	69fa      	ldr	r2, [r7, #28]
 8008910:	fb02 f303 	mul.w	r3, r2, r3
 8008914:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8008916:	e054      	b.n	80089c2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8008918:	683b      	ldr	r3, [r7, #0]
 800891a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800891e:	d050      	beq.n	80089c2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8008920:	f7fb f848 	bl	80039b4 <HAL_GetTick>
 8008924:	4602      	mov	r2, r0
 8008926:	69bb      	ldr	r3, [r7, #24]
 8008928:	1ad3      	subs	r3, r2, r3
 800892a:	69fa      	ldr	r2, [r7, #28]
 800892c:	429a      	cmp	r2, r3
 800892e:	d902      	bls.n	8008936 <SPI_WaitFlagStateUntilTimeout+0x56>
 8008930:	69fb      	ldr	r3, [r7, #28]
 8008932:	2b00      	cmp	r3, #0
 8008934:	d13d      	bne.n	80089b2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8008936:	68fb      	ldr	r3, [r7, #12]
 8008938:	681b      	ldr	r3, [r3, #0]
 800893a:	685a      	ldr	r2, [r3, #4]
 800893c:	68fb      	ldr	r3, [r7, #12]
 800893e:	681b      	ldr	r3, [r3, #0]
 8008940:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8008944:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008946:	68fb      	ldr	r3, [r7, #12]
 8008948:	685b      	ldr	r3, [r3, #4]
 800894a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800894e:	d111      	bne.n	8008974 <SPI_WaitFlagStateUntilTimeout+0x94>
 8008950:	68fb      	ldr	r3, [r7, #12]
 8008952:	689b      	ldr	r3, [r3, #8]
 8008954:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008958:	d004      	beq.n	8008964 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800895a:	68fb      	ldr	r3, [r7, #12]
 800895c:	689b      	ldr	r3, [r3, #8]
 800895e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008962:	d107      	bne.n	8008974 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8008964:	68fb      	ldr	r3, [r7, #12]
 8008966:	681b      	ldr	r3, [r3, #0]
 8008968:	681a      	ldr	r2, [r3, #0]
 800896a:	68fb      	ldr	r3, [r7, #12]
 800896c:	681b      	ldr	r3, [r3, #0]
 800896e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008972:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8008974:	68fb      	ldr	r3, [r7, #12]
 8008976:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008978:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800897c:	d10f      	bne.n	800899e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800897e:	68fb      	ldr	r3, [r7, #12]
 8008980:	681b      	ldr	r3, [r3, #0]
 8008982:	681a      	ldr	r2, [r3, #0]
 8008984:	68fb      	ldr	r3, [r7, #12]
 8008986:	681b      	ldr	r3, [r3, #0]
 8008988:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800898c:	601a      	str	r2, [r3, #0]
 800898e:	68fb      	ldr	r3, [r7, #12]
 8008990:	681b      	ldr	r3, [r3, #0]
 8008992:	681a      	ldr	r2, [r3, #0]
 8008994:	68fb      	ldr	r3, [r7, #12]
 8008996:	681b      	ldr	r3, [r3, #0]
 8008998:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800899c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800899e:	68fb      	ldr	r3, [r7, #12]
 80089a0:	2201      	movs	r2, #1
 80089a2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80089a6:	68fb      	ldr	r3, [r7, #12]
 80089a8:	2200      	movs	r2, #0
 80089aa:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80089ae:	2303      	movs	r3, #3
 80089b0:	e017      	b.n	80089e2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80089b2:	697b      	ldr	r3, [r7, #20]
 80089b4:	2b00      	cmp	r3, #0
 80089b6:	d101      	bne.n	80089bc <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80089b8:	2300      	movs	r3, #0
 80089ba:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80089bc:	697b      	ldr	r3, [r7, #20]
 80089be:	3b01      	subs	r3, #1
 80089c0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80089c2:	68fb      	ldr	r3, [r7, #12]
 80089c4:	681b      	ldr	r3, [r3, #0]
 80089c6:	689a      	ldr	r2, [r3, #8]
 80089c8:	68bb      	ldr	r3, [r7, #8]
 80089ca:	4013      	ands	r3, r2
 80089cc:	68ba      	ldr	r2, [r7, #8]
 80089ce:	429a      	cmp	r2, r3
 80089d0:	bf0c      	ite	eq
 80089d2:	2301      	moveq	r3, #1
 80089d4:	2300      	movne	r3, #0
 80089d6:	b2db      	uxtb	r3, r3
 80089d8:	461a      	mov	r2, r3
 80089da:	79fb      	ldrb	r3, [r7, #7]
 80089dc:	429a      	cmp	r2, r3
 80089de:	d19b      	bne.n	8008918 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80089e0:	2300      	movs	r3, #0
}
 80089e2:	4618      	mov	r0, r3
 80089e4:	3720      	adds	r7, #32
 80089e6:	46bd      	mov	sp, r7
 80089e8:	bd80      	pop	{r7, pc}
 80089ea:	bf00      	nop
 80089ec:	2000003c 	.word	0x2000003c

080089f0 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80089f0:	b580      	push	{r7, lr}
 80089f2:	b08a      	sub	sp, #40	; 0x28
 80089f4:	af00      	add	r7, sp, #0
 80089f6:	60f8      	str	r0, [r7, #12]
 80089f8:	60b9      	str	r1, [r7, #8]
 80089fa:	607a      	str	r2, [r7, #4]
 80089fc:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80089fe:	2300      	movs	r3, #0
 8008a00:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8008a02:	f7fa ffd7 	bl	80039b4 <HAL_GetTick>
 8008a06:	4602      	mov	r2, r0
 8008a08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a0a:	1a9b      	subs	r3, r3, r2
 8008a0c:	683a      	ldr	r2, [r7, #0]
 8008a0e:	4413      	add	r3, r2
 8008a10:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8008a12:	f7fa ffcf 	bl	80039b4 <HAL_GetTick>
 8008a16:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8008a18:	68fb      	ldr	r3, [r7, #12]
 8008a1a:	681b      	ldr	r3, [r3, #0]
 8008a1c:	330c      	adds	r3, #12
 8008a1e:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8008a20:	4b3d      	ldr	r3, [pc, #244]	; (8008b18 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8008a22:	681a      	ldr	r2, [r3, #0]
 8008a24:	4613      	mov	r3, r2
 8008a26:	009b      	lsls	r3, r3, #2
 8008a28:	4413      	add	r3, r2
 8008a2a:	00da      	lsls	r2, r3, #3
 8008a2c:	1ad3      	subs	r3, r2, r3
 8008a2e:	0d1b      	lsrs	r3, r3, #20
 8008a30:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008a32:	fb02 f303 	mul.w	r3, r2, r3
 8008a36:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8008a38:	e060      	b.n	8008afc <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8008a3a:	68bb      	ldr	r3, [r7, #8]
 8008a3c:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8008a40:	d107      	bne.n	8008a52 <SPI_WaitFifoStateUntilTimeout+0x62>
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	2b00      	cmp	r3, #0
 8008a46:	d104      	bne.n	8008a52 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8008a48:	69fb      	ldr	r3, [r7, #28]
 8008a4a:	781b      	ldrb	r3, [r3, #0]
 8008a4c:	b2db      	uxtb	r3, r3
 8008a4e:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8008a50:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8008a52:	683b      	ldr	r3, [r7, #0]
 8008a54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008a58:	d050      	beq.n	8008afc <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8008a5a:	f7fa ffab 	bl	80039b4 <HAL_GetTick>
 8008a5e:	4602      	mov	r2, r0
 8008a60:	6a3b      	ldr	r3, [r7, #32]
 8008a62:	1ad3      	subs	r3, r2, r3
 8008a64:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008a66:	429a      	cmp	r2, r3
 8008a68:	d902      	bls.n	8008a70 <SPI_WaitFifoStateUntilTimeout+0x80>
 8008a6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a6c:	2b00      	cmp	r3, #0
 8008a6e:	d13d      	bne.n	8008aec <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8008a70:	68fb      	ldr	r3, [r7, #12]
 8008a72:	681b      	ldr	r3, [r3, #0]
 8008a74:	685a      	ldr	r2, [r3, #4]
 8008a76:	68fb      	ldr	r3, [r7, #12]
 8008a78:	681b      	ldr	r3, [r3, #0]
 8008a7a:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8008a7e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008a80:	68fb      	ldr	r3, [r7, #12]
 8008a82:	685b      	ldr	r3, [r3, #4]
 8008a84:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008a88:	d111      	bne.n	8008aae <SPI_WaitFifoStateUntilTimeout+0xbe>
 8008a8a:	68fb      	ldr	r3, [r7, #12]
 8008a8c:	689b      	ldr	r3, [r3, #8]
 8008a8e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008a92:	d004      	beq.n	8008a9e <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008a94:	68fb      	ldr	r3, [r7, #12]
 8008a96:	689b      	ldr	r3, [r3, #8]
 8008a98:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008a9c:	d107      	bne.n	8008aae <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8008a9e:	68fb      	ldr	r3, [r7, #12]
 8008aa0:	681b      	ldr	r3, [r3, #0]
 8008aa2:	681a      	ldr	r2, [r3, #0]
 8008aa4:	68fb      	ldr	r3, [r7, #12]
 8008aa6:	681b      	ldr	r3, [r3, #0]
 8008aa8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008aac:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8008aae:	68fb      	ldr	r3, [r7, #12]
 8008ab0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008ab2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008ab6:	d10f      	bne.n	8008ad8 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8008ab8:	68fb      	ldr	r3, [r7, #12]
 8008aba:	681b      	ldr	r3, [r3, #0]
 8008abc:	681a      	ldr	r2, [r3, #0]
 8008abe:	68fb      	ldr	r3, [r7, #12]
 8008ac0:	681b      	ldr	r3, [r3, #0]
 8008ac2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008ac6:	601a      	str	r2, [r3, #0]
 8008ac8:	68fb      	ldr	r3, [r7, #12]
 8008aca:	681b      	ldr	r3, [r3, #0]
 8008acc:	681a      	ldr	r2, [r3, #0]
 8008ace:	68fb      	ldr	r3, [r7, #12]
 8008ad0:	681b      	ldr	r3, [r3, #0]
 8008ad2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008ad6:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8008ad8:	68fb      	ldr	r3, [r7, #12]
 8008ada:	2201      	movs	r2, #1
 8008adc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8008ae0:	68fb      	ldr	r3, [r7, #12]
 8008ae2:	2200      	movs	r2, #0
 8008ae4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8008ae8:	2303      	movs	r3, #3
 8008aea:	e010      	b.n	8008b0e <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8008aec:	69bb      	ldr	r3, [r7, #24]
 8008aee:	2b00      	cmp	r3, #0
 8008af0:	d101      	bne.n	8008af6 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8008af2:	2300      	movs	r3, #0
 8008af4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8008af6:	69bb      	ldr	r3, [r7, #24]
 8008af8:	3b01      	subs	r3, #1
 8008afa:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8008afc:	68fb      	ldr	r3, [r7, #12]
 8008afe:	681b      	ldr	r3, [r3, #0]
 8008b00:	689a      	ldr	r2, [r3, #8]
 8008b02:	68bb      	ldr	r3, [r7, #8]
 8008b04:	4013      	ands	r3, r2
 8008b06:	687a      	ldr	r2, [r7, #4]
 8008b08:	429a      	cmp	r2, r3
 8008b0a:	d196      	bne.n	8008a3a <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8008b0c:	2300      	movs	r3, #0
}
 8008b0e:	4618      	mov	r0, r3
 8008b10:	3728      	adds	r7, #40	; 0x28
 8008b12:	46bd      	mov	sp, r7
 8008b14:	bd80      	pop	{r7, pc}
 8008b16:	bf00      	nop
 8008b18:	2000003c 	.word	0x2000003c

08008b1c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8008b1c:	b580      	push	{r7, lr}
 8008b1e:	b086      	sub	sp, #24
 8008b20:	af02      	add	r7, sp, #8
 8008b22:	60f8      	str	r0, [r7, #12]
 8008b24:	60b9      	str	r1, [r7, #8]
 8008b26:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008b28:	68fb      	ldr	r3, [r7, #12]
 8008b2a:	685b      	ldr	r3, [r3, #4]
 8008b2c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008b30:	d111      	bne.n	8008b56 <SPI_EndRxTransaction+0x3a>
 8008b32:	68fb      	ldr	r3, [r7, #12]
 8008b34:	689b      	ldr	r3, [r3, #8]
 8008b36:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008b3a:	d004      	beq.n	8008b46 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008b3c:	68fb      	ldr	r3, [r7, #12]
 8008b3e:	689b      	ldr	r3, [r3, #8]
 8008b40:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008b44:	d107      	bne.n	8008b56 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8008b46:	68fb      	ldr	r3, [r7, #12]
 8008b48:	681b      	ldr	r3, [r3, #0]
 8008b4a:	681a      	ldr	r2, [r3, #0]
 8008b4c:	68fb      	ldr	r3, [r7, #12]
 8008b4e:	681b      	ldr	r3, [r3, #0]
 8008b50:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008b54:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	9300      	str	r3, [sp, #0]
 8008b5a:	68bb      	ldr	r3, [r7, #8]
 8008b5c:	2200      	movs	r2, #0
 8008b5e:	2180      	movs	r1, #128	; 0x80
 8008b60:	68f8      	ldr	r0, [r7, #12]
 8008b62:	f7ff febd 	bl	80088e0 <SPI_WaitFlagStateUntilTimeout>
 8008b66:	4603      	mov	r3, r0
 8008b68:	2b00      	cmp	r3, #0
 8008b6a:	d007      	beq.n	8008b7c <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008b6c:	68fb      	ldr	r3, [r7, #12]
 8008b6e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008b70:	f043 0220 	orr.w	r2, r3, #32
 8008b74:	68fb      	ldr	r3, [r7, #12]
 8008b76:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8008b78:	2303      	movs	r3, #3
 8008b7a:	e023      	b.n	8008bc4 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008b7c:	68fb      	ldr	r3, [r7, #12]
 8008b7e:	685b      	ldr	r3, [r3, #4]
 8008b80:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008b84:	d11d      	bne.n	8008bc2 <SPI_EndRxTransaction+0xa6>
 8008b86:	68fb      	ldr	r3, [r7, #12]
 8008b88:	689b      	ldr	r3, [r3, #8]
 8008b8a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008b8e:	d004      	beq.n	8008b9a <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008b90:	68fb      	ldr	r3, [r7, #12]
 8008b92:	689b      	ldr	r3, [r3, #8]
 8008b94:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008b98:	d113      	bne.n	8008bc2 <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	9300      	str	r3, [sp, #0]
 8008b9e:	68bb      	ldr	r3, [r7, #8]
 8008ba0:	2200      	movs	r2, #0
 8008ba2:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8008ba6:	68f8      	ldr	r0, [r7, #12]
 8008ba8:	f7ff ff22 	bl	80089f0 <SPI_WaitFifoStateUntilTimeout>
 8008bac:	4603      	mov	r3, r0
 8008bae:	2b00      	cmp	r3, #0
 8008bb0:	d007      	beq.n	8008bc2 <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008bb2:	68fb      	ldr	r3, [r7, #12]
 8008bb4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008bb6:	f043 0220 	orr.w	r2, r3, #32
 8008bba:	68fb      	ldr	r3, [r7, #12]
 8008bbc:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8008bbe:	2303      	movs	r3, #3
 8008bc0:	e000      	b.n	8008bc4 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 8008bc2:	2300      	movs	r3, #0
}
 8008bc4:	4618      	mov	r0, r3
 8008bc6:	3710      	adds	r7, #16
 8008bc8:	46bd      	mov	sp, r7
 8008bca:	bd80      	pop	{r7, pc}

08008bcc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8008bcc:	b580      	push	{r7, lr}
 8008bce:	b086      	sub	sp, #24
 8008bd0:	af02      	add	r7, sp, #8
 8008bd2:	60f8      	str	r0, [r7, #12]
 8008bd4:	60b9      	str	r1, [r7, #8]
 8008bd6:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	9300      	str	r3, [sp, #0]
 8008bdc:	68bb      	ldr	r3, [r7, #8]
 8008bde:	2200      	movs	r2, #0
 8008be0:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8008be4:	68f8      	ldr	r0, [r7, #12]
 8008be6:	f7ff ff03 	bl	80089f0 <SPI_WaitFifoStateUntilTimeout>
 8008bea:	4603      	mov	r3, r0
 8008bec:	2b00      	cmp	r3, #0
 8008bee:	d007      	beq.n	8008c00 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008bf0:	68fb      	ldr	r3, [r7, #12]
 8008bf2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008bf4:	f043 0220 	orr.w	r2, r3, #32
 8008bf8:	68fb      	ldr	r3, [r7, #12]
 8008bfa:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8008bfc:	2303      	movs	r3, #3
 8008bfe:	e027      	b.n	8008c50 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	9300      	str	r3, [sp, #0]
 8008c04:	68bb      	ldr	r3, [r7, #8]
 8008c06:	2200      	movs	r2, #0
 8008c08:	2180      	movs	r1, #128	; 0x80
 8008c0a:	68f8      	ldr	r0, [r7, #12]
 8008c0c:	f7ff fe68 	bl	80088e0 <SPI_WaitFlagStateUntilTimeout>
 8008c10:	4603      	mov	r3, r0
 8008c12:	2b00      	cmp	r3, #0
 8008c14:	d007      	beq.n	8008c26 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008c16:	68fb      	ldr	r3, [r7, #12]
 8008c18:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008c1a:	f043 0220 	orr.w	r2, r3, #32
 8008c1e:	68fb      	ldr	r3, [r7, #12]
 8008c20:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8008c22:	2303      	movs	r3, #3
 8008c24:	e014      	b.n	8008c50 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	9300      	str	r3, [sp, #0]
 8008c2a:	68bb      	ldr	r3, [r7, #8]
 8008c2c:	2200      	movs	r2, #0
 8008c2e:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8008c32:	68f8      	ldr	r0, [r7, #12]
 8008c34:	f7ff fedc 	bl	80089f0 <SPI_WaitFifoStateUntilTimeout>
 8008c38:	4603      	mov	r3, r0
 8008c3a:	2b00      	cmp	r3, #0
 8008c3c:	d007      	beq.n	8008c4e <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008c3e:	68fb      	ldr	r3, [r7, #12]
 8008c40:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008c42:	f043 0220 	orr.w	r2, r3, #32
 8008c46:	68fb      	ldr	r3, [r7, #12]
 8008c48:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8008c4a:	2303      	movs	r3, #3
 8008c4c:	e000      	b.n	8008c50 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8008c4e:	2300      	movs	r3, #0
}
 8008c50:	4618      	mov	r0, r3
 8008c52:	3710      	adds	r7, #16
 8008c54:	46bd      	mov	sp, r7
 8008c56:	bd80      	pop	{r7, pc}

08008c58 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008c58:	b580      	push	{r7, lr}
 8008c5a:	b082      	sub	sp, #8
 8008c5c:	af00      	add	r7, sp, #0
 8008c5e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	2b00      	cmp	r3, #0
 8008c64:	d101      	bne.n	8008c6a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008c66:	2301      	movs	r3, #1
 8008c68:	e049      	b.n	8008cfe <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008c70:	b2db      	uxtb	r3, r3
 8008c72:	2b00      	cmp	r3, #0
 8008c74:	d106      	bne.n	8008c84 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	2200      	movs	r2, #0
 8008c7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008c7e:	6878      	ldr	r0, [r7, #4]
 8008c80:	f7fa f9fc 	bl	800307c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	2202      	movs	r2, #2
 8008c88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	681a      	ldr	r2, [r3, #0]
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	3304      	adds	r3, #4
 8008c94:	4619      	mov	r1, r3
 8008c96:	4610      	mov	r0, r2
 8008c98:	f000 fef6 	bl	8009a88 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	2201      	movs	r2, #1
 8008ca0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	2201      	movs	r2, #1
 8008ca8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	2201      	movs	r2, #1
 8008cb0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	2201      	movs	r2, #1
 8008cb8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	2201      	movs	r2, #1
 8008cc0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	2201      	movs	r2, #1
 8008cc8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	2201      	movs	r2, #1
 8008cd0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	2201      	movs	r2, #1
 8008cd8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	2201      	movs	r2, #1
 8008ce0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	2201      	movs	r2, #1
 8008ce8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	2201      	movs	r2, #1
 8008cf0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	2201      	movs	r2, #1
 8008cf8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008cfc:	2300      	movs	r3, #0
}
 8008cfe:	4618      	mov	r0, r3
 8008d00:	3708      	adds	r7, #8
 8008d02:	46bd      	mov	sp, r7
 8008d04:	bd80      	pop	{r7, pc}

08008d06 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8008d06:	b580      	push	{r7, lr}
 8008d08:	b082      	sub	sp, #8
 8008d0a:	af00      	add	r7, sp, #0
 8008d0c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	2b00      	cmp	r3, #0
 8008d12:	d101      	bne.n	8008d18 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8008d14:	2301      	movs	r3, #1
 8008d16:	e049      	b.n	8008dac <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008d1e:	b2db      	uxtb	r3, r3
 8008d20:	2b00      	cmp	r3, #0
 8008d22:	d106      	bne.n	8008d32 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	2200      	movs	r2, #0
 8008d28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8008d2c:	6878      	ldr	r0, [r7, #4]
 8008d2e:	f000 f841 	bl	8008db4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	2202      	movs	r2, #2
 8008d36:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	681a      	ldr	r2, [r3, #0]
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	3304      	adds	r3, #4
 8008d42:	4619      	mov	r1, r3
 8008d44:	4610      	mov	r0, r2
 8008d46:	f000 fe9f 	bl	8009a88 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	2201      	movs	r2, #1
 8008d4e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	2201      	movs	r2, #1
 8008d56:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	2201      	movs	r2, #1
 8008d5e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	2201      	movs	r2, #1
 8008d66:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	2201      	movs	r2, #1
 8008d6e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	2201      	movs	r2, #1
 8008d76:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	2201      	movs	r2, #1
 8008d7e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	2201      	movs	r2, #1
 8008d86:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	2201      	movs	r2, #1
 8008d8e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	2201      	movs	r2, #1
 8008d96:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	2201      	movs	r2, #1
 8008d9e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	2201      	movs	r2, #1
 8008da6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008daa:	2300      	movs	r3, #0
}
 8008dac:	4618      	mov	r0, r3
 8008dae:	3708      	adds	r7, #8
 8008db0:	46bd      	mov	sp, r7
 8008db2:	bd80      	pop	{r7, pc}

08008db4 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8008db4:	b480      	push	{r7}
 8008db6:	b083      	sub	sp, #12
 8008db8:	af00      	add	r7, sp, #0
 8008dba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8008dbc:	bf00      	nop
 8008dbe:	370c      	adds	r7, #12
 8008dc0:	46bd      	mov	sp, r7
 8008dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dc6:	4770      	bx	lr

08008dc8 <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008dc8:	b580      	push	{r7, lr}
 8008dca:	b084      	sub	sp, #16
 8008dcc:	af00      	add	r7, sp, #0
 8008dce:	6078      	str	r0, [r7, #4]
 8008dd0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008dd2:	2300      	movs	r3, #0
 8008dd4:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8008dd6:	683b      	ldr	r3, [r7, #0]
 8008dd8:	2b00      	cmp	r3, #0
 8008dda:	d109      	bne.n	8008df0 <HAL_TIM_PWM_Start_IT+0x28>
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008de2:	b2db      	uxtb	r3, r3
 8008de4:	2b01      	cmp	r3, #1
 8008de6:	bf14      	ite	ne
 8008de8:	2301      	movne	r3, #1
 8008dea:	2300      	moveq	r3, #0
 8008dec:	b2db      	uxtb	r3, r3
 8008dee:	e03c      	b.n	8008e6a <HAL_TIM_PWM_Start_IT+0xa2>
 8008df0:	683b      	ldr	r3, [r7, #0]
 8008df2:	2b04      	cmp	r3, #4
 8008df4:	d109      	bne.n	8008e0a <HAL_TIM_PWM_Start_IT+0x42>
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8008dfc:	b2db      	uxtb	r3, r3
 8008dfe:	2b01      	cmp	r3, #1
 8008e00:	bf14      	ite	ne
 8008e02:	2301      	movne	r3, #1
 8008e04:	2300      	moveq	r3, #0
 8008e06:	b2db      	uxtb	r3, r3
 8008e08:	e02f      	b.n	8008e6a <HAL_TIM_PWM_Start_IT+0xa2>
 8008e0a:	683b      	ldr	r3, [r7, #0]
 8008e0c:	2b08      	cmp	r3, #8
 8008e0e:	d109      	bne.n	8008e24 <HAL_TIM_PWM_Start_IT+0x5c>
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008e16:	b2db      	uxtb	r3, r3
 8008e18:	2b01      	cmp	r3, #1
 8008e1a:	bf14      	ite	ne
 8008e1c:	2301      	movne	r3, #1
 8008e1e:	2300      	moveq	r3, #0
 8008e20:	b2db      	uxtb	r3, r3
 8008e22:	e022      	b.n	8008e6a <HAL_TIM_PWM_Start_IT+0xa2>
 8008e24:	683b      	ldr	r3, [r7, #0]
 8008e26:	2b0c      	cmp	r3, #12
 8008e28:	d109      	bne.n	8008e3e <HAL_TIM_PWM_Start_IT+0x76>
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008e30:	b2db      	uxtb	r3, r3
 8008e32:	2b01      	cmp	r3, #1
 8008e34:	bf14      	ite	ne
 8008e36:	2301      	movne	r3, #1
 8008e38:	2300      	moveq	r3, #0
 8008e3a:	b2db      	uxtb	r3, r3
 8008e3c:	e015      	b.n	8008e6a <HAL_TIM_PWM_Start_IT+0xa2>
 8008e3e:	683b      	ldr	r3, [r7, #0]
 8008e40:	2b10      	cmp	r3, #16
 8008e42:	d109      	bne.n	8008e58 <HAL_TIM_PWM_Start_IT+0x90>
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8008e4a:	b2db      	uxtb	r3, r3
 8008e4c:	2b01      	cmp	r3, #1
 8008e4e:	bf14      	ite	ne
 8008e50:	2301      	movne	r3, #1
 8008e52:	2300      	moveq	r3, #0
 8008e54:	b2db      	uxtb	r3, r3
 8008e56:	e008      	b.n	8008e6a <HAL_TIM_PWM_Start_IT+0xa2>
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8008e5e:	b2db      	uxtb	r3, r3
 8008e60:	2b01      	cmp	r3, #1
 8008e62:	bf14      	ite	ne
 8008e64:	2301      	movne	r3, #1
 8008e66:	2300      	moveq	r3, #0
 8008e68:	b2db      	uxtb	r3, r3
 8008e6a:	2b00      	cmp	r3, #0
 8008e6c:	d001      	beq.n	8008e72 <HAL_TIM_PWM_Start_IT+0xaa>
  {
    return HAL_ERROR;
 8008e6e:	2301      	movs	r3, #1
 8008e70:	e0e2      	b.n	8009038 <HAL_TIM_PWM_Start_IT+0x270>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8008e72:	683b      	ldr	r3, [r7, #0]
 8008e74:	2b00      	cmp	r3, #0
 8008e76:	d104      	bne.n	8008e82 <HAL_TIM_PWM_Start_IT+0xba>
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	2202      	movs	r2, #2
 8008e7c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008e80:	e023      	b.n	8008eca <HAL_TIM_PWM_Start_IT+0x102>
 8008e82:	683b      	ldr	r3, [r7, #0]
 8008e84:	2b04      	cmp	r3, #4
 8008e86:	d104      	bne.n	8008e92 <HAL_TIM_PWM_Start_IT+0xca>
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	2202      	movs	r2, #2
 8008e8c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008e90:	e01b      	b.n	8008eca <HAL_TIM_PWM_Start_IT+0x102>
 8008e92:	683b      	ldr	r3, [r7, #0]
 8008e94:	2b08      	cmp	r3, #8
 8008e96:	d104      	bne.n	8008ea2 <HAL_TIM_PWM_Start_IT+0xda>
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	2202      	movs	r2, #2
 8008e9c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008ea0:	e013      	b.n	8008eca <HAL_TIM_PWM_Start_IT+0x102>
 8008ea2:	683b      	ldr	r3, [r7, #0]
 8008ea4:	2b0c      	cmp	r3, #12
 8008ea6:	d104      	bne.n	8008eb2 <HAL_TIM_PWM_Start_IT+0xea>
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	2202      	movs	r2, #2
 8008eac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008eb0:	e00b      	b.n	8008eca <HAL_TIM_PWM_Start_IT+0x102>
 8008eb2:	683b      	ldr	r3, [r7, #0]
 8008eb4:	2b10      	cmp	r3, #16
 8008eb6:	d104      	bne.n	8008ec2 <HAL_TIM_PWM_Start_IT+0xfa>
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	2202      	movs	r2, #2
 8008ebc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008ec0:	e003      	b.n	8008eca <HAL_TIM_PWM_Start_IT+0x102>
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	2202      	movs	r2, #2
 8008ec6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  switch (Channel)
 8008eca:	683b      	ldr	r3, [r7, #0]
 8008ecc:	2b0c      	cmp	r3, #12
 8008ece:	d841      	bhi.n	8008f54 <HAL_TIM_PWM_Start_IT+0x18c>
 8008ed0:	a201      	add	r2, pc, #4	; (adr r2, 8008ed8 <HAL_TIM_PWM_Start_IT+0x110>)
 8008ed2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ed6:	bf00      	nop
 8008ed8:	08008f0d 	.word	0x08008f0d
 8008edc:	08008f55 	.word	0x08008f55
 8008ee0:	08008f55 	.word	0x08008f55
 8008ee4:	08008f55 	.word	0x08008f55
 8008ee8:	08008f1f 	.word	0x08008f1f
 8008eec:	08008f55 	.word	0x08008f55
 8008ef0:	08008f55 	.word	0x08008f55
 8008ef4:	08008f55 	.word	0x08008f55
 8008ef8:	08008f31 	.word	0x08008f31
 8008efc:	08008f55 	.word	0x08008f55
 8008f00:	08008f55 	.word	0x08008f55
 8008f04:	08008f55 	.word	0x08008f55
 8008f08:	08008f43 	.word	0x08008f43
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	681b      	ldr	r3, [r3, #0]
 8008f10:	68da      	ldr	r2, [r3, #12]
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	681b      	ldr	r3, [r3, #0]
 8008f16:	f042 0202 	orr.w	r2, r2, #2
 8008f1a:	60da      	str	r2, [r3, #12]
      break;
 8008f1c:	e01d      	b.n	8008f5a <HAL_TIM_PWM_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	681b      	ldr	r3, [r3, #0]
 8008f22:	68da      	ldr	r2, [r3, #12]
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	681b      	ldr	r3, [r3, #0]
 8008f28:	f042 0204 	orr.w	r2, r2, #4
 8008f2c:	60da      	str	r2, [r3, #12]
      break;
 8008f2e:	e014      	b.n	8008f5a <HAL_TIM_PWM_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	681b      	ldr	r3, [r3, #0]
 8008f34:	68da      	ldr	r2, [r3, #12]
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	681b      	ldr	r3, [r3, #0]
 8008f3a:	f042 0208 	orr.w	r2, r2, #8
 8008f3e:	60da      	str	r2, [r3, #12]
      break;
 8008f40:	e00b      	b.n	8008f5a <HAL_TIM_PWM_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	681b      	ldr	r3, [r3, #0]
 8008f46:	68da      	ldr	r2, [r3, #12]
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	681b      	ldr	r3, [r3, #0]
 8008f4c:	f042 0210 	orr.w	r2, r2, #16
 8008f50:	60da      	str	r2, [r3, #12]
      break;
 8008f52:	e002      	b.n	8008f5a <HAL_TIM_PWM_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 8008f54:	2301      	movs	r3, #1
 8008f56:	73fb      	strb	r3, [r7, #15]
      break;
 8008f58:	bf00      	nop
  }

  if (status == HAL_OK)
 8008f5a:	7bfb      	ldrb	r3, [r7, #15]
 8008f5c:	2b00      	cmp	r3, #0
 8008f5e:	d16a      	bne.n	8009036 <HAL_TIM_PWM_Start_IT+0x26e>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	681b      	ldr	r3, [r3, #0]
 8008f64:	2201      	movs	r2, #1
 8008f66:	6839      	ldr	r1, [r7, #0]
 8008f68:	4618      	mov	r0, r3
 8008f6a:	f001 f9af 	bl	800a2cc <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	681b      	ldr	r3, [r3, #0]
 8008f72:	4a33      	ldr	r2, [pc, #204]	; (8009040 <HAL_TIM_PWM_Start_IT+0x278>)
 8008f74:	4293      	cmp	r3, r2
 8008f76:	d013      	beq.n	8008fa0 <HAL_TIM_PWM_Start_IT+0x1d8>
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	681b      	ldr	r3, [r3, #0]
 8008f7c:	4a31      	ldr	r2, [pc, #196]	; (8009044 <HAL_TIM_PWM_Start_IT+0x27c>)
 8008f7e:	4293      	cmp	r3, r2
 8008f80:	d00e      	beq.n	8008fa0 <HAL_TIM_PWM_Start_IT+0x1d8>
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	681b      	ldr	r3, [r3, #0]
 8008f86:	4a30      	ldr	r2, [pc, #192]	; (8009048 <HAL_TIM_PWM_Start_IT+0x280>)
 8008f88:	4293      	cmp	r3, r2
 8008f8a:	d009      	beq.n	8008fa0 <HAL_TIM_PWM_Start_IT+0x1d8>
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	681b      	ldr	r3, [r3, #0]
 8008f90:	4a2e      	ldr	r2, [pc, #184]	; (800904c <HAL_TIM_PWM_Start_IT+0x284>)
 8008f92:	4293      	cmp	r3, r2
 8008f94:	d004      	beq.n	8008fa0 <HAL_TIM_PWM_Start_IT+0x1d8>
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	681b      	ldr	r3, [r3, #0]
 8008f9a:	4a2d      	ldr	r2, [pc, #180]	; (8009050 <HAL_TIM_PWM_Start_IT+0x288>)
 8008f9c:	4293      	cmp	r3, r2
 8008f9e:	d101      	bne.n	8008fa4 <HAL_TIM_PWM_Start_IT+0x1dc>
 8008fa0:	2301      	movs	r3, #1
 8008fa2:	e000      	b.n	8008fa6 <HAL_TIM_PWM_Start_IT+0x1de>
 8008fa4:	2300      	movs	r3, #0
 8008fa6:	2b00      	cmp	r3, #0
 8008fa8:	d007      	beq.n	8008fba <HAL_TIM_PWM_Start_IT+0x1f2>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	681b      	ldr	r3, [r3, #0]
 8008fae:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	681b      	ldr	r3, [r3, #0]
 8008fb4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008fb8:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	681b      	ldr	r3, [r3, #0]
 8008fbe:	4a20      	ldr	r2, [pc, #128]	; (8009040 <HAL_TIM_PWM_Start_IT+0x278>)
 8008fc0:	4293      	cmp	r3, r2
 8008fc2:	d018      	beq.n	8008ff6 <HAL_TIM_PWM_Start_IT+0x22e>
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	681b      	ldr	r3, [r3, #0]
 8008fc8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008fcc:	d013      	beq.n	8008ff6 <HAL_TIM_PWM_Start_IT+0x22e>
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	681b      	ldr	r3, [r3, #0]
 8008fd2:	4a20      	ldr	r2, [pc, #128]	; (8009054 <HAL_TIM_PWM_Start_IT+0x28c>)
 8008fd4:	4293      	cmp	r3, r2
 8008fd6:	d00e      	beq.n	8008ff6 <HAL_TIM_PWM_Start_IT+0x22e>
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	681b      	ldr	r3, [r3, #0]
 8008fdc:	4a1e      	ldr	r2, [pc, #120]	; (8009058 <HAL_TIM_PWM_Start_IT+0x290>)
 8008fde:	4293      	cmp	r3, r2
 8008fe0:	d009      	beq.n	8008ff6 <HAL_TIM_PWM_Start_IT+0x22e>
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	681b      	ldr	r3, [r3, #0]
 8008fe6:	4a17      	ldr	r2, [pc, #92]	; (8009044 <HAL_TIM_PWM_Start_IT+0x27c>)
 8008fe8:	4293      	cmp	r3, r2
 8008fea:	d004      	beq.n	8008ff6 <HAL_TIM_PWM_Start_IT+0x22e>
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	681b      	ldr	r3, [r3, #0]
 8008ff0:	4a15      	ldr	r2, [pc, #84]	; (8009048 <HAL_TIM_PWM_Start_IT+0x280>)
 8008ff2:	4293      	cmp	r3, r2
 8008ff4:	d115      	bne.n	8009022 <HAL_TIM_PWM_Start_IT+0x25a>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	681b      	ldr	r3, [r3, #0]
 8008ffa:	689a      	ldr	r2, [r3, #8]
 8008ffc:	4b17      	ldr	r3, [pc, #92]	; (800905c <HAL_TIM_PWM_Start_IT+0x294>)
 8008ffe:	4013      	ands	r3, r2
 8009000:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009002:	68bb      	ldr	r3, [r7, #8]
 8009004:	2b06      	cmp	r3, #6
 8009006:	d015      	beq.n	8009034 <HAL_TIM_PWM_Start_IT+0x26c>
 8009008:	68bb      	ldr	r3, [r7, #8]
 800900a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800900e:	d011      	beq.n	8009034 <HAL_TIM_PWM_Start_IT+0x26c>
      {
        __HAL_TIM_ENABLE(htim);
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	681b      	ldr	r3, [r3, #0]
 8009014:	681a      	ldr	r2, [r3, #0]
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	681b      	ldr	r3, [r3, #0]
 800901a:	f042 0201 	orr.w	r2, r2, #1
 800901e:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009020:	e008      	b.n	8009034 <HAL_TIM_PWM_Start_IT+0x26c>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	681b      	ldr	r3, [r3, #0]
 8009026:	681a      	ldr	r2, [r3, #0]
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	681b      	ldr	r3, [r3, #0]
 800902c:	f042 0201 	orr.w	r2, r2, #1
 8009030:	601a      	str	r2, [r3, #0]
 8009032:	e000      	b.n	8009036 <HAL_TIM_PWM_Start_IT+0x26e>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009034:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 8009036:	7bfb      	ldrb	r3, [r7, #15]
}
 8009038:	4618      	mov	r0, r3
 800903a:	3710      	adds	r7, #16
 800903c:	46bd      	mov	sp, r7
 800903e:	bd80      	pop	{r7, pc}
 8009040:	40012c00 	.word	0x40012c00
 8009044:	40013400 	.word	0x40013400
 8009048:	40014000 	.word	0x40014000
 800904c:	40014400 	.word	0x40014400
 8009050:	40014800 	.word	0x40014800
 8009054:	40000400 	.word	0x40000400
 8009058:	40000800 	.word	0x40000800
 800905c:	00010007 	.word	0x00010007

08009060 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8009060:	b580      	push	{r7, lr}
 8009062:	b086      	sub	sp, #24
 8009064:	af00      	add	r7, sp, #0
 8009066:	6078      	str	r0, [r7, #4]
 8009068:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	2b00      	cmp	r3, #0
 800906e:	d101      	bne.n	8009074 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8009070:	2301      	movs	r3, #1
 8009072:	e097      	b.n	80091a4 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800907a:	b2db      	uxtb	r3, r3
 800907c:	2b00      	cmp	r3, #0
 800907e:	d106      	bne.n	800908e <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	2200      	movs	r2, #0
 8009084:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8009088:	6878      	ldr	r0, [r7, #4]
 800908a:	f7fa f86d 	bl	8003168 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	2202      	movs	r2, #2
 8009092:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	681b      	ldr	r3, [r3, #0]
 800909a:	689b      	ldr	r3, [r3, #8]
 800909c:	687a      	ldr	r2, [r7, #4]
 800909e:	6812      	ldr	r2, [r2, #0]
 80090a0:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 80090a4:	f023 0307 	bic.w	r3, r3, #7
 80090a8:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	681a      	ldr	r2, [r3, #0]
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	3304      	adds	r3, #4
 80090b2:	4619      	mov	r1, r3
 80090b4:	4610      	mov	r0, r2
 80090b6:	f000 fce7 	bl	8009a88 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	681b      	ldr	r3, [r3, #0]
 80090be:	689b      	ldr	r3, [r3, #8]
 80090c0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	681b      	ldr	r3, [r3, #0]
 80090c6:	699b      	ldr	r3, [r3, #24]
 80090c8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	681b      	ldr	r3, [r3, #0]
 80090ce:	6a1b      	ldr	r3, [r3, #32]
 80090d0:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80090d2:	683b      	ldr	r3, [r7, #0]
 80090d4:	681b      	ldr	r3, [r3, #0]
 80090d6:	697a      	ldr	r2, [r7, #20]
 80090d8:	4313      	orrs	r3, r2
 80090da:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80090dc:	693b      	ldr	r3, [r7, #16]
 80090de:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80090e2:	f023 0303 	bic.w	r3, r3, #3
 80090e6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80090e8:	683b      	ldr	r3, [r7, #0]
 80090ea:	689a      	ldr	r2, [r3, #8]
 80090ec:	683b      	ldr	r3, [r7, #0]
 80090ee:	699b      	ldr	r3, [r3, #24]
 80090f0:	021b      	lsls	r3, r3, #8
 80090f2:	4313      	orrs	r3, r2
 80090f4:	693a      	ldr	r2, [r7, #16]
 80090f6:	4313      	orrs	r3, r2
 80090f8:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80090fa:	693b      	ldr	r3, [r7, #16]
 80090fc:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8009100:	f023 030c 	bic.w	r3, r3, #12
 8009104:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8009106:	693b      	ldr	r3, [r7, #16]
 8009108:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800910c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009110:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8009112:	683b      	ldr	r3, [r7, #0]
 8009114:	68da      	ldr	r2, [r3, #12]
 8009116:	683b      	ldr	r3, [r7, #0]
 8009118:	69db      	ldr	r3, [r3, #28]
 800911a:	021b      	lsls	r3, r3, #8
 800911c:	4313      	orrs	r3, r2
 800911e:	693a      	ldr	r2, [r7, #16]
 8009120:	4313      	orrs	r3, r2
 8009122:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8009124:	683b      	ldr	r3, [r7, #0]
 8009126:	691b      	ldr	r3, [r3, #16]
 8009128:	011a      	lsls	r2, r3, #4
 800912a:	683b      	ldr	r3, [r7, #0]
 800912c:	6a1b      	ldr	r3, [r3, #32]
 800912e:	031b      	lsls	r3, r3, #12
 8009130:	4313      	orrs	r3, r2
 8009132:	693a      	ldr	r2, [r7, #16]
 8009134:	4313      	orrs	r3, r2
 8009136:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8009138:	68fb      	ldr	r3, [r7, #12]
 800913a:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800913e:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8009140:	68fb      	ldr	r3, [r7, #12]
 8009142:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8009146:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8009148:	683b      	ldr	r3, [r7, #0]
 800914a:	685a      	ldr	r2, [r3, #4]
 800914c:	683b      	ldr	r3, [r7, #0]
 800914e:	695b      	ldr	r3, [r3, #20]
 8009150:	011b      	lsls	r3, r3, #4
 8009152:	4313      	orrs	r3, r2
 8009154:	68fa      	ldr	r2, [r7, #12]
 8009156:	4313      	orrs	r3, r2
 8009158:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	681b      	ldr	r3, [r3, #0]
 800915e:	697a      	ldr	r2, [r7, #20]
 8009160:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	681b      	ldr	r3, [r3, #0]
 8009166:	693a      	ldr	r2, [r7, #16]
 8009168:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	681b      	ldr	r3, [r3, #0]
 800916e:	68fa      	ldr	r2, [r7, #12]
 8009170:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	2201      	movs	r2, #1
 8009176:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	2201      	movs	r2, #1
 800917e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	2201      	movs	r2, #1
 8009186:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	2201      	movs	r2, #1
 800918e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	2201      	movs	r2, #1
 8009196:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	2201      	movs	r2, #1
 800919e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80091a2:	2300      	movs	r3, #0
}
 80091a4:	4618      	mov	r0, r3
 80091a6:	3718      	adds	r7, #24
 80091a8:	46bd      	mov	sp, r7
 80091aa:	bd80      	pop	{r7, pc}

080091ac <HAL_TIM_Encoder_Start_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80091ac:	b580      	push	{r7, lr}
 80091ae:	b084      	sub	sp, #16
 80091b0:	af00      	add	r7, sp, #0
 80091b2:	6078      	str	r0, [r7, #4]
 80091b4:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80091bc:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80091c4:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80091cc:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80091d4:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 80091d6:	683b      	ldr	r3, [r7, #0]
 80091d8:	2b00      	cmp	r3, #0
 80091da:	d110      	bne.n	80091fe <HAL_TIM_Encoder_Start_IT+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80091dc:	7bfb      	ldrb	r3, [r7, #15]
 80091de:	2b01      	cmp	r3, #1
 80091e0:	d102      	bne.n	80091e8 <HAL_TIM_Encoder_Start_IT+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 80091e2:	7b7b      	ldrb	r3, [r7, #13]
 80091e4:	2b01      	cmp	r3, #1
 80091e6:	d001      	beq.n	80091ec <HAL_TIM_Encoder_Start_IT+0x40>
    {
      return HAL_ERROR;
 80091e8:	2301      	movs	r3, #1
 80091ea:	e089      	b.n	8009300 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	2202      	movs	r2, #2
 80091f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	2202      	movs	r2, #2
 80091f8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80091fc:	e031      	b.n	8009262 <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 80091fe:	683b      	ldr	r3, [r7, #0]
 8009200:	2b04      	cmp	r3, #4
 8009202:	d110      	bne.n	8009226 <HAL_TIM_Encoder_Start_IT+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8009204:	7bbb      	ldrb	r3, [r7, #14]
 8009206:	2b01      	cmp	r3, #1
 8009208:	d102      	bne.n	8009210 <HAL_TIM_Encoder_Start_IT+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800920a:	7b3b      	ldrb	r3, [r7, #12]
 800920c:	2b01      	cmp	r3, #1
 800920e:	d001      	beq.n	8009214 <HAL_TIM_Encoder_Start_IT+0x68>
    {
      return HAL_ERROR;
 8009210:	2301      	movs	r3, #1
 8009212:	e075      	b.n	8009300 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	2202      	movs	r2, #2
 8009218:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	2202      	movs	r2, #2
 8009220:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009224:	e01d      	b.n	8009262 <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8009226:	7bfb      	ldrb	r3, [r7, #15]
 8009228:	2b01      	cmp	r3, #1
 800922a:	d108      	bne.n	800923e <HAL_TIM_Encoder_Start_IT+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800922c:	7bbb      	ldrb	r3, [r7, #14]
 800922e:	2b01      	cmp	r3, #1
 8009230:	d105      	bne.n	800923e <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8009232:	7b7b      	ldrb	r3, [r7, #13]
 8009234:	2b01      	cmp	r3, #1
 8009236:	d102      	bne.n	800923e <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8009238:	7b3b      	ldrb	r3, [r7, #12]
 800923a:	2b01      	cmp	r3, #1
 800923c:	d001      	beq.n	8009242 <HAL_TIM_Encoder_Start_IT+0x96>
    {
      return HAL_ERROR;
 800923e:	2301      	movs	r3, #1
 8009240:	e05e      	b.n	8009300 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	2202      	movs	r2, #2
 8009246:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	2202      	movs	r2, #2
 800924e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	2202      	movs	r2, #2
 8009256:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	2202      	movs	r2, #2
 800925e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
  }

  /* Enable the encoder interface channels */
  /* Enable the capture compare Interrupts 1 and/or 2 */
  switch (Channel)
 8009262:	683b      	ldr	r3, [r7, #0]
 8009264:	2b00      	cmp	r3, #0
 8009266:	d003      	beq.n	8009270 <HAL_TIM_Encoder_Start_IT+0xc4>
 8009268:	683b      	ldr	r3, [r7, #0]
 800926a:	2b04      	cmp	r3, #4
 800926c:	d010      	beq.n	8009290 <HAL_TIM_Encoder_Start_IT+0xe4>
 800926e:	e01f      	b.n	80092b0 <HAL_TIM_Encoder_Start_IT+0x104>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	681b      	ldr	r3, [r3, #0]
 8009274:	2201      	movs	r2, #1
 8009276:	2100      	movs	r1, #0
 8009278:	4618      	mov	r0, r3
 800927a:	f001 f827 	bl	800a2cc <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	681b      	ldr	r3, [r3, #0]
 8009282:	68da      	ldr	r2, [r3, #12]
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	681b      	ldr	r3, [r3, #0]
 8009288:	f042 0202 	orr.w	r2, r2, #2
 800928c:	60da      	str	r2, [r3, #12]
      break;
 800928e:	e02e      	b.n	80092ee <HAL_TIM_Encoder_Start_IT+0x142>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	681b      	ldr	r3, [r3, #0]
 8009294:	2201      	movs	r2, #1
 8009296:	2104      	movs	r1, #4
 8009298:	4618      	mov	r0, r3
 800929a:	f001 f817 	bl	800a2cc <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800929e:	687b      	ldr	r3, [r7, #4]
 80092a0:	681b      	ldr	r3, [r3, #0]
 80092a2:	68da      	ldr	r2, [r3, #12]
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	681b      	ldr	r3, [r3, #0]
 80092a8:	f042 0204 	orr.w	r2, r2, #4
 80092ac:	60da      	str	r2, [r3, #12]
      break;
 80092ae:	e01e      	b.n	80092ee <HAL_TIM_Encoder_Start_IT+0x142>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	681b      	ldr	r3, [r3, #0]
 80092b4:	2201      	movs	r2, #1
 80092b6:	2100      	movs	r1, #0
 80092b8:	4618      	mov	r0, r3
 80092ba:	f001 f807 	bl	800a2cc <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	681b      	ldr	r3, [r3, #0]
 80092c2:	2201      	movs	r2, #1
 80092c4:	2104      	movs	r1, #4
 80092c6:	4618      	mov	r0, r3
 80092c8:	f001 f800 	bl	800a2cc <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	681b      	ldr	r3, [r3, #0]
 80092d0:	68da      	ldr	r2, [r3, #12]
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	681b      	ldr	r3, [r3, #0]
 80092d6:	f042 0202 	orr.w	r2, r2, #2
 80092da:	60da      	str	r2, [r3, #12]
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	681b      	ldr	r3, [r3, #0]
 80092e0:	68da      	ldr	r2, [r3, #12]
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	681b      	ldr	r3, [r3, #0]
 80092e6:	f042 0204 	orr.w	r2, r2, #4
 80092ea:	60da      	str	r2, [r3, #12]
      break;
 80092ec:	bf00      	nop
    }
  }

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	681b      	ldr	r3, [r3, #0]
 80092f2:	681a      	ldr	r2, [r3, #0]
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	681b      	ldr	r3, [r3, #0]
 80092f8:	f042 0201 	orr.w	r2, r2, #1
 80092fc:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80092fe:	2300      	movs	r3, #0
}
 8009300:	4618      	mov	r0, r3
 8009302:	3710      	adds	r7, #16
 8009304:	46bd      	mov	sp, r7
 8009306:	bd80      	pop	{r7, pc}

08009308 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8009308:	b580      	push	{r7, lr}
 800930a:	b082      	sub	sp, #8
 800930c:	af00      	add	r7, sp, #0
 800930e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	681b      	ldr	r3, [r3, #0]
 8009314:	691b      	ldr	r3, [r3, #16]
 8009316:	f003 0302 	and.w	r3, r3, #2
 800931a:	2b02      	cmp	r3, #2
 800931c:	d122      	bne.n	8009364 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	681b      	ldr	r3, [r3, #0]
 8009322:	68db      	ldr	r3, [r3, #12]
 8009324:	f003 0302 	and.w	r3, r3, #2
 8009328:	2b02      	cmp	r3, #2
 800932a:	d11b      	bne.n	8009364 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	681b      	ldr	r3, [r3, #0]
 8009330:	f06f 0202 	mvn.w	r2, #2
 8009334:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	2201      	movs	r2, #1
 800933a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	681b      	ldr	r3, [r3, #0]
 8009340:	699b      	ldr	r3, [r3, #24]
 8009342:	f003 0303 	and.w	r3, r3, #3
 8009346:	2b00      	cmp	r3, #0
 8009348:	d003      	beq.n	8009352 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800934a:	6878      	ldr	r0, [r7, #4]
 800934c:	f000 fb7e 	bl	8009a4c <HAL_TIM_IC_CaptureCallback>
 8009350:	e005      	b.n	800935e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8009352:	6878      	ldr	r0, [r7, #4]
 8009354:	f000 fb70 	bl	8009a38 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009358:	6878      	ldr	r0, [r7, #4]
 800935a:	f000 fb81 	bl	8009a60 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	2200      	movs	r2, #0
 8009362:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	681b      	ldr	r3, [r3, #0]
 8009368:	691b      	ldr	r3, [r3, #16]
 800936a:	f003 0304 	and.w	r3, r3, #4
 800936e:	2b04      	cmp	r3, #4
 8009370:	d122      	bne.n	80093b8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	681b      	ldr	r3, [r3, #0]
 8009376:	68db      	ldr	r3, [r3, #12]
 8009378:	f003 0304 	and.w	r3, r3, #4
 800937c:	2b04      	cmp	r3, #4
 800937e:	d11b      	bne.n	80093b8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	681b      	ldr	r3, [r3, #0]
 8009384:	f06f 0204 	mvn.w	r2, #4
 8009388:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	2202      	movs	r2, #2
 800938e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	681b      	ldr	r3, [r3, #0]
 8009394:	699b      	ldr	r3, [r3, #24]
 8009396:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800939a:	2b00      	cmp	r3, #0
 800939c:	d003      	beq.n	80093a6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800939e:	6878      	ldr	r0, [r7, #4]
 80093a0:	f000 fb54 	bl	8009a4c <HAL_TIM_IC_CaptureCallback>
 80093a4:	e005      	b.n	80093b2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80093a6:	6878      	ldr	r0, [r7, #4]
 80093a8:	f000 fb46 	bl	8009a38 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80093ac:	6878      	ldr	r0, [r7, #4]
 80093ae:	f000 fb57 	bl	8009a60 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	2200      	movs	r2, #0
 80093b6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	681b      	ldr	r3, [r3, #0]
 80093bc:	691b      	ldr	r3, [r3, #16]
 80093be:	f003 0308 	and.w	r3, r3, #8
 80093c2:	2b08      	cmp	r3, #8
 80093c4:	d122      	bne.n	800940c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	681b      	ldr	r3, [r3, #0]
 80093ca:	68db      	ldr	r3, [r3, #12]
 80093cc:	f003 0308 	and.w	r3, r3, #8
 80093d0:	2b08      	cmp	r3, #8
 80093d2:	d11b      	bne.n	800940c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	681b      	ldr	r3, [r3, #0]
 80093d8:	f06f 0208 	mvn.w	r2, #8
 80093dc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80093de:	687b      	ldr	r3, [r7, #4]
 80093e0:	2204      	movs	r2, #4
 80093e2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	681b      	ldr	r3, [r3, #0]
 80093e8:	69db      	ldr	r3, [r3, #28]
 80093ea:	f003 0303 	and.w	r3, r3, #3
 80093ee:	2b00      	cmp	r3, #0
 80093f0:	d003      	beq.n	80093fa <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80093f2:	6878      	ldr	r0, [r7, #4]
 80093f4:	f000 fb2a 	bl	8009a4c <HAL_TIM_IC_CaptureCallback>
 80093f8:	e005      	b.n	8009406 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80093fa:	6878      	ldr	r0, [r7, #4]
 80093fc:	f000 fb1c 	bl	8009a38 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009400:	6878      	ldr	r0, [r7, #4]
 8009402:	f000 fb2d 	bl	8009a60 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	2200      	movs	r2, #0
 800940a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	681b      	ldr	r3, [r3, #0]
 8009410:	691b      	ldr	r3, [r3, #16]
 8009412:	f003 0310 	and.w	r3, r3, #16
 8009416:	2b10      	cmp	r3, #16
 8009418:	d122      	bne.n	8009460 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	681b      	ldr	r3, [r3, #0]
 800941e:	68db      	ldr	r3, [r3, #12]
 8009420:	f003 0310 	and.w	r3, r3, #16
 8009424:	2b10      	cmp	r3, #16
 8009426:	d11b      	bne.n	8009460 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	681b      	ldr	r3, [r3, #0]
 800942c:	f06f 0210 	mvn.w	r2, #16
 8009430:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	2208      	movs	r2, #8
 8009436:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	681b      	ldr	r3, [r3, #0]
 800943c:	69db      	ldr	r3, [r3, #28]
 800943e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009442:	2b00      	cmp	r3, #0
 8009444:	d003      	beq.n	800944e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009446:	6878      	ldr	r0, [r7, #4]
 8009448:	f000 fb00 	bl	8009a4c <HAL_TIM_IC_CaptureCallback>
 800944c:	e005      	b.n	800945a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800944e:	6878      	ldr	r0, [r7, #4]
 8009450:	f000 faf2 	bl	8009a38 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009454:	6878      	ldr	r0, [r7, #4]
 8009456:	f000 fb03 	bl	8009a60 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	2200      	movs	r2, #0
 800945e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	681b      	ldr	r3, [r3, #0]
 8009464:	691b      	ldr	r3, [r3, #16]
 8009466:	f003 0301 	and.w	r3, r3, #1
 800946a:	2b01      	cmp	r3, #1
 800946c:	d10e      	bne.n	800948c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	681b      	ldr	r3, [r3, #0]
 8009472:	68db      	ldr	r3, [r3, #12]
 8009474:	f003 0301 	and.w	r3, r3, #1
 8009478:	2b01      	cmp	r3, #1
 800947a:	d107      	bne.n	800948c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	681b      	ldr	r3, [r3, #0]
 8009480:	f06f 0201 	mvn.w	r2, #1
 8009484:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8009486:	6878      	ldr	r0, [r7, #4]
 8009488:	f000 facc 	bl	8009a24 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	681b      	ldr	r3, [r3, #0]
 8009490:	691b      	ldr	r3, [r3, #16]
 8009492:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009496:	2b80      	cmp	r3, #128	; 0x80
 8009498:	d10e      	bne.n	80094b8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	681b      	ldr	r3, [r3, #0]
 800949e:	68db      	ldr	r3, [r3, #12]
 80094a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80094a4:	2b80      	cmp	r3, #128	; 0x80
 80094a6:	d107      	bne.n	80094b8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	681b      	ldr	r3, [r3, #0]
 80094ac:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80094b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80094b2:	6878      	ldr	r0, [r7, #4]
 80094b4:	f001 f964 	bl	800a780 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	681b      	ldr	r3, [r3, #0]
 80094bc:	691b      	ldr	r3, [r3, #16]
 80094be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80094c2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80094c6:	d10e      	bne.n	80094e6 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	681b      	ldr	r3, [r3, #0]
 80094cc:	68db      	ldr	r3, [r3, #12]
 80094ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80094d2:	2b80      	cmp	r3, #128	; 0x80
 80094d4:	d107      	bne.n	80094e6 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	681b      	ldr	r3, [r3, #0]
 80094da:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80094de:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80094e0:	6878      	ldr	r0, [r7, #4]
 80094e2:	f001 f957 	bl	800a794 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	681b      	ldr	r3, [r3, #0]
 80094ea:	691b      	ldr	r3, [r3, #16]
 80094ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80094f0:	2b40      	cmp	r3, #64	; 0x40
 80094f2:	d10e      	bne.n	8009512 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	681b      	ldr	r3, [r3, #0]
 80094f8:	68db      	ldr	r3, [r3, #12]
 80094fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80094fe:	2b40      	cmp	r3, #64	; 0x40
 8009500:	d107      	bne.n	8009512 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	681b      	ldr	r3, [r3, #0]
 8009506:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800950a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800950c:	6878      	ldr	r0, [r7, #4]
 800950e:	f000 fab1 	bl	8009a74 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	681b      	ldr	r3, [r3, #0]
 8009516:	691b      	ldr	r3, [r3, #16]
 8009518:	f003 0320 	and.w	r3, r3, #32
 800951c:	2b20      	cmp	r3, #32
 800951e:	d10e      	bne.n	800953e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	681b      	ldr	r3, [r3, #0]
 8009524:	68db      	ldr	r3, [r3, #12]
 8009526:	f003 0320 	and.w	r3, r3, #32
 800952a:	2b20      	cmp	r3, #32
 800952c:	d107      	bne.n	800953e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	681b      	ldr	r3, [r3, #0]
 8009532:	f06f 0220 	mvn.w	r2, #32
 8009536:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8009538:	6878      	ldr	r0, [r7, #4]
 800953a:	f001 f917 	bl	800a76c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	681b      	ldr	r3, [r3, #0]
 8009542:	691b      	ldr	r3, [r3, #16]
 8009544:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009548:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800954c:	d10f      	bne.n	800956e <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	681b      	ldr	r3, [r3, #0]
 8009552:	68db      	ldr	r3, [r3, #12]
 8009554:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009558:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800955c:	d107      	bne.n	800956e <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	681b      	ldr	r3, [r3, #0]
 8009562:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 8009566:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8009568:	6878      	ldr	r0, [r7, #4]
 800956a:	f001 f91d 	bl	800a7a8 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	681b      	ldr	r3, [r3, #0]
 8009572:	691b      	ldr	r3, [r3, #16]
 8009574:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8009578:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800957c:	d10f      	bne.n	800959e <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	681b      	ldr	r3, [r3, #0]
 8009582:	68db      	ldr	r3, [r3, #12]
 8009584:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8009588:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800958c:	d107      	bne.n	800959e <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	681b      	ldr	r3, [r3, #0]
 8009592:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 8009596:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8009598:	6878      	ldr	r0, [r7, #4]
 800959a:	f001 f90f 	bl	800a7bc <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	681b      	ldr	r3, [r3, #0]
 80095a2:	691b      	ldr	r3, [r3, #16]
 80095a4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80095a8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80095ac:	d10f      	bne.n	80095ce <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 80095ae:	687b      	ldr	r3, [r7, #4]
 80095b0:	681b      	ldr	r3, [r3, #0]
 80095b2:	68db      	ldr	r3, [r3, #12]
 80095b4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80095b8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80095bc:	d107      	bne.n	80095ce <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	681b      	ldr	r3, [r3, #0]
 80095c2:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 80095c6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 80095c8:	6878      	ldr	r0, [r7, #4]
 80095ca:	f001 f901 	bl	800a7d0 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	681b      	ldr	r3, [r3, #0]
 80095d2:	691b      	ldr	r3, [r3, #16]
 80095d4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80095d8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80095dc:	d10f      	bne.n	80095fe <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	681b      	ldr	r3, [r3, #0]
 80095e2:	68db      	ldr	r3, [r3, #12]
 80095e4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80095e8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80095ec:	d107      	bne.n	80095fe <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	681b      	ldr	r3, [r3, #0]
 80095f2:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 80095f6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 80095f8:	6878      	ldr	r0, [r7, #4]
 80095fa:	f001 f8f3 	bl	800a7e4 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80095fe:	bf00      	nop
 8009600:	3708      	adds	r7, #8
 8009602:	46bd      	mov	sp, r7
 8009604:	bd80      	pop	{r7, pc}
	...

08009608 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8009608:	b580      	push	{r7, lr}
 800960a:	b086      	sub	sp, #24
 800960c:	af00      	add	r7, sp, #0
 800960e:	60f8      	str	r0, [r7, #12]
 8009610:	60b9      	str	r1, [r7, #8]
 8009612:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009614:	2300      	movs	r3, #0
 8009616:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8009618:	68fb      	ldr	r3, [r7, #12]
 800961a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800961e:	2b01      	cmp	r3, #1
 8009620:	d101      	bne.n	8009626 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8009622:	2302      	movs	r3, #2
 8009624:	e0ff      	b.n	8009826 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8009626:	68fb      	ldr	r3, [r7, #12]
 8009628:	2201      	movs	r2, #1
 800962a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	2b14      	cmp	r3, #20
 8009632:	f200 80f0 	bhi.w	8009816 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8009636:	a201      	add	r2, pc, #4	; (adr r2, 800963c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8009638:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800963c:	08009691 	.word	0x08009691
 8009640:	08009817 	.word	0x08009817
 8009644:	08009817 	.word	0x08009817
 8009648:	08009817 	.word	0x08009817
 800964c:	080096d1 	.word	0x080096d1
 8009650:	08009817 	.word	0x08009817
 8009654:	08009817 	.word	0x08009817
 8009658:	08009817 	.word	0x08009817
 800965c:	08009713 	.word	0x08009713
 8009660:	08009817 	.word	0x08009817
 8009664:	08009817 	.word	0x08009817
 8009668:	08009817 	.word	0x08009817
 800966c:	08009753 	.word	0x08009753
 8009670:	08009817 	.word	0x08009817
 8009674:	08009817 	.word	0x08009817
 8009678:	08009817 	.word	0x08009817
 800967c:	08009795 	.word	0x08009795
 8009680:	08009817 	.word	0x08009817
 8009684:	08009817 	.word	0x08009817
 8009688:	08009817 	.word	0x08009817
 800968c:	080097d5 	.word	0x080097d5
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8009690:	68fb      	ldr	r3, [r7, #12]
 8009692:	681b      	ldr	r3, [r3, #0]
 8009694:	68b9      	ldr	r1, [r7, #8]
 8009696:	4618      	mov	r0, r3
 8009698:	f000 fa86 	bl	8009ba8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800969c:	68fb      	ldr	r3, [r7, #12]
 800969e:	681b      	ldr	r3, [r3, #0]
 80096a0:	699a      	ldr	r2, [r3, #24]
 80096a2:	68fb      	ldr	r3, [r7, #12]
 80096a4:	681b      	ldr	r3, [r3, #0]
 80096a6:	f042 0208 	orr.w	r2, r2, #8
 80096aa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80096ac:	68fb      	ldr	r3, [r7, #12]
 80096ae:	681b      	ldr	r3, [r3, #0]
 80096b0:	699a      	ldr	r2, [r3, #24]
 80096b2:	68fb      	ldr	r3, [r7, #12]
 80096b4:	681b      	ldr	r3, [r3, #0]
 80096b6:	f022 0204 	bic.w	r2, r2, #4
 80096ba:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80096bc:	68fb      	ldr	r3, [r7, #12]
 80096be:	681b      	ldr	r3, [r3, #0]
 80096c0:	6999      	ldr	r1, [r3, #24]
 80096c2:	68bb      	ldr	r3, [r7, #8]
 80096c4:	691a      	ldr	r2, [r3, #16]
 80096c6:	68fb      	ldr	r3, [r7, #12]
 80096c8:	681b      	ldr	r3, [r3, #0]
 80096ca:	430a      	orrs	r2, r1
 80096cc:	619a      	str	r2, [r3, #24]
      break;
 80096ce:	e0a5      	b.n	800981c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80096d0:	68fb      	ldr	r3, [r7, #12]
 80096d2:	681b      	ldr	r3, [r3, #0]
 80096d4:	68b9      	ldr	r1, [r7, #8]
 80096d6:	4618      	mov	r0, r3
 80096d8:	f000 faf6 	bl	8009cc8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80096dc:	68fb      	ldr	r3, [r7, #12]
 80096de:	681b      	ldr	r3, [r3, #0]
 80096e0:	699a      	ldr	r2, [r3, #24]
 80096e2:	68fb      	ldr	r3, [r7, #12]
 80096e4:	681b      	ldr	r3, [r3, #0]
 80096e6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80096ea:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80096ec:	68fb      	ldr	r3, [r7, #12]
 80096ee:	681b      	ldr	r3, [r3, #0]
 80096f0:	699a      	ldr	r2, [r3, #24]
 80096f2:	68fb      	ldr	r3, [r7, #12]
 80096f4:	681b      	ldr	r3, [r3, #0]
 80096f6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80096fa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80096fc:	68fb      	ldr	r3, [r7, #12]
 80096fe:	681b      	ldr	r3, [r3, #0]
 8009700:	6999      	ldr	r1, [r3, #24]
 8009702:	68bb      	ldr	r3, [r7, #8]
 8009704:	691b      	ldr	r3, [r3, #16]
 8009706:	021a      	lsls	r2, r3, #8
 8009708:	68fb      	ldr	r3, [r7, #12]
 800970a:	681b      	ldr	r3, [r3, #0]
 800970c:	430a      	orrs	r2, r1
 800970e:	619a      	str	r2, [r3, #24]
      break;
 8009710:	e084      	b.n	800981c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8009712:	68fb      	ldr	r3, [r7, #12]
 8009714:	681b      	ldr	r3, [r3, #0]
 8009716:	68b9      	ldr	r1, [r7, #8]
 8009718:	4618      	mov	r0, r3
 800971a:	f000 fb5f 	bl	8009ddc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800971e:	68fb      	ldr	r3, [r7, #12]
 8009720:	681b      	ldr	r3, [r3, #0]
 8009722:	69da      	ldr	r2, [r3, #28]
 8009724:	68fb      	ldr	r3, [r7, #12]
 8009726:	681b      	ldr	r3, [r3, #0]
 8009728:	f042 0208 	orr.w	r2, r2, #8
 800972c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800972e:	68fb      	ldr	r3, [r7, #12]
 8009730:	681b      	ldr	r3, [r3, #0]
 8009732:	69da      	ldr	r2, [r3, #28]
 8009734:	68fb      	ldr	r3, [r7, #12]
 8009736:	681b      	ldr	r3, [r3, #0]
 8009738:	f022 0204 	bic.w	r2, r2, #4
 800973c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800973e:	68fb      	ldr	r3, [r7, #12]
 8009740:	681b      	ldr	r3, [r3, #0]
 8009742:	69d9      	ldr	r1, [r3, #28]
 8009744:	68bb      	ldr	r3, [r7, #8]
 8009746:	691a      	ldr	r2, [r3, #16]
 8009748:	68fb      	ldr	r3, [r7, #12]
 800974a:	681b      	ldr	r3, [r3, #0]
 800974c:	430a      	orrs	r2, r1
 800974e:	61da      	str	r2, [r3, #28]
      break;
 8009750:	e064      	b.n	800981c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8009752:	68fb      	ldr	r3, [r7, #12]
 8009754:	681b      	ldr	r3, [r3, #0]
 8009756:	68b9      	ldr	r1, [r7, #8]
 8009758:	4618      	mov	r0, r3
 800975a:	f000 fbc7 	bl	8009eec <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800975e:	68fb      	ldr	r3, [r7, #12]
 8009760:	681b      	ldr	r3, [r3, #0]
 8009762:	69da      	ldr	r2, [r3, #28]
 8009764:	68fb      	ldr	r3, [r7, #12]
 8009766:	681b      	ldr	r3, [r3, #0]
 8009768:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800976c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800976e:	68fb      	ldr	r3, [r7, #12]
 8009770:	681b      	ldr	r3, [r3, #0]
 8009772:	69da      	ldr	r2, [r3, #28]
 8009774:	68fb      	ldr	r3, [r7, #12]
 8009776:	681b      	ldr	r3, [r3, #0]
 8009778:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800977c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800977e:	68fb      	ldr	r3, [r7, #12]
 8009780:	681b      	ldr	r3, [r3, #0]
 8009782:	69d9      	ldr	r1, [r3, #28]
 8009784:	68bb      	ldr	r3, [r7, #8]
 8009786:	691b      	ldr	r3, [r3, #16]
 8009788:	021a      	lsls	r2, r3, #8
 800978a:	68fb      	ldr	r3, [r7, #12]
 800978c:	681b      	ldr	r3, [r3, #0]
 800978e:	430a      	orrs	r2, r1
 8009790:	61da      	str	r2, [r3, #28]
      break;
 8009792:	e043      	b.n	800981c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8009794:	68fb      	ldr	r3, [r7, #12]
 8009796:	681b      	ldr	r3, [r3, #0]
 8009798:	68b9      	ldr	r1, [r7, #8]
 800979a:	4618      	mov	r0, r3
 800979c:	f000 fc30 	bl	800a000 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80097a0:	68fb      	ldr	r3, [r7, #12]
 80097a2:	681b      	ldr	r3, [r3, #0]
 80097a4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80097a6:	68fb      	ldr	r3, [r7, #12]
 80097a8:	681b      	ldr	r3, [r3, #0]
 80097aa:	f042 0208 	orr.w	r2, r2, #8
 80097ae:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80097b0:	68fb      	ldr	r3, [r7, #12]
 80097b2:	681b      	ldr	r3, [r3, #0]
 80097b4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80097b6:	68fb      	ldr	r3, [r7, #12]
 80097b8:	681b      	ldr	r3, [r3, #0]
 80097ba:	f022 0204 	bic.w	r2, r2, #4
 80097be:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80097c0:	68fb      	ldr	r3, [r7, #12]
 80097c2:	681b      	ldr	r3, [r3, #0]
 80097c4:	6d19      	ldr	r1, [r3, #80]	; 0x50
 80097c6:	68bb      	ldr	r3, [r7, #8]
 80097c8:	691a      	ldr	r2, [r3, #16]
 80097ca:	68fb      	ldr	r3, [r7, #12]
 80097cc:	681b      	ldr	r3, [r3, #0]
 80097ce:	430a      	orrs	r2, r1
 80097d0:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 80097d2:	e023      	b.n	800981c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80097d4:	68fb      	ldr	r3, [r7, #12]
 80097d6:	681b      	ldr	r3, [r3, #0]
 80097d8:	68b9      	ldr	r1, [r7, #8]
 80097da:	4618      	mov	r0, r3
 80097dc:	f000 fc74 	bl	800a0c8 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80097e0:	68fb      	ldr	r3, [r7, #12]
 80097e2:	681b      	ldr	r3, [r3, #0]
 80097e4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80097e6:	68fb      	ldr	r3, [r7, #12]
 80097e8:	681b      	ldr	r3, [r3, #0]
 80097ea:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80097ee:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80097f0:	68fb      	ldr	r3, [r7, #12]
 80097f2:	681b      	ldr	r3, [r3, #0]
 80097f4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80097f6:	68fb      	ldr	r3, [r7, #12]
 80097f8:	681b      	ldr	r3, [r3, #0]
 80097fa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80097fe:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8009800:	68fb      	ldr	r3, [r7, #12]
 8009802:	681b      	ldr	r3, [r3, #0]
 8009804:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8009806:	68bb      	ldr	r3, [r7, #8]
 8009808:	691b      	ldr	r3, [r3, #16]
 800980a:	021a      	lsls	r2, r3, #8
 800980c:	68fb      	ldr	r3, [r7, #12]
 800980e:	681b      	ldr	r3, [r3, #0]
 8009810:	430a      	orrs	r2, r1
 8009812:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8009814:	e002      	b.n	800981c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8009816:	2301      	movs	r3, #1
 8009818:	75fb      	strb	r3, [r7, #23]
      break;
 800981a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800981c:	68fb      	ldr	r3, [r7, #12]
 800981e:	2200      	movs	r2, #0
 8009820:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8009824:	7dfb      	ldrb	r3, [r7, #23]
}
 8009826:	4618      	mov	r0, r3
 8009828:	3718      	adds	r7, #24
 800982a:	46bd      	mov	sp, r7
 800982c:	bd80      	pop	{r7, pc}
 800982e:	bf00      	nop

08009830 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8009830:	b580      	push	{r7, lr}
 8009832:	b084      	sub	sp, #16
 8009834:	af00      	add	r7, sp, #0
 8009836:	6078      	str	r0, [r7, #4]
 8009838:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800983a:	2300      	movs	r3, #0
 800983c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800983e:	687b      	ldr	r3, [r7, #4]
 8009840:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009844:	2b01      	cmp	r3, #1
 8009846:	d101      	bne.n	800984c <HAL_TIM_ConfigClockSource+0x1c>
 8009848:	2302      	movs	r3, #2
 800984a:	e0de      	b.n	8009a0a <HAL_TIM_ConfigClockSource+0x1da>
 800984c:	687b      	ldr	r3, [r7, #4]
 800984e:	2201      	movs	r2, #1
 8009850:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	2202      	movs	r2, #2
 8009858:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	681b      	ldr	r3, [r3, #0]
 8009860:	689b      	ldr	r3, [r3, #8]
 8009862:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8009864:	68bb      	ldr	r3, [r7, #8]
 8009866:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 800986a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800986e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009870:	68bb      	ldr	r3, [r7, #8]
 8009872:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009876:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8009878:	687b      	ldr	r3, [r7, #4]
 800987a:	681b      	ldr	r3, [r3, #0]
 800987c:	68ba      	ldr	r2, [r7, #8]
 800987e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8009880:	683b      	ldr	r3, [r7, #0]
 8009882:	681b      	ldr	r3, [r3, #0]
 8009884:	4a63      	ldr	r2, [pc, #396]	; (8009a14 <HAL_TIM_ConfigClockSource+0x1e4>)
 8009886:	4293      	cmp	r3, r2
 8009888:	f000 80a9 	beq.w	80099de <HAL_TIM_ConfigClockSource+0x1ae>
 800988c:	4a61      	ldr	r2, [pc, #388]	; (8009a14 <HAL_TIM_ConfigClockSource+0x1e4>)
 800988e:	4293      	cmp	r3, r2
 8009890:	f200 80ae 	bhi.w	80099f0 <HAL_TIM_ConfigClockSource+0x1c0>
 8009894:	4a60      	ldr	r2, [pc, #384]	; (8009a18 <HAL_TIM_ConfigClockSource+0x1e8>)
 8009896:	4293      	cmp	r3, r2
 8009898:	f000 80a1 	beq.w	80099de <HAL_TIM_ConfigClockSource+0x1ae>
 800989c:	4a5e      	ldr	r2, [pc, #376]	; (8009a18 <HAL_TIM_ConfigClockSource+0x1e8>)
 800989e:	4293      	cmp	r3, r2
 80098a0:	f200 80a6 	bhi.w	80099f0 <HAL_TIM_ConfigClockSource+0x1c0>
 80098a4:	4a5d      	ldr	r2, [pc, #372]	; (8009a1c <HAL_TIM_ConfigClockSource+0x1ec>)
 80098a6:	4293      	cmp	r3, r2
 80098a8:	f000 8099 	beq.w	80099de <HAL_TIM_ConfigClockSource+0x1ae>
 80098ac:	4a5b      	ldr	r2, [pc, #364]	; (8009a1c <HAL_TIM_ConfigClockSource+0x1ec>)
 80098ae:	4293      	cmp	r3, r2
 80098b0:	f200 809e 	bhi.w	80099f0 <HAL_TIM_ConfigClockSource+0x1c0>
 80098b4:	4a5a      	ldr	r2, [pc, #360]	; (8009a20 <HAL_TIM_ConfigClockSource+0x1f0>)
 80098b6:	4293      	cmp	r3, r2
 80098b8:	f000 8091 	beq.w	80099de <HAL_TIM_ConfigClockSource+0x1ae>
 80098bc:	4a58      	ldr	r2, [pc, #352]	; (8009a20 <HAL_TIM_ConfigClockSource+0x1f0>)
 80098be:	4293      	cmp	r3, r2
 80098c0:	f200 8096 	bhi.w	80099f0 <HAL_TIM_ConfigClockSource+0x1c0>
 80098c4:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 80098c8:	f000 8089 	beq.w	80099de <HAL_TIM_ConfigClockSource+0x1ae>
 80098cc:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 80098d0:	f200 808e 	bhi.w	80099f0 <HAL_TIM_ConfigClockSource+0x1c0>
 80098d4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80098d8:	d03e      	beq.n	8009958 <HAL_TIM_ConfigClockSource+0x128>
 80098da:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80098de:	f200 8087 	bhi.w	80099f0 <HAL_TIM_ConfigClockSource+0x1c0>
 80098e2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80098e6:	f000 8086 	beq.w	80099f6 <HAL_TIM_ConfigClockSource+0x1c6>
 80098ea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80098ee:	d87f      	bhi.n	80099f0 <HAL_TIM_ConfigClockSource+0x1c0>
 80098f0:	2b70      	cmp	r3, #112	; 0x70
 80098f2:	d01a      	beq.n	800992a <HAL_TIM_ConfigClockSource+0xfa>
 80098f4:	2b70      	cmp	r3, #112	; 0x70
 80098f6:	d87b      	bhi.n	80099f0 <HAL_TIM_ConfigClockSource+0x1c0>
 80098f8:	2b60      	cmp	r3, #96	; 0x60
 80098fa:	d050      	beq.n	800999e <HAL_TIM_ConfigClockSource+0x16e>
 80098fc:	2b60      	cmp	r3, #96	; 0x60
 80098fe:	d877      	bhi.n	80099f0 <HAL_TIM_ConfigClockSource+0x1c0>
 8009900:	2b50      	cmp	r3, #80	; 0x50
 8009902:	d03c      	beq.n	800997e <HAL_TIM_ConfigClockSource+0x14e>
 8009904:	2b50      	cmp	r3, #80	; 0x50
 8009906:	d873      	bhi.n	80099f0 <HAL_TIM_ConfigClockSource+0x1c0>
 8009908:	2b40      	cmp	r3, #64	; 0x40
 800990a:	d058      	beq.n	80099be <HAL_TIM_ConfigClockSource+0x18e>
 800990c:	2b40      	cmp	r3, #64	; 0x40
 800990e:	d86f      	bhi.n	80099f0 <HAL_TIM_ConfigClockSource+0x1c0>
 8009910:	2b30      	cmp	r3, #48	; 0x30
 8009912:	d064      	beq.n	80099de <HAL_TIM_ConfigClockSource+0x1ae>
 8009914:	2b30      	cmp	r3, #48	; 0x30
 8009916:	d86b      	bhi.n	80099f0 <HAL_TIM_ConfigClockSource+0x1c0>
 8009918:	2b20      	cmp	r3, #32
 800991a:	d060      	beq.n	80099de <HAL_TIM_ConfigClockSource+0x1ae>
 800991c:	2b20      	cmp	r3, #32
 800991e:	d867      	bhi.n	80099f0 <HAL_TIM_ConfigClockSource+0x1c0>
 8009920:	2b00      	cmp	r3, #0
 8009922:	d05c      	beq.n	80099de <HAL_TIM_ConfigClockSource+0x1ae>
 8009924:	2b10      	cmp	r3, #16
 8009926:	d05a      	beq.n	80099de <HAL_TIM_ConfigClockSource+0x1ae>
 8009928:	e062      	b.n	80099f0 <HAL_TIM_ConfigClockSource+0x1c0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800992a:	687b      	ldr	r3, [r7, #4]
 800992c:	6818      	ldr	r0, [r3, #0]
 800992e:	683b      	ldr	r3, [r7, #0]
 8009930:	6899      	ldr	r1, [r3, #8]
 8009932:	683b      	ldr	r3, [r7, #0]
 8009934:	685a      	ldr	r2, [r3, #4]
 8009936:	683b      	ldr	r3, [r7, #0]
 8009938:	68db      	ldr	r3, [r3, #12]
 800993a:	f000 fca7 	bl	800a28c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800993e:	687b      	ldr	r3, [r7, #4]
 8009940:	681b      	ldr	r3, [r3, #0]
 8009942:	689b      	ldr	r3, [r3, #8]
 8009944:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8009946:	68bb      	ldr	r3, [r7, #8]
 8009948:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800994c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	681b      	ldr	r3, [r3, #0]
 8009952:	68ba      	ldr	r2, [r7, #8]
 8009954:	609a      	str	r2, [r3, #8]
      break;
 8009956:	e04f      	b.n	80099f8 <HAL_TIM_ConfigClockSource+0x1c8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	6818      	ldr	r0, [r3, #0]
 800995c:	683b      	ldr	r3, [r7, #0]
 800995e:	6899      	ldr	r1, [r3, #8]
 8009960:	683b      	ldr	r3, [r7, #0]
 8009962:	685a      	ldr	r2, [r3, #4]
 8009964:	683b      	ldr	r3, [r7, #0]
 8009966:	68db      	ldr	r3, [r3, #12]
 8009968:	f000 fc90 	bl	800a28c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800996c:	687b      	ldr	r3, [r7, #4]
 800996e:	681b      	ldr	r3, [r3, #0]
 8009970:	689a      	ldr	r2, [r3, #8]
 8009972:	687b      	ldr	r3, [r7, #4]
 8009974:	681b      	ldr	r3, [r3, #0]
 8009976:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800997a:	609a      	str	r2, [r3, #8]
      break;
 800997c:	e03c      	b.n	80099f8 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800997e:	687b      	ldr	r3, [r7, #4]
 8009980:	6818      	ldr	r0, [r3, #0]
 8009982:	683b      	ldr	r3, [r7, #0]
 8009984:	6859      	ldr	r1, [r3, #4]
 8009986:	683b      	ldr	r3, [r7, #0]
 8009988:	68db      	ldr	r3, [r3, #12]
 800998a:	461a      	mov	r2, r3
 800998c:	f000 fc02 	bl	800a194 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8009990:	687b      	ldr	r3, [r7, #4]
 8009992:	681b      	ldr	r3, [r3, #0]
 8009994:	2150      	movs	r1, #80	; 0x50
 8009996:	4618      	mov	r0, r3
 8009998:	f000 fc5b 	bl	800a252 <TIM_ITRx_SetConfig>
      break;
 800999c:	e02c      	b.n	80099f8 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800999e:	687b      	ldr	r3, [r7, #4]
 80099a0:	6818      	ldr	r0, [r3, #0]
 80099a2:	683b      	ldr	r3, [r7, #0]
 80099a4:	6859      	ldr	r1, [r3, #4]
 80099a6:	683b      	ldr	r3, [r7, #0]
 80099a8:	68db      	ldr	r3, [r3, #12]
 80099aa:	461a      	mov	r2, r3
 80099ac:	f000 fc21 	bl	800a1f2 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	681b      	ldr	r3, [r3, #0]
 80099b4:	2160      	movs	r1, #96	; 0x60
 80099b6:	4618      	mov	r0, r3
 80099b8:	f000 fc4b 	bl	800a252 <TIM_ITRx_SetConfig>
      break;
 80099bc:	e01c      	b.n	80099f8 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80099be:	687b      	ldr	r3, [r7, #4]
 80099c0:	6818      	ldr	r0, [r3, #0]
 80099c2:	683b      	ldr	r3, [r7, #0]
 80099c4:	6859      	ldr	r1, [r3, #4]
 80099c6:	683b      	ldr	r3, [r7, #0]
 80099c8:	68db      	ldr	r3, [r3, #12]
 80099ca:	461a      	mov	r2, r3
 80099cc:	f000 fbe2 	bl	800a194 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80099d0:	687b      	ldr	r3, [r7, #4]
 80099d2:	681b      	ldr	r3, [r3, #0]
 80099d4:	2140      	movs	r1, #64	; 0x40
 80099d6:	4618      	mov	r0, r3
 80099d8:	f000 fc3b 	bl	800a252 <TIM_ITRx_SetConfig>
      break;
 80099dc:	e00c      	b.n	80099f8 <HAL_TIM_ConfigClockSource+0x1c8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80099de:	687b      	ldr	r3, [r7, #4]
 80099e0:	681a      	ldr	r2, [r3, #0]
 80099e2:	683b      	ldr	r3, [r7, #0]
 80099e4:	681b      	ldr	r3, [r3, #0]
 80099e6:	4619      	mov	r1, r3
 80099e8:	4610      	mov	r0, r2
 80099ea:	f000 fc32 	bl	800a252 <TIM_ITRx_SetConfig>
      break;
 80099ee:	e003      	b.n	80099f8 <HAL_TIM_ConfigClockSource+0x1c8>
    }

    default:
      status = HAL_ERROR;
 80099f0:	2301      	movs	r3, #1
 80099f2:	73fb      	strb	r3, [r7, #15]
      break;
 80099f4:	e000      	b.n	80099f8 <HAL_TIM_ConfigClockSource+0x1c8>
      break;
 80099f6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	2201      	movs	r2, #1
 80099fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	2200      	movs	r2, #0
 8009a04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8009a08:	7bfb      	ldrb	r3, [r7, #15]
}
 8009a0a:	4618      	mov	r0, r3
 8009a0c:	3710      	adds	r7, #16
 8009a0e:	46bd      	mov	sp, r7
 8009a10:	bd80      	pop	{r7, pc}
 8009a12:	bf00      	nop
 8009a14:	00100070 	.word	0x00100070
 8009a18:	00100040 	.word	0x00100040
 8009a1c:	00100030 	.word	0x00100030
 8009a20:	00100020 	.word	0x00100020

08009a24 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009a24:	b480      	push	{r7}
 8009a26:	b083      	sub	sp, #12
 8009a28:	af00      	add	r7, sp, #0
 8009a2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8009a2c:	bf00      	nop
 8009a2e:	370c      	adds	r7, #12
 8009a30:	46bd      	mov	sp, r7
 8009a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a36:	4770      	bx	lr

08009a38 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009a38:	b480      	push	{r7}
 8009a3a:	b083      	sub	sp, #12
 8009a3c:	af00      	add	r7, sp, #0
 8009a3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8009a40:	bf00      	nop
 8009a42:	370c      	adds	r7, #12
 8009a44:	46bd      	mov	sp, r7
 8009a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a4a:	4770      	bx	lr

08009a4c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8009a4c:	b480      	push	{r7}
 8009a4e:	b083      	sub	sp, #12
 8009a50:	af00      	add	r7, sp, #0
 8009a52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8009a54:	bf00      	nop
 8009a56:	370c      	adds	r7, #12
 8009a58:	46bd      	mov	sp, r7
 8009a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a5e:	4770      	bx	lr

08009a60 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8009a60:	b480      	push	{r7}
 8009a62:	b083      	sub	sp, #12
 8009a64:	af00      	add	r7, sp, #0
 8009a66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8009a68:	bf00      	nop
 8009a6a:	370c      	adds	r7, #12
 8009a6c:	46bd      	mov	sp, r7
 8009a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a72:	4770      	bx	lr

08009a74 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8009a74:	b480      	push	{r7}
 8009a76:	b083      	sub	sp, #12
 8009a78:	af00      	add	r7, sp, #0
 8009a7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8009a7c:	bf00      	nop
 8009a7e:	370c      	adds	r7, #12
 8009a80:	46bd      	mov	sp, r7
 8009a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a86:	4770      	bx	lr

08009a88 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8009a88:	b480      	push	{r7}
 8009a8a:	b085      	sub	sp, #20
 8009a8c:	af00      	add	r7, sp, #0
 8009a8e:	6078      	str	r0, [r7, #4]
 8009a90:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009a92:	687b      	ldr	r3, [r7, #4]
 8009a94:	681b      	ldr	r3, [r3, #0]
 8009a96:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	4a3c      	ldr	r2, [pc, #240]	; (8009b8c <TIM_Base_SetConfig+0x104>)
 8009a9c:	4293      	cmp	r3, r2
 8009a9e:	d00f      	beq.n	8009ac0 <TIM_Base_SetConfig+0x38>
 8009aa0:	687b      	ldr	r3, [r7, #4]
 8009aa2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009aa6:	d00b      	beq.n	8009ac0 <TIM_Base_SetConfig+0x38>
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	4a39      	ldr	r2, [pc, #228]	; (8009b90 <TIM_Base_SetConfig+0x108>)
 8009aac:	4293      	cmp	r3, r2
 8009aae:	d007      	beq.n	8009ac0 <TIM_Base_SetConfig+0x38>
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	4a38      	ldr	r2, [pc, #224]	; (8009b94 <TIM_Base_SetConfig+0x10c>)
 8009ab4:	4293      	cmp	r3, r2
 8009ab6:	d003      	beq.n	8009ac0 <TIM_Base_SetConfig+0x38>
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	4a37      	ldr	r2, [pc, #220]	; (8009b98 <TIM_Base_SetConfig+0x110>)
 8009abc:	4293      	cmp	r3, r2
 8009abe:	d108      	bne.n	8009ad2 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009ac0:	68fb      	ldr	r3, [r7, #12]
 8009ac2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009ac6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009ac8:	683b      	ldr	r3, [r7, #0]
 8009aca:	685b      	ldr	r3, [r3, #4]
 8009acc:	68fa      	ldr	r2, [r7, #12]
 8009ace:	4313      	orrs	r3, r2
 8009ad0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	4a2d      	ldr	r2, [pc, #180]	; (8009b8c <TIM_Base_SetConfig+0x104>)
 8009ad6:	4293      	cmp	r3, r2
 8009ad8:	d01b      	beq.n	8009b12 <TIM_Base_SetConfig+0x8a>
 8009ada:	687b      	ldr	r3, [r7, #4]
 8009adc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009ae0:	d017      	beq.n	8009b12 <TIM_Base_SetConfig+0x8a>
 8009ae2:	687b      	ldr	r3, [r7, #4]
 8009ae4:	4a2a      	ldr	r2, [pc, #168]	; (8009b90 <TIM_Base_SetConfig+0x108>)
 8009ae6:	4293      	cmp	r3, r2
 8009ae8:	d013      	beq.n	8009b12 <TIM_Base_SetConfig+0x8a>
 8009aea:	687b      	ldr	r3, [r7, #4]
 8009aec:	4a29      	ldr	r2, [pc, #164]	; (8009b94 <TIM_Base_SetConfig+0x10c>)
 8009aee:	4293      	cmp	r3, r2
 8009af0:	d00f      	beq.n	8009b12 <TIM_Base_SetConfig+0x8a>
 8009af2:	687b      	ldr	r3, [r7, #4]
 8009af4:	4a28      	ldr	r2, [pc, #160]	; (8009b98 <TIM_Base_SetConfig+0x110>)
 8009af6:	4293      	cmp	r3, r2
 8009af8:	d00b      	beq.n	8009b12 <TIM_Base_SetConfig+0x8a>
 8009afa:	687b      	ldr	r3, [r7, #4]
 8009afc:	4a27      	ldr	r2, [pc, #156]	; (8009b9c <TIM_Base_SetConfig+0x114>)
 8009afe:	4293      	cmp	r3, r2
 8009b00:	d007      	beq.n	8009b12 <TIM_Base_SetConfig+0x8a>
 8009b02:	687b      	ldr	r3, [r7, #4]
 8009b04:	4a26      	ldr	r2, [pc, #152]	; (8009ba0 <TIM_Base_SetConfig+0x118>)
 8009b06:	4293      	cmp	r3, r2
 8009b08:	d003      	beq.n	8009b12 <TIM_Base_SetConfig+0x8a>
 8009b0a:	687b      	ldr	r3, [r7, #4]
 8009b0c:	4a25      	ldr	r2, [pc, #148]	; (8009ba4 <TIM_Base_SetConfig+0x11c>)
 8009b0e:	4293      	cmp	r3, r2
 8009b10:	d108      	bne.n	8009b24 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009b12:	68fb      	ldr	r3, [r7, #12]
 8009b14:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009b18:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009b1a:	683b      	ldr	r3, [r7, #0]
 8009b1c:	68db      	ldr	r3, [r3, #12]
 8009b1e:	68fa      	ldr	r2, [r7, #12]
 8009b20:	4313      	orrs	r3, r2
 8009b22:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009b24:	68fb      	ldr	r3, [r7, #12]
 8009b26:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8009b2a:	683b      	ldr	r3, [r7, #0]
 8009b2c:	695b      	ldr	r3, [r3, #20]
 8009b2e:	4313      	orrs	r3, r2
 8009b30:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8009b32:	687b      	ldr	r3, [r7, #4]
 8009b34:	68fa      	ldr	r2, [r7, #12]
 8009b36:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009b38:	683b      	ldr	r3, [r7, #0]
 8009b3a:	689a      	ldr	r2, [r3, #8]
 8009b3c:	687b      	ldr	r3, [r7, #4]
 8009b3e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009b40:	683b      	ldr	r3, [r7, #0]
 8009b42:	681a      	ldr	r2, [r3, #0]
 8009b44:	687b      	ldr	r3, [r7, #4]
 8009b46:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009b48:	687b      	ldr	r3, [r7, #4]
 8009b4a:	4a10      	ldr	r2, [pc, #64]	; (8009b8c <TIM_Base_SetConfig+0x104>)
 8009b4c:	4293      	cmp	r3, r2
 8009b4e:	d00f      	beq.n	8009b70 <TIM_Base_SetConfig+0xe8>
 8009b50:	687b      	ldr	r3, [r7, #4]
 8009b52:	4a11      	ldr	r2, [pc, #68]	; (8009b98 <TIM_Base_SetConfig+0x110>)
 8009b54:	4293      	cmp	r3, r2
 8009b56:	d00b      	beq.n	8009b70 <TIM_Base_SetConfig+0xe8>
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	4a10      	ldr	r2, [pc, #64]	; (8009b9c <TIM_Base_SetConfig+0x114>)
 8009b5c:	4293      	cmp	r3, r2
 8009b5e:	d007      	beq.n	8009b70 <TIM_Base_SetConfig+0xe8>
 8009b60:	687b      	ldr	r3, [r7, #4]
 8009b62:	4a0f      	ldr	r2, [pc, #60]	; (8009ba0 <TIM_Base_SetConfig+0x118>)
 8009b64:	4293      	cmp	r3, r2
 8009b66:	d003      	beq.n	8009b70 <TIM_Base_SetConfig+0xe8>
 8009b68:	687b      	ldr	r3, [r7, #4]
 8009b6a:	4a0e      	ldr	r2, [pc, #56]	; (8009ba4 <TIM_Base_SetConfig+0x11c>)
 8009b6c:	4293      	cmp	r3, r2
 8009b6e:	d103      	bne.n	8009b78 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009b70:	683b      	ldr	r3, [r7, #0]
 8009b72:	691a      	ldr	r2, [r3, #16]
 8009b74:	687b      	ldr	r3, [r7, #4]
 8009b76:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009b78:	687b      	ldr	r3, [r7, #4]
 8009b7a:	2201      	movs	r2, #1
 8009b7c:	615a      	str	r2, [r3, #20]
}
 8009b7e:	bf00      	nop
 8009b80:	3714      	adds	r7, #20
 8009b82:	46bd      	mov	sp, r7
 8009b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b88:	4770      	bx	lr
 8009b8a:	bf00      	nop
 8009b8c:	40012c00 	.word	0x40012c00
 8009b90:	40000400 	.word	0x40000400
 8009b94:	40000800 	.word	0x40000800
 8009b98:	40013400 	.word	0x40013400
 8009b9c:	40014000 	.word	0x40014000
 8009ba0:	40014400 	.word	0x40014400
 8009ba4:	40014800 	.word	0x40014800

08009ba8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009ba8:	b480      	push	{r7}
 8009baa:	b087      	sub	sp, #28
 8009bac:	af00      	add	r7, sp, #0
 8009bae:	6078      	str	r0, [r7, #4]
 8009bb0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009bb2:	687b      	ldr	r3, [r7, #4]
 8009bb4:	6a1b      	ldr	r3, [r3, #32]
 8009bb6:	f023 0201 	bic.w	r2, r3, #1
 8009bba:	687b      	ldr	r3, [r7, #4]
 8009bbc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009bbe:	687b      	ldr	r3, [r7, #4]
 8009bc0:	6a1b      	ldr	r3, [r3, #32]
 8009bc2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009bc4:	687b      	ldr	r3, [r7, #4]
 8009bc6:	685b      	ldr	r3, [r3, #4]
 8009bc8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009bca:	687b      	ldr	r3, [r7, #4]
 8009bcc:	699b      	ldr	r3, [r3, #24]
 8009bce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8009bd0:	68fb      	ldr	r3, [r7, #12]
 8009bd2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009bd6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009bda:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8009bdc:	68fb      	ldr	r3, [r7, #12]
 8009bde:	f023 0303 	bic.w	r3, r3, #3
 8009be2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009be4:	683b      	ldr	r3, [r7, #0]
 8009be6:	681b      	ldr	r3, [r3, #0]
 8009be8:	68fa      	ldr	r2, [r7, #12]
 8009bea:	4313      	orrs	r3, r2
 8009bec:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8009bee:	697b      	ldr	r3, [r7, #20]
 8009bf0:	f023 0302 	bic.w	r3, r3, #2
 8009bf4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8009bf6:	683b      	ldr	r3, [r7, #0]
 8009bf8:	689b      	ldr	r3, [r3, #8]
 8009bfa:	697a      	ldr	r2, [r7, #20]
 8009bfc:	4313      	orrs	r3, r2
 8009bfe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8009c00:	687b      	ldr	r3, [r7, #4]
 8009c02:	4a2c      	ldr	r2, [pc, #176]	; (8009cb4 <TIM_OC1_SetConfig+0x10c>)
 8009c04:	4293      	cmp	r3, r2
 8009c06:	d00f      	beq.n	8009c28 <TIM_OC1_SetConfig+0x80>
 8009c08:	687b      	ldr	r3, [r7, #4]
 8009c0a:	4a2b      	ldr	r2, [pc, #172]	; (8009cb8 <TIM_OC1_SetConfig+0x110>)
 8009c0c:	4293      	cmp	r3, r2
 8009c0e:	d00b      	beq.n	8009c28 <TIM_OC1_SetConfig+0x80>
 8009c10:	687b      	ldr	r3, [r7, #4]
 8009c12:	4a2a      	ldr	r2, [pc, #168]	; (8009cbc <TIM_OC1_SetConfig+0x114>)
 8009c14:	4293      	cmp	r3, r2
 8009c16:	d007      	beq.n	8009c28 <TIM_OC1_SetConfig+0x80>
 8009c18:	687b      	ldr	r3, [r7, #4]
 8009c1a:	4a29      	ldr	r2, [pc, #164]	; (8009cc0 <TIM_OC1_SetConfig+0x118>)
 8009c1c:	4293      	cmp	r3, r2
 8009c1e:	d003      	beq.n	8009c28 <TIM_OC1_SetConfig+0x80>
 8009c20:	687b      	ldr	r3, [r7, #4]
 8009c22:	4a28      	ldr	r2, [pc, #160]	; (8009cc4 <TIM_OC1_SetConfig+0x11c>)
 8009c24:	4293      	cmp	r3, r2
 8009c26:	d10c      	bne.n	8009c42 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8009c28:	697b      	ldr	r3, [r7, #20]
 8009c2a:	f023 0308 	bic.w	r3, r3, #8
 8009c2e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8009c30:	683b      	ldr	r3, [r7, #0]
 8009c32:	68db      	ldr	r3, [r3, #12]
 8009c34:	697a      	ldr	r2, [r7, #20]
 8009c36:	4313      	orrs	r3, r2
 8009c38:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8009c3a:	697b      	ldr	r3, [r7, #20]
 8009c3c:	f023 0304 	bic.w	r3, r3, #4
 8009c40:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009c42:	687b      	ldr	r3, [r7, #4]
 8009c44:	4a1b      	ldr	r2, [pc, #108]	; (8009cb4 <TIM_OC1_SetConfig+0x10c>)
 8009c46:	4293      	cmp	r3, r2
 8009c48:	d00f      	beq.n	8009c6a <TIM_OC1_SetConfig+0xc2>
 8009c4a:	687b      	ldr	r3, [r7, #4]
 8009c4c:	4a1a      	ldr	r2, [pc, #104]	; (8009cb8 <TIM_OC1_SetConfig+0x110>)
 8009c4e:	4293      	cmp	r3, r2
 8009c50:	d00b      	beq.n	8009c6a <TIM_OC1_SetConfig+0xc2>
 8009c52:	687b      	ldr	r3, [r7, #4]
 8009c54:	4a19      	ldr	r2, [pc, #100]	; (8009cbc <TIM_OC1_SetConfig+0x114>)
 8009c56:	4293      	cmp	r3, r2
 8009c58:	d007      	beq.n	8009c6a <TIM_OC1_SetConfig+0xc2>
 8009c5a:	687b      	ldr	r3, [r7, #4]
 8009c5c:	4a18      	ldr	r2, [pc, #96]	; (8009cc0 <TIM_OC1_SetConfig+0x118>)
 8009c5e:	4293      	cmp	r3, r2
 8009c60:	d003      	beq.n	8009c6a <TIM_OC1_SetConfig+0xc2>
 8009c62:	687b      	ldr	r3, [r7, #4]
 8009c64:	4a17      	ldr	r2, [pc, #92]	; (8009cc4 <TIM_OC1_SetConfig+0x11c>)
 8009c66:	4293      	cmp	r3, r2
 8009c68:	d111      	bne.n	8009c8e <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8009c6a:	693b      	ldr	r3, [r7, #16]
 8009c6c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009c70:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8009c72:	693b      	ldr	r3, [r7, #16]
 8009c74:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009c78:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8009c7a:	683b      	ldr	r3, [r7, #0]
 8009c7c:	695b      	ldr	r3, [r3, #20]
 8009c7e:	693a      	ldr	r2, [r7, #16]
 8009c80:	4313      	orrs	r3, r2
 8009c82:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8009c84:	683b      	ldr	r3, [r7, #0]
 8009c86:	699b      	ldr	r3, [r3, #24]
 8009c88:	693a      	ldr	r2, [r7, #16]
 8009c8a:	4313      	orrs	r3, r2
 8009c8c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009c8e:	687b      	ldr	r3, [r7, #4]
 8009c90:	693a      	ldr	r2, [r7, #16]
 8009c92:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009c94:	687b      	ldr	r3, [r7, #4]
 8009c96:	68fa      	ldr	r2, [r7, #12]
 8009c98:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8009c9a:	683b      	ldr	r3, [r7, #0]
 8009c9c:	685a      	ldr	r2, [r3, #4]
 8009c9e:	687b      	ldr	r3, [r7, #4]
 8009ca0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009ca2:	687b      	ldr	r3, [r7, #4]
 8009ca4:	697a      	ldr	r2, [r7, #20]
 8009ca6:	621a      	str	r2, [r3, #32]
}
 8009ca8:	bf00      	nop
 8009caa:	371c      	adds	r7, #28
 8009cac:	46bd      	mov	sp, r7
 8009cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cb2:	4770      	bx	lr
 8009cb4:	40012c00 	.word	0x40012c00
 8009cb8:	40013400 	.word	0x40013400
 8009cbc:	40014000 	.word	0x40014000
 8009cc0:	40014400 	.word	0x40014400
 8009cc4:	40014800 	.word	0x40014800

08009cc8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009cc8:	b480      	push	{r7}
 8009cca:	b087      	sub	sp, #28
 8009ccc:	af00      	add	r7, sp, #0
 8009cce:	6078      	str	r0, [r7, #4]
 8009cd0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009cd2:	687b      	ldr	r3, [r7, #4]
 8009cd4:	6a1b      	ldr	r3, [r3, #32]
 8009cd6:	f023 0210 	bic.w	r2, r3, #16
 8009cda:	687b      	ldr	r3, [r7, #4]
 8009cdc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009cde:	687b      	ldr	r3, [r7, #4]
 8009ce0:	6a1b      	ldr	r3, [r3, #32]
 8009ce2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009ce4:	687b      	ldr	r3, [r7, #4]
 8009ce6:	685b      	ldr	r3, [r3, #4]
 8009ce8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009cea:	687b      	ldr	r3, [r7, #4]
 8009cec:	699b      	ldr	r3, [r3, #24]
 8009cee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8009cf0:	68fb      	ldr	r3, [r7, #12]
 8009cf2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8009cf6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009cfa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8009cfc:	68fb      	ldr	r3, [r7, #12]
 8009cfe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009d02:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009d04:	683b      	ldr	r3, [r7, #0]
 8009d06:	681b      	ldr	r3, [r3, #0]
 8009d08:	021b      	lsls	r3, r3, #8
 8009d0a:	68fa      	ldr	r2, [r7, #12]
 8009d0c:	4313      	orrs	r3, r2
 8009d0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8009d10:	697b      	ldr	r3, [r7, #20]
 8009d12:	f023 0320 	bic.w	r3, r3, #32
 8009d16:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8009d18:	683b      	ldr	r3, [r7, #0]
 8009d1a:	689b      	ldr	r3, [r3, #8]
 8009d1c:	011b      	lsls	r3, r3, #4
 8009d1e:	697a      	ldr	r2, [r7, #20]
 8009d20:	4313      	orrs	r3, r2
 8009d22:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8009d24:	687b      	ldr	r3, [r7, #4]
 8009d26:	4a28      	ldr	r2, [pc, #160]	; (8009dc8 <TIM_OC2_SetConfig+0x100>)
 8009d28:	4293      	cmp	r3, r2
 8009d2a:	d003      	beq.n	8009d34 <TIM_OC2_SetConfig+0x6c>
 8009d2c:	687b      	ldr	r3, [r7, #4]
 8009d2e:	4a27      	ldr	r2, [pc, #156]	; (8009dcc <TIM_OC2_SetConfig+0x104>)
 8009d30:	4293      	cmp	r3, r2
 8009d32:	d10d      	bne.n	8009d50 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8009d34:	697b      	ldr	r3, [r7, #20]
 8009d36:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009d3a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8009d3c:	683b      	ldr	r3, [r7, #0]
 8009d3e:	68db      	ldr	r3, [r3, #12]
 8009d40:	011b      	lsls	r3, r3, #4
 8009d42:	697a      	ldr	r2, [r7, #20]
 8009d44:	4313      	orrs	r3, r2
 8009d46:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8009d48:	697b      	ldr	r3, [r7, #20]
 8009d4a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009d4e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009d50:	687b      	ldr	r3, [r7, #4]
 8009d52:	4a1d      	ldr	r2, [pc, #116]	; (8009dc8 <TIM_OC2_SetConfig+0x100>)
 8009d54:	4293      	cmp	r3, r2
 8009d56:	d00f      	beq.n	8009d78 <TIM_OC2_SetConfig+0xb0>
 8009d58:	687b      	ldr	r3, [r7, #4]
 8009d5a:	4a1c      	ldr	r2, [pc, #112]	; (8009dcc <TIM_OC2_SetConfig+0x104>)
 8009d5c:	4293      	cmp	r3, r2
 8009d5e:	d00b      	beq.n	8009d78 <TIM_OC2_SetConfig+0xb0>
 8009d60:	687b      	ldr	r3, [r7, #4]
 8009d62:	4a1b      	ldr	r2, [pc, #108]	; (8009dd0 <TIM_OC2_SetConfig+0x108>)
 8009d64:	4293      	cmp	r3, r2
 8009d66:	d007      	beq.n	8009d78 <TIM_OC2_SetConfig+0xb0>
 8009d68:	687b      	ldr	r3, [r7, #4]
 8009d6a:	4a1a      	ldr	r2, [pc, #104]	; (8009dd4 <TIM_OC2_SetConfig+0x10c>)
 8009d6c:	4293      	cmp	r3, r2
 8009d6e:	d003      	beq.n	8009d78 <TIM_OC2_SetConfig+0xb0>
 8009d70:	687b      	ldr	r3, [r7, #4]
 8009d72:	4a19      	ldr	r2, [pc, #100]	; (8009dd8 <TIM_OC2_SetConfig+0x110>)
 8009d74:	4293      	cmp	r3, r2
 8009d76:	d113      	bne.n	8009da0 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8009d78:	693b      	ldr	r3, [r7, #16]
 8009d7a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009d7e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8009d80:	693b      	ldr	r3, [r7, #16]
 8009d82:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009d86:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8009d88:	683b      	ldr	r3, [r7, #0]
 8009d8a:	695b      	ldr	r3, [r3, #20]
 8009d8c:	009b      	lsls	r3, r3, #2
 8009d8e:	693a      	ldr	r2, [r7, #16]
 8009d90:	4313      	orrs	r3, r2
 8009d92:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8009d94:	683b      	ldr	r3, [r7, #0]
 8009d96:	699b      	ldr	r3, [r3, #24]
 8009d98:	009b      	lsls	r3, r3, #2
 8009d9a:	693a      	ldr	r2, [r7, #16]
 8009d9c:	4313      	orrs	r3, r2
 8009d9e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009da0:	687b      	ldr	r3, [r7, #4]
 8009da2:	693a      	ldr	r2, [r7, #16]
 8009da4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009da6:	687b      	ldr	r3, [r7, #4]
 8009da8:	68fa      	ldr	r2, [r7, #12]
 8009daa:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8009dac:	683b      	ldr	r3, [r7, #0]
 8009dae:	685a      	ldr	r2, [r3, #4]
 8009db0:	687b      	ldr	r3, [r7, #4]
 8009db2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009db4:	687b      	ldr	r3, [r7, #4]
 8009db6:	697a      	ldr	r2, [r7, #20]
 8009db8:	621a      	str	r2, [r3, #32]
}
 8009dba:	bf00      	nop
 8009dbc:	371c      	adds	r7, #28
 8009dbe:	46bd      	mov	sp, r7
 8009dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dc4:	4770      	bx	lr
 8009dc6:	bf00      	nop
 8009dc8:	40012c00 	.word	0x40012c00
 8009dcc:	40013400 	.word	0x40013400
 8009dd0:	40014000 	.word	0x40014000
 8009dd4:	40014400 	.word	0x40014400
 8009dd8:	40014800 	.word	0x40014800

08009ddc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009ddc:	b480      	push	{r7}
 8009dde:	b087      	sub	sp, #28
 8009de0:	af00      	add	r7, sp, #0
 8009de2:	6078      	str	r0, [r7, #4]
 8009de4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8009de6:	687b      	ldr	r3, [r7, #4]
 8009de8:	6a1b      	ldr	r3, [r3, #32]
 8009dea:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8009dee:	687b      	ldr	r3, [r7, #4]
 8009df0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009df2:	687b      	ldr	r3, [r7, #4]
 8009df4:	6a1b      	ldr	r3, [r3, #32]
 8009df6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	685b      	ldr	r3, [r3, #4]
 8009dfc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009dfe:	687b      	ldr	r3, [r7, #4]
 8009e00:	69db      	ldr	r3, [r3, #28]
 8009e02:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8009e04:	68fb      	ldr	r3, [r7, #12]
 8009e06:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009e0a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009e0e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8009e10:	68fb      	ldr	r3, [r7, #12]
 8009e12:	f023 0303 	bic.w	r3, r3, #3
 8009e16:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009e18:	683b      	ldr	r3, [r7, #0]
 8009e1a:	681b      	ldr	r3, [r3, #0]
 8009e1c:	68fa      	ldr	r2, [r7, #12]
 8009e1e:	4313      	orrs	r3, r2
 8009e20:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8009e22:	697b      	ldr	r3, [r7, #20]
 8009e24:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009e28:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8009e2a:	683b      	ldr	r3, [r7, #0]
 8009e2c:	689b      	ldr	r3, [r3, #8]
 8009e2e:	021b      	lsls	r3, r3, #8
 8009e30:	697a      	ldr	r2, [r7, #20]
 8009e32:	4313      	orrs	r3, r2
 8009e34:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8009e36:	687b      	ldr	r3, [r7, #4]
 8009e38:	4a27      	ldr	r2, [pc, #156]	; (8009ed8 <TIM_OC3_SetConfig+0xfc>)
 8009e3a:	4293      	cmp	r3, r2
 8009e3c:	d003      	beq.n	8009e46 <TIM_OC3_SetConfig+0x6a>
 8009e3e:	687b      	ldr	r3, [r7, #4]
 8009e40:	4a26      	ldr	r2, [pc, #152]	; (8009edc <TIM_OC3_SetConfig+0x100>)
 8009e42:	4293      	cmp	r3, r2
 8009e44:	d10d      	bne.n	8009e62 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8009e46:	697b      	ldr	r3, [r7, #20]
 8009e48:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009e4c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8009e4e:	683b      	ldr	r3, [r7, #0]
 8009e50:	68db      	ldr	r3, [r3, #12]
 8009e52:	021b      	lsls	r3, r3, #8
 8009e54:	697a      	ldr	r2, [r7, #20]
 8009e56:	4313      	orrs	r3, r2
 8009e58:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8009e5a:	697b      	ldr	r3, [r7, #20]
 8009e5c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009e60:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009e62:	687b      	ldr	r3, [r7, #4]
 8009e64:	4a1c      	ldr	r2, [pc, #112]	; (8009ed8 <TIM_OC3_SetConfig+0xfc>)
 8009e66:	4293      	cmp	r3, r2
 8009e68:	d00f      	beq.n	8009e8a <TIM_OC3_SetConfig+0xae>
 8009e6a:	687b      	ldr	r3, [r7, #4]
 8009e6c:	4a1b      	ldr	r2, [pc, #108]	; (8009edc <TIM_OC3_SetConfig+0x100>)
 8009e6e:	4293      	cmp	r3, r2
 8009e70:	d00b      	beq.n	8009e8a <TIM_OC3_SetConfig+0xae>
 8009e72:	687b      	ldr	r3, [r7, #4]
 8009e74:	4a1a      	ldr	r2, [pc, #104]	; (8009ee0 <TIM_OC3_SetConfig+0x104>)
 8009e76:	4293      	cmp	r3, r2
 8009e78:	d007      	beq.n	8009e8a <TIM_OC3_SetConfig+0xae>
 8009e7a:	687b      	ldr	r3, [r7, #4]
 8009e7c:	4a19      	ldr	r2, [pc, #100]	; (8009ee4 <TIM_OC3_SetConfig+0x108>)
 8009e7e:	4293      	cmp	r3, r2
 8009e80:	d003      	beq.n	8009e8a <TIM_OC3_SetConfig+0xae>
 8009e82:	687b      	ldr	r3, [r7, #4]
 8009e84:	4a18      	ldr	r2, [pc, #96]	; (8009ee8 <TIM_OC3_SetConfig+0x10c>)
 8009e86:	4293      	cmp	r3, r2
 8009e88:	d113      	bne.n	8009eb2 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8009e8a:	693b      	ldr	r3, [r7, #16]
 8009e8c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009e90:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8009e92:	693b      	ldr	r3, [r7, #16]
 8009e94:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009e98:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8009e9a:	683b      	ldr	r3, [r7, #0]
 8009e9c:	695b      	ldr	r3, [r3, #20]
 8009e9e:	011b      	lsls	r3, r3, #4
 8009ea0:	693a      	ldr	r2, [r7, #16]
 8009ea2:	4313      	orrs	r3, r2
 8009ea4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8009ea6:	683b      	ldr	r3, [r7, #0]
 8009ea8:	699b      	ldr	r3, [r3, #24]
 8009eaa:	011b      	lsls	r3, r3, #4
 8009eac:	693a      	ldr	r2, [r7, #16]
 8009eae:	4313      	orrs	r3, r2
 8009eb0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009eb2:	687b      	ldr	r3, [r7, #4]
 8009eb4:	693a      	ldr	r2, [r7, #16]
 8009eb6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009eb8:	687b      	ldr	r3, [r7, #4]
 8009eba:	68fa      	ldr	r2, [r7, #12]
 8009ebc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8009ebe:	683b      	ldr	r3, [r7, #0]
 8009ec0:	685a      	ldr	r2, [r3, #4]
 8009ec2:	687b      	ldr	r3, [r7, #4]
 8009ec4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009ec6:	687b      	ldr	r3, [r7, #4]
 8009ec8:	697a      	ldr	r2, [r7, #20]
 8009eca:	621a      	str	r2, [r3, #32]
}
 8009ecc:	bf00      	nop
 8009ece:	371c      	adds	r7, #28
 8009ed0:	46bd      	mov	sp, r7
 8009ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ed6:	4770      	bx	lr
 8009ed8:	40012c00 	.word	0x40012c00
 8009edc:	40013400 	.word	0x40013400
 8009ee0:	40014000 	.word	0x40014000
 8009ee4:	40014400 	.word	0x40014400
 8009ee8:	40014800 	.word	0x40014800

08009eec <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009eec:	b480      	push	{r7}
 8009eee:	b087      	sub	sp, #28
 8009ef0:	af00      	add	r7, sp, #0
 8009ef2:	6078      	str	r0, [r7, #4]
 8009ef4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8009ef6:	687b      	ldr	r3, [r7, #4]
 8009ef8:	6a1b      	ldr	r3, [r3, #32]
 8009efa:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8009efe:	687b      	ldr	r3, [r7, #4]
 8009f00:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009f02:	687b      	ldr	r3, [r7, #4]
 8009f04:	6a1b      	ldr	r3, [r3, #32]
 8009f06:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009f08:	687b      	ldr	r3, [r7, #4]
 8009f0a:	685b      	ldr	r3, [r3, #4]
 8009f0c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009f0e:	687b      	ldr	r3, [r7, #4]
 8009f10:	69db      	ldr	r3, [r3, #28]
 8009f12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8009f14:	68fb      	ldr	r3, [r7, #12]
 8009f16:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8009f1a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009f1e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8009f20:	68fb      	ldr	r3, [r7, #12]
 8009f22:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009f26:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009f28:	683b      	ldr	r3, [r7, #0]
 8009f2a:	681b      	ldr	r3, [r3, #0]
 8009f2c:	021b      	lsls	r3, r3, #8
 8009f2e:	68fa      	ldr	r2, [r7, #12]
 8009f30:	4313      	orrs	r3, r2
 8009f32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8009f34:	697b      	ldr	r3, [r7, #20]
 8009f36:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009f3a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8009f3c:	683b      	ldr	r3, [r7, #0]
 8009f3e:	689b      	ldr	r3, [r3, #8]
 8009f40:	031b      	lsls	r3, r3, #12
 8009f42:	697a      	ldr	r2, [r7, #20]
 8009f44:	4313      	orrs	r3, r2
 8009f46:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8009f48:	687b      	ldr	r3, [r7, #4]
 8009f4a:	4a28      	ldr	r2, [pc, #160]	; (8009fec <TIM_OC4_SetConfig+0x100>)
 8009f4c:	4293      	cmp	r3, r2
 8009f4e:	d003      	beq.n	8009f58 <TIM_OC4_SetConfig+0x6c>
 8009f50:	687b      	ldr	r3, [r7, #4]
 8009f52:	4a27      	ldr	r2, [pc, #156]	; (8009ff0 <TIM_OC4_SetConfig+0x104>)
 8009f54:	4293      	cmp	r3, r2
 8009f56:	d10d      	bne.n	8009f74 <TIM_OC4_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8009f58:	697b      	ldr	r3, [r7, #20]
 8009f5a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8009f5e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8009f60:	683b      	ldr	r3, [r7, #0]
 8009f62:	68db      	ldr	r3, [r3, #12]
 8009f64:	031b      	lsls	r3, r3, #12
 8009f66:	697a      	ldr	r2, [r7, #20]
 8009f68:	4313      	orrs	r3, r2
 8009f6a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8009f6c:	697b      	ldr	r3, [r7, #20]
 8009f6e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009f72:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009f74:	687b      	ldr	r3, [r7, #4]
 8009f76:	4a1d      	ldr	r2, [pc, #116]	; (8009fec <TIM_OC4_SetConfig+0x100>)
 8009f78:	4293      	cmp	r3, r2
 8009f7a:	d00f      	beq.n	8009f9c <TIM_OC4_SetConfig+0xb0>
 8009f7c:	687b      	ldr	r3, [r7, #4]
 8009f7e:	4a1c      	ldr	r2, [pc, #112]	; (8009ff0 <TIM_OC4_SetConfig+0x104>)
 8009f80:	4293      	cmp	r3, r2
 8009f82:	d00b      	beq.n	8009f9c <TIM_OC4_SetConfig+0xb0>
 8009f84:	687b      	ldr	r3, [r7, #4]
 8009f86:	4a1b      	ldr	r2, [pc, #108]	; (8009ff4 <TIM_OC4_SetConfig+0x108>)
 8009f88:	4293      	cmp	r3, r2
 8009f8a:	d007      	beq.n	8009f9c <TIM_OC4_SetConfig+0xb0>
 8009f8c:	687b      	ldr	r3, [r7, #4]
 8009f8e:	4a1a      	ldr	r2, [pc, #104]	; (8009ff8 <TIM_OC4_SetConfig+0x10c>)
 8009f90:	4293      	cmp	r3, r2
 8009f92:	d003      	beq.n	8009f9c <TIM_OC4_SetConfig+0xb0>
 8009f94:	687b      	ldr	r3, [r7, #4]
 8009f96:	4a19      	ldr	r2, [pc, #100]	; (8009ffc <TIM_OC4_SetConfig+0x110>)
 8009f98:	4293      	cmp	r3, r2
 8009f9a:	d113      	bne.n	8009fc4 <TIM_OC4_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8009f9c:	693b      	ldr	r3, [r7, #16]
 8009f9e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009fa2:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8009fa4:	693b      	ldr	r3, [r7, #16]
 8009fa6:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8009faa:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8009fac:	683b      	ldr	r3, [r7, #0]
 8009fae:	695b      	ldr	r3, [r3, #20]
 8009fb0:	019b      	lsls	r3, r3, #6
 8009fb2:	693a      	ldr	r2, [r7, #16]
 8009fb4:	4313      	orrs	r3, r2
 8009fb6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8009fb8:	683b      	ldr	r3, [r7, #0]
 8009fba:	699b      	ldr	r3, [r3, #24]
 8009fbc:	019b      	lsls	r3, r3, #6
 8009fbe:	693a      	ldr	r2, [r7, #16]
 8009fc0:	4313      	orrs	r3, r2
 8009fc2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009fc4:	687b      	ldr	r3, [r7, #4]
 8009fc6:	693a      	ldr	r2, [r7, #16]
 8009fc8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009fca:	687b      	ldr	r3, [r7, #4]
 8009fcc:	68fa      	ldr	r2, [r7, #12]
 8009fce:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8009fd0:	683b      	ldr	r3, [r7, #0]
 8009fd2:	685a      	ldr	r2, [r3, #4]
 8009fd4:	687b      	ldr	r3, [r7, #4]
 8009fd6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009fd8:	687b      	ldr	r3, [r7, #4]
 8009fda:	697a      	ldr	r2, [r7, #20]
 8009fdc:	621a      	str	r2, [r3, #32]
}
 8009fde:	bf00      	nop
 8009fe0:	371c      	adds	r7, #28
 8009fe2:	46bd      	mov	sp, r7
 8009fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fe8:	4770      	bx	lr
 8009fea:	bf00      	nop
 8009fec:	40012c00 	.word	0x40012c00
 8009ff0:	40013400 	.word	0x40013400
 8009ff4:	40014000 	.word	0x40014000
 8009ff8:	40014400 	.word	0x40014400
 8009ffc:	40014800 	.word	0x40014800

0800a000 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800a000:	b480      	push	{r7}
 800a002:	b087      	sub	sp, #28
 800a004:	af00      	add	r7, sp, #0
 800a006:	6078      	str	r0, [r7, #4]
 800a008:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800a00a:	687b      	ldr	r3, [r7, #4]
 800a00c:	6a1b      	ldr	r3, [r3, #32]
 800a00e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800a012:	687b      	ldr	r3, [r7, #4]
 800a014:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a016:	687b      	ldr	r3, [r7, #4]
 800a018:	6a1b      	ldr	r3, [r3, #32]
 800a01a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a01c:	687b      	ldr	r3, [r7, #4]
 800a01e:	685b      	ldr	r3, [r3, #4]
 800a020:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800a022:	687b      	ldr	r3, [r7, #4]
 800a024:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a026:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800a028:	68fb      	ldr	r3, [r7, #12]
 800a02a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a02e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a032:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a034:	683b      	ldr	r3, [r7, #0]
 800a036:	681b      	ldr	r3, [r3, #0]
 800a038:	68fa      	ldr	r2, [r7, #12]
 800a03a:	4313      	orrs	r3, r2
 800a03c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800a03e:	693b      	ldr	r3, [r7, #16]
 800a040:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800a044:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800a046:	683b      	ldr	r3, [r7, #0]
 800a048:	689b      	ldr	r3, [r3, #8]
 800a04a:	041b      	lsls	r3, r3, #16
 800a04c:	693a      	ldr	r2, [r7, #16]
 800a04e:	4313      	orrs	r3, r2
 800a050:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a052:	687b      	ldr	r3, [r7, #4]
 800a054:	4a17      	ldr	r2, [pc, #92]	; (800a0b4 <TIM_OC5_SetConfig+0xb4>)
 800a056:	4293      	cmp	r3, r2
 800a058:	d00f      	beq.n	800a07a <TIM_OC5_SetConfig+0x7a>
 800a05a:	687b      	ldr	r3, [r7, #4]
 800a05c:	4a16      	ldr	r2, [pc, #88]	; (800a0b8 <TIM_OC5_SetConfig+0xb8>)
 800a05e:	4293      	cmp	r3, r2
 800a060:	d00b      	beq.n	800a07a <TIM_OC5_SetConfig+0x7a>
 800a062:	687b      	ldr	r3, [r7, #4]
 800a064:	4a15      	ldr	r2, [pc, #84]	; (800a0bc <TIM_OC5_SetConfig+0xbc>)
 800a066:	4293      	cmp	r3, r2
 800a068:	d007      	beq.n	800a07a <TIM_OC5_SetConfig+0x7a>
 800a06a:	687b      	ldr	r3, [r7, #4]
 800a06c:	4a14      	ldr	r2, [pc, #80]	; (800a0c0 <TIM_OC5_SetConfig+0xc0>)
 800a06e:	4293      	cmp	r3, r2
 800a070:	d003      	beq.n	800a07a <TIM_OC5_SetConfig+0x7a>
 800a072:	687b      	ldr	r3, [r7, #4]
 800a074:	4a13      	ldr	r2, [pc, #76]	; (800a0c4 <TIM_OC5_SetConfig+0xc4>)
 800a076:	4293      	cmp	r3, r2
 800a078:	d109      	bne.n	800a08e <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800a07a:	697b      	ldr	r3, [r7, #20]
 800a07c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a080:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800a082:	683b      	ldr	r3, [r7, #0]
 800a084:	695b      	ldr	r3, [r3, #20]
 800a086:	021b      	lsls	r3, r3, #8
 800a088:	697a      	ldr	r2, [r7, #20]
 800a08a:	4313      	orrs	r3, r2
 800a08c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a08e:	687b      	ldr	r3, [r7, #4]
 800a090:	697a      	ldr	r2, [r7, #20]
 800a092:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800a094:	687b      	ldr	r3, [r7, #4]
 800a096:	68fa      	ldr	r2, [r7, #12]
 800a098:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800a09a:	683b      	ldr	r3, [r7, #0]
 800a09c:	685a      	ldr	r2, [r3, #4]
 800a09e:	687b      	ldr	r3, [r7, #4]
 800a0a0:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a0a2:	687b      	ldr	r3, [r7, #4]
 800a0a4:	693a      	ldr	r2, [r7, #16]
 800a0a6:	621a      	str	r2, [r3, #32]
}
 800a0a8:	bf00      	nop
 800a0aa:	371c      	adds	r7, #28
 800a0ac:	46bd      	mov	sp, r7
 800a0ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0b2:	4770      	bx	lr
 800a0b4:	40012c00 	.word	0x40012c00
 800a0b8:	40013400 	.word	0x40013400
 800a0bc:	40014000 	.word	0x40014000
 800a0c0:	40014400 	.word	0x40014400
 800a0c4:	40014800 	.word	0x40014800

0800a0c8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800a0c8:	b480      	push	{r7}
 800a0ca:	b087      	sub	sp, #28
 800a0cc:	af00      	add	r7, sp, #0
 800a0ce:	6078      	str	r0, [r7, #4]
 800a0d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800a0d2:	687b      	ldr	r3, [r7, #4]
 800a0d4:	6a1b      	ldr	r3, [r3, #32]
 800a0d6:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800a0da:	687b      	ldr	r3, [r7, #4]
 800a0dc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a0de:	687b      	ldr	r3, [r7, #4]
 800a0e0:	6a1b      	ldr	r3, [r3, #32]
 800a0e2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a0e4:	687b      	ldr	r3, [r7, #4]
 800a0e6:	685b      	ldr	r3, [r3, #4]
 800a0e8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800a0ea:	687b      	ldr	r3, [r7, #4]
 800a0ec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a0ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800a0f0:	68fb      	ldr	r3, [r7, #12]
 800a0f2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800a0f6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a0fa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a0fc:	683b      	ldr	r3, [r7, #0]
 800a0fe:	681b      	ldr	r3, [r3, #0]
 800a100:	021b      	lsls	r3, r3, #8
 800a102:	68fa      	ldr	r2, [r7, #12]
 800a104:	4313      	orrs	r3, r2
 800a106:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800a108:	693b      	ldr	r3, [r7, #16]
 800a10a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800a10e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800a110:	683b      	ldr	r3, [r7, #0]
 800a112:	689b      	ldr	r3, [r3, #8]
 800a114:	051b      	lsls	r3, r3, #20
 800a116:	693a      	ldr	r2, [r7, #16]
 800a118:	4313      	orrs	r3, r2
 800a11a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a11c:	687b      	ldr	r3, [r7, #4]
 800a11e:	4a18      	ldr	r2, [pc, #96]	; (800a180 <TIM_OC6_SetConfig+0xb8>)
 800a120:	4293      	cmp	r3, r2
 800a122:	d00f      	beq.n	800a144 <TIM_OC6_SetConfig+0x7c>
 800a124:	687b      	ldr	r3, [r7, #4]
 800a126:	4a17      	ldr	r2, [pc, #92]	; (800a184 <TIM_OC6_SetConfig+0xbc>)
 800a128:	4293      	cmp	r3, r2
 800a12a:	d00b      	beq.n	800a144 <TIM_OC6_SetConfig+0x7c>
 800a12c:	687b      	ldr	r3, [r7, #4]
 800a12e:	4a16      	ldr	r2, [pc, #88]	; (800a188 <TIM_OC6_SetConfig+0xc0>)
 800a130:	4293      	cmp	r3, r2
 800a132:	d007      	beq.n	800a144 <TIM_OC6_SetConfig+0x7c>
 800a134:	687b      	ldr	r3, [r7, #4]
 800a136:	4a15      	ldr	r2, [pc, #84]	; (800a18c <TIM_OC6_SetConfig+0xc4>)
 800a138:	4293      	cmp	r3, r2
 800a13a:	d003      	beq.n	800a144 <TIM_OC6_SetConfig+0x7c>
 800a13c:	687b      	ldr	r3, [r7, #4]
 800a13e:	4a14      	ldr	r2, [pc, #80]	; (800a190 <TIM_OC6_SetConfig+0xc8>)
 800a140:	4293      	cmp	r3, r2
 800a142:	d109      	bne.n	800a158 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800a144:	697b      	ldr	r3, [r7, #20]
 800a146:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800a14a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800a14c:	683b      	ldr	r3, [r7, #0]
 800a14e:	695b      	ldr	r3, [r3, #20]
 800a150:	029b      	lsls	r3, r3, #10
 800a152:	697a      	ldr	r2, [r7, #20]
 800a154:	4313      	orrs	r3, r2
 800a156:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a158:	687b      	ldr	r3, [r7, #4]
 800a15a:	697a      	ldr	r2, [r7, #20]
 800a15c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800a15e:	687b      	ldr	r3, [r7, #4]
 800a160:	68fa      	ldr	r2, [r7, #12]
 800a162:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800a164:	683b      	ldr	r3, [r7, #0]
 800a166:	685a      	ldr	r2, [r3, #4]
 800a168:	687b      	ldr	r3, [r7, #4]
 800a16a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a16c:	687b      	ldr	r3, [r7, #4]
 800a16e:	693a      	ldr	r2, [r7, #16]
 800a170:	621a      	str	r2, [r3, #32]
}
 800a172:	bf00      	nop
 800a174:	371c      	adds	r7, #28
 800a176:	46bd      	mov	sp, r7
 800a178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a17c:	4770      	bx	lr
 800a17e:	bf00      	nop
 800a180:	40012c00 	.word	0x40012c00
 800a184:	40013400 	.word	0x40013400
 800a188:	40014000 	.word	0x40014000
 800a18c:	40014400 	.word	0x40014400
 800a190:	40014800 	.word	0x40014800

0800a194 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a194:	b480      	push	{r7}
 800a196:	b087      	sub	sp, #28
 800a198:	af00      	add	r7, sp, #0
 800a19a:	60f8      	str	r0, [r7, #12]
 800a19c:	60b9      	str	r1, [r7, #8]
 800a19e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800a1a0:	68fb      	ldr	r3, [r7, #12]
 800a1a2:	6a1b      	ldr	r3, [r3, #32]
 800a1a4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a1a6:	68fb      	ldr	r3, [r7, #12]
 800a1a8:	6a1b      	ldr	r3, [r3, #32]
 800a1aa:	f023 0201 	bic.w	r2, r3, #1
 800a1ae:	68fb      	ldr	r3, [r7, #12]
 800a1b0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a1b2:	68fb      	ldr	r3, [r7, #12]
 800a1b4:	699b      	ldr	r3, [r3, #24]
 800a1b6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800a1b8:	693b      	ldr	r3, [r7, #16]
 800a1ba:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800a1be:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800a1c0:	687b      	ldr	r3, [r7, #4]
 800a1c2:	011b      	lsls	r3, r3, #4
 800a1c4:	693a      	ldr	r2, [r7, #16]
 800a1c6:	4313      	orrs	r3, r2
 800a1c8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800a1ca:	697b      	ldr	r3, [r7, #20]
 800a1cc:	f023 030a 	bic.w	r3, r3, #10
 800a1d0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800a1d2:	697a      	ldr	r2, [r7, #20]
 800a1d4:	68bb      	ldr	r3, [r7, #8]
 800a1d6:	4313      	orrs	r3, r2
 800a1d8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800a1da:	68fb      	ldr	r3, [r7, #12]
 800a1dc:	693a      	ldr	r2, [r7, #16]
 800a1de:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a1e0:	68fb      	ldr	r3, [r7, #12]
 800a1e2:	697a      	ldr	r2, [r7, #20]
 800a1e4:	621a      	str	r2, [r3, #32]
}
 800a1e6:	bf00      	nop
 800a1e8:	371c      	adds	r7, #28
 800a1ea:	46bd      	mov	sp, r7
 800a1ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1f0:	4770      	bx	lr

0800a1f2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a1f2:	b480      	push	{r7}
 800a1f4:	b087      	sub	sp, #28
 800a1f6:	af00      	add	r7, sp, #0
 800a1f8:	60f8      	str	r0, [r7, #12]
 800a1fa:	60b9      	str	r1, [r7, #8]
 800a1fc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a1fe:	68fb      	ldr	r3, [r7, #12]
 800a200:	6a1b      	ldr	r3, [r3, #32]
 800a202:	f023 0210 	bic.w	r2, r3, #16
 800a206:	68fb      	ldr	r3, [r7, #12]
 800a208:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a20a:	68fb      	ldr	r3, [r7, #12]
 800a20c:	699b      	ldr	r3, [r3, #24]
 800a20e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800a210:	68fb      	ldr	r3, [r7, #12]
 800a212:	6a1b      	ldr	r3, [r3, #32]
 800a214:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800a216:	697b      	ldr	r3, [r7, #20]
 800a218:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800a21c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800a21e:	687b      	ldr	r3, [r7, #4]
 800a220:	031b      	lsls	r3, r3, #12
 800a222:	697a      	ldr	r2, [r7, #20]
 800a224:	4313      	orrs	r3, r2
 800a226:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800a228:	693b      	ldr	r3, [r7, #16]
 800a22a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800a22e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800a230:	68bb      	ldr	r3, [r7, #8]
 800a232:	011b      	lsls	r3, r3, #4
 800a234:	693a      	ldr	r2, [r7, #16]
 800a236:	4313      	orrs	r3, r2
 800a238:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800a23a:	68fb      	ldr	r3, [r7, #12]
 800a23c:	697a      	ldr	r2, [r7, #20]
 800a23e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a240:	68fb      	ldr	r3, [r7, #12]
 800a242:	693a      	ldr	r2, [r7, #16]
 800a244:	621a      	str	r2, [r3, #32]
}
 800a246:	bf00      	nop
 800a248:	371c      	adds	r7, #28
 800a24a:	46bd      	mov	sp, r7
 800a24c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a250:	4770      	bx	lr

0800a252 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800a252:	b480      	push	{r7}
 800a254:	b085      	sub	sp, #20
 800a256:	af00      	add	r7, sp, #0
 800a258:	6078      	str	r0, [r7, #4]
 800a25a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800a25c:	687b      	ldr	r3, [r7, #4]
 800a25e:	689b      	ldr	r3, [r3, #8]
 800a260:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800a262:	68fb      	ldr	r3, [r7, #12]
 800a264:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 800a268:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a26c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800a26e:	683a      	ldr	r2, [r7, #0]
 800a270:	68fb      	ldr	r3, [r7, #12]
 800a272:	4313      	orrs	r3, r2
 800a274:	f043 0307 	orr.w	r3, r3, #7
 800a278:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a27a:	687b      	ldr	r3, [r7, #4]
 800a27c:	68fa      	ldr	r2, [r7, #12]
 800a27e:	609a      	str	r2, [r3, #8]
}
 800a280:	bf00      	nop
 800a282:	3714      	adds	r7, #20
 800a284:	46bd      	mov	sp, r7
 800a286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a28a:	4770      	bx	lr

0800a28c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800a28c:	b480      	push	{r7}
 800a28e:	b087      	sub	sp, #28
 800a290:	af00      	add	r7, sp, #0
 800a292:	60f8      	str	r0, [r7, #12]
 800a294:	60b9      	str	r1, [r7, #8]
 800a296:	607a      	str	r2, [r7, #4]
 800a298:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800a29a:	68fb      	ldr	r3, [r7, #12]
 800a29c:	689b      	ldr	r3, [r3, #8]
 800a29e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a2a0:	697b      	ldr	r3, [r7, #20]
 800a2a2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800a2a6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800a2a8:	683b      	ldr	r3, [r7, #0]
 800a2aa:	021a      	lsls	r2, r3, #8
 800a2ac:	687b      	ldr	r3, [r7, #4]
 800a2ae:	431a      	orrs	r2, r3
 800a2b0:	68bb      	ldr	r3, [r7, #8]
 800a2b2:	4313      	orrs	r3, r2
 800a2b4:	697a      	ldr	r2, [r7, #20]
 800a2b6:	4313      	orrs	r3, r2
 800a2b8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a2ba:	68fb      	ldr	r3, [r7, #12]
 800a2bc:	697a      	ldr	r2, [r7, #20]
 800a2be:	609a      	str	r2, [r3, #8]
}
 800a2c0:	bf00      	nop
 800a2c2:	371c      	adds	r7, #28
 800a2c4:	46bd      	mov	sp, r7
 800a2c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2ca:	4770      	bx	lr

0800a2cc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800a2cc:	b480      	push	{r7}
 800a2ce:	b087      	sub	sp, #28
 800a2d0:	af00      	add	r7, sp, #0
 800a2d2:	60f8      	str	r0, [r7, #12]
 800a2d4:	60b9      	str	r1, [r7, #8]
 800a2d6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800a2d8:	68bb      	ldr	r3, [r7, #8]
 800a2da:	f003 031f 	and.w	r3, r3, #31
 800a2de:	2201      	movs	r2, #1
 800a2e0:	fa02 f303 	lsl.w	r3, r2, r3
 800a2e4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800a2e6:	68fb      	ldr	r3, [r7, #12]
 800a2e8:	6a1a      	ldr	r2, [r3, #32]
 800a2ea:	697b      	ldr	r3, [r7, #20]
 800a2ec:	43db      	mvns	r3, r3
 800a2ee:	401a      	ands	r2, r3
 800a2f0:	68fb      	ldr	r3, [r7, #12]
 800a2f2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800a2f4:	68fb      	ldr	r3, [r7, #12]
 800a2f6:	6a1a      	ldr	r2, [r3, #32]
 800a2f8:	68bb      	ldr	r3, [r7, #8]
 800a2fa:	f003 031f 	and.w	r3, r3, #31
 800a2fe:	6879      	ldr	r1, [r7, #4]
 800a300:	fa01 f303 	lsl.w	r3, r1, r3
 800a304:	431a      	orrs	r2, r3
 800a306:	68fb      	ldr	r3, [r7, #12]
 800a308:	621a      	str	r2, [r3, #32]
}
 800a30a:	bf00      	nop
 800a30c:	371c      	adds	r7, #28
 800a30e:	46bd      	mov	sp, r7
 800a310:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a314:	4770      	bx	lr
	...

0800a318 <HAL_TIMEx_PWMN_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800a318:	b580      	push	{r7, lr}
 800a31a:	b084      	sub	sp, #16
 800a31c:	af00      	add	r7, sp, #0
 800a31e:	6078      	str	r0, [r7, #4]
 800a320:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800a322:	2300      	movs	r3, #0
 800a324:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800a326:	683b      	ldr	r3, [r7, #0]
 800a328:	2b00      	cmp	r3, #0
 800a32a:	d109      	bne.n	800a340 <HAL_TIMEx_PWMN_Start_IT+0x28>
 800a32c:	687b      	ldr	r3, [r7, #4]
 800a32e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a332:	b2db      	uxtb	r3, r3
 800a334:	2b01      	cmp	r3, #1
 800a336:	bf14      	ite	ne
 800a338:	2301      	movne	r3, #1
 800a33a:	2300      	moveq	r3, #0
 800a33c:	b2db      	uxtb	r3, r3
 800a33e:	e022      	b.n	800a386 <HAL_TIMEx_PWMN_Start_IT+0x6e>
 800a340:	683b      	ldr	r3, [r7, #0]
 800a342:	2b04      	cmp	r3, #4
 800a344:	d109      	bne.n	800a35a <HAL_TIMEx_PWMN_Start_IT+0x42>
 800a346:	687b      	ldr	r3, [r7, #4]
 800a348:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a34c:	b2db      	uxtb	r3, r3
 800a34e:	2b01      	cmp	r3, #1
 800a350:	bf14      	ite	ne
 800a352:	2301      	movne	r3, #1
 800a354:	2300      	moveq	r3, #0
 800a356:	b2db      	uxtb	r3, r3
 800a358:	e015      	b.n	800a386 <HAL_TIMEx_PWMN_Start_IT+0x6e>
 800a35a:	683b      	ldr	r3, [r7, #0]
 800a35c:	2b08      	cmp	r3, #8
 800a35e:	d109      	bne.n	800a374 <HAL_TIMEx_PWMN_Start_IT+0x5c>
 800a360:	687b      	ldr	r3, [r7, #4]
 800a362:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800a366:	b2db      	uxtb	r3, r3
 800a368:	2b01      	cmp	r3, #1
 800a36a:	bf14      	ite	ne
 800a36c:	2301      	movne	r3, #1
 800a36e:	2300      	moveq	r3, #0
 800a370:	b2db      	uxtb	r3, r3
 800a372:	e008      	b.n	800a386 <HAL_TIMEx_PWMN_Start_IT+0x6e>
 800a374:	687b      	ldr	r3, [r7, #4]
 800a376:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 800a37a:	b2db      	uxtb	r3, r3
 800a37c:	2b01      	cmp	r3, #1
 800a37e:	bf14      	ite	ne
 800a380:	2301      	movne	r3, #1
 800a382:	2300      	moveq	r3, #0
 800a384:	b2db      	uxtb	r3, r3
 800a386:	2b00      	cmp	r3, #0
 800a388:	d001      	beq.n	800a38e <HAL_TIMEx_PWMN_Start_IT+0x76>
  {
    return HAL_ERROR;
 800a38a:	2301      	movs	r3, #1
 800a38c:	e0bc      	b.n	800a508 <HAL_TIMEx_PWMN_Start_IT+0x1f0>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800a38e:	683b      	ldr	r3, [r7, #0]
 800a390:	2b00      	cmp	r3, #0
 800a392:	d104      	bne.n	800a39e <HAL_TIMEx_PWMN_Start_IT+0x86>
 800a394:	687b      	ldr	r3, [r7, #4]
 800a396:	2202      	movs	r2, #2
 800a398:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a39c:	e013      	b.n	800a3c6 <HAL_TIMEx_PWMN_Start_IT+0xae>
 800a39e:	683b      	ldr	r3, [r7, #0]
 800a3a0:	2b04      	cmp	r3, #4
 800a3a2:	d104      	bne.n	800a3ae <HAL_TIMEx_PWMN_Start_IT+0x96>
 800a3a4:	687b      	ldr	r3, [r7, #4]
 800a3a6:	2202      	movs	r2, #2
 800a3a8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a3ac:	e00b      	b.n	800a3c6 <HAL_TIMEx_PWMN_Start_IT+0xae>
 800a3ae:	683b      	ldr	r3, [r7, #0]
 800a3b0:	2b08      	cmp	r3, #8
 800a3b2:	d104      	bne.n	800a3be <HAL_TIMEx_PWMN_Start_IT+0xa6>
 800a3b4:	687b      	ldr	r3, [r7, #4]
 800a3b6:	2202      	movs	r2, #2
 800a3b8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800a3bc:	e003      	b.n	800a3c6 <HAL_TIMEx_PWMN_Start_IT+0xae>
 800a3be:	687b      	ldr	r3, [r7, #4]
 800a3c0:	2202      	movs	r2, #2
 800a3c2:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  switch (Channel)
 800a3c6:	683b      	ldr	r3, [r7, #0]
 800a3c8:	2b0c      	cmp	r3, #12
 800a3ca:	d841      	bhi.n	800a450 <HAL_TIMEx_PWMN_Start_IT+0x138>
 800a3cc:	a201      	add	r2, pc, #4	; (adr r2, 800a3d4 <HAL_TIMEx_PWMN_Start_IT+0xbc>)
 800a3ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a3d2:	bf00      	nop
 800a3d4:	0800a409 	.word	0x0800a409
 800a3d8:	0800a451 	.word	0x0800a451
 800a3dc:	0800a451 	.word	0x0800a451
 800a3e0:	0800a451 	.word	0x0800a451
 800a3e4:	0800a41b 	.word	0x0800a41b
 800a3e8:	0800a451 	.word	0x0800a451
 800a3ec:	0800a451 	.word	0x0800a451
 800a3f0:	0800a451 	.word	0x0800a451
 800a3f4:	0800a42d 	.word	0x0800a42d
 800a3f8:	0800a451 	.word	0x0800a451
 800a3fc:	0800a451 	.word	0x0800a451
 800a400:	0800a451 	.word	0x0800a451
 800a404:	0800a43f 	.word	0x0800a43f
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800a408:	687b      	ldr	r3, [r7, #4]
 800a40a:	681b      	ldr	r3, [r3, #0]
 800a40c:	68da      	ldr	r2, [r3, #12]
 800a40e:	687b      	ldr	r3, [r7, #4]
 800a410:	681b      	ldr	r3, [r3, #0]
 800a412:	f042 0202 	orr.w	r2, r2, #2
 800a416:	60da      	str	r2, [r3, #12]
      break;
 800a418:	e01d      	b.n	800a456 <HAL_TIMEx_PWMN_Start_IT+0x13e>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800a41a:	687b      	ldr	r3, [r7, #4]
 800a41c:	681b      	ldr	r3, [r3, #0]
 800a41e:	68da      	ldr	r2, [r3, #12]
 800a420:	687b      	ldr	r3, [r7, #4]
 800a422:	681b      	ldr	r3, [r3, #0]
 800a424:	f042 0204 	orr.w	r2, r2, #4
 800a428:	60da      	str	r2, [r3, #12]
      break;
 800a42a:	e014      	b.n	800a456 <HAL_TIMEx_PWMN_Start_IT+0x13e>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800a42c:	687b      	ldr	r3, [r7, #4]
 800a42e:	681b      	ldr	r3, [r3, #0]
 800a430:	68da      	ldr	r2, [r3, #12]
 800a432:	687b      	ldr	r3, [r7, #4]
 800a434:	681b      	ldr	r3, [r3, #0]
 800a436:	f042 0208 	orr.w	r2, r2, #8
 800a43a:	60da      	str	r2, [r3, #12]
      break;
 800a43c:	e00b      	b.n	800a456 <HAL_TIMEx_PWMN_Start_IT+0x13e>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800a43e:	687b      	ldr	r3, [r7, #4]
 800a440:	681b      	ldr	r3, [r3, #0]
 800a442:	68da      	ldr	r2, [r3, #12]
 800a444:	687b      	ldr	r3, [r7, #4]
 800a446:	681b      	ldr	r3, [r3, #0]
 800a448:	f042 0210 	orr.w	r2, r2, #16
 800a44c:	60da      	str	r2, [r3, #12]
      break;
 800a44e:	e002      	b.n	800a456 <HAL_TIMEx_PWMN_Start_IT+0x13e>
    }

    default:
      status = HAL_ERROR;
 800a450:	2301      	movs	r3, #1
 800a452:	73fb      	strb	r3, [r7, #15]
      break;
 800a454:	bf00      	nop
  }

  if (status == HAL_OK)
 800a456:	7bfb      	ldrb	r3, [r7, #15]
 800a458:	2b00      	cmp	r3, #0
 800a45a:	d154      	bne.n	800a506 <HAL_TIMEx_PWMN_Start_IT+0x1ee>
  {
    /* Enable the TIM Break interrupt */
    __HAL_TIM_ENABLE_IT(htim, TIM_IT_BREAK);
 800a45c:	687b      	ldr	r3, [r7, #4]
 800a45e:	681b      	ldr	r3, [r3, #0]
 800a460:	68da      	ldr	r2, [r3, #12]
 800a462:	687b      	ldr	r3, [r7, #4]
 800a464:	681b      	ldr	r3, [r3, #0]
 800a466:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800a46a:	60da      	str	r2, [r3, #12]

    /* Enable the complementary PWM output  */
    TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 800a46c:	687b      	ldr	r3, [r7, #4]
 800a46e:	681b      	ldr	r3, [r3, #0]
 800a470:	2204      	movs	r2, #4
 800a472:	6839      	ldr	r1, [r7, #0]
 800a474:	4618      	mov	r0, r3
 800a476:	f000 f9bf 	bl	800a7f8 <TIM_CCxNChannelCmd>

    /* Enable the Main Output */
    __HAL_TIM_MOE_ENABLE(htim);
 800a47a:	687b      	ldr	r3, [r7, #4]
 800a47c:	681b      	ldr	r3, [r3, #0]
 800a47e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a480:	687b      	ldr	r3, [r7, #4]
 800a482:	681b      	ldr	r3, [r3, #0]
 800a484:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800a488:	645a      	str	r2, [r3, #68]	; 0x44

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a48a:	687b      	ldr	r3, [r7, #4]
 800a48c:	681b      	ldr	r3, [r3, #0]
 800a48e:	4a20      	ldr	r2, [pc, #128]	; (800a510 <HAL_TIMEx_PWMN_Start_IT+0x1f8>)
 800a490:	4293      	cmp	r3, r2
 800a492:	d018      	beq.n	800a4c6 <HAL_TIMEx_PWMN_Start_IT+0x1ae>
 800a494:	687b      	ldr	r3, [r7, #4]
 800a496:	681b      	ldr	r3, [r3, #0]
 800a498:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a49c:	d013      	beq.n	800a4c6 <HAL_TIMEx_PWMN_Start_IT+0x1ae>
 800a49e:	687b      	ldr	r3, [r7, #4]
 800a4a0:	681b      	ldr	r3, [r3, #0]
 800a4a2:	4a1c      	ldr	r2, [pc, #112]	; (800a514 <HAL_TIMEx_PWMN_Start_IT+0x1fc>)
 800a4a4:	4293      	cmp	r3, r2
 800a4a6:	d00e      	beq.n	800a4c6 <HAL_TIMEx_PWMN_Start_IT+0x1ae>
 800a4a8:	687b      	ldr	r3, [r7, #4]
 800a4aa:	681b      	ldr	r3, [r3, #0]
 800a4ac:	4a1a      	ldr	r2, [pc, #104]	; (800a518 <HAL_TIMEx_PWMN_Start_IT+0x200>)
 800a4ae:	4293      	cmp	r3, r2
 800a4b0:	d009      	beq.n	800a4c6 <HAL_TIMEx_PWMN_Start_IT+0x1ae>
 800a4b2:	687b      	ldr	r3, [r7, #4]
 800a4b4:	681b      	ldr	r3, [r3, #0]
 800a4b6:	4a19      	ldr	r2, [pc, #100]	; (800a51c <HAL_TIMEx_PWMN_Start_IT+0x204>)
 800a4b8:	4293      	cmp	r3, r2
 800a4ba:	d004      	beq.n	800a4c6 <HAL_TIMEx_PWMN_Start_IT+0x1ae>
 800a4bc:	687b      	ldr	r3, [r7, #4]
 800a4be:	681b      	ldr	r3, [r3, #0]
 800a4c0:	4a17      	ldr	r2, [pc, #92]	; (800a520 <HAL_TIMEx_PWMN_Start_IT+0x208>)
 800a4c2:	4293      	cmp	r3, r2
 800a4c4:	d115      	bne.n	800a4f2 <HAL_TIMEx_PWMN_Start_IT+0x1da>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a4c6:	687b      	ldr	r3, [r7, #4]
 800a4c8:	681b      	ldr	r3, [r3, #0]
 800a4ca:	689a      	ldr	r2, [r3, #8]
 800a4cc:	4b15      	ldr	r3, [pc, #84]	; (800a524 <HAL_TIMEx_PWMN_Start_IT+0x20c>)
 800a4ce:	4013      	ands	r3, r2
 800a4d0:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a4d2:	68bb      	ldr	r3, [r7, #8]
 800a4d4:	2b06      	cmp	r3, #6
 800a4d6:	d015      	beq.n	800a504 <HAL_TIMEx_PWMN_Start_IT+0x1ec>
 800a4d8:	68bb      	ldr	r3, [r7, #8]
 800a4da:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a4de:	d011      	beq.n	800a504 <HAL_TIMEx_PWMN_Start_IT+0x1ec>
      {
        __HAL_TIM_ENABLE(htim);
 800a4e0:	687b      	ldr	r3, [r7, #4]
 800a4e2:	681b      	ldr	r3, [r3, #0]
 800a4e4:	681a      	ldr	r2, [r3, #0]
 800a4e6:	687b      	ldr	r3, [r7, #4]
 800a4e8:	681b      	ldr	r3, [r3, #0]
 800a4ea:	f042 0201 	orr.w	r2, r2, #1
 800a4ee:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a4f0:	e008      	b.n	800a504 <HAL_TIMEx_PWMN_Start_IT+0x1ec>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800a4f2:	687b      	ldr	r3, [r7, #4]
 800a4f4:	681b      	ldr	r3, [r3, #0]
 800a4f6:	681a      	ldr	r2, [r3, #0]
 800a4f8:	687b      	ldr	r3, [r7, #4]
 800a4fa:	681b      	ldr	r3, [r3, #0]
 800a4fc:	f042 0201 	orr.w	r2, r2, #1
 800a500:	601a      	str	r2, [r3, #0]
 800a502:	e000      	b.n	800a506 <HAL_TIMEx_PWMN_Start_IT+0x1ee>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a504:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 800a506:	7bfb      	ldrb	r3, [r7, #15]
}
 800a508:	4618      	mov	r0, r3
 800a50a:	3710      	adds	r7, #16
 800a50c:	46bd      	mov	sp, r7
 800a50e:	bd80      	pop	{r7, pc}
 800a510:	40012c00 	.word	0x40012c00
 800a514:	40000400 	.word	0x40000400
 800a518:	40000800 	.word	0x40000800
 800a51c:	40013400 	.word	0x40013400
 800a520:	40014000 	.word	0x40014000
 800a524:	00010007 	.word	0x00010007

0800a528 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800a528:	b480      	push	{r7}
 800a52a:	b085      	sub	sp, #20
 800a52c:	af00      	add	r7, sp, #0
 800a52e:	6078      	str	r0, [r7, #4]
 800a530:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800a532:	687b      	ldr	r3, [r7, #4]
 800a534:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a538:	2b01      	cmp	r3, #1
 800a53a:	d101      	bne.n	800a540 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800a53c:	2302      	movs	r3, #2
 800a53e:	e065      	b.n	800a60c <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 800a540:	687b      	ldr	r3, [r7, #4]
 800a542:	2201      	movs	r2, #1
 800a544:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a548:	687b      	ldr	r3, [r7, #4]
 800a54a:	2202      	movs	r2, #2
 800a54c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800a550:	687b      	ldr	r3, [r7, #4]
 800a552:	681b      	ldr	r3, [r3, #0]
 800a554:	685b      	ldr	r3, [r3, #4]
 800a556:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a558:	687b      	ldr	r3, [r7, #4]
 800a55a:	681b      	ldr	r3, [r3, #0]
 800a55c:	689b      	ldr	r3, [r3, #8]
 800a55e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800a560:	687b      	ldr	r3, [r7, #4]
 800a562:	681b      	ldr	r3, [r3, #0]
 800a564:	4a2c      	ldr	r2, [pc, #176]	; (800a618 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800a566:	4293      	cmp	r3, r2
 800a568:	d004      	beq.n	800a574 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800a56a:	687b      	ldr	r3, [r7, #4]
 800a56c:	681b      	ldr	r3, [r3, #0]
 800a56e:	4a2b      	ldr	r2, [pc, #172]	; (800a61c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800a570:	4293      	cmp	r3, r2
 800a572:	d108      	bne.n	800a586 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800a574:	68fb      	ldr	r3, [r7, #12]
 800a576:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800a57a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800a57c:	683b      	ldr	r3, [r7, #0]
 800a57e:	685b      	ldr	r3, [r3, #4]
 800a580:	68fa      	ldr	r2, [r7, #12]
 800a582:	4313      	orrs	r3, r2
 800a584:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800a586:	68fb      	ldr	r3, [r7, #12]
 800a588:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 800a58c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a590:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800a592:	683b      	ldr	r3, [r7, #0]
 800a594:	681b      	ldr	r3, [r3, #0]
 800a596:	68fa      	ldr	r2, [r7, #12]
 800a598:	4313      	orrs	r3, r2
 800a59a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800a59c:	687b      	ldr	r3, [r7, #4]
 800a59e:	681b      	ldr	r3, [r3, #0]
 800a5a0:	68fa      	ldr	r2, [r7, #12]
 800a5a2:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a5a4:	687b      	ldr	r3, [r7, #4]
 800a5a6:	681b      	ldr	r3, [r3, #0]
 800a5a8:	4a1b      	ldr	r2, [pc, #108]	; (800a618 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800a5aa:	4293      	cmp	r3, r2
 800a5ac:	d018      	beq.n	800a5e0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800a5ae:	687b      	ldr	r3, [r7, #4]
 800a5b0:	681b      	ldr	r3, [r3, #0]
 800a5b2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a5b6:	d013      	beq.n	800a5e0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800a5b8:	687b      	ldr	r3, [r7, #4]
 800a5ba:	681b      	ldr	r3, [r3, #0]
 800a5bc:	4a18      	ldr	r2, [pc, #96]	; (800a620 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800a5be:	4293      	cmp	r3, r2
 800a5c0:	d00e      	beq.n	800a5e0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800a5c2:	687b      	ldr	r3, [r7, #4]
 800a5c4:	681b      	ldr	r3, [r3, #0]
 800a5c6:	4a17      	ldr	r2, [pc, #92]	; (800a624 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800a5c8:	4293      	cmp	r3, r2
 800a5ca:	d009      	beq.n	800a5e0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800a5cc:	687b      	ldr	r3, [r7, #4]
 800a5ce:	681b      	ldr	r3, [r3, #0]
 800a5d0:	4a12      	ldr	r2, [pc, #72]	; (800a61c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800a5d2:	4293      	cmp	r3, r2
 800a5d4:	d004      	beq.n	800a5e0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800a5d6:	687b      	ldr	r3, [r7, #4]
 800a5d8:	681b      	ldr	r3, [r3, #0]
 800a5da:	4a13      	ldr	r2, [pc, #76]	; (800a628 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800a5dc:	4293      	cmp	r3, r2
 800a5de:	d10c      	bne.n	800a5fa <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800a5e0:	68bb      	ldr	r3, [r7, #8]
 800a5e2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a5e6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800a5e8:	683b      	ldr	r3, [r7, #0]
 800a5ea:	689b      	ldr	r3, [r3, #8]
 800a5ec:	68ba      	ldr	r2, [r7, #8]
 800a5ee:	4313      	orrs	r3, r2
 800a5f0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800a5f2:	687b      	ldr	r3, [r7, #4]
 800a5f4:	681b      	ldr	r3, [r3, #0]
 800a5f6:	68ba      	ldr	r2, [r7, #8]
 800a5f8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800a5fa:	687b      	ldr	r3, [r7, #4]
 800a5fc:	2201      	movs	r2, #1
 800a5fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a602:	687b      	ldr	r3, [r7, #4]
 800a604:	2200      	movs	r2, #0
 800a606:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a60a:	2300      	movs	r3, #0
}
 800a60c:	4618      	mov	r0, r3
 800a60e:	3714      	adds	r7, #20
 800a610:	46bd      	mov	sp, r7
 800a612:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a616:	4770      	bx	lr
 800a618:	40012c00 	.word	0x40012c00
 800a61c:	40013400 	.word	0x40013400
 800a620:	40000400 	.word	0x40000400
 800a624:	40000800 	.word	0x40000800
 800a628:	40014000 	.word	0x40014000

0800a62c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800a62c:	b480      	push	{r7}
 800a62e:	b085      	sub	sp, #20
 800a630:	af00      	add	r7, sp, #0
 800a632:	6078      	str	r0, [r7, #4]
 800a634:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800a636:	2300      	movs	r3, #0
 800a638:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800a63a:	687b      	ldr	r3, [r7, #4]
 800a63c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a640:	2b01      	cmp	r3, #1
 800a642:	d101      	bne.n	800a648 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800a644:	2302      	movs	r3, #2
 800a646:	e087      	b.n	800a758 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>
 800a648:	687b      	ldr	r3, [r7, #4]
 800a64a:	2201      	movs	r2, #1
 800a64c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800a650:	68fb      	ldr	r3, [r7, #12]
 800a652:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800a656:	683b      	ldr	r3, [r7, #0]
 800a658:	68db      	ldr	r3, [r3, #12]
 800a65a:	4313      	orrs	r3, r2
 800a65c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800a65e:	68fb      	ldr	r3, [r7, #12]
 800a660:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800a664:	683b      	ldr	r3, [r7, #0]
 800a666:	689b      	ldr	r3, [r3, #8]
 800a668:	4313      	orrs	r3, r2
 800a66a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800a66c:	68fb      	ldr	r3, [r7, #12]
 800a66e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800a672:	683b      	ldr	r3, [r7, #0]
 800a674:	685b      	ldr	r3, [r3, #4]
 800a676:	4313      	orrs	r3, r2
 800a678:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800a67a:	68fb      	ldr	r3, [r7, #12]
 800a67c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800a680:	683b      	ldr	r3, [r7, #0]
 800a682:	681b      	ldr	r3, [r3, #0]
 800a684:	4313      	orrs	r3, r2
 800a686:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800a688:	68fb      	ldr	r3, [r7, #12]
 800a68a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800a68e:	683b      	ldr	r3, [r7, #0]
 800a690:	691b      	ldr	r3, [r3, #16]
 800a692:	4313      	orrs	r3, r2
 800a694:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800a696:	68fb      	ldr	r3, [r7, #12]
 800a698:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800a69c:	683b      	ldr	r3, [r7, #0]
 800a69e:	695b      	ldr	r3, [r3, #20]
 800a6a0:	4313      	orrs	r3, r2
 800a6a2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800a6a4:	68fb      	ldr	r3, [r7, #12]
 800a6a6:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800a6aa:	683b      	ldr	r3, [r7, #0]
 800a6ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a6ae:	4313      	orrs	r3, r2
 800a6b0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800a6b2:	68fb      	ldr	r3, [r7, #12]
 800a6b4:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800a6b8:	683b      	ldr	r3, [r7, #0]
 800a6ba:	699b      	ldr	r3, [r3, #24]
 800a6bc:	041b      	lsls	r3, r3, #16
 800a6be:	4313      	orrs	r3, r2
 800a6c0:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800a6c2:	687b      	ldr	r3, [r7, #4]
 800a6c4:	681b      	ldr	r3, [r3, #0]
 800a6c6:	4a27      	ldr	r2, [pc, #156]	; (800a764 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 800a6c8:	4293      	cmp	r3, r2
 800a6ca:	d004      	beq.n	800a6d6 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800a6cc:	687b      	ldr	r3, [r7, #4]
 800a6ce:	681b      	ldr	r3, [r3, #0]
 800a6d0:	4a25      	ldr	r2, [pc, #148]	; (800a768 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 800a6d2:	4293      	cmp	r3, r2
 800a6d4:	d106      	bne.n	800a6e4 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800a6d6:	68fb      	ldr	r3, [r7, #12]
 800a6d8:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800a6dc:	683b      	ldr	r3, [r7, #0]
 800a6de:	69db      	ldr	r3, [r3, #28]
 800a6e0:	4313      	orrs	r3, r2
 800a6e2:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800a6e4:	687b      	ldr	r3, [r7, #4]
 800a6e6:	681b      	ldr	r3, [r3, #0]
 800a6e8:	4a1e      	ldr	r2, [pc, #120]	; (800a764 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 800a6ea:	4293      	cmp	r3, r2
 800a6ec:	d004      	beq.n	800a6f8 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
 800a6ee:	687b      	ldr	r3, [r7, #4]
 800a6f0:	681b      	ldr	r3, [r3, #0]
 800a6f2:	4a1d      	ldr	r2, [pc, #116]	; (800a768 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 800a6f4:	4293      	cmp	r3, r2
 800a6f6:	d126      	bne.n	800a746 <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800a6f8:	68fb      	ldr	r3, [r7, #12]
 800a6fa:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800a6fe:	683b      	ldr	r3, [r7, #0]
 800a700:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a702:	051b      	lsls	r3, r3, #20
 800a704:	4313      	orrs	r3, r2
 800a706:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800a708:	68fb      	ldr	r3, [r7, #12]
 800a70a:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800a70e:	683b      	ldr	r3, [r7, #0]
 800a710:	6a1b      	ldr	r3, [r3, #32]
 800a712:	4313      	orrs	r3, r2
 800a714:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800a716:	68fb      	ldr	r3, [r7, #12]
 800a718:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800a71c:	683b      	ldr	r3, [r7, #0]
 800a71e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a720:	4313      	orrs	r3, r2
 800a722:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800a724:	687b      	ldr	r3, [r7, #4]
 800a726:	681b      	ldr	r3, [r3, #0]
 800a728:	4a0e      	ldr	r2, [pc, #56]	; (800a764 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 800a72a:	4293      	cmp	r3, r2
 800a72c:	d004      	beq.n	800a738 <HAL_TIMEx_ConfigBreakDeadTime+0x10c>
 800a72e:	687b      	ldr	r3, [r7, #4]
 800a730:	681b      	ldr	r3, [r3, #0]
 800a732:	4a0d      	ldr	r2, [pc, #52]	; (800a768 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 800a734:	4293      	cmp	r3, r2
 800a736:	d106      	bne.n	800a746 <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800a738:	68fb      	ldr	r3, [r7, #12]
 800a73a:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800a73e:	683b      	ldr	r3, [r7, #0]
 800a740:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a742:	4313      	orrs	r3, r2
 800a744:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800a746:	687b      	ldr	r3, [r7, #4]
 800a748:	681b      	ldr	r3, [r3, #0]
 800a74a:	68fa      	ldr	r2, [r7, #12]
 800a74c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800a74e:	687b      	ldr	r3, [r7, #4]
 800a750:	2200      	movs	r2, #0
 800a752:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a756:	2300      	movs	r3, #0
}
 800a758:	4618      	mov	r0, r3
 800a75a:	3714      	adds	r7, #20
 800a75c:	46bd      	mov	sp, r7
 800a75e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a762:	4770      	bx	lr
 800a764:	40012c00 	.word	0x40012c00
 800a768:	40013400 	.word	0x40013400

0800a76c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800a76c:	b480      	push	{r7}
 800a76e:	b083      	sub	sp, #12
 800a770:	af00      	add	r7, sp, #0
 800a772:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800a774:	bf00      	nop
 800a776:	370c      	adds	r7, #12
 800a778:	46bd      	mov	sp, r7
 800a77a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a77e:	4770      	bx	lr

0800a780 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800a780:	b480      	push	{r7}
 800a782:	b083      	sub	sp, #12
 800a784:	af00      	add	r7, sp, #0
 800a786:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800a788:	bf00      	nop
 800a78a:	370c      	adds	r7, #12
 800a78c:	46bd      	mov	sp, r7
 800a78e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a792:	4770      	bx	lr

0800a794 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800a794:	b480      	push	{r7}
 800a796:	b083      	sub	sp, #12
 800a798:	af00      	add	r7, sp, #0
 800a79a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800a79c:	bf00      	nop
 800a79e:	370c      	adds	r7, #12
 800a7a0:	46bd      	mov	sp, r7
 800a7a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7a6:	4770      	bx	lr

0800a7a8 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 800a7a8:	b480      	push	{r7}
 800a7aa:	b083      	sub	sp, #12
 800a7ac:	af00      	add	r7, sp, #0
 800a7ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 800a7b0:	bf00      	nop
 800a7b2:	370c      	adds	r7, #12
 800a7b4:	46bd      	mov	sp, r7
 800a7b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7ba:	4770      	bx	lr

0800a7bc <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 800a7bc:	b480      	push	{r7}
 800a7be:	b083      	sub	sp, #12
 800a7c0:	af00      	add	r7, sp, #0
 800a7c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 800a7c4:	bf00      	nop
 800a7c6:	370c      	adds	r7, #12
 800a7c8:	46bd      	mov	sp, r7
 800a7ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7ce:	4770      	bx	lr

0800a7d0 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 800a7d0:	b480      	push	{r7}
 800a7d2:	b083      	sub	sp, #12
 800a7d4:	af00      	add	r7, sp, #0
 800a7d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 800a7d8:	bf00      	nop
 800a7da:	370c      	adds	r7, #12
 800a7dc:	46bd      	mov	sp, r7
 800a7de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7e2:	4770      	bx	lr

0800a7e4 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 800a7e4:	b480      	push	{r7}
 800a7e6:	b083      	sub	sp, #12
 800a7e8:	af00      	add	r7, sp, #0
 800a7ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 800a7ec:	bf00      	nop
 800a7ee:	370c      	adds	r7, #12
 800a7f0:	46bd      	mov	sp, r7
 800a7f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7f6:	4770      	bx	lr

0800a7f8 <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 800a7f8:	b480      	push	{r7}
 800a7fa:	b087      	sub	sp, #28
 800a7fc:	af00      	add	r7, sp, #0
 800a7fe:	60f8      	str	r0, [r7, #12]
 800a800:	60b9      	str	r1, [r7, #8]
 800a802:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800a804:	68bb      	ldr	r3, [r7, #8]
 800a806:	f003 031f 	and.w	r3, r3, #31
 800a80a:	2204      	movs	r2, #4
 800a80c:	fa02 f303 	lsl.w	r3, r2, r3
 800a810:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 800a812:	68fb      	ldr	r3, [r7, #12]
 800a814:	6a1a      	ldr	r2, [r3, #32]
 800a816:	697b      	ldr	r3, [r7, #20]
 800a818:	43db      	mvns	r3, r3
 800a81a:	401a      	ands	r2, r3
 800a81c:	68fb      	ldr	r3, [r7, #12]
 800a81e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800a820:	68fb      	ldr	r3, [r7, #12]
 800a822:	6a1a      	ldr	r2, [r3, #32]
 800a824:	68bb      	ldr	r3, [r7, #8]
 800a826:	f003 031f 	and.w	r3, r3, #31
 800a82a:	6879      	ldr	r1, [r7, #4]
 800a82c:	fa01 f303 	lsl.w	r3, r1, r3
 800a830:	431a      	orrs	r2, r3
 800a832:	68fb      	ldr	r3, [r7, #12]
 800a834:	621a      	str	r2, [r3, #32]
}
 800a836:	bf00      	nop
 800a838:	371c      	adds	r7, #28
 800a83a:	46bd      	mov	sp, r7
 800a83c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a840:	4770      	bx	lr

0800a842 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a842:	b580      	push	{r7, lr}
 800a844:	b082      	sub	sp, #8
 800a846:	af00      	add	r7, sp, #0
 800a848:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a84a:	687b      	ldr	r3, [r7, #4]
 800a84c:	2b00      	cmp	r3, #0
 800a84e:	d101      	bne.n	800a854 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a850:	2301      	movs	r3, #1
 800a852:	e042      	b.n	800a8da <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800a854:	687b      	ldr	r3, [r7, #4]
 800a856:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a85a:	2b00      	cmp	r3, #0
 800a85c:	d106      	bne.n	800a86c <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a85e:	687b      	ldr	r3, [r7, #4]
 800a860:	2200      	movs	r2, #0
 800a862:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800a866:	6878      	ldr	r0, [r7, #4]
 800a868:	f7f8 fd3c 	bl	80032e4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a86c:	687b      	ldr	r3, [r7, #4]
 800a86e:	2224      	movs	r2, #36	; 0x24
 800a870:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800a874:	687b      	ldr	r3, [r7, #4]
 800a876:	681b      	ldr	r3, [r3, #0]
 800a878:	681a      	ldr	r2, [r3, #0]
 800a87a:	687b      	ldr	r3, [r7, #4]
 800a87c:	681b      	ldr	r3, [r3, #0]
 800a87e:	f022 0201 	bic.w	r2, r2, #1
 800a882:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800a884:	6878      	ldr	r0, [r7, #4]
 800a886:	f000 fbfb 	bl	800b080 <UART_SetConfig>
 800a88a:	4603      	mov	r3, r0
 800a88c:	2b01      	cmp	r3, #1
 800a88e:	d101      	bne.n	800a894 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800a890:	2301      	movs	r3, #1
 800a892:	e022      	b.n	800a8da <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800a894:	687b      	ldr	r3, [r7, #4]
 800a896:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a898:	2b00      	cmp	r3, #0
 800a89a:	d002      	beq.n	800a8a2 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800a89c:	6878      	ldr	r0, [r7, #4]
 800a89e:	f000 febb 	bl	800b618 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a8a2:	687b      	ldr	r3, [r7, #4]
 800a8a4:	681b      	ldr	r3, [r3, #0]
 800a8a6:	685a      	ldr	r2, [r3, #4]
 800a8a8:	687b      	ldr	r3, [r7, #4]
 800a8aa:	681b      	ldr	r3, [r3, #0]
 800a8ac:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800a8b0:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a8b2:	687b      	ldr	r3, [r7, #4]
 800a8b4:	681b      	ldr	r3, [r3, #0]
 800a8b6:	689a      	ldr	r2, [r3, #8]
 800a8b8:	687b      	ldr	r3, [r7, #4]
 800a8ba:	681b      	ldr	r3, [r3, #0]
 800a8bc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800a8c0:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800a8c2:	687b      	ldr	r3, [r7, #4]
 800a8c4:	681b      	ldr	r3, [r3, #0]
 800a8c6:	681a      	ldr	r2, [r3, #0]
 800a8c8:	687b      	ldr	r3, [r7, #4]
 800a8ca:	681b      	ldr	r3, [r3, #0]
 800a8cc:	f042 0201 	orr.w	r2, r2, #1
 800a8d0:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800a8d2:	6878      	ldr	r0, [r7, #4]
 800a8d4:	f000 ff42 	bl	800b75c <UART_CheckIdleState>
 800a8d8:	4603      	mov	r3, r0
}
 800a8da:	4618      	mov	r0, r3
 800a8dc:	3708      	adds	r7, #8
 800a8de:	46bd      	mov	sp, r7
 800a8e0:	bd80      	pop	{r7, pc}

0800a8e2 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a8e2:	b580      	push	{r7, lr}
 800a8e4:	b08a      	sub	sp, #40	; 0x28
 800a8e6:	af02      	add	r7, sp, #8
 800a8e8:	60f8      	str	r0, [r7, #12]
 800a8ea:	60b9      	str	r1, [r7, #8]
 800a8ec:	603b      	str	r3, [r7, #0]
 800a8ee:	4613      	mov	r3, r2
 800a8f0:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800a8f2:	68fb      	ldr	r3, [r7, #12]
 800a8f4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a8f8:	2b20      	cmp	r3, #32
 800a8fa:	f040 8083 	bne.w	800aa04 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 800a8fe:	68bb      	ldr	r3, [r7, #8]
 800a900:	2b00      	cmp	r3, #0
 800a902:	d002      	beq.n	800a90a <HAL_UART_Transmit+0x28>
 800a904:	88fb      	ldrh	r3, [r7, #6]
 800a906:	2b00      	cmp	r3, #0
 800a908:	d101      	bne.n	800a90e <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 800a90a:	2301      	movs	r3, #1
 800a90c:	e07b      	b.n	800aa06 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 800a90e:	68fb      	ldr	r3, [r7, #12]
 800a910:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800a914:	2b01      	cmp	r3, #1
 800a916:	d101      	bne.n	800a91c <HAL_UART_Transmit+0x3a>
 800a918:	2302      	movs	r3, #2
 800a91a:	e074      	b.n	800aa06 <HAL_UART_Transmit+0x124>
 800a91c:	68fb      	ldr	r3, [r7, #12]
 800a91e:	2201      	movs	r2, #1
 800a920:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a924:	68fb      	ldr	r3, [r7, #12]
 800a926:	2200      	movs	r2, #0
 800a928:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800a92c:	68fb      	ldr	r3, [r7, #12]
 800a92e:	2221      	movs	r2, #33	; 0x21
 800a930:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800a934:	f7f9 f83e 	bl	80039b4 <HAL_GetTick>
 800a938:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800a93a:	68fb      	ldr	r3, [r7, #12]
 800a93c:	88fa      	ldrh	r2, [r7, #6]
 800a93e:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800a942:	68fb      	ldr	r3, [r7, #12]
 800a944:	88fa      	ldrh	r2, [r7, #6]
 800a946:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a94a:	68fb      	ldr	r3, [r7, #12]
 800a94c:	689b      	ldr	r3, [r3, #8]
 800a94e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a952:	d108      	bne.n	800a966 <HAL_UART_Transmit+0x84>
 800a954:	68fb      	ldr	r3, [r7, #12]
 800a956:	691b      	ldr	r3, [r3, #16]
 800a958:	2b00      	cmp	r3, #0
 800a95a:	d104      	bne.n	800a966 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 800a95c:	2300      	movs	r3, #0
 800a95e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800a960:	68bb      	ldr	r3, [r7, #8]
 800a962:	61bb      	str	r3, [r7, #24]
 800a964:	e003      	b.n	800a96e <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 800a966:	68bb      	ldr	r3, [r7, #8]
 800a968:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800a96a:	2300      	movs	r3, #0
 800a96c:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800a96e:	68fb      	ldr	r3, [r7, #12]
 800a970:	2200      	movs	r2, #0
 800a972:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 800a976:	e02c      	b.n	800a9d2 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800a978:	683b      	ldr	r3, [r7, #0]
 800a97a:	9300      	str	r3, [sp, #0]
 800a97c:	697b      	ldr	r3, [r7, #20]
 800a97e:	2200      	movs	r2, #0
 800a980:	2180      	movs	r1, #128	; 0x80
 800a982:	68f8      	ldr	r0, [r7, #12]
 800a984:	f000 ff35 	bl	800b7f2 <UART_WaitOnFlagUntilTimeout>
 800a988:	4603      	mov	r3, r0
 800a98a:	2b00      	cmp	r3, #0
 800a98c:	d001      	beq.n	800a992 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 800a98e:	2303      	movs	r3, #3
 800a990:	e039      	b.n	800aa06 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 800a992:	69fb      	ldr	r3, [r7, #28]
 800a994:	2b00      	cmp	r3, #0
 800a996:	d10b      	bne.n	800a9b0 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800a998:	69bb      	ldr	r3, [r7, #24]
 800a99a:	881b      	ldrh	r3, [r3, #0]
 800a99c:	461a      	mov	r2, r3
 800a99e:	68fb      	ldr	r3, [r7, #12]
 800a9a0:	681b      	ldr	r3, [r3, #0]
 800a9a2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800a9a6:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800a9a8:	69bb      	ldr	r3, [r7, #24]
 800a9aa:	3302      	adds	r3, #2
 800a9ac:	61bb      	str	r3, [r7, #24]
 800a9ae:	e007      	b.n	800a9c0 <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800a9b0:	69fb      	ldr	r3, [r7, #28]
 800a9b2:	781a      	ldrb	r2, [r3, #0]
 800a9b4:	68fb      	ldr	r3, [r7, #12]
 800a9b6:	681b      	ldr	r3, [r3, #0]
 800a9b8:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800a9ba:	69fb      	ldr	r3, [r7, #28]
 800a9bc:	3301      	adds	r3, #1
 800a9be:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800a9c0:	68fb      	ldr	r3, [r7, #12]
 800a9c2:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800a9c6:	b29b      	uxth	r3, r3
 800a9c8:	3b01      	subs	r3, #1
 800a9ca:	b29a      	uxth	r2, r3
 800a9cc:	68fb      	ldr	r3, [r7, #12]
 800a9ce:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800a9d2:	68fb      	ldr	r3, [r7, #12]
 800a9d4:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800a9d8:	b29b      	uxth	r3, r3
 800a9da:	2b00      	cmp	r3, #0
 800a9dc:	d1cc      	bne.n	800a978 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800a9de:	683b      	ldr	r3, [r7, #0]
 800a9e0:	9300      	str	r3, [sp, #0]
 800a9e2:	697b      	ldr	r3, [r7, #20]
 800a9e4:	2200      	movs	r2, #0
 800a9e6:	2140      	movs	r1, #64	; 0x40
 800a9e8:	68f8      	ldr	r0, [r7, #12]
 800a9ea:	f000 ff02 	bl	800b7f2 <UART_WaitOnFlagUntilTimeout>
 800a9ee:	4603      	mov	r3, r0
 800a9f0:	2b00      	cmp	r3, #0
 800a9f2:	d001      	beq.n	800a9f8 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 800a9f4:	2303      	movs	r3, #3
 800a9f6:	e006      	b.n	800aa06 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800a9f8:	68fb      	ldr	r3, [r7, #12]
 800a9fa:	2220      	movs	r2, #32
 800a9fc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 800aa00:	2300      	movs	r3, #0
 800aa02:	e000      	b.n	800aa06 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 800aa04:	2302      	movs	r3, #2
  }
}
 800aa06:	4618      	mov	r0, r3
 800aa08:	3720      	adds	r7, #32
 800aa0a:	46bd      	mov	sp, r7
 800aa0c:	bd80      	pop	{r7, pc}
	...

0800aa10 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800aa10:	b580      	push	{r7, lr}
 800aa12:	b0ba      	sub	sp, #232	; 0xe8
 800aa14:	af00      	add	r7, sp, #0
 800aa16:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800aa18:	687b      	ldr	r3, [r7, #4]
 800aa1a:	681b      	ldr	r3, [r3, #0]
 800aa1c:	69db      	ldr	r3, [r3, #28]
 800aa1e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800aa22:	687b      	ldr	r3, [r7, #4]
 800aa24:	681b      	ldr	r3, [r3, #0]
 800aa26:	681b      	ldr	r3, [r3, #0]
 800aa28:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800aa2c:	687b      	ldr	r3, [r7, #4]
 800aa2e:	681b      	ldr	r3, [r3, #0]
 800aa30:	689b      	ldr	r3, [r3, #8]
 800aa32:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800aa36:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800aa3a:	f640 030f 	movw	r3, #2063	; 0x80f
 800aa3e:	4013      	ands	r3, r2
 800aa40:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800aa44:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800aa48:	2b00      	cmp	r3, #0
 800aa4a:	d11b      	bne.n	800aa84 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800aa4c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800aa50:	f003 0320 	and.w	r3, r3, #32
 800aa54:	2b00      	cmp	r3, #0
 800aa56:	d015      	beq.n	800aa84 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800aa58:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800aa5c:	f003 0320 	and.w	r3, r3, #32
 800aa60:	2b00      	cmp	r3, #0
 800aa62:	d105      	bne.n	800aa70 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800aa64:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800aa68:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800aa6c:	2b00      	cmp	r3, #0
 800aa6e:	d009      	beq.n	800aa84 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800aa70:	687b      	ldr	r3, [r7, #4]
 800aa72:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800aa74:	2b00      	cmp	r3, #0
 800aa76:	f000 82d6 	beq.w	800b026 <HAL_UART_IRQHandler+0x616>
      {
        huart->RxISR(huart);
 800aa7a:	687b      	ldr	r3, [r7, #4]
 800aa7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800aa7e:	6878      	ldr	r0, [r7, #4]
 800aa80:	4798      	blx	r3
      }
      return;
 800aa82:	e2d0      	b.n	800b026 <HAL_UART_IRQHandler+0x616>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800aa84:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800aa88:	2b00      	cmp	r3, #0
 800aa8a:	f000 811f 	beq.w	800accc <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800aa8e:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800aa92:	4b8b      	ldr	r3, [pc, #556]	; (800acc0 <HAL_UART_IRQHandler+0x2b0>)
 800aa94:	4013      	ands	r3, r2
 800aa96:	2b00      	cmp	r3, #0
 800aa98:	d106      	bne.n	800aaa8 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800aa9a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800aa9e:	4b89      	ldr	r3, [pc, #548]	; (800acc4 <HAL_UART_IRQHandler+0x2b4>)
 800aaa0:	4013      	ands	r3, r2
 800aaa2:	2b00      	cmp	r3, #0
 800aaa4:	f000 8112 	beq.w	800accc <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800aaa8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800aaac:	f003 0301 	and.w	r3, r3, #1
 800aab0:	2b00      	cmp	r3, #0
 800aab2:	d011      	beq.n	800aad8 <HAL_UART_IRQHandler+0xc8>
 800aab4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800aab8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800aabc:	2b00      	cmp	r3, #0
 800aabe:	d00b      	beq.n	800aad8 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800aac0:	687b      	ldr	r3, [r7, #4]
 800aac2:	681b      	ldr	r3, [r3, #0]
 800aac4:	2201      	movs	r2, #1
 800aac6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800aac8:	687b      	ldr	r3, [r7, #4]
 800aaca:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800aace:	f043 0201 	orr.w	r2, r3, #1
 800aad2:	687b      	ldr	r3, [r7, #4]
 800aad4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800aad8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800aadc:	f003 0302 	and.w	r3, r3, #2
 800aae0:	2b00      	cmp	r3, #0
 800aae2:	d011      	beq.n	800ab08 <HAL_UART_IRQHandler+0xf8>
 800aae4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800aae8:	f003 0301 	and.w	r3, r3, #1
 800aaec:	2b00      	cmp	r3, #0
 800aaee:	d00b      	beq.n	800ab08 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800aaf0:	687b      	ldr	r3, [r7, #4]
 800aaf2:	681b      	ldr	r3, [r3, #0]
 800aaf4:	2202      	movs	r2, #2
 800aaf6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800aaf8:	687b      	ldr	r3, [r7, #4]
 800aafa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800aafe:	f043 0204 	orr.w	r2, r3, #4
 800ab02:	687b      	ldr	r3, [r7, #4]
 800ab04:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800ab08:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ab0c:	f003 0304 	and.w	r3, r3, #4
 800ab10:	2b00      	cmp	r3, #0
 800ab12:	d011      	beq.n	800ab38 <HAL_UART_IRQHandler+0x128>
 800ab14:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800ab18:	f003 0301 	and.w	r3, r3, #1
 800ab1c:	2b00      	cmp	r3, #0
 800ab1e:	d00b      	beq.n	800ab38 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800ab20:	687b      	ldr	r3, [r7, #4]
 800ab22:	681b      	ldr	r3, [r3, #0]
 800ab24:	2204      	movs	r2, #4
 800ab26:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800ab28:	687b      	ldr	r3, [r7, #4]
 800ab2a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ab2e:	f043 0202 	orr.w	r2, r3, #2
 800ab32:	687b      	ldr	r3, [r7, #4]
 800ab34:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800ab38:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ab3c:	f003 0308 	and.w	r3, r3, #8
 800ab40:	2b00      	cmp	r3, #0
 800ab42:	d017      	beq.n	800ab74 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800ab44:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ab48:	f003 0320 	and.w	r3, r3, #32
 800ab4c:	2b00      	cmp	r3, #0
 800ab4e:	d105      	bne.n	800ab5c <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800ab50:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800ab54:	4b5a      	ldr	r3, [pc, #360]	; (800acc0 <HAL_UART_IRQHandler+0x2b0>)
 800ab56:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800ab58:	2b00      	cmp	r3, #0
 800ab5a:	d00b      	beq.n	800ab74 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800ab5c:	687b      	ldr	r3, [r7, #4]
 800ab5e:	681b      	ldr	r3, [r3, #0]
 800ab60:	2208      	movs	r2, #8
 800ab62:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800ab64:	687b      	ldr	r3, [r7, #4]
 800ab66:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ab6a:	f043 0208 	orr.w	r2, r3, #8
 800ab6e:	687b      	ldr	r3, [r7, #4]
 800ab70:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800ab74:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ab78:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800ab7c:	2b00      	cmp	r3, #0
 800ab7e:	d012      	beq.n	800aba6 <HAL_UART_IRQHandler+0x196>
 800ab80:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ab84:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800ab88:	2b00      	cmp	r3, #0
 800ab8a:	d00c      	beq.n	800aba6 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800ab8c:	687b      	ldr	r3, [r7, #4]
 800ab8e:	681b      	ldr	r3, [r3, #0]
 800ab90:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800ab94:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800ab96:	687b      	ldr	r3, [r7, #4]
 800ab98:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ab9c:	f043 0220 	orr.w	r2, r3, #32
 800aba0:	687b      	ldr	r3, [r7, #4]
 800aba2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800aba6:	687b      	ldr	r3, [r7, #4]
 800aba8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800abac:	2b00      	cmp	r3, #0
 800abae:	f000 823c 	beq.w	800b02a <HAL_UART_IRQHandler+0x61a>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800abb2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800abb6:	f003 0320 	and.w	r3, r3, #32
 800abba:	2b00      	cmp	r3, #0
 800abbc:	d013      	beq.n	800abe6 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800abbe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800abc2:	f003 0320 	and.w	r3, r3, #32
 800abc6:	2b00      	cmp	r3, #0
 800abc8:	d105      	bne.n	800abd6 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800abca:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800abce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800abd2:	2b00      	cmp	r3, #0
 800abd4:	d007      	beq.n	800abe6 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800abd6:	687b      	ldr	r3, [r7, #4]
 800abd8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800abda:	2b00      	cmp	r3, #0
 800abdc:	d003      	beq.n	800abe6 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800abde:	687b      	ldr	r3, [r7, #4]
 800abe0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800abe2:	6878      	ldr	r0, [r7, #4]
 800abe4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800abe6:	687b      	ldr	r3, [r7, #4]
 800abe8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800abec:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800abf0:	687b      	ldr	r3, [r7, #4]
 800abf2:	681b      	ldr	r3, [r3, #0]
 800abf4:	689b      	ldr	r3, [r3, #8]
 800abf6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800abfa:	2b40      	cmp	r3, #64	; 0x40
 800abfc:	d005      	beq.n	800ac0a <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800abfe:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800ac02:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800ac06:	2b00      	cmp	r3, #0
 800ac08:	d04f      	beq.n	800acaa <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800ac0a:	6878      	ldr	r0, [r7, #4]
 800ac0c:	f000 feb9 	bl	800b982 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ac10:	687b      	ldr	r3, [r7, #4]
 800ac12:	681b      	ldr	r3, [r3, #0]
 800ac14:	689b      	ldr	r3, [r3, #8]
 800ac16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ac1a:	2b40      	cmp	r3, #64	; 0x40
 800ac1c:	d141      	bne.n	800aca2 <HAL_UART_IRQHandler+0x292>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800ac1e:	687b      	ldr	r3, [r7, #4]
 800ac20:	681b      	ldr	r3, [r3, #0]
 800ac22:	3308      	adds	r3, #8
 800ac24:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ac28:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800ac2c:	e853 3f00 	ldrex	r3, [r3]
 800ac30:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800ac34:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800ac38:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ac3c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800ac40:	687b      	ldr	r3, [r7, #4]
 800ac42:	681b      	ldr	r3, [r3, #0]
 800ac44:	3308      	adds	r3, #8
 800ac46:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800ac4a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800ac4e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ac52:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800ac56:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800ac5a:	e841 2300 	strex	r3, r2, [r1]
 800ac5e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800ac62:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800ac66:	2b00      	cmp	r3, #0
 800ac68:	d1d9      	bne.n	800ac1e <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800ac6a:	687b      	ldr	r3, [r7, #4]
 800ac6c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ac6e:	2b00      	cmp	r3, #0
 800ac70:	d013      	beq.n	800ac9a <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800ac72:	687b      	ldr	r3, [r7, #4]
 800ac74:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ac76:	4a14      	ldr	r2, [pc, #80]	; (800acc8 <HAL_UART_IRQHandler+0x2b8>)
 800ac78:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800ac7a:	687b      	ldr	r3, [r7, #4]
 800ac7c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ac7e:	4618      	mov	r0, r3
 800ac80:	f7fb fd25 	bl	80066ce <HAL_DMA_Abort_IT>
 800ac84:	4603      	mov	r3, r0
 800ac86:	2b00      	cmp	r3, #0
 800ac88:	d017      	beq.n	800acba <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800ac8a:	687b      	ldr	r3, [r7, #4]
 800ac8c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ac8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ac90:	687a      	ldr	r2, [r7, #4]
 800ac92:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 800ac94:	4610      	mov	r0, r2
 800ac96:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ac98:	e00f      	b.n	800acba <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800ac9a:	6878      	ldr	r0, [r7, #4]
 800ac9c:	f000 f9da 	bl	800b054 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800aca0:	e00b      	b.n	800acba <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800aca2:	6878      	ldr	r0, [r7, #4]
 800aca4:	f000 f9d6 	bl	800b054 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800aca8:	e007      	b.n	800acba <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800acaa:	6878      	ldr	r0, [r7, #4]
 800acac:	f000 f9d2 	bl	800b054 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800acb0:	687b      	ldr	r3, [r7, #4]
 800acb2:	2200      	movs	r2, #0
 800acb4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 800acb8:	e1b7      	b.n	800b02a <HAL_UART_IRQHandler+0x61a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800acba:	bf00      	nop
    return;
 800acbc:	e1b5      	b.n	800b02a <HAL_UART_IRQHandler+0x61a>
 800acbe:	bf00      	nop
 800acc0:	10000001 	.word	0x10000001
 800acc4:	04000120 	.word	0x04000120
 800acc8:	0800ba4f 	.word	0x0800ba4f

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800accc:	687b      	ldr	r3, [r7, #4]
 800acce:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800acd0:	2b01      	cmp	r3, #1
 800acd2:	f040 814a 	bne.w	800af6a <HAL_UART_IRQHandler+0x55a>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800acd6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800acda:	f003 0310 	and.w	r3, r3, #16
 800acde:	2b00      	cmp	r3, #0
 800ace0:	f000 8143 	beq.w	800af6a <HAL_UART_IRQHandler+0x55a>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800ace4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ace8:	f003 0310 	and.w	r3, r3, #16
 800acec:	2b00      	cmp	r3, #0
 800acee:	f000 813c 	beq.w	800af6a <HAL_UART_IRQHandler+0x55a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800acf2:	687b      	ldr	r3, [r7, #4]
 800acf4:	681b      	ldr	r3, [r3, #0]
 800acf6:	2210      	movs	r2, #16
 800acf8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800acfa:	687b      	ldr	r3, [r7, #4]
 800acfc:	681b      	ldr	r3, [r3, #0]
 800acfe:	689b      	ldr	r3, [r3, #8]
 800ad00:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ad04:	2b40      	cmp	r3, #64	; 0x40
 800ad06:	f040 80b5 	bne.w	800ae74 <HAL_UART_IRQHandler+0x464>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800ad0a:	687b      	ldr	r3, [r7, #4]
 800ad0c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ad0e:	681b      	ldr	r3, [r3, #0]
 800ad10:	685b      	ldr	r3, [r3, #4]
 800ad12:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800ad16:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800ad1a:	2b00      	cmp	r3, #0
 800ad1c:	f000 8187 	beq.w	800b02e <HAL_UART_IRQHandler+0x61e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800ad20:	687b      	ldr	r3, [r7, #4]
 800ad22:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800ad26:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800ad2a:	429a      	cmp	r2, r3
 800ad2c:	f080 817f 	bcs.w	800b02e <HAL_UART_IRQHandler+0x61e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800ad30:	687b      	ldr	r3, [r7, #4]
 800ad32:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800ad36:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800ad3a:	687b      	ldr	r3, [r7, #4]
 800ad3c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ad3e:	681b      	ldr	r3, [r3, #0]
 800ad40:	681b      	ldr	r3, [r3, #0]
 800ad42:	f003 0320 	and.w	r3, r3, #32
 800ad46:	2b00      	cmp	r3, #0
 800ad48:	f040 8086 	bne.w	800ae58 <HAL_UART_IRQHandler+0x448>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800ad4c:	687b      	ldr	r3, [r7, #4]
 800ad4e:	681b      	ldr	r3, [r3, #0]
 800ad50:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ad54:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800ad58:	e853 3f00 	ldrex	r3, [r3]
 800ad5c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800ad60:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800ad64:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800ad68:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800ad6c:	687b      	ldr	r3, [r7, #4]
 800ad6e:	681b      	ldr	r3, [r3, #0]
 800ad70:	461a      	mov	r2, r3
 800ad72:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800ad76:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800ad7a:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ad7e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800ad82:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800ad86:	e841 2300 	strex	r3, r2, [r1]
 800ad8a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800ad8e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800ad92:	2b00      	cmp	r3, #0
 800ad94:	d1da      	bne.n	800ad4c <HAL_UART_IRQHandler+0x33c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ad96:	687b      	ldr	r3, [r7, #4]
 800ad98:	681b      	ldr	r3, [r3, #0]
 800ad9a:	3308      	adds	r3, #8
 800ad9c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ad9e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800ada0:	e853 3f00 	ldrex	r3, [r3]
 800ada4:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800ada6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800ada8:	f023 0301 	bic.w	r3, r3, #1
 800adac:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800adb0:	687b      	ldr	r3, [r7, #4]
 800adb2:	681b      	ldr	r3, [r3, #0]
 800adb4:	3308      	adds	r3, #8
 800adb6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800adba:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800adbe:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800adc0:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800adc2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800adc6:	e841 2300 	strex	r3, r2, [r1]
 800adca:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800adcc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800adce:	2b00      	cmp	r3, #0
 800add0:	d1e1      	bne.n	800ad96 <HAL_UART_IRQHandler+0x386>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800add2:	687b      	ldr	r3, [r7, #4]
 800add4:	681b      	ldr	r3, [r3, #0]
 800add6:	3308      	adds	r3, #8
 800add8:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800adda:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800addc:	e853 3f00 	ldrex	r3, [r3]
 800ade0:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800ade2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ade4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ade8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800adec:	687b      	ldr	r3, [r7, #4]
 800adee:	681b      	ldr	r3, [r3, #0]
 800adf0:	3308      	adds	r3, #8
 800adf2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800adf6:	66fa      	str	r2, [r7, #108]	; 0x6c
 800adf8:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800adfa:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800adfc:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800adfe:	e841 2300 	strex	r3, r2, [r1]
 800ae02:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800ae04:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ae06:	2b00      	cmp	r3, #0
 800ae08:	d1e3      	bne.n	800add2 <HAL_UART_IRQHandler+0x3c2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800ae0a:	687b      	ldr	r3, [r7, #4]
 800ae0c:	2220      	movs	r2, #32
 800ae0e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ae12:	687b      	ldr	r3, [r7, #4]
 800ae14:	2200      	movs	r2, #0
 800ae16:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ae18:	687b      	ldr	r3, [r7, #4]
 800ae1a:	681b      	ldr	r3, [r3, #0]
 800ae1c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ae1e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ae20:	e853 3f00 	ldrex	r3, [r3]
 800ae24:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800ae26:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ae28:	f023 0310 	bic.w	r3, r3, #16
 800ae2c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800ae30:	687b      	ldr	r3, [r7, #4]
 800ae32:	681b      	ldr	r3, [r3, #0]
 800ae34:	461a      	mov	r2, r3
 800ae36:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800ae3a:	65bb      	str	r3, [r7, #88]	; 0x58
 800ae3c:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ae3e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800ae40:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800ae42:	e841 2300 	strex	r3, r2, [r1]
 800ae46:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800ae48:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ae4a:	2b00      	cmp	r3, #0
 800ae4c:	d1e4      	bne.n	800ae18 <HAL_UART_IRQHandler+0x408>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800ae4e:	687b      	ldr	r3, [r7, #4]
 800ae50:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ae52:	4618      	mov	r0, r3
 800ae54:	f7fb fbe2 	bl	800661c <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800ae58:	687b      	ldr	r3, [r7, #4]
 800ae5a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800ae5e:	687b      	ldr	r3, [r7, #4]
 800ae60:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800ae64:	b29b      	uxth	r3, r3
 800ae66:	1ad3      	subs	r3, r2, r3
 800ae68:	b29b      	uxth	r3, r3
 800ae6a:	4619      	mov	r1, r3
 800ae6c:	6878      	ldr	r0, [r7, #4]
 800ae6e:	f000 f8fb 	bl	800b068 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800ae72:	e0dc      	b.n	800b02e <HAL_UART_IRQHandler+0x61e>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800ae74:	687b      	ldr	r3, [r7, #4]
 800ae76:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800ae7a:	687b      	ldr	r3, [r7, #4]
 800ae7c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800ae80:	b29b      	uxth	r3, r3
 800ae82:	1ad3      	subs	r3, r2, r3
 800ae84:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800ae88:	687b      	ldr	r3, [r7, #4]
 800ae8a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800ae8e:	b29b      	uxth	r3, r3
 800ae90:	2b00      	cmp	r3, #0
 800ae92:	f000 80ce 	beq.w	800b032 <HAL_UART_IRQHandler+0x622>
          && (nb_rx_data > 0U))
 800ae96:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800ae9a:	2b00      	cmp	r3, #0
 800ae9c:	f000 80c9 	beq.w	800b032 <HAL_UART_IRQHandler+0x622>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800aea0:	687b      	ldr	r3, [r7, #4]
 800aea2:	681b      	ldr	r3, [r3, #0]
 800aea4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aea6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aea8:	e853 3f00 	ldrex	r3, [r3]
 800aeac:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800aeae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aeb0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800aeb4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800aeb8:	687b      	ldr	r3, [r7, #4]
 800aeba:	681b      	ldr	r3, [r3, #0]
 800aebc:	461a      	mov	r2, r3
 800aebe:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800aec2:	647b      	str	r3, [r7, #68]	; 0x44
 800aec4:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aec6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800aec8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800aeca:	e841 2300 	strex	r3, r2, [r1]
 800aece:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800aed0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800aed2:	2b00      	cmp	r3, #0
 800aed4:	d1e4      	bne.n	800aea0 <HAL_UART_IRQHandler+0x490>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800aed6:	687b      	ldr	r3, [r7, #4]
 800aed8:	681b      	ldr	r3, [r3, #0]
 800aeda:	3308      	adds	r3, #8
 800aedc:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aede:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aee0:	e853 3f00 	ldrex	r3, [r3]
 800aee4:	623b      	str	r3, [r7, #32]
   return(result);
 800aee6:	6a3b      	ldr	r3, [r7, #32]
 800aee8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800aeec:	f023 0301 	bic.w	r3, r3, #1
 800aef0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800aef4:	687b      	ldr	r3, [r7, #4]
 800aef6:	681b      	ldr	r3, [r3, #0]
 800aef8:	3308      	adds	r3, #8
 800aefa:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800aefe:	633a      	str	r2, [r7, #48]	; 0x30
 800af00:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800af02:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800af04:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800af06:	e841 2300 	strex	r3, r2, [r1]
 800af0a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800af0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af0e:	2b00      	cmp	r3, #0
 800af10:	d1e1      	bne.n	800aed6 <HAL_UART_IRQHandler+0x4c6>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800af12:	687b      	ldr	r3, [r7, #4]
 800af14:	2220      	movs	r2, #32
 800af16:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800af1a:	687b      	ldr	r3, [r7, #4]
 800af1c:	2200      	movs	r2, #0
 800af1e:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800af20:	687b      	ldr	r3, [r7, #4]
 800af22:	2200      	movs	r2, #0
 800af24:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800af26:	687b      	ldr	r3, [r7, #4]
 800af28:	681b      	ldr	r3, [r3, #0]
 800af2a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800af2c:	693b      	ldr	r3, [r7, #16]
 800af2e:	e853 3f00 	ldrex	r3, [r3]
 800af32:	60fb      	str	r3, [r7, #12]
   return(result);
 800af34:	68fb      	ldr	r3, [r7, #12]
 800af36:	f023 0310 	bic.w	r3, r3, #16
 800af3a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800af3e:	687b      	ldr	r3, [r7, #4]
 800af40:	681b      	ldr	r3, [r3, #0]
 800af42:	461a      	mov	r2, r3
 800af44:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800af48:	61fb      	str	r3, [r7, #28]
 800af4a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800af4c:	69b9      	ldr	r1, [r7, #24]
 800af4e:	69fa      	ldr	r2, [r7, #28]
 800af50:	e841 2300 	strex	r3, r2, [r1]
 800af54:	617b      	str	r3, [r7, #20]
   return(result);
 800af56:	697b      	ldr	r3, [r7, #20]
 800af58:	2b00      	cmp	r3, #0
 800af5a:	d1e4      	bne.n	800af26 <HAL_UART_IRQHandler+0x516>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800af5c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800af60:	4619      	mov	r1, r3
 800af62:	6878      	ldr	r0, [r7, #4]
 800af64:	f000 f880 	bl	800b068 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800af68:	e063      	b.n	800b032 <HAL_UART_IRQHandler+0x622>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800af6a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800af6e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800af72:	2b00      	cmp	r3, #0
 800af74:	d00e      	beq.n	800af94 <HAL_UART_IRQHandler+0x584>
 800af76:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800af7a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800af7e:	2b00      	cmp	r3, #0
 800af80:	d008      	beq.n	800af94 <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800af82:	687b      	ldr	r3, [r7, #4]
 800af84:	681b      	ldr	r3, [r3, #0]
 800af86:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800af8a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800af8c:	6878      	ldr	r0, [r7, #4]
 800af8e:	f000 fd9f 	bl	800bad0 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800af92:	e051      	b.n	800b038 <HAL_UART_IRQHandler+0x628>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800af94:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800af98:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800af9c:	2b00      	cmp	r3, #0
 800af9e:	d014      	beq.n	800afca <HAL_UART_IRQHandler+0x5ba>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800afa0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800afa4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800afa8:	2b00      	cmp	r3, #0
 800afaa:	d105      	bne.n	800afb8 <HAL_UART_IRQHandler+0x5a8>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800afac:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800afb0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800afb4:	2b00      	cmp	r3, #0
 800afb6:	d008      	beq.n	800afca <HAL_UART_IRQHandler+0x5ba>
  {
    if (huart->TxISR != NULL)
 800afb8:	687b      	ldr	r3, [r7, #4]
 800afba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800afbc:	2b00      	cmp	r3, #0
 800afbe:	d03a      	beq.n	800b036 <HAL_UART_IRQHandler+0x626>
    {
      huart->TxISR(huart);
 800afc0:	687b      	ldr	r3, [r7, #4]
 800afc2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800afc4:	6878      	ldr	r0, [r7, #4]
 800afc6:	4798      	blx	r3
    }
    return;
 800afc8:	e035      	b.n	800b036 <HAL_UART_IRQHandler+0x626>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800afca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800afce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800afd2:	2b00      	cmp	r3, #0
 800afd4:	d009      	beq.n	800afea <HAL_UART_IRQHandler+0x5da>
 800afd6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800afda:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800afde:	2b00      	cmp	r3, #0
 800afe0:	d003      	beq.n	800afea <HAL_UART_IRQHandler+0x5da>
  {
    UART_EndTransmit_IT(huart);
 800afe2:	6878      	ldr	r0, [r7, #4]
 800afe4:	f000 fd49 	bl	800ba7a <UART_EndTransmit_IT>
    return;
 800afe8:	e026      	b.n	800b038 <HAL_UART_IRQHandler+0x628>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800afea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800afee:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800aff2:	2b00      	cmp	r3, #0
 800aff4:	d009      	beq.n	800b00a <HAL_UART_IRQHandler+0x5fa>
 800aff6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800affa:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800affe:	2b00      	cmp	r3, #0
 800b000:	d003      	beq.n	800b00a <HAL_UART_IRQHandler+0x5fa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800b002:	6878      	ldr	r0, [r7, #4]
 800b004:	f000 fd78 	bl	800baf8 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800b008:	e016      	b.n	800b038 <HAL_UART_IRQHandler+0x628>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800b00a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b00e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800b012:	2b00      	cmp	r3, #0
 800b014:	d010      	beq.n	800b038 <HAL_UART_IRQHandler+0x628>
 800b016:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b01a:	2b00      	cmp	r3, #0
 800b01c:	da0c      	bge.n	800b038 <HAL_UART_IRQHandler+0x628>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800b01e:	6878      	ldr	r0, [r7, #4]
 800b020:	f000 fd60 	bl	800bae4 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800b024:	e008      	b.n	800b038 <HAL_UART_IRQHandler+0x628>
      return;
 800b026:	bf00      	nop
 800b028:	e006      	b.n	800b038 <HAL_UART_IRQHandler+0x628>
    return;
 800b02a:	bf00      	nop
 800b02c:	e004      	b.n	800b038 <HAL_UART_IRQHandler+0x628>
      return;
 800b02e:	bf00      	nop
 800b030:	e002      	b.n	800b038 <HAL_UART_IRQHandler+0x628>
      return;
 800b032:	bf00      	nop
 800b034:	e000      	b.n	800b038 <HAL_UART_IRQHandler+0x628>
    return;
 800b036:	bf00      	nop
  }
}
 800b038:	37e8      	adds	r7, #232	; 0xe8
 800b03a:	46bd      	mov	sp, r7
 800b03c:	bd80      	pop	{r7, pc}
 800b03e:	bf00      	nop

0800b040 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800b040:	b480      	push	{r7}
 800b042:	b083      	sub	sp, #12
 800b044:	af00      	add	r7, sp, #0
 800b046:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800b048:	bf00      	nop
 800b04a:	370c      	adds	r7, #12
 800b04c:	46bd      	mov	sp, r7
 800b04e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b052:	4770      	bx	lr

0800b054 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800b054:	b480      	push	{r7}
 800b056:	b083      	sub	sp, #12
 800b058:	af00      	add	r7, sp, #0
 800b05a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800b05c:	bf00      	nop
 800b05e:	370c      	adds	r7, #12
 800b060:	46bd      	mov	sp, r7
 800b062:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b066:	4770      	bx	lr

0800b068 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800b068:	b480      	push	{r7}
 800b06a:	b083      	sub	sp, #12
 800b06c:	af00      	add	r7, sp, #0
 800b06e:	6078      	str	r0, [r7, #4]
 800b070:	460b      	mov	r3, r1
 800b072:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800b074:	bf00      	nop
 800b076:	370c      	adds	r7, #12
 800b078:	46bd      	mov	sp, r7
 800b07a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b07e:	4770      	bx	lr

0800b080 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800b080:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800b084:	b08c      	sub	sp, #48	; 0x30
 800b086:	af00      	add	r7, sp, #0
 800b088:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800b08a:	2300      	movs	r3, #0
 800b08c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800b090:	697b      	ldr	r3, [r7, #20]
 800b092:	689a      	ldr	r2, [r3, #8]
 800b094:	697b      	ldr	r3, [r7, #20]
 800b096:	691b      	ldr	r3, [r3, #16]
 800b098:	431a      	orrs	r2, r3
 800b09a:	697b      	ldr	r3, [r7, #20]
 800b09c:	695b      	ldr	r3, [r3, #20]
 800b09e:	431a      	orrs	r2, r3
 800b0a0:	697b      	ldr	r3, [r7, #20]
 800b0a2:	69db      	ldr	r3, [r3, #28]
 800b0a4:	4313      	orrs	r3, r2
 800b0a6:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800b0a8:	697b      	ldr	r3, [r7, #20]
 800b0aa:	681b      	ldr	r3, [r3, #0]
 800b0ac:	681a      	ldr	r2, [r3, #0]
 800b0ae:	4bab      	ldr	r3, [pc, #684]	; (800b35c <UART_SetConfig+0x2dc>)
 800b0b0:	4013      	ands	r3, r2
 800b0b2:	697a      	ldr	r2, [r7, #20]
 800b0b4:	6812      	ldr	r2, [r2, #0]
 800b0b6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b0b8:	430b      	orrs	r3, r1
 800b0ba:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800b0bc:	697b      	ldr	r3, [r7, #20]
 800b0be:	681b      	ldr	r3, [r3, #0]
 800b0c0:	685b      	ldr	r3, [r3, #4]
 800b0c2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800b0c6:	697b      	ldr	r3, [r7, #20]
 800b0c8:	68da      	ldr	r2, [r3, #12]
 800b0ca:	697b      	ldr	r3, [r7, #20]
 800b0cc:	681b      	ldr	r3, [r3, #0]
 800b0ce:	430a      	orrs	r2, r1
 800b0d0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800b0d2:	697b      	ldr	r3, [r7, #20]
 800b0d4:	699b      	ldr	r3, [r3, #24]
 800b0d6:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800b0d8:	697b      	ldr	r3, [r7, #20]
 800b0da:	681b      	ldr	r3, [r3, #0]
 800b0dc:	4aa0      	ldr	r2, [pc, #640]	; (800b360 <UART_SetConfig+0x2e0>)
 800b0de:	4293      	cmp	r3, r2
 800b0e0:	d004      	beq.n	800b0ec <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800b0e2:	697b      	ldr	r3, [r7, #20]
 800b0e4:	6a1b      	ldr	r3, [r3, #32]
 800b0e6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b0e8:	4313      	orrs	r3, r2
 800b0ea:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800b0ec:	697b      	ldr	r3, [r7, #20]
 800b0ee:	681b      	ldr	r3, [r3, #0]
 800b0f0:	689b      	ldr	r3, [r3, #8]
 800b0f2:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 800b0f6:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 800b0fa:	697a      	ldr	r2, [r7, #20]
 800b0fc:	6812      	ldr	r2, [r2, #0]
 800b0fe:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b100:	430b      	orrs	r3, r1
 800b102:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800b104:	697b      	ldr	r3, [r7, #20]
 800b106:	681b      	ldr	r3, [r3, #0]
 800b108:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b10a:	f023 010f 	bic.w	r1, r3, #15
 800b10e:	697b      	ldr	r3, [r7, #20]
 800b110:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b112:	697b      	ldr	r3, [r7, #20]
 800b114:	681b      	ldr	r3, [r3, #0]
 800b116:	430a      	orrs	r2, r1
 800b118:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800b11a:	697b      	ldr	r3, [r7, #20]
 800b11c:	681b      	ldr	r3, [r3, #0]
 800b11e:	4a91      	ldr	r2, [pc, #580]	; (800b364 <UART_SetConfig+0x2e4>)
 800b120:	4293      	cmp	r3, r2
 800b122:	d125      	bne.n	800b170 <UART_SetConfig+0xf0>
 800b124:	4b90      	ldr	r3, [pc, #576]	; (800b368 <UART_SetConfig+0x2e8>)
 800b126:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b12a:	f003 0303 	and.w	r3, r3, #3
 800b12e:	2b03      	cmp	r3, #3
 800b130:	d81a      	bhi.n	800b168 <UART_SetConfig+0xe8>
 800b132:	a201      	add	r2, pc, #4	; (adr r2, 800b138 <UART_SetConfig+0xb8>)
 800b134:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b138:	0800b149 	.word	0x0800b149
 800b13c:	0800b159 	.word	0x0800b159
 800b140:	0800b151 	.word	0x0800b151
 800b144:	0800b161 	.word	0x0800b161
 800b148:	2301      	movs	r3, #1
 800b14a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b14e:	e0d6      	b.n	800b2fe <UART_SetConfig+0x27e>
 800b150:	2302      	movs	r3, #2
 800b152:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b156:	e0d2      	b.n	800b2fe <UART_SetConfig+0x27e>
 800b158:	2304      	movs	r3, #4
 800b15a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b15e:	e0ce      	b.n	800b2fe <UART_SetConfig+0x27e>
 800b160:	2308      	movs	r3, #8
 800b162:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b166:	e0ca      	b.n	800b2fe <UART_SetConfig+0x27e>
 800b168:	2310      	movs	r3, #16
 800b16a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b16e:	e0c6      	b.n	800b2fe <UART_SetConfig+0x27e>
 800b170:	697b      	ldr	r3, [r7, #20]
 800b172:	681b      	ldr	r3, [r3, #0]
 800b174:	4a7d      	ldr	r2, [pc, #500]	; (800b36c <UART_SetConfig+0x2ec>)
 800b176:	4293      	cmp	r3, r2
 800b178:	d138      	bne.n	800b1ec <UART_SetConfig+0x16c>
 800b17a:	4b7b      	ldr	r3, [pc, #492]	; (800b368 <UART_SetConfig+0x2e8>)
 800b17c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b180:	f003 030c 	and.w	r3, r3, #12
 800b184:	2b0c      	cmp	r3, #12
 800b186:	d82d      	bhi.n	800b1e4 <UART_SetConfig+0x164>
 800b188:	a201      	add	r2, pc, #4	; (adr r2, 800b190 <UART_SetConfig+0x110>)
 800b18a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b18e:	bf00      	nop
 800b190:	0800b1c5 	.word	0x0800b1c5
 800b194:	0800b1e5 	.word	0x0800b1e5
 800b198:	0800b1e5 	.word	0x0800b1e5
 800b19c:	0800b1e5 	.word	0x0800b1e5
 800b1a0:	0800b1d5 	.word	0x0800b1d5
 800b1a4:	0800b1e5 	.word	0x0800b1e5
 800b1a8:	0800b1e5 	.word	0x0800b1e5
 800b1ac:	0800b1e5 	.word	0x0800b1e5
 800b1b0:	0800b1cd 	.word	0x0800b1cd
 800b1b4:	0800b1e5 	.word	0x0800b1e5
 800b1b8:	0800b1e5 	.word	0x0800b1e5
 800b1bc:	0800b1e5 	.word	0x0800b1e5
 800b1c0:	0800b1dd 	.word	0x0800b1dd
 800b1c4:	2300      	movs	r3, #0
 800b1c6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b1ca:	e098      	b.n	800b2fe <UART_SetConfig+0x27e>
 800b1cc:	2302      	movs	r3, #2
 800b1ce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b1d2:	e094      	b.n	800b2fe <UART_SetConfig+0x27e>
 800b1d4:	2304      	movs	r3, #4
 800b1d6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b1da:	e090      	b.n	800b2fe <UART_SetConfig+0x27e>
 800b1dc:	2308      	movs	r3, #8
 800b1de:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b1e2:	e08c      	b.n	800b2fe <UART_SetConfig+0x27e>
 800b1e4:	2310      	movs	r3, #16
 800b1e6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b1ea:	e088      	b.n	800b2fe <UART_SetConfig+0x27e>
 800b1ec:	697b      	ldr	r3, [r7, #20]
 800b1ee:	681b      	ldr	r3, [r3, #0]
 800b1f0:	4a5f      	ldr	r2, [pc, #380]	; (800b370 <UART_SetConfig+0x2f0>)
 800b1f2:	4293      	cmp	r3, r2
 800b1f4:	d125      	bne.n	800b242 <UART_SetConfig+0x1c2>
 800b1f6:	4b5c      	ldr	r3, [pc, #368]	; (800b368 <UART_SetConfig+0x2e8>)
 800b1f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b1fc:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800b200:	2b30      	cmp	r3, #48	; 0x30
 800b202:	d016      	beq.n	800b232 <UART_SetConfig+0x1b2>
 800b204:	2b30      	cmp	r3, #48	; 0x30
 800b206:	d818      	bhi.n	800b23a <UART_SetConfig+0x1ba>
 800b208:	2b20      	cmp	r3, #32
 800b20a:	d00a      	beq.n	800b222 <UART_SetConfig+0x1a2>
 800b20c:	2b20      	cmp	r3, #32
 800b20e:	d814      	bhi.n	800b23a <UART_SetConfig+0x1ba>
 800b210:	2b00      	cmp	r3, #0
 800b212:	d002      	beq.n	800b21a <UART_SetConfig+0x19a>
 800b214:	2b10      	cmp	r3, #16
 800b216:	d008      	beq.n	800b22a <UART_SetConfig+0x1aa>
 800b218:	e00f      	b.n	800b23a <UART_SetConfig+0x1ba>
 800b21a:	2300      	movs	r3, #0
 800b21c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b220:	e06d      	b.n	800b2fe <UART_SetConfig+0x27e>
 800b222:	2302      	movs	r3, #2
 800b224:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b228:	e069      	b.n	800b2fe <UART_SetConfig+0x27e>
 800b22a:	2304      	movs	r3, #4
 800b22c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b230:	e065      	b.n	800b2fe <UART_SetConfig+0x27e>
 800b232:	2308      	movs	r3, #8
 800b234:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b238:	e061      	b.n	800b2fe <UART_SetConfig+0x27e>
 800b23a:	2310      	movs	r3, #16
 800b23c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b240:	e05d      	b.n	800b2fe <UART_SetConfig+0x27e>
 800b242:	697b      	ldr	r3, [r7, #20]
 800b244:	681b      	ldr	r3, [r3, #0]
 800b246:	4a4b      	ldr	r2, [pc, #300]	; (800b374 <UART_SetConfig+0x2f4>)
 800b248:	4293      	cmp	r3, r2
 800b24a:	d125      	bne.n	800b298 <UART_SetConfig+0x218>
 800b24c:	4b46      	ldr	r3, [pc, #280]	; (800b368 <UART_SetConfig+0x2e8>)
 800b24e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b252:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800b256:	2bc0      	cmp	r3, #192	; 0xc0
 800b258:	d016      	beq.n	800b288 <UART_SetConfig+0x208>
 800b25a:	2bc0      	cmp	r3, #192	; 0xc0
 800b25c:	d818      	bhi.n	800b290 <UART_SetConfig+0x210>
 800b25e:	2b80      	cmp	r3, #128	; 0x80
 800b260:	d00a      	beq.n	800b278 <UART_SetConfig+0x1f8>
 800b262:	2b80      	cmp	r3, #128	; 0x80
 800b264:	d814      	bhi.n	800b290 <UART_SetConfig+0x210>
 800b266:	2b00      	cmp	r3, #0
 800b268:	d002      	beq.n	800b270 <UART_SetConfig+0x1f0>
 800b26a:	2b40      	cmp	r3, #64	; 0x40
 800b26c:	d008      	beq.n	800b280 <UART_SetConfig+0x200>
 800b26e:	e00f      	b.n	800b290 <UART_SetConfig+0x210>
 800b270:	2300      	movs	r3, #0
 800b272:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b276:	e042      	b.n	800b2fe <UART_SetConfig+0x27e>
 800b278:	2302      	movs	r3, #2
 800b27a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b27e:	e03e      	b.n	800b2fe <UART_SetConfig+0x27e>
 800b280:	2304      	movs	r3, #4
 800b282:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b286:	e03a      	b.n	800b2fe <UART_SetConfig+0x27e>
 800b288:	2308      	movs	r3, #8
 800b28a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b28e:	e036      	b.n	800b2fe <UART_SetConfig+0x27e>
 800b290:	2310      	movs	r3, #16
 800b292:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b296:	e032      	b.n	800b2fe <UART_SetConfig+0x27e>
 800b298:	697b      	ldr	r3, [r7, #20]
 800b29a:	681b      	ldr	r3, [r3, #0]
 800b29c:	4a30      	ldr	r2, [pc, #192]	; (800b360 <UART_SetConfig+0x2e0>)
 800b29e:	4293      	cmp	r3, r2
 800b2a0:	d12a      	bne.n	800b2f8 <UART_SetConfig+0x278>
 800b2a2:	4b31      	ldr	r3, [pc, #196]	; (800b368 <UART_SetConfig+0x2e8>)
 800b2a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b2a8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800b2ac:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800b2b0:	d01a      	beq.n	800b2e8 <UART_SetConfig+0x268>
 800b2b2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800b2b6:	d81b      	bhi.n	800b2f0 <UART_SetConfig+0x270>
 800b2b8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b2bc:	d00c      	beq.n	800b2d8 <UART_SetConfig+0x258>
 800b2be:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b2c2:	d815      	bhi.n	800b2f0 <UART_SetConfig+0x270>
 800b2c4:	2b00      	cmp	r3, #0
 800b2c6:	d003      	beq.n	800b2d0 <UART_SetConfig+0x250>
 800b2c8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b2cc:	d008      	beq.n	800b2e0 <UART_SetConfig+0x260>
 800b2ce:	e00f      	b.n	800b2f0 <UART_SetConfig+0x270>
 800b2d0:	2300      	movs	r3, #0
 800b2d2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b2d6:	e012      	b.n	800b2fe <UART_SetConfig+0x27e>
 800b2d8:	2302      	movs	r3, #2
 800b2da:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b2de:	e00e      	b.n	800b2fe <UART_SetConfig+0x27e>
 800b2e0:	2304      	movs	r3, #4
 800b2e2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b2e6:	e00a      	b.n	800b2fe <UART_SetConfig+0x27e>
 800b2e8:	2308      	movs	r3, #8
 800b2ea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b2ee:	e006      	b.n	800b2fe <UART_SetConfig+0x27e>
 800b2f0:	2310      	movs	r3, #16
 800b2f2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b2f6:	e002      	b.n	800b2fe <UART_SetConfig+0x27e>
 800b2f8:	2310      	movs	r3, #16
 800b2fa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800b2fe:	697b      	ldr	r3, [r7, #20]
 800b300:	681b      	ldr	r3, [r3, #0]
 800b302:	4a17      	ldr	r2, [pc, #92]	; (800b360 <UART_SetConfig+0x2e0>)
 800b304:	4293      	cmp	r3, r2
 800b306:	f040 80a8 	bne.w	800b45a <UART_SetConfig+0x3da>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800b30a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800b30e:	2b08      	cmp	r3, #8
 800b310:	d834      	bhi.n	800b37c <UART_SetConfig+0x2fc>
 800b312:	a201      	add	r2, pc, #4	; (adr r2, 800b318 <UART_SetConfig+0x298>)
 800b314:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b318:	0800b33d 	.word	0x0800b33d
 800b31c:	0800b37d 	.word	0x0800b37d
 800b320:	0800b345 	.word	0x0800b345
 800b324:	0800b37d 	.word	0x0800b37d
 800b328:	0800b34b 	.word	0x0800b34b
 800b32c:	0800b37d 	.word	0x0800b37d
 800b330:	0800b37d 	.word	0x0800b37d
 800b334:	0800b37d 	.word	0x0800b37d
 800b338:	0800b353 	.word	0x0800b353
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b33c:	f7fc fb12 	bl	8007964 <HAL_RCC_GetPCLK1Freq>
 800b340:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800b342:	e021      	b.n	800b388 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800b344:	4b0c      	ldr	r3, [pc, #48]	; (800b378 <UART_SetConfig+0x2f8>)
 800b346:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800b348:	e01e      	b.n	800b388 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800b34a:	f7fc fa9d 	bl	8007888 <HAL_RCC_GetSysClockFreq>
 800b34e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800b350:	e01a      	b.n	800b388 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b352:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b356:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800b358:	e016      	b.n	800b388 <UART_SetConfig+0x308>
 800b35a:	bf00      	nop
 800b35c:	cfff69f3 	.word	0xcfff69f3
 800b360:	40008000 	.word	0x40008000
 800b364:	40013800 	.word	0x40013800
 800b368:	40021000 	.word	0x40021000
 800b36c:	40004400 	.word	0x40004400
 800b370:	40004800 	.word	0x40004800
 800b374:	40004c00 	.word	0x40004c00
 800b378:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 800b37c:	2300      	movs	r3, #0
 800b37e:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800b380:	2301      	movs	r3, #1
 800b382:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800b386:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800b388:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b38a:	2b00      	cmp	r3, #0
 800b38c:	f000 812a 	beq.w	800b5e4 <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800b390:	697b      	ldr	r3, [r7, #20]
 800b392:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b394:	4a9e      	ldr	r2, [pc, #632]	; (800b610 <UART_SetConfig+0x590>)
 800b396:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b39a:	461a      	mov	r2, r3
 800b39c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b39e:	fbb3 f3f2 	udiv	r3, r3, r2
 800b3a2:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800b3a4:	697b      	ldr	r3, [r7, #20]
 800b3a6:	685a      	ldr	r2, [r3, #4]
 800b3a8:	4613      	mov	r3, r2
 800b3aa:	005b      	lsls	r3, r3, #1
 800b3ac:	4413      	add	r3, r2
 800b3ae:	69ba      	ldr	r2, [r7, #24]
 800b3b0:	429a      	cmp	r2, r3
 800b3b2:	d305      	bcc.n	800b3c0 <UART_SetConfig+0x340>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800b3b4:	697b      	ldr	r3, [r7, #20]
 800b3b6:	685b      	ldr	r3, [r3, #4]
 800b3b8:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800b3ba:	69ba      	ldr	r2, [r7, #24]
 800b3bc:	429a      	cmp	r2, r3
 800b3be:	d903      	bls.n	800b3c8 <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 800b3c0:	2301      	movs	r3, #1
 800b3c2:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800b3c6:	e10d      	b.n	800b5e4 <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b3c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b3ca:	2200      	movs	r2, #0
 800b3cc:	60bb      	str	r3, [r7, #8]
 800b3ce:	60fa      	str	r2, [r7, #12]
 800b3d0:	697b      	ldr	r3, [r7, #20]
 800b3d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b3d4:	4a8e      	ldr	r2, [pc, #568]	; (800b610 <UART_SetConfig+0x590>)
 800b3d6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b3da:	b29b      	uxth	r3, r3
 800b3dc:	2200      	movs	r2, #0
 800b3de:	603b      	str	r3, [r7, #0]
 800b3e0:	607a      	str	r2, [r7, #4]
 800b3e2:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b3e6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800b3ea:	f7f5 fc03 	bl	8000bf4 <__aeabi_uldivmod>
 800b3ee:	4602      	mov	r2, r0
 800b3f0:	460b      	mov	r3, r1
 800b3f2:	4610      	mov	r0, r2
 800b3f4:	4619      	mov	r1, r3
 800b3f6:	f04f 0200 	mov.w	r2, #0
 800b3fa:	f04f 0300 	mov.w	r3, #0
 800b3fe:	020b      	lsls	r3, r1, #8
 800b400:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800b404:	0202      	lsls	r2, r0, #8
 800b406:	6979      	ldr	r1, [r7, #20]
 800b408:	6849      	ldr	r1, [r1, #4]
 800b40a:	0849      	lsrs	r1, r1, #1
 800b40c:	2000      	movs	r0, #0
 800b40e:	460c      	mov	r4, r1
 800b410:	4605      	mov	r5, r0
 800b412:	eb12 0804 	adds.w	r8, r2, r4
 800b416:	eb43 0905 	adc.w	r9, r3, r5
 800b41a:	697b      	ldr	r3, [r7, #20]
 800b41c:	685b      	ldr	r3, [r3, #4]
 800b41e:	2200      	movs	r2, #0
 800b420:	469a      	mov	sl, r3
 800b422:	4693      	mov	fp, r2
 800b424:	4652      	mov	r2, sl
 800b426:	465b      	mov	r3, fp
 800b428:	4640      	mov	r0, r8
 800b42a:	4649      	mov	r1, r9
 800b42c:	f7f5 fbe2 	bl	8000bf4 <__aeabi_uldivmod>
 800b430:	4602      	mov	r2, r0
 800b432:	460b      	mov	r3, r1
 800b434:	4613      	mov	r3, r2
 800b436:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800b438:	6a3b      	ldr	r3, [r7, #32]
 800b43a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b43e:	d308      	bcc.n	800b452 <UART_SetConfig+0x3d2>
 800b440:	6a3b      	ldr	r3, [r7, #32]
 800b442:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b446:	d204      	bcs.n	800b452 <UART_SetConfig+0x3d2>
        {
          huart->Instance->BRR = usartdiv;
 800b448:	697b      	ldr	r3, [r7, #20]
 800b44a:	681b      	ldr	r3, [r3, #0]
 800b44c:	6a3a      	ldr	r2, [r7, #32]
 800b44e:	60da      	str	r2, [r3, #12]
 800b450:	e0c8      	b.n	800b5e4 <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 800b452:	2301      	movs	r3, #1
 800b454:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800b458:	e0c4      	b.n	800b5e4 <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800b45a:	697b      	ldr	r3, [r7, #20]
 800b45c:	69db      	ldr	r3, [r3, #28]
 800b45e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b462:	d167      	bne.n	800b534 <UART_SetConfig+0x4b4>
  {
    switch (clocksource)
 800b464:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800b468:	2b08      	cmp	r3, #8
 800b46a:	d828      	bhi.n	800b4be <UART_SetConfig+0x43e>
 800b46c:	a201      	add	r2, pc, #4	; (adr r2, 800b474 <UART_SetConfig+0x3f4>)
 800b46e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b472:	bf00      	nop
 800b474:	0800b499 	.word	0x0800b499
 800b478:	0800b4a1 	.word	0x0800b4a1
 800b47c:	0800b4a9 	.word	0x0800b4a9
 800b480:	0800b4bf 	.word	0x0800b4bf
 800b484:	0800b4af 	.word	0x0800b4af
 800b488:	0800b4bf 	.word	0x0800b4bf
 800b48c:	0800b4bf 	.word	0x0800b4bf
 800b490:	0800b4bf 	.word	0x0800b4bf
 800b494:	0800b4b7 	.word	0x0800b4b7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b498:	f7fc fa64 	bl	8007964 <HAL_RCC_GetPCLK1Freq>
 800b49c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800b49e:	e014      	b.n	800b4ca <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b4a0:	f7fc fa76 	bl	8007990 <HAL_RCC_GetPCLK2Freq>
 800b4a4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800b4a6:	e010      	b.n	800b4ca <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800b4a8:	4b5a      	ldr	r3, [pc, #360]	; (800b614 <UART_SetConfig+0x594>)
 800b4aa:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800b4ac:	e00d      	b.n	800b4ca <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800b4ae:	f7fc f9eb 	bl	8007888 <HAL_RCC_GetSysClockFreq>
 800b4b2:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800b4b4:	e009      	b.n	800b4ca <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b4b6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b4ba:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800b4bc:	e005      	b.n	800b4ca <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 800b4be:	2300      	movs	r3, #0
 800b4c0:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800b4c2:	2301      	movs	r3, #1
 800b4c4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800b4c8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800b4ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b4cc:	2b00      	cmp	r3, #0
 800b4ce:	f000 8089 	beq.w	800b5e4 <UART_SetConfig+0x564>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b4d2:	697b      	ldr	r3, [r7, #20]
 800b4d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b4d6:	4a4e      	ldr	r2, [pc, #312]	; (800b610 <UART_SetConfig+0x590>)
 800b4d8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b4dc:	461a      	mov	r2, r3
 800b4de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b4e0:	fbb3 f3f2 	udiv	r3, r3, r2
 800b4e4:	005a      	lsls	r2, r3, #1
 800b4e6:	697b      	ldr	r3, [r7, #20]
 800b4e8:	685b      	ldr	r3, [r3, #4]
 800b4ea:	085b      	lsrs	r3, r3, #1
 800b4ec:	441a      	add	r2, r3
 800b4ee:	697b      	ldr	r3, [r7, #20]
 800b4f0:	685b      	ldr	r3, [r3, #4]
 800b4f2:	fbb2 f3f3 	udiv	r3, r2, r3
 800b4f6:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b4f8:	6a3b      	ldr	r3, [r7, #32]
 800b4fa:	2b0f      	cmp	r3, #15
 800b4fc:	d916      	bls.n	800b52c <UART_SetConfig+0x4ac>
 800b4fe:	6a3b      	ldr	r3, [r7, #32]
 800b500:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b504:	d212      	bcs.n	800b52c <UART_SetConfig+0x4ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800b506:	6a3b      	ldr	r3, [r7, #32]
 800b508:	b29b      	uxth	r3, r3
 800b50a:	f023 030f 	bic.w	r3, r3, #15
 800b50e:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800b510:	6a3b      	ldr	r3, [r7, #32]
 800b512:	085b      	lsrs	r3, r3, #1
 800b514:	b29b      	uxth	r3, r3
 800b516:	f003 0307 	and.w	r3, r3, #7
 800b51a:	b29a      	uxth	r2, r3
 800b51c:	8bfb      	ldrh	r3, [r7, #30]
 800b51e:	4313      	orrs	r3, r2
 800b520:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800b522:	697b      	ldr	r3, [r7, #20]
 800b524:	681b      	ldr	r3, [r3, #0]
 800b526:	8bfa      	ldrh	r2, [r7, #30]
 800b528:	60da      	str	r2, [r3, #12]
 800b52a:	e05b      	b.n	800b5e4 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 800b52c:	2301      	movs	r3, #1
 800b52e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800b532:	e057      	b.n	800b5e4 <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 800b534:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800b538:	2b08      	cmp	r3, #8
 800b53a:	d828      	bhi.n	800b58e <UART_SetConfig+0x50e>
 800b53c:	a201      	add	r2, pc, #4	; (adr r2, 800b544 <UART_SetConfig+0x4c4>)
 800b53e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b542:	bf00      	nop
 800b544:	0800b569 	.word	0x0800b569
 800b548:	0800b571 	.word	0x0800b571
 800b54c:	0800b579 	.word	0x0800b579
 800b550:	0800b58f 	.word	0x0800b58f
 800b554:	0800b57f 	.word	0x0800b57f
 800b558:	0800b58f 	.word	0x0800b58f
 800b55c:	0800b58f 	.word	0x0800b58f
 800b560:	0800b58f 	.word	0x0800b58f
 800b564:	0800b587 	.word	0x0800b587
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b568:	f7fc f9fc 	bl	8007964 <HAL_RCC_GetPCLK1Freq>
 800b56c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800b56e:	e014      	b.n	800b59a <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b570:	f7fc fa0e 	bl	8007990 <HAL_RCC_GetPCLK2Freq>
 800b574:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800b576:	e010      	b.n	800b59a <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800b578:	4b26      	ldr	r3, [pc, #152]	; (800b614 <UART_SetConfig+0x594>)
 800b57a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800b57c:	e00d      	b.n	800b59a <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800b57e:	f7fc f983 	bl	8007888 <HAL_RCC_GetSysClockFreq>
 800b582:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800b584:	e009      	b.n	800b59a <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b586:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b58a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800b58c:	e005      	b.n	800b59a <UART_SetConfig+0x51a>
      default:
        pclk = 0U;
 800b58e:	2300      	movs	r3, #0
 800b590:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800b592:	2301      	movs	r3, #1
 800b594:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800b598:	bf00      	nop
    }

    if (pclk != 0U)
 800b59a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b59c:	2b00      	cmp	r3, #0
 800b59e:	d021      	beq.n	800b5e4 <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b5a0:	697b      	ldr	r3, [r7, #20]
 800b5a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b5a4:	4a1a      	ldr	r2, [pc, #104]	; (800b610 <UART_SetConfig+0x590>)
 800b5a6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b5aa:	461a      	mov	r2, r3
 800b5ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b5ae:	fbb3 f2f2 	udiv	r2, r3, r2
 800b5b2:	697b      	ldr	r3, [r7, #20]
 800b5b4:	685b      	ldr	r3, [r3, #4]
 800b5b6:	085b      	lsrs	r3, r3, #1
 800b5b8:	441a      	add	r2, r3
 800b5ba:	697b      	ldr	r3, [r7, #20]
 800b5bc:	685b      	ldr	r3, [r3, #4]
 800b5be:	fbb2 f3f3 	udiv	r3, r2, r3
 800b5c2:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b5c4:	6a3b      	ldr	r3, [r7, #32]
 800b5c6:	2b0f      	cmp	r3, #15
 800b5c8:	d909      	bls.n	800b5de <UART_SetConfig+0x55e>
 800b5ca:	6a3b      	ldr	r3, [r7, #32]
 800b5cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b5d0:	d205      	bcs.n	800b5de <UART_SetConfig+0x55e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800b5d2:	6a3b      	ldr	r3, [r7, #32]
 800b5d4:	b29a      	uxth	r2, r3
 800b5d6:	697b      	ldr	r3, [r7, #20]
 800b5d8:	681b      	ldr	r3, [r3, #0]
 800b5da:	60da      	str	r2, [r3, #12]
 800b5dc:	e002      	b.n	800b5e4 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 800b5de:	2301      	movs	r3, #1
 800b5e0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800b5e4:	697b      	ldr	r3, [r7, #20]
 800b5e6:	2201      	movs	r2, #1
 800b5e8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800b5ec:	697b      	ldr	r3, [r7, #20]
 800b5ee:	2201      	movs	r2, #1
 800b5f0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800b5f4:	697b      	ldr	r3, [r7, #20]
 800b5f6:	2200      	movs	r2, #0
 800b5f8:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800b5fa:	697b      	ldr	r3, [r7, #20]
 800b5fc:	2200      	movs	r2, #0
 800b5fe:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800b600:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 800b604:	4618      	mov	r0, r3
 800b606:	3730      	adds	r7, #48	; 0x30
 800b608:	46bd      	mov	sp, r7
 800b60a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800b60e:	bf00      	nop
 800b610:	0800cec8 	.word	0x0800cec8
 800b614:	00f42400 	.word	0x00f42400

0800b618 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800b618:	b480      	push	{r7}
 800b61a:	b083      	sub	sp, #12
 800b61c:	af00      	add	r7, sp, #0
 800b61e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800b620:	687b      	ldr	r3, [r7, #4]
 800b622:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b624:	f003 0301 	and.w	r3, r3, #1
 800b628:	2b00      	cmp	r3, #0
 800b62a:	d00a      	beq.n	800b642 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800b62c:	687b      	ldr	r3, [r7, #4]
 800b62e:	681b      	ldr	r3, [r3, #0]
 800b630:	685b      	ldr	r3, [r3, #4]
 800b632:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800b636:	687b      	ldr	r3, [r7, #4]
 800b638:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b63a:	687b      	ldr	r3, [r7, #4]
 800b63c:	681b      	ldr	r3, [r3, #0]
 800b63e:	430a      	orrs	r2, r1
 800b640:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800b642:	687b      	ldr	r3, [r7, #4]
 800b644:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b646:	f003 0302 	and.w	r3, r3, #2
 800b64a:	2b00      	cmp	r3, #0
 800b64c:	d00a      	beq.n	800b664 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800b64e:	687b      	ldr	r3, [r7, #4]
 800b650:	681b      	ldr	r3, [r3, #0]
 800b652:	685b      	ldr	r3, [r3, #4]
 800b654:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800b658:	687b      	ldr	r3, [r7, #4]
 800b65a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b65c:	687b      	ldr	r3, [r7, #4]
 800b65e:	681b      	ldr	r3, [r3, #0]
 800b660:	430a      	orrs	r2, r1
 800b662:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800b664:	687b      	ldr	r3, [r7, #4]
 800b666:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b668:	f003 0304 	and.w	r3, r3, #4
 800b66c:	2b00      	cmp	r3, #0
 800b66e:	d00a      	beq.n	800b686 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800b670:	687b      	ldr	r3, [r7, #4]
 800b672:	681b      	ldr	r3, [r3, #0]
 800b674:	685b      	ldr	r3, [r3, #4]
 800b676:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800b67a:	687b      	ldr	r3, [r7, #4]
 800b67c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b67e:	687b      	ldr	r3, [r7, #4]
 800b680:	681b      	ldr	r3, [r3, #0]
 800b682:	430a      	orrs	r2, r1
 800b684:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800b686:	687b      	ldr	r3, [r7, #4]
 800b688:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b68a:	f003 0308 	and.w	r3, r3, #8
 800b68e:	2b00      	cmp	r3, #0
 800b690:	d00a      	beq.n	800b6a8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800b692:	687b      	ldr	r3, [r7, #4]
 800b694:	681b      	ldr	r3, [r3, #0]
 800b696:	685b      	ldr	r3, [r3, #4]
 800b698:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800b69c:	687b      	ldr	r3, [r7, #4]
 800b69e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b6a0:	687b      	ldr	r3, [r7, #4]
 800b6a2:	681b      	ldr	r3, [r3, #0]
 800b6a4:	430a      	orrs	r2, r1
 800b6a6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800b6a8:	687b      	ldr	r3, [r7, #4]
 800b6aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b6ac:	f003 0310 	and.w	r3, r3, #16
 800b6b0:	2b00      	cmp	r3, #0
 800b6b2:	d00a      	beq.n	800b6ca <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800b6b4:	687b      	ldr	r3, [r7, #4]
 800b6b6:	681b      	ldr	r3, [r3, #0]
 800b6b8:	689b      	ldr	r3, [r3, #8]
 800b6ba:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800b6be:	687b      	ldr	r3, [r7, #4]
 800b6c0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800b6c2:	687b      	ldr	r3, [r7, #4]
 800b6c4:	681b      	ldr	r3, [r3, #0]
 800b6c6:	430a      	orrs	r2, r1
 800b6c8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800b6ca:	687b      	ldr	r3, [r7, #4]
 800b6cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b6ce:	f003 0320 	and.w	r3, r3, #32
 800b6d2:	2b00      	cmp	r3, #0
 800b6d4:	d00a      	beq.n	800b6ec <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800b6d6:	687b      	ldr	r3, [r7, #4]
 800b6d8:	681b      	ldr	r3, [r3, #0]
 800b6da:	689b      	ldr	r3, [r3, #8]
 800b6dc:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800b6e0:	687b      	ldr	r3, [r7, #4]
 800b6e2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800b6e4:	687b      	ldr	r3, [r7, #4]
 800b6e6:	681b      	ldr	r3, [r3, #0]
 800b6e8:	430a      	orrs	r2, r1
 800b6ea:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800b6ec:	687b      	ldr	r3, [r7, #4]
 800b6ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b6f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b6f4:	2b00      	cmp	r3, #0
 800b6f6:	d01a      	beq.n	800b72e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800b6f8:	687b      	ldr	r3, [r7, #4]
 800b6fa:	681b      	ldr	r3, [r3, #0]
 800b6fc:	685b      	ldr	r3, [r3, #4]
 800b6fe:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800b702:	687b      	ldr	r3, [r7, #4]
 800b704:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b706:	687b      	ldr	r3, [r7, #4]
 800b708:	681b      	ldr	r3, [r3, #0]
 800b70a:	430a      	orrs	r2, r1
 800b70c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800b70e:	687b      	ldr	r3, [r7, #4]
 800b710:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b712:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b716:	d10a      	bne.n	800b72e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800b718:	687b      	ldr	r3, [r7, #4]
 800b71a:	681b      	ldr	r3, [r3, #0]
 800b71c:	685b      	ldr	r3, [r3, #4]
 800b71e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800b722:	687b      	ldr	r3, [r7, #4]
 800b724:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800b726:	687b      	ldr	r3, [r7, #4]
 800b728:	681b      	ldr	r3, [r3, #0]
 800b72a:	430a      	orrs	r2, r1
 800b72c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800b72e:	687b      	ldr	r3, [r7, #4]
 800b730:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b732:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b736:	2b00      	cmp	r3, #0
 800b738:	d00a      	beq.n	800b750 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800b73a:	687b      	ldr	r3, [r7, #4]
 800b73c:	681b      	ldr	r3, [r3, #0]
 800b73e:	685b      	ldr	r3, [r3, #4]
 800b740:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800b744:	687b      	ldr	r3, [r7, #4]
 800b746:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800b748:	687b      	ldr	r3, [r7, #4]
 800b74a:	681b      	ldr	r3, [r3, #0]
 800b74c:	430a      	orrs	r2, r1
 800b74e:	605a      	str	r2, [r3, #4]
  }
}
 800b750:	bf00      	nop
 800b752:	370c      	adds	r7, #12
 800b754:	46bd      	mov	sp, r7
 800b756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b75a:	4770      	bx	lr

0800b75c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800b75c:	b580      	push	{r7, lr}
 800b75e:	b086      	sub	sp, #24
 800b760:	af02      	add	r7, sp, #8
 800b762:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b764:	687b      	ldr	r3, [r7, #4]
 800b766:	2200      	movs	r2, #0
 800b768:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800b76c:	f7f8 f922 	bl	80039b4 <HAL_GetTick>
 800b770:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800b772:	687b      	ldr	r3, [r7, #4]
 800b774:	681b      	ldr	r3, [r3, #0]
 800b776:	681b      	ldr	r3, [r3, #0]
 800b778:	f003 0308 	and.w	r3, r3, #8
 800b77c:	2b08      	cmp	r3, #8
 800b77e:	d10e      	bne.n	800b79e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b780:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800b784:	9300      	str	r3, [sp, #0]
 800b786:	68fb      	ldr	r3, [r7, #12]
 800b788:	2200      	movs	r2, #0
 800b78a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800b78e:	6878      	ldr	r0, [r7, #4]
 800b790:	f000 f82f 	bl	800b7f2 <UART_WaitOnFlagUntilTimeout>
 800b794:	4603      	mov	r3, r0
 800b796:	2b00      	cmp	r3, #0
 800b798:	d001      	beq.n	800b79e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b79a:	2303      	movs	r3, #3
 800b79c:	e025      	b.n	800b7ea <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800b79e:	687b      	ldr	r3, [r7, #4]
 800b7a0:	681b      	ldr	r3, [r3, #0]
 800b7a2:	681b      	ldr	r3, [r3, #0]
 800b7a4:	f003 0304 	and.w	r3, r3, #4
 800b7a8:	2b04      	cmp	r3, #4
 800b7aa:	d10e      	bne.n	800b7ca <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b7ac:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800b7b0:	9300      	str	r3, [sp, #0]
 800b7b2:	68fb      	ldr	r3, [r7, #12]
 800b7b4:	2200      	movs	r2, #0
 800b7b6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800b7ba:	6878      	ldr	r0, [r7, #4]
 800b7bc:	f000 f819 	bl	800b7f2 <UART_WaitOnFlagUntilTimeout>
 800b7c0:	4603      	mov	r3, r0
 800b7c2:	2b00      	cmp	r3, #0
 800b7c4:	d001      	beq.n	800b7ca <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b7c6:	2303      	movs	r3, #3
 800b7c8:	e00f      	b.n	800b7ea <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800b7ca:	687b      	ldr	r3, [r7, #4]
 800b7cc:	2220      	movs	r2, #32
 800b7ce:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800b7d2:	687b      	ldr	r3, [r7, #4]
 800b7d4:	2220      	movs	r2, #32
 800b7d6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b7da:	687b      	ldr	r3, [r7, #4]
 800b7dc:	2200      	movs	r2, #0
 800b7de:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800b7e0:	687b      	ldr	r3, [r7, #4]
 800b7e2:	2200      	movs	r2, #0
 800b7e4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800b7e8:	2300      	movs	r3, #0
}
 800b7ea:	4618      	mov	r0, r3
 800b7ec:	3710      	adds	r7, #16
 800b7ee:	46bd      	mov	sp, r7
 800b7f0:	bd80      	pop	{r7, pc}

0800b7f2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800b7f2:	b580      	push	{r7, lr}
 800b7f4:	b09c      	sub	sp, #112	; 0x70
 800b7f6:	af00      	add	r7, sp, #0
 800b7f8:	60f8      	str	r0, [r7, #12]
 800b7fa:	60b9      	str	r1, [r7, #8]
 800b7fc:	603b      	str	r3, [r7, #0]
 800b7fe:	4613      	mov	r3, r2
 800b800:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b802:	e0a9      	b.n	800b958 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b804:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b806:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b80a:	f000 80a5 	beq.w	800b958 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b80e:	f7f8 f8d1 	bl	80039b4 <HAL_GetTick>
 800b812:	4602      	mov	r2, r0
 800b814:	683b      	ldr	r3, [r7, #0]
 800b816:	1ad3      	subs	r3, r2, r3
 800b818:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800b81a:	429a      	cmp	r2, r3
 800b81c:	d302      	bcc.n	800b824 <UART_WaitOnFlagUntilTimeout+0x32>
 800b81e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b820:	2b00      	cmp	r3, #0
 800b822:	d140      	bne.n	800b8a6 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800b824:	68fb      	ldr	r3, [r7, #12]
 800b826:	681b      	ldr	r3, [r3, #0]
 800b828:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b82a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b82c:	e853 3f00 	ldrex	r3, [r3]
 800b830:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800b832:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b834:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800b838:	667b      	str	r3, [r7, #100]	; 0x64
 800b83a:	68fb      	ldr	r3, [r7, #12]
 800b83c:	681b      	ldr	r3, [r3, #0]
 800b83e:	461a      	mov	r2, r3
 800b840:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b842:	65fb      	str	r3, [r7, #92]	; 0x5c
 800b844:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b846:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800b848:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800b84a:	e841 2300 	strex	r3, r2, [r1]
 800b84e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800b850:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b852:	2b00      	cmp	r3, #0
 800b854:	d1e6      	bne.n	800b824 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b856:	68fb      	ldr	r3, [r7, #12]
 800b858:	681b      	ldr	r3, [r3, #0]
 800b85a:	3308      	adds	r3, #8
 800b85c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b85e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b860:	e853 3f00 	ldrex	r3, [r3]
 800b864:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800b866:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b868:	f023 0301 	bic.w	r3, r3, #1
 800b86c:	663b      	str	r3, [r7, #96]	; 0x60
 800b86e:	68fb      	ldr	r3, [r7, #12]
 800b870:	681b      	ldr	r3, [r3, #0]
 800b872:	3308      	adds	r3, #8
 800b874:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800b876:	64ba      	str	r2, [r7, #72]	; 0x48
 800b878:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b87a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800b87c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b87e:	e841 2300 	strex	r3, r2, [r1]
 800b882:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800b884:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b886:	2b00      	cmp	r3, #0
 800b888:	d1e5      	bne.n	800b856 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800b88a:	68fb      	ldr	r3, [r7, #12]
 800b88c:	2220      	movs	r2, #32
 800b88e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800b892:	68fb      	ldr	r3, [r7, #12]
 800b894:	2220      	movs	r2, #32
 800b896:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800b89a:	68fb      	ldr	r3, [r7, #12]
 800b89c:	2200      	movs	r2, #0
 800b89e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800b8a2:	2303      	movs	r3, #3
 800b8a4:	e069      	b.n	800b97a <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800b8a6:	68fb      	ldr	r3, [r7, #12]
 800b8a8:	681b      	ldr	r3, [r3, #0]
 800b8aa:	681b      	ldr	r3, [r3, #0]
 800b8ac:	f003 0304 	and.w	r3, r3, #4
 800b8b0:	2b00      	cmp	r3, #0
 800b8b2:	d051      	beq.n	800b958 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800b8b4:	68fb      	ldr	r3, [r7, #12]
 800b8b6:	681b      	ldr	r3, [r3, #0]
 800b8b8:	69db      	ldr	r3, [r3, #28]
 800b8ba:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b8be:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b8c2:	d149      	bne.n	800b958 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800b8c4:	68fb      	ldr	r3, [r7, #12]
 800b8c6:	681b      	ldr	r3, [r3, #0]
 800b8c8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800b8cc:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800b8ce:	68fb      	ldr	r3, [r7, #12]
 800b8d0:	681b      	ldr	r3, [r3, #0]
 800b8d2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b8d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b8d6:	e853 3f00 	ldrex	r3, [r3]
 800b8da:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800b8dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b8de:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800b8e2:	66fb      	str	r3, [r7, #108]	; 0x6c
 800b8e4:	68fb      	ldr	r3, [r7, #12]
 800b8e6:	681b      	ldr	r3, [r3, #0]
 800b8e8:	461a      	mov	r2, r3
 800b8ea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b8ec:	637b      	str	r3, [r7, #52]	; 0x34
 800b8ee:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b8f0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800b8f2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b8f4:	e841 2300 	strex	r3, r2, [r1]
 800b8f8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800b8fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b8fc:	2b00      	cmp	r3, #0
 800b8fe:	d1e6      	bne.n	800b8ce <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b900:	68fb      	ldr	r3, [r7, #12]
 800b902:	681b      	ldr	r3, [r3, #0]
 800b904:	3308      	adds	r3, #8
 800b906:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b908:	697b      	ldr	r3, [r7, #20]
 800b90a:	e853 3f00 	ldrex	r3, [r3]
 800b90e:	613b      	str	r3, [r7, #16]
   return(result);
 800b910:	693b      	ldr	r3, [r7, #16]
 800b912:	f023 0301 	bic.w	r3, r3, #1
 800b916:	66bb      	str	r3, [r7, #104]	; 0x68
 800b918:	68fb      	ldr	r3, [r7, #12]
 800b91a:	681b      	ldr	r3, [r3, #0]
 800b91c:	3308      	adds	r3, #8
 800b91e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800b920:	623a      	str	r2, [r7, #32]
 800b922:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b924:	69f9      	ldr	r1, [r7, #28]
 800b926:	6a3a      	ldr	r2, [r7, #32]
 800b928:	e841 2300 	strex	r3, r2, [r1]
 800b92c:	61bb      	str	r3, [r7, #24]
   return(result);
 800b92e:	69bb      	ldr	r3, [r7, #24]
 800b930:	2b00      	cmp	r3, #0
 800b932:	d1e5      	bne.n	800b900 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 800b934:	68fb      	ldr	r3, [r7, #12]
 800b936:	2220      	movs	r2, #32
 800b938:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800b93c:	68fb      	ldr	r3, [r7, #12]
 800b93e:	2220      	movs	r2, #32
 800b940:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800b944:	68fb      	ldr	r3, [r7, #12]
 800b946:	2220      	movs	r2, #32
 800b948:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800b94c:	68fb      	ldr	r3, [r7, #12]
 800b94e:	2200      	movs	r2, #0
 800b950:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800b954:	2303      	movs	r3, #3
 800b956:	e010      	b.n	800b97a <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b958:	68fb      	ldr	r3, [r7, #12]
 800b95a:	681b      	ldr	r3, [r3, #0]
 800b95c:	69da      	ldr	r2, [r3, #28]
 800b95e:	68bb      	ldr	r3, [r7, #8]
 800b960:	4013      	ands	r3, r2
 800b962:	68ba      	ldr	r2, [r7, #8]
 800b964:	429a      	cmp	r2, r3
 800b966:	bf0c      	ite	eq
 800b968:	2301      	moveq	r3, #1
 800b96a:	2300      	movne	r3, #0
 800b96c:	b2db      	uxtb	r3, r3
 800b96e:	461a      	mov	r2, r3
 800b970:	79fb      	ldrb	r3, [r7, #7]
 800b972:	429a      	cmp	r2, r3
 800b974:	f43f af46 	beq.w	800b804 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800b978:	2300      	movs	r3, #0
}
 800b97a:	4618      	mov	r0, r3
 800b97c:	3770      	adds	r7, #112	; 0x70
 800b97e:	46bd      	mov	sp, r7
 800b980:	bd80      	pop	{r7, pc}

0800b982 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800b982:	b480      	push	{r7}
 800b984:	b095      	sub	sp, #84	; 0x54
 800b986:	af00      	add	r7, sp, #0
 800b988:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b98a:	687b      	ldr	r3, [r7, #4]
 800b98c:	681b      	ldr	r3, [r3, #0]
 800b98e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b990:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b992:	e853 3f00 	ldrex	r3, [r3]
 800b996:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800b998:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b99a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800b99e:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b9a0:	687b      	ldr	r3, [r7, #4]
 800b9a2:	681b      	ldr	r3, [r3, #0]
 800b9a4:	461a      	mov	r2, r3
 800b9a6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b9a8:	643b      	str	r3, [r7, #64]	; 0x40
 800b9aa:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b9ac:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800b9ae:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800b9b0:	e841 2300 	strex	r3, r2, [r1]
 800b9b4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800b9b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b9b8:	2b00      	cmp	r3, #0
 800b9ba:	d1e6      	bne.n	800b98a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800b9bc:	687b      	ldr	r3, [r7, #4]
 800b9be:	681b      	ldr	r3, [r3, #0]
 800b9c0:	3308      	adds	r3, #8
 800b9c2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b9c4:	6a3b      	ldr	r3, [r7, #32]
 800b9c6:	e853 3f00 	ldrex	r3, [r3]
 800b9ca:	61fb      	str	r3, [r7, #28]
   return(result);
 800b9cc:	69fb      	ldr	r3, [r7, #28]
 800b9ce:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800b9d2:	f023 0301 	bic.w	r3, r3, #1
 800b9d6:	64bb      	str	r3, [r7, #72]	; 0x48
 800b9d8:	687b      	ldr	r3, [r7, #4]
 800b9da:	681b      	ldr	r3, [r3, #0]
 800b9dc:	3308      	adds	r3, #8
 800b9de:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b9e0:	62fa      	str	r2, [r7, #44]	; 0x2c
 800b9e2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b9e4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800b9e6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b9e8:	e841 2300 	strex	r3, r2, [r1]
 800b9ec:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800b9ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b9f0:	2b00      	cmp	r3, #0
 800b9f2:	d1e3      	bne.n	800b9bc <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b9f4:	687b      	ldr	r3, [r7, #4]
 800b9f6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b9f8:	2b01      	cmp	r3, #1
 800b9fa:	d118      	bne.n	800ba2e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b9fc:	687b      	ldr	r3, [r7, #4]
 800b9fe:	681b      	ldr	r3, [r3, #0]
 800ba00:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ba02:	68fb      	ldr	r3, [r7, #12]
 800ba04:	e853 3f00 	ldrex	r3, [r3]
 800ba08:	60bb      	str	r3, [r7, #8]
   return(result);
 800ba0a:	68bb      	ldr	r3, [r7, #8]
 800ba0c:	f023 0310 	bic.w	r3, r3, #16
 800ba10:	647b      	str	r3, [r7, #68]	; 0x44
 800ba12:	687b      	ldr	r3, [r7, #4]
 800ba14:	681b      	ldr	r3, [r3, #0]
 800ba16:	461a      	mov	r2, r3
 800ba18:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ba1a:	61bb      	str	r3, [r7, #24]
 800ba1c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ba1e:	6979      	ldr	r1, [r7, #20]
 800ba20:	69ba      	ldr	r2, [r7, #24]
 800ba22:	e841 2300 	strex	r3, r2, [r1]
 800ba26:	613b      	str	r3, [r7, #16]
   return(result);
 800ba28:	693b      	ldr	r3, [r7, #16]
 800ba2a:	2b00      	cmp	r3, #0
 800ba2c:	d1e6      	bne.n	800b9fc <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800ba2e:	687b      	ldr	r3, [r7, #4]
 800ba30:	2220      	movs	r2, #32
 800ba32:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ba36:	687b      	ldr	r3, [r7, #4]
 800ba38:	2200      	movs	r2, #0
 800ba3a:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800ba3c:	687b      	ldr	r3, [r7, #4]
 800ba3e:	2200      	movs	r2, #0
 800ba40:	671a      	str	r2, [r3, #112]	; 0x70
}
 800ba42:	bf00      	nop
 800ba44:	3754      	adds	r7, #84	; 0x54
 800ba46:	46bd      	mov	sp, r7
 800ba48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba4c:	4770      	bx	lr

0800ba4e <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800ba4e:	b580      	push	{r7, lr}
 800ba50:	b084      	sub	sp, #16
 800ba52:	af00      	add	r7, sp, #0
 800ba54:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800ba56:	687b      	ldr	r3, [r7, #4]
 800ba58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ba5a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800ba5c:	68fb      	ldr	r3, [r7, #12]
 800ba5e:	2200      	movs	r2, #0
 800ba60:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800ba64:	68fb      	ldr	r3, [r7, #12]
 800ba66:	2200      	movs	r2, #0
 800ba68:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800ba6c:	68f8      	ldr	r0, [r7, #12]
 800ba6e:	f7ff faf1 	bl	800b054 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ba72:	bf00      	nop
 800ba74:	3710      	adds	r7, #16
 800ba76:	46bd      	mov	sp, r7
 800ba78:	bd80      	pop	{r7, pc}

0800ba7a <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800ba7a:	b580      	push	{r7, lr}
 800ba7c:	b088      	sub	sp, #32
 800ba7e:	af00      	add	r7, sp, #0
 800ba80:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800ba82:	687b      	ldr	r3, [r7, #4]
 800ba84:	681b      	ldr	r3, [r3, #0]
 800ba86:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ba88:	68fb      	ldr	r3, [r7, #12]
 800ba8a:	e853 3f00 	ldrex	r3, [r3]
 800ba8e:	60bb      	str	r3, [r7, #8]
   return(result);
 800ba90:	68bb      	ldr	r3, [r7, #8]
 800ba92:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ba96:	61fb      	str	r3, [r7, #28]
 800ba98:	687b      	ldr	r3, [r7, #4]
 800ba9a:	681b      	ldr	r3, [r3, #0]
 800ba9c:	461a      	mov	r2, r3
 800ba9e:	69fb      	ldr	r3, [r7, #28]
 800baa0:	61bb      	str	r3, [r7, #24]
 800baa2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800baa4:	6979      	ldr	r1, [r7, #20]
 800baa6:	69ba      	ldr	r2, [r7, #24]
 800baa8:	e841 2300 	strex	r3, r2, [r1]
 800baac:	613b      	str	r3, [r7, #16]
   return(result);
 800baae:	693b      	ldr	r3, [r7, #16]
 800bab0:	2b00      	cmp	r3, #0
 800bab2:	d1e6      	bne.n	800ba82 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800bab4:	687b      	ldr	r3, [r7, #4]
 800bab6:	2220      	movs	r2, #32
 800bab8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800babc:	687b      	ldr	r3, [r7, #4]
 800babe:	2200      	movs	r2, #0
 800bac0:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800bac2:	6878      	ldr	r0, [r7, #4]
 800bac4:	f7ff fabc 	bl	800b040 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800bac8:	bf00      	nop
 800baca:	3720      	adds	r7, #32
 800bacc:	46bd      	mov	sp, r7
 800bace:	bd80      	pop	{r7, pc}

0800bad0 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800bad0:	b480      	push	{r7}
 800bad2:	b083      	sub	sp, #12
 800bad4:	af00      	add	r7, sp, #0
 800bad6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800bad8:	bf00      	nop
 800bada:	370c      	adds	r7, #12
 800badc:	46bd      	mov	sp, r7
 800bade:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bae2:	4770      	bx	lr

0800bae4 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800bae4:	b480      	push	{r7}
 800bae6:	b083      	sub	sp, #12
 800bae8:	af00      	add	r7, sp, #0
 800baea:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800baec:	bf00      	nop
 800baee:	370c      	adds	r7, #12
 800baf0:	46bd      	mov	sp, r7
 800baf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800baf6:	4770      	bx	lr

0800baf8 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800baf8:	b480      	push	{r7}
 800bafa:	b083      	sub	sp, #12
 800bafc:	af00      	add	r7, sp, #0
 800bafe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800bb00:	bf00      	nop
 800bb02:	370c      	adds	r7, #12
 800bb04:	46bd      	mov	sp, r7
 800bb06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb0a:	4770      	bx	lr

0800bb0c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800bb0c:	b480      	push	{r7}
 800bb0e:	b085      	sub	sp, #20
 800bb10:	af00      	add	r7, sp, #0
 800bb12:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800bb14:	687b      	ldr	r3, [r7, #4]
 800bb16:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800bb1a:	2b01      	cmp	r3, #1
 800bb1c:	d101      	bne.n	800bb22 <HAL_UARTEx_DisableFifoMode+0x16>
 800bb1e:	2302      	movs	r3, #2
 800bb20:	e027      	b.n	800bb72 <HAL_UARTEx_DisableFifoMode+0x66>
 800bb22:	687b      	ldr	r3, [r7, #4]
 800bb24:	2201      	movs	r2, #1
 800bb26:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800bb2a:	687b      	ldr	r3, [r7, #4]
 800bb2c:	2224      	movs	r2, #36	; 0x24
 800bb2e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800bb32:	687b      	ldr	r3, [r7, #4]
 800bb34:	681b      	ldr	r3, [r3, #0]
 800bb36:	681b      	ldr	r3, [r3, #0]
 800bb38:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800bb3a:	687b      	ldr	r3, [r7, #4]
 800bb3c:	681b      	ldr	r3, [r3, #0]
 800bb3e:	681a      	ldr	r2, [r3, #0]
 800bb40:	687b      	ldr	r3, [r7, #4]
 800bb42:	681b      	ldr	r3, [r3, #0]
 800bb44:	f022 0201 	bic.w	r2, r2, #1
 800bb48:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800bb4a:	68fb      	ldr	r3, [r7, #12]
 800bb4c:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800bb50:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800bb52:	687b      	ldr	r3, [r7, #4]
 800bb54:	2200      	movs	r2, #0
 800bb56:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800bb58:	687b      	ldr	r3, [r7, #4]
 800bb5a:	681b      	ldr	r3, [r3, #0]
 800bb5c:	68fa      	ldr	r2, [r7, #12]
 800bb5e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800bb60:	687b      	ldr	r3, [r7, #4]
 800bb62:	2220      	movs	r2, #32
 800bb64:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800bb68:	687b      	ldr	r3, [r7, #4]
 800bb6a:	2200      	movs	r2, #0
 800bb6c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800bb70:	2300      	movs	r3, #0
}
 800bb72:	4618      	mov	r0, r3
 800bb74:	3714      	adds	r7, #20
 800bb76:	46bd      	mov	sp, r7
 800bb78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb7c:	4770      	bx	lr

0800bb7e <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800bb7e:	b580      	push	{r7, lr}
 800bb80:	b084      	sub	sp, #16
 800bb82:	af00      	add	r7, sp, #0
 800bb84:	6078      	str	r0, [r7, #4]
 800bb86:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800bb88:	687b      	ldr	r3, [r7, #4]
 800bb8a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800bb8e:	2b01      	cmp	r3, #1
 800bb90:	d101      	bne.n	800bb96 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800bb92:	2302      	movs	r3, #2
 800bb94:	e02d      	b.n	800bbf2 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800bb96:	687b      	ldr	r3, [r7, #4]
 800bb98:	2201      	movs	r2, #1
 800bb9a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800bb9e:	687b      	ldr	r3, [r7, #4]
 800bba0:	2224      	movs	r2, #36	; 0x24
 800bba2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800bba6:	687b      	ldr	r3, [r7, #4]
 800bba8:	681b      	ldr	r3, [r3, #0]
 800bbaa:	681b      	ldr	r3, [r3, #0]
 800bbac:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800bbae:	687b      	ldr	r3, [r7, #4]
 800bbb0:	681b      	ldr	r3, [r3, #0]
 800bbb2:	681a      	ldr	r2, [r3, #0]
 800bbb4:	687b      	ldr	r3, [r7, #4]
 800bbb6:	681b      	ldr	r3, [r3, #0]
 800bbb8:	f022 0201 	bic.w	r2, r2, #1
 800bbbc:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800bbbe:	687b      	ldr	r3, [r7, #4]
 800bbc0:	681b      	ldr	r3, [r3, #0]
 800bbc2:	689b      	ldr	r3, [r3, #8]
 800bbc4:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800bbc8:	687b      	ldr	r3, [r7, #4]
 800bbca:	681b      	ldr	r3, [r3, #0]
 800bbcc:	683a      	ldr	r2, [r7, #0]
 800bbce:	430a      	orrs	r2, r1
 800bbd0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800bbd2:	6878      	ldr	r0, [r7, #4]
 800bbd4:	f000 f850 	bl	800bc78 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800bbd8:	687b      	ldr	r3, [r7, #4]
 800bbda:	681b      	ldr	r3, [r3, #0]
 800bbdc:	68fa      	ldr	r2, [r7, #12]
 800bbde:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800bbe0:	687b      	ldr	r3, [r7, #4]
 800bbe2:	2220      	movs	r2, #32
 800bbe4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800bbe8:	687b      	ldr	r3, [r7, #4]
 800bbea:	2200      	movs	r2, #0
 800bbec:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800bbf0:	2300      	movs	r3, #0
}
 800bbf2:	4618      	mov	r0, r3
 800bbf4:	3710      	adds	r7, #16
 800bbf6:	46bd      	mov	sp, r7
 800bbf8:	bd80      	pop	{r7, pc}

0800bbfa <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800bbfa:	b580      	push	{r7, lr}
 800bbfc:	b084      	sub	sp, #16
 800bbfe:	af00      	add	r7, sp, #0
 800bc00:	6078      	str	r0, [r7, #4]
 800bc02:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800bc04:	687b      	ldr	r3, [r7, #4]
 800bc06:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800bc0a:	2b01      	cmp	r3, #1
 800bc0c:	d101      	bne.n	800bc12 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800bc0e:	2302      	movs	r3, #2
 800bc10:	e02d      	b.n	800bc6e <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800bc12:	687b      	ldr	r3, [r7, #4]
 800bc14:	2201      	movs	r2, #1
 800bc16:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800bc1a:	687b      	ldr	r3, [r7, #4]
 800bc1c:	2224      	movs	r2, #36	; 0x24
 800bc1e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800bc22:	687b      	ldr	r3, [r7, #4]
 800bc24:	681b      	ldr	r3, [r3, #0]
 800bc26:	681b      	ldr	r3, [r3, #0]
 800bc28:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800bc2a:	687b      	ldr	r3, [r7, #4]
 800bc2c:	681b      	ldr	r3, [r3, #0]
 800bc2e:	681a      	ldr	r2, [r3, #0]
 800bc30:	687b      	ldr	r3, [r7, #4]
 800bc32:	681b      	ldr	r3, [r3, #0]
 800bc34:	f022 0201 	bic.w	r2, r2, #1
 800bc38:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800bc3a:	687b      	ldr	r3, [r7, #4]
 800bc3c:	681b      	ldr	r3, [r3, #0]
 800bc3e:	689b      	ldr	r3, [r3, #8]
 800bc40:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800bc44:	687b      	ldr	r3, [r7, #4]
 800bc46:	681b      	ldr	r3, [r3, #0]
 800bc48:	683a      	ldr	r2, [r7, #0]
 800bc4a:	430a      	orrs	r2, r1
 800bc4c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800bc4e:	6878      	ldr	r0, [r7, #4]
 800bc50:	f000 f812 	bl	800bc78 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800bc54:	687b      	ldr	r3, [r7, #4]
 800bc56:	681b      	ldr	r3, [r3, #0]
 800bc58:	68fa      	ldr	r2, [r7, #12]
 800bc5a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800bc5c:	687b      	ldr	r3, [r7, #4]
 800bc5e:	2220      	movs	r2, #32
 800bc60:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800bc64:	687b      	ldr	r3, [r7, #4]
 800bc66:	2200      	movs	r2, #0
 800bc68:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800bc6c:	2300      	movs	r3, #0
}
 800bc6e:	4618      	mov	r0, r3
 800bc70:	3710      	adds	r7, #16
 800bc72:	46bd      	mov	sp, r7
 800bc74:	bd80      	pop	{r7, pc}
	...

0800bc78 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800bc78:	b480      	push	{r7}
 800bc7a:	b085      	sub	sp, #20
 800bc7c:	af00      	add	r7, sp, #0
 800bc7e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800bc80:	687b      	ldr	r3, [r7, #4]
 800bc82:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800bc84:	2b00      	cmp	r3, #0
 800bc86:	d108      	bne.n	800bc9a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800bc88:	687b      	ldr	r3, [r7, #4]
 800bc8a:	2201      	movs	r2, #1
 800bc8c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800bc90:	687b      	ldr	r3, [r7, #4]
 800bc92:	2201      	movs	r2, #1
 800bc94:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800bc98:	e031      	b.n	800bcfe <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800bc9a:	2308      	movs	r3, #8
 800bc9c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800bc9e:	2308      	movs	r3, #8
 800bca0:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800bca2:	687b      	ldr	r3, [r7, #4]
 800bca4:	681b      	ldr	r3, [r3, #0]
 800bca6:	689b      	ldr	r3, [r3, #8]
 800bca8:	0e5b      	lsrs	r3, r3, #25
 800bcaa:	b2db      	uxtb	r3, r3
 800bcac:	f003 0307 	and.w	r3, r3, #7
 800bcb0:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800bcb2:	687b      	ldr	r3, [r7, #4]
 800bcb4:	681b      	ldr	r3, [r3, #0]
 800bcb6:	689b      	ldr	r3, [r3, #8]
 800bcb8:	0f5b      	lsrs	r3, r3, #29
 800bcba:	b2db      	uxtb	r3, r3
 800bcbc:	f003 0307 	and.w	r3, r3, #7
 800bcc0:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800bcc2:	7bbb      	ldrb	r3, [r7, #14]
 800bcc4:	7b3a      	ldrb	r2, [r7, #12]
 800bcc6:	4911      	ldr	r1, [pc, #68]	; (800bd0c <UARTEx_SetNbDataToProcess+0x94>)
 800bcc8:	5c8a      	ldrb	r2, [r1, r2]
 800bcca:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800bcce:	7b3a      	ldrb	r2, [r7, #12]
 800bcd0:	490f      	ldr	r1, [pc, #60]	; (800bd10 <UARTEx_SetNbDataToProcess+0x98>)
 800bcd2:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800bcd4:	fb93 f3f2 	sdiv	r3, r3, r2
 800bcd8:	b29a      	uxth	r2, r3
 800bcda:	687b      	ldr	r3, [r7, #4]
 800bcdc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800bce0:	7bfb      	ldrb	r3, [r7, #15]
 800bce2:	7b7a      	ldrb	r2, [r7, #13]
 800bce4:	4909      	ldr	r1, [pc, #36]	; (800bd0c <UARTEx_SetNbDataToProcess+0x94>)
 800bce6:	5c8a      	ldrb	r2, [r1, r2]
 800bce8:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800bcec:	7b7a      	ldrb	r2, [r7, #13]
 800bcee:	4908      	ldr	r1, [pc, #32]	; (800bd10 <UARTEx_SetNbDataToProcess+0x98>)
 800bcf0:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800bcf2:	fb93 f3f2 	sdiv	r3, r3, r2
 800bcf6:	b29a      	uxth	r2, r3
 800bcf8:	687b      	ldr	r3, [r7, #4]
 800bcfa:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800bcfe:	bf00      	nop
 800bd00:	3714      	adds	r7, #20
 800bd02:	46bd      	mov	sp, r7
 800bd04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd08:	4770      	bx	lr
 800bd0a:	bf00      	nop
 800bd0c:	0800cee0 	.word	0x0800cee0
 800bd10:	0800cee8 	.word	0x0800cee8

0800bd14 <memset>:
 800bd14:	4402      	add	r2, r0
 800bd16:	4603      	mov	r3, r0
 800bd18:	4293      	cmp	r3, r2
 800bd1a:	d100      	bne.n	800bd1e <memset+0xa>
 800bd1c:	4770      	bx	lr
 800bd1e:	f803 1b01 	strb.w	r1, [r3], #1
 800bd22:	e7f9      	b.n	800bd18 <memset+0x4>

0800bd24 <__libc_init_array>:
 800bd24:	b570      	push	{r4, r5, r6, lr}
 800bd26:	4d0d      	ldr	r5, [pc, #52]	; (800bd5c <__libc_init_array+0x38>)
 800bd28:	4c0d      	ldr	r4, [pc, #52]	; (800bd60 <__libc_init_array+0x3c>)
 800bd2a:	1b64      	subs	r4, r4, r5
 800bd2c:	10a4      	asrs	r4, r4, #2
 800bd2e:	2600      	movs	r6, #0
 800bd30:	42a6      	cmp	r6, r4
 800bd32:	d109      	bne.n	800bd48 <__libc_init_array+0x24>
 800bd34:	4d0b      	ldr	r5, [pc, #44]	; (800bd64 <__libc_init_array+0x40>)
 800bd36:	4c0c      	ldr	r4, [pc, #48]	; (800bd68 <__libc_init_array+0x44>)
 800bd38:	f001 f8ae 	bl	800ce98 <_init>
 800bd3c:	1b64      	subs	r4, r4, r5
 800bd3e:	10a4      	asrs	r4, r4, #2
 800bd40:	2600      	movs	r6, #0
 800bd42:	42a6      	cmp	r6, r4
 800bd44:	d105      	bne.n	800bd52 <__libc_init_array+0x2e>
 800bd46:	bd70      	pop	{r4, r5, r6, pc}
 800bd48:	f855 3b04 	ldr.w	r3, [r5], #4
 800bd4c:	4798      	blx	r3
 800bd4e:	3601      	adds	r6, #1
 800bd50:	e7ee      	b.n	800bd30 <__libc_init_array+0xc>
 800bd52:	f855 3b04 	ldr.w	r3, [r5], #4
 800bd56:	4798      	blx	r3
 800bd58:	3601      	adds	r6, #1
 800bd5a:	e7f2      	b.n	800bd42 <__libc_init_array+0x1e>
 800bd5c:	0800d0d0 	.word	0x0800d0d0
 800bd60:	0800d0d0 	.word	0x0800d0d0
 800bd64:	0800d0d0 	.word	0x0800d0d0
 800bd68:	0800d0d4 	.word	0x0800d0d4
 800bd6c:	00000000 	.word	0x00000000

0800bd70 <cos>:
 800bd70:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800bd72:	ec53 2b10 	vmov	r2, r3, d0
 800bd76:	4826      	ldr	r0, [pc, #152]	; (800be10 <cos+0xa0>)
 800bd78:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800bd7c:	4281      	cmp	r1, r0
 800bd7e:	dc06      	bgt.n	800bd8e <cos+0x1e>
 800bd80:	ed9f 1b21 	vldr	d1, [pc, #132]	; 800be08 <cos+0x98>
 800bd84:	b005      	add	sp, #20
 800bd86:	f85d eb04 	ldr.w	lr, [sp], #4
 800bd8a:	f000 b89d 	b.w	800bec8 <__kernel_cos>
 800bd8e:	4821      	ldr	r0, [pc, #132]	; (800be14 <cos+0xa4>)
 800bd90:	4281      	cmp	r1, r0
 800bd92:	dd09      	ble.n	800bda8 <cos+0x38>
 800bd94:	ee10 0a10 	vmov	r0, s0
 800bd98:	4619      	mov	r1, r3
 800bd9a:	f7f4 fa41 	bl	8000220 <__aeabi_dsub>
 800bd9e:	ec41 0b10 	vmov	d0, r0, r1
 800bda2:	b005      	add	sp, #20
 800bda4:	f85d fb04 	ldr.w	pc, [sp], #4
 800bda8:	4668      	mov	r0, sp
 800bdaa:	f000 fa15 	bl	800c1d8 <__ieee754_rem_pio2>
 800bdae:	f000 0003 	and.w	r0, r0, #3
 800bdb2:	2801      	cmp	r0, #1
 800bdb4:	d00b      	beq.n	800bdce <cos+0x5e>
 800bdb6:	2802      	cmp	r0, #2
 800bdb8:	d016      	beq.n	800bde8 <cos+0x78>
 800bdba:	b9e0      	cbnz	r0, 800bdf6 <cos+0x86>
 800bdbc:	ed9d 1b02 	vldr	d1, [sp, #8]
 800bdc0:	ed9d 0b00 	vldr	d0, [sp]
 800bdc4:	f000 f880 	bl	800bec8 <__kernel_cos>
 800bdc8:	ec51 0b10 	vmov	r0, r1, d0
 800bdcc:	e7e7      	b.n	800bd9e <cos+0x2e>
 800bdce:	ed9d 1b02 	vldr	d1, [sp, #8]
 800bdd2:	ed9d 0b00 	vldr	d0, [sp]
 800bdd6:	f000 f93f 	bl	800c058 <__kernel_sin>
 800bdda:	ec53 2b10 	vmov	r2, r3, d0
 800bdde:	ee10 0a10 	vmov	r0, s0
 800bde2:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800bde6:	e7da      	b.n	800bd9e <cos+0x2e>
 800bde8:	ed9d 1b02 	vldr	d1, [sp, #8]
 800bdec:	ed9d 0b00 	vldr	d0, [sp]
 800bdf0:	f000 f86a 	bl	800bec8 <__kernel_cos>
 800bdf4:	e7f1      	b.n	800bdda <cos+0x6a>
 800bdf6:	ed9d 1b02 	vldr	d1, [sp, #8]
 800bdfa:	ed9d 0b00 	vldr	d0, [sp]
 800bdfe:	2001      	movs	r0, #1
 800be00:	f000 f92a 	bl	800c058 <__kernel_sin>
 800be04:	e7e0      	b.n	800bdc8 <cos+0x58>
 800be06:	bf00      	nop
	...
 800be10:	3fe921fb 	.word	0x3fe921fb
 800be14:	7fefffff 	.word	0x7fefffff

0800be18 <sin>:
 800be18:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800be1a:	ec53 2b10 	vmov	r2, r3, d0
 800be1e:	4828      	ldr	r0, [pc, #160]	; (800bec0 <sin+0xa8>)
 800be20:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800be24:	4281      	cmp	r1, r0
 800be26:	dc07      	bgt.n	800be38 <sin+0x20>
 800be28:	ed9f 1b23 	vldr	d1, [pc, #140]	; 800beb8 <sin+0xa0>
 800be2c:	2000      	movs	r0, #0
 800be2e:	b005      	add	sp, #20
 800be30:	f85d eb04 	ldr.w	lr, [sp], #4
 800be34:	f000 b910 	b.w	800c058 <__kernel_sin>
 800be38:	4822      	ldr	r0, [pc, #136]	; (800bec4 <sin+0xac>)
 800be3a:	4281      	cmp	r1, r0
 800be3c:	dd09      	ble.n	800be52 <sin+0x3a>
 800be3e:	ee10 0a10 	vmov	r0, s0
 800be42:	4619      	mov	r1, r3
 800be44:	f7f4 f9ec 	bl	8000220 <__aeabi_dsub>
 800be48:	ec41 0b10 	vmov	d0, r0, r1
 800be4c:	b005      	add	sp, #20
 800be4e:	f85d fb04 	ldr.w	pc, [sp], #4
 800be52:	4668      	mov	r0, sp
 800be54:	f000 f9c0 	bl	800c1d8 <__ieee754_rem_pio2>
 800be58:	f000 0003 	and.w	r0, r0, #3
 800be5c:	2801      	cmp	r0, #1
 800be5e:	d00c      	beq.n	800be7a <sin+0x62>
 800be60:	2802      	cmp	r0, #2
 800be62:	d011      	beq.n	800be88 <sin+0x70>
 800be64:	b9f0      	cbnz	r0, 800bea4 <sin+0x8c>
 800be66:	ed9d 1b02 	vldr	d1, [sp, #8]
 800be6a:	ed9d 0b00 	vldr	d0, [sp]
 800be6e:	2001      	movs	r0, #1
 800be70:	f000 f8f2 	bl	800c058 <__kernel_sin>
 800be74:	ec51 0b10 	vmov	r0, r1, d0
 800be78:	e7e6      	b.n	800be48 <sin+0x30>
 800be7a:	ed9d 1b02 	vldr	d1, [sp, #8]
 800be7e:	ed9d 0b00 	vldr	d0, [sp]
 800be82:	f000 f821 	bl	800bec8 <__kernel_cos>
 800be86:	e7f5      	b.n	800be74 <sin+0x5c>
 800be88:	ed9d 1b02 	vldr	d1, [sp, #8]
 800be8c:	ed9d 0b00 	vldr	d0, [sp]
 800be90:	2001      	movs	r0, #1
 800be92:	f000 f8e1 	bl	800c058 <__kernel_sin>
 800be96:	ec53 2b10 	vmov	r2, r3, d0
 800be9a:	ee10 0a10 	vmov	r0, s0
 800be9e:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800bea2:	e7d1      	b.n	800be48 <sin+0x30>
 800bea4:	ed9d 1b02 	vldr	d1, [sp, #8]
 800bea8:	ed9d 0b00 	vldr	d0, [sp]
 800beac:	f000 f80c 	bl	800bec8 <__kernel_cos>
 800beb0:	e7f1      	b.n	800be96 <sin+0x7e>
 800beb2:	bf00      	nop
 800beb4:	f3af 8000 	nop.w
	...
 800bec0:	3fe921fb 	.word	0x3fe921fb
 800bec4:	7fefffff 	.word	0x7fefffff

0800bec8 <__kernel_cos>:
 800bec8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800becc:	ec57 6b10 	vmov	r6, r7, d0
 800bed0:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 800bed4:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 800bed8:	ed8d 1b00 	vstr	d1, [sp]
 800bedc:	da07      	bge.n	800beee <__kernel_cos+0x26>
 800bede:	ee10 0a10 	vmov	r0, s0
 800bee2:	4639      	mov	r1, r7
 800bee4:	f7f4 fdee 	bl	8000ac4 <__aeabi_d2iz>
 800bee8:	2800      	cmp	r0, #0
 800beea:	f000 8088 	beq.w	800bffe <__kernel_cos+0x136>
 800beee:	4632      	mov	r2, r6
 800bef0:	463b      	mov	r3, r7
 800bef2:	4630      	mov	r0, r6
 800bef4:	4639      	mov	r1, r7
 800bef6:	f7f4 fb4b 	bl	8000590 <__aeabi_dmul>
 800befa:	4b51      	ldr	r3, [pc, #324]	; (800c040 <__kernel_cos+0x178>)
 800befc:	2200      	movs	r2, #0
 800befe:	4604      	mov	r4, r0
 800bf00:	460d      	mov	r5, r1
 800bf02:	f7f4 fb45 	bl	8000590 <__aeabi_dmul>
 800bf06:	a340      	add	r3, pc, #256	; (adr r3, 800c008 <__kernel_cos+0x140>)
 800bf08:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf0c:	4682      	mov	sl, r0
 800bf0e:	468b      	mov	fp, r1
 800bf10:	4620      	mov	r0, r4
 800bf12:	4629      	mov	r1, r5
 800bf14:	f7f4 fb3c 	bl	8000590 <__aeabi_dmul>
 800bf18:	a33d      	add	r3, pc, #244	; (adr r3, 800c010 <__kernel_cos+0x148>)
 800bf1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf1e:	f7f4 f981 	bl	8000224 <__adddf3>
 800bf22:	4622      	mov	r2, r4
 800bf24:	462b      	mov	r3, r5
 800bf26:	f7f4 fb33 	bl	8000590 <__aeabi_dmul>
 800bf2a:	a33b      	add	r3, pc, #236	; (adr r3, 800c018 <__kernel_cos+0x150>)
 800bf2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf30:	f7f4 f976 	bl	8000220 <__aeabi_dsub>
 800bf34:	4622      	mov	r2, r4
 800bf36:	462b      	mov	r3, r5
 800bf38:	f7f4 fb2a 	bl	8000590 <__aeabi_dmul>
 800bf3c:	a338      	add	r3, pc, #224	; (adr r3, 800c020 <__kernel_cos+0x158>)
 800bf3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf42:	f7f4 f96f 	bl	8000224 <__adddf3>
 800bf46:	4622      	mov	r2, r4
 800bf48:	462b      	mov	r3, r5
 800bf4a:	f7f4 fb21 	bl	8000590 <__aeabi_dmul>
 800bf4e:	a336      	add	r3, pc, #216	; (adr r3, 800c028 <__kernel_cos+0x160>)
 800bf50:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf54:	f7f4 f964 	bl	8000220 <__aeabi_dsub>
 800bf58:	4622      	mov	r2, r4
 800bf5a:	462b      	mov	r3, r5
 800bf5c:	f7f4 fb18 	bl	8000590 <__aeabi_dmul>
 800bf60:	a333      	add	r3, pc, #204	; (adr r3, 800c030 <__kernel_cos+0x168>)
 800bf62:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf66:	f7f4 f95d 	bl	8000224 <__adddf3>
 800bf6a:	4622      	mov	r2, r4
 800bf6c:	462b      	mov	r3, r5
 800bf6e:	f7f4 fb0f 	bl	8000590 <__aeabi_dmul>
 800bf72:	4622      	mov	r2, r4
 800bf74:	462b      	mov	r3, r5
 800bf76:	f7f4 fb0b 	bl	8000590 <__aeabi_dmul>
 800bf7a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800bf7e:	4604      	mov	r4, r0
 800bf80:	460d      	mov	r5, r1
 800bf82:	4630      	mov	r0, r6
 800bf84:	4639      	mov	r1, r7
 800bf86:	f7f4 fb03 	bl	8000590 <__aeabi_dmul>
 800bf8a:	460b      	mov	r3, r1
 800bf8c:	4602      	mov	r2, r0
 800bf8e:	4629      	mov	r1, r5
 800bf90:	4620      	mov	r0, r4
 800bf92:	f7f4 f945 	bl	8000220 <__aeabi_dsub>
 800bf96:	4b2b      	ldr	r3, [pc, #172]	; (800c044 <__kernel_cos+0x17c>)
 800bf98:	4598      	cmp	r8, r3
 800bf9a:	4606      	mov	r6, r0
 800bf9c:	460f      	mov	r7, r1
 800bf9e:	dc10      	bgt.n	800bfc2 <__kernel_cos+0xfa>
 800bfa0:	4602      	mov	r2, r0
 800bfa2:	460b      	mov	r3, r1
 800bfa4:	4650      	mov	r0, sl
 800bfa6:	4659      	mov	r1, fp
 800bfa8:	f7f4 f93a 	bl	8000220 <__aeabi_dsub>
 800bfac:	460b      	mov	r3, r1
 800bfae:	4926      	ldr	r1, [pc, #152]	; (800c048 <__kernel_cos+0x180>)
 800bfb0:	4602      	mov	r2, r0
 800bfb2:	2000      	movs	r0, #0
 800bfb4:	f7f4 f934 	bl	8000220 <__aeabi_dsub>
 800bfb8:	ec41 0b10 	vmov	d0, r0, r1
 800bfbc:	b003      	add	sp, #12
 800bfbe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bfc2:	4b22      	ldr	r3, [pc, #136]	; (800c04c <__kernel_cos+0x184>)
 800bfc4:	4920      	ldr	r1, [pc, #128]	; (800c048 <__kernel_cos+0x180>)
 800bfc6:	4598      	cmp	r8, r3
 800bfc8:	bfcc      	ite	gt
 800bfca:	4d21      	ldrgt	r5, [pc, #132]	; (800c050 <__kernel_cos+0x188>)
 800bfcc:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 800bfd0:	2400      	movs	r4, #0
 800bfd2:	4622      	mov	r2, r4
 800bfd4:	462b      	mov	r3, r5
 800bfd6:	2000      	movs	r0, #0
 800bfd8:	f7f4 f922 	bl	8000220 <__aeabi_dsub>
 800bfdc:	4622      	mov	r2, r4
 800bfde:	4680      	mov	r8, r0
 800bfe0:	4689      	mov	r9, r1
 800bfe2:	462b      	mov	r3, r5
 800bfe4:	4650      	mov	r0, sl
 800bfe6:	4659      	mov	r1, fp
 800bfe8:	f7f4 f91a 	bl	8000220 <__aeabi_dsub>
 800bfec:	4632      	mov	r2, r6
 800bfee:	463b      	mov	r3, r7
 800bff0:	f7f4 f916 	bl	8000220 <__aeabi_dsub>
 800bff4:	4602      	mov	r2, r0
 800bff6:	460b      	mov	r3, r1
 800bff8:	4640      	mov	r0, r8
 800bffa:	4649      	mov	r1, r9
 800bffc:	e7da      	b.n	800bfb4 <__kernel_cos+0xec>
 800bffe:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 800c038 <__kernel_cos+0x170>
 800c002:	e7db      	b.n	800bfbc <__kernel_cos+0xf4>
 800c004:	f3af 8000 	nop.w
 800c008:	be8838d4 	.word	0xbe8838d4
 800c00c:	bda8fae9 	.word	0xbda8fae9
 800c010:	bdb4b1c4 	.word	0xbdb4b1c4
 800c014:	3e21ee9e 	.word	0x3e21ee9e
 800c018:	809c52ad 	.word	0x809c52ad
 800c01c:	3e927e4f 	.word	0x3e927e4f
 800c020:	19cb1590 	.word	0x19cb1590
 800c024:	3efa01a0 	.word	0x3efa01a0
 800c028:	16c15177 	.word	0x16c15177
 800c02c:	3f56c16c 	.word	0x3f56c16c
 800c030:	5555554c 	.word	0x5555554c
 800c034:	3fa55555 	.word	0x3fa55555
 800c038:	00000000 	.word	0x00000000
 800c03c:	3ff00000 	.word	0x3ff00000
 800c040:	3fe00000 	.word	0x3fe00000
 800c044:	3fd33332 	.word	0x3fd33332
 800c048:	3ff00000 	.word	0x3ff00000
 800c04c:	3fe90000 	.word	0x3fe90000
 800c050:	3fd20000 	.word	0x3fd20000
 800c054:	00000000 	.word	0x00000000

0800c058 <__kernel_sin>:
 800c058:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c05c:	ed2d 8b04 	vpush	{d8-d9}
 800c060:	eeb0 8a41 	vmov.f32	s16, s2
 800c064:	eef0 8a61 	vmov.f32	s17, s3
 800c068:	ec55 4b10 	vmov	r4, r5, d0
 800c06c:	b083      	sub	sp, #12
 800c06e:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800c072:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 800c076:	9001      	str	r0, [sp, #4]
 800c078:	da06      	bge.n	800c088 <__kernel_sin+0x30>
 800c07a:	ee10 0a10 	vmov	r0, s0
 800c07e:	4629      	mov	r1, r5
 800c080:	f7f4 fd20 	bl	8000ac4 <__aeabi_d2iz>
 800c084:	2800      	cmp	r0, #0
 800c086:	d051      	beq.n	800c12c <__kernel_sin+0xd4>
 800c088:	4622      	mov	r2, r4
 800c08a:	462b      	mov	r3, r5
 800c08c:	4620      	mov	r0, r4
 800c08e:	4629      	mov	r1, r5
 800c090:	f7f4 fa7e 	bl	8000590 <__aeabi_dmul>
 800c094:	4682      	mov	sl, r0
 800c096:	468b      	mov	fp, r1
 800c098:	4602      	mov	r2, r0
 800c09a:	460b      	mov	r3, r1
 800c09c:	4620      	mov	r0, r4
 800c09e:	4629      	mov	r1, r5
 800c0a0:	f7f4 fa76 	bl	8000590 <__aeabi_dmul>
 800c0a4:	a341      	add	r3, pc, #260	; (adr r3, 800c1ac <__kernel_sin+0x154>)
 800c0a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c0aa:	4680      	mov	r8, r0
 800c0ac:	4689      	mov	r9, r1
 800c0ae:	4650      	mov	r0, sl
 800c0b0:	4659      	mov	r1, fp
 800c0b2:	f7f4 fa6d 	bl	8000590 <__aeabi_dmul>
 800c0b6:	a33f      	add	r3, pc, #252	; (adr r3, 800c1b4 <__kernel_sin+0x15c>)
 800c0b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c0bc:	f7f4 f8b0 	bl	8000220 <__aeabi_dsub>
 800c0c0:	4652      	mov	r2, sl
 800c0c2:	465b      	mov	r3, fp
 800c0c4:	f7f4 fa64 	bl	8000590 <__aeabi_dmul>
 800c0c8:	a33c      	add	r3, pc, #240	; (adr r3, 800c1bc <__kernel_sin+0x164>)
 800c0ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c0ce:	f7f4 f8a9 	bl	8000224 <__adddf3>
 800c0d2:	4652      	mov	r2, sl
 800c0d4:	465b      	mov	r3, fp
 800c0d6:	f7f4 fa5b 	bl	8000590 <__aeabi_dmul>
 800c0da:	a33a      	add	r3, pc, #232	; (adr r3, 800c1c4 <__kernel_sin+0x16c>)
 800c0dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c0e0:	f7f4 f89e 	bl	8000220 <__aeabi_dsub>
 800c0e4:	4652      	mov	r2, sl
 800c0e6:	465b      	mov	r3, fp
 800c0e8:	f7f4 fa52 	bl	8000590 <__aeabi_dmul>
 800c0ec:	a337      	add	r3, pc, #220	; (adr r3, 800c1cc <__kernel_sin+0x174>)
 800c0ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c0f2:	f7f4 f897 	bl	8000224 <__adddf3>
 800c0f6:	9b01      	ldr	r3, [sp, #4]
 800c0f8:	4606      	mov	r6, r0
 800c0fa:	460f      	mov	r7, r1
 800c0fc:	b9eb      	cbnz	r3, 800c13a <__kernel_sin+0xe2>
 800c0fe:	4602      	mov	r2, r0
 800c100:	460b      	mov	r3, r1
 800c102:	4650      	mov	r0, sl
 800c104:	4659      	mov	r1, fp
 800c106:	f7f4 fa43 	bl	8000590 <__aeabi_dmul>
 800c10a:	a325      	add	r3, pc, #148	; (adr r3, 800c1a0 <__kernel_sin+0x148>)
 800c10c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c110:	f7f4 f886 	bl	8000220 <__aeabi_dsub>
 800c114:	4642      	mov	r2, r8
 800c116:	464b      	mov	r3, r9
 800c118:	f7f4 fa3a 	bl	8000590 <__aeabi_dmul>
 800c11c:	4602      	mov	r2, r0
 800c11e:	460b      	mov	r3, r1
 800c120:	4620      	mov	r0, r4
 800c122:	4629      	mov	r1, r5
 800c124:	f7f4 f87e 	bl	8000224 <__adddf3>
 800c128:	4604      	mov	r4, r0
 800c12a:	460d      	mov	r5, r1
 800c12c:	ec45 4b10 	vmov	d0, r4, r5
 800c130:	b003      	add	sp, #12
 800c132:	ecbd 8b04 	vpop	{d8-d9}
 800c136:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c13a:	4b1b      	ldr	r3, [pc, #108]	; (800c1a8 <__kernel_sin+0x150>)
 800c13c:	ec51 0b18 	vmov	r0, r1, d8
 800c140:	2200      	movs	r2, #0
 800c142:	f7f4 fa25 	bl	8000590 <__aeabi_dmul>
 800c146:	4632      	mov	r2, r6
 800c148:	ec41 0b19 	vmov	d9, r0, r1
 800c14c:	463b      	mov	r3, r7
 800c14e:	4640      	mov	r0, r8
 800c150:	4649      	mov	r1, r9
 800c152:	f7f4 fa1d 	bl	8000590 <__aeabi_dmul>
 800c156:	4602      	mov	r2, r0
 800c158:	460b      	mov	r3, r1
 800c15a:	ec51 0b19 	vmov	r0, r1, d9
 800c15e:	f7f4 f85f 	bl	8000220 <__aeabi_dsub>
 800c162:	4652      	mov	r2, sl
 800c164:	465b      	mov	r3, fp
 800c166:	f7f4 fa13 	bl	8000590 <__aeabi_dmul>
 800c16a:	ec53 2b18 	vmov	r2, r3, d8
 800c16e:	f7f4 f857 	bl	8000220 <__aeabi_dsub>
 800c172:	a30b      	add	r3, pc, #44	; (adr r3, 800c1a0 <__kernel_sin+0x148>)
 800c174:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c178:	4606      	mov	r6, r0
 800c17a:	460f      	mov	r7, r1
 800c17c:	4640      	mov	r0, r8
 800c17e:	4649      	mov	r1, r9
 800c180:	f7f4 fa06 	bl	8000590 <__aeabi_dmul>
 800c184:	4602      	mov	r2, r0
 800c186:	460b      	mov	r3, r1
 800c188:	4630      	mov	r0, r6
 800c18a:	4639      	mov	r1, r7
 800c18c:	f7f4 f84a 	bl	8000224 <__adddf3>
 800c190:	4602      	mov	r2, r0
 800c192:	460b      	mov	r3, r1
 800c194:	4620      	mov	r0, r4
 800c196:	4629      	mov	r1, r5
 800c198:	f7f4 f842 	bl	8000220 <__aeabi_dsub>
 800c19c:	e7c4      	b.n	800c128 <__kernel_sin+0xd0>
 800c19e:	bf00      	nop
 800c1a0:	55555549 	.word	0x55555549
 800c1a4:	3fc55555 	.word	0x3fc55555
 800c1a8:	3fe00000 	.word	0x3fe00000
 800c1ac:	5acfd57c 	.word	0x5acfd57c
 800c1b0:	3de5d93a 	.word	0x3de5d93a
 800c1b4:	8a2b9ceb 	.word	0x8a2b9ceb
 800c1b8:	3e5ae5e6 	.word	0x3e5ae5e6
 800c1bc:	57b1fe7d 	.word	0x57b1fe7d
 800c1c0:	3ec71de3 	.word	0x3ec71de3
 800c1c4:	19c161d5 	.word	0x19c161d5
 800c1c8:	3f2a01a0 	.word	0x3f2a01a0
 800c1cc:	1110f8a6 	.word	0x1110f8a6
 800c1d0:	3f811111 	.word	0x3f811111
 800c1d4:	00000000 	.word	0x00000000

0800c1d8 <__ieee754_rem_pio2>:
 800c1d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c1dc:	ed2d 8b02 	vpush	{d8}
 800c1e0:	ec55 4b10 	vmov	r4, r5, d0
 800c1e4:	4bca      	ldr	r3, [pc, #808]	; (800c510 <__ieee754_rem_pio2+0x338>)
 800c1e6:	b08b      	sub	sp, #44	; 0x2c
 800c1e8:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 800c1ec:	4598      	cmp	r8, r3
 800c1ee:	4682      	mov	sl, r0
 800c1f0:	9502      	str	r5, [sp, #8]
 800c1f2:	dc08      	bgt.n	800c206 <__ieee754_rem_pio2+0x2e>
 800c1f4:	2200      	movs	r2, #0
 800c1f6:	2300      	movs	r3, #0
 800c1f8:	ed80 0b00 	vstr	d0, [r0]
 800c1fc:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800c200:	f04f 0b00 	mov.w	fp, #0
 800c204:	e028      	b.n	800c258 <__ieee754_rem_pio2+0x80>
 800c206:	4bc3      	ldr	r3, [pc, #780]	; (800c514 <__ieee754_rem_pio2+0x33c>)
 800c208:	4598      	cmp	r8, r3
 800c20a:	dc78      	bgt.n	800c2fe <__ieee754_rem_pio2+0x126>
 800c20c:	9b02      	ldr	r3, [sp, #8]
 800c20e:	4ec2      	ldr	r6, [pc, #776]	; (800c518 <__ieee754_rem_pio2+0x340>)
 800c210:	2b00      	cmp	r3, #0
 800c212:	ee10 0a10 	vmov	r0, s0
 800c216:	a3b0      	add	r3, pc, #704	; (adr r3, 800c4d8 <__ieee754_rem_pio2+0x300>)
 800c218:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c21c:	4629      	mov	r1, r5
 800c21e:	dd39      	ble.n	800c294 <__ieee754_rem_pio2+0xbc>
 800c220:	f7f3 fffe 	bl	8000220 <__aeabi_dsub>
 800c224:	45b0      	cmp	r8, r6
 800c226:	4604      	mov	r4, r0
 800c228:	460d      	mov	r5, r1
 800c22a:	d01b      	beq.n	800c264 <__ieee754_rem_pio2+0x8c>
 800c22c:	a3ac      	add	r3, pc, #688	; (adr r3, 800c4e0 <__ieee754_rem_pio2+0x308>)
 800c22e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c232:	f7f3 fff5 	bl	8000220 <__aeabi_dsub>
 800c236:	4602      	mov	r2, r0
 800c238:	460b      	mov	r3, r1
 800c23a:	e9ca 2300 	strd	r2, r3, [sl]
 800c23e:	4620      	mov	r0, r4
 800c240:	4629      	mov	r1, r5
 800c242:	f7f3 ffed 	bl	8000220 <__aeabi_dsub>
 800c246:	a3a6      	add	r3, pc, #664	; (adr r3, 800c4e0 <__ieee754_rem_pio2+0x308>)
 800c248:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c24c:	f7f3 ffe8 	bl	8000220 <__aeabi_dsub>
 800c250:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800c254:	f04f 0b01 	mov.w	fp, #1
 800c258:	4658      	mov	r0, fp
 800c25a:	b00b      	add	sp, #44	; 0x2c
 800c25c:	ecbd 8b02 	vpop	{d8}
 800c260:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c264:	a3a0      	add	r3, pc, #640	; (adr r3, 800c4e8 <__ieee754_rem_pio2+0x310>)
 800c266:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c26a:	f7f3 ffd9 	bl	8000220 <__aeabi_dsub>
 800c26e:	a3a0      	add	r3, pc, #640	; (adr r3, 800c4f0 <__ieee754_rem_pio2+0x318>)
 800c270:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c274:	4604      	mov	r4, r0
 800c276:	460d      	mov	r5, r1
 800c278:	f7f3 ffd2 	bl	8000220 <__aeabi_dsub>
 800c27c:	4602      	mov	r2, r0
 800c27e:	460b      	mov	r3, r1
 800c280:	e9ca 2300 	strd	r2, r3, [sl]
 800c284:	4620      	mov	r0, r4
 800c286:	4629      	mov	r1, r5
 800c288:	f7f3 ffca 	bl	8000220 <__aeabi_dsub>
 800c28c:	a398      	add	r3, pc, #608	; (adr r3, 800c4f0 <__ieee754_rem_pio2+0x318>)
 800c28e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c292:	e7db      	b.n	800c24c <__ieee754_rem_pio2+0x74>
 800c294:	f7f3 ffc6 	bl	8000224 <__adddf3>
 800c298:	45b0      	cmp	r8, r6
 800c29a:	4604      	mov	r4, r0
 800c29c:	460d      	mov	r5, r1
 800c29e:	d016      	beq.n	800c2ce <__ieee754_rem_pio2+0xf6>
 800c2a0:	a38f      	add	r3, pc, #572	; (adr r3, 800c4e0 <__ieee754_rem_pio2+0x308>)
 800c2a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c2a6:	f7f3 ffbd 	bl	8000224 <__adddf3>
 800c2aa:	4602      	mov	r2, r0
 800c2ac:	460b      	mov	r3, r1
 800c2ae:	e9ca 2300 	strd	r2, r3, [sl]
 800c2b2:	4620      	mov	r0, r4
 800c2b4:	4629      	mov	r1, r5
 800c2b6:	f7f3 ffb3 	bl	8000220 <__aeabi_dsub>
 800c2ba:	a389      	add	r3, pc, #548	; (adr r3, 800c4e0 <__ieee754_rem_pio2+0x308>)
 800c2bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c2c0:	f7f3 ffb0 	bl	8000224 <__adddf3>
 800c2c4:	f04f 3bff 	mov.w	fp, #4294967295
 800c2c8:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800c2cc:	e7c4      	b.n	800c258 <__ieee754_rem_pio2+0x80>
 800c2ce:	a386      	add	r3, pc, #536	; (adr r3, 800c4e8 <__ieee754_rem_pio2+0x310>)
 800c2d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c2d4:	f7f3 ffa6 	bl	8000224 <__adddf3>
 800c2d8:	a385      	add	r3, pc, #532	; (adr r3, 800c4f0 <__ieee754_rem_pio2+0x318>)
 800c2da:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c2de:	4604      	mov	r4, r0
 800c2e0:	460d      	mov	r5, r1
 800c2e2:	f7f3 ff9f 	bl	8000224 <__adddf3>
 800c2e6:	4602      	mov	r2, r0
 800c2e8:	460b      	mov	r3, r1
 800c2ea:	e9ca 2300 	strd	r2, r3, [sl]
 800c2ee:	4620      	mov	r0, r4
 800c2f0:	4629      	mov	r1, r5
 800c2f2:	f7f3 ff95 	bl	8000220 <__aeabi_dsub>
 800c2f6:	a37e      	add	r3, pc, #504	; (adr r3, 800c4f0 <__ieee754_rem_pio2+0x318>)
 800c2f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c2fc:	e7e0      	b.n	800c2c0 <__ieee754_rem_pio2+0xe8>
 800c2fe:	4b87      	ldr	r3, [pc, #540]	; (800c51c <__ieee754_rem_pio2+0x344>)
 800c300:	4598      	cmp	r8, r3
 800c302:	f300 80d8 	bgt.w	800c4b6 <__ieee754_rem_pio2+0x2de>
 800c306:	f000 f96d 	bl	800c5e4 <fabs>
 800c30a:	ec55 4b10 	vmov	r4, r5, d0
 800c30e:	ee10 0a10 	vmov	r0, s0
 800c312:	a379      	add	r3, pc, #484	; (adr r3, 800c4f8 <__ieee754_rem_pio2+0x320>)
 800c314:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c318:	4629      	mov	r1, r5
 800c31a:	f7f4 f939 	bl	8000590 <__aeabi_dmul>
 800c31e:	4b80      	ldr	r3, [pc, #512]	; (800c520 <__ieee754_rem_pio2+0x348>)
 800c320:	2200      	movs	r2, #0
 800c322:	f7f3 ff7f 	bl	8000224 <__adddf3>
 800c326:	f7f4 fbcd 	bl	8000ac4 <__aeabi_d2iz>
 800c32a:	4683      	mov	fp, r0
 800c32c:	f7f4 f8c6 	bl	80004bc <__aeabi_i2d>
 800c330:	4602      	mov	r2, r0
 800c332:	460b      	mov	r3, r1
 800c334:	ec43 2b18 	vmov	d8, r2, r3
 800c338:	a367      	add	r3, pc, #412	; (adr r3, 800c4d8 <__ieee754_rem_pio2+0x300>)
 800c33a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c33e:	f7f4 f927 	bl	8000590 <__aeabi_dmul>
 800c342:	4602      	mov	r2, r0
 800c344:	460b      	mov	r3, r1
 800c346:	4620      	mov	r0, r4
 800c348:	4629      	mov	r1, r5
 800c34a:	f7f3 ff69 	bl	8000220 <__aeabi_dsub>
 800c34e:	a364      	add	r3, pc, #400	; (adr r3, 800c4e0 <__ieee754_rem_pio2+0x308>)
 800c350:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c354:	4606      	mov	r6, r0
 800c356:	460f      	mov	r7, r1
 800c358:	ec51 0b18 	vmov	r0, r1, d8
 800c35c:	f7f4 f918 	bl	8000590 <__aeabi_dmul>
 800c360:	f1bb 0f1f 	cmp.w	fp, #31
 800c364:	4604      	mov	r4, r0
 800c366:	460d      	mov	r5, r1
 800c368:	dc0d      	bgt.n	800c386 <__ieee754_rem_pio2+0x1ae>
 800c36a:	4b6e      	ldr	r3, [pc, #440]	; (800c524 <__ieee754_rem_pio2+0x34c>)
 800c36c:	f10b 32ff 	add.w	r2, fp, #4294967295
 800c370:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c374:	4543      	cmp	r3, r8
 800c376:	d006      	beq.n	800c386 <__ieee754_rem_pio2+0x1ae>
 800c378:	4622      	mov	r2, r4
 800c37a:	462b      	mov	r3, r5
 800c37c:	4630      	mov	r0, r6
 800c37e:	4639      	mov	r1, r7
 800c380:	f7f3 ff4e 	bl	8000220 <__aeabi_dsub>
 800c384:	e00e      	b.n	800c3a4 <__ieee754_rem_pio2+0x1cc>
 800c386:	462b      	mov	r3, r5
 800c388:	4622      	mov	r2, r4
 800c38a:	4630      	mov	r0, r6
 800c38c:	4639      	mov	r1, r7
 800c38e:	f7f3 ff47 	bl	8000220 <__aeabi_dsub>
 800c392:	ea4f 5328 	mov.w	r3, r8, asr #20
 800c396:	9303      	str	r3, [sp, #12]
 800c398:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800c39c:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 800c3a0:	2b10      	cmp	r3, #16
 800c3a2:	dc02      	bgt.n	800c3aa <__ieee754_rem_pio2+0x1d2>
 800c3a4:	e9ca 0100 	strd	r0, r1, [sl]
 800c3a8:	e039      	b.n	800c41e <__ieee754_rem_pio2+0x246>
 800c3aa:	a34f      	add	r3, pc, #316	; (adr r3, 800c4e8 <__ieee754_rem_pio2+0x310>)
 800c3ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c3b0:	ec51 0b18 	vmov	r0, r1, d8
 800c3b4:	f7f4 f8ec 	bl	8000590 <__aeabi_dmul>
 800c3b8:	4604      	mov	r4, r0
 800c3ba:	460d      	mov	r5, r1
 800c3bc:	4602      	mov	r2, r0
 800c3be:	460b      	mov	r3, r1
 800c3c0:	4630      	mov	r0, r6
 800c3c2:	4639      	mov	r1, r7
 800c3c4:	f7f3 ff2c 	bl	8000220 <__aeabi_dsub>
 800c3c8:	4602      	mov	r2, r0
 800c3ca:	460b      	mov	r3, r1
 800c3cc:	4680      	mov	r8, r0
 800c3ce:	4689      	mov	r9, r1
 800c3d0:	4630      	mov	r0, r6
 800c3d2:	4639      	mov	r1, r7
 800c3d4:	f7f3 ff24 	bl	8000220 <__aeabi_dsub>
 800c3d8:	4622      	mov	r2, r4
 800c3da:	462b      	mov	r3, r5
 800c3dc:	f7f3 ff20 	bl	8000220 <__aeabi_dsub>
 800c3e0:	a343      	add	r3, pc, #268	; (adr r3, 800c4f0 <__ieee754_rem_pio2+0x318>)
 800c3e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c3e6:	4604      	mov	r4, r0
 800c3e8:	460d      	mov	r5, r1
 800c3ea:	ec51 0b18 	vmov	r0, r1, d8
 800c3ee:	f7f4 f8cf 	bl	8000590 <__aeabi_dmul>
 800c3f2:	4622      	mov	r2, r4
 800c3f4:	462b      	mov	r3, r5
 800c3f6:	f7f3 ff13 	bl	8000220 <__aeabi_dsub>
 800c3fa:	4602      	mov	r2, r0
 800c3fc:	460b      	mov	r3, r1
 800c3fe:	4604      	mov	r4, r0
 800c400:	460d      	mov	r5, r1
 800c402:	4640      	mov	r0, r8
 800c404:	4649      	mov	r1, r9
 800c406:	f7f3 ff0b 	bl	8000220 <__aeabi_dsub>
 800c40a:	9a03      	ldr	r2, [sp, #12]
 800c40c:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800c410:	1ad3      	subs	r3, r2, r3
 800c412:	2b31      	cmp	r3, #49	; 0x31
 800c414:	dc24      	bgt.n	800c460 <__ieee754_rem_pio2+0x288>
 800c416:	e9ca 0100 	strd	r0, r1, [sl]
 800c41a:	4646      	mov	r6, r8
 800c41c:	464f      	mov	r7, r9
 800c41e:	e9da 8900 	ldrd	r8, r9, [sl]
 800c422:	4630      	mov	r0, r6
 800c424:	4642      	mov	r2, r8
 800c426:	464b      	mov	r3, r9
 800c428:	4639      	mov	r1, r7
 800c42a:	f7f3 fef9 	bl	8000220 <__aeabi_dsub>
 800c42e:	462b      	mov	r3, r5
 800c430:	4622      	mov	r2, r4
 800c432:	f7f3 fef5 	bl	8000220 <__aeabi_dsub>
 800c436:	9b02      	ldr	r3, [sp, #8]
 800c438:	2b00      	cmp	r3, #0
 800c43a:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800c43e:	f6bf af0b 	bge.w	800c258 <__ieee754_rem_pio2+0x80>
 800c442:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800c446:	f8ca 3004 	str.w	r3, [sl, #4]
 800c44a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c44e:	f8ca 8000 	str.w	r8, [sl]
 800c452:	f8ca 0008 	str.w	r0, [sl, #8]
 800c456:	f8ca 300c 	str.w	r3, [sl, #12]
 800c45a:	f1cb 0b00 	rsb	fp, fp, #0
 800c45e:	e6fb      	b.n	800c258 <__ieee754_rem_pio2+0x80>
 800c460:	a327      	add	r3, pc, #156	; (adr r3, 800c500 <__ieee754_rem_pio2+0x328>)
 800c462:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c466:	ec51 0b18 	vmov	r0, r1, d8
 800c46a:	f7f4 f891 	bl	8000590 <__aeabi_dmul>
 800c46e:	4604      	mov	r4, r0
 800c470:	460d      	mov	r5, r1
 800c472:	4602      	mov	r2, r0
 800c474:	460b      	mov	r3, r1
 800c476:	4640      	mov	r0, r8
 800c478:	4649      	mov	r1, r9
 800c47a:	f7f3 fed1 	bl	8000220 <__aeabi_dsub>
 800c47e:	4602      	mov	r2, r0
 800c480:	460b      	mov	r3, r1
 800c482:	4606      	mov	r6, r0
 800c484:	460f      	mov	r7, r1
 800c486:	4640      	mov	r0, r8
 800c488:	4649      	mov	r1, r9
 800c48a:	f7f3 fec9 	bl	8000220 <__aeabi_dsub>
 800c48e:	4622      	mov	r2, r4
 800c490:	462b      	mov	r3, r5
 800c492:	f7f3 fec5 	bl	8000220 <__aeabi_dsub>
 800c496:	a31c      	add	r3, pc, #112	; (adr r3, 800c508 <__ieee754_rem_pio2+0x330>)
 800c498:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c49c:	4604      	mov	r4, r0
 800c49e:	460d      	mov	r5, r1
 800c4a0:	ec51 0b18 	vmov	r0, r1, d8
 800c4a4:	f7f4 f874 	bl	8000590 <__aeabi_dmul>
 800c4a8:	4622      	mov	r2, r4
 800c4aa:	462b      	mov	r3, r5
 800c4ac:	f7f3 feb8 	bl	8000220 <__aeabi_dsub>
 800c4b0:	4604      	mov	r4, r0
 800c4b2:	460d      	mov	r5, r1
 800c4b4:	e760      	b.n	800c378 <__ieee754_rem_pio2+0x1a0>
 800c4b6:	4b1c      	ldr	r3, [pc, #112]	; (800c528 <__ieee754_rem_pio2+0x350>)
 800c4b8:	4598      	cmp	r8, r3
 800c4ba:	dd37      	ble.n	800c52c <__ieee754_rem_pio2+0x354>
 800c4bc:	ee10 2a10 	vmov	r2, s0
 800c4c0:	462b      	mov	r3, r5
 800c4c2:	4620      	mov	r0, r4
 800c4c4:	4629      	mov	r1, r5
 800c4c6:	f7f3 feab 	bl	8000220 <__aeabi_dsub>
 800c4ca:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800c4ce:	e9ca 0100 	strd	r0, r1, [sl]
 800c4d2:	e695      	b.n	800c200 <__ieee754_rem_pio2+0x28>
 800c4d4:	f3af 8000 	nop.w
 800c4d8:	54400000 	.word	0x54400000
 800c4dc:	3ff921fb 	.word	0x3ff921fb
 800c4e0:	1a626331 	.word	0x1a626331
 800c4e4:	3dd0b461 	.word	0x3dd0b461
 800c4e8:	1a600000 	.word	0x1a600000
 800c4ec:	3dd0b461 	.word	0x3dd0b461
 800c4f0:	2e037073 	.word	0x2e037073
 800c4f4:	3ba3198a 	.word	0x3ba3198a
 800c4f8:	6dc9c883 	.word	0x6dc9c883
 800c4fc:	3fe45f30 	.word	0x3fe45f30
 800c500:	2e000000 	.word	0x2e000000
 800c504:	3ba3198a 	.word	0x3ba3198a
 800c508:	252049c1 	.word	0x252049c1
 800c50c:	397b839a 	.word	0x397b839a
 800c510:	3fe921fb 	.word	0x3fe921fb
 800c514:	4002d97b 	.word	0x4002d97b
 800c518:	3ff921fb 	.word	0x3ff921fb
 800c51c:	413921fb 	.word	0x413921fb
 800c520:	3fe00000 	.word	0x3fe00000
 800c524:	0800cef0 	.word	0x0800cef0
 800c528:	7fefffff 	.word	0x7fefffff
 800c52c:	ea4f 5628 	mov.w	r6, r8, asr #20
 800c530:	f2a6 4616 	subw	r6, r6, #1046	; 0x416
 800c534:	eba8 5106 	sub.w	r1, r8, r6, lsl #20
 800c538:	4620      	mov	r0, r4
 800c53a:	460d      	mov	r5, r1
 800c53c:	f7f4 fac2 	bl	8000ac4 <__aeabi_d2iz>
 800c540:	f7f3 ffbc 	bl	80004bc <__aeabi_i2d>
 800c544:	4602      	mov	r2, r0
 800c546:	460b      	mov	r3, r1
 800c548:	4620      	mov	r0, r4
 800c54a:	4629      	mov	r1, r5
 800c54c:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800c550:	f7f3 fe66 	bl	8000220 <__aeabi_dsub>
 800c554:	4b21      	ldr	r3, [pc, #132]	; (800c5dc <__ieee754_rem_pio2+0x404>)
 800c556:	2200      	movs	r2, #0
 800c558:	f7f4 f81a 	bl	8000590 <__aeabi_dmul>
 800c55c:	460d      	mov	r5, r1
 800c55e:	4604      	mov	r4, r0
 800c560:	f7f4 fab0 	bl	8000ac4 <__aeabi_d2iz>
 800c564:	f7f3 ffaa 	bl	80004bc <__aeabi_i2d>
 800c568:	4602      	mov	r2, r0
 800c56a:	460b      	mov	r3, r1
 800c56c:	4620      	mov	r0, r4
 800c56e:	4629      	mov	r1, r5
 800c570:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800c574:	f7f3 fe54 	bl	8000220 <__aeabi_dsub>
 800c578:	4b18      	ldr	r3, [pc, #96]	; (800c5dc <__ieee754_rem_pio2+0x404>)
 800c57a:	2200      	movs	r2, #0
 800c57c:	f7f4 f808 	bl	8000590 <__aeabi_dmul>
 800c580:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800c584:	f10d 0828 	add.w	r8, sp, #40	; 0x28
 800c588:	2703      	movs	r7, #3
 800c58a:	2400      	movs	r4, #0
 800c58c:	2500      	movs	r5, #0
 800c58e:	e978 0102 	ldrd	r0, r1, [r8, #-8]!
 800c592:	4622      	mov	r2, r4
 800c594:	462b      	mov	r3, r5
 800c596:	46b9      	mov	r9, r7
 800c598:	3f01      	subs	r7, #1
 800c59a:	f7f4 fa61 	bl	8000a60 <__aeabi_dcmpeq>
 800c59e:	2800      	cmp	r0, #0
 800c5a0:	d1f5      	bne.n	800c58e <__ieee754_rem_pio2+0x3b6>
 800c5a2:	4b0f      	ldr	r3, [pc, #60]	; (800c5e0 <__ieee754_rem_pio2+0x408>)
 800c5a4:	9301      	str	r3, [sp, #4]
 800c5a6:	2302      	movs	r3, #2
 800c5a8:	9300      	str	r3, [sp, #0]
 800c5aa:	4632      	mov	r2, r6
 800c5ac:	464b      	mov	r3, r9
 800c5ae:	4651      	mov	r1, sl
 800c5b0:	a804      	add	r0, sp, #16
 800c5b2:	f000 f821 	bl	800c5f8 <__kernel_rem_pio2>
 800c5b6:	9b02      	ldr	r3, [sp, #8]
 800c5b8:	2b00      	cmp	r3, #0
 800c5ba:	4683      	mov	fp, r0
 800c5bc:	f6bf ae4c 	bge.w	800c258 <__ieee754_rem_pio2+0x80>
 800c5c0:	e9da 2100 	ldrd	r2, r1, [sl]
 800c5c4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c5c8:	e9ca 2300 	strd	r2, r3, [sl]
 800c5cc:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 800c5d0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c5d4:	e9ca 2302 	strd	r2, r3, [sl, #8]
 800c5d8:	e73f      	b.n	800c45a <__ieee754_rem_pio2+0x282>
 800c5da:	bf00      	nop
 800c5dc:	41700000 	.word	0x41700000
 800c5e0:	0800cf70 	.word	0x0800cf70

0800c5e4 <fabs>:
 800c5e4:	ec51 0b10 	vmov	r0, r1, d0
 800c5e8:	ee10 2a10 	vmov	r2, s0
 800c5ec:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800c5f0:	ec43 2b10 	vmov	d0, r2, r3
 800c5f4:	4770      	bx	lr
	...

0800c5f8 <__kernel_rem_pio2>:
 800c5f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c5fc:	ed2d 8b02 	vpush	{d8}
 800c600:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 800c604:	f112 0f14 	cmn.w	r2, #20
 800c608:	9306      	str	r3, [sp, #24]
 800c60a:	9104      	str	r1, [sp, #16]
 800c60c:	4bc2      	ldr	r3, [pc, #776]	; (800c918 <__kernel_rem_pio2+0x320>)
 800c60e:	99a4      	ldr	r1, [sp, #656]	; 0x290
 800c610:	9009      	str	r0, [sp, #36]	; 0x24
 800c612:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800c616:	9300      	str	r3, [sp, #0]
 800c618:	9b06      	ldr	r3, [sp, #24]
 800c61a:	f103 33ff 	add.w	r3, r3, #4294967295
 800c61e:	bfa8      	it	ge
 800c620:	1ed4      	subge	r4, r2, #3
 800c622:	9305      	str	r3, [sp, #20]
 800c624:	bfb2      	itee	lt
 800c626:	2400      	movlt	r4, #0
 800c628:	2318      	movge	r3, #24
 800c62a:	fb94 f4f3 	sdivge	r4, r4, r3
 800c62e:	f06f 0317 	mvn.w	r3, #23
 800c632:	fb04 3303 	mla	r3, r4, r3, r3
 800c636:	eb03 0a02 	add.w	sl, r3, r2
 800c63a:	9b00      	ldr	r3, [sp, #0]
 800c63c:	9a05      	ldr	r2, [sp, #20]
 800c63e:	ed9f 8bb2 	vldr	d8, [pc, #712]	; 800c908 <__kernel_rem_pio2+0x310>
 800c642:	eb03 0802 	add.w	r8, r3, r2
 800c646:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 800c648:	1aa7      	subs	r7, r4, r2
 800c64a:	ae20      	add	r6, sp, #128	; 0x80
 800c64c:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800c650:	2500      	movs	r5, #0
 800c652:	4545      	cmp	r5, r8
 800c654:	dd13      	ble.n	800c67e <__kernel_rem_pio2+0x86>
 800c656:	9b06      	ldr	r3, [sp, #24]
 800c658:	aa20      	add	r2, sp, #128	; 0x80
 800c65a:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 800c65e:	f50d 7be0 	add.w	fp, sp, #448	; 0x1c0
 800c662:	f04f 0800 	mov.w	r8, #0
 800c666:	9b00      	ldr	r3, [sp, #0]
 800c668:	4598      	cmp	r8, r3
 800c66a:	dc31      	bgt.n	800c6d0 <__kernel_rem_pio2+0xd8>
 800c66c:	ed9f 7ba6 	vldr	d7, [pc, #664]	; 800c908 <__kernel_rem_pio2+0x310>
 800c670:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 800c674:	ed8d 7b02 	vstr	d7, [sp, #8]
 800c678:	462f      	mov	r7, r5
 800c67a:	2600      	movs	r6, #0
 800c67c:	e01b      	b.n	800c6b6 <__kernel_rem_pio2+0xbe>
 800c67e:	42ef      	cmn	r7, r5
 800c680:	d407      	bmi.n	800c692 <__kernel_rem_pio2+0x9a>
 800c682:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800c686:	f7f3 ff19 	bl	80004bc <__aeabi_i2d>
 800c68a:	e8e6 0102 	strd	r0, r1, [r6], #8
 800c68e:	3501      	adds	r5, #1
 800c690:	e7df      	b.n	800c652 <__kernel_rem_pio2+0x5a>
 800c692:	ec51 0b18 	vmov	r0, r1, d8
 800c696:	e7f8      	b.n	800c68a <__kernel_rem_pio2+0x92>
 800c698:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c69c:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 800c6a0:	f7f3 ff76 	bl	8000590 <__aeabi_dmul>
 800c6a4:	4602      	mov	r2, r0
 800c6a6:	460b      	mov	r3, r1
 800c6a8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c6ac:	f7f3 fdba 	bl	8000224 <__adddf3>
 800c6b0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c6b4:	3601      	adds	r6, #1
 800c6b6:	9b05      	ldr	r3, [sp, #20]
 800c6b8:	429e      	cmp	r6, r3
 800c6ba:	f1a7 0708 	sub.w	r7, r7, #8
 800c6be:	ddeb      	ble.n	800c698 <__kernel_rem_pio2+0xa0>
 800c6c0:	ed9d 7b02 	vldr	d7, [sp, #8]
 800c6c4:	f108 0801 	add.w	r8, r8, #1
 800c6c8:	ecab 7b02 	vstmia	fp!, {d7}
 800c6cc:	3508      	adds	r5, #8
 800c6ce:	e7ca      	b.n	800c666 <__kernel_rem_pio2+0x6e>
 800c6d0:	9b00      	ldr	r3, [sp, #0]
 800c6d2:	aa0c      	add	r2, sp, #48	; 0x30
 800c6d4:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800c6d8:	930b      	str	r3, [sp, #44]	; 0x2c
 800c6da:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 800c6dc:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800c6e0:	9c00      	ldr	r4, [sp, #0]
 800c6e2:	930a      	str	r3, [sp, #40]	; 0x28
 800c6e4:	00e3      	lsls	r3, r4, #3
 800c6e6:	9308      	str	r3, [sp, #32]
 800c6e8:	ab98      	add	r3, sp, #608	; 0x260
 800c6ea:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800c6ee:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 800c6f2:	f10d 0830 	add.w	r8, sp, #48	; 0x30
 800c6f6:	ab70      	add	r3, sp, #448	; 0x1c0
 800c6f8:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 800c6fc:	46c3      	mov	fp, r8
 800c6fe:	46a1      	mov	r9, r4
 800c700:	f1b9 0f00 	cmp.w	r9, #0
 800c704:	f1a5 0508 	sub.w	r5, r5, #8
 800c708:	dc77      	bgt.n	800c7fa <__kernel_rem_pio2+0x202>
 800c70a:	ec47 6b10 	vmov	d0, r6, r7
 800c70e:	4650      	mov	r0, sl
 800c710:	f000 fac2 	bl	800cc98 <scalbn>
 800c714:	ec57 6b10 	vmov	r6, r7, d0
 800c718:	2200      	movs	r2, #0
 800c71a:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800c71e:	ee10 0a10 	vmov	r0, s0
 800c722:	4639      	mov	r1, r7
 800c724:	f7f3 ff34 	bl	8000590 <__aeabi_dmul>
 800c728:	ec41 0b10 	vmov	d0, r0, r1
 800c72c:	f000 fb34 	bl	800cd98 <floor>
 800c730:	4b7a      	ldr	r3, [pc, #488]	; (800c91c <__kernel_rem_pio2+0x324>)
 800c732:	ec51 0b10 	vmov	r0, r1, d0
 800c736:	2200      	movs	r2, #0
 800c738:	f7f3 ff2a 	bl	8000590 <__aeabi_dmul>
 800c73c:	4602      	mov	r2, r0
 800c73e:	460b      	mov	r3, r1
 800c740:	4630      	mov	r0, r6
 800c742:	4639      	mov	r1, r7
 800c744:	f7f3 fd6c 	bl	8000220 <__aeabi_dsub>
 800c748:	460f      	mov	r7, r1
 800c74a:	4606      	mov	r6, r0
 800c74c:	f7f4 f9ba 	bl	8000ac4 <__aeabi_d2iz>
 800c750:	9002      	str	r0, [sp, #8]
 800c752:	f7f3 feb3 	bl	80004bc <__aeabi_i2d>
 800c756:	4602      	mov	r2, r0
 800c758:	460b      	mov	r3, r1
 800c75a:	4630      	mov	r0, r6
 800c75c:	4639      	mov	r1, r7
 800c75e:	f7f3 fd5f 	bl	8000220 <__aeabi_dsub>
 800c762:	f1ba 0f00 	cmp.w	sl, #0
 800c766:	4606      	mov	r6, r0
 800c768:	460f      	mov	r7, r1
 800c76a:	dd6d      	ble.n	800c848 <__kernel_rem_pio2+0x250>
 800c76c:	1e61      	subs	r1, r4, #1
 800c76e:	ab0c      	add	r3, sp, #48	; 0x30
 800c770:	9d02      	ldr	r5, [sp, #8]
 800c772:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800c776:	f1ca 0018 	rsb	r0, sl, #24
 800c77a:	fa43 f200 	asr.w	r2, r3, r0
 800c77e:	4415      	add	r5, r2
 800c780:	4082      	lsls	r2, r0
 800c782:	1a9b      	subs	r3, r3, r2
 800c784:	aa0c      	add	r2, sp, #48	; 0x30
 800c786:	9502      	str	r5, [sp, #8]
 800c788:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 800c78c:	f1ca 0217 	rsb	r2, sl, #23
 800c790:	fa43 fb02 	asr.w	fp, r3, r2
 800c794:	f1bb 0f00 	cmp.w	fp, #0
 800c798:	dd65      	ble.n	800c866 <__kernel_rem_pio2+0x26e>
 800c79a:	9b02      	ldr	r3, [sp, #8]
 800c79c:	2200      	movs	r2, #0
 800c79e:	3301      	adds	r3, #1
 800c7a0:	9302      	str	r3, [sp, #8]
 800c7a2:	4615      	mov	r5, r2
 800c7a4:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 800c7a8:	4294      	cmp	r4, r2
 800c7aa:	f300 809f 	bgt.w	800c8ec <__kernel_rem_pio2+0x2f4>
 800c7ae:	f1ba 0f00 	cmp.w	sl, #0
 800c7b2:	dd07      	ble.n	800c7c4 <__kernel_rem_pio2+0x1cc>
 800c7b4:	f1ba 0f01 	cmp.w	sl, #1
 800c7b8:	f000 80c1 	beq.w	800c93e <__kernel_rem_pio2+0x346>
 800c7bc:	f1ba 0f02 	cmp.w	sl, #2
 800c7c0:	f000 80c7 	beq.w	800c952 <__kernel_rem_pio2+0x35a>
 800c7c4:	f1bb 0f02 	cmp.w	fp, #2
 800c7c8:	d14d      	bne.n	800c866 <__kernel_rem_pio2+0x26e>
 800c7ca:	4632      	mov	r2, r6
 800c7cc:	463b      	mov	r3, r7
 800c7ce:	4954      	ldr	r1, [pc, #336]	; (800c920 <__kernel_rem_pio2+0x328>)
 800c7d0:	2000      	movs	r0, #0
 800c7d2:	f7f3 fd25 	bl	8000220 <__aeabi_dsub>
 800c7d6:	4606      	mov	r6, r0
 800c7d8:	460f      	mov	r7, r1
 800c7da:	2d00      	cmp	r5, #0
 800c7dc:	d043      	beq.n	800c866 <__kernel_rem_pio2+0x26e>
 800c7de:	4650      	mov	r0, sl
 800c7e0:	ed9f 0b4b 	vldr	d0, [pc, #300]	; 800c910 <__kernel_rem_pio2+0x318>
 800c7e4:	f000 fa58 	bl	800cc98 <scalbn>
 800c7e8:	4630      	mov	r0, r6
 800c7ea:	4639      	mov	r1, r7
 800c7ec:	ec53 2b10 	vmov	r2, r3, d0
 800c7f0:	f7f3 fd16 	bl	8000220 <__aeabi_dsub>
 800c7f4:	4606      	mov	r6, r0
 800c7f6:	460f      	mov	r7, r1
 800c7f8:	e035      	b.n	800c866 <__kernel_rem_pio2+0x26e>
 800c7fa:	4b4a      	ldr	r3, [pc, #296]	; (800c924 <__kernel_rem_pio2+0x32c>)
 800c7fc:	2200      	movs	r2, #0
 800c7fe:	4630      	mov	r0, r6
 800c800:	4639      	mov	r1, r7
 800c802:	f7f3 fec5 	bl	8000590 <__aeabi_dmul>
 800c806:	f7f4 f95d 	bl	8000ac4 <__aeabi_d2iz>
 800c80a:	f7f3 fe57 	bl	80004bc <__aeabi_i2d>
 800c80e:	4602      	mov	r2, r0
 800c810:	460b      	mov	r3, r1
 800c812:	ec43 2b18 	vmov	d8, r2, r3
 800c816:	4b44      	ldr	r3, [pc, #272]	; (800c928 <__kernel_rem_pio2+0x330>)
 800c818:	2200      	movs	r2, #0
 800c81a:	f7f3 feb9 	bl	8000590 <__aeabi_dmul>
 800c81e:	4602      	mov	r2, r0
 800c820:	460b      	mov	r3, r1
 800c822:	4630      	mov	r0, r6
 800c824:	4639      	mov	r1, r7
 800c826:	f7f3 fcfb 	bl	8000220 <__aeabi_dsub>
 800c82a:	f7f4 f94b 	bl	8000ac4 <__aeabi_d2iz>
 800c82e:	e9d5 2300 	ldrd	r2, r3, [r5]
 800c832:	f84b 0b04 	str.w	r0, [fp], #4
 800c836:	ec51 0b18 	vmov	r0, r1, d8
 800c83a:	f7f3 fcf3 	bl	8000224 <__adddf3>
 800c83e:	f109 39ff 	add.w	r9, r9, #4294967295
 800c842:	4606      	mov	r6, r0
 800c844:	460f      	mov	r7, r1
 800c846:	e75b      	b.n	800c700 <__kernel_rem_pio2+0x108>
 800c848:	d106      	bne.n	800c858 <__kernel_rem_pio2+0x260>
 800c84a:	1e63      	subs	r3, r4, #1
 800c84c:	aa0c      	add	r2, sp, #48	; 0x30
 800c84e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c852:	ea4f 5be3 	mov.w	fp, r3, asr #23
 800c856:	e79d      	b.n	800c794 <__kernel_rem_pio2+0x19c>
 800c858:	4b34      	ldr	r3, [pc, #208]	; (800c92c <__kernel_rem_pio2+0x334>)
 800c85a:	2200      	movs	r2, #0
 800c85c:	f7f4 f91e 	bl	8000a9c <__aeabi_dcmpge>
 800c860:	2800      	cmp	r0, #0
 800c862:	d140      	bne.n	800c8e6 <__kernel_rem_pio2+0x2ee>
 800c864:	4683      	mov	fp, r0
 800c866:	2200      	movs	r2, #0
 800c868:	2300      	movs	r3, #0
 800c86a:	4630      	mov	r0, r6
 800c86c:	4639      	mov	r1, r7
 800c86e:	f7f4 f8f7 	bl	8000a60 <__aeabi_dcmpeq>
 800c872:	2800      	cmp	r0, #0
 800c874:	f000 80c1 	beq.w	800c9fa <__kernel_rem_pio2+0x402>
 800c878:	1e65      	subs	r5, r4, #1
 800c87a:	462b      	mov	r3, r5
 800c87c:	2200      	movs	r2, #0
 800c87e:	9900      	ldr	r1, [sp, #0]
 800c880:	428b      	cmp	r3, r1
 800c882:	da6d      	bge.n	800c960 <__kernel_rem_pio2+0x368>
 800c884:	2a00      	cmp	r2, #0
 800c886:	f000 808a 	beq.w	800c99e <__kernel_rem_pio2+0x3a6>
 800c88a:	ab0c      	add	r3, sp, #48	; 0x30
 800c88c:	f1aa 0a18 	sub.w	sl, sl, #24
 800c890:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 800c894:	2b00      	cmp	r3, #0
 800c896:	f000 80ae 	beq.w	800c9f6 <__kernel_rem_pio2+0x3fe>
 800c89a:	4650      	mov	r0, sl
 800c89c:	ed9f 0b1c 	vldr	d0, [pc, #112]	; 800c910 <__kernel_rem_pio2+0x318>
 800c8a0:	f000 f9fa 	bl	800cc98 <scalbn>
 800c8a4:	1c6b      	adds	r3, r5, #1
 800c8a6:	00da      	lsls	r2, r3, #3
 800c8a8:	9205      	str	r2, [sp, #20]
 800c8aa:	ec57 6b10 	vmov	r6, r7, d0
 800c8ae:	aa70      	add	r2, sp, #448	; 0x1c0
 800c8b0:	f8df 9070 	ldr.w	r9, [pc, #112]	; 800c924 <__kernel_rem_pio2+0x32c>
 800c8b4:	eb02 0ac3 	add.w	sl, r2, r3, lsl #3
 800c8b8:	462c      	mov	r4, r5
 800c8ba:	f04f 0800 	mov.w	r8, #0
 800c8be:	2c00      	cmp	r4, #0
 800c8c0:	f280 80d4 	bge.w	800ca6c <__kernel_rem_pio2+0x474>
 800c8c4:	462c      	mov	r4, r5
 800c8c6:	2c00      	cmp	r4, #0
 800c8c8:	f2c0 8102 	blt.w	800cad0 <__kernel_rem_pio2+0x4d8>
 800c8cc:	4b18      	ldr	r3, [pc, #96]	; (800c930 <__kernel_rem_pio2+0x338>)
 800c8ce:	461e      	mov	r6, r3
 800c8d0:	ab70      	add	r3, sp, #448	; 0x1c0
 800c8d2:	eb03 08c4 	add.w	r8, r3, r4, lsl #3
 800c8d6:	1b2b      	subs	r3, r5, r4
 800c8d8:	f04f 0900 	mov.w	r9, #0
 800c8dc:	f04f 0a00 	mov.w	sl, #0
 800c8e0:	2700      	movs	r7, #0
 800c8e2:	9306      	str	r3, [sp, #24]
 800c8e4:	e0e6      	b.n	800cab4 <__kernel_rem_pio2+0x4bc>
 800c8e6:	f04f 0b02 	mov.w	fp, #2
 800c8ea:	e756      	b.n	800c79a <__kernel_rem_pio2+0x1a2>
 800c8ec:	f8d8 3000 	ldr.w	r3, [r8]
 800c8f0:	bb05      	cbnz	r5, 800c934 <__kernel_rem_pio2+0x33c>
 800c8f2:	b123      	cbz	r3, 800c8fe <__kernel_rem_pio2+0x306>
 800c8f4:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 800c8f8:	f8c8 3000 	str.w	r3, [r8]
 800c8fc:	2301      	movs	r3, #1
 800c8fe:	3201      	adds	r2, #1
 800c900:	f108 0804 	add.w	r8, r8, #4
 800c904:	461d      	mov	r5, r3
 800c906:	e74f      	b.n	800c7a8 <__kernel_rem_pio2+0x1b0>
	...
 800c914:	3ff00000 	.word	0x3ff00000
 800c918:	0800d0b8 	.word	0x0800d0b8
 800c91c:	40200000 	.word	0x40200000
 800c920:	3ff00000 	.word	0x3ff00000
 800c924:	3e700000 	.word	0x3e700000
 800c928:	41700000 	.word	0x41700000
 800c92c:	3fe00000 	.word	0x3fe00000
 800c930:	0800d078 	.word	0x0800d078
 800c934:	1acb      	subs	r3, r1, r3
 800c936:	f8c8 3000 	str.w	r3, [r8]
 800c93a:	462b      	mov	r3, r5
 800c93c:	e7df      	b.n	800c8fe <__kernel_rem_pio2+0x306>
 800c93e:	1e62      	subs	r2, r4, #1
 800c940:	ab0c      	add	r3, sp, #48	; 0x30
 800c942:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c946:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800c94a:	a90c      	add	r1, sp, #48	; 0x30
 800c94c:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800c950:	e738      	b.n	800c7c4 <__kernel_rem_pio2+0x1cc>
 800c952:	1e62      	subs	r2, r4, #1
 800c954:	ab0c      	add	r3, sp, #48	; 0x30
 800c956:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c95a:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800c95e:	e7f4      	b.n	800c94a <__kernel_rem_pio2+0x352>
 800c960:	a90c      	add	r1, sp, #48	; 0x30
 800c962:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800c966:	3b01      	subs	r3, #1
 800c968:	430a      	orrs	r2, r1
 800c96a:	e788      	b.n	800c87e <__kernel_rem_pio2+0x286>
 800c96c:	3301      	adds	r3, #1
 800c96e:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 800c972:	2900      	cmp	r1, #0
 800c974:	d0fa      	beq.n	800c96c <__kernel_rem_pio2+0x374>
 800c976:	9a08      	ldr	r2, [sp, #32]
 800c978:	f502 7218 	add.w	r2, r2, #608	; 0x260
 800c97c:	446a      	add	r2, sp
 800c97e:	3a98      	subs	r2, #152	; 0x98
 800c980:	9208      	str	r2, [sp, #32]
 800c982:	9a06      	ldr	r2, [sp, #24]
 800c984:	a920      	add	r1, sp, #128	; 0x80
 800c986:	18a2      	adds	r2, r4, r2
 800c988:	18e3      	adds	r3, r4, r3
 800c98a:	f104 0801 	add.w	r8, r4, #1
 800c98e:	eb01 05c2 	add.w	r5, r1, r2, lsl #3
 800c992:	9302      	str	r3, [sp, #8]
 800c994:	9b02      	ldr	r3, [sp, #8]
 800c996:	4543      	cmp	r3, r8
 800c998:	da04      	bge.n	800c9a4 <__kernel_rem_pio2+0x3ac>
 800c99a:	461c      	mov	r4, r3
 800c99c:	e6a2      	b.n	800c6e4 <__kernel_rem_pio2+0xec>
 800c99e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800c9a0:	2301      	movs	r3, #1
 800c9a2:	e7e4      	b.n	800c96e <__kernel_rem_pio2+0x376>
 800c9a4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c9a6:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 800c9aa:	f7f3 fd87 	bl	80004bc <__aeabi_i2d>
 800c9ae:	e8e5 0102 	strd	r0, r1, [r5], #8
 800c9b2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c9b4:	46ab      	mov	fp, r5
 800c9b6:	461c      	mov	r4, r3
 800c9b8:	f04f 0900 	mov.w	r9, #0
 800c9bc:	2600      	movs	r6, #0
 800c9be:	2700      	movs	r7, #0
 800c9c0:	9b05      	ldr	r3, [sp, #20]
 800c9c2:	4599      	cmp	r9, r3
 800c9c4:	dd06      	ble.n	800c9d4 <__kernel_rem_pio2+0x3dc>
 800c9c6:	9b08      	ldr	r3, [sp, #32]
 800c9c8:	e8e3 6702 	strd	r6, r7, [r3], #8
 800c9cc:	f108 0801 	add.w	r8, r8, #1
 800c9d0:	9308      	str	r3, [sp, #32]
 800c9d2:	e7df      	b.n	800c994 <__kernel_rem_pio2+0x39c>
 800c9d4:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 800c9d8:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 800c9dc:	f7f3 fdd8 	bl	8000590 <__aeabi_dmul>
 800c9e0:	4602      	mov	r2, r0
 800c9e2:	460b      	mov	r3, r1
 800c9e4:	4630      	mov	r0, r6
 800c9e6:	4639      	mov	r1, r7
 800c9e8:	f7f3 fc1c 	bl	8000224 <__adddf3>
 800c9ec:	f109 0901 	add.w	r9, r9, #1
 800c9f0:	4606      	mov	r6, r0
 800c9f2:	460f      	mov	r7, r1
 800c9f4:	e7e4      	b.n	800c9c0 <__kernel_rem_pio2+0x3c8>
 800c9f6:	3d01      	subs	r5, #1
 800c9f8:	e747      	b.n	800c88a <__kernel_rem_pio2+0x292>
 800c9fa:	ec47 6b10 	vmov	d0, r6, r7
 800c9fe:	f1ca 0000 	rsb	r0, sl, #0
 800ca02:	f000 f949 	bl	800cc98 <scalbn>
 800ca06:	ec57 6b10 	vmov	r6, r7, d0
 800ca0a:	4ba0      	ldr	r3, [pc, #640]	; (800cc8c <__kernel_rem_pio2+0x694>)
 800ca0c:	ee10 0a10 	vmov	r0, s0
 800ca10:	2200      	movs	r2, #0
 800ca12:	4639      	mov	r1, r7
 800ca14:	f7f4 f842 	bl	8000a9c <__aeabi_dcmpge>
 800ca18:	b1f8      	cbz	r0, 800ca5a <__kernel_rem_pio2+0x462>
 800ca1a:	4b9d      	ldr	r3, [pc, #628]	; (800cc90 <__kernel_rem_pio2+0x698>)
 800ca1c:	2200      	movs	r2, #0
 800ca1e:	4630      	mov	r0, r6
 800ca20:	4639      	mov	r1, r7
 800ca22:	f7f3 fdb5 	bl	8000590 <__aeabi_dmul>
 800ca26:	f7f4 f84d 	bl	8000ac4 <__aeabi_d2iz>
 800ca2a:	4680      	mov	r8, r0
 800ca2c:	f7f3 fd46 	bl	80004bc <__aeabi_i2d>
 800ca30:	4b96      	ldr	r3, [pc, #600]	; (800cc8c <__kernel_rem_pio2+0x694>)
 800ca32:	2200      	movs	r2, #0
 800ca34:	f7f3 fdac 	bl	8000590 <__aeabi_dmul>
 800ca38:	460b      	mov	r3, r1
 800ca3a:	4602      	mov	r2, r0
 800ca3c:	4639      	mov	r1, r7
 800ca3e:	4630      	mov	r0, r6
 800ca40:	f7f3 fbee 	bl	8000220 <__aeabi_dsub>
 800ca44:	f7f4 f83e 	bl	8000ac4 <__aeabi_d2iz>
 800ca48:	1c65      	adds	r5, r4, #1
 800ca4a:	ab0c      	add	r3, sp, #48	; 0x30
 800ca4c:	f10a 0a18 	add.w	sl, sl, #24
 800ca50:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800ca54:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 800ca58:	e71f      	b.n	800c89a <__kernel_rem_pio2+0x2a2>
 800ca5a:	4630      	mov	r0, r6
 800ca5c:	4639      	mov	r1, r7
 800ca5e:	f7f4 f831 	bl	8000ac4 <__aeabi_d2iz>
 800ca62:	ab0c      	add	r3, sp, #48	; 0x30
 800ca64:	4625      	mov	r5, r4
 800ca66:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800ca6a:	e716      	b.n	800c89a <__kernel_rem_pio2+0x2a2>
 800ca6c:	ab0c      	add	r3, sp, #48	; 0x30
 800ca6e:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 800ca72:	f7f3 fd23 	bl	80004bc <__aeabi_i2d>
 800ca76:	4632      	mov	r2, r6
 800ca78:	463b      	mov	r3, r7
 800ca7a:	f7f3 fd89 	bl	8000590 <__aeabi_dmul>
 800ca7e:	4642      	mov	r2, r8
 800ca80:	e96a 0102 	strd	r0, r1, [sl, #-8]!
 800ca84:	464b      	mov	r3, r9
 800ca86:	4630      	mov	r0, r6
 800ca88:	4639      	mov	r1, r7
 800ca8a:	f7f3 fd81 	bl	8000590 <__aeabi_dmul>
 800ca8e:	3c01      	subs	r4, #1
 800ca90:	4606      	mov	r6, r0
 800ca92:	460f      	mov	r7, r1
 800ca94:	e713      	b.n	800c8be <__kernel_rem_pio2+0x2c6>
 800ca96:	e8f8 2302 	ldrd	r2, r3, [r8], #8
 800ca9a:	e8f6 0102 	ldrd	r0, r1, [r6], #8
 800ca9e:	f7f3 fd77 	bl	8000590 <__aeabi_dmul>
 800caa2:	4602      	mov	r2, r0
 800caa4:	460b      	mov	r3, r1
 800caa6:	4648      	mov	r0, r9
 800caa8:	4651      	mov	r1, sl
 800caaa:	f7f3 fbbb 	bl	8000224 <__adddf3>
 800caae:	3701      	adds	r7, #1
 800cab0:	4681      	mov	r9, r0
 800cab2:	468a      	mov	sl, r1
 800cab4:	9b00      	ldr	r3, [sp, #0]
 800cab6:	429f      	cmp	r7, r3
 800cab8:	dc02      	bgt.n	800cac0 <__kernel_rem_pio2+0x4c8>
 800caba:	9b06      	ldr	r3, [sp, #24]
 800cabc:	429f      	cmp	r7, r3
 800cabe:	ddea      	ble.n	800ca96 <__kernel_rem_pio2+0x49e>
 800cac0:	9a06      	ldr	r2, [sp, #24]
 800cac2:	ab48      	add	r3, sp, #288	; 0x120
 800cac4:	eb03 06c2 	add.w	r6, r3, r2, lsl #3
 800cac8:	e9c6 9a00 	strd	r9, sl, [r6]
 800cacc:	3c01      	subs	r4, #1
 800cace:	e6fa      	b.n	800c8c6 <__kernel_rem_pio2+0x2ce>
 800cad0:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 800cad2:	2b02      	cmp	r3, #2
 800cad4:	dc0b      	bgt.n	800caee <__kernel_rem_pio2+0x4f6>
 800cad6:	2b00      	cmp	r3, #0
 800cad8:	dc39      	bgt.n	800cb4e <__kernel_rem_pio2+0x556>
 800cada:	d05d      	beq.n	800cb98 <__kernel_rem_pio2+0x5a0>
 800cadc:	9b02      	ldr	r3, [sp, #8]
 800cade:	f003 0007 	and.w	r0, r3, #7
 800cae2:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 800cae6:	ecbd 8b02 	vpop	{d8}
 800caea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800caee:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 800caf0:	2b03      	cmp	r3, #3
 800caf2:	d1f3      	bne.n	800cadc <__kernel_rem_pio2+0x4e4>
 800caf4:	9b05      	ldr	r3, [sp, #20]
 800caf6:	9500      	str	r5, [sp, #0]
 800caf8:	f503 7318 	add.w	r3, r3, #608	; 0x260
 800cafc:	eb0d 0403 	add.w	r4, sp, r3
 800cb00:	f5a4 74a4 	sub.w	r4, r4, #328	; 0x148
 800cb04:	46a2      	mov	sl, r4
 800cb06:	9b00      	ldr	r3, [sp, #0]
 800cb08:	2b00      	cmp	r3, #0
 800cb0a:	f1aa 0a08 	sub.w	sl, sl, #8
 800cb0e:	dc69      	bgt.n	800cbe4 <__kernel_rem_pio2+0x5ec>
 800cb10:	46aa      	mov	sl, r5
 800cb12:	f1ba 0f01 	cmp.w	sl, #1
 800cb16:	f1a4 0408 	sub.w	r4, r4, #8
 800cb1a:	f300 8083 	bgt.w	800cc24 <__kernel_rem_pio2+0x62c>
 800cb1e:	9c05      	ldr	r4, [sp, #20]
 800cb20:	ab48      	add	r3, sp, #288	; 0x120
 800cb22:	441c      	add	r4, r3
 800cb24:	2000      	movs	r0, #0
 800cb26:	2100      	movs	r1, #0
 800cb28:	2d01      	cmp	r5, #1
 800cb2a:	f300 809a 	bgt.w	800cc62 <__kernel_rem_pio2+0x66a>
 800cb2e:	e9dd 7848 	ldrd	r7, r8, [sp, #288]	; 0x120
 800cb32:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 800cb36:	f1bb 0f00 	cmp.w	fp, #0
 800cb3a:	f040 8098 	bne.w	800cc6e <__kernel_rem_pio2+0x676>
 800cb3e:	9b04      	ldr	r3, [sp, #16]
 800cb40:	e9c3 7800 	strd	r7, r8, [r3]
 800cb44:	e9c3 5602 	strd	r5, r6, [r3, #8]
 800cb48:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800cb4c:	e7c6      	b.n	800cadc <__kernel_rem_pio2+0x4e4>
 800cb4e:	9e05      	ldr	r6, [sp, #20]
 800cb50:	ab48      	add	r3, sp, #288	; 0x120
 800cb52:	441e      	add	r6, r3
 800cb54:	462c      	mov	r4, r5
 800cb56:	2000      	movs	r0, #0
 800cb58:	2100      	movs	r1, #0
 800cb5a:	2c00      	cmp	r4, #0
 800cb5c:	da33      	bge.n	800cbc6 <__kernel_rem_pio2+0x5ce>
 800cb5e:	f1bb 0f00 	cmp.w	fp, #0
 800cb62:	d036      	beq.n	800cbd2 <__kernel_rem_pio2+0x5da>
 800cb64:	4602      	mov	r2, r0
 800cb66:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800cb6a:	9c04      	ldr	r4, [sp, #16]
 800cb6c:	e9c4 2300 	strd	r2, r3, [r4]
 800cb70:	4602      	mov	r2, r0
 800cb72:	460b      	mov	r3, r1
 800cb74:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 800cb78:	f7f3 fb52 	bl	8000220 <__aeabi_dsub>
 800cb7c:	ae4a      	add	r6, sp, #296	; 0x128
 800cb7e:	2401      	movs	r4, #1
 800cb80:	42a5      	cmp	r5, r4
 800cb82:	da29      	bge.n	800cbd8 <__kernel_rem_pio2+0x5e0>
 800cb84:	f1bb 0f00 	cmp.w	fp, #0
 800cb88:	d002      	beq.n	800cb90 <__kernel_rem_pio2+0x598>
 800cb8a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800cb8e:	4619      	mov	r1, r3
 800cb90:	9b04      	ldr	r3, [sp, #16]
 800cb92:	e9c3 0102 	strd	r0, r1, [r3, #8]
 800cb96:	e7a1      	b.n	800cadc <__kernel_rem_pio2+0x4e4>
 800cb98:	9c05      	ldr	r4, [sp, #20]
 800cb9a:	ab48      	add	r3, sp, #288	; 0x120
 800cb9c:	441c      	add	r4, r3
 800cb9e:	2000      	movs	r0, #0
 800cba0:	2100      	movs	r1, #0
 800cba2:	2d00      	cmp	r5, #0
 800cba4:	da09      	bge.n	800cbba <__kernel_rem_pio2+0x5c2>
 800cba6:	f1bb 0f00 	cmp.w	fp, #0
 800cbaa:	d002      	beq.n	800cbb2 <__kernel_rem_pio2+0x5ba>
 800cbac:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800cbb0:	4619      	mov	r1, r3
 800cbb2:	9b04      	ldr	r3, [sp, #16]
 800cbb4:	e9c3 0100 	strd	r0, r1, [r3]
 800cbb8:	e790      	b.n	800cadc <__kernel_rem_pio2+0x4e4>
 800cbba:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800cbbe:	f7f3 fb31 	bl	8000224 <__adddf3>
 800cbc2:	3d01      	subs	r5, #1
 800cbc4:	e7ed      	b.n	800cba2 <__kernel_rem_pio2+0x5aa>
 800cbc6:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
 800cbca:	f7f3 fb2b 	bl	8000224 <__adddf3>
 800cbce:	3c01      	subs	r4, #1
 800cbd0:	e7c3      	b.n	800cb5a <__kernel_rem_pio2+0x562>
 800cbd2:	4602      	mov	r2, r0
 800cbd4:	460b      	mov	r3, r1
 800cbd6:	e7c8      	b.n	800cb6a <__kernel_rem_pio2+0x572>
 800cbd8:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 800cbdc:	f7f3 fb22 	bl	8000224 <__adddf3>
 800cbe0:	3401      	adds	r4, #1
 800cbe2:	e7cd      	b.n	800cb80 <__kernel_rem_pio2+0x588>
 800cbe4:	e9da 8900 	ldrd	r8, r9, [sl]
 800cbe8:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 800cbec:	9b00      	ldr	r3, [sp, #0]
 800cbee:	3b01      	subs	r3, #1
 800cbf0:	9300      	str	r3, [sp, #0]
 800cbf2:	4632      	mov	r2, r6
 800cbf4:	463b      	mov	r3, r7
 800cbf6:	4640      	mov	r0, r8
 800cbf8:	4649      	mov	r1, r9
 800cbfa:	f7f3 fb13 	bl	8000224 <__adddf3>
 800cbfe:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800cc02:	4602      	mov	r2, r0
 800cc04:	460b      	mov	r3, r1
 800cc06:	4640      	mov	r0, r8
 800cc08:	4649      	mov	r1, r9
 800cc0a:	f7f3 fb09 	bl	8000220 <__aeabi_dsub>
 800cc0e:	4632      	mov	r2, r6
 800cc10:	463b      	mov	r3, r7
 800cc12:	f7f3 fb07 	bl	8000224 <__adddf3>
 800cc16:	ed9d 7b06 	vldr	d7, [sp, #24]
 800cc1a:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800cc1e:	ed8a 7b00 	vstr	d7, [sl]
 800cc22:	e770      	b.n	800cb06 <__kernel_rem_pio2+0x50e>
 800cc24:	e9d4 8900 	ldrd	r8, r9, [r4]
 800cc28:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 800cc2c:	4640      	mov	r0, r8
 800cc2e:	4632      	mov	r2, r6
 800cc30:	463b      	mov	r3, r7
 800cc32:	4649      	mov	r1, r9
 800cc34:	f7f3 faf6 	bl	8000224 <__adddf3>
 800cc38:	e9cd 0100 	strd	r0, r1, [sp]
 800cc3c:	4602      	mov	r2, r0
 800cc3e:	460b      	mov	r3, r1
 800cc40:	4640      	mov	r0, r8
 800cc42:	4649      	mov	r1, r9
 800cc44:	f7f3 faec 	bl	8000220 <__aeabi_dsub>
 800cc48:	4632      	mov	r2, r6
 800cc4a:	463b      	mov	r3, r7
 800cc4c:	f7f3 faea 	bl	8000224 <__adddf3>
 800cc50:	ed9d 7b00 	vldr	d7, [sp]
 800cc54:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800cc58:	ed84 7b00 	vstr	d7, [r4]
 800cc5c:	f10a 3aff 	add.w	sl, sl, #4294967295
 800cc60:	e757      	b.n	800cb12 <__kernel_rem_pio2+0x51a>
 800cc62:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800cc66:	f7f3 fadd 	bl	8000224 <__adddf3>
 800cc6a:	3d01      	subs	r5, #1
 800cc6c:	e75c      	b.n	800cb28 <__kernel_rem_pio2+0x530>
 800cc6e:	9b04      	ldr	r3, [sp, #16]
 800cc70:	9a04      	ldr	r2, [sp, #16]
 800cc72:	601f      	str	r7, [r3, #0]
 800cc74:	f108 4400 	add.w	r4, r8, #2147483648	; 0x80000000
 800cc78:	605c      	str	r4, [r3, #4]
 800cc7a:	609d      	str	r5, [r3, #8]
 800cc7c:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800cc80:	60d3      	str	r3, [r2, #12]
 800cc82:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800cc86:	6110      	str	r0, [r2, #16]
 800cc88:	6153      	str	r3, [r2, #20]
 800cc8a:	e727      	b.n	800cadc <__kernel_rem_pio2+0x4e4>
 800cc8c:	41700000 	.word	0x41700000
 800cc90:	3e700000 	.word	0x3e700000
 800cc94:	00000000 	.word	0x00000000

0800cc98 <scalbn>:
 800cc98:	b570      	push	{r4, r5, r6, lr}
 800cc9a:	ec55 4b10 	vmov	r4, r5, d0
 800cc9e:	f3c5 510a 	ubfx	r1, r5, #20, #11
 800cca2:	4606      	mov	r6, r0
 800cca4:	462b      	mov	r3, r5
 800cca6:	b999      	cbnz	r1, 800ccd0 <scalbn+0x38>
 800cca8:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800ccac:	4323      	orrs	r3, r4
 800ccae:	d03f      	beq.n	800cd30 <scalbn+0x98>
 800ccb0:	4b35      	ldr	r3, [pc, #212]	; (800cd88 <scalbn+0xf0>)
 800ccb2:	4629      	mov	r1, r5
 800ccb4:	ee10 0a10 	vmov	r0, s0
 800ccb8:	2200      	movs	r2, #0
 800ccba:	f7f3 fc69 	bl	8000590 <__aeabi_dmul>
 800ccbe:	4b33      	ldr	r3, [pc, #204]	; (800cd8c <scalbn+0xf4>)
 800ccc0:	429e      	cmp	r6, r3
 800ccc2:	4604      	mov	r4, r0
 800ccc4:	460d      	mov	r5, r1
 800ccc6:	da10      	bge.n	800ccea <scalbn+0x52>
 800ccc8:	a327      	add	r3, pc, #156	; (adr r3, 800cd68 <scalbn+0xd0>)
 800ccca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ccce:	e01f      	b.n	800cd10 <scalbn+0x78>
 800ccd0:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800ccd4:	4291      	cmp	r1, r2
 800ccd6:	d10c      	bne.n	800ccf2 <scalbn+0x5a>
 800ccd8:	ee10 2a10 	vmov	r2, s0
 800ccdc:	4620      	mov	r0, r4
 800ccde:	4629      	mov	r1, r5
 800cce0:	f7f3 faa0 	bl	8000224 <__adddf3>
 800cce4:	4604      	mov	r4, r0
 800cce6:	460d      	mov	r5, r1
 800cce8:	e022      	b.n	800cd30 <scalbn+0x98>
 800ccea:	460b      	mov	r3, r1
 800ccec:	f3c1 510a 	ubfx	r1, r1, #20, #11
 800ccf0:	3936      	subs	r1, #54	; 0x36
 800ccf2:	f24c 3250 	movw	r2, #50000	; 0xc350
 800ccf6:	4296      	cmp	r6, r2
 800ccf8:	dd0d      	ble.n	800cd16 <scalbn+0x7e>
 800ccfa:	2d00      	cmp	r5, #0
 800ccfc:	a11c      	add	r1, pc, #112	; (adr r1, 800cd70 <scalbn+0xd8>)
 800ccfe:	e9d1 0100 	ldrd	r0, r1, [r1]
 800cd02:	da02      	bge.n	800cd0a <scalbn+0x72>
 800cd04:	a11c      	add	r1, pc, #112	; (adr r1, 800cd78 <scalbn+0xe0>)
 800cd06:	e9d1 0100 	ldrd	r0, r1, [r1]
 800cd0a:	a319      	add	r3, pc, #100	; (adr r3, 800cd70 <scalbn+0xd8>)
 800cd0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd10:	f7f3 fc3e 	bl	8000590 <__aeabi_dmul>
 800cd14:	e7e6      	b.n	800cce4 <scalbn+0x4c>
 800cd16:	1872      	adds	r2, r6, r1
 800cd18:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800cd1c:	428a      	cmp	r2, r1
 800cd1e:	dcec      	bgt.n	800ccfa <scalbn+0x62>
 800cd20:	2a00      	cmp	r2, #0
 800cd22:	dd08      	ble.n	800cd36 <scalbn+0x9e>
 800cd24:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800cd28:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800cd2c:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800cd30:	ec45 4b10 	vmov	d0, r4, r5
 800cd34:	bd70      	pop	{r4, r5, r6, pc}
 800cd36:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800cd3a:	da08      	bge.n	800cd4e <scalbn+0xb6>
 800cd3c:	2d00      	cmp	r5, #0
 800cd3e:	a10a      	add	r1, pc, #40	; (adr r1, 800cd68 <scalbn+0xd0>)
 800cd40:	e9d1 0100 	ldrd	r0, r1, [r1]
 800cd44:	dac0      	bge.n	800ccc8 <scalbn+0x30>
 800cd46:	a10e      	add	r1, pc, #56	; (adr r1, 800cd80 <scalbn+0xe8>)
 800cd48:	e9d1 0100 	ldrd	r0, r1, [r1]
 800cd4c:	e7bc      	b.n	800ccc8 <scalbn+0x30>
 800cd4e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800cd52:	3236      	adds	r2, #54	; 0x36
 800cd54:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800cd58:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800cd5c:	4620      	mov	r0, r4
 800cd5e:	4b0c      	ldr	r3, [pc, #48]	; (800cd90 <scalbn+0xf8>)
 800cd60:	2200      	movs	r2, #0
 800cd62:	e7d5      	b.n	800cd10 <scalbn+0x78>
 800cd64:	f3af 8000 	nop.w
 800cd68:	c2f8f359 	.word	0xc2f8f359
 800cd6c:	01a56e1f 	.word	0x01a56e1f
 800cd70:	8800759c 	.word	0x8800759c
 800cd74:	7e37e43c 	.word	0x7e37e43c
 800cd78:	8800759c 	.word	0x8800759c
 800cd7c:	fe37e43c 	.word	0xfe37e43c
 800cd80:	c2f8f359 	.word	0xc2f8f359
 800cd84:	81a56e1f 	.word	0x81a56e1f
 800cd88:	43500000 	.word	0x43500000
 800cd8c:	ffff3cb0 	.word	0xffff3cb0
 800cd90:	3c900000 	.word	0x3c900000
 800cd94:	00000000 	.word	0x00000000

0800cd98 <floor>:
 800cd98:	ec51 0b10 	vmov	r0, r1, d0
 800cd9c:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800cda0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cda4:	f2a3 36ff 	subw	r6, r3, #1023	; 0x3ff
 800cda8:	2e13      	cmp	r6, #19
 800cdaa:	ee10 5a10 	vmov	r5, s0
 800cdae:	ee10 8a10 	vmov	r8, s0
 800cdb2:	460c      	mov	r4, r1
 800cdb4:	dc31      	bgt.n	800ce1a <floor+0x82>
 800cdb6:	2e00      	cmp	r6, #0
 800cdb8:	da14      	bge.n	800cde4 <floor+0x4c>
 800cdba:	a333      	add	r3, pc, #204	; (adr r3, 800ce88 <floor+0xf0>)
 800cdbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cdc0:	f7f3 fa30 	bl	8000224 <__adddf3>
 800cdc4:	2200      	movs	r2, #0
 800cdc6:	2300      	movs	r3, #0
 800cdc8:	f7f3 fe72 	bl	8000ab0 <__aeabi_dcmpgt>
 800cdcc:	b138      	cbz	r0, 800cdde <floor+0x46>
 800cdce:	2c00      	cmp	r4, #0
 800cdd0:	da53      	bge.n	800ce7a <floor+0xe2>
 800cdd2:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 800cdd6:	4325      	orrs	r5, r4
 800cdd8:	d052      	beq.n	800ce80 <floor+0xe8>
 800cdda:	4c2d      	ldr	r4, [pc, #180]	; (800ce90 <floor+0xf8>)
 800cddc:	2500      	movs	r5, #0
 800cdde:	4621      	mov	r1, r4
 800cde0:	4628      	mov	r0, r5
 800cde2:	e024      	b.n	800ce2e <floor+0x96>
 800cde4:	4f2b      	ldr	r7, [pc, #172]	; (800ce94 <floor+0xfc>)
 800cde6:	4137      	asrs	r7, r6
 800cde8:	ea01 0307 	and.w	r3, r1, r7
 800cdec:	4303      	orrs	r3, r0
 800cdee:	d01e      	beq.n	800ce2e <floor+0x96>
 800cdf0:	a325      	add	r3, pc, #148	; (adr r3, 800ce88 <floor+0xf0>)
 800cdf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cdf6:	f7f3 fa15 	bl	8000224 <__adddf3>
 800cdfa:	2200      	movs	r2, #0
 800cdfc:	2300      	movs	r3, #0
 800cdfe:	f7f3 fe57 	bl	8000ab0 <__aeabi_dcmpgt>
 800ce02:	2800      	cmp	r0, #0
 800ce04:	d0eb      	beq.n	800cdde <floor+0x46>
 800ce06:	2c00      	cmp	r4, #0
 800ce08:	bfbe      	ittt	lt
 800ce0a:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800ce0e:	4133      	asrlt	r3, r6
 800ce10:	18e4      	addlt	r4, r4, r3
 800ce12:	ea24 0407 	bic.w	r4, r4, r7
 800ce16:	2500      	movs	r5, #0
 800ce18:	e7e1      	b.n	800cdde <floor+0x46>
 800ce1a:	2e33      	cmp	r6, #51	; 0x33
 800ce1c:	dd0b      	ble.n	800ce36 <floor+0x9e>
 800ce1e:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800ce22:	d104      	bne.n	800ce2e <floor+0x96>
 800ce24:	ee10 2a10 	vmov	r2, s0
 800ce28:	460b      	mov	r3, r1
 800ce2a:	f7f3 f9fb 	bl	8000224 <__adddf3>
 800ce2e:	ec41 0b10 	vmov	d0, r0, r1
 800ce32:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ce36:	f2a3 4313 	subw	r3, r3, #1043	; 0x413
 800ce3a:	f04f 37ff 	mov.w	r7, #4294967295
 800ce3e:	40df      	lsrs	r7, r3
 800ce40:	4238      	tst	r0, r7
 800ce42:	d0f4      	beq.n	800ce2e <floor+0x96>
 800ce44:	a310      	add	r3, pc, #64	; (adr r3, 800ce88 <floor+0xf0>)
 800ce46:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ce4a:	f7f3 f9eb 	bl	8000224 <__adddf3>
 800ce4e:	2200      	movs	r2, #0
 800ce50:	2300      	movs	r3, #0
 800ce52:	f7f3 fe2d 	bl	8000ab0 <__aeabi_dcmpgt>
 800ce56:	2800      	cmp	r0, #0
 800ce58:	d0c1      	beq.n	800cdde <floor+0x46>
 800ce5a:	2c00      	cmp	r4, #0
 800ce5c:	da0a      	bge.n	800ce74 <floor+0xdc>
 800ce5e:	2e14      	cmp	r6, #20
 800ce60:	d101      	bne.n	800ce66 <floor+0xce>
 800ce62:	3401      	adds	r4, #1
 800ce64:	e006      	b.n	800ce74 <floor+0xdc>
 800ce66:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800ce6a:	2301      	movs	r3, #1
 800ce6c:	40b3      	lsls	r3, r6
 800ce6e:	441d      	add	r5, r3
 800ce70:	45a8      	cmp	r8, r5
 800ce72:	d8f6      	bhi.n	800ce62 <floor+0xca>
 800ce74:	ea25 0507 	bic.w	r5, r5, r7
 800ce78:	e7b1      	b.n	800cdde <floor+0x46>
 800ce7a:	2500      	movs	r5, #0
 800ce7c:	462c      	mov	r4, r5
 800ce7e:	e7ae      	b.n	800cdde <floor+0x46>
 800ce80:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 800ce84:	e7ab      	b.n	800cdde <floor+0x46>
 800ce86:	bf00      	nop
 800ce88:	8800759c 	.word	0x8800759c
 800ce8c:	7e37e43c 	.word	0x7e37e43c
 800ce90:	bff00000 	.word	0xbff00000
 800ce94:	000fffff 	.word	0x000fffff

0800ce98 <_init>:
 800ce98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ce9a:	bf00      	nop
 800ce9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ce9e:	bc08      	pop	{r3}
 800cea0:	469e      	mov	lr, r3
 800cea2:	4770      	bx	lr

0800cea4 <_fini>:
 800cea4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cea6:	bf00      	nop
 800cea8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ceaa:	bc08      	pop	{r3}
 800ceac:	469e      	mov	lr, r3
 800ceae:	4770      	bx	lr
